{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Project \"Piper\" User Documentation \u00b6 Easily set up continuous delivery in your software development using SAP technologies. Continuous delivery is a method to develop software with short feedback cycles. It is applicable to projects both on the SAP Business Technology Platform (BTP) and on SAP on-premise platforms. SAP implements tooling for continuous delivery in project \"Piper\". What you get \u00b6 To get started with project \"Piper\", you can choose from the following offerings: A set of predefined pipelines that build, test, and deploy your code changes You can choose between the following use cases: ABAP Environment Pipeline General Purpose Pipeline A shared library that contains reusable step implementations, which enable you to customize the preconfigured pipelines or to build your own ones, if necessary A standalone command line utility for Linux and a GitHub Action Note: This version is still in early development and might not contain all features of the Jenkins library, yet. Feel free to use it and provide feedback . A set of Docker images to easily set up a CI/CD environment using sophisticated life-cycle management To find out which offering is right for you, we recommend you to look at the preconfigured pipelines first. In most cases, you don't need to build your own pipelines - you can use the ready-made ones and adapt them according to your needs, if necessary. If you don't need to care about the underlying infrastructure of your pipelines, you can use the SAP Continuous Integration and Delivery service on SAP BTP. It offers an easy, UI-guided way to set up continuous integration and delivery without hosting your own Jenkins instance. The support infrastructure for SAP Continuous Integration and Delivery is provided by SAP according to the Service Level Agreements (SLAs). Project \"Piper\" offers community support using GitHub issues and pull requests. Users are free to contribute to the repository independently. See Contributing . For more information about the CI/CD solutions offered by SAP, see SAP Solutions for Continuous Integration and Delivery . To learn more about the continuous integration and delivery offerings by SAP, see Continuous Integration and Delivery by SAP and Continuous Integration and Delivery by SAP Learning Journey . The Best-Practice Way: Ready-Made Pipelines \u00b6 Use the general purpose pipeline to build a standalone SAP BTP application or an SAP Cloud Application Programming Model application project. It supports various technologies and programming languages. The Do-It-Yourself Way: Customized Pipelines \u00b6 The shared library contains building blocks for your own pipelines using Jenkins pipelines to implement best practice processes. For more information, see the Scenarios section from the navigation pane. The best practice pipelines are based on the general concepts of Pipelines as Code, as introduced in Jenkins 2 . This way, you can optimize your pipelines with the help of the Jenkins community. You can run the best practice Jenkins pipelines out-of-the-box, use them for project-specific adaptations, or create your own pipelines from scratch using the shared library. For an example, see the Build and Deploy SAPUI5 or SAP Fiori Applications on SAP Business Technology Platform (SAP BTP) with Jenkins scenario. Extensibility \u00b6 For the vast majority of standard projects, the features of the ready-made pipelines should be enough to implement Continuous Delivery with little effort in a best-practice compliant way. If you require more flexibility, our documentation on Extensibility discusses available options. API \u00b6 All steps ( vars and resources directory) are intended to be used by Pipelines and are considered API. All the classes / groovy-scripts contained in the src folder are by default not part of the API and are subjected to change without prior notice. Types and methods annotated with @API are considered to be API, used e.g. from other shared libraries. Changes to those methods/types needs to be announced, discussed and agreed.","title":"Home"},{"location":"#project-piper-user-documentation","text":"Easily set up continuous delivery in your software development using SAP technologies. Continuous delivery is a method to develop software with short feedback cycles. It is applicable to projects both on the SAP Business Technology Platform (BTP) and on SAP on-premise platforms. SAP implements tooling for continuous delivery in project \"Piper\".","title":"Project \"Piper\" User Documentation"},{"location":"#what-you-get","text":"To get started with project \"Piper\", you can choose from the following offerings: A set of predefined pipelines that build, test, and deploy your code changes You can choose between the following use cases: ABAP Environment Pipeline General Purpose Pipeline A shared library that contains reusable step implementations, which enable you to customize the preconfigured pipelines or to build your own ones, if necessary A standalone command line utility for Linux and a GitHub Action Note: This version is still in early development and might not contain all features of the Jenkins library, yet. Feel free to use it and provide feedback . A set of Docker images to easily set up a CI/CD environment using sophisticated life-cycle management To find out which offering is right for you, we recommend you to look at the preconfigured pipelines first. In most cases, you don't need to build your own pipelines - you can use the ready-made ones and adapt them according to your needs, if necessary. If you don't need to care about the underlying infrastructure of your pipelines, you can use the SAP Continuous Integration and Delivery service on SAP BTP. It offers an easy, UI-guided way to set up continuous integration and delivery without hosting your own Jenkins instance. The support infrastructure for SAP Continuous Integration and Delivery is provided by SAP according to the Service Level Agreements (SLAs). Project \"Piper\" offers community support using GitHub issues and pull requests. Users are free to contribute to the repository independently. See Contributing . For more information about the CI/CD solutions offered by SAP, see SAP Solutions for Continuous Integration and Delivery . To learn more about the continuous integration and delivery offerings by SAP, see Continuous Integration and Delivery by SAP and Continuous Integration and Delivery by SAP Learning Journey .","title":"What you get"},{"location":"#the-best-practice-way-ready-made-pipelines","text":"Use the general purpose pipeline to build a standalone SAP BTP application or an SAP Cloud Application Programming Model application project. It supports various technologies and programming languages.","title":"The Best-Practice Way: Ready-Made Pipelines"},{"location":"#the-do-it-yourself-way-customized-pipelines","text":"The shared library contains building blocks for your own pipelines using Jenkins pipelines to implement best practice processes. For more information, see the Scenarios section from the navigation pane. The best practice pipelines are based on the general concepts of Pipelines as Code, as introduced in Jenkins 2 . This way, you can optimize your pipelines with the help of the Jenkins community. You can run the best practice Jenkins pipelines out-of-the-box, use them for project-specific adaptations, or create your own pipelines from scratch using the shared library. For an example, see the Build and Deploy SAPUI5 or SAP Fiori Applications on SAP Business Technology Platform (SAP BTP) with Jenkins scenario.","title":"The Do-It-Yourself Way: Customized Pipelines"},{"location":"#extensibility","text":"For the vast majority of standard projects, the features of the ready-made pipelines should be enough to implement Continuous Delivery with little effort in a best-practice compliant way. If you require more flexibility, our documentation on Extensibility discusses available options.","title":"Extensibility"},{"location":"#api","text":"All steps ( vars and resources directory) are intended to be used by Pipelines and are considered API. All the classes / groovy-scripts contained in the src folder are by default not part of the API and are subjected to change without prior notice. Types and methods annotated with @API are considered to be API, used e.g. from other shared libraries. Changes to those methods/types needs to be announced, discussed and agreed.","title":"API"},{"location":"configuration/","text":"Configuration \u00b6 Configure your project through a yml-file, which is located at .pipeline/config.yml in the master branch of your source code repository. Your configuration inherits from the default configuration located at https://github.com/SAP/jenkins-library/blob/master/resources/default_pipeline_environment.yml . Adding custom parameters Please note that adding custom parameters to the configuration is at your own risk. We may introduce new parameters at any time which may clash with your custom parameters. Configuration of the project \"Piper\" steps, as well as project \"Piper\" templates, can be done in a hierarchical manner. Directly passed step parameters will always take precedence over other configuration values and defaults Stage configuration parameters define a Jenkins pipeline stage-dependent set of parameters (e.g. deployment options for the Acceptance stage) Step configuration defines how steps behave in general (e.g. step cloudFoundryDeploy ) General configuration parameters define parameters which are available across step boundaries Custom default configuration provided by the user through a reference in the customDefaults parameter of the project configuration Default configuration comes with the project \"Piper\" library and is always available Collecting telemetry data \u00b6 To improve this Jenkins library, we are collecting telemetry data. Data is sent using com.sap.piper.pushToSWA Following data (non-personal) is collected for example: Hashed job url, e.g. 4944f745e03f5f79daf0001eec9276ce351d3035 hash calculation is done in your Jenkins server and no original values are transmitted Name of library step which has been executed, like e.g. artifactSetVersion Certain parameters of the executed steps, e.g. buildTool=maven We store the telemetry data for no longer than 6 months on premises of SAP SE. Disable collection of telemetry data If you do not want to send telemetry data you can easily deactivate this. This is done with either of the following two ways: General deactivation in your .pipeline/config.yml file by setting the configuration parameter general -> collectTelemetryData: false (default setting can be found in the library defaults ). Please note: this will only take effect in all steps if you run setupCommonPipelineEnvironment at the beginning of your pipeline Individual deactivation per step by passing the parameter collectTelemetryData: false , like e.g. setVersion script:this, collectTelemetryData: false Example configuration \u00b6 general : gitSshKeyCredentialsId : GitHub_Test_SSH steps : cloudFoundryDeploy : deployTool : 'cf_native' cloudFoundry : org : 'testOrg' space : 'testSpace' credentialsId : 'MY_CF_CREDENTIALSID_IN_JENKINS' newmanExecute : newmanCollection : 'myNewmanCollection.file' newmanEnvironment : 'myNewmanEnvironment' newmanGlobals : 'myNewmanGlobals' Sending log data to the SAP Alert Notification service for SAP BTP \u00b6 The SAP Alert Notification service for SAP BTP allows users to define certain delivery channels, for example, e-mail or triggering of HTTP requests, to receive notifications from pipeline events. If the alert notification service service-key is properly configured in \"Piper\", any \"Piper\" step implemented in golang will send log data to the alert notification service backend for log levels higher than warnings, i.e. warnings, error, fatal and panic. The SAP Alert Notification service event properties are defined depending on the log entry content as follows: eventType : the type of event type (defaults to 'Piper', but can be overwritten with the event template) eventTimestamp : the time of the log entry severity and category : the event severity and the event category depends on the log level: log level severity category info INFO NOTICE debug INFO NOTICE warn WARNING ALERT error ERROR EXCEPTION fatal FATAL EXCEPTION panic FATAL EXCEPTION subject : short description of the event (defaults to 'Step sends ', but can be overwritten with the event template) body : the log message priority : (optional) an integer number in the range [1:1000] (not set by \"Piper\", but can be set with the event template) tags : optional key-value pairs. The following are set by \"Piper\": ans:correlationId : a unique correlation ID of the pipeline run (defaults to the URL of that pipeline run, but can be overwritten with the event template) ans:sourceEventId : also set to the \"Piper\" correlation ID (can also be overwritten with the event template) cicd:stepName : the \"Piper\" step name cicd:logLevel : the \"Piper\" log level cicd:errorCategory : the \"Piper\" error category, if available resource : the following default properties are set by \"Piper\": resourceType : resource type identifier (defaults to 'Pipeline', but can be overwritten with the event template) resourceName : unique resource name (defaults to 'Pipeline', can be overwritten with the event template) resourceInstance : (optional) resource instance identifier (not set by \"Piper\", can be set with the event template) tags : optional key-value pairs. The following event properties cannot be set and are instead set by the SAP Alert Notification service: region , regionType , resource.globalAccount , resource.subAccount and resource.resourceGroup For more information and an example of the structure of an alert notification service event, see SAP Alert Notification Service Events in the SAP Help Portal. SAP Alert Notification service configuration \u00b6 There are two options that can be configured: the mandatory service-key and the optional event template. Service-Key \u00b6 The SAP Alert Notification service service-key needs to be present in the environment, where the \"Piper\" binary is run. See the Credential Management guide in the SAP Help Portal on how to retrieve an alert notification service service-key. The environment variable used is: PIPER_ansHookServiceKey . If Jenkins is used to run \"Piper\", you can use the Jenkins credential store to store the alert notification service service-key as a \"Secret Text\" credential. Provide the credential ID in a custom defaults file ( described below ) as follows: hooks : ans : serviceKeyCredentialsId : 'my_ANS_Service_Key' !!! warning It is not possible to configure the above in the project configuration file, i.e. in .pipeline/config.yaml Event template \u00b6 You can also create an event template in JSON format to overwrite or add event details to the default. To do this, provide the JSON string directly in the environment where the \"Piper\" binary is run. The environment variable used in this case is: PIPER_ansEventTemplate . For example in unix: export PIPER_ansEventTemplate = '{\"priority\": 999}' The event body, timestamp, severity and category cannot be set via the template. They are always set from the log entry. Collecting telemetry and logging data for Splunk \u00b6 Splunk gives the ability to analyze any kind of logging information and to visualize the retrieved information in dashboards. To do so, we support sending telemetry information as well as logging information in case of a failed step to a Splunk Http Event Collector (HEC) endpoint. The following data will be sent to the endpoint if activated: Hashed pipeline URL Hashed Build URL StageName StepName ExitCode Duration (of each step) ErrorCode ErrorCategory CorrelationID (not hashed) CommitHash (Head commit hash of current build.) Branch GitOwner GitRepository The information will be sent to the specified Splunk endpoint in the config file. By default, the Splunk mechanism is deactivated and gets only activated if you add the following to your config: general : gitSshKeyCredentialsId : GitHub_Test_SSH steps : cloudFoundryDeploy : deployTool : 'cf_native' cloudFoundry : org : 'testOrg' space : 'testSpace' credentialsId : 'MY_CF_CREDENTIALSID_IN_JENKINS' hooks : splunk : dsn : 'YOUR SPLUNK HEC ENDPOINT' token : 'YOURTOKEN' index : 'SPLUNK INDEX' sendLogs : true sendLogs is a boolean, if set to true, the Splunk hook will send the collected logs in case of a failure of the step. If no failure occurred, no logs will be sent. How does the sent data look alike \u00b6 In case of a failure, we send the collected messages in the field messages and the telemetry information in telemetry . By default, piper sends the log messages in batches. The default length for the messages is 1000 . As an example: If you encounter an error in a step that created 5k log messages, piper will send five messages containing the messages and the telemetry information. { \"messages\" : [ { \"time\" : \"2021-04-28T17:59:19.9376454Z\" , \"message\" : \"Project example pipeline exists...\" , \"data\" : { \"library\" : \"\" , \"stepName\" : \"checkmarxExecuteScan\" } } ], \"telemetry\" : { \"PipelineUrlHash\" : \"73ece565feca07fa34330c2430af2b9f01ba5903\" , \"BuildUrlHash\" : \"ec0aada9cc310547ca2938d450f4a4c789dea886\" , \"StageName\" : \"\" , \"StepName\" : \"checkmarxExecuteScan\" , \"ExitCode\" : \"1\" , \"Duration\" : \"52118\" , \"ErrorCode\" : \"1\" , \"ErrorCategory\" : \"undefined\" , \"CorrelationID\" : \"https://example-jaasinstance.corp/job/myApp/job/microservice1/job/master/10/\" , \"CommitHash\" : \"961ed5cd98fb1e37415a91b46a5b9bdcef81b002\" , \"Branch\" : \"master\" , \"GitOwner\" : \"piper\" , \"GitRepository\" : \"piper-splunk\" } } Access to the configuration from custom scripts \u00b6 Configuration is loaded into commonPipelineEnvironment during step setupCommonPipelineEnvironment . You can access the configuration values via commonPipelineEnvironment.configuration which will return you the complete configuration map. Thus following access is for example possible (accessing gitSshKeyCredentialsId from general section): commonPipelineEnvironment . configuration . general . gitSshKeyCredentialsId Access to configuration in custom library steps \u00b6 Within library steps the ConfigurationHelper object is used. You can see its usage in all the Piper steps, for example newmanExecute . Custom default configuration \u00b6 For projects that are composed of multiple repositories (microservices), it might be desired to provide custom default configurations. To do that, create a YAML file which is accessible from your CI/CD environment and configure it in your project configuration. For example, the custom default configuration can be stored in a GitHub repository and accessed via the \"raw\" URL: customDefaults : [ 'https://my.github.local/raw/someorg/custom-defaults/master/backend-service.yml' ] general : ... Note, the parameter customDefaults is required to be a list of strings and needs to be defined as a separate section of the project configuration. In addition, the item order in the list implies the precedence, i.e., the last item of the customDefaults list has the highest precedence. It is important to ensure that the HTTP response body is proper YAML, as the pipeline will attempt to parse it. Anonymous read access to the custom-defaults repository is required. The custom default configuration is merged with the project's .pipeline/config.yml . Note, the project's config takes precedence, so you can override the custom default configuration in your project's local configuration. This might be useful to provide a default value that needs to be changed only in some projects. An overview of the configuration hierarchy is given at the beginning of this page. If you have different types of projects, they might require different custom default configurations. For example, you might not require all projects to have a certain code check (like Whitesource, etc.) active. This can be achieved by having multiple YAML files in the custom-defaults repository. Configure the URL to the respective configuration file in the projects as described above.","title":"Configuration"},{"location":"configuration/#configuration","text":"Configure your project through a yml-file, which is located at .pipeline/config.yml in the master branch of your source code repository. Your configuration inherits from the default configuration located at https://github.com/SAP/jenkins-library/blob/master/resources/default_pipeline_environment.yml . Adding custom parameters Please note that adding custom parameters to the configuration is at your own risk. We may introduce new parameters at any time which may clash with your custom parameters. Configuration of the project \"Piper\" steps, as well as project \"Piper\" templates, can be done in a hierarchical manner. Directly passed step parameters will always take precedence over other configuration values and defaults Stage configuration parameters define a Jenkins pipeline stage-dependent set of parameters (e.g. deployment options for the Acceptance stage) Step configuration defines how steps behave in general (e.g. step cloudFoundryDeploy ) General configuration parameters define parameters which are available across step boundaries Custom default configuration provided by the user through a reference in the customDefaults parameter of the project configuration Default configuration comes with the project \"Piper\" library and is always available","title":"Configuration"},{"location":"configuration/#collecting-telemetry-data","text":"To improve this Jenkins library, we are collecting telemetry data. Data is sent using com.sap.piper.pushToSWA Following data (non-personal) is collected for example: Hashed job url, e.g. 4944f745e03f5f79daf0001eec9276ce351d3035 hash calculation is done in your Jenkins server and no original values are transmitted Name of library step which has been executed, like e.g. artifactSetVersion Certain parameters of the executed steps, e.g. buildTool=maven We store the telemetry data for no longer than 6 months on premises of SAP SE. Disable collection of telemetry data If you do not want to send telemetry data you can easily deactivate this. This is done with either of the following two ways: General deactivation in your .pipeline/config.yml file by setting the configuration parameter general -> collectTelemetryData: false (default setting can be found in the library defaults ). Please note: this will only take effect in all steps if you run setupCommonPipelineEnvironment at the beginning of your pipeline Individual deactivation per step by passing the parameter collectTelemetryData: false , like e.g. setVersion script:this, collectTelemetryData: false","title":"Collecting telemetry data"},{"location":"configuration/#example-configuration","text":"general : gitSshKeyCredentialsId : GitHub_Test_SSH steps : cloudFoundryDeploy : deployTool : 'cf_native' cloudFoundry : org : 'testOrg' space : 'testSpace' credentialsId : 'MY_CF_CREDENTIALSID_IN_JENKINS' newmanExecute : newmanCollection : 'myNewmanCollection.file' newmanEnvironment : 'myNewmanEnvironment' newmanGlobals : 'myNewmanGlobals'","title":"Example configuration"},{"location":"configuration/#sending-log-data-to-the-sap-alert-notification-service-for-sap-btp","text":"The SAP Alert Notification service for SAP BTP allows users to define certain delivery channels, for example, e-mail or triggering of HTTP requests, to receive notifications from pipeline events. If the alert notification service service-key is properly configured in \"Piper\", any \"Piper\" step implemented in golang will send log data to the alert notification service backend for log levels higher than warnings, i.e. warnings, error, fatal and panic. The SAP Alert Notification service event properties are defined depending on the log entry content as follows: eventType : the type of event type (defaults to 'Piper', but can be overwritten with the event template) eventTimestamp : the time of the log entry severity and category : the event severity and the event category depends on the log level: log level severity category info INFO NOTICE debug INFO NOTICE warn WARNING ALERT error ERROR EXCEPTION fatal FATAL EXCEPTION panic FATAL EXCEPTION subject : short description of the event (defaults to 'Step sends ', but can be overwritten with the event template) body : the log message priority : (optional) an integer number in the range [1:1000] (not set by \"Piper\", but can be set with the event template) tags : optional key-value pairs. The following are set by \"Piper\": ans:correlationId : a unique correlation ID of the pipeline run (defaults to the URL of that pipeline run, but can be overwritten with the event template) ans:sourceEventId : also set to the \"Piper\" correlation ID (can also be overwritten with the event template) cicd:stepName : the \"Piper\" step name cicd:logLevel : the \"Piper\" log level cicd:errorCategory : the \"Piper\" error category, if available resource : the following default properties are set by \"Piper\": resourceType : resource type identifier (defaults to 'Pipeline', but can be overwritten with the event template) resourceName : unique resource name (defaults to 'Pipeline', can be overwritten with the event template) resourceInstance : (optional) resource instance identifier (not set by \"Piper\", can be set with the event template) tags : optional key-value pairs. The following event properties cannot be set and are instead set by the SAP Alert Notification service: region , regionType , resource.globalAccount , resource.subAccount and resource.resourceGroup For more information and an example of the structure of an alert notification service event, see SAP Alert Notification Service Events in the SAP Help Portal.","title":"Sending log data to the SAP Alert Notification service for SAP BTP"},{"location":"configuration/#sap-alert-notification-service-configuration","text":"There are two options that can be configured: the mandatory service-key and the optional event template.","title":"SAP Alert Notification service configuration"},{"location":"configuration/#service-key","text":"The SAP Alert Notification service service-key needs to be present in the environment, where the \"Piper\" binary is run. See the Credential Management guide in the SAP Help Portal on how to retrieve an alert notification service service-key. The environment variable used is: PIPER_ansHookServiceKey . If Jenkins is used to run \"Piper\", you can use the Jenkins credential store to store the alert notification service service-key as a \"Secret Text\" credential. Provide the credential ID in a custom defaults file ( described below ) as follows: hooks : ans : serviceKeyCredentialsId : 'my_ANS_Service_Key' !!! warning It is not possible to configure the above in the project configuration file, i.e. in .pipeline/config.yaml","title":"Service-Key"},{"location":"configuration/#event-template","text":"You can also create an event template in JSON format to overwrite or add event details to the default. To do this, provide the JSON string directly in the environment where the \"Piper\" binary is run. The environment variable used in this case is: PIPER_ansEventTemplate . For example in unix: export PIPER_ansEventTemplate = '{\"priority\": 999}' The event body, timestamp, severity and category cannot be set via the template. They are always set from the log entry.","title":"Event template"},{"location":"configuration/#collecting-telemetry-and-logging-data-for-splunk","text":"Splunk gives the ability to analyze any kind of logging information and to visualize the retrieved information in dashboards. To do so, we support sending telemetry information as well as logging information in case of a failed step to a Splunk Http Event Collector (HEC) endpoint. The following data will be sent to the endpoint if activated: Hashed pipeline URL Hashed Build URL StageName StepName ExitCode Duration (of each step) ErrorCode ErrorCategory CorrelationID (not hashed) CommitHash (Head commit hash of current build.) Branch GitOwner GitRepository The information will be sent to the specified Splunk endpoint in the config file. By default, the Splunk mechanism is deactivated and gets only activated if you add the following to your config: general : gitSshKeyCredentialsId : GitHub_Test_SSH steps : cloudFoundryDeploy : deployTool : 'cf_native' cloudFoundry : org : 'testOrg' space : 'testSpace' credentialsId : 'MY_CF_CREDENTIALSID_IN_JENKINS' hooks : splunk : dsn : 'YOUR SPLUNK HEC ENDPOINT' token : 'YOURTOKEN' index : 'SPLUNK INDEX' sendLogs : true sendLogs is a boolean, if set to true, the Splunk hook will send the collected logs in case of a failure of the step. If no failure occurred, no logs will be sent.","title":"Collecting telemetry and logging data for Splunk"},{"location":"configuration/#how-does-the-sent-data-look-alike","text":"In case of a failure, we send the collected messages in the field messages and the telemetry information in telemetry . By default, piper sends the log messages in batches. The default length for the messages is 1000 . As an example: If you encounter an error in a step that created 5k log messages, piper will send five messages containing the messages and the telemetry information. { \"messages\" : [ { \"time\" : \"2021-04-28T17:59:19.9376454Z\" , \"message\" : \"Project example pipeline exists...\" , \"data\" : { \"library\" : \"\" , \"stepName\" : \"checkmarxExecuteScan\" } } ], \"telemetry\" : { \"PipelineUrlHash\" : \"73ece565feca07fa34330c2430af2b9f01ba5903\" , \"BuildUrlHash\" : \"ec0aada9cc310547ca2938d450f4a4c789dea886\" , \"StageName\" : \"\" , \"StepName\" : \"checkmarxExecuteScan\" , \"ExitCode\" : \"1\" , \"Duration\" : \"52118\" , \"ErrorCode\" : \"1\" , \"ErrorCategory\" : \"undefined\" , \"CorrelationID\" : \"https://example-jaasinstance.corp/job/myApp/job/microservice1/job/master/10/\" , \"CommitHash\" : \"961ed5cd98fb1e37415a91b46a5b9bdcef81b002\" , \"Branch\" : \"master\" , \"GitOwner\" : \"piper\" , \"GitRepository\" : \"piper-splunk\" } }","title":"How does the sent data look alike"},{"location":"configuration/#access-to-the-configuration-from-custom-scripts","text":"Configuration is loaded into commonPipelineEnvironment during step setupCommonPipelineEnvironment . You can access the configuration values via commonPipelineEnvironment.configuration which will return you the complete configuration map. Thus following access is for example possible (accessing gitSshKeyCredentialsId from general section): commonPipelineEnvironment . configuration . general . gitSshKeyCredentialsId","title":"Access to the configuration from custom scripts"},{"location":"configuration/#access-to-configuration-in-custom-library-steps","text":"Within library steps the ConfigurationHelper object is used. You can see its usage in all the Piper steps, for example newmanExecute .","title":"Access to configuration in custom library steps"},{"location":"configuration/#custom-default-configuration","text":"For projects that are composed of multiple repositories (microservices), it might be desired to provide custom default configurations. To do that, create a YAML file which is accessible from your CI/CD environment and configure it in your project configuration. For example, the custom default configuration can be stored in a GitHub repository and accessed via the \"raw\" URL: customDefaults : [ 'https://my.github.local/raw/someorg/custom-defaults/master/backend-service.yml' ] general : ... Note, the parameter customDefaults is required to be a list of strings and needs to be defined as a separate section of the project configuration. In addition, the item order in the list implies the precedence, i.e., the last item of the customDefaults list has the highest precedence. It is important to ensure that the HTTP response body is proper YAML, as the pipeline will attempt to parse it. Anonymous read access to the custom-defaults repository is required. The custom default configuration is merged with the project's .pipeline/config.yml . Note, the project's config takes precedence, so you can override the custom default configuration in your project's local configuration. This might be useful to provide a default value that needs to be changed only in some projects. An overview of the configuration hierarchy is given at the beginning of this page. If you have different types of projects, they might require different custom default configurations. For example, you might not require all projects to have a certain code check (like Whitesource, etc.) active. This can be achieved by having multiple YAML files in the custom-defaults repository. Configure the URL to the respective configuration file in the projects as described above.","title":"Custom default configuration"},{"location":"extensibility/","text":"Extensibility \u00b6 When using one of the ready-made pipelines of project \"Piper\", you don't have to write custom pipeline code. The pipelines are centrally maintained and can be used with only a small amount of declarative configuration as documented here . For the vast majority of standard projects, the features of the ready-made pipelines should be enough to implement Continuous Delivery with little effort in a best-practice compliant way. If you miss a feature or discover a bug in one of our pipelines, please see if there is already an open issue in our GitHub repository and if not, open a new one. In some cases, it's not desirable to include specialized features in the ready-made pipelines. However, you can still benefit from their qualities, if you address your requirements through an extension . Extensions are custom bits of pipeline coding, which you can use to implement special requirements. This page explains extensibility options in project \"Piper\". For a high level overview of available options and how to interface with them, see this figure: Before building extensions, please make sure that there is no alternative that works better for you. Options for extensibility, in the order in which we recommend considering them: 1. Extend individual stages \u00b6 In this option, you use the centrally maintained pipeline but can change individual stages, if required. To do so, create a file called <StageName>.groovy (for example, Acceptance.groovy or lint.groovy ) in .pipeline/extensions/ in the source code repository of your application. For this, you need to know the technical identifiers for stage names. For the general purpose pipeline, you can find them in the pipeline source file . The centrally maintained pipeline checks if such a file exists and if it does, executes it. A parameter of type Map that contains the following keys is passed to the extension: script : Defines the global script environment of the Jenkinsfile run. This makes sure that the correct configuration environment can be passed to project \"Piper\" steps and allows access to the commonPipelineEnvironment , for example. When calling a piper step in an extension, the script object has to be passed using script: params.script . originalStage : Allows you to execute the \"original\" stage at any place in your script. If omitting a call to originalStage() , only your code is executed. stageName : Name of the current stage config : Configuration of the stage and general config (including all defaults) Here is a simple example for such an extension, which you can use as a starting point: void call ( Map params ) { //access stage name echo \"Start - Extension for stage: ${params.stageName}\" //access config echo \"Current stage config: ${params.config}\" //execute original stage as defined in the template params . originalStage () //access overall pipeline script object echo \"Branch: ${params.script.commonPipelineEnvironment.gitBranch}\" echo \"End - Extension for stage: ${params.stageName}\" } return this return this Don't forget the return this , which is required at the end of all extension scripts. This is due to how Groovy loads scripts internally. Init stage cannot be extended Please note that the Init stage also checks out your current repository including your extensions. Therefore, it is not possible to use extensions on this stage. Disable Extensions Execution By default, there is a possibility for extensions to get executed. In case of disabling it, please ensure to set PIPER_DISABLE_EXTENSIONS to true . Setting this parameter to true excludes the execution of extension files in .pipeline/extensions/<StageName>.groovy . Practical example \u00b6 For a more practical example, you can use extensions in the general purpose pipeline to add custom linters to your pipeline. A linter is a tool that can check the source code for certain stylistic criteria. Many teams choose to use a linter to ensure a common programming style. For example, if you want to use Checkstyle in your codebase, you might use an extension similar to this one in a file called .pipeline/extensions/Build.groovy in your project: def call ( Map parameters ) { parameters . originalStage () // Runs the build stage with built-in linters mavenExecute ( script: parameters . script , flags: [ '--batch-mode' ], pomPath: 'application/pom.xml' , m2Path: s4SdkGlobals . m2Directory , goals: [ 'checkstyle:checkstyle' ], ) recordIssues skipBlames: true , enabledForFailure: true , aggregatingResults: false , tool: checkStyle () } return this This code snippet has three components, let's see what is happening here: Firstly, we run the original stage. This builds the application and optionally runs ESLint on JavaScript/TypeScript source files and static checks using PMD and SpotBugs tools as these are standard features of General Purpose Pipeline. Secondly, we run the checkstyle maven plugin using the mavenExecute Jenkins library step as provided by project \"Piper\". This serves as an example for how flexible you can re-use what project \"Piper\" already provides in your extension. Finally, we use the Jenkins Warnings NG plugin and its step recordIssues to make the findings visible in the Jenkins user interface. This example can be adapted for other linters of your choice. Be sure to checkout the Library steps section of this documentation if you want to do this. Project \"Piper\" provides some basic building blocks such as dockerExecute and the already mentioned mavenExecute which might be helpful. 2. Modified Ready-Made Pipeline \u00b6 This option describes how you can copy and paste one of the centrally maintained pipelines to make changes to it that are not possible otherwise. For example, you can't change the order of stages and the stages that run in parallel or add new stages to a centrally maintained pipeline. A modified Ready-Made Pipeline allows you to modify your declarative pipeline based on the syntax Jenkins provides . This might be done for an individual project (in the Jenkinsfile ), or in a separate Git repository so it can be used for multiple projects. Single project \u00b6 The default Jenkinsfile of centrally maintained pipelines does nothing else but loading the pipeline and running it. This is convenient but limits the modifiable aspects of the pipeline. If one of your projects uses the pipeline, the easiest way to do this modification is to copy the pipeline into your Jenkinsfile . The basic structure of your Jenkinsfile should be the following: @Library ( /* Shared library definition, see below */ ) _ call script: this void call ( parameters ) { // Your pipeline code based on our ready-made pipelines } The actual pipeline code (the call method in the listing above) can be found here: General purpose pipeline Use the correct shared library definition Which shared library you need depends on the pipeline you're using. For the general purpose pipeline , you need 'piper-lib-os' . For the version identifier, please see the section How to stay up-to-date in this document. Multiple projects \u00b6 If you have multiple projects that share a similar architecture, it might be desirable to share one modified pipeline amongst them. Similar to what you can do in an individual Jenkinsfile , you can copy the pipeline to your own shared library and modify it. To do this, create a new Git repository in your preferred Git hosting service. It must be compliant to how Jenkins shared libraries are built . In a nutshell, this means that you need a vars directory inside which you can place a copy of your preferred pipeline. A minimal example of such a library could have the following directory structure: ./vars/myCustomPipeline.groovy ./README.md myCustomPipeline.groovy contains the modified pipeline code of the general purpose pipeline . Note The name of your custom pipeline must differ from the other pipelines provided by project \"Piper\" because Jenkins requires names across multiple libraries to be unique. This library must be placed in a Git repository, which is available for Jenkins and must be configured in Jenkins as documented here . The following screenshot shows an example of the configuration in Jenkins. Note that the name (1) must be the same as the one you use in your Jenkinsfile . The Jenkinsfile of your individual projects would look similar to the following: @Library ([ 'piper-lib-os' , 'my-own-pipeline' ]) _ myCustomPipeline script: this Be sure to adapt the names and version identifiers accordingly, as described in How to stay up-to-date . How to stay up-to-date \u00b6 Regardless of which of the above options you choose, one downside of this approach is that your pipeline will be out of sync with the centrally maintained pipelines at some point in time. We strongly recommend doing as little modification as possible to fulfil your requirements. Please be aware that stages may have dependencies on each other. Don't depend on stage implementation details Your pipeline should treat stages as a black box, the stage implementations are not a published API and may be subject to change at any time. Avoid accidental breaking changes By default, Jenkins uses the master branch of shared libraries. This way, you're always automatically using the latest and greatest version. The downside is that in rare cases, breaking changes might happen. Another potential issue is that your builds are not repeatable , that means building the same version of your application twice might have a different result. For those reasons, you might want to consider to fix versions to a released version like in this example: @Library('my-shared-library@v1.0') _ Find the most recent release for the jenkins-library on GitHub. To stay up to date with the latest releases, you can \"watch\" releases for those repositories on GitHub . When to go with a modified ready-made pipeline This option is right for you if none of the provided ready-made pipelines serves your purpose, and individual stage extensions don't provide enough flexibility. Advanced tips and information \u00b6 When you consider adding additional capabilities, your first stop should be the Jenkins Pipeline Steps Reference . Here you get an overview of what kind of capabilities are already available and a list of related parameters, which you can use to customize the existing implementation. The provided information should help you understand and extend the functionality of your pipeline. 3. New Pipeline from Scratch \u00b6 Since project \"Piper\" fully builds on Jenkins Pipelines as Code , you can also go with your own pipeline from scratch in a Jenkinsfile . Decoupling If you choose this option, you will be decoupled from the innovations provided with project \"Piper\", unless you re-use stages (as indicated above under 2. Modified ready-made pipelines ), for example. We recommend using this only when none of the other provided options suit your use case.","title":"Extensibility"},{"location":"extensibility/#extensibility","text":"When using one of the ready-made pipelines of project \"Piper\", you don't have to write custom pipeline code. The pipelines are centrally maintained and can be used with only a small amount of declarative configuration as documented here . For the vast majority of standard projects, the features of the ready-made pipelines should be enough to implement Continuous Delivery with little effort in a best-practice compliant way. If you miss a feature or discover a bug in one of our pipelines, please see if there is already an open issue in our GitHub repository and if not, open a new one. In some cases, it's not desirable to include specialized features in the ready-made pipelines. However, you can still benefit from their qualities, if you address your requirements through an extension . Extensions are custom bits of pipeline coding, which you can use to implement special requirements. This page explains extensibility options in project \"Piper\". For a high level overview of available options and how to interface with them, see this figure: Before building extensions, please make sure that there is no alternative that works better for you. Options for extensibility, in the order in which we recommend considering them:","title":"Extensibility"},{"location":"extensibility/#1-extend-individual-stages","text":"In this option, you use the centrally maintained pipeline but can change individual stages, if required. To do so, create a file called <StageName>.groovy (for example, Acceptance.groovy or lint.groovy ) in .pipeline/extensions/ in the source code repository of your application. For this, you need to know the technical identifiers for stage names. For the general purpose pipeline, you can find them in the pipeline source file . The centrally maintained pipeline checks if such a file exists and if it does, executes it. A parameter of type Map that contains the following keys is passed to the extension: script : Defines the global script environment of the Jenkinsfile run. This makes sure that the correct configuration environment can be passed to project \"Piper\" steps and allows access to the commonPipelineEnvironment , for example. When calling a piper step in an extension, the script object has to be passed using script: params.script . originalStage : Allows you to execute the \"original\" stage at any place in your script. If omitting a call to originalStage() , only your code is executed. stageName : Name of the current stage config : Configuration of the stage and general config (including all defaults) Here is a simple example for such an extension, which you can use as a starting point: void call ( Map params ) { //access stage name echo \"Start - Extension for stage: ${params.stageName}\" //access config echo \"Current stage config: ${params.config}\" //execute original stage as defined in the template params . originalStage () //access overall pipeline script object echo \"Branch: ${params.script.commonPipelineEnvironment.gitBranch}\" echo \"End - Extension for stage: ${params.stageName}\" } return this return this Don't forget the return this , which is required at the end of all extension scripts. This is due to how Groovy loads scripts internally. Init stage cannot be extended Please note that the Init stage also checks out your current repository including your extensions. Therefore, it is not possible to use extensions on this stage. Disable Extensions Execution By default, there is a possibility for extensions to get executed. In case of disabling it, please ensure to set PIPER_DISABLE_EXTENSIONS to true . Setting this parameter to true excludes the execution of extension files in .pipeline/extensions/<StageName>.groovy .","title":"1. Extend individual stages"},{"location":"extensibility/#practical-example","text":"For a more practical example, you can use extensions in the general purpose pipeline to add custom linters to your pipeline. A linter is a tool that can check the source code for certain stylistic criteria. Many teams choose to use a linter to ensure a common programming style. For example, if you want to use Checkstyle in your codebase, you might use an extension similar to this one in a file called .pipeline/extensions/Build.groovy in your project: def call ( Map parameters ) { parameters . originalStage () // Runs the build stage with built-in linters mavenExecute ( script: parameters . script , flags: [ '--batch-mode' ], pomPath: 'application/pom.xml' , m2Path: s4SdkGlobals . m2Directory , goals: [ 'checkstyle:checkstyle' ], ) recordIssues skipBlames: true , enabledForFailure: true , aggregatingResults: false , tool: checkStyle () } return this This code snippet has three components, let's see what is happening here: Firstly, we run the original stage. This builds the application and optionally runs ESLint on JavaScript/TypeScript source files and static checks using PMD and SpotBugs tools as these are standard features of General Purpose Pipeline. Secondly, we run the checkstyle maven plugin using the mavenExecute Jenkins library step as provided by project \"Piper\". This serves as an example for how flexible you can re-use what project \"Piper\" already provides in your extension. Finally, we use the Jenkins Warnings NG plugin and its step recordIssues to make the findings visible in the Jenkins user interface. This example can be adapted for other linters of your choice. Be sure to checkout the Library steps section of this documentation if you want to do this. Project \"Piper\" provides some basic building blocks such as dockerExecute and the already mentioned mavenExecute which might be helpful.","title":"Practical example"},{"location":"extensibility/#2-modified-ready-made-pipeline","text":"This option describes how you can copy and paste one of the centrally maintained pipelines to make changes to it that are not possible otherwise. For example, you can't change the order of stages and the stages that run in parallel or add new stages to a centrally maintained pipeline. A modified Ready-Made Pipeline allows you to modify your declarative pipeline based on the syntax Jenkins provides . This might be done for an individual project (in the Jenkinsfile ), or in a separate Git repository so it can be used for multiple projects.","title":"2. Modified Ready-Made Pipeline"},{"location":"extensibility/#single-project","text":"The default Jenkinsfile of centrally maintained pipelines does nothing else but loading the pipeline and running it. This is convenient but limits the modifiable aspects of the pipeline. If one of your projects uses the pipeline, the easiest way to do this modification is to copy the pipeline into your Jenkinsfile . The basic structure of your Jenkinsfile should be the following: @Library ( /* Shared library definition, see below */ ) _ call script: this void call ( parameters ) { // Your pipeline code based on our ready-made pipelines } The actual pipeline code (the call method in the listing above) can be found here: General purpose pipeline Use the correct shared library definition Which shared library you need depends on the pipeline you're using. For the general purpose pipeline , you need 'piper-lib-os' . For the version identifier, please see the section How to stay up-to-date in this document.","title":"Single project"},{"location":"extensibility/#multiple-projects","text":"If you have multiple projects that share a similar architecture, it might be desirable to share one modified pipeline amongst them. Similar to what you can do in an individual Jenkinsfile , you can copy the pipeline to your own shared library and modify it. To do this, create a new Git repository in your preferred Git hosting service. It must be compliant to how Jenkins shared libraries are built . In a nutshell, this means that you need a vars directory inside which you can place a copy of your preferred pipeline. A minimal example of such a library could have the following directory structure: ./vars/myCustomPipeline.groovy ./README.md myCustomPipeline.groovy contains the modified pipeline code of the general purpose pipeline . Note The name of your custom pipeline must differ from the other pipelines provided by project \"Piper\" because Jenkins requires names across multiple libraries to be unique. This library must be placed in a Git repository, which is available for Jenkins and must be configured in Jenkins as documented here . The following screenshot shows an example of the configuration in Jenkins. Note that the name (1) must be the same as the one you use in your Jenkinsfile . The Jenkinsfile of your individual projects would look similar to the following: @Library ([ 'piper-lib-os' , 'my-own-pipeline' ]) _ myCustomPipeline script: this Be sure to adapt the names and version identifiers accordingly, as described in How to stay up-to-date .","title":"Multiple projects"},{"location":"extensibility/#how-to-stay-up-to-date","text":"Regardless of which of the above options you choose, one downside of this approach is that your pipeline will be out of sync with the centrally maintained pipelines at some point in time. We strongly recommend doing as little modification as possible to fulfil your requirements. Please be aware that stages may have dependencies on each other. Don't depend on stage implementation details Your pipeline should treat stages as a black box, the stage implementations are not a published API and may be subject to change at any time. Avoid accidental breaking changes By default, Jenkins uses the master branch of shared libraries. This way, you're always automatically using the latest and greatest version. The downside is that in rare cases, breaking changes might happen. Another potential issue is that your builds are not repeatable , that means building the same version of your application twice might have a different result. For those reasons, you might want to consider to fix versions to a released version like in this example: @Library('my-shared-library@v1.0') _ Find the most recent release for the jenkins-library on GitHub. To stay up to date with the latest releases, you can \"watch\" releases for those repositories on GitHub . When to go with a modified ready-made pipeline This option is right for you if none of the provided ready-made pipelines serves your purpose, and individual stage extensions don't provide enough flexibility.","title":"How to stay up-to-date"},{"location":"extensibility/#advanced-tips-and-information","text":"When you consider adding additional capabilities, your first stop should be the Jenkins Pipeline Steps Reference . Here you get an overview of what kind of capabilities are already available and a list of related parameters, which you can use to customize the existing implementation. The provided information should help you understand and extend the functionality of your pipeline.","title":"Advanced tips and information"},{"location":"extensibility/#3-new-pipeline-from-scratch","text":"Since project \"Piper\" fully builds on Jenkins Pipelines as Code , you can also go with your own pipeline from scratch in a Jenkinsfile . Decoupling If you choose this option, you will be decoupled from the innovations provided with project \"Piper\", unless you re-use stages (as indicated above under 2. Modified ready-made pipelines ), for example. We recommend using this only when none of the other provided options suit your use case.","title":"3. New Pipeline from Scratch"},{"location":"guidedtour/","text":"Getting Started with Project \"Piper\" \u00b6 Follow this guided tour to become familiar with the basics of using project \"Piper\". The public sample application cloud-cf-helloworld-nodejs will be enriched with a pipeline which syncs the sources, builds these as multitarget applications and deploys the result into a Cloud Foundry environment. The application contains a simple nodejs application. Deployed as web service, it serves static data. Recommendation: We recommend to clone the sample application cloud-cf-helloworld-nodejs and execute the instructions on your own repository. See (Optional) Sample Application . The stated instructions assume the use of this application. Prerequisites \u00b6 You have installed a Linux system with at least 4 GB memory. Note: We have tested our samples on Ubuntu 16.04. On Microsoft Windows, you might face some issues. You have installed the newest version of Docker. See Docker Community Edition . Note: we have tested on Docker 18.09.6. Your system has access to GitHub.com . Install your Jenkins \u00b6 For an approach to setup a Jenkins build sever which fits the needs of the project \"Piper\" pipelines and steps please read the Infrastructure Overview . (Optional) Sample Application \u00b6 Choosing the best sample application Depending on the type of project you're interested in, different sample applications might be interesting. For SAP Cloud SDK, please have a look at the Address Manager example application. Copy the sources of the application into your own Git repository. While we will ask you to fork the application's repository into a GitHub space, you can use any version control system based on Git like GitLab or plain git . Note: A public GitHub repository is visible to the public. The configuration files may contain data you don't want to expose, so use a private repository. Create an organization on GitHub, if you haven't any yet. See Creating a new organization . Duplicate the repository cloud-cf-helloworld-nodejs into your GitHub organization. Make this repository private . Note: Forked public repositories cannot be made private. Get an account and space in the Cloud Foundry environment. For the deployment of the application you need access to a space on the Cloud Foundry environment of the SAP Business Technology Platform (SAP BTP). If you haven't any yet, get a Trial Account . Select the 1_REST_persist_in_Memory branch of your cloud-cf-helloworld-nodejs fork. Other branches might work as well, but this one is tested. Create Your First Pipeline \u00b6 Get your application repository in place. Create a new file with the name Jenkinsfile in the root level of your repository and enter the following code: @Library('piper-lib-os') _ node() { stage('prepare') { checkout scm setupCommonPipelineEnvironment script:this } } The \"prepare\" step synchronizes the repository and initializes the project specific settings. For more information about Jenkinsfiles and pipelines, see Using a Jenkinsfile . Save your changes to your remote repository. To set up a Jenkins job for your repository, open the Jenkins UI under http://<jenkins-server-address>:<http-port> and choose New Item . For more information, see the Jenkins User Documentation . Provide a name for your new item (for example, My First Pipeline ) and select Multibranch Pipeline . Note: The ready-made continuous delivery pipelines of project \"Piper\" must run as Multibranch Pipeline . For Branch Sources , choose Add source , select Git as source repository. For Project Repository in the Git section, enter the URL of your Git repository, for example https://github.com/<your-org>/cloud-cf-helloworld-nodejs . Note: If your repository is protected, you must provide your credentials in Credentials . For Discover branches , choose Add and Filter by name (with wildcards) . A multibranch pipeline can execute different Jenkinsfiles for different branches. In this case, however, configure the pipeline of a single branch only. For Include in the Filter by name section, enter the branch name 1_REST_persist_in_Memory . Choose Save . Result: Jenkins scans the repository for branches and filters them according to the specified Includes . If the branch is detected, it is built. For additional information about multibranch pipelines, please refer to the Jenkins documentation . Add a Build Step \u00b6 In your Jenkinsfile , add the following code snippet: stage('build') { mtaBuild script: this } The mtaBuild step calls a build tool to build a multitarget application (MTA). The tool consumes an MTA descriptor that contains the metadata of all entities which comprise an application or are used by one during deployment or runtime, and the dependencies between them. For more information about MTAs, see sap.com . Create the MTA descriptor file with the name mta.yaml in the root level of the repository. Insert the following code: _schema-version: 2.1.0 ID: com.sap.piper.node.hello.world version: 1.0.0 description: A Hello World sample application provider: SAP Sample generator modules: - name: piper.node.hello.world type: nodejs path: . Configure the step to build an MTA for the Cloud Foundry environment. Create the configuration file .pipeline/config.yml relative to the root level of the repository and insert the following content: general: steps: mtaBuild: buildTarget: 'CF' For additional information about the configuration, have a look at the Common Configuration Guide and the MTA build step documentation . Save your changes to your remote repository. To run your pipeline, choose Build Now in the job UI. Result: The pipeline processed two stages, the \"prepare\" and the \"build\". Add a Deploy Step \u00b6 In your Jenkinsfile , add the following code snippet: stage('deploy') { cloudFoundryDeploy script: this } The cloudFoundryDeploy step calls the Cloud Foundry command line client to deploy the built MTA into SAP BTP. To configure the step to deploy into the Cloud Foundry environment, in your repository, open the .pipeline/config.yml and add the following content: cloudFoundryDeploy: deployTool: 'mtaDeployPlugin' deployType: 'standard' cloudFoundry: org: '<your-organisation>' space: '<your-space>' credentialsId: 'CF_CREDENTIALSID' Note: look after the indentation of the step within the YAML. Specify the organisation and space properties. For more information about the configuration, see the Common Configuration Guide and cloudFoundryDeploy . 1. The key CF_CREDENTIALSID refers to a user-password credential you must create in Jenkins: In Jenkins, choose Credentials from the main menu and add a Username with Password entry. ![Add Credentials](images/JenkinsCredentials-1.png \"Add Credentials\") Save the Credential Save your changes to your remote repository. To run your pipeline, choose Build Now in the job UI. Result: The pipeline processed the three stages \"prepare\", \"build\" and \"deploy\". If your pipeline fails, compare its files to the final Jenkinsfile , the config.yml , and the mta.yaml . Note : YAML files are surprisingly sensitive regarding indentation. Open Application \u00b6 Your application has been deployed into your space in the Cloud Foundry space on SAP BTP. Login to SAP BTP and navigate into you space. Result: Your space contains the application piper.node.hello.world , the state of the application is Started . Open the application name to get into the Application Overview . Open the Application Route and add /users to the URL. Result: The application returns a list of user data. What's Next \u00b6 You are now familiar with the basics of using project \"Piper\". Through the concept of pipeline as code, project \"Piper\" and Jenkins pipelines are extremely powerful. While Jenkins pipelines offer a full set of common programming features, project \"Piper\" adds SAP-specific flavors. Have a look at the different Scenarios to understand how to easily integrate SAP systems with defaults. Dive into the ready-made continuous delivery pipeline: the General Purpose Pipeline helps you to quickly build and deliver your apps. Browse the steadily increasing list of features you can implement through the project \"Piper\" Steps . The Configuration pattern supports simple pipelines that can be reused by multiple applications. To understand the principles of inheritance and customization, have a look at the the configuration documentation.","title":"Getting Started With Project \"Piper\""},{"location":"guidedtour/#getting-started-with-project-piper","text":"Follow this guided tour to become familiar with the basics of using project \"Piper\". The public sample application cloud-cf-helloworld-nodejs will be enriched with a pipeline which syncs the sources, builds these as multitarget applications and deploys the result into a Cloud Foundry environment. The application contains a simple nodejs application. Deployed as web service, it serves static data. Recommendation: We recommend to clone the sample application cloud-cf-helloworld-nodejs and execute the instructions on your own repository. See (Optional) Sample Application . The stated instructions assume the use of this application.","title":"Getting Started with Project \"Piper\""},{"location":"guidedtour/#prerequisites","text":"You have installed a Linux system with at least 4 GB memory. Note: We have tested our samples on Ubuntu 16.04. On Microsoft Windows, you might face some issues. You have installed the newest version of Docker. See Docker Community Edition . Note: we have tested on Docker 18.09.6. Your system has access to GitHub.com .","title":"Prerequisites"},{"location":"guidedtour/#install-your-jenkins","text":"For an approach to setup a Jenkins build sever which fits the needs of the project \"Piper\" pipelines and steps please read the Infrastructure Overview .","title":"Install your Jenkins"},{"location":"guidedtour/#optional-sample-application","text":"Choosing the best sample application Depending on the type of project you're interested in, different sample applications might be interesting. For SAP Cloud SDK, please have a look at the Address Manager example application. Copy the sources of the application into your own Git repository. While we will ask you to fork the application's repository into a GitHub space, you can use any version control system based on Git like GitLab or plain git . Note: A public GitHub repository is visible to the public. The configuration files may contain data you don't want to expose, so use a private repository. Create an organization on GitHub, if you haven't any yet. See Creating a new organization . Duplicate the repository cloud-cf-helloworld-nodejs into your GitHub organization. Make this repository private . Note: Forked public repositories cannot be made private. Get an account and space in the Cloud Foundry environment. For the deployment of the application you need access to a space on the Cloud Foundry environment of the SAP Business Technology Platform (SAP BTP). If you haven't any yet, get a Trial Account . Select the 1_REST_persist_in_Memory branch of your cloud-cf-helloworld-nodejs fork. Other branches might work as well, but this one is tested.","title":"(Optional) Sample Application"},{"location":"guidedtour/#create-your-first-pipeline","text":"Get your application repository in place. Create a new file with the name Jenkinsfile in the root level of your repository and enter the following code: @Library('piper-lib-os') _ node() { stage('prepare') { checkout scm setupCommonPipelineEnvironment script:this } } The \"prepare\" step synchronizes the repository and initializes the project specific settings. For more information about Jenkinsfiles and pipelines, see Using a Jenkinsfile . Save your changes to your remote repository. To set up a Jenkins job for your repository, open the Jenkins UI under http://<jenkins-server-address>:<http-port> and choose New Item . For more information, see the Jenkins User Documentation . Provide a name for your new item (for example, My First Pipeline ) and select Multibranch Pipeline . Note: The ready-made continuous delivery pipelines of project \"Piper\" must run as Multibranch Pipeline . For Branch Sources , choose Add source , select Git as source repository. For Project Repository in the Git section, enter the URL of your Git repository, for example https://github.com/<your-org>/cloud-cf-helloworld-nodejs . Note: If your repository is protected, you must provide your credentials in Credentials . For Discover branches , choose Add and Filter by name (with wildcards) . A multibranch pipeline can execute different Jenkinsfiles for different branches. In this case, however, configure the pipeline of a single branch only. For Include in the Filter by name section, enter the branch name 1_REST_persist_in_Memory . Choose Save . Result: Jenkins scans the repository for branches and filters them according to the specified Includes . If the branch is detected, it is built. For additional information about multibranch pipelines, please refer to the Jenkins documentation .","title":"Create Your First Pipeline"},{"location":"guidedtour/#add-a-build-step","text":"In your Jenkinsfile , add the following code snippet: stage('build') { mtaBuild script: this } The mtaBuild step calls a build tool to build a multitarget application (MTA). The tool consumes an MTA descriptor that contains the metadata of all entities which comprise an application or are used by one during deployment or runtime, and the dependencies between them. For more information about MTAs, see sap.com . Create the MTA descriptor file with the name mta.yaml in the root level of the repository. Insert the following code: _schema-version: 2.1.0 ID: com.sap.piper.node.hello.world version: 1.0.0 description: A Hello World sample application provider: SAP Sample generator modules: - name: piper.node.hello.world type: nodejs path: . Configure the step to build an MTA for the Cloud Foundry environment. Create the configuration file .pipeline/config.yml relative to the root level of the repository and insert the following content: general: steps: mtaBuild: buildTarget: 'CF' For additional information about the configuration, have a look at the Common Configuration Guide and the MTA build step documentation . Save your changes to your remote repository. To run your pipeline, choose Build Now in the job UI. Result: The pipeline processed two stages, the \"prepare\" and the \"build\".","title":"Add a Build Step"},{"location":"guidedtour/#add-a-deploy-step","text":"In your Jenkinsfile , add the following code snippet: stage('deploy') { cloudFoundryDeploy script: this } The cloudFoundryDeploy step calls the Cloud Foundry command line client to deploy the built MTA into SAP BTP. To configure the step to deploy into the Cloud Foundry environment, in your repository, open the .pipeline/config.yml and add the following content: cloudFoundryDeploy: deployTool: 'mtaDeployPlugin' deployType: 'standard' cloudFoundry: org: '<your-organisation>' space: '<your-space>' credentialsId: 'CF_CREDENTIALSID' Note: look after the indentation of the step within the YAML. Specify the organisation and space properties. For more information about the configuration, see the Common Configuration Guide and cloudFoundryDeploy . 1. The key CF_CREDENTIALSID refers to a user-password credential you must create in Jenkins: In Jenkins, choose Credentials from the main menu and add a Username with Password entry. ![Add Credentials](images/JenkinsCredentials-1.png \"Add Credentials\") Save the Credential Save your changes to your remote repository. To run your pipeline, choose Build Now in the job UI. Result: The pipeline processed the three stages \"prepare\", \"build\" and \"deploy\". If your pipeline fails, compare its files to the final Jenkinsfile , the config.yml , and the mta.yaml . Note : YAML files are surprisingly sensitive regarding indentation.","title":"Add a Deploy Step"},{"location":"guidedtour/#open-application","text":"Your application has been deployed into your space in the Cloud Foundry space on SAP BTP. Login to SAP BTP and navigate into you space. Result: Your space contains the application piper.node.hello.world , the state of the application is Started . Open the application name to get into the Application Overview . Open the Application Route and add /users to the URL. Result: The application returns a list of user data.","title":"Open Application"},{"location":"guidedtour/#whats-next","text":"You are now familiar with the basics of using project \"Piper\". Through the concept of pipeline as code, project \"Piper\" and Jenkins pipelines are extremely powerful. While Jenkins pipelines offer a full set of common programming features, project \"Piper\" adds SAP-specific flavors. Have a look at the different Scenarios to understand how to easily integrate SAP systems with defaults. Dive into the ready-made continuous delivery pipeline: the General Purpose Pipeline helps you to quickly build and deliver your apps. Browse the steadily increasing list of features you can implement through the project \"Piper\" Steps . The Configuration pattern supports simple pipelines that can be reused by multiple applications. To understand the principles of inheritance and customization, have a look at the the configuration documentation.","title":"What's Next"},{"location":"cli/","text":"Project \"Piper\" CLI \u00b6 The CLI is built using the go programming language and thus is distributed in a single binary file for Linux. The latest released version can be downloaded via wget https://github.com/SAP/jenkins-library/releases/latest/download/piper . Specific versions an be downloaded from the GitHub releases page. Once available in $PATH , it is ready to use. To verify the version you got, run piper version . To read the online help, run piper help . Use the shell completion For the purpose of interactive usage on the command line, we recommend to setup shell completion scripts. Run piper completion --help for information on how to set it up for your shell. This might need to be updated from time to time to reflect new commands added to piper. Linux only (as of now) Since this is a binary compiled for Linux systems, you won't be able to use it on macOS or Windows systems. You might try running it inside Docker on those systems. If you're interested in using it with GitHub Actions, see the Project \"Piper\" Action which makes the tool more convinient to use.","title":"Command line tool"},{"location":"cli/#project-piper-cli","text":"The CLI is built using the go programming language and thus is distributed in a single binary file for Linux. The latest released version can be downloaded via wget https://github.com/SAP/jenkins-library/releases/latest/download/piper . Specific versions an be downloaded from the GitHub releases page. Once available in $PATH , it is ready to use. To verify the version you got, run piper version . To read the online help, run piper help . Use the shell completion For the purpose of interactive usage on the command line, we recommend to setup shell completion scripts. Run piper completion --help for information on how to set it up for your shell. This might need to be updated from time to time to reflect new commands added to piper. Linux only (as of now) Since this is a binary compiled for Linux systems, you won't be able to use it on macOS or Windows systems. You might try running it inside Docker on those systems. If you're interested in using it with GitHub Actions, see the Project \"Piper\" Action which makes the tool more convinient to use.","title":"Project \"Piper\" CLI"},{"location":"infrastructure/customjenkins/","text":"Custom Jenkins Setup \u00b6 Requirements \u00b6 You have installed Java Runtime Environment 8. You have installed Jenkins v 2.60.3 or higher running on Linux. We've tested with debian-stretch. A Jenkins user with administration rights. Your Jenkins instance has access to github.com . Docker \u00b6 Most of the tools project \"Piper\" uses to build, test, and deploy your application are available as out-of-the-box Docker images. You don't need to manually install them on your Jenkins server or Jenkins nodes, nor care for updates. Instead, these are automatically pulled from hub.docker.com . Install Docker if you haven't installed it, yet. To install the newest version of Docker, see Docker Community Edition . Note: We've tested on Docker 18.09.6. If your Jenkins server already runs as Docker container, make sure the tools container can run on the Docker host. Extend the Docker call in the following way: docker run ... -v /var/run/docker.sock:/var/run/docker.sock ... Plugins \u00b6 Project \"Piper\" requires a set of plugins installed on your Jenkins server. This set may evolve in the future. Make sure that all plugins of the appropriate versions are installed. Shared Library \u00b6 Shared libraries extending the Jenkins pipeline are defined within the Jenkins system configuration. A library is defined by a link to its source repository and an appropriate version identifier. To add the project \"Piper\"s library, execute the following steps: Open the Jenkins UI under http://<jenkins-server-address>:<http-port> , login with administration privileges, and choose Manage Jenkins > Configure System . Scroll down to section Global Pipeline Libraries and choose the Add button. A new library is created. For Library Name , enter piper-lib-os . For Default Version , enter the branch or tag you want to consume (e.g. master or v0.1 ). For Retrieval Method , choose Modern SCM . For Source Code Management , choose Git . For Project Repository , enter the GitHub URL of the project Piper shared library https://github.com/SAP/jenkins-library . Save your changes. Result: The library is available as piper-lib-os . To use it by any pipeline, add the following line to its Jenkinsfile : @Library ( 'piper-lib-os' ) _ When the pipeline is launched, Jenkins downloads the corresponding library as source and compiles it before the pipeline is processed. User Permission Issue \u00b6 Your native Jenkins installation defines the user jenkins as a service user. If it doesn't exist, it is created. In this case, the user ID is the next free number determined by /etc/passwd - probably starting from 100 . In contrast, the official Jenkins Docker image defines the user jenkins with the user ID 1000 as a service user inside the container. So, the service user ID of your native Jenkins server most likely differs from the user ID of the official Jenkins Docker image. This could have impacts. Project \"Piper\" runs many pipeline steps as Docker images. If a Docker container is created, the Jenkins Docker plugin passes the Jenkins user and group ID as a process owner into the Docker container. Binding a folder from the host machine into the container - used to exchange files between steps - results in file permission issues, if the user inside the container doesn't have rights for the folder on the host machine or vice versa. Although you won't face this issue with images of project \"Piper\" , some 3rd-party Docker images follow this convention and expect to be executed under userid 1000 , like node.js , which is used by a set of additional steps. If you face such a user permission issue , choose between the following options: Change the ID of your Jenkins service user to 1000 . Create your own images and solve the permission issues by removing the file system restrictions. Adjust the configuration accordingly, for example, adjust the npmExecute step of your project's YAML: npmExecute: dockerImage: 'my-node:8-stretch' Set up a namespace. The user permission issue 781 of the project \"Piper\" repository describes how to set up a Linux kernel user namespace to prevent the mismatch of user IDs. Note: This solution is experimental and should be well-considered.","title":"Custom Jenkins Setup"},{"location":"infrastructure/customjenkins/#custom-jenkins-setup","text":"","title":"Custom Jenkins Setup"},{"location":"infrastructure/customjenkins/#requirements","text":"You have installed Java Runtime Environment 8. You have installed Jenkins v 2.60.3 or higher running on Linux. We've tested with debian-stretch. A Jenkins user with administration rights. Your Jenkins instance has access to github.com .","title":"Requirements"},{"location":"infrastructure/customjenkins/#docker","text":"Most of the tools project \"Piper\" uses to build, test, and deploy your application are available as out-of-the-box Docker images. You don't need to manually install them on your Jenkins server or Jenkins nodes, nor care for updates. Instead, these are automatically pulled from hub.docker.com . Install Docker if you haven't installed it, yet. To install the newest version of Docker, see Docker Community Edition . Note: We've tested on Docker 18.09.6. If your Jenkins server already runs as Docker container, make sure the tools container can run on the Docker host. Extend the Docker call in the following way: docker run ... -v /var/run/docker.sock:/var/run/docker.sock ...","title":"Docker"},{"location":"infrastructure/customjenkins/#plugins","text":"Project \"Piper\" requires a set of plugins installed on your Jenkins server. This set may evolve in the future. Make sure that all plugins of the appropriate versions are installed.","title":"Plugins"},{"location":"infrastructure/customjenkins/#shared-library","text":"Shared libraries extending the Jenkins pipeline are defined within the Jenkins system configuration. A library is defined by a link to its source repository and an appropriate version identifier. To add the project \"Piper\"s library, execute the following steps: Open the Jenkins UI under http://<jenkins-server-address>:<http-port> , login with administration privileges, and choose Manage Jenkins > Configure System . Scroll down to section Global Pipeline Libraries and choose the Add button. A new library is created. For Library Name , enter piper-lib-os . For Default Version , enter the branch or tag you want to consume (e.g. master or v0.1 ). For Retrieval Method , choose Modern SCM . For Source Code Management , choose Git . For Project Repository , enter the GitHub URL of the project Piper shared library https://github.com/SAP/jenkins-library . Save your changes. Result: The library is available as piper-lib-os . To use it by any pipeline, add the following line to its Jenkinsfile : @Library ( 'piper-lib-os' ) _ When the pipeline is launched, Jenkins downloads the corresponding library as source and compiles it before the pipeline is processed.","title":"Shared Library"},{"location":"infrastructure/customjenkins/#user-permission-issue","text":"Your native Jenkins installation defines the user jenkins as a service user. If it doesn't exist, it is created. In this case, the user ID is the next free number determined by /etc/passwd - probably starting from 100 . In contrast, the official Jenkins Docker image defines the user jenkins with the user ID 1000 as a service user inside the container. So, the service user ID of your native Jenkins server most likely differs from the user ID of the official Jenkins Docker image. This could have impacts. Project \"Piper\" runs many pipeline steps as Docker images. If a Docker container is created, the Jenkins Docker plugin passes the Jenkins user and group ID as a process owner into the Docker container. Binding a folder from the host machine into the container - used to exchange files between steps - results in file permission issues, if the user inside the container doesn't have rights for the folder on the host machine or vice versa. Although you won't face this issue with images of project \"Piper\" , some 3rd-party Docker images follow this convention and expect to be executed under userid 1000 , like node.js , which is used by a set of additional steps. If you face such a user permission issue , choose between the following options: Change the ID of your Jenkins service user to 1000 . Create your own images and solve the permission issues by removing the file system restrictions. Adjust the configuration accordingly, for example, adjust the npmExecute step of your project's YAML: npmExecute: dockerImage: 'my-node:8-stretch' Set up a namespace. The user permission issue 781 of the project \"Piper\" repository describes how to set up a Linux kernel user namespace to prevent the mismatch of user IDs. Note: This solution is experimental and should be well-considered.","title":"User Permission Issue"},{"location":"infrastructure/docker-rate-limit/","text":"Troubleshooting \"Error response from daemon: toomanyrequests: You have reached your pull rate limit\" \u00b6 You may face the following error in your pipelines: docker pull <some image> Using default tag: latest Error response from daemon: toomanyrequests: You have reached your pull rate limit. You may increase the limit by authenticating and upgrading: https://www.docker.com/increase-rate-limit Those occur because Docker Hub has introduced rate limiting in November 2020. More background information is available here . There are various options to mitigate this issue, which are listed below in no particular order. No single option will work in all use-cases, please pick what works best for you. Company-internal Docker Hub mirror \u00b6 If your company uses Artifactory for example, you might want to check if Docker Hub mirroring is already enabled for you. You could configure that registry for example using this snippet in your .pipeline/config.yml file. steps: dockerExecute: dockerRegistryUrl: 'https://my.internal.registry:1234' Authenticated pulls from Docker Hub \u00b6 The dockerExecute step has an option dockerRegistryCredentialsId which you can use with any Docker Hub account. See Docker's information on pricing to check which type of account is right for you. Alternative Docker registry \u00b6 Project \"Piper\"'s Docker images are also published to GitHub Container Registry . We don't have much experience with that, but in case the other options don't work for you, you might want to try consuming the images from there. Hyperscaler mirror \u00b6 If you use some kind of hyperscaler, your provider might offer a Docker Hub mirror for you. Please check the respective documentation of your provider.","title":"Fixing docker rate limit"},{"location":"infrastructure/docker-rate-limit/#troubleshooting-error-response-from-daemon-toomanyrequests-you-have-reached-your-pull-rate-limit","text":"You may face the following error in your pipelines: docker pull <some image> Using default tag: latest Error response from daemon: toomanyrequests: You have reached your pull rate limit. You may increase the limit by authenticating and upgrading: https://www.docker.com/increase-rate-limit Those occur because Docker Hub has introduced rate limiting in November 2020. More background information is available here . There are various options to mitigate this issue, which are listed below in no particular order. No single option will work in all use-cases, please pick what works best for you.","title":"Troubleshooting \"Error response from daemon: toomanyrequests: You have reached your pull rate limit\""},{"location":"infrastructure/docker-rate-limit/#company-internal-docker-hub-mirror","text":"If your company uses Artifactory for example, you might want to check if Docker Hub mirroring is already enabled for you. You could configure that registry for example using this snippet in your .pipeline/config.yml file. steps: dockerExecute: dockerRegistryUrl: 'https://my.internal.registry:1234'","title":"Company-internal Docker Hub mirror"},{"location":"infrastructure/docker-rate-limit/#authenticated-pulls-from-docker-hub","text":"The dockerExecute step has an option dockerRegistryCredentialsId which you can use with any Docker Hub account. See Docker's information on pricing to check which type of account is right for you.","title":"Authenticated pulls from Docker Hub"},{"location":"infrastructure/docker-rate-limit/#alternative-docker-registry","text":"Project \"Piper\"'s Docker images are also published to GitHub Container Registry . We don't have much experience with that, but in case the other options don't work for you, you might want to try consuming the images from there.","title":"Alternative Docker registry"},{"location":"infrastructure/docker-rate-limit/#hyperscaler-mirror","text":"If you use some kind of hyperscaler, your provider might offer a Docker Hub mirror for you. Please check the respective documentation of your provider.","title":"Hyperscaler mirror"},{"location":"infrastructure/overview/","text":"Infrastructure \u00b6 Custom Jenkins \u00b6 To run project \"Piper\", you will need your own Jenkins installation, and you need to care for the configuration that is specific to project \"Piper\". Please follow the Custom Jenkins Setup guide .","title":"Overview"},{"location":"infrastructure/overview/#infrastructure","text":"","title":"Infrastructure"},{"location":"infrastructure/overview/#custom-jenkins","text":"To run project \"Piper\", you will need your own Jenkins installation, and you need to care for the configuration that is specific to project \"Piper\". Please follow the Custom Jenkins Setup guide .","title":"Custom Jenkins"},{"location":"infrastructure/vault/","text":"Vault for Pipeline Secrets \u00b6 Project \"Piper\" supports fetching your pipeline secrets directly from Vault . Currently, Vault's key value engine is supported in version 1 and 2, although we recommend version 2 since it supports the versioning of secrets Parameters that support being fetched from Vault are marked with the Vault Label in the Step Documentation. Authenticating Piper to Vault \u00b6 Piper currently supports Vault's AppRole and Token authentication. However, AppRole authentication is recommended since Piper is able to regularly rotate the SecretID, which is not possible with a Token. AppRole Authentication \u00b6 To authenticate against Vault, using AppRole authentication you need to do the following things Enable AppRole authentication in your Vault instance. After that you have to create an AppRole Role for Piper Assign the necessary policies to your newly created AppRole. Take the AppRole ID and create a Jenkins Secret Text credential. Take the AppRole Secret ID and create a Jenkins Secret Text credential. Token Authentication \u00b6 First step to use Token authentication is to Create a Vault Token In order to use a Vault token for authentication you need to store the Vault token inside your Jenkins instance as shown below. Setup a Secret Store in Vault \u00b6 The first step to store your pipeline secrets in Vault, is to enable a the Key-Value Engine . Then create a policy which grants read access to the key value engine. Pipeline Configuration \u00b6 For pipelines to actually use the secrets stored in Vault you need to adjust your config.yml : general: ... vaultServerUrl: '<YOUR_VAULT_SERVER_URL>' vaultNamespace: '<YOUR_NAMESPACE_NAME>' # if you are not using vault's namespace feature you can remove this line vaultPath: 'kv/my-pipeline' # the path under which your jenkins secrets are stored ... To authenticate you need to provide PIPER_vaultAppRoleID and PIPER_vaultAppRoleSecretID if you use app role authentication or PIPER_vaultToken if you use token authentication. Jenkins When running a step via the Jenkins library you can use Jenkins credentials for pass this values. Use vaultAppRoleTokenCredentialsId and vaultAppRoleSecretTokenCredentialsId or vaultTokenCredentialsId in your config.yml . Configuring the Secret Lookup \u00b6 When Piper is configured to lookup secrets in Vault, there are some aspects that need to be considered. Overwriting of Parameters \u00b6 Whenever a parameter is provided via config.yml or passed to the CLI it gets overwritten when a secret is found in Vault. To disable overriding parameters put a vaultDisableOverwrite: true on Step Stage or General Section in your config. general : ... vaultDisableOverwrite : true ... steps : executeBuild : vaultDisableOverwrite : false ... Skipping Vault Secret Lookup \u00b6 It is also possible to skip Vault for Steps , Stages or in General by using the skipVault config parameter as shown below. ... steps : executeBuild : skipVault : true # Skip Vault Secret Lookup for this step Using Vault for general purpose and test credentials \u00b6 Vault can be used with piper to fetch any credentials, e.g. when they need to be appended to custom piper extensions or when they need to be appended to test command. The configuration for Vault general purpose credentials can be added to any piper golang-based step. The configuration has to be done as follows: general : < your Vault configuration > # see above ... steps : < piper go step > : vaultCredentialPath : 'myStepCredentials' vaultCredentialKeys : [ 'myAppId' , 'myAppSecret' ] In case if you want to retrieve secrets from multiple vault folders, pass several paths with keys: general : < your Vault configuration > # see above ... steps : < piper go step > : vaultCredentialPath : [ 'myStepCredentials1' , 'myStepCredentials2' ] vaultCredentialKeys : [[ 'myAppId1' , 'myAppSecret1' ], [ 'myAppId2' , 'myAppSecret2' ]] The vaultCredentialPath parameter is the endpoint of your credential path in Vault. Depending on your general config, the lookup for the credential IDs will be done in the following order respectively locations. The first path with found general purpose credentials will be used. <vaultPath>/<vaultCredentialPath> <vaultBasePath>/<vaultPipelineName>/<vaultCredentialPath> <vaultBasePath>/GROUP-SECRETS/<vaultCredentialPath> The vaultCredentialKeys parameter is a list of credential IDs. The secret value of the credential will be exposed as an environment variable prefixed by \"PIPER_VAULTCREDENTIAL_\" and transformed to a valid variable name. For a credential ID named myAppId the forwarded environment variable to the step will be PIPER_VAULTCREDENTIAL_MYAPPID containing the secret. The Base64 encoded secret value will be exposed as environment variable to the step as PIPER_VAULTCREDENTIAL_MYAPPID_BASE64 . Hyphens will be replaced by underscores and other non-alphanumeric characters will be removed. Using a custom prefix for credentials By default the prefix for credentials is PIPER_VAULTCREDENTIAL_ . It is possible to use a custom prefix by setting for example vaultCredentialEnvPrefix: MY_CUSTOM_PREFIX in your configuration. With this above credential ID named myAppId will be populated into an environment variable with the name MY_CUSTOM_PREFIX_MYAPPID . In case you want to use specific prefix for secrets retrieved from different vault folders, pass multiple prefixes as vaultCredentialEnvPrefix: ['MY_CUSTOM_PREFIX_1', 'MY_CUSTOM_PREFIX_2'] . With this above credential ID named myAppId1 will be populated into an environment variable with the name MY_CUSTOM_PREFIX_1_MYAPPID1 and myAppId2 will be populated into an environment variable with name MY_CUSTOM_PREFIX_2_MYAPPID2 Extended logging for Vault secret fetching (e.g. found credentials and environment variable names) can be activated via verbose: true configuration. Using Vault for test credentials (Deprecated : use general purpose and test credentials as above) \u00b6 Vault can be used with piper to fetch any credentials, e.g. when they need to be appended to test command. The configuration for Vault test credentials can be added to any piper golang-based step. The configuration has to be done as follows: general : < your Vault configuration > # see above ... steps : < piper go step > : vaultTestCredentialPath : 'myTestStepCrecetials' vaultTestCredentialKeys : [ 'myAppId' , 'myAppSecret' ] The vaultTestCredentialPath parameter is the endpoint of your credential path in vault. Depending on your general config, the lookup for the credential IDs will be done in the following order respectively locations. The first path with found test credentials will be used. <vaultPath>/<vaultTestCredentialPath> <vaultBasePath>/<vaultPipelineName>/<vaultTestCredentialPath> <vaultBasePath>/GROUP-SECRETS/<vaultTestCredentialPath> The vaultTestCredentialKeys parameter is a list of credential IDs. The secret value of the credential will be exposed as an environment variable prefixed by \"PIPER_TESTCREDENTIAL_\" and transformed to a valid variable name. For a credential ID named myAppId the forwarded environment variable to the step will be PIPER_TESTCREDENTIAL_MYAPPID containing the secret. Hyphens will be replaced by underscores and other non-alphanumeric characters will be removed. Using a custom prefix for test credentials By default the prefix for test credentials is PIPER_TESTCREDENTIAL_ . It is possible to use a custom prefix by setting for example vaultTestCredentialEnvPrefix: MY_CUSTOM_PREFIX_ in your configuration. With this above credential ID named myAppId will be populated into an environment variable with the name MY_CUSTOM_PREFIX_MYAPPID . Extended logging for Vault secret fetching (e.g. found credentials and environment variable names) can be activated via verbose: true configuration.","title":"Vault For Pipline Secrets"},{"location":"infrastructure/vault/#vault-for-pipeline-secrets","text":"Project \"Piper\" supports fetching your pipeline secrets directly from Vault . Currently, Vault's key value engine is supported in version 1 and 2, although we recommend version 2 since it supports the versioning of secrets Parameters that support being fetched from Vault are marked with the Vault Label in the Step Documentation.","title":"Vault for Pipeline Secrets"},{"location":"infrastructure/vault/#authenticating-piper-to-vault","text":"Piper currently supports Vault's AppRole and Token authentication. However, AppRole authentication is recommended since Piper is able to regularly rotate the SecretID, which is not possible with a Token.","title":"Authenticating Piper to Vault"},{"location":"infrastructure/vault/#approle-authentication","text":"To authenticate against Vault, using AppRole authentication you need to do the following things Enable AppRole authentication in your Vault instance. After that you have to create an AppRole Role for Piper Assign the necessary policies to your newly created AppRole. Take the AppRole ID and create a Jenkins Secret Text credential. Take the AppRole Secret ID and create a Jenkins Secret Text credential.","title":"AppRole Authentication"},{"location":"infrastructure/vault/#token-authentication","text":"First step to use Token authentication is to Create a Vault Token In order to use a Vault token for authentication you need to store the Vault token inside your Jenkins instance as shown below.","title":"Token Authentication"},{"location":"infrastructure/vault/#setup-a-secret-store-in-vault","text":"The first step to store your pipeline secrets in Vault, is to enable a the Key-Value Engine . Then create a policy which grants read access to the key value engine.","title":"Setup a Secret Store in Vault"},{"location":"infrastructure/vault/#pipeline-configuration","text":"For pipelines to actually use the secrets stored in Vault you need to adjust your config.yml : general: ... vaultServerUrl: '<YOUR_VAULT_SERVER_URL>' vaultNamespace: '<YOUR_NAMESPACE_NAME>' # if you are not using vault's namespace feature you can remove this line vaultPath: 'kv/my-pipeline' # the path under which your jenkins secrets are stored ... To authenticate you need to provide PIPER_vaultAppRoleID and PIPER_vaultAppRoleSecretID if you use app role authentication or PIPER_vaultToken if you use token authentication. Jenkins When running a step via the Jenkins library you can use Jenkins credentials for pass this values. Use vaultAppRoleTokenCredentialsId and vaultAppRoleSecretTokenCredentialsId or vaultTokenCredentialsId in your config.yml .","title":"Pipeline Configuration"},{"location":"infrastructure/vault/#configuring-the-secret-lookup","text":"When Piper is configured to lookup secrets in Vault, there are some aspects that need to be considered.","title":"Configuring the Secret Lookup"},{"location":"infrastructure/vault/#overwriting-of-parameters","text":"Whenever a parameter is provided via config.yml or passed to the CLI it gets overwritten when a secret is found in Vault. To disable overriding parameters put a vaultDisableOverwrite: true on Step Stage or General Section in your config. general : ... vaultDisableOverwrite : true ... steps : executeBuild : vaultDisableOverwrite : false ...","title":"Overwriting of Parameters"},{"location":"infrastructure/vault/#skipping-vault-secret-lookup","text":"It is also possible to skip Vault for Steps , Stages or in General by using the skipVault config parameter as shown below. ... steps : executeBuild : skipVault : true # Skip Vault Secret Lookup for this step","title":"Skipping Vault Secret Lookup"},{"location":"infrastructure/vault/#using-vault-for-general-purpose-and-test-credentials","text":"Vault can be used with piper to fetch any credentials, e.g. when they need to be appended to custom piper extensions or when they need to be appended to test command. The configuration for Vault general purpose credentials can be added to any piper golang-based step. The configuration has to be done as follows: general : < your Vault configuration > # see above ... steps : < piper go step > : vaultCredentialPath : 'myStepCredentials' vaultCredentialKeys : [ 'myAppId' , 'myAppSecret' ] In case if you want to retrieve secrets from multiple vault folders, pass several paths with keys: general : < your Vault configuration > # see above ... steps : < piper go step > : vaultCredentialPath : [ 'myStepCredentials1' , 'myStepCredentials2' ] vaultCredentialKeys : [[ 'myAppId1' , 'myAppSecret1' ], [ 'myAppId2' , 'myAppSecret2' ]] The vaultCredentialPath parameter is the endpoint of your credential path in Vault. Depending on your general config, the lookup for the credential IDs will be done in the following order respectively locations. The first path with found general purpose credentials will be used. <vaultPath>/<vaultCredentialPath> <vaultBasePath>/<vaultPipelineName>/<vaultCredentialPath> <vaultBasePath>/GROUP-SECRETS/<vaultCredentialPath> The vaultCredentialKeys parameter is a list of credential IDs. The secret value of the credential will be exposed as an environment variable prefixed by \"PIPER_VAULTCREDENTIAL_\" and transformed to a valid variable name. For a credential ID named myAppId the forwarded environment variable to the step will be PIPER_VAULTCREDENTIAL_MYAPPID containing the secret. The Base64 encoded secret value will be exposed as environment variable to the step as PIPER_VAULTCREDENTIAL_MYAPPID_BASE64 . Hyphens will be replaced by underscores and other non-alphanumeric characters will be removed. Using a custom prefix for credentials By default the prefix for credentials is PIPER_VAULTCREDENTIAL_ . It is possible to use a custom prefix by setting for example vaultCredentialEnvPrefix: MY_CUSTOM_PREFIX in your configuration. With this above credential ID named myAppId will be populated into an environment variable with the name MY_CUSTOM_PREFIX_MYAPPID . In case you want to use specific prefix for secrets retrieved from different vault folders, pass multiple prefixes as vaultCredentialEnvPrefix: ['MY_CUSTOM_PREFIX_1', 'MY_CUSTOM_PREFIX_2'] . With this above credential ID named myAppId1 will be populated into an environment variable with the name MY_CUSTOM_PREFIX_1_MYAPPID1 and myAppId2 will be populated into an environment variable with name MY_CUSTOM_PREFIX_2_MYAPPID2 Extended logging for Vault secret fetching (e.g. found credentials and environment variable names) can be activated via verbose: true configuration.","title":"Using Vault for general purpose and test credentials"},{"location":"infrastructure/vault/#using-vault-for-test-credentials-deprecated-use-general-purpose-and-test-credentials-as-above","text":"Vault can be used with piper to fetch any credentials, e.g. when they need to be appended to test command. The configuration for Vault test credentials can be added to any piper golang-based step. The configuration has to be done as follows: general : < your Vault configuration > # see above ... steps : < piper go step > : vaultTestCredentialPath : 'myTestStepCrecetials' vaultTestCredentialKeys : [ 'myAppId' , 'myAppSecret' ] The vaultTestCredentialPath parameter is the endpoint of your credential path in vault. Depending on your general config, the lookup for the credential IDs will be done in the following order respectively locations. The first path with found test credentials will be used. <vaultPath>/<vaultTestCredentialPath> <vaultBasePath>/<vaultPipelineName>/<vaultTestCredentialPath> <vaultBasePath>/GROUP-SECRETS/<vaultTestCredentialPath> The vaultTestCredentialKeys parameter is a list of credential IDs. The secret value of the credential will be exposed as an environment variable prefixed by \"PIPER_TESTCREDENTIAL_\" and transformed to a valid variable name. For a credential ID named myAppId the forwarded environment variable to the step will be PIPER_TESTCREDENTIAL_MYAPPID containing the secret. Hyphens will be replaced by underscores and other non-alphanumeric characters will be removed. Using a custom prefix for test credentials By default the prefix for test credentials is PIPER_TESTCREDENTIAL_ . It is possible to use a custom prefix by setting for example vaultTestCredentialEnvPrefix: MY_CUSTOM_PREFIX_ in your configuration. With this above credential ID named myAppId will be populated into an environment variable with the name MY_CUSTOM_PREFIX_MYAPPID . Extended logging for Vault secret fetching (e.g. found credentials and environment variable names) can be activated via verbose: true configuration.","title":"Using Vault for test credentials (Deprecated : use general purpose and test credentials as above)"},{"location":"pipelines/abapEnvironment/configuration/","text":"Configuration \u00b6 In general, the SAP BTP, ABAP environment pipeline supports different scenarios. The idea is that only configured stages are executed and the user is able to choose the appropriate stages. In this section, you can learn how to create a configuration in a (GitHub) repository to run an ABAP environment pipeline used for testing. This specific example will create a pipeline, which executes ATC checks after creating a new ABAP environment system. In the end, the system will be deprovisioned. You can have a look at different pipeline configurations in our SAP-samples repository or learn more about the configuration in the respective stage or step documentation. Stage Steps Init - Initial Checks abapAddonAssemblyKitCheckPV , abapAddonAssemblyKitCheckCVs , abapAddonAssemblyKitReserveNextPackages , Prepare System abapEnvironmentCreateSystem Clone Repositories cloudFoundryCreateServiceKey , abapEnvironmentPullGitRepo , abapEnvironmentCloneGitRepo , abapEnvironmentCheckoutBranch Test abapEnvironmentRunATCCheck , abapEnvironmentRunAUnitTest , abapEnvironmentPushATCSystemConfig Build cloudFoundryCreateServiceKey , abapEnvironmentAssemblePackages , abapAddonAssemblyKitRegisterPackages , abapAddonAssemblyKitReleasePackages , abapEnvironmentAssembleConfirm , abapAddonAssemblyKitCreateTargetVector , abapAddonAssemblyKitPublishTargetVector Integration Tests abapEnvironmentCreateSystem , cloudFoundryDeleteService Confirm - Publish abapAddonAssemblyKitPublishTargetVector Post cloudFoundryDeleteService 1. Prerequisites \u00b6 Configure your Jenkins server according to the documentation . Create a git repository on a host reachable by the Jenkins server (e.g. GitHub.com). The pipeline will be configured in this repository. Create a GitHub user with read access. The entitlements for the ABAP environment system are available in the SAP BTP global account and assigned to the subaccount. A Cloud Foundry organization & space with the allocated entitlements are available. A Cloud Foundry user & password with the required authorization (\"Space Developer\") in the organization and space are available. User and password were saved in the Jenkins Credentials Store. 2. Jenkinsfile \u00b6 Create a file named Jenkinsfile in your repository with the following content: @Library('piper-lib-os') _ abapEnvironmentPipeline script: this The annotation @Library('piper-lib-os') is a reference to the Jenkins Configuration, where you configured the project \"Piper\" library as a \"Global Pipeline Library\". If you want to avoid breaking changes we advise you to use a specific release of the Piper Library instead of the default master branch. This can be achieved by either adapting the configuration (see documentation ) or by specifying the release within the annotaion: @Library('piper-lib-os@v1.53.0') _ An Overview of the releases of the project \"Piper\" library can be found here . 3. Configuration for Cloning the repositories \u00b6 If you have specified the Clone Repositories stage you can make use of a dedicated configuration file containing the repositories to be pulled and the branches to be switched on. The repositories flag makes use of such a configuration file and helps executing a Pull , Clone and Checkout of the branches of the repositores. Create the file repositories.yml with the following structure containing your repositories including the branches for this stage. repositories: - name: '/DMO/GIT_REPOSITORY' branch: 'master' - name: '/DMO/GIT_REPO' branch: 'master' You can later use the repositories.yml file for the repositories parameter in the Clone Repositories stage used in chapter 5. Technical Pipeline Configuration . 4. Optional: Configuration for the ABAP Test Cockpit (ATC) and ABAP Unit Tests (AUnit) \u00b6 As a default, a configuration for ATC and AUnit is generated out of the repositories.yml file. This default configuration checks the listed repositories using the default ATC check variant and with no AUnit restrictions regarding duration and risk level . If you want to configure these tools yourself, you can create a tool specific configuration. ATC \u00b6 Create a file atcConfig.yml to store the configuration for the ATC run. In this file, you can specify which packages or software components shall be checked. Please have a look at the step documentation for more details. You have to pass the filename atcConfig.yml to the atcConfig parameter in the 5. Technical Pipeline Configuration . Here is an example of the configuration: objectSet: softwarecomponent: - name: \"/DMO/REPO\" AUnit \u00b6 Create a file aunitConfig.yml to store the configuration for the AUnit run. In this file, you can specify which packages or software components shall be checked. Please have a look at the step documentation for more details. You have to pass the filename aunitConfig.yml to the aunitConfig parameter in the 5. Technical Pipeline Configuration . Here is an example of the configuration: title: My AUnit run objectSet: softwarecomponents: - name: Z_TEST_SC - name: Z_TEST_SC2 5. Technical Pipeline Configuration \u00b6 Create a file .pipeline/config.yml where you store the configuration for the pipeline, e.g. apiEndpoints and credentialIds. The steps make use of the credentials store of the Jenkins server. Here is an example of the configuration file: general: cfApiEndpoint: 'https://api.cf.eu10.hana.ondemand.com' cfOrg: 'your-cf-org' cfSpace: 'yourSpace' cfCredentialsId: 'cfAuthentification' cfServiceInstance: 'abapEnvironmentPipeline' stages: Prepare System: cfService: 'abap' cfServicePlan: 'standard' abapSystemAdminEmail: 'user@example.com' abapSystemDescription: 'ABAP Environment Q System' abapSystemIsDevelopmentAllowed: false abapSystemID: 'H02' abapSystemSizeOfPersistence: 4 abapSystemSizeOfRuntime: 1 Clone Repositories: strategy: 'Clone' repositories: 'repositories.yml' ATC: # In order to be executed, the ATC stage needs at least one configuration entry # If the ATC stage should not be executed, delete the whole section execute: stage AUnit: # In order to be executed, the AUnit stage needs at least one configuration entry # If the AUnit stage should not be executed, delete the whole section execute: stage Post: cfDeleteServiceKeys: true Some stages may only be executed if a certain condition is met. For example: the stage Prepare System will only be executed if it is configured in the stages section. Also, the created system will be deprovisioned in the cleanup routine - although it is necessary to configure the step cloudFoundryDeleteService in the Post stage as shown above. Prepare system \u00b6 The example values for the Prepare System stage are a suggestion. Please change them accordingly and don't forget to enter your own email address. Please be aware that creating a SAP BTP, ABAP environment instance may incur costs. Please have a look at the step documentation for more details. Clone Repositories \u00b6 If the Clone Repositories stage is configured, you can specify the strategy that should be performed on the software components and the branches that you have configured in the respositories.yml file in step 3. Configuration for Cloning the repositories . Per default the strategy will be set to Pull if not specified. The following strategies are supported and can be used on the software components and branches: Pull : If you have specified Pull as the strategy the abapEnvironmentPullGitRepo step will be used Clone : If you have specified the Clone strategy the abapEnvironmentCloneGitRepo step will be used CheckoutPull : This strategy performs a Checkout of Branches with the abapEnvironmentCheckoutBranch step followed by a Pull of the Software Component with the abapEnvironmentPullGitRepo step Note that you can use the repositories.yml file with the repositories parameter consistently for all strategies. The values for cfApiEndpoint , cfOrg and cfSpace can be found in the respective overview pages in the SAP BTP cockpit. The SAP BTP / Cloud Foundry credentials, saved in the Jenkins credentials store with the ID cfCredentialsId , must refer to a user with the required authorizations (\"Space Developer\") for the SAP BTP / Cloud Foundry organization and space. ATC & AUnit \u00b6 The ATC and AUnit stage will be executed, if the config.yml file contains an entry for the respective stage. If you are using the default configuration a placeholder entry execute: stage has to be added in order to activate the stages. If you are using a dedicated configuration file - atcConfig.yml and aunitConfig.yml - this is not necessary. 7. Create a Jenkins Pipeline \u00b6 On your Jenkins server click on New Item to create a new pipeline. Provide a name and select the type Pipeline . On the creation screen for the pipeline, scroll to the section Pipeline and select Pipeline script from SCM . Provide the URL (and credentials - if required) of the repository, in which you configured the pipeline. Make sure the Script Path points to your Jenkinsfile - if you created the Jenkinsfile according to the documentation above, the default value should be correct. If you want to configure a build trigger, this can be done in the section of the same name. Here is one example: to run the pipeline every night, you can tick the box \"Run periodically\". In the visible input field, you can specify a shedule. Click on the questionsmark to read the documentation. The following example will result in the pipeline running every night between 3am and 4am. H H(3-4) * * * Make sure to check the general option \"Do not allow concurrent builds\" in order to prevent concurrent build processes. Stage Names \u00b6 The stage name for the extension is usually the displayed name, e.g. ATC.groovy or Prepare System.groovy . One exception is the generated Post stage. While the displayed name is \"Declarative: Post Actions\", you can extend this stage using Post.groovy . Extension \u00b6 You can extend each stage of this pipeline following the general extensibility documentation and the specific ABAP Environment pipeline extensibility documentation .","title":"Configuration"},{"location":"pipelines/abapEnvironment/configuration/#configuration","text":"In general, the SAP BTP, ABAP environment pipeline supports different scenarios. The idea is that only configured stages are executed and the user is able to choose the appropriate stages. In this section, you can learn how to create a configuration in a (GitHub) repository to run an ABAP environment pipeline used for testing. This specific example will create a pipeline, which executes ATC checks after creating a new ABAP environment system. In the end, the system will be deprovisioned. You can have a look at different pipeline configurations in our SAP-samples repository or learn more about the configuration in the respective stage or step documentation. Stage Steps Init - Initial Checks abapAddonAssemblyKitCheckPV , abapAddonAssemblyKitCheckCVs , abapAddonAssemblyKitReserveNextPackages , Prepare System abapEnvironmentCreateSystem Clone Repositories cloudFoundryCreateServiceKey , abapEnvironmentPullGitRepo , abapEnvironmentCloneGitRepo , abapEnvironmentCheckoutBranch Test abapEnvironmentRunATCCheck , abapEnvironmentRunAUnitTest , abapEnvironmentPushATCSystemConfig Build cloudFoundryCreateServiceKey , abapEnvironmentAssemblePackages , abapAddonAssemblyKitRegisterPackages , abapAddonAssemblyKitReleasePackages , abapEnvironmentAssembleConfirm , abapAddonAssemblyKitCreateTargetVector , abapAddonAssemblyKitPublishTargetVector Integration Tests abapEnvironmentCreateSystem , cloudFoundryDeleteService Confirm - Publish abapAddonAssemblyKitPublishTargetVector Post cloudFoundryDeleteService","title":"Configuration"},{"location":"pipelines/abapEnvironment/configuration/#1-prerequisites","text":"Configure your Jenkins server according to the documentation . Create a git repository on a host reachable by the Jenkins server (e.g. GitHub.com). The pipeline will be configured in this repository. Create a GitHub user with read access. The entitlements for the ABAP environment system are available in the SAP BTP global account and assigned to the subaccount. A Cloud Foundry organization & space with the allocated entitlements are available. A Cloud Foundry user & password with the required authorization (\"Space Developer\") in the organization and space are available. User and password were saved in the Jenkins Credentials Store.","title":"1. Prerequisites"},{"location":"pipelines/abapEnvironment/configuration/#2-jenkinsfile","text":"Create a file named Jenkinsfile in your repository with the following content: @Library('piper-lib-os') _ abapEnvironmentPipeline script: this The annotation @Library('piper-lib-os') is a reference to the Jenkins Configuration, where you configured the project \"Piper\" library as a \"Global Pipeline Library\". If you want to avoid breaking changes we advise you to use a specific release of the Piper Library instead of the default master branch. This can be achieved by either adapting the configuration (see documentation ) or by specifying the release within the annotaion: @Library('piper-lib-os@v1.53.0') _ An Overview of the releases of the project \"Piper\" library can be found here .","title":"2. Jenkinsfile"},{"location":"pipelines/abapEnvironment/configuration/#3-configuration-for-cloning-the-repositories","text":"If you have specified the Clone Repositories stage you can make use of a dedicated configuration file containing the repositories to be pulled and the branches to be switched on. The repositories flag makes use of such a configuration file and helps executing a Pull , Clone and Checkout of the branches of the repositores. Create the file repositories.yml with the following structure containing your repositories including the branches for this stage. repositories: - name: '/DMO/GIT_REPOSITORY' branch: 'master' - name: '/DMO/GIT_REPO' branch: 'master' You can later use the repositories.yml file for the repositories parameter in the Clone Repositories stage used in chapter 5. Technical Pipeline Configuration .","title":"3. Configuration for Cloning the repositories"},{"location":"pipelines/abapEnvironment/configuration/#4-optional-configuration-for-the-abap-test-cockpit-atc-and-abap-unit-tests-aunit","text":"As a default, a configuration for ATC and AUnit is generated out of the repositories.yml file. This default configuration checks the listed repositories using the default ATC check variant and with no AUnit restrictions regarding duration and risk level . If you want to configure these tools yourself, you can create a tool specific configuration.","title":"4. Optional: Configuration for the ABAP Test Cockpit (ATC) and ABAP Unit Tests (AUnit)"},{"location":"pipelines/abapEnvironment/configuration/#atc","text":"Create a file atcConfig.yml to store the configuration for the ATC run. In this file, you can specify which packages or software components shall be checked. Please have a look at the step documentation for more details. You have to pass the filename atcConfig.yml to the atcConfig parameter in the 5. Technical Pipeline Configuration . Here is an example of the configuration: objectSet: softwarecomponent: - name: \"/DMO/REPO\"","title":"ATC"},{"location":"pipelines/abapEnvironment/configuration/#aunit","text":"Create a file aunitConfig.yml to store the configuration for the AUnit run. In this file, you can specify which packages or software components shall be checked. Please have a look at the step documentation for more details. You have to pass the filename aunitConfig.yml to the aunitConfig parameter in the 5. Technical Pipeline Configuration . Here is an example of the configuration: title: My AUnit run objectSet: softwarecomponents: - name: Z_TEST_SC - name: Z_TEST_SC2","title":"AUnit"},{"location":"pipelines/abapEnvironment/configuration/#5-technical-pipeline-configuration","text":"Create a file .pipeline/config.yml where you store the configuration for the pipeline, e.g. apiEndpoints and credentialIds. The steps make use of the credentials store of the Jenkins server. Here is an example of the configuration file: general: cfApiEndpoint: 'https://api.cf.eu10.hana.ondemand.com' cfOrg: 'your-cf-org' cfSpace: 'yourSpace' cfCredentialsId: 'cfAuthentification' cfServiceInstance: 'abapEnvironmentPipeline' stages: Prepare System: cfService: 'abap' cfServicePlan: 'standard' abapSystemAdminEmail: 'user@example.com' abapSystemDescription: 'ABAP Environment Q System' abapSystemIsDevelopmentAllowed: false abapSystemID: 'H02' abapSystemSizeOfPersistence: 4 abapSystemSizeOfRuntime: 1 Clone Repositories: strategy: 'Clone' repositories: 'repositories.yml' ATC: # In order to be executed, the ATC stage needs at least one configuration entry # If the ATC stage should not be executed, delete the whole section execute: stage AUnit: # In order to be executed, the AUnit stage needs at least one configuration entry # If the AUnit stage should not be executed, delete the whole section execute: stage Post: cfDeleteServiceKeys: true Some stages may only be executed if a certain condition is met. For example: the stage Prepare System will only be executed if it is configured in the stages section. Also, the created system will be deprovisioned in the cleanup routine - although it is necessary to configure the step cloudFoundryDeleteService in the Post stage as shown above.","title":"5. Technical Pipeline Configuration"},{"location":"pipelines/abapEnvironment/configuration/#prepare-system","text":"The example values for the Prepare System stage are a suggestion. Please change them accordingly and don't forget to enter your own email address. Please be aware that creating a SAP BTP, ABAP environment instance may incur costs. Please have a look at the step documentation for more details.","title":"Prepare system"},{"location":"pipelines/abapEnvironment/configuration/#clone-repositories","text":"If the Clone Repositories stage is configured, you can specify the strategy that should be performed on the software components and the branches that you have configured in the respositories.yml file in step 3. Configuration for Cloning the repositories . Per default the strategy will be set to Pull if not specified. The following strategies are supported and can be used on the software components and branches: Pull : If you have specified Pull as the strategy the abapEnvironmentPullGitRepo step will be used Clone : If you have specified the Clone strategy the abapEnvironmentCloneGitRepo step will be used CheckoutPull : This strategy performs a Checkout of Branches with the abapEnvironmentCheckoutBranch step followed by a Pull of the Software Component with the abapEnvironmentPullGitRepo step Note that you can use the repositories.yml file with the repositories parameter consistently for all strategies. The values for cfApiEndpoint , cfOrg and cfSpace can be found in the respective overview pages in the SAP BTP cockpit. The SAP BTP / Cloud Foundry credentials, saved in the Jenkins credentials store with the ID cfCredentialsId , must refer to a user with the required authorizations (\"Space Developer\") for the SAP BTP / Cloud Foundry organization and space.","title":"Clone Repositories"},{"location":"pipelines/abapEnvironment/configuration/#atc-aunit","text":"The ATC and AUnit stage will be executed, if the config.yml file contains an entry for the respective stage. If you are using the default configuration a placeholder entry execute: stage has to be added in order to activate the stages. If you are using a dedicated configuration file - atcConfig.yml and aunitConfig.yml - this is not necessary.","title":"ATC &amp; AUnit"},{"location":"pipelines/abapEnvironment/configuration/#7-create-a-jenkins-pipeline","text":"On your Jenkins server click on New Item to create a new pipeline. Provide a name and select the type Pipeline . On the creation screen for the pipeline, scroll to the section Pipeline and select Pipeline script from SCM . Provide the URL (and credentials - if required) of the repository, in which you configured the pipeline. Make sure the Script Path points to your Jenkinsfile - if you created the Jenkinsfile according to the documentation above, the default value should be correct. If you want to configure a build trigger, this can be done in the section of the same name. Here is one example: to run the pipeline every night, you can tick the box \"Run periodically\". In the visible input field, you can specify a shedule. Click on the questionsmark to read the documentation. The following example will result in the pipeline running every night between 3am and 4am. H H(3-4) * * * Make sure to check the general option \"Do not allow concurrent builds\" in order to prevent concurrent build processes.","title":"7. Create a Jenkins Pipeline"},{"location":"pipelines/abapEnvironment/configuration/#stage-names","text":"The stage name for the extension is usually the displayed name, e.g. ATC.groovy or Prepare System.groovy . One exception is the generated Post stage. While the displayed name is \"Declarative: Post Actions\", you can extend this stage using Post.groovy .","title":"Stage Names"},{"location":"pipelines/abapEnvironment/configuration/#extension","text":"You can extend each stage of this pipeline following the general extensibility documentation and the specific ABAP Environment pipeline extensibility documentation .","title":"Extension"},{"location":"pipelines/abapEnvironment/extensibility/","text":"Extensibility \u00b6 In general, the SAP BTP, ABAP environment pipeline supports different scenarios. The idea is that only configured stages are executed and the user is able to choose the appropriate stages. In this section, you can learn how to extend the SAP BTP, ABAP environment pipeline with our recommended and best-practice approaches. 1. Extend the ATC stage via the Checkstyle/Warnings Next Generation Plugin \u00b6 The ATC stage will execute ATC checks on a SAP BTP ABAP environment system via the step abapEnvironmentRunATCCheck . These results will be pinned to the respective Jenkins Jobs as an XML file in Checkstyle format. Per default this file will be named ATCResults.xml . You can change the file name via the step parameter atcResultsFileName . Jenkins offers the possibility to display the ATC results utilizing the checkstyle format with the Warnings Next Generation Plugin ( GitHub Project ). To achieve this, create a file .pipeline/extensions/ATC.groovy with the following content: void call ( Map params ) { //access stage name echo \"Start - Extension for stage: ${params.stageName}\" //access config echo \"Current stage config: ${params.config}\" //execute original stage as defined in the template params . originalStage () recordIssues tools: [ checkStyle ( pattern: '**/ATCResults.xml' )], qualityGates: [[ threshold: 1 , type: 'TOTAL' , unstable: true ]] echo \"End - Extension for stage: ${params.stageName}\" } return this The Jenkins pipeline step recordIssues captures the results: While tools: [checkStyle(pattern: '**/**/ATCResults.xml')] will display the ATC findings using the checkstyle format, qualityGates: [[threshold: 1, type: 'TOTAL', unstable: true]] will set the build result to UNSTABLE in case the ATC results contain at least one warning or error in total. You can define several quality gates that will be checked after the issues have been reported. For example by providing a qualityGates configuration with option unstable: false it would be possible to end the pipeline execution in case of findings. See Quality gate configuration for details. If the pipeline execution should be aborted in case of ATC findings, to not continue with execution of following pipeline stages, use the error step in the stage extension to cause the build to stop: if ( currentBuild . result == 'FAILURE' ) { error ( 'Stopping build due to ATC Check quality gate' ) } Local Jenkins If you are using a local Jenkins you may have to adapt the Jenkins URL in the configuration if the CheckStyle Plugin shows this error: \"Can't create fingerprints for some files\". 2. Extend the ATC stage to send ATC results via E-Mail \u00b6 In general when executing the ATC stage, the respective ATC results will normally be pinned to the Jenkins Job in a checkStyle XML format. Additionally, you can set the generateHTML flag to true for the abapEnvironmentRunATCCheck step. This includes the generation of an HTML document containing the ATC results for the abapEnvironmentRunATCCheck step that will also be pinned to the respective Jenkins Job. The ATC results can be attached to an E-Mail or being sent as the E-Mail body with the Email Extension Plugin ( GitHub Project ) using the emailext() method. Make sure that you have configured the Email Extension Plugin correctly before using it. In the following example we only provide a sample configuration using the Jenkins Email Extension Plugin . The E-Mail can be fully customized to your needs. Please refer to the Email Extension Plugin Documentation to see the full list of parameter that are supported. If you haven't created it already, create/extend the file .pipeline/extensions/ATC.groovy with the following content: void call ( Map params ) { //access stage name echo \"Start - Extension for stage: ${params.stageName}\" //access config echo \"Current stage config: ${params.config}\" //execute original stage as defined in the template params . originalStage () emailext ( attachmentsPattern: 'ATCResults.html' , //This will attach the ATC results to the E-Mail to: 'user@example.com, admin@example.com' , subject: \"ATC results Mail from latest Run in System H01\" , body: 'Dear User, here are the results from the latest ATC run ${env.BUILD_ID}.' + readFile ( 'ATCResults.html' ) //This will parse the ATC results and send it as the E-Mail body ) echo \"End - Extension for stage: ${params.stageName}\" } return this Note that in above example the ATC results, stored in the ATCResults.html file that is pinned to the Jenkins Job, will be sent as an attachmend using the attachmentsPattern parameter as well as being parsed and attached to the E-Mail body using the body parameter. Both methods are possible. If you chose to include the ATC results in the E-Mail body make sure to read the file content properly, e.g. using the readFile() method. The subject parameter defines the subject of the E-Mail that will be sent. The to parameter specifies a list of recipients separated by a comma. You can also set a Distribution Lists as a recipient. For all parameters it is also possible to use Jenkins environment variables like ${env.BUILD_ID} or ${env.JENKINS_URL} . 3. Extend the AUnit stage via the JUnit Plugin \u00b6 The AUnit stage will execute AUnit test runs on a SAP BTP ABAP environment system via the step abapEnvironmentRunAUnitTest . These results will be pinned to the respective Jenkins Jobs as an XML file in the JUnit format. Per default this file will be named AUnitResults.xml . You can change the file name via the step parameter aUnitResultsFileName . Jenkins offers the possibility to display the AUnit results utilizing the JUnit format with the JUnit Plugin ( GitHub Project ). To achieve this, create a file .pipeline/extensions/AUnit.groovy with the following content: void call ( Map params ) { //access stage name echo \"Start - Extension for stage: ${params.stageName}\" //access config echo \"Current stage config: ${params.config}\" //execute original stage as defined in the template params . originalStage () junit skipPublishingChecks: true , allowEmptyResults: true , testResults: '**/AUnitResults.xml' echo \"End - Extension for stage: ${params.stageName}\" } return this You can simply use the JUnit Plugin for Jenkins in the AUnit stage within the .pipeline/extensions/AUnit.groovy file by using the junit command. You can set optional parameters like skipPublishingChecks: true in order to disable an integration to the GitHub Checks API. allowEmptyResults: true allows the build status of the Jenkins run to be SUCCESS even if there have been no results from the respective AUnit test run in the test results file. Vice versa, allowEmptyResults: false will set the build status to FAILURE if the test results file contains no results. The testResults parameter specifies the path to the AUnit test results file which has been saved and pinned to the Jenkins job in the abapEnvironmentRunAUnitTest step. Please refer to the documentation of the ( JUnit Plugin ) for more detailled information on the usage and configuration of the JUnit plugin parameters. 4. Extend the AUnit stage to send AUnit results via E-Mail \u00b6 In general when executing the AUnit stage, the respective AUnit results will normally be pinned to the Jenkins Job in a JUnit XML format. Additionally, you can set the generateHTML flag to true for the abapEnvironmentRunAUnitTest step. This includes the generation of an HTML document containing the AUnit results for the abapEnvironmentRunAUnitTest step that will also be pinned to the respective Jenkins Job. The AUnit results can be attached to an E-Mail or being sent as the E-Mail body with the Email Extension Plugin ( GitHub Project ) using the emailext() method. Make sure that you have configured the Email Extension Plugin correctly before using it. In the following example we only provide a sample configuration using the Jenkins Email Extension Plugin . The E-Mail can be fully customized to your needs. Please refer to the Email Extension Plugin Documentation to see the full list of parameter that are supported. If you haven't created it already, create/extend the file .pipeline/extensions/AUnit.groovy with the following content: void call ( Map params ) { //access stage name echo \"Start - Extension for stage: ${params.stageName}\" //access config echo \"Current stage config: ${params.config}\" //execute original stage as defined in the template params . originalStage () emailext ( attachmentsPattern: 'AUnitResults.html' , //This will attach the AUnit results to the E-Mail to: 'user@example.com, admin@example.com' , subject: \"AUnit results Mail from latest Run in System H01\" , body: 'Dear User, here are the results from the latest AUnit test run ${env.BUILD_ID}.' + readFile ( 'AUnitResults.html' ) //This will parse the AUnit results and send it as the E-Mail body ) echo \"End - Extension for stage: ${params.stageName}\" } return this Note that in above example the AUnit test run results, stored in the AUnitResults.html file that is pinned to the Jenkins job, will be sent as an attachment using the attachmentsPattern parameter as well as being parsed and attached to the E-Mail body using the body parameter. Both methods are possible. If you chose to include the AUnit test run results in the E-Mail body make sure to read the file content properly, e.g. using the readFile() method. The subject parameter defines the subject of the E-Mail that will be sent. The to parameter specifies a list of recipients separated by a comma. You can also set a distribution list as a recipient. For all parameters it is also possible to use Jenkins environment variables like ${env.BUILD_ID} or ${env.JENKINS_URL} .","title":"Extensibility"},{"location":"pipelines/abapEnvironment/extensibility/#extensibility","text":"In general, the SAP BTP, ABAP environment pipeline supports different scenarios. The idea is that only configured stages are executed and the user is able to choose the appropriate stages. In this section, you can learn how to extend the SAP BTP, ABAP environment pipeline with our recommended and best-practice approaches.","title":"Extensibility"},{"location":"pipelines/abapEnvironment/extensibility/#1-extend-the-atc-stage-via-the-checkstylewarnings-next-generation-plugin","text":"The ATC stage will execute ATC checks on a SAP BTP ABAP environment system via the step abapEnvironmentRunATCCheck . These results will be pinned to the respective Jenkins Jobs as an XML file in Checkstyle format. Per default this file will be named ATCResults.xml . You can change the file name via the step parameter atcResultsFileName . Jenkins offers the possibility to display the ATC results utilizing the checkstyle format with the Warnings Next Generation Plugin ( GitHub Project ). To achieve this, create a file .pipeline/extensions/ATC.groovy with the following content: void call ( Map params ) { //access stage name echo \"Start - Extension for stage: ${params.stageName}\" //access config echo \"Current stage config: ${params.config}\" //execute original stage as defined in the template params . originalStage () recordIssues tools: [ checkStyle ( pattern: '**/ATCResults.xml' )], qualityGates: [[ threshold: 1 , type: 'TOTAL' , unstable: true ]] echo \"End - Extension for stage: ${params.stageName}\" } return this The Jenkins pipeline step recordIssues captures the results: While tools: [checkStyle(pattern: '**/**/ATCResults.xml')] will display the ATC findings using the checkstyle format, qualityGates: [[threshold: 1, type: 'TOTAL', unstable: true]] will set the build result to UNSTABLE in case the ATC results contain at least one warning or error in total. You can define several quality gates that will be checked after the issues have been reported. For example by providing a qualityGates configuration with option unstable: false it would be possible to end the pipeline execution in case of findings. See Quality gate configuration for details. If the pipeline execution should be aborted in case of ATC findings, to not continue with execution of following pipeline stages, use the error step in the stage extension to cause the build to stop: if ( currentBuild . result == 'FAILURE' ) { error ( 'Stopping build due to ATC Check quality gate' ) } Local Jenkins If you are using a local Jenkins you may have to adapt the Jenkins URL in the configuration if the CheckStyle Plugin shows this error: \"Can't create fingerprints for some files\".","title":"1. Extend the ATC stage via the Checkstyle/Warnings Next Generation Plugin"},{"location":"pipelines/abapEnvironment/extensibility/#2-extend-the-atc-stage-to-send-atc-results-via-e-mail","text":"In general when executing the ATC stage, the respective ATC results will normally be pinned to the Jenkins Job in a checkStyle XML format. Additionally, you can set the generateHTML flag to true for the abapEnvironmentRunATCCheck step. This includes the generation of an HTML document containing the ATC results for the abapEnvironmentRunATCCheck step that will also be pinned to the respective Jenkins Job. The ATC results can be attached to an E-Mail or being sent as the E-Mail body with the Email Extension Plugin ( GitHub Project ) using the emailext() method. Make sure that you have configured the Email Extension Plugin correctly before using it. In the following example we only provide a sample configuration using the Jenkins Email Extension Plugin . The E-Mail can be fully customized to your needs. Please refer to the Email Extension Plugin Documentation to see the full list of parameter that are supported. If you haven't created it already, create/extend the file .pipeline/extensions/ATC.groovy with the following content: void call ( Map params ) { //access stage name echo \"Start - Extension for stage: ${params.stageName}\" //access config echo \"Current stage config: ${params.config}\" //execute original stage as defined in the template params . originalStage () emailext ( attachmentsPattern: 'ATCResults.html' , //This will attach the ATC results to the E-Mail to: 'user@example.com, admin@example.com' , subject: \"ATC results Mail from latest Run in System H01\" , body: 'Dear User, here are the results from the latest ATC run ${env.BUILD_ID}.' + readFile ( 'ATCResults.html' ) //This will parse the ATC results and send it as the E-Mail body ) echo \"End - Extension for stage: ${params.stageName}\" } return this Note that in above example the ATC results, stored in the ATCResults.html file that is pinned to the Jenkins Job, will be sent as an attachmend using the attachmentsPattern parameter as well as being parsed and attached to the E-Mail body using the body parameter. Both methods are possible. If you chose to include the ATC results in the E-Mail body make sure to read the file content properly, e.g. using the readFile() method. The subject parameter defines the subject of the E-Mail that will be sent. The to parameter specifies a list of recipients separated by a comma. You can also set a Distribution Lists as a recipient. For all parameters it is also possible to use Jenkins environment variables like ${env.BUILD_ID} or ${env.JENKINS_URL} .","title":"2. Extend the ATC stage to send ATC results via E-Mail"},{"location":"pipelines/abapEnvironment/extensibility/#3-extend-the-aunit-stage-via-the-junit-plugin","text":"The AUnit stage will execute AUnit test runs on a SAP BTP ABAP environment system via the step abapEnvironmentRunAUnitTest . These results will be pinned to the respective Jenkins Jobs as an XML file in the JUnit format. Per default this file will be named AUnitResults.xml . You can change the file name via the step parameter aUnitResultsFileName . Jenkins offers the possibility to display the AUnit results utilizing the JUnit format with the JUnit Plugin ( GitHub Project ). To achieve this, create a file .pipeline/extensions/AUnit.groovy with the following content: void call ( Map params ) { //access stage name echo \"Start - Extension for stage: ${params.stageName}\" //access config echo \"Current stage config: ${params.config}\" //execute original stage as defined in the template params . originalStage () junit skipPublishingChecks: true , allowEmptyResults: true , testResults: '**/AUnitResults.xml' echo \"End - Extension for stage: ${params.stageName}\" } return this You can simply use the JUnit Plugin for Jenkins in the AUnit stage within the .pipeline/extensions/AUnit.groovy file by using the junit command. You can set optional parameters like skipPublishingChecks: true in order to disable an integration to the GitHub Checks API. allowEmptyResults: true allows the build status of the Jenkins run to be SUCCESS even if there have been no results from the respective AUnit test run in the test results file. Vice versa, allowEmptyResults: false will set the build status to FAILURE if the test results file contains no results. The testResults parameter specifies the path to the AUnit test results file which has been saved and pinned to the Jenkins job in the abapEnvironmentRunAUnitTest step. Please refer to the documentation of the ( JUnit Plugin ) for more detailled information on the usage and configuration of the JUnit plugin parameters.","title":"3. Extend the AUnit stage via the JUnit Plugin"},{"location":"pipelines/abapEnvironment/extensibility/#4-extend-the-aunit-stage-to-send-aunit-results-via-e-mail","text":"In general when executing the AUnit stage, the respective AUnit results will normally be pinned to the Jenkins Job in a JUnit XML format. Additionally, you can set the generateHTML flag to true for the abapEnvironmentRunAUnitTest step. This includes the generation of an HTML document containing the AUnit results for the abapEnvironmentRunAUnitTest step that will also be pinned to the respective Jenkins Job. The AUnit results can be attached to an E-Mail or being sent as the E-Mail body with the Email Extension Plugin ( GitHub Project ) using the emailext() method. Make sure that you have configured the Email Extension Plugin correctly before using it. In the following example we only provide a sample configuration using the Jenkins Email Extension Plugin . The E-Mail can be fully customized to your needs. Please refer to the Email Extension Plugin Documentation to see the full list of parameter that are supported. If you haven't created it already, create/extend the file .pipeline/extensions/AUnit.groovy with the following content: void call ( Map params ) { //access stage name echo \"Start - Extension for stage: ${params.stageName}\" //access config echo \"Current stage config: ${params.config}\" //execute original stage as defined in the template params . originalStage () emailext ( attachmentsPattern: 'AUnitResults.html' , //This will attach the AUnit results to the E-Mail to: 'user@example.com, admin@example.com' , subject: \"AUnit results Mail from latest Run in System H01\" , body: 'Dear User, here are the results from the latest AUnit test run ${env.BUILD_ID}.' + readFile ( 'AUnitResults.html' ) //This will parse the AUnit results and send it as the E-Mail body ) echo \"End - Extension for stage: ${params.stageName}\" } return this Note that in above example the AUnit test run results, stored in the AUnitResults.html file that is pinned to the Jenkins job, will be sent as an attachment using the attachmentsPattern parameter as well as being parsed and attached to the E-Mail body using the body parameter. Both methods are possible. If you chose to include the AUnit test run results in the E-Mail body make sure to read the file content properly, e.g. using the readFile() method. The subject parameter defines the subject of the E-Mail that will be sent. The to parameter specifies a list of recipients separated by a comma. You can also set a distribution list as a recipient. For all parameters it is also possible to use Jenkins environment variables like ${env.BUILD_ID} or ${env.JENKINS_URL} .","title":"4. Extend the AUnit stage to send AUnit results via E-Mail"},{"location":"pipelines/abapEnvironment/introduction/","text":"ABAP Environment Pipeline \u00b6 The goal of the ABAP environment pipeline is to enable Continuous Integration for the SAP BTP, ABAP environment, also known as Steampunk. The pipeline contains several stages and supports different scenarios. The general idea is that the user can choose a subset of these stages, which fits her/his use case, for example running nightly ATC checks and AUnit tests or building an ABAP add-on for Steampunk. Scenarios \u00b6 The following scenarios are available. Continuous Testing \u00b6 This scenario is intended to be used improve the software quality through continuous checks and testing. Please refer to the scenario documentation for more information. Building ABAP Add-ons for Steampunk \u00b6 This scenario is intended for SAP partners, who want to offer a Software as a Service (SaaS) solution on Steampunk. This is currently the only use case for building ABAP Add-ons and, more specifically, the stages \"Initial Checks\", \"Build\", \"Integration Tests\", \"Confirm\" and \"Publish\". Please refer to the scenario documentation for more information. Pipeline Stages \u00b6 The following stages and steps are part of the pipeline: Stage Steps Init - Initial Checks abapAddonAssemblyKitCheckPV , abapAddonAssemblyKitCheckCVs Prepare System abapEnvironmentCreateSystem Clone Repositories cloudFoundryCreateServiceKey , abapEnvironmentPullGitRepo Test cloudFoundryCreateServiceKey , abapEnvironmentRunATCCheck , abapEnvironmentRunAUnitTest Build cloudFoundryCreateServiceKey , abapAddonAssemblyKitReserveNextPackages , abapEnvironmentAssemblePackages , abapAddonAssemblyKitRegisterPackages , abapEnvironmentAssembleConfirm , abapAddonAssemblyKitReleasePackages , abapAddonAssemblyKitCreateTargetVector , abapAddonAssemblyKitPublishTargetVector Integration Tests cloudFoundryCreateService Confirm - Publish abapAddonAssemblyKitPublishTargetVector Post cloudFoundryDeleteService Please navigate to a stage or step to learn more details. Here you can find a step-by-step example on how to configure your pipeline.","title":"Introduction"},{"location":"pipelines/abapEnvironment/introduction/#abap-environment-pipeline","text":"The goal of the ABAP environment pipeline is to enable Continuous Integration for the SAP BTP, ABAP environment, also known as Steampunk. The pipeline contains several stages and supports different scenarios. The general idea is that the user can choose a subset of these stages, which fits her/his use case, for example running nightly ATC checks and AUnit tests or building an ABAP add-on for Steampunk.","title":"ABAP Environment Pipeline"},{"location":"pipelines/abapEnvironment/introduction/#scenarios","text":"The following scenarios are available.","title":"Scenarios"},{"location":"pipelines/abapEnvironment/introduction/#continuous-testing","text":"This scenario is intended to be used improve the software quality through continuous checks and testing. Please refer to the scenario documentation for more information.","title":"Continuous Testing"},{"location":"pipelines/abapEnvironment/introduction/#building-abap-add-ons-for-steampunk","text":"This scenario is intended for SAP partners, who want to offer a Software as a Service (SaaS) solution on Steampunk. This is currently the only use case for building ABAP Add-ons and, more specifically, the stages \"Initial Checks\", \"Build\", \"Integration Tests\", \"Confirm\" and \"Publish\". Please refer to the scenario documentation for more information.","title":"Building ABAP Add-ons for Steampunk"},{"location":"pipelines/abapEnvironment/introduction/#pipeline-stages","text":"The following stages and steps are part of the pipeline: Stage Steps Init - Initial Checks abapAddonAssemblyKitCheckPV , abapAddonAssemblyKitCheckCVs Prepare System abapEnvironmentCreateSystem Clone Repositories cloudFoundryCreateServiceKey , abapEnvironmentPullGitRepo Test cloudFoundryCreateServiceKey , abapEnvironmentRunATCCheck , abapEnvironmentRunAUnitTest Build cloudFoundryCreateServiceKey , abapAddonAssemblyKitReserveNextPackages , abapEnvironmentAssemblePackages , abapAddonAssemblyKitRegisterPackages , abapEnvironmentAssembleConfirm , abapAddonAssemblyKitReleasePackages , abapAddonAssemblyKitCreateTargetVector , abapAddonAssemblyKitPublishTargetVector Integration Tests cloudFoundryCreateService Confirm - Publish abapAddonAssemblyKitPublishTargetVector Post cloudFoundryDeleteService Please navigate to a stage or step to learn more details. Here you can find a step-by-step example on how to configure your pipeline.","title":"Pipeline Stages"},{"location":"pipelines/abapEnvironment/stages/build/","text":"Build \u00b6 This stage is responsible for building an ABAP add-on for the SAP BTP, ABAP environment. The build process of the add-on is done on a Steampunk system (using SAP_COM_0582 ) with the help of the SAP Add-On Assembly Kit as a Service (AAKaaS). After executing this stage successfully, the add-on is ready to be tested. For more details, please refer to the scenario description ). Steps \u00b6 The following steps are executed in this stage: cloudFoundryCreateServiceKey abapEnvironmentAssemblePackages abapAddonAssemblyKitRegisterPackages abapAddonAssemblyKitReleasePackages abapEnvironmentAssembleConfirm abapAddonAssemblyKitCreateTargetVector abapAddonAssemblyKitPublishTargetVector Stage Parameters \u00b6 There are no specifc stage parameters. Stage Activation \u00b6 This stage will be active, if the stage configuration in the config.yml contains entries for this stage. Configuration Example \u00b6 config.yml \u00b6 general : abapAddonAssemblyKitCredentialsId : 'TechUserAAKaaS' addonDescriptorFileName : 'addon.yml' cfApiEndpoint : 'https://api.cf.sap.hana.ondemand.com' cfOrg : 'myOrgBld' cfSpace : 'mySpaceBld' cfCredentialsId : 'cfAuthentification' cfServiceInstance : 'bld_system' cfServiceKeyName : 'JENKINS_SAP_COM_0948' stages : Build : cfServiceKeyName : 'JENKINS_SAP_COM_0582' cfServiceKeyConfig : 'sap_com_0582.json' addon.yml \u00b6 Use Long Commit ID for the commitID fields Please use the long commit ID in the commit ID field currently if you are using the short commit ID the build process will fail. Go into the Manage Software Components app, navigate to the branch, select the commit in the list of commits, field \"Long Commit ID\" becomes available. --- addonProduct : /NAMESPC/PRODUCTX addonVersion : 1.2.0 repositories : - name : /NAMESPC/COMPONENTA branch : v1.2.0 version : 1.2.0 commitID : 7d4516e9 - name : /NAMESPC/COMPONENTB branch : v2.0.0 version : 2.0.0 commitID : 9f102ffb sap_com_0582.json \u00b6 { \"scenario_id\" : \"SAP_COM_0582\" , \"type\" : \"basic\" }","title":"Build"},{"location":"pipelines/abapEnvironment/stages/build/#build","text":"This stage is responsible for building an ABAP add-on for the SAP BTP, ABAP environment. The build process of the add-on is done on a Steampunk system (using SAP_COM_0582 ) with the help of the SAP Add-On Assembly Kit as a Service (AAKaaS). After executing this stage successfully, the add-on is ready to be tested. For more details, please refer to the scenario description ).","title":"Build"},{"location":"pipelines/abapEnvironment/stages/build/#steps","text":"The following steps are executed in this stage: cloudFoundryCreateServiceKey abapEnvironmentAssemblePackages abapAddonAssemblyKitRegisterPackages abapAddonAssemblyKitReleasePackages abapEnvironmentAssembleConfirm abapAddonAssemblyKitCreateTargetVector abapAddonAssemblyKitPublishTargetVector","title":"Steps"},{"location":"pipelines/abapEnvironment/stages/build/#stage-parameters","text":"There are no specifc stage parameters.","title":"Stage Parameters"},{"location":"pipelines/abapEnvironment/stages/build/#stage-activation","text":"This stage will be active, if the stage configuration in the config.yml contains entries for this stage.","title":"Stage Activation"},{"location":"pipelines/abapEnvironment/stages/build/#configuration-example","text":"","title":"Configuration Example"},{"location":"pipelines/abapEnvironment/stages/build/#configyml","text":"general : abapAddonAssemblyKitCredentialsId : 'TechUserAAKaaS' addonDescriptorFileName : 'addon.yml' cfApiEndpoint : 'https://api.cf.sap.hana.ondemand.com' cfOrg : 'myOrgBld' cfSpace : 'mySpaceBld' cfCredentialsId : 'cfAuthentification' cfServiceInstance : 'bld_system' cfServiceKeyName : 'JENKINS_SAP_COM_0948' stages : Build : cfServiceKeyName : 'JENKINS_SAP_COM_0582' cfServiceKeyConfig : 'sap_com_0582.json'","title":"config.yml"},{"location":"pipelines/abapEnvironment/stages/build/#addonyml","text":"Use Long Commit ID for the commitID fields Please use the long commit ID in the commit ID field currently if you are using the short commit ID the build process will fail. Go into the Manage Software Components app, navigate to the branch, select the commit in the list of commits, field \"Long Commit ID\" becomes available. --- addonProduct : /NAMESPC/PRODUCTX addonVersion : 1.2.0 repositories : - name : /NAMESPC/COMPONENTA branch : v1.2.0 version : 1.2.0 commitID : 7d4516e9 - name : /NAMESPC/COMPONENTB branch : v2.0.0 version : 2.0.0 commitID : 9f102ffb","title":"addon.yml"},{"location":"pipelines/abapEnvironment/stages/build/#sap_com_0582json","text":"{ \"scenario_id\" : \"SAP_COM_0582\" , \"type\" : \"basic\" }","title":"sap_com_0582.json"},{"location":"pipelines/abapEnvironment/stages/cloneRepositories/","text":"Clone Repositories \u00b6 This stage creates pulls/clones the specified software components (repositories) to the SAP BTP, ABAP environment system. As a prerequisite, the Communication Arrangement SAP_COM_0948 (Software Component Management Integration) is created using the step cloudFoundryCreateServiceKey . With the creation of the Communication Arrangement, a User and Password is created on the SAP BTP, ABAP environment system for the APIs that are used in this stage, as well as in the ATC stage. Steps \u00b6 The following steps can be executed in this stage: cloudFoundryCreateServiceKey abapEnvironmentPullGitRepo abapEnvironmentCloneGitRepo abapEnvironmentCheckoutBranch Stage Parameters \u00b6 The parameter strategy influences, which steps will be executed. Possible values are: Value Explanation Clone The step abapEnvironmentCloneGitRepo will be executed. This is recommended, if a new system was created in the Prepare System stage. Pull The step abapEnvironmentPullGitRepo will be executed. This is recommended, if a static system is used. The software component should be cloned beforehand. CheckoutPull The step abapEnvironmentCheckoutBranch , followed by abapEnvironmentPullGitRepo , will be executed. The software component should be cloned beforehand. This can be used if the branch may change between pipeline executions. Stage Activation \u00b6 This stage will be active, if the stage configuration in the config.yml contains entries for this stage. Configuration Example \u00b6 It is recommended to use a yml configuration to define the software components. This yml file works for all strategies. If you are building an ABAP add-on, the addon descriptor addon.yml can be reused. config.yml \u00b6 general : cfApiEndpoint : 'https://api.cf.sap.hana.ondemand.com' cfOrg : 'myOrg' cfSpace : 'mySpace' cfCredentialsId : 'cfAuthentification' cfServiceInstance : 'abap_system' stages : Clone Repositories : repositories : 'repositories.yml' strategy : 'Clone' repositories.yml \u00b6 repositories : - name : '/DMO/SWC' branch : 'main' commitID : 'cd87a3cac2bc946b7629580e58598c3db56a26f8' #optional tag : 'myTag' #optional","title":"Clone Repositories"},{"location":"pipelines/abapEnvironment/stages/cloneRepositories/#clone-repositories","text":"This stage creates pulls/clones the specified software components (repositories) to the SAP BTP, ABAP environment system. As a prerequisite, the Communication Arrangement SAP_COM_0948 (Software Component Management Integration) is created using the step cloudFoundryCreateServiceKey . With the creation of the Communication Arrangement, a User and Password is created on the SAP BTP, ABAP environment system for the APIs that are used in this stage, as well as in the ATC stage.","title":"Clone Repositories"},{"location":"pipelines/abapEnvironment/stages/cloneRepositories/#steps","text":"The following steps can be executed in this stage: cloudFoundryCreateServiceKey abapEnvironmentPullGitRepo abapEnvironmentCloneGitRepo abapEnvironmentCheckoutBranch","title":"Steps"},{"location":"pipelines/abapEnvironment/stages/cloneRepositories/#stage-parameters","text":"The parameter strategy influences, which steps will be executed. Possible values are: Value Explanation Clone The step abapEnvironmentCloneGitRepo will be executed. This is recommended, if a new system was created in the Prepare System stage. Pull The step abapEnvironmentPullGitRepo will be executed. This is recommended, if a static system is used. The software component should be cloned beforehand. CheckoutPull The step abapEnvironmentCheckoutBranch , followed by abapEnvironmentPullGitRepo , will be executed. The software component should be cloned beforehand. This can be used if the branch may change between pipeline executions.","title":"Stage Parameters"},{"location":"pipelines/abapEnvironment/stages/cloneRepositories/#stage-activation","text":"This stage will be active, if the stage configuration in the config.yml contains entries for this stage.","title":"Stage Activation"},{"location":"pipelines/abapEnvironment/stages/cloneRepositories/#configuration-example","text":"It is recommended to use a yml configuration to define the software components. This yml file works for all strategies. If you are building an ABAP add-on, the addon descriptor addon.yml can be reused.","title":"Configuration Example"},{"location":"pipelines/abapEnvironment/stages/cloneRepositories/#configyml","text":"general : cfApiEndpoint : 'https://api.cf.sap.hana.ondemand.com' cfOrg : 'myOrg' cfSpace : 'mySpace' cfCredentialsId : 'cfAuthentification' cfServiceInstance : 'abap_system' stages : Clone Repositories : repositories : 'repositories.yml' strategy : 'Clone'","title":"config.yml"},{"location":"pipelines/abapEnvironment/stages/cloneRepositories/#repositoriesyml","text":"repositories : - name : '/DMO/SWC' branch : 'main' commitID : 'cd87a3cac2bc946b7629580e58598c3db56a26f8' #optional tag : 'myTag' #optional","title":"repositories.yml"},{"location":"pipelines/abapEnvironment/stages/confirm/","text":"Confirm \u00b6 This stage asks for a manual confirmation before releasing the add-on product in the Publish stage. Steps \u00b6 No steps are executed in this stage. Stage Parameters \u00b6 There are no specifc stage parameters. Stage Activation \u00b6 This stage will be active, if the stage configuration in the config.yml contains entries for the Publish stage.","title":"Confirm"},{"location":"pipelines/abapEnvironment/stages/confirm/#confirm","text":"This stage asks for a manual confirmation before releasing the add-on product in the Publish stage.","title":"Confirm"},{"location":"pipelines/abapEnvironment/stages/confirm/#steps","text":"No steps are executed in this stage.","title":"Steps"},{"location":"pipelines/abapEnvironment/stages/confirm/#stage-parameters","text":"There are no specifc stage parameters.","title":"Stage Parameters"},{"location":"pipelines/abapEnvironment/stages/confirm/#stage-activation","text":"This stage will be active, if the stage configuration in the config.yml contains entries for the Publish stage.","title":"Stage Activation"},{"location":"pipelines/abapEnvironment/stages/initialChecks/","text":"Initial Checks \u00b6 This stage runs preliminary checks for the Build stage. Steps \u00b6 The following steps are executed in this stage: abapAddonAssemblyKitCheckPV abapAddonAssemblyKitCheckCVs abapAddonAssemblyKitReserveNextPackages Stage Parameters \u00b6 There are no specifc stage parameters. Stage Activation \u00b6 This stage will be active, if the stage configuration in the config.yml contains entries for the Build stage. Configuration Example \u00b6 Have a look at the Build stage .","title":"Initial Checks"},{"location":"pipelines/abapEnvironment/stages/initialChecks/#initial-checks","text":"This stage runs preliminary checks for the Build stage.","title":"Initial Checks"},{"location":"pipelines/abapEnvironment/stages/initialChecks/#steps","text":"The following steps are executed in this stage: abapAddonAssemblyKitCheckPV abapAddonAssemblyKitCheckCVs abapAddonAssemblyKitReserveNextPackages","title":"Steps"},{"location":"pipelines/abapEnvironment/stages/initialChecks/#stage-parameters","text":"There are no specifc stage parameters.","title":"Stage Parameters"},{"location":"pipelines/abapEnvironment/stages/initialChecks/#stage-activation","text":"This stage will be active, if the stage configuration in the config.yml contains entries for the Build stage.","title":"Stage Activation"},{"location":"pipelines/abapEnvironment/stages/initialChecks/#configuration-example","text":"Have a look at the Build stage .","title":"Configuration Example"},{"location":"pipelines/abapEnvironment/stages/integrationTest/","text":"Integration Tests \u00b6 This stage creates an SAP BTP, ABAP environment (Steampunk) system and installs the add-on product, that was built in the Build stage. Steps \u00b6 The following steps are executed in this stage: abapEnvironmentCreateSystem cloudFoundryDeleteService Stage Parameters \u00b6 The parameter confirmDeletion influences, if a manual confirmation is required between the creation and deletion of the system. Value Explanation true Before the system is deleted, a manual confirmation is requried. This is the default. false The system is deleted without manual confirmation. This is currently not recommended. Stage Activation \u00b6 This stage will be active, if the stage configuration in the config.yml contains entries for this stage. Configuration Example \u00b6 config.yml \u00b6 general : addonDescriptorFileName : 'addon.yml' cfApiEndpoint : 'https://api.cf.sap.hana.ondemand.com' cfCredentialsId : 'cfAuthentification' stages : Integration Tests : cfOrg : 'myOrgAti' cfSpace : 'mySpaceAti' cfServiceInstance : 'ati_system' cfService : 'abap' cfServicePlan : 'saas_oem' abapSystemAdminEmail : 'user@example.com' abapSystemDescription : 'Add-on Installation Test System' abapSystemIsDevelopmentAllowed : false abapSystemID : 'ATI' abapSystemSizeOfPersistence : 4 abapSystemSizeOfRuntime : 1 includeAddon : true confirmDeletion : true addon.yml \u00b6 --- addonProduct : /NAMESPC/PRODUCTX addonVersion : 1.2.0 repositories : - name : /NAMESPC/COMPONENTA branch : v1.2.0 version : 1.2.0 commitID : 7d4516e9 - name : /NAMESPC/COMPONENTB branch : v2.0.0 version : 2.0.0 commitID : 9f102ffb","title":"Integration Tests"},{"location":"pipelines/abapEnvironment/stages/integrationTest/#integration-tests","text":"This stage creates an SAP BTP, ABAP environment (Steampunk) system and installs the add-on product, that was built in the Build stage.","title":"Integration Tests"},{"location":"pipelines/abapEnvironment/stages/integrationTest/#steps","text":"The following steps are executed in this stage: abapEnvironmentCreateSystem cloudFoundryDeleteService","title":"Steps"},{"location":"pipelines/abapEnvironment/stages/integrationTest/#stage-parameters","text":"The parameter confirmDeletion influences, if a manual confirmation is required between the creation and deletion of the system. Value Explanation true Before the system is deleted, a manual confirmation is requried. This is the default. false The system is deleted without manual confirmation. This is currently not recommended.","title":"Stage Parameters"},{"location":"pipelines/abapEnvironment/stages/integrationTest/#stage-activation","text":"This stage will be active, if the stage configuration in the config.yml contains entries for this stage.","title":"Stage Activation"},{"location":"pipelines/abapEnvironment/stages/integrationTest/#configuration-example","text":"","title":"Configuration Example"},{"location":"pipelines/abapEnvironment/stages/integrationTest/#configyml","text":"general : addonDescriptorFileName : 'addon.yml' cfApiEndpoint : 'https://api.cf.sap.hana.ondemand.com' cfCredentialsId : 'cfAuthentification' stages : Integration Tests : cfOrg : 'myOrgAti' cfSpace : 'mySpaceAti' cfServiceInstance : 'ati_system' cfService : 'abap' cfServicePlan : 'saas_oem' abapSystemAdminEmail : 'user@example.com' abapSystemDescription : 'Add-on Installation Test System' abapSystemIsDevelopmentAllowed : false abapSystemID : 'ATI' abapSystemSizeOfPersistence : 4 abapSystemSizeOfRuntime : 1 includeAddon : true confirmDeletion : true","title":"config.yml"},{"location":"pipelines/abapEnvironment/stages/integrationTest/#addonyml","text":"--- addonProduct : /NAMESPC/PRODUCTX addonVersion : 1.2.0 repositories : - name : /NAMESPC/COMPONENTA branch : v1.2.0 version : 1.2.0 commitID : 7d4516e9 - name : /NAMESPC/COMPONENTB branch : v2.0.0 version : 2.0.0 commitID : 9f102ffb","title":"addon.yml"},{"location":"pipelines/abapEnvironment/stages/post/","text":"Post \u00b6 This stage deletes the SAP BTP, ABAP environment system created in the Prepare System stage. Steps \u00b6 The following steps are executed in this stage: cloudFoundryDeleteService Stage Parameters \u00b6 The parameter confirmDeletion influences, if a manual confirmation is required between the creation and deletion of the system. Value Explanation true Before the system is deleted, a manual confirmation is requried if the pipeline status is not \"SUCCESS\". false The system is deleted without manual confirmation. This is the default. Stage Activation \u00b6 This stage will be active, if the stage configuration in the config.yml contains entries for the Prepare System stage. Configuration Example \u00b6 config.yml \u00b6 general : cfApiEndpoint : 'https://api.cf.sap.hana.ondemand.com' cfOrg : 'myOrg' cfSpace : 'mySpace' cfCredentialsId : 'cfAuthentification' cfServiceInstance : 'abap_system' stages : Post : confirmDeletion : true cfDeleteServiceKeys : true Extension \u00b6 This stage can be extended by creating the file .pipeline/extensions/Post.groovy . See extensibility","title":"Post"},{"location":"pipelines/abapEnvironment/stages/post/#post","text":"This stage deletes the SAP BTP, ABAP environment system created in the Prepare System stage.","title":"Post"},{"location":"pipelines/abapEnvironment/stages/post/#steps","text":"The following steps are executed in this stage: cloudFoundryDeleteService","title":"Steps"},{"location":"pipelines/abapEnvironment/stages/post/#stage-parameters","text":"The parameter confirmDeletion influences, if a manual confirmation is required between the creation and deletion of the system. Value Explanation true Before the system is deleted, a manual confirmation is requried if the pipeline status is not \"SUCCESS\". false The system is deleted without manual confirmation. This is the default.","title":"Stage Parameters"},{"location":"pipelines/abapEnvironment/stages/post/#stage-activation","text":"This stage will be active, if the stage configuration in the config.yml contains entries for the Prepare System stage.","title":"Stage Activation"},{"location":"pipelines/abapEnvironment/stages/post/#configuration-example","text":"","title":"Configuration Example"},{"location":"pipelines/abapEnvironment/stages/post/#configyml","text":"general : cfApiEndpoint : 'https://api.cf.sap.hana.ondemand.com' cfOrg : 'myOrg' cfSpace : 'mySpace' cfCredentialsId : 'cfAuthentification' cfServiceInstance : 'abap_system' stages : Post : confirmDeletion : true cfDeleteServiceKeys : true","title":"config.yml"},{"location":"pipelines/abapEnvironment/stages/post/#extension","text":"This stage can be extended by creating the file .pipeline/extensions/Post.groovy . See extensibility","title":"Extension"},{"location":"pipelines/abapEnvironment/stages/prepareSystem/","text":"Prepare System \u00b6 In this stage, the SAP BTP, ABAP environment system is created. This is done with the abapEnvironmentCreateSystem step. Steps \u00b6 The following steps are executed in this stage: abapEnvironmentCreateSystem Stage Parameters \u00b6 There are no specifc stage parameters. Stage Activation \u00b6 This stage will be active, if the stage configuration in the config.yml contains entries for this stage. Configuration Example \u00b6 config.yml \u00b6 general : cfApiEndpoint : 'https://api.cf.sap.hana.ondemand.com' cfOrg : 'myOrg' cfSpace : 'mySpace' cfCredentialsId : 'cfAuthentification' cfServiceInstance : 'abap_system' stages : Prepare System : cfService : 'abap' cfServicePlan : 'standard' abapSystemAdminEmail : 'user@example.com' abapSystemDescription : 'ABAP Environment Q System' abapSystemIsDevelopmentAllowed : false abapSystemID : 'H02' abapSystemSizeOfPersistence : 4 abapSystemSizeOfRuntime : 1","title":"Prepare System"},{"location":"pipelines/abapEnvironment/stages/prepareSystem/#prepare-system","text":"In this stage, the SAP BTP, ABAP environment system is created. This is done with the abapEnvironmentCreateSystem step.","title":"Prepare System"},{"location":"pipelines/abapEnvironment/stages/prepareSystem/#steps","text":"The following steps are executed in this stage: abapEnvironmentCreateSystem","title":"Steps"},{"location":"pipelines/abapEnvironment/stages/prepareSystem/#stage-parameters","text":"There are no specifc stage parameters.","title":"Stage Parameters"},{"location":"pipelines/abapEnvironment/stages/prepareSystem/#stage-activation","text":"This stage will be active, if the stage configuration in the config.yml contains entries for this stage.","title":"Stage Activation"},{"location":"pipelines/abapEnvironment/stages/prepareSystem/#configuration-example","text":"","title":"Configuration Example"},{"location":"pipelines/abapEnvironment/stages/prepareSystem/#configyml","text":"general : cfApiEndpoint : 'https://api.cf.sap.hana.ondemand.com' cfOrg : 'myOrg' cfSpace : 'mySpace' cfCredentialsId : 'cfAuthentification' cfServiceInstance : 'abap_system' stages : Prepare System : cfService : 'abap' cfServicePlan : 'standard' abapSystemAdminEmail : 'user@example.com' abapSystemDescription : 'ABAP Environment Q System' abapSystemIsDevelopmentAllowed : false abapSystemID : 'H02' abapSystemSizeOfPersistence : 4 abapSystemSizeOfRuntime : 1","title":"config.yml"},{"location":"pipelines/abapEnvironment/stages/publish/","text":"Publish \u00b6 This stage publishes an add-on for the SAP BTP, ABAP environment (please refer to the scenario description ). Steps \u00b6 The following steps are executed in this stage: abapAddonAssemblyKitPublishTargetVector Stage Parameters \u00b6 There are no specifc stage parameters. Stage Activation \u00b6 This stage will be active, if the stage configuration in the config.yml contains entries for this stage. Configuration Example \u00b6 config.yml \u00b6 general : abapAddonAssemblyKitCredentialsId : 'TechUserAAKaaS' addonDescriptorFileName : 'addon.yml' stages : Publish : targetVectorScope : 'P' addon.yml \u00b6 --- addonProduct : /NAMESPC/PRODUCTX addonVersion : 1.2.0 repositories : - name : /NAMESPC/COMPONENTA branch : v1.2.0 version : 1.2.0 commitID : 7d4516e9 - name : /NAMESPC/COMPONENTB branch : v2.0.0 version : 2.0.0 commitID : 9f102ffb","title":"Publish"},{"location":"pipelines/abapEnvironment/stages/publish/#publish","text":"This stage publishes an add-on for the SAP BTP, ABAP environment (please refer to the scenario description ).","title":"Publish"},{"location":"pipelines/abapEnvironment/stages/publish/#steps","text":"The following steps are executed in this stage: abapAddonAssemblyKitPublishTargetVector","title":"Steps"},{"location":"pipelines/abapEnvironment/stages/publish/#stage-parameters","text":"There are no specifc stage parameters.","title":"Stage Parameters"},{"location":"pipelines/abapEnvironment/stages/publish/#stage-activation","text":"This stage will be active, if the stage configuration in the config.yml contains entries for this stage.","title":"Stage Activation"},{"location":"pipelines/abapEnvironment/stages/publish/#configuration-example","text":"","title":"Configuration Example"},{"location":"pipelines/abapEnvironment/stages/publish/#configyml","text":"general : abapAddonAssemblyKitCredentialsId : 'TechUserAAKaaS' addonDescriptorFileName : 'addon.yml' stages : Publish : targetVectorScope : 'P'","title":"config.yml"},{"location":"pipelines/abapEnvironment/stages/publish/#addonyml","text":"--- addonProduct : /NAMESPC/PRODUCTX addonVersion : 1.2.0 repositories : - name : /NAMESPC/COMPONENTA branch : v1.2.0 version : 1.2.0 commitID : 7d4516e9 - name : /NAMESPC/COMPONENTB branch : v2.0.0 version : 2.0.0 commitID : 9f102ffb","title":"addon.yml"},{"location":"pipelines/abapEnvironment/stages/test/","text":"Test \u00b6 This stage contains two sub stages, ATC and AUnit which can execute ATC checks and AUnit test runs in parallel on an SAP BTP ABAP environment systen. By default this stage will not run any of the two sub stages ATC and AUnit if they are not configured. Please keep in mind that the ATC and AUnit stages need to be configured independently. The below sections contain more information on the usage and configuration of the ATC and AUnit stages. ATC \u00b6 In this stage, ATC checks can be executed using abapEnvironmentRunATCCheck . The step can receive software components or packages. In case an ATC System Configuration should be used, it can be created/updated using abapEnvironmentPushATCSystemConfig . The results are returned in the checkstyle format and can be displayed using the Warnings Next Generation Plugin . To display the results it is necessary to extend the ATC stage via the Checkstyle/Warnings Next Generation Plugin . Alternatively it is possible to extend the ATC stage to send ATC results via E-Mail . Steps \u00b6 The following steps are executed in this stage: abapEnvironmentPushATCSystemConfig abapEnvironmentRunATCCheck Stage Parameters \u00b6 There are no specifc stage parameters. Stage Activation \u00b6 This stage will be active, if the stage configuration in the config.yml contains entries for this stage. Configuration Example \u00b6 config.yml \u00b6 In case of NOT providing an ATC System Configuration. general : cfApiEndpoint : 'https://api.cf.sap.hana.ondemand.com' cfOrg : 'myOrg' cfSpace : 'mySpace' cfCredentialsId : 'cfAuthentification' cfServiceInstance : 'abap_system' stages : ATC : atcConfig : 'atcConfig.yml' In case of providing an ATC System Configuration. general : cfApiEndpoint : 'https://api.cf.sap.hana.ondemand.com' cfOrg : 'myOrg' cfSpace : 'mySpace' cfCredentialsId : 'cfAuthentification' cfServiceInstance : 'abap_system' stages : ATC : atcConfig : 'atcConfig.yml' atcSystemConfigFilePath : 'atcSystemConfig.json' atcConfig.yml \u00b6 objectSet : softwarecomponents : - name : \"/DMO/SWC\" atcSystemConfig.json \u00b6 { \"conf_name\" : \"myATCSystemConfigurationName\" , \"checkvariant\" : \"SAP_CLOUD_PLATFORM_ATC_DEFAULT\" , \"block_findings\" : \"0\" , \"inform_findings\" : \"1\" , \"is_default\" : false , \"is_proxy_variant\" : false } ATC.groovy \u00b6 void call ( Map params ) { //access stage name echo \"Start - Extension for stage: ${params.stageName}\" //access config echo \"Current stage config: ${params.config}\" //execute original stage as defined in the template params . originalStage () recordIssues tools: [ checkStyle ( pattern: '**/ATCResults.xml' )], qualityGates: [[ threshold: 1 , type: 'TOTAL' , unstable: true ]] echo \"End - Extension for stage: ${params.stageName}\" } return this Please note, this file belongs in the extensions folder: .pipeline/extensions/ATC.groovy AUnit \u00b6 This stage will trigger an AUnit test run an on SAP BTP ABAP Environment system using the abapEnvironmentRunAUnitTest step. Steps \u00b6 The following steps are executed in this stage: abapEnvironmentRunAUnitTest Stage Parameters \u00b6 There are no specifc stage parameters. Stage Activation \u00b6 This stage will be active, if the stage configuration in the config.yml contains entries for this stage. Configuration Example \u00b6 config.yml \u00b6 general : cfApiEndpoint : 'https://api.cf.sap.hana.ondemand.com' cfOrg : 'myOrg' cfSpace : 'mySpace' cfCredentialsId : 'cfAuthentification' cfServiceInstance : 'abap_system' stages : AUnit : aUnitConfig : 'aUnitConfig.yml' aunitConfig.yml \u00b6 If you want to test complete software components please specify the aUnitConfig.yml file like in below example configuration. This configuration will test the software components Z_TEST_SC and Z_TEST_SC2 : title : My AUnit run context : AUnit test run options : measurements : none scope : ownTests : true foreignTests : true riskLevel : harmless : true dangerous : true critical : true duration : short : true medium : true long : true objectSet : softwarecomponents : - name : Z_TEST_SC - name : Z_TEST_SC2","title":"Test"},{"location":"pipelines/abapEnvironment/stages/test/#test","text":"This stage contains two sub stages, ATC and AUnit which can execute ATC checks and AUnit test runs in parallel on an SAP BTP ABAP environment systen. By default this stage will not run any of the two sub stages ATC and AUnit if they are not configured. Please keep in mind that the ATC and AUnit stages need to be configured independently. The below sections contain more information on the usage and configuration of the ATC and AUnit stages.","title":"Test"},{"location":"pipelines/abapEnvironment/stages/test/#atc","text":"In this stage, ATC checks can be executed using abapEnvironmentRunATCCheck . The step can receive software components or packages. In case an ATC System Configuration should be used, it can be created/updated using abapEnvironmentPushATCSystemConfig . The results are returned in the checkstyle format and can be displayed using the Warnings Next Generation Plugin . To display the results it is necessary to extend the ATC stage via the Checkstyle/Warnings Next Generation Plugin . Alternatively it is possible to extend the ATC stage to send ATC results via E-Mail .","title":"ATC"},{"location":"pipelines/abapEnvironment/stages/test/#steps","text":"The following steps are executed in this stage: abapEnvironmentPushATCSystemConfig abapEnvironmentRunATCCheck","title":"Steps"},{"location":"pipelines/abapEnvironment/stages/test/#stage-parameters","text":"There are no specifc stage parameters.","title":"Stage Parameters"},{"location":"pipelines/abapEnvironment/stages/test/#stage-activation","text":"This stage will be active, if the stage configuration in the config.yml contains entries for this stage.","title":"Stage Activation"},{"location":"pipelines/abapEnvironment/stages/test/#configuration-example","text":"","title":"Configuration Example"},{"location":"pipelines/abapEnvironment/stages/test/#configyml","text":"In case of NOT providing an ATC System Configuration. general : cfApiEndpoint : 'https://api.cf.sap.hana.ondemand.com' cfOrg : 'myOrg' cfSpace : 'mySpace' cfCredentialsId : 'cfAuthentification' cfServiceInstance : 'abap_system' stages : ATC : atcConfig : 'atcConfig.yml' In case of providing an ATC System Configuration. general : cfApiEndpoint : 'https://api.cf.sap.hana.ondemand.com' cfOrg : 'myOrg' cfSpace : 'mySpace' cfCredentialsId : 'cfAuthentification' cfServiceInstance : 'abap_system' stages : ATC : atcConfig : 'atcConfig.yml' atcSystemConfigFilePath : 'atcSystemConfig.json'","title":"config.yml"},{"location":"pipelines/abapEnvironment/stages/test/#atcconfigyml","text":"objectSet : softwarecomponents : - name : \"/DMO/SWC\"","title":"atcConfig.yml"},{"location":"pipelines/abapEnvironment/stages/test/#atcsystemconfigjson","text":"{ \"conf_name\" : \"myATCSystemConfigurationName\" , \"checkvariant\" : \"SAP_CLOUD_PLATFORM_ATC_DEFAULT\" , \"block_findings\" : \"0\" , \"inform_findings\" : \"1\" , \"is_default\" : false , \"is_proxy_variant\" : false }","title":"atcSystemConfig.json"},{"location":"pipelines/abapEnvironment/stages/test/#atcgroovy","text":"void call ( Map params ) { //access stage name echo \"Start - Extension for stage: ${params.stageName}\" //access config echo \"Current stage config: ${params.config}\" //execute original stage as defined in the template params . originalStage () recordIssues tools: [ checkStyle ( pattern: '**/ATCResults.xml' )], qualityGates: [[ threshold: 1 , type: 'TOTAL' , unstable: true ]] echo \"End - Extension for stage: ${params.stageName}\" } return this Please note, this file belongs in the extensions folder: .pipeline/extensions/ATC.groovy","title":"ATC.groovy"},{"location":"pipelines/abapEnvironment/stages/test/#aunit","text":"This stage will trigger an AUnit test run an on SAP BTP ABAP Environment system using the abapEnvironmentRunAUnitTest step.","title":"AUnit"},{"location":"pipelines/abapEnvironment/stages/test/#steps_1","text":"The following steps are executed in this stage: abapEnvironmentRunAUnitTest","title":"Steps"},{"location":"pipelines/abapEnvironment/stages/test/#stage-parameters_1","text":"There are no specifc stage parameters.","title":"Stage Parameters"},{"location":"pipelines/abapEnvironment/stages/test/#stage-activation_1","text":"This stage will be active, if the stage configuration in the config.yml contains entries for this stage.","title":"Stage Activation"},{"location":"pipelines/abapEnvironment/stages/test/#configuration-example_1","text":"","title":"Configuration Example"},{"location":"pipelines/abapEnvironment/stages/test/#configyml_1","text":"general : cfApiEndpoint : 'https://api.cf.sap.hana.ondemand.com' cfOrg : 'myOrg' cfSpace : 'mySpace' cfCredentialsId : 'cfAuthentification' cfServiceInstance : 'abap_system' stages : AUnit : aUnitConfig : 'aUnitConfig.yml'","title":"config.yml"},{"location":"pipelines/abapEnvironment/stages/test/#aunitconfigyml","text":"If you want to test complete software components please specify the aUnitConfig.yml file like in below example configuration. This configuration will test the software components Z_TEST_SC and Z_TEST_SC2 : title : My AUnit run context : AUnit test run options : measurements : none scope : ownTests : true foreignTests : true riskLevel : harmless : true dangerous : true critical : true duration : short : true medium : true long : true objectSet : softwarecomponents : - name : Z_TEST_SC - name : Z_TEST_SC2","title":"aunitConfig.yml"},{"location":"scenarios/CAP_Scenario/","text":"Build and Deploy SAP Cloud Application Programming Model Applications \u00b6 In this scenario, we will setup a CI/CD Pipeline for a SAP Cloud Application Programming Model (CAP) project. Prerequisites \u00b6 You have the SAP Cloud Application Programming Model command line tool (cds-dk) installed: See Get Started . You have setup a suitable Jenkins instance as described in Guided Tour Context \u00b6 The Application Programming Model for SAP Business Technology Platform (SAP BTP) is an end-to-end best practice guide for developing applications on SAP BTP and provides a supportive set of APIs, languages, and libraries. For more information about the SAP Cloud Application Programming Model, visit its documentation . Getting started \u00b6 To get started, generate a project using the SAP Cloud Application Programming Model command line tools: cds init bookshop --add java,mta,samples,hana Alternatively you can also reuse an existing project. To include support for continuous delivery, you can execute the command cds add pipeline in the directory in which you have created your project: cd bookshop cds add pipeline This will generate a project which already includes a Jenkinsfile , and a .pipeline/config.yml file. Now, you'll need to push the code to a git repository. This is required because the pipeline gets your code via git. This might be GitHub, or any other cloud or on-premise git solution you have in your company. Afterwards you can connect your Jenkins instance to your git repository and let it build the project. Legacy documentation \u00b6 If your project is not based on the SAP Business Application Studio WebIDE template, you could either migrate your code to comply with the structure which is described here , or you can use a self built pipeline, as described in this section. Prerequisites \u00b6 You have an account on SAP Business Technology Platform in the Cloud Foundry environment. See Accounts . You have downloaded and installed the Cloud Foundry command line interface (CLI). See Download and Install the Cloud Foundry Command Line Interface . You have installed the multitarget application (MTA) plug-in for the Cloud Foundry command line interface. See Install the Multitarget Application Plug-in in the Cloud Foundry Environment . You have installed the Java Runtime Environment 8. You have installed Jenkins 2.60.3 or higher. You have set up Project \u201cPiper\u201d. See README . You have installed the multitarget application archive builder 1.0.6 or newer. See SAP Development Tools . You have installed Node.js including node and npm. See Node.js . Context \u00b6 The Application Programming Model for SAP Business Technology Platform is an end-to-end best practice guide for developing applications on SAP BTP and provides a supportive set of APIs, languages, and libraries. For more information about the SAP Cloud Application Programming Model, see Working with the SAP Cloud Application Programming Model . In this scenario, we want to show how to implement a basic continuous delivery process for developing applications according to this programming model with the help of project \"Piper\" on Jenkins. This basic scenario can be adapted and enriched according to your specific needs. Example \u00b6 Jenkinsfile \u00b6 @Library ( 'piper-lib-os' ) _ node (){ stage ( 'Prepare' ) { deleteDir () checkout scm setupCommonPipelineEnvironment script: this } stage ( 'Build' ) { mtaBuild script: this } stage ( 'Deploy' ) { cloudFoundryDeploy script: this , deployTool: 'mtaDeployPlugin' } } Configuration ( .pipeline/config.yml ) \u00b6 steps : mtaBuild : buildTarget : 'CF' cloudFoundryDeploy : cloudFoundry : credentialsId : 'CF' apiEndpoint : '<CF Endpoint>' org : '<CF Organization>' space : '<CF Space>' Parameters \u00b6 For the detailed description of the relevant parameters, see: mtaBuild cloudFoundryDeploy","title":"Build and Deploy SAP Cloud Application Programming Model Applications"},{"location":"scenarios/CAP_Scenario/#build-and-deploy-sap-cloud-application-programming-model-applications","text":"In this scenario, we will setup a CI/CD Pipeline for a SAP Cloud Application Programming Model (CAP) project.","title":"Build and Deploy SAP Cloud Application Programming Model Applications"},{"location":"scenarios/CAP_Scenario/#prerequisites","text":"You have the SAP Cloud Application Programming Model command line tool (cds-dk) installed: See Get Started . You have setup a suitable Jenkins instance as described in Guided Tour","title":"Prerequisites"},{"location":"scenarios/CAP_Scenario/#context","text":"The Application Programming Model for SAP Business Technology Platform (SAP BTP) is an end-to-end best practice guide for developing applications on SAP BTP and provides a supportive set of APIs, languages, and libraries. For more information about the SAP Cloud Application Programming Model, visit its documentation .","title":"Context"},{"location":"scenarios/CAP_Scenario/#getting-started","text":"To get started, generate a project using the SAP Cloud Application Programming Model command line tools: cds init bookshop --add java,mta,samples,hana Alternatively you can also reuse an existing project. To include support for continuous delivery, you can execute the command cds add pipeline in the directory in which you have created your project: cd bookshop cds add pipeline This will generate a project which already includes a Jenkinsfile , and a .pipeline/config.yml file. Now, you'll need to push the code to a git repository. This is required because the pipeline gets your code via git. This might be GitHub, or any other cloud or on-premise git solution you have in your company. Afterwards you can connect your Jenkins instance to your git repository and let it build the project.","title":"Getting started"},{"location":"scenarios/CAP_Scenario/#legacy-documentation","text":"If your project is not based on the SAP Business Application Studio WebIDE template, you could either migrate your code to comply with the structure which is described here , or you can use a self built pipeline, as described in this section.","title":"Legacy documentation"},{"location":"scenarios/CAP_Scenario/#prerequisites_1","text":"You have an account on SAP Business Technology Platform in the Cloud Foundry environment. See Accounts . You have downloaded and installed the Cloud Foundry command line interface (CLI). See Download and Install the Cloud Foundry Command Line Interface . You have installed the multitarget application (MTA) plug-in for the Cloud Foundry command line interface. See Install the Multitarget Application Plug-in in the Cloud Foundry Environment . You have installed the Java Runtime Environment 8. You have installed Jenkins 2.60.3 or higher. You have set up Project \u201cPiper\u201d. See README . You have installed the multitarget application archive builder 1.0.6 or newer. See SAP Development Tools . You have installed Node.js including node and npm. See Node.js .","title":"Prerequisites"},{"location":"scenarios/CAP_Scenario/#context_1","text":"The Application Programming Model for SAP Business Technology Platform is an end-to-end best practice guide for developing applications on SAP BTP and provides a supportive set of APIs, languages, and libraries. For more information about the SAP Cloud Application Programming Model, see Working with the SAP Cloud Application Programming Model . In this scenario, we want to show how to implement a basic continuous delivery process for developing applications according to this programming model with the help of project \"Piper\" on Jenkins. This basic scenario can be adapted and enriched according to your specific needs.","title":"Context"},{"location":"scenarios/CAP_Scenario/#example","text":"","title":"Example"},{"location":"scenarios/CAP_Scenario/#jenkinsfile","text":"@Library ( 'piper-lib-os' ) _ node (){ stage ( 'Prepare' ) { deleteDir () checkout scm setupCommonPipelineEnvironment script: this } stage ( 'Build' ) { mtaBuild script: this } stage ( 'Deploy' ) { cloudFoundryDeploy script: this , deployTool: 'mtaDeployPlugin' } }","title":"Jenkinsfile"},{"location":"scenarios/CAP_Scenario/#configuration-pipelineconfigyml","text":"steps : mtaBuild : buildTarget : 'CF' cloudFoundryDeploy : cloudFoundry : credentialsId : 'CF' apiEndpoint : '<CF Endpoint>' org : '<CF Organization>' space : '<CF Space>'","title":"Configuration (.pipeline/config.yml)"},{"location":"scenarios/CAP_Scenario/#parameters","text":"For the detailed description of the relevant parameters, see: mtaBuild cloudFoundryDeploy","title":"Parameters"},{"location":"scenarios/TMS_Extension/","text":"Integrate SAP Cloud Transport Management Into Your CI/CD Pipeline \u00b6 Extend your CI/CD pipeline with SAP Cloud Transport Management service to add an enterprise-ready change and release management process and enable the transport of cloud-based applications on SAP Business Technology Platform (BTP) between several stages. Context \u00b6 This procedure explains how to upload a multitarget application (MTA) from a CI/CD pipeline to Cloud Transport Management and then import it into its target environment. Cloud Transport Management allows you to manage the transport of development artifacts and application-specific content between different SAP BTP accounts. It adds transparency to the audit trail of changes so that you get information about who performed which changes in your production accounts and when they did it. At the same time, Cloud Transport Management enables a separation of concerns: For example, a developer of an application or of SAP Cloud content artifacts can trigger the propagation of changes, while the resulting transport is handled by a central operations team. For more information, see SAP Cloud Transport Management . The following graphic provides an overview about the interplay between continuous integration and Cloud Transport Management: Prerequisites \u00b6 You have an existing CI pipeline, which you want to extend with Cloud Transport Management. You have an multitarget application (MTA) project, and the folder structure of its sources corresponds to the standard MTA structure. For more information about MTAs, see: Multitarget Applications in the Cloud Foundry Environment Multitarget Applications for the Neo Environment You have access to Cloud Transport Management. See Provide Access to SAP Cloud Transport Management . You have set up Cloud Transport Management and created a service key. See Set Up the Environment to Transport Content Archives directly in an Application . You have configured your transport landscape. See Configuring the Landscape . Procedure \u00b6 You can use this scenario to extend any CI process that meets the prerequisites, for example, the one described in Build and Deploy SAPUI5 or SAP Fiori Applications on SAP BTP with Jenkins . The following graphic shows an example of the detailed procedure when combining continuous integration and Cloud Transport Management: The process flow contains the following steps: The CI server builds a MTA archive. The MTA is uploaded into the import queue of the target node, which is specified in the CI pipeline (in this example, PRE-PROD). Optionally, for transports in Cloud Foundry environment, MTA extension descriptors can be uploaded to the nodes in the transport landscape to provide node-specific import configurations. The MTA extension descriptor file must either be part of the repository, or be the result of the build process. The release manager manually triggers the import, or schedules it, which results in the physical deployment of the MTA archive into the corresponding subaccount (in this example, PRE-PROD). If an MTA extension descriptor was uploaded for this node, it will be used for the import. As soon as the import is executed, a transport is triggered along the defined transport route so that the MTA archive reaches the import queue of the next node (in this example, PROD). There, the physical import into the corresponding subaccount can be either triggered manually by the release manager or automatically by using the scheduling mechanisms of Cloud Transport Management. Example \u00b6 Jenkinsfile \u00b6 If you use the pipeline of the following code snippet, you only have to configure it in the .pipeline/config.yml. Following the convention for pipeline definitions, use a Jenkinsfile, which resides in the root directory of your development sources. @Library ( 'piper-lib-os' ) _ piperPipeline script: this Configuration ( .pipeline/config.yml ) \u00b6 This is a basic configuration example, which is also located in the sources of the project. steps : tmsUpload : credentialsId : tms-secret-key nodeName : PRE-PROD mtaPath : com.piper.example.tms.mtar customDescription : Custom-Transport-Description # uploading MTA extension descriptors, optional step mtaVersion : 1.0.0 nodeExtDescriptorMapping : PRE-PROD : 'scv_x_preprod.mtaext' PROD : 'scv_x_prod.mtaext' stages : Release : tmsUpload : true Configuration for the Upload to Cloud Transport Management \u00b6 Parameter Description credentialsId Credentials that are used for the file and node uploads to Cloud Transport Management. nodeName Defines the name of the node to which the *.mtar file is uploaded. mtaPath Defines the path to the *.mtar file for the upload to Cloud Transport Management. customDescription Optional: Description of a transport request. Overwrites the default (Default: Corresponding Git Commit-ID). nodeExtDescriptorMapping Optional: Defines the mapping between a transport node and the MTA extension descriptor file that is used for the transport node. You specify the node name and the relative path to the MTA extension descriptor file using the syntax which is shown in the configuration example. mtaVersion Optional: Defines the version of the MTA for which the MTA extension descriptor is used. You can use an asterisk (*) to accept any MTA version, or use a specific version compliant with SemVer 2.0, e.g. 1.0.0 (see semver.org). If the parameter is not configured, an asterisk is used. Parameters \u00b6 For a detailed description of the relevant parameters, see tmsUpload .","title":"Integrate SAP Cloud Transport Management Into Your CI/CD Pipeline"},{"location":"scenarios/TMS_Extension/#integrate-sap-cloud-transport-management-into-your-cicd-pipeline","text":"Extend your CI/CD pipeline with SAP Cloud Transport Management service to add an enterprise-ready change and release management process and enable the transport of cloud-based applications on SAP Business Technology Platform (BTP) between several stages.","title":"Integrate SAP Cloud Transport Management Into Your CI/CD Pipeline"},{"location":"scenarios/TMS_Extension/#context","text":"This procedure explains how to upload a multitarget application (MTA) from a CI/CD pipeline to Cloud Transport Management and then import it into its target environment. Cloud Transport Management allows you to manage the transport of development artifacts and application-specific content between different SAP BTP accounts. It adds transparency to the audit trail of changes so that you get information about who performed which changes in your production accounts and when they did it. At the same time, Cloud Transport Management enables a separation of concerns: For example, a developer of an application or of SAP Cloud content artifacts can trigger the propagation of changes, while the resulting transport is handled by a central operations team. For more information, see SAP Cloud Transport Management . The following graphic provides an overview about the interplay between continuous integration and Cloud Transport Management:","title":"Context"},{"location":"scenarios/TMS_Extension/#prerequisites","text":"You have an existing CI pipeline, which you want to extend with Cloud Transport Management. You have an multitarget application (MTA) project, and the folder structure of its sources corresponds to the standard MTA structure. For more information about MTAs, see: Multitarget Applications in the Cloud Foundry Environment Multitarget Applications for the Neo Environment You have access to Cloud Transport Management. See Provide Access to SAP Cloud Transport Management . You have set up Cloud Transport Management and created a service key. See Set Up the Environment to Transport Content Archives directly in an Application . You have configured your transport landscape. See Configuring the Landscape .","title":"Prerequisites"},{"location":"scenarios/TMS_Extension/#procedure","text":"You can use this scenario to extend any CI process that meets the prerequisites, for example, the one described in Build and Deploy SAPUI5 or SAP Fiori Applications on SAP BTP with Jenkins . The following graphic shows an example of the detailed procedure when combining continuous integration and Cloud Transport Management: The process flow contains the following steps: The CI server builds a MTA archive. The MTA is uploaded into the import queue of the target node, which is specified in the CI pipeline (in this example, PRE-PROD). Optionally, for transports in Cloud Foundry environment, MTA extension descriptors can be uploaded to the nodes in the transport landscape to provide node-specific import configurations. The MTA extension descriptor file must either be part of the repository, or be the result of the build process. The release manager manually triggers the import, or schedules it, which results in the physical deployment of the MTA archive into the corresponding subaccount (in this example, PRE-PROD). If an MTA extension descriptor was uploaded for this node, it will be used for the import. As soon as the import is executed, a transport is triggered along the defined transport route so that the MTA archive reaches the import queue of the next node (in this example, PROD). There, the physical import into the corresponding subaccount can be either triggered manually by the release manager or automatically by using the scheduling mechanisms of Cloud Transport Management.","title":"Procedure"},{"location":"scenarios/TMS_Extension/#example","text":"","title":"Example"},{"location":"scenarios/TMS_Extension/#jenkinsfile","text":"If you use the pipeline of the following code snippet, you only have to configure it in the .pipeline/config.yml. Following the convention for pipeline definitions, use a Jenkinsfile, which resides in the root directory of your development sources. @Library ( 'piper-lib-os' ) _ piperPipeline script: this","title":"Jenkinsfile"},{"location":"scenarios/TMS_Extension/#configuration-pipelineconfigyml","text":"This is a basic configuration example, which is also located in the sources of the project. steps : tmsUpload : credentialsId : tms-secret-key nodeName : PRE-PROD mtaPath : com.piper.example.tms.mtar customDescription : Custom-Transport-Description # uploading MTA extension descriptors, optional step mtaVersion : 1.0.0 nodeExtDescriptorMapping : PRE-PROD : 'scv_x_preprod.mtaext' PROD : 'scv_x_prod.mtaext' stages : Release : tmsUpload : true","title":"Configuration (.pipeline/config.yml)"},{"location":"scenarios/TMS_Extension/#configuration-for-the-upload-to-cloud-transport-management","text":"Parameter Description credentialsId Credentials that are used for the file and node uploads to Cloud Transport Management. nodeName Defines the name of the node to which the *.mtar file is uploaded. mtaPath Defines the path to the *.mtar file for the upload to Cloud Transport Management. customDescription Optional: Description of a transport request. Overwrites the default (Default: Corresponding Git Commit-ID). nodeExtDescriptorMapping Optional: Defines the mapping between a transport node and the MTA extension descriptor file that is used for the transport node. You specify the node name and the relative path to the MTA extension descriptor file using the syntax which is shown in the configuration example. mtaVersion Optional: Defines the version of the MTA for which the MTA extension descriptor is used. You can use an asterisk (*) to accept any MTA version, or use a specific version compliant with SemVer 2.0, e.g. 1.0.0 (see semver.org). If the parameter is not configured, an asterisk is used.","title":"Configuration for the Upload to Cloud Transport Management"},{"location":"scenarios/TMS_Extension/#parameters","text":"For a detailed description of the relevant parameters, see tmsUpload .","title":"Parameters"},{"location":"scenarios/abapEnvironmentAddons/","text":"Build and Publish Add-on Products on SAP BTP, ABAP Environment \u00b6 Current limitations gCTS-related restrictions apply, please refer to gCTS: restrictions in supported object types Table entries are currently delivered during add-on build with generic keys \u2013 thus it is strongly recommended to transport TABUs only with the software component the table definition belongs to and not in foreign software components to prevent loss of data. The possibility to deliver individual table keys as part of add-on build might be supported at a later point in time. Required project \"Piper\" library version The recommended project \"Piper\" library version can be found in SAP Note 3032800 . A specific version can be used by referencing the version number in the Jenkinsfile . Introduction \u00b6 This scenario describes how an add-on for the SAP BTP, ABAP environment is built. It is intended for SAP partners who want to provide a Software as a Service (SaaS) solution on the SAP BTP using the ABAP Environment. Therefore, a partner development contract (see SAP PartnerEdge Test, Demo & Development Price List ) is required. This page aims to provide an overview of the build process of the add-on. The development on SAP BTP, ABAP environment systems is done within \u201csoftware components\u201d (also called: \u201crepositories\u201d). The add-ons being built in this scenario are made up by one or multiple software components combined to an add-on product. The \u201cABAP environment pipeline\u201d can be used to build and publish the add-on product. Please read on for more details about the Add-on Product and the build process. Of course, this tackles only the upstream part of the SaaS solution lifecycle. Once the add-on is published, it can be consumed as a multitenant application in ABAP environment . A comprehensive guidance on how to develop and operate SaaS applications using add-ons, can be found here . The Add-on Product \u00b6 The installation and maintenance of ABAP software is controlled via add-on product versions. An add-on product version is a \u201ebundle\" of software component versions made available at the same time for implementing a well-defined scope of functionality. It is the delivery view on a software portfolio. Add-on Product Version \u00b6 An add-on product version is defined by a name and a version string. The name of an add-on product is a string with a maximum of 30 characters and consists of the namespace and a freely chooseble part - /NAMESPC/PRODUCTX . The add-on product name should only include uppercase characters. The version string consists of three numbers separated by a dot - 1.2.0 . The numbers in the version string have a hierarchic relationship: The first number denotes the release . Release deliveries contain the complete scope of functionality. It is possible to change the software component version bundle in a new release. The second number denotes the support package stack level . A support package stack consists of support package deliveries of the contained software component versions. The third number denotes the patch level . A Patch delivery contains patch deliveries of the contained software component versions. Software Component Version \u00b6 Development on SAP BTP, ABAP environment As you may know, the development in the SAP BTP, ABAP environment is done within software components . A software component is self-contained, and a reduced set of objects and features of the ABAP programming language can be used. The software component and development objects must be created in a namespace, so that clashes between software of different vendors and SAP are avoided. Therefore, a namespace must be reserved before the development can start. SAP Note 105132 describes the namespace reservation process. The namespace must be reserved for the same customer number under which the \u201cSAP BTP, ABAP ENVIRONMENT\u201d tenants are licensed. A software component version is a technically distinguishable unit of software and is installed and patched as a whole. It consists of ABAP development packages and contained objects. Software component versions are delivered via delivery packages. But software component versions are not individual shipment entities. They can only be delivered to customers as part of an add-on product version . A software component version is defined by a name and a version string. The name of a software component is a string with a maximum of 30 characters and consists of the namespace and a freely chooseble part - /NAMESPC/COMPONENTA . The version consists of three numbers separated by a dot - 1.2.0 . The numbers in the version string have a hierarchic relationship: The first number denotes the release . Release deliveries contain the whole software component and should be used to deliver new functionalities or feature enhancements. They are provided with delivery packages of type Add-on Installation (AOI) and are usually created on a regular basis (e.g. quarterly). The second number denotes the support package level . Support package deliveries contain either the objects that were changed since the previous release delivery or since the previous support package delivery. They should be used to deliver a collection of patch deliveries or to deliver smaller functional enhancements. They are provided with delivery packages of type Component Support Package (CSP) and are usually created on a regular basis (e.g. bi-weekly). The third number denotes the patch level . Patch deliveries contain only those objects that were changed since the previous patch delivery. They should be used to deliver bugfixes and are only created when necessary (e.g. emergency patch). The type of delivery does not need to be chosen manually; it is automatically determined by the delivery tools. Software Component Versions are uniquely created and independent from the add-on product versions where they are included. This means that once a software component version was built, it will be reused in any following add-on product versions. Target Vector \u00b6 As explained above, the shipment of a software takes place via add-on product versions. The delivered content of an add-on product version is defined in a target vector, which is used by the deployment tools. The target vector is derived from the addon.yml (more on that below) and contains the following information: Product name Product release Product Support Package stack and Patch level A list of contained software component versions with Software component name Software component release Delivery Package, which delivers the software component version In ABAP Environment Pipeline stage Build a target vector for the particular add-on product version is published in test scope. This makes it possible to perform an add-on test installation in stage Integration Tests . At this point the new add-on product version is not available for add-on updates and can only be installed during system provisioning in the Integration Tests stage. In stage Publish the target vector is then published in production scope, so that the new version will become available for add-on update and installation during system provisioning. Building the Add-on Product \u00b6 The build process of an add-on product is orchestrated by a Jenkins Pipeline, the ABAP Environment Pipeline provided in this project. To run this pipeline, it only needs to be configured \u2013 which will be explained in the sections \u201cPrerequisites\u201d and \u201cConfiguration\u201d. The pipeline consists of different steps responsible for a single task. The steps themselves are grouped thematically into different stages. For example, early in the pipeline, an ABAP environment system needs to be created and the communication needs to be set up. This is done in the \u201cPrepare System\u201d stage. You can read more about the different stages in the ABAP environment pipeline documentation . Different services and systems are required for the add-on build process. Delivery Tools \u00b6 With the following tools the add-on deliveries are created. Assembly System \u00b6 Minimum Platform Version The ABAP Environment platform version of the assembly system is used to determine the minimum platform version for the add-on product version that is created. Such a system should not be nominated for the pre-upgrade option of ABAP Environment since then the add-on production could only be installed in systems with the pre-upgrade release. API Snapshots During the add-on build any changes to released APIs will be checked for compatibility. The corresponding ATC check can only function properly if there is an API snapshot available in the assembly system. Therefore, make sure to use a permanent system for the assembly if you need to fulfill consistency and stability criteria for your released APIs. Refer to Checking the Compatibility of Released APIs . The ABAP system responsible for building packages based on software components in the systems. All actions related to the ABAP source code are executed on this system, e.g. running checks with the ABAP test cockpit (ATC) or the physical build of the software components. There are two communication scenarios containing the different APIs of the ABAP environment system: Test Integration and Software Assembly Integration . The assembly system should be of service abap/standard and be provisioned with parameter is_development_allowed = false to prevent local changes. Add-on Assembly Kit as a Service (=AAKaaS) \u00b6 The Add-on Assembly Kit as a Service is responsible for registering and publishing the add-on product. On a high level it is a service offered in the SAP Service & Support systems (thus access is granted via Technical Communication User) that, similar to the Software Delivery Assembler (SDA, transaction SSDA) as part of the SAP Add-On Assembly Kit , packs the deliveries into an importable package format. Deployment Tools \u00b6 With these SAP tools the assembled add-on deliveries are deployed to ABAP systems, for example into the installation test system . Installation Test System \u00b6 In order to verify that the delivery packages included in the add-on product version are installable, a target vector is published in \"test\" scope. In the Integration Tests stage an ABAP system of service abap/saas_oem is created. This makes it possible to install a specific add-on product version into an ABAP system that is provisioned. The installation test system should be be provisioned with the parameter is_development_allowed = false to prevent local changes. Prerequisites \u00b6 There are several prerequisites to run the pipeline for building an ABAP Environment add-on: Jenkins Server \u00b6 The pipeline responsible for building ABAP add-ons has been created specifically for Jenkins . Therefore, a Jenkins Server is required. Please follow these instructions to configure an existing server . Git Repository \u00b6 The pipeline configuration is done in a git repository (for example on GitHub). This repository needs to be accessed by the Jenkins Server. If the repository is password protected, the user and password (or access token) should be stored in the Jenkins Credentials Store (Manage Jenkins \u2192 Manage Credentials). Add-on Assembly Kit as a Service (=AAKaaS) \u00b6 The communication with the AAKaaS needs a technical communication user. The creation and activation of such a user is described in SAP note 2174416 . Make sure that this technical communication user is assigned to the customer number under which the SAP BTP, ABAP Environment instances are licensed and for which the development namespace was reserved. The user and password need to be stored in the Jenkins Credentials Store. Cloud Foundry Access \u00b6 ABAP environment systems are created in the SAP BTP cockpit. For this pipeline, the creation and deletion of the systems are automated via the Cloud Foundry command line interface: cf CLI . For this to work, two things need to be configured: Cloud Foundry needs to be enabled on subaccount level. This can be done on the Subaccount Overview page. The subaccount is then mapped to a \u201cCloud Foundry Organization\u201d, for which you must provide a suitable name during the creation. Have a look at the documentation for more details. A (technical) platform user is required to access the Cloud Foundry Org and Space via the cf CLI. The user needs to be assigned as space member including Space Developer role in order to create/read service instances and service keys. The user and password need to be stored in the Jenkins Credentials Store. Later, during the pipeline configuration, you will specify the service plan, which will be used for the creation of an ABAP environment system. Please make sure that there are enough entitlements for this assigned to the subaccount . Register Add-on Product for a Global Account \u00b6 The registration of a new add-on product is a manual step. Your add-on product should only be installed in ABAP systems in your global accounts for development and production. Therefore, the product needs to be created and global accounts need to be registered with SAP using Landscape Portal. See Register Product . Configuration \u00b6 In the following subsections, the pipeline configuration for this scenario is explained. Please refer to the configuration page for general configuration. ATC \u00b6 We recommend to configure the add-on build pipeline with a quality gate to block any error and warning ATC findings . This can be configured with a quality gate configuration [threshold: 1, type: 'TOTAL_ERROR', unstable: false] and [threshold: 1, type: 'TOTAL_NORMAL', unstable: false] in the recordIssues pipeline step shown in Extend the ATC stage via the Checkstyle/Warnings Next Generation Plugin . Created delivery packages for an add-on product version are final, so to fix any errors in these packages, another add-on product version would have to be built. ATC findings should be resolved during development as early as possible, e.g. during transport release and by using an additional pipeline configured for the Continuous Testing on SAP BTP, ABAP Environment scenario . Please include all software components configured in addon.yml file also in the atcConfig.yml file. In case not all software components are included, some errors might not be found. Add-on descriptor file \u00b6 The build process is controlled by an add-on descriptor file called addon.yml . This file must be created manually and must be stored in the GIT repository of the pipeline. It must contain information about the to-be-delivered add-on product version and the contained software component versions . Below, you see an example: --- addonProduct : \"/NAMESPC/PRODUCTX\" addonVersion : \"1.2.0\" repositories : - name : \"/NAMESPC/COMPONENTA\" branch : \"v1.2.0\" version : \"1.2.0\" commitID : \"7d4516e9\" languages : - DE - EN - name : \"/NAMESPC/COMPONENTB\" branch : \"v2.0.0\" version : \"2.0.0\" commitID : \"9f102ffb\" languages : - DE - EN - FR Explanation of the keys: addonProduct : this is the technical name of the add-on product addonVersion : This is the technical version of the add-on product <product version>.<support package stack level>.<patch level> The section repositories contains one or multiple software component versions: name : the technical name of the software component branch : this is the branch from the git repository version : this is the technical software component version <software component version>.<support package level>.<patch level> commitID : this is the commitID from the git repository languages : specify the languages to be delivered according to ISO-639. For all deliveries of an Add-on Product Version, the languages should not change. If languages should be added, a new Add-on Product Version must be created. addonVersion influences solely the creation of the target vector . Without target vector nothing can be deployed. But it is possible to deploy combinations which have been build in the past (especially if the same software component version is part of multiple add-on products). As a rule of thumb, the addonVersion should be increased analogous to the version of the leading software component. An exception can be the patch level in the addonVersion string: In case of an add-on product with a reuse software component, the patch level of the addonVersion might be higher than the patch level of the leading software component version . The leading software component is the software component that is, as opposed to a reuse software component, exclusively used as part of one add-on product. In the repositories section of the add-on descriptor file the reuse software component should be the first, whereas a leading software component would be the last in order. This is to make sure that that the software components are imported in the correct order, making sure to adhere to dependencies. Software Component Dependencies In case the involved software components have dependencies between them, define them in software component relations . The version of a software component influcences two aspects: The given version will be used as part of the target vector If there exists no delivery package with the given version in AAKaaS the build of this package is performed As a result, if the addonVersion is increased but references a software component version for which a delivery package has already been created, no new delivery package is built but only a new target vector is created. During add-on update such a target vector does not reference any new software component versions and the update of software components is skipped. If the version of a software component is increased but not the addonVersion , a package is built but no new target vector is created, meaning the new package cannot be deployed. If the add-on product consists of multiple software component versions, but only for one of them the version is increased (together with a new commitID ), only for this software component version a new package will be created. If, at the same time, the addonVersion is increased a new target vector will be created. The commitID identifies a specific state of a software component and should only be changed while also adjusting the version number of a software component. Versioning Rules \u00b6 For the development and the provisioning of product-/software component versions, it is necessary to ensure, that there are no gaps within the version and level counters. Therefore, only a continuous increase in version numbers is allowed. The following examples show valid and invalid cases, respectively: Valid increase: 1.0.0 to 2.0.0 1.1.2 to 2.0.0 2.0.0 to 2.0.1 2.1.0 to 2.2.0 2.1.1 to 2.1.2 Invalid increase: 1.0.0 to 3.0.0 (version 2.0.0 is missing; therefore, a product/component version is missing) 1.1.2 to 2.1.0 (version 2.0.0 is missing; therefore, a product/component version is missing) 2.0.0 to 2.0.2 (version 2.0.1 is missing; therefore, a patch level is missing) 2.1.0 to 2.3.0 (version 2.2.0 is missing; therefore, a support package level is missing) 2.1.1 to 2.1.3 (version 2.1.2 is missing; therefore, a patch level is missing) Technically, the allowed number range for add-on product version and software component version is 1.0.0 to 9999.9999.9999. The support package level of software component version can only go up until 369 because of technical limitations. For the patch level, there is a technical limit of 36\u00b3, limited to 9999. Example \u00b6 Please have a look at the configuration example to build and publish add-on products using a transient assembly system . As an alternative you can refer to the example using a permanent assembly system . Troubleshooting \u00b6 If you encounter an issue with the pipeline itself, please open an issue in GitHub . Once execution of the Build stage, in particular the abapAddonAssemblyKitRegisterPackages step, has been completed, errors must be resolved by creating new software component versions with the correct configuration. Pipeline steps can be restarted without causing double execution of already perfomed steps (intermediate results are stored). Common Issues \u00b6 In case of an error during execution of the pipeline steps: Stage: Prepare System Step: abapEnvironmentCreateSystem A service instance for the selected plan cannot be created in this organization or Quota is not sufficient for this request. ABAP System provisioning requires sufficient entitlements for abap/standard as well as abap/hana_compute_unit and abap/abap_compute_unit to be assigned to the subaccount. Stage: Clone Repositories Step: abapEnvironmentPullGitRepo e.g. A4C_A2G/000 - Branch checkout for /NAMESPC/COMPONENTA is currently performed; Try again later... Parallel execution of multiple actions on the same software component (like checkout, pull etc.) is not supported. Stage: ATC Step: abapEnvironmentRunATCCheck Long-running step execution Create a custom check variant and utilize ATC Exemptions to reduce the test scope and irrelevant findings. Resolve ATC findings early on during development, e.g. by working with ATC during transport release . Stage: Build Step: abapAddonAssemblyKitReserveNextPackages e.g. Package SAPK00C001CPITAPC1 was already build but with commit d5ffb9717a57c9e65d9e4c8366ea45be958b56cc, not with 86d70dc3 New commitID , but no new software component version in add-on descriptor: Only by changing the version a new delivery package is created. e.g. CommitID of package SAPK00C002CPITAPC1 is the same as the one of the predecessor package. New Patch Level of software component, but same commitID in add-on descriptor: The same commitID cannot be used as previous/current commit id for a correction package. Stage: Integration Tests Step: abapEnvironmentCreateSystem A service instance for the selected plan cannot be created in this organization or Quota is not sufficient for this request. ABAP System provisioning requires sufficient entitlements for abap/saas_oem as well as abap/hana_compute_unit and abap/abap_compute_unit to be assigned to the subaccount. Product installation failed because AddOn XYZ has not been registered in PPMS for productive development The add-on product is not yet registered for add-on installation, please follow steps in Register Add-on Product for a Global Account #register-add-on-product-for-a-global-account Stage: Post Step: cloudFoundryDeleteService Add-on assembly system is deleted unexpectedly Create a Piper extension of the Post stage, similar to Post.groovy Support Components \u00b6 If issues cannot be resolved, please open a support incident on the respective support component: Stage Steps Support Component Initial Checks abapAddonAssemblyKitCheckPV , abapAddonAssemblyKitCheckCVs BC-UPG-OCS Prepare System abapEnvironmentCreateSystem , cloudFoundryCreateServiceKey BC-CP-ABA Clone Repositories abapEnvironmentPullGitRepo BC-CP-ABA-SC ATC abapEnvironmentRunATCCheck BC-DWB-TOO-ATF AUnit abapEnvironmentRunAUnitTest BC-DWB-TOO-ATF Build cloudFoundryCreateServiceKey BC-CP-ABA abapAddonAssemblyKitReserveNextPackages BC-UPG-OCS abapEnvironmentAssemblePackages , abapEnvironmentBuild BC-UPG-ADDON abapAddonAssemblyKitRegisterPackages BC-UPG-OCS abapEnvironmentAssembleConfirm BC-UPG-ADDON abapAddonAssemblyKitReleasePackages , abapAddonAssemblyKitCreateTargetVector , abapAddonAssemblyKitPublishTargetVector BC-UPG-OCS Integration Tests abapEnvironmentCreateSystem , cloudFoundryDeleteService BC-CP-ABA Publish abapAddonAssemblyKitPublishTargetVector BC-UPG-OCS Post cloudFoundryDeleteService BC-CP-ABA Note: Always attach the pipeline execution log ouput to the support incident, if possible including timestamps by using the Timestamper Jenkins plugin . For troubleshooting purposes, the add-on descriptor file as well as build logs are archived as pipeline artifacts in the abapEnvironmentAssemblePackages step.","title":"Build and Publish Add-on Products on SAP BTP, ABAP Environment"},{"location":"scenarios/abapEnvironmentAddons/#build-and-publish-add-on-products-on-sap-btp-abap-environment","text":"Current limitations gCTS-related restrictions apply, please refer to gCTS: restrictions in supported object types Table entries are currently delivered during add-on build with generic keys \u2013 thus it is strongly recommended to transport TABUs only with the software component the table definition belongs to and not in foreign software components to prevent loss of data. The possibility to deliver individual table keys as part of add-on build might be supported at a later point in time. Required project \"Piper\" library version The recommended project \"Piper\" library version can be found in SAP Note 3032800 . A specific version can be used by referencing the version number in the Jenkinsfile .","title":"Build and Publish Add-on Products on SAP BTP, ABAP Environment"},{"location":"scenarios/abapEnvironmentAddons/#introduction","text":"This scenario describes how an add-on for the SAP BTP, ABAP environment is built. It is intended for SAP partners who want to provide a Software as a Service (SaaS) solution on the SAP BTP using the ABAP Environment. Therefore, a partner development contract (see SAP PartnerEdge Test, Demo & Development Price List ) is required. This page aims to provide an overview of the build process of the add-on. The development on SAP BTP, ABAP environment systems is done within \u201csoftware components\u201d (also called: \u201crepositories\u201d). The add-ons being built in this scenario are made up by one or multiple software components combined to an add-on product. The \u201cABAP environment pipeline\u201d can be used to build and publish the add-on product. Please read on for more details about the Add-on Product and the build process. Of course, this tackles only the upstream part of the SaaS solution lifecycle. Once the add-on is published, it can be consumed as a multitenant application in ABAP environment . A comprehensive guidance on how to develop and operate SaaS applications using add-ons, can be found here .","title":"Introduction"},{"location":"scenarios/abapEnvironmentAddons/#the-add-on-product","text":"The installation and maintenance of ABAP software is controlled via add-on product versions. An add-on product version is a \u201ebundle\" of software component versions made available at the same time for implementing a well-defined scope of functionality. It is the delivery view on a software portfolio.","title":"The Add-on Product"},{"location":"scenarios/abapEnvironmentAddons/#add-on-product-version","text":"An add-on product version is defined by a name and a version string. The name of an add-on product is a string with a maximum of 30 characters and consists of the namespace and a freely chooseble part - /NAMESPC/PRODUCTX . The add-on product name should only include uppercase characters. The version string consists of three numbers separated by a dot - 1.2.0 . The numbers in the version string have a hierarchic relationship: The first number denotes the release . Release deliveries contain the complete scope of functionality. It is possible to change the software component version bundle in a new release. The second number denotes the support package stack level . A support package stack consists of support package deliveries of the contained software component versions. The third number denotes the patch level . A Patch delivery contains patch deliveries of the contained software component versions.","title":"Add-on Product Version"},{"location":"scenarios/abapEnvironmentAddons/#software-component-version","text":"Development on SAP BTP, ABAP environment As you may know, the development in the SAP BTP, ABAP environment is done within software components . A software component is self-contained, and a reduced set of objects and features of the ABAP programming language can be used. The software component and development objects must be created in a namespace, so that clashes between software of different vendors and SAP are avoided. Therefore, a namespace must be reserved before the development can start. SAP Note 105132 describes the namespace reservation process. The namespace must be reserved for the same customer number under which the \u201cSAP BTP, ABAP ENVIRONMENT\u201d tenants are licensed. A software component version is a technically distinguishable unit of software and is installed and patched as a whole. It consists of ABAP development packages and contained objects. Software component versions are delivered via delivery packages. But software component versions are not individual shipment entities. They can only be delivered to customers as part of an add-on product version . A software component version is defined by a name and a version string. The name of a software component is a string with a maximum of 30 characters and consists of the namespace and a freely chooseble part - /NAMESPC/COMPONENTA . The version consists of three numbers separated by a dot - 1.2.0 . The numbers in the version string have a hierarchic relationship: The first number denotes the release . Release deliveries contain the whole software component and should be used to deliver new functionalities or feature enhancements. They are provided with delivery packages of type Add-on Installation (AOI) and are usually created on a regular basis (e.g. quarterly). The second number denotes the support package level . Support package deliveries contain either the objects that were changed since the previous release delivery or since the previous support package delivery. They should be used to deliver a collection of patch deliveries or to deliver smaller functional enhancements. They are provided with delivery packages of type Component Support Package (CSP) and are usually created on a regular basis (e.g. bi-weekly). The third number denotes the patch level . Patch deliveries contain only those objects that were changed since the previous patch delivery. They should be used to deliver bugfixes and are only created when necessary (e.g. emergency patch). The type of delivery does not need to be chosen manually; it is automatically determined by the delivery tools. Software Component Versions are uniquely created and independent from the add-on product versions where they are included. This means that once a software component version was built, it will be reused in any following add-on product versions.","title":"Software Component Version"},{"location":"scenarios/abapEnvironmentAddons/#target-vector","text":"As explained above, the shipment of a software takes place via add-on product versions. The delivered content of an add-on product version is defined in a target vector, which is used by the deployment tools. The target vector is derived from the addon.yml (more on that below) and contains the following information: Product name Product release Product Support Package stack and Patch level A list of contained software component versions with Software component name Software component release Delivery Package, which delivers the software component version In ABAP Environment Pipeline stage Build a target vector for the particular add-on product version is published in test scope. This makes it possible to perform an add-on test installation in stage Integration Tests . At this point the new add-on product version is not available for add-on updates and can only be installed during system provisioning in the Integration Tests stage. In stage Publish the target vector is then published in production scope, so that the new version will become available for add-on update and installation during system provisioning.","title":"Target Vector"},{"location":"scenarios/abapEnvironmentAddons/#building-the-add-on-product","text":"The build process of an add-on product is orchestrated by a Jenkins Pipeline, the ABAP Environment Pipeline provided in this project. To run this pipeline, it only needs to be configured \u2013 which will be explained in the sections \u201cPrerequisites\u201d and \u201cConfiguration\u201d. The pipeline consists of different steps responsible for a single task. The steps themselves are grouped thematically into different stages. For example, early in the pipeline, an ABAP environment system needs to be created and the communication needs to be set up. This is done in the \u201cPrepare System\u201d stage. You can read more about the different stages in the ABAP environment pipeline documentation . Different services and systems are required for the add-on build process.","title":"Building the Add-on Product"},{"location":"scenarios/abapEnvironmentAddons/#delivery-tools","text":"With the following tools the add-on deliveries are created.","title":"Delivery Tools"},{"location":"scenarios/abapEnvironmentAddons/#assembly-system","text":"Minimum Platform Version The ABAP Environment platform version of the assembly system is used to determine the minimum platform version for the add-on product version that is created. Such a system should not be nominated for the pre-upgrade option of ABAP Environment since then the add-on production could only be installed in systems with the pre-upgrade release. API Snapshots During the add-on build any changes to released APIs will be checked for compatibility. The corresponding ATC check can only function properly if there is an API snapshot available in the assembly system. Therefore, make sure to use a permanent system for the assembly if you need to fulfill consistency and stability criteria for your released APIs. Refer to Checking the Compatibility of Released APIs . The ABAP system responsible for building packages based on software components in the systems. All actions related to the ABAP source code are executed on this system, e.g. running checks with the ABAP test cockpit (ATC) or the physical build of the software components. There are two communication scenarios containing the different APIs of the ABAP environment system: Test Integration and Software Assembly Integration . The assembly system should be of service abap/standard and be provisioned with parameter is_development_allowed = false to prevent local changes.","title":"Assembly System"},{"location":"scenarios/abapEnvironmentAddons/#add-on-assembly-kit-as-a-service-aakaas","text":"The Add-on Assembly Kit as a Service is responsible for registering and publishing the add-on product. On a high level it is a service offered in the SAP Service & Support systems (thus access is granted via Technical Communication User) that, similar to the Software Delivery Assembler (SDA, transaction SSDA) as part of the SAP Add-On Assembly Kit , packs the deliveries into an importable package format.","title":"Add-on Assembly Kit as a Service (=AAKaaS)"},{"location":"scenarios/abapEnvironmentAddons/#deployment-tools","text":"With these SAP tools the assembled add-on deliveries are deployed to ABAP systems, for example into the installation test system .","title":"Deployment Tools"},{"location":"scenarios/abapEnvironmentAddons/#installation-test-system","text":"In order to verify that the delivery packages included in the add-on product version are installable, a target vector is published in \"test\" scope. In the Integration Tests stage an ABAP system of service abap/saas_oem is created. This makes it possible to install a specific add-on product version into an ABAP system that is provisioned. The installation test system should be be provisioned with the parameter is_development_allowed = false to prevent local changes.","title":"Installation Test System"},{"location":"scenarios/abapEnvironmentAddons/#prerequisites","text":"There are several prerequisites to run the pipeline for building an ABAP Environment add-on:","title":"Prerequisites"},{"location":"scenarios/abapEnvironmentAddons/#jenkins-server","text":"The pipeline responsible for building ABAP add-ons has been created specifically for Jenkins . Therefore, a Jenkins Server is required. Please follow these instructions to configure an existing server .","title":"Jenkins Server"},{"location":"scenarios/abapEnvironmentAddons/#git-repository","text":"The pipeline configuration is done in a git repository (for example on GitHub). This repository needs to be accessed by the Jenkins Server. If the repository is password protected, the user and password (or access token) should be stored in the Jenkins Credentials Store (Manage Jenkins \u2192 Manage Credentials).","title":"Git Repository"},{"location":"scenarios/abapEnvironmentAddons/#add-on-assembly-kit-as-a-service-aakaas_1","text":"The communication with the AAKaaS needs a technical communication user. The creation and activation of such a user is described in SAP note 2174416 . Make sure that this technical communication user is assigned to the customer number under which the SAP BTP, ABAP Environment instances are licensed and for which the development namespace was reserved. The user and password need to be stored in the Jenkins Credentials Store.","title":"Add-on Assembly Kit as a Service (=AAKaaS)"},{"location":"scenarios/abapEnvironmentAddons/#cloud-foundry-access","text":"ABAP environment systems are created in the SAP BTP cockpit. For this pipeline, the creation and deletion of the systems are automated via the Cloud Foundry command line interface: cf CLI . For this to work, two things need to be configured: Cloud Foundry needs to be enabled on subaccount level. This can be done on the Subaccount Overview page. The subaccount is then mapped to a \u201cCloud Foundry Organization\u201d, for which you must provide a suitable name during the creation. Have a look at the documentation for more details. A (technical) platform user is required to access the Cloud Foundry Org and Space via the cf CLI. The user needs to be assigned as space member including Space Developer role in order to create/read service instances and service keys. The user and password need to be stored in the Jenkins Credentials Store. Later, during the pipeline configuration, you will specify the service plan, which will be used for the creation of an ABAP environment system. Please make sure that there are enough entitlements for this assigned to the subaccount .","title":"Cloud Foundry Access"},{"location":"scenarios/abapEnvironmentAddons/#register-add-on-product-for-a-global-account","text":"The registration of a new add-on product is a manual step. Your add-on product should only be installed in ABAP systems in your global accounts for development and production. Therefore, the product needs to be created and global accounts need to be registered with SAP using Landscape Portal. See Register Product .","title":"Register Add-on Product for a Global Account"},{"location":"scenarios/abapEnvironmentAddons/#configuration","text":"In the following subsections, the pipeline configuration for this scenario is explained. Please refer to the configuration page for general configuration.","title":"Configuration"},{"location":"scenarios/abapEnvironmentAddons/#atc","text":"We recommend to configure the add-on build pipeline with a quality gate to block any error and warning ATC findings . This can be configured with a quality gate configuration [threshold: 1, type: 'TOTAL_ERROR', unstable: false] and [threshold: 1, type: 'TOTAL_NORMAL', unstable: false] in the recordIssues pipeline step shown in Extend the ATC stage via the Checkstyle/Warnings Next Generation Plugin . Created delivery packages for an add-on product version are final, so to fix any errors in these packages, another add-on product version would have to be built. ATC findings should be resolved during development as early as possible, e.g. during transport release and by using an additional pipeline configured for the Continuous Testing on SAP BTP, ABAP Environment scenario . Please include all software components configured in addon.yml file also in the atcConfig.yml file. In case not all software components are included, some errors might not be found.","title":"ATC"},{"location":"scenarios/abapEnvironmentAddons/#add-on-descriptor-file","text":"The build process is controlled by an add-on descriptor file called addon.yml . This file must be created manually and must be stored in the GIT repository of the pipeline. It must contain information about the to-be-delivered add-on product version and the contained software component versions . Below, you see an example: --- addonProduct : \"/NAMESPC/PRODUCTX\" addonVersion : \"1.2.0\" repositories : - name : \"/NAMESPC/COMPONENTA\" branch : \"v1.2.0\" version : \"1.2.0\" commitID : \"7d4516e9\" languages : - DE - EN - name : \"/NAMESPC/COMPONENTB\" branch : \"v2.0.0\" version : \"2.0.0\" commitID : \"9f102ffb\" languages : - DE - EN - FR Explanation of the keys: addonProduct : this is the technical name of the add-on product addonVersion : This is the technical version of the add-on product <product version>.<support package stack level>.<patch level> The section repositories contains one or multiple software component versions: name : the technical name of the software component branch : this is the branch from the git repository version : this is the technical software component version <software component version>.<support package level>.<patch level> commitID : this is the commitID from the git repository languages : specify the languages to be delivered according to ISO-639. For all deliveries of an Add-on Product Version, the languages should not change. If languages should be added, a new Add-on Product Version must be created. addonVersion influences solely the creation of the target vector . Without target vector nothing can be deployed. But it is possible to deploy combinations which have been build in the past (especially if the same software component version is part of multiple add-on products). As a rule of thumb, the addonVersion should be increased analogous to the version of the leading software component. An exception can be the patch level in the addonVersion string: In case of an add-on product with a reuse software component, the patch level of the addonVersion might be higher than the patch level of the leading software component version . The leading software component is the software component that is, as opposed to a reuse software component, exclusively used as part of one add-on product. In the repositories section of the add-on descriptor file the reuse software component should be the first, whereas a leading software component would be the last in order. This is to make sure that that the software components are imported in the correct order, making sure to adhere to dependencies. Software Component Dependencies In case the involved software components have dependencies between them, define them in software component relations . The version of a software component influcences two aspects: The given version will be used as part of the target vector If there exists no delivery package with the given version in AAKaaS the build of this package is performed As a result, if the addonVersion is increased but references a software component version for which a delivery package has already been created, no new delivery package is built but only a new target vector is created. During add-on update such a target vector does not reference any new software component versions and the update of software components is skipped. If the version of a software component is increased but not the addonVersion , a package is built but no new target vector is created, meaning the new package cannot be deployed. If the add-on product consists of multiple software component versions, but only for one of them the version is increased (together with a new commitID ), only for this software component version a new package will be created. If, at the same time, the addonVersion is increased a new target vector will be created. The commitID identifies a specific state of a software component and should only be changed while also adjusting the version number of a software component.","title":"Add-on descriptor file"},{"location":"scenarios/abapEnvironmentAddons/#versioning-rules","text":"For the development and the provisioning of product-/software component versions, it is necessary to ensure, that there are no gaps within the version and level counters. Therefore, only a continuous increase in version numbers is allowed. The following examples show valid and invalid cases, respectively: Valid increase: 1.0.0 to 2.0.0 1.1.2 to 2.0.0 2.0.0 to 2.0.1 2.1.0 to 2.2.0 2.1.1 to 2.1.2 Invalid increase: 1.0.0 to 3.0.0 (version 2.0.0 is missing; therefore, a product/component version is missing) 1.1.2 to 2.1.0 (version 2.0.0 is missing; therefore, a product/component version is missing) 2.0.0 to 2.0.2 (version 2.0.1 is missing; therefore, a patch level is missing) 2.1.0 to 2.3.0 (version 2.2.0 is missing; therefore, a support package level is missing) 2.1.1 to 2.1.3 (version 2.1.2 is missing; therefore, a patch level is missing) Technically, the allowed number range for add-on product version and software component version is 1.0.0 to 9999.9999.9999. The support package level of software component version can only go up until 369 because of technical limitations. For the patch level, there is a technical limit of 36\u00b3, limited to 9999.","title":"Versioning Rules"},{"location":"scenarios/abapEnvironmentAddons/#example","text":"Please have a look at the configuration example to build and publish add-on products using a transient assembly system . As an alternative you can refer to the example using a permanent assembly system .","title":"Example"},{"location":"scenarios/abapEnvironmentAddons/#troubleshooting","text":"If you encounter an issue with the pipeline itself, please open an issue in GitHub . Once execution of the Build stage, in particular the abapAddonAssemblyKitRegisterPackages step, has been completed, errors must be resolved by creating new software component versions with the correct configuration. Pipeline steps can be restarted without causing double execution of already perfomed steps (intermediate results are stored).","title":"Troubleshooting"},{"location":"scenarios/abapEnvironmentAddons/#common-issues","text":"In case of an error during execution of the pipeline steps: Stage: Prepare System Step: abapEnvironmentCreateSystem A service instance for the selected plan cannot be created in this organization or Quota is not sufficient for this request. ABAP System provisioning requires sufficient entitlements for abap/standard as well as abap/hana_compute_unit and abap/abap_compute_unit to be assigned to the subaccount. Stage: Clone Repositories Step: abapEnvironmentPullGitRepo e.g. A4C_A2G/000 - Branch checkout for /NAMESPC/COMPONENTA is currently performed; Try again later... Parallel execution of multiple actions on the same software component (like checkout, pull etc.) is not supported. Stage: ATC Step: abapEnvironmentRunATCCheck Long-running step execution Create a custom check variant and utilize ATC Exemptions to reduce the test scope and irrelevant findings. Resolve ATC findings early on during development, e.g. by working with ATC during transport release . Stage: Build Step: abapAddonAssemblyKitReserveNextPackages e.g. Package SAPK00C001CPITAPC1 was already build but with commit d5ffb9717a57c9e65d9e4c8366ea45be958b56cc, not with 86d70dc3 New commitID , but no new software component version in add-on descriptor: Only by changing the version a new delivery package is created. e.g. CommitID of package SAPK00C002CPITAPC1 is the same as the one of the predecessor package. New Patch Level of software component, but same commitID in add-on descriptor: The same commitID cannot be used as previous/current commit id for a correction package. Stage: Integration Tests Step: abapEnvironmentCreateSystem A service instance for the selected plan cannot be created in this organization or Quota is not sufficient for this request. ABAP System provisioning requires sufficient entitlements for abap/saas_oem as well as abap/hana_compute_unit and abap/abap_compute_unit to be assigned to the subaccount. Product installation failed because AddOn XYZ has not been registered in PPMS for productive development The add-on product is not yet registered for add-on installation, please follow steps in Register Add-on Product for a Global Account #register-add-on-product-for-a-global-account Stage: Post Step: cloudFoundryDeleteService Add-on assembly system is deleted unexpectedly Create a Piper extension of the Post stage, similar to Post.groovy","title":"Common Issues"},{"location":"scenarios/abapEnvironmentAddons/#support-components","text":"If issues cannot be resolved, please open a support incident on the respective support component: Stage Steps Support Component Initial Checks abapAddonAssemblyKitCheckPV , abapAddonAssemblyKitCheckCVs BC-UPG-OCS Prepare System abapEnvironmentCreateSystem , cloudFoundryCreateServiceKey BC-CP-ABA Clone Repositories abapEnvironmentPullGitRepo BC-CP-ABA-SC ATC abapEnvironmentRunATCCheck BC-DWB-TOO-ATF AUnit abapEnvironmentRunAUnitTest BC-DWB-TOO-ATF Build cloudFoundryCreateServiceKey BC-CP-ABA abapAddonAssemblyKitReserveNextPackages BC-UPG-OCS abapEnvironmentAssemblePackages , abapEnvironmentBuild BC-UPG-ADDON abapAddonAssemblyKitRegisterPackages BC-UPG-OCS abapEnvironmentAssembleConfirm BC-UPG-ADDON abapAddonAssemblyKitReleasePackages , abapAddonAssemblyKitCreateTargetVector , abapAddonAssemblyKitPublishTargetVector BC-UPG-OCS Integration Tests abapEnvironmentCreateSystem , cloudFoundryDeleteService BC-CP-ABA Publish abapAddonAssemblyKitPublishTargetVector BC-UPG-OCS Post cloudFoundryDeleteService BC-CP-ABA Note: Always attach the pipeline execution log ouput to the support incident, if possible including timestamps by using the Timestamper Jenkins plugin . For troubleshooting purposes, the add-on descriptor file as well as build logs are archived as pipeline artifacts in the abapEnvironmentAssemblePackages step.","title":"Support Components"},{"location":"scenarios/abapEnvironmentTest/","text":"Continuous Testing on SAP BTP, ABAP Environment \u00b6 Introduction \u00b6 This scenario describes how to test ABAP development for the SAP BTP, ABAP environment (also known as Steampunk). In Steampunk, the development is done within \u201csoftware components\u201d (also called: \u201crepositories\u201d) and \"transported\" via git-based approaches. The ABAP environment pipeline is a predefined pipeline, which can be used to import ABAP development into a quality system and execute tests. Pipeline \u00b6 For this scenario three stages of the ABAP environment pipeline are relevant: \"Prepare System\", \"Clone Repositories\" and \"ATC\". Prepare System \u00b6 The pipeline starts with the stage \"Prepare System\". This stage, however, is optional. If this stage is active , a new Steampunk system is created for each pipeline execution. This has the advantage that each test runs on a fresh system without a history. On the other hand, the duration of each pipeline execution will increase as the system provisioning takes a significant amount of time. If this stage is not active , you have to provide a prepared Steampunk (quality) system for the other stages. Then, each pipeline execution runs on the same system. Of course, the system has a history, but the pipeline duration will be shorter. Please also consider: the total costs may increase for a static system in contrast to a system, which is only active during the pipeline. Clone Repositories \u00b6 This stage is responsible for cloning (or pulling) the defined software components (repositories) to the system. Run Tests \u00b6 This stage will trigger the execution of the ATC and AUnit stages in parallel. Please find more information on the respective stages below. ATC \u00b6 In this stage, ATC checks can be executed using abapEnvironmentRunATCCheck . The step can receive software components or packages. The results are returned in the checkstyle format and can be displayed using the Warnings Next Generation Plugin . To display the results it is necessary to extend the ATC stage via the Checkstyle/Warnings Next Generation Plugin . AUnit \u00b6 This stage will triger an AUnit run on the SAP BTP, APAB environment system. You can configure the object set that should be checked during the AUnit run. The results of the test run are returned in the \"JUnit\" format. It is possible to further visualize the AUnit test run results with the help of a stage extension. Prerequisites \u00b6 There are several parts that are required to run the pipeline. Jenkins Server \u00b6 The pipeline for testing software components has been created specifically for Jenkins . Therefore, a Jenkins server is required. The project \"Piper\" provides a Jenkins image, which already includes the necessary configurations. Of course, it is also possible to configure an existing server . Git Repository \u00b6 The pipeline configuration is done in a git repository (for example on GitHub). This repository needs to be accessed by the Jenkins server. If the repository is password protected, the user and password (or access token) should be stored in the Jenkins Credentials Store (Manage Jenkins \u2192 Manage Credentials). Cloud Foundry Access \u00b6 ABAP environment systems are created in the SAP BTP cockpit. For this pipeline, the creation and deletion of the systems are automated via the Cloud Foundry Command Line Interface: cf CLI . For this to work, two things need to be configured: Cloud Foundry needs to be enabled on subaccount level. This can be done on the Subaccount Overview page. The subaccount is then mapped to a \u201cCloud Foundry Organization\u201d, for which you must provide a suitable name during the creation. Have a look at the documentation for more details. A (technical) user is required to access the SAP BTP via the cf CLI. The user needs to be a member of the global account and has to have the Space Developer role. The user and password need to be stored in the Jenkins Credentials Store. During the pipeline configuration, you will specify the service plan, which will be used for the creation of an ABAP environment system. Please make sure, that there are enough entitlements for this Service Plan in the Subaccount . Configuration \u00b6 Please refer to the configuration page . Example \u00b6 Please have a look at the configuration examples to run ATC checks on a transient system or on a permanent system .","title":"Continuous Testing on SAP BTP, ABAP Environment"},{"location":"scenarios/abapEnvironmentTest/#continuous-testing-on-sap-btp-abap-environment","text":"","title":"Continuous Testing on SAP BTP, ABAP Environment"},{"location":"scenarios/abapEnvironmentTest/#introduction","text":"This scenario describes how to test ABAP development for the SAP BTP, ABAP environment (also known as Steampunk). In Steampunk, the development is done within \u201csoftware components\u201d (also called: \u201crepositories\u201d) and \"transported\" via git-based approaches. The ABAP environment pipeline is a predefined pipeline, which can be used to import ABAP development into a quality system and execute tests.","title":"Introduction"},{"location":"scenarios/abapEnvironmentTest/#pipeline","text":"For this scenario three stages of the ABAP environment pipeline are relevant: \"Prepare System\", \"Clone Repositories\" and \"ATC\".","title":"Pipeline"},{"location":"scenarios/abapEnvironmentTest/#prepare-system","text":"The pipeline starts with the stage \"Prepare System\". This stage, however, is optional. If this stage is active , a new Steampunk system is created for each pipeline execution. This has the advantage that each test runs on a fresh system without a history. On the other hand, the duration of each pipeline execution will increase as the system provisioning takes a significant amount of time. If this stage is not active , you have to provide a prepared Steampunk (quality) system for the other stages. Then, each pipeline execution runs on the same system. Of course, the system has a history, but the pipeline duration will be shorter. Please also consider: the total costs may increase for a static system in contrast to a system, which is only active during the pipeline.","title":"Prepare System"},{"location":"scenarios/abapEnvironmentTest/#clone-repositories","text":"This stage is responsible for cloning (or pulling) the defined software components (repositories) to the system.","title":"Clone Repositories"},{"location":"scenarios/abapEnvironmentTest/#run-tests","text":"This stage will trigger the execution of the ATC and AUnit stages in parallel. Please find more information on the respective stages below.","title":"Run Tests"},{"location":"scenarios/abapEnvironmentTest/#atc","text":"In this stage, ATC checks can be executed using abapEnvironmentRunATCCheck . The step can receive software components or packages. The results are returned in the checkstyle format and can be displayed using the Warnings Next Generation Plugin . To display the results it is necessary to extend the ATC stage via the Checkstyle/Warnings Next Generation Plugin .","title":"ATC"},{"location":"scenarios/abapEnvironmentTest/#aunit","text":"This stage will triger an AUnit run on the SAP BTP, APAB environment system. You can configure the object set that should be checked during the AUnit run. The results of the test run are returned in the \"JUnit\" format. It is possible to further visualize the AUnit test run results with the help of a stage extension.","title":"AUnit"},{"location":"scenarios/abapEnvironmentTest/#prerequisites","text":"There are several parts that are required to run the pipeline.","title":"Prerequisites"},{"location":"scenarios/abapEnvironmentTest/#jenkins-server","text":"The pipeline for testing software components has been created specifically for Jenkins . Therefore, a Jenkins server is required. The project \"Piper\" provides a Jenkins image, which already includes the necessary configurations. Of course, it is also possible to configure an existing server .","title":"Jenkins Server"},{"location":"scenarios/abapEnvironmentTest/#git-repository","text":"The pipeline configuration is done in a git repository (for example on GitHub). This repository needs to be accessed by the Jenkins server. If the repository is password protected, the user and password (or access token) should be stored in the Jenkins Credentials Store (Manage Jenkins \u2192 Manage Credentials).","title":"Git Repository"},{"location":"scenarios/abapEnvironmentTest/#cloud-foundry-access","text":"ABAP environment systems are created in the SAP BTP cockpit. For this pipeline, the creation and deletion of the systems are automated via the Cloud Foundry Command Line Interface: cf CLI . For this to work, two things need to be configured: Cloud Foundry needs to be enabled on subaccount level. This can be done on the Subaccount Overview page. The subaccount is then mapped to a \u201cCloud Foundry Organization\u201d, for which you must provide a suitable name during the creation. Have a look at the documentation for more details. A (technical) user is required to access the SAP BTP via the cf CLI. The user needs to be a member of the global account and has to have the Space Developer role. The user and password need to be stored in the Jenkins Credentials Store. During the pipeline configuration, you will specify the service plan, which will be used for the creation of an ABAP environment system. Please make sure, that there are enough entitlements for this Service Plan in the Subaccount .","title":"Cloud Foundry Access"},{"location":"scenarios/abapEnvironmentTest/#configuration","text":"Please refer to the configuration page .","title":"Configuration"},{"location":"scenarios/abapEnvironmentTest/#example","text":"Please have a look at the configuration examples to run ATC checks on a transient system or on a permanent system .","title":"Example"},{"location":"scenarios/changeManagement/","text":"Build and Deploy Hybrid Applications with SAP Solution Manager \u00b6 Set up an agile development process with Jenkins CI, which automatically feeds changes into SAP Solution Manager. Prerequisites \u00b6 You have installed the Java Runtime Environment 8. You have installed Jenkins 2.60.3 or higher. You have set up project \u201cPiper\u201d. See README . You have installed SAP Solution Manager 7.2 SP6. See README . You have installed the multitarget application archive builder 1.0.6 or newer. See SAP Development Tools . Note: This is only required if you don't use a Docker-based environment. You have installed Node.js including node and npm. See Node.js . Note: This is only required if you don't use a Docker-based environment. Context \u00b6 In many SAP development scenarios, it is vital to synchronize both backend and frontend deliveries. These deliveries are typically an SAPUI5 application and an ABAP backend from which it is served. The SAPUI5 parts are often developed using agile practices and use Continuous Integration pipelines that automatically build, test, and deploy the application. Note This scenario description is an example. You can apply the process to other scenarios and component sets, as well. In this scenario, we want to show how an agile development process with Jenkins CI can automatically feed changes into SAP Solution Manager. In SAP Solution Manager, all parts of the application stack come together and can be subject to classic change and transport management. The basic workflow is as follows: The pipeline scans the Git commit messages for a line like ChangeDocument : <changeDocumentId> , and validates that the change is in the correct status in development . For more information, see checkChangeInDevelopment . An example for the commit message looks as follows: Fix terminology in documentation Terminology must be consistent with official channels. ChangeDocument: <Your Change Document ID> Note: The blank line between message header and message description is mandatory. To communicate with SAP Solution Manager, the pipeline uses credentials that must be stored on Jenkins using the credential ID CM . For more information, see checkChangeInDevelopment . The required transport request is created on the fly. Note: The change document can contain various components (for example, UI and backend components). The changes of your development team trigger the Jenkins pipeline. It builds and validates the changes and attaches them to the respective transport request. As soon as the development process is completed, the change document in SAP Solution Manager can be set to status to be tested and all components can be transported to the test system. Hybrid Application Development Workflow Example \u00b6 Jenkinsfile \u00b6 @Library ( 'piper-lib-os' ) _ node () { stage ( 'prepare' ) { checkout scm setupCommonPipelineEnvironment script: this transportRequestDocIDFromGit ( script: this ) checkChangeInDevelopment script: this } stage ( 'buildMta' ) { mtaBuild script: this } stage ( 'uploadToTransportRequest' ) { transportRequestCreate script: this transportRequestUploadSOLMAN script: this transportRequestRelease script: this } } Configuration ( .pipeline/config.yml ) \u00b6 #Steps Specific Configuration general : changeManagement : endpoint : 'https://<backend-system>/sap/opu/odata/sap/AI_CRM_GW_CM_CI_SRV' credentialsId : 'CM' type : 'SOLMAN' steps : mtaBuild : buildTarget : 'NEO' transportRequestCreate : developmentSystemId : '<value for developmentSystemId>' transportRequestUploadSOLMAN : applicationId : 'HCP' Parameters \u00b6 For the detailed description of the relevant parameters, see: checkChangeInDevelopment mtaBuild transportRequestCreate transportRequestDocIDFromGit transportRequestUploadSOLMAN transportRequestRelease","title":"Build and Deploy Hybrid Applications with SAP Solution Manager"},{"location":"scenarios/changeManagement/#build-and-deploy-hybrid-applications-with-sap-solution-manager","text":"Set up an agile development process with Jenkins CI, which automatically feeds changes into SAP Solution Manager.","title":"Build and Deploy Hybrid Applications with SAP Solution Manager"},{"location":"scenarios/changeManagement/#prerequisites","text":"You have installed the Java Runtime Environment 8. You have installed Jenkins 2.60.3 or higher. You have set up project \u201cPiper\u201d. See README . You have installed SAP Solution Manager 7.2 SP6. See README . You have installed the multitarget application archive builder 1.0.6 or newer. See SAP Development Tools . Note: This is only required if you don't use a Docker-based environment. You have installed Node.js including node and npm. See Node.js . Note: This is only required if you don't use a Docker-based environment.","title":"Prerequisites"},{"location":"scenarios/changeManagement/#context","text":"In many SAP development scenarios, it is vital to synchronize both backend and frontend deliveries. These deliveries are typically an SAPUI5 application and an ABAP backend from which it is served. The SAPUI5 parts are often developed using agile practices and use Continuous Integration pipelines that automatically build, test, and deploy the application. Note This scenario description is an example. You can apply the process to other scenarios and component sets, as well. In this scenario, we want to show how an agile development process with Jenkins CI can automatically feed changes into SAP Solution Manager. In SAP Solution Manager, all parts of the application stack come together and can be subject to classic change and transport management. The basic workflow is as follows: The pipeline scans the Git commit messages for a line like ChangeDocument : <changeDocumentId> , and validates that the change is in the correct status in development . For more information, see checkChangeInDevelopment . An example for the commit message looks as follows: Fix terminology in documentation Terminology must be consistent with official channels. ChangeDocument: <Your Change Document ID> Note: The blank line between message header and message description is mandatory. To communicate with SAP Solution Manager, the pipeline uses credentials that must be stored on Jenkins using the credential ID CM . For more information, see checkChangeInDevelopment . The required transport request is created on the fly. Note: The change document can contain various components (for example, UI and backend components). The changes of your development team trigger the Jenkins pipeline. It builds and validates the changes and attaches them to the respective transport request. As soon as the development process is completed, the change document in SAP Solution Manager can be set to status to be tested and all components can be transported to the test system. Hybrid Application Development Workflow","title":"Context"},{"location":"scenarios/changeManagement/#example","text":"","title":"Example"},{"location":"scenarios/changeManagement/#jenkinsfile","text":"@Library ( 'piper-lib-os' ) _ node () { stage ( 'prepare' ) { checkout scm setupCommonPipelineEnvironment script: this transportRequestDocIDFromGit ( script: this ) checkChangeInDevelopment script: this } stage ( 'buildMta' ) { mtaBuild script: this } stage ( 'uploadToTransportRequest' ) { transportRequestCreate script: this transportRequestUploadSOLMAN script: this transportRequestRelease script: this } }","title":"Jenkinsfile"},{"location":"scenarios/changeManagement/#configuration-pipelineconfigyml","text":"#Steps Specific Configuration general : changeManagement : endpoint : 'https://<backend-system>/sap/opu/odata/sap/AI_CRM_GW_CM_CI_SRV' credentialsId : 'CM' type : 'SOLMAN' steps : mtaBuild : buildTarget : 'NEO' transportRequestCreate : developmentSystemId : '<value for developmentSystemId>' transportRequestUploadSOLMAN : applicationId : 'HCP'","title":"Configuration (.pipeline/config.yml)"},{"location":"scenarios/changeManagement/#parameters","text":"For the detailed description of the relevant parameters, see: checkChangeInDevelopment mtaBuild transportRequestCreate transportRequestDocIDFromGit transportRequestUploadSOLMAN transportRequestRelease","title":"Parameters"},{"location":"scenarios/gCTS_Scenario/","text":"Set up a Pipeline-Based ABAP Development and Testing Process Using Git-Enabled Change and Transport System \u00b6 Introduction \u00b6 Git-enabled Change & Transport System (gCTS) enables you to manage your ABAP change and transport management processes using Git as an external version management system. It allows you to set up continuous integration processes for ABAP development. For current information about gCTS, see SAP Note 2821718 - Central Note for Git-enabled Change and Transport System (gCTS) . This scenario explains how to use a pipeline to deploy a commit to a test system, and execute ABAP unit tests and ATC (ABAP Test Cockpit) checks in the test system. For each new commit that arrives in the remote repository, the pipeline executes the following Piper steps in the test system: gctsDeploy : Deploys the commit on the test system. gctsExecuteABAPQualityChecks : Executes ABAP unit tests and ATC checks for the ABAP development objects of the commit. If the result of the testing is success , the pipeline finishes. If the result of the testing is error , a rollback is executed (see next step). Only in case of errors: gctsRollback : Executes a rollback to the previous commit. You can check the cause of the errors using the Warnings Next Generation Plugin in Jenkins. Prerequisites \u00b6 You have configured Git-Enabled Change and Transport System, and you use it for your ABAP development. See Configuring Git-enabled Change & Transport System (gCTS) You have a Git repository on a Git server, such as GitHub, or GitLab. The Git repository is usually created as part of the gCTS configuration. It is used to store your ABAP developments. You can use this Git repository also for the pipeline configuration. (Jenkinsfile) The repository used for the pipeline configuration needs to be accessed by the Jenkins instance. If the repository is password-protected, the user and password (or access token) should be stored in the Jenkins Credentials Store ( Manage Jenkins > Manage Credentials ). You have at least two ABAP systems with a version SAP S/4HANA 2020 or higher. You need one development system that you use to push objects to the Git repository, and a test system on which you run the pipeline. You have created and cloned the Git repository on all systems, on the development system with the Development role, and on the others with the Provided role. You have enabled ATC checks in transaction ATC in the test system. You have access to a Jenkins instance including the Warnings-Next-Generation Plugin . The plug-in must be installed separately. It is required to view the results of the testing after the pipeline has run. For the gCTS scenario, we recommend that you use the Custom Jenkins setup . You have set up a suitable Jenkins instance as described under Getting Started with Project \"Piper\" under Create Your First Pipeline . The user that is used for the execution of the pipeline must have the credentials entered in gCTS as described in the gCTS documentation under Set User-Specific Authentication . Process \u00b6 The pipeline process is as follows: You create or change ABAP objects in the development system. When you release the transport request, the objects are pushed to the remote repository in a new commit. The pipeline is triggered by the new commit. The pipeline can be started manually in Jenkins, or automatically when the new commit arrives in the Git repository (by setting a webhook on your Git server). For more information about webhooks on GitHub, see Creating webhooks . The pipeline deploys the new commit on the test system. If the deployment is successful, the pipeline executes ATC checks and ABAP Unit tests for the objects of the commit depending on the specified object scope. In the sample configuration provided below, this is localChangedObjects , which means, the checks are executed for all objects that were changed by the last activity in the local repository. If the checks don\u00b4t find any errors, the pipeline finishes. The test system remains on the new commit, and you can continue your testing activities, for example, using manual tests. If the checks find errors, the pipeline continues with the next step. In case of warnings or errors, the pipeline executes a rollback to the last active commit in the test system. You can display the errors and warnings of the checks in the Warnings-Next-Generation Plugin . For more information about the mapping of priorities and severities of the checks to statuses displayed in Jenkins, see the description of the following parameters in the description of the gctsExecuteABAPQualityChecks step: Severities of ABAP Unit test results: aUnitTest Priorities of ATC check results: atcCheck After analyzing the errors, you can correct the issues in the development system. Once you release the new transport request, the pipeline is triggered again. The following image shows the steps involved when the checks finish successfully: Image: Build and Deploy Process in Jenkins The following image shows the steps involved when the checks result in warnings or errors: Image: Build and Deploy Process in Jenkins Example \u00b6 To implement the gCTS scenario, create a Jenkinsfile in the root directory of your Git repository. The sample Jenkinsfile below contains all configuration information required. It is also possible to use an additional .pipeline/config.yml file for the configuration of the step parameters. But the config.yml is not required for the gCTS scenario described here. For more information, see the examples in the individual step descriptions. For general information about configuration options in \"Piper\" projects, see Configuration . Jenkinsfile \u00b6 @Library ([ 'piper-lib-os' ]) _ pipeline { agent any options { disableConcurrentBuilds () } environment { DEMOCREDS = 'ABAPUserPasswordCredentialsId' HOST = 'https://<host of the ABAP system>:<port>' CLIENT = '000' REPO = '<repository name>' REPO_URL = \"<URL of the remote Git Repository>\" } stages { stage ( 'gCTS Deploy' ) { when { anyOf { branch 'main' } } steps { gctsDeploy ( script: this , host: HOST , client: CLIENT , abapCredentialsId: DEMOCREDS , repository: REPO , remoteRepositoryURL: REPO_URL , role: 'SOURCE' , vSID: '<vSID>' ) } } stage ( 'gctsExecuteABAPQualityChecks' ) { when { anyOf { branch 'main' } } steps { script { try { gctsExecuteABAPQualityChecks ( script: this , host: HOST , client: CLIENT , abapCredentialsId: DEMOCREDS , repository: REPO , scope: 'localChangedObjects' , commit: \"${env.GIT_COMMIT}\" , workspace: \"${WORKSPACE}\" ) } catch ( Exception ex ) { currentBuild . result = 'FAILURE' unstable ( message: \"${STAGE_NAME} is unstable\" ) } } } } stage ( 'Results in Checkstyle' ) { when { anyOf { branch 'main' } } steps { recordIssues ( enabledForFailure: true , aggregatingResults: true , tools: [ checkStyle ( pattern: 'ATCResults.xml' , reportEncoding: 'UTF8' ), checkStyle ( pattern: 'AUnitResults.xml' , reportEncoding: 'UTF8' )] ) } } stage ( 'Rollback' ) { when { expression { currentBuild . result == 'FAILURE' } } steps { gctsRollback ( script: this , host: HOST , client: CLIENT , abapCredentialsId: DEMOCREDS , repository: REPO ) } } } } Parameters \u00b6 For a detailed description of the relevant parameters of the library steps used in the gCTS scenario, see: gctsDeploy gctsExecuteABAPQualityChecks gctsRollback Troubleshooting \u00b6 If you encounter an issue with the pipeline itself, please open an issue in GitHub and add the label gcts to it.","title":"Set up a Pipeline-Based ABAP Development and Testing Process Using Git-Enabled Change and Transport System"},{"location":"scenarios/gCTS_Scenario/#set-up-a-pipeline-based-abap-development-and-testing-process-using-git-enabled-change-and-transport-system","text":"","title":"Set up a Pipeline-Based ABAP Development and Testing Process Using Git-Enabled Change and Transport System"},{"location":"scenarios/gCTS_Scenario/#introduction","text":"Git-enabled Change & Transport System (gCTS) enables you to manage your ABAP change and transport management processes using Git as an external version management system. It allows you to set up continuous integration processes for ABAP development. For current information about gCTS, see SAP Note 2821718 - Central Note for Git-enabled Change and Transport System (gCTS) . This scenario explains how to use a pipeline to deploy a commit to a test system, and execute ABAP unit tests and ATC (ABAP Test Cockpit) checks in the test system. For each new commit that arrives in the remote repository, the pipeline executes the following Piper steps in the test system: gctsDeploy : Deploys the commit on the test system. gctsExecuteABAPQualityChecks : Executes ABAP unit tests and ATC checks for the ABAP development objects of the commit. If the result of the testing is success , the pipeline finishes. If the result of the testing is error , a rollback is executed (see next step). Only in case of errors: gctsRollback : Executes a rollback to the previous commit. You can check the cause of the errors using the Warnings Next Generation Plugin in Jenkins.","title":"Introduction"},{"location":"scenarios/gCTS_Scenario/#prerequisites","text":"You have configured Git-Enabled Change and Transport System, and you use it for your ABAP development. See Configuring Git-enabled Change & Transport System (gCTS) You have a Git repository on a Git server, such as GitHub, or GitLab. The Git repository is usually created as part of the gCTS configuration. It is used to store your ABAP developments. You can use this Git repository also for the pipeline configuration. (Jenkinsfile) The repository used for the pipeline configuration needs to be accessed by the Jenkins instance. If the repository is password-protected, the user and password (or access token) should be stored in the Jenkins Credentials Store ( Manage Jenkins > Manage Credentials ). You have at least two ABAP systems with a version SAP S/4HANA 2020 or higher. You need one development system that you use to push objects to the Git repository, and a test system on which you run the pipeline. You have created and cloned the Git repository on all systems, on the development system with the Development role, and on the others with the Provided role. You have enabled ATC checks in transaction ATC in the test system. You have access to a Jenkins instance including the Warnings-Next-Generation Plugin . The plug-in must be installed separately. It is required to view the results of the testing after the pipeline has run. For the gCTS scenario, we recommend that you use the Custom Jenkins setup . You have set up a suitable Jenkins instance as described under Getting Started with Project \"Piper\" under Create Your First Pipeline . The user that is used for the execution of the pipeline must have the credentials entered in gCTS as described in the gCTS documentation under Set User-Specific Authentication .","title":"Prerequisites"},{"location":"scenarios/gCTS_Scenario/#process","text":"The pipeline process is as follows: You create or change ABAP objects in the development system. When you release the transport request, the objects are pushed to the remote repository in a new commit. The pipeline is triggered by the new commit. The pipeline can be started manually in Jenkins, or automatically when the new commit arrives in the Git repository (by setting a webhook on your Git server). For more information about webhooks on GitHub, see Creating webhooks . The pipeline deploys the new commit on the test system. If the deployment is successful, the pipeline executes ATC checks and ABAP Unit tests for the objects of the commit depending on the specified object scope. In the sample configuration provided below, this is localChangedObjects , which means, the checks are executed for all objects that were changed by the last activity in the local repository. If the checks don\u00b4t find any errors, the pipeline finishes. The test system remains on the new commit, and you can continue your testing activities, for example, using manual tests. If the checks find errors, the pipeline continues with the next step. In case of warnings or errors, the pipeline executes a rollback to the last active commit in the test system. You can display the errors and warnings of the checks in the Warnings-Next-Generation Plugin . For more information about the mapping of priorities and severities of the checks to statuses displayed in Jenkins, see the description of the following parameters in the description of the gctsExecuteABAPQualityChecks step: Severities of ABAP Unit test results: aUnitTest Priorities of ATC check results: atcCheck After analyzing the errors, you can correct the issues in the development system. Once you release the new transport request, the pipeline is triggered again. The following image shows the steps involved when the checks finish successfully: Image: Build and Deploy Process in Jenkins The following image shows the steps involved when the checks result in warnings or errors: Image: Build and Deploy Process in Jenkins","title":"Process"},{"location":"scenarios/gCTS_Scenario/#example","text":"To implement the gCTS scenario, create a Jenkinsfile in the root directory of your Git repository. The sample Jenkinsfile below contains all configuration information required. It is also possible to use an additional .pipeline/config.yml file for the configuration of the step parameters. But the config.yml is not required for the gCTS scenario described here. For more information, see the examples in the individual step descriptions. For general information about configuration options in \"Piper\" projects, see Configuration .","title":"Example"},{"location":"scenarios/gCTS_Scenario/#jenkinsfile","text":"@Library ([ 'piper-lib-os' ]) _ pipeline { agent any options { disableConcurrentBuilds () } environment { DEMOCREDS = 'ABAPUserPasswordCredentialsId' HOST = 'https://<host of the ABAP system>:<port>' CLIENT = '000' REPO = '<repository name>' REPO_URL = \"<URL of the remote Git Repository>\" } stages { stage ( 'gCTS Deploy' ) { when { anyOf { branch 'main' } } steps { gctsDeploy ( script: this , host: HOST , client: CLIENT , abapCredentialsId: DEMOCREDS , repository: REPO , remoteRepositoryURL: REPO_URL , role: 'SOURCE' , vSID: '<vSID>' ) } } stage ( 'gctsExecuteABAPQualityChecks' ) { when { anyOf { branch 'main' } } steps { script { try { gctsExecuteABAPQualityChecks ( script: this , host: HOST , client: CLIENT , abapCredentialsId: DEMOCREDS , repository: REPO , scope: 'localChangedObjects' , commit: \"${env.GIT_COMMIT}\" , workspace: \"${WORKSPACE}\" ) } catch ( Exception ex ) { currentBuild . result = 'FAILURE' unstable ( message: \"${STAGE_NAME} is unstable\" ) } } } } stage ( 'Results in Checkstyle' ) { when { anyOf { branch 'main' } } steps { recordIssues ( enabledForFailure: true , aggregatingResults: true , tools: [ checkStyle ( pattern: 'ATCResults.xml' , reportEncoding: 'UTF8' ), checkStyle ( pattern: 'AUnitResults.xml' , reportEncoding: 'UTF8' )] ) } } stage ( 'Rollback' ) { when { expression { currentBuild . result == 'FAILURE' } } steps { gctsRollback ( script: this , host: HOST , client: CLIENT , abapCredentialsId: DEMOCREDS , repository: REPO ) } } } }","title":"Jenkinsfile"},{"location":"scenarios/gCTS_Scenario/#parameters","text":"For a detailed description of the relevant parameters of the library steps used in the gCTS scenario, see: gctsDeploy gctsExecuteABAPQualityChecks gctsRollback","title":"Parameters"},{"location":"scenarios/gCTS_Scenario/#troubleshooting","text":"If you encounter an issue with the pipeline itself, please open an issue in GitHub and add the label gcts to it.","title":"Troubleshooting"},{"location":"scenarios/ui5-sap-cp/Readme/","text":"Build and Deploy SAPUI5/SAP Fiori Applications on SAP Business Technology Platform (SAP BTP) \u00b6 Build an application based on SAPUI5 or SAP Fiori with Jenkins and deploy the build result into an SAP BTP account in the SAP BTP, Cloud Foundry environment. Optionally, deploy the build result into the Neo environment. Prerequisites \u00b6 You have an account on SAP BTP in the Cloud Foundry environment. See Accounts . You have set up project \u201cPiper\u201d. See Guided Tour . Project Prerequisites \u00b6 This scenario requires additional files in your project and in the execution environment on your Jenkins instance. On the project level, provide and adjust the following template: File Name Description Position mta.yaml This file controls the behavior of the MTA toolset . Place the mta.yaml file in your application root folder and replace the values in brackets with your data. Context \u00b6 This scenario combines various different steps to create a complete pipeline. In this scenario, we want to show how to build an application based on SAPUI5 or SAP Fiori by using the multitarget application (MTA) concept, and how to deploy the build result into an SAP BTP account in the Cloud Foundry environment. This document comprises the mtaBuild and the cloudFoundryDeploy steps. Screenshot: Build and Deploy Process in Jenkins Example \u00b6 Jenkinsfile \u00b6 Following the convention for pipeline definitions, use a Jenkinsfile which resides in the root directory of your development sources. @Library ( 'piper-lib-os' ) _ fioriOnCloudPlatformPipeline script: this fioriOnCloudPlatformPipeline is a so called scenario step that wraps mainly the mtaBuild step and the cloudFoundryDeploy step. Scenario Configuration \u00b6 This is a basic configuration example, which also resides in the sources of the project. Edit .pipeline/config.yml below the root directory. The configuration corresponds to the steps wrapped in fioriOnCloudPlatformPipeline . For more information, see mtaBuild and cloudFoundryDeploy . steps : mtaBuild : platform : 'CF' cloudFoundryDeploy : cloudFoundry : apiEndpoint : 'your-cf-endpoint' # default: 'https://api.cf.eu10.hana.ondemand.com' org : 'your-org-id' space : 'your-space-id' credentialsId : 'CF-jenkins-credentials-id' Optional environment \u00b6 Optionally, you can use fioriOnCloudPlatformPipeline to deploy your build result into the Neo environment. For more information, see neoDeploy . steps : mtaBuild : platform : 'NEO' neoDeploy : neo : credentialsId : 'NEO-jenkins-credentials-id' account : 'your-account-id' host : 'hana.ondemand.com' Parameters \u00b6 For the detailed description of the relevant parameters, see: fioriOnCloudPlatformPipeline mtaBuild cloudFoundryDeploy neoDeploy","title":"Build and Deploy SAPUI5/SAP Fiori Applications on SAP BTP"},{"location":"scenarios/ui5-sap-cp/Readme/#build-and-deploy-sapui5sap-fiori-applications-on-sap-business-technology-platform-sap-btp","text":"Build an application based on SAPUI5 or SAP Fiori with Jenkins and deploy the build result into an SAP BTP account in the SAP BTP, Cloud Foundry environment. Optionally, deploy the build result into the Neo environment.","title":"Build and Deploy SAPUI5/SAP Fiori Applications on SAP Business Technology Platform (SAP BTP)"},{"location":"scenarios/ui5-sap-cp/Readme/#prerequisites","text":"You have an account on SAP BTP in the Cloud Foundry environment. See Accounts . You have set up project \u201cPiper\u201d. See Guided Tour .","title":"Prerequisites"},{"location":"scenarios/ui5-sap-cp/Readme/#project-prerequisites","text":"This scenario requires additional files in your project and in the execution environment on your Jenkins instance. On the project level, provide and adjust the following template: File Name Description Position mta.yaml This file controls the behavior of the MTA toolset . Place the mta.yaml file in your application root folder and replace the values in brackets with your data.","title":"Project Prerequisites"},{"location":"scenarios/ui5-sap-cp/Readme/#context","text":"This scenario combines various different steps to create a complete pipeline. In this scenario, we want to show how to build an application based on SAPUI5 or SAP Fiori by using the multitarget application (MTA) concept, and how to deploy the build result into an SAP BTP account in the Cloud Foundry environment. This document comprises the mtaBuild and the cloudFoundryDeploy steps. Screenshot: Build and Deploy Process in Jenkins","title":"Context"},{"location":"scenarios/ui5-sap-cp/Readme/#example","text":"","title":"Example"},{"location":"scenarios/ui5-sap-cp/Readme/#jenkinsfile","text":"Following the convention for pipeline definitions, use a Jenkinsfile which resides in the root directory of your development sources. @Library ( 'piper-lib-os' ) _ fioriOnCloudPlatformPipeline script: this fioriOnCloudPlatformPipeline is a so called scenario step that wraps mainly the mtaBuild step and the cloudFoundryDeploy step.","title":"Jenkinsfile"},{"location":"scenarios/ui5-sap-cp/Readme/#scenario-configuration","text":"This is a basic configuration example, which also resides in the sources of the project. Edit .pipeline/config.yml below the root directory. The configuration corresponds to the steps wrapped in fioriOnCloudPlatformPipeline . For more information, see mtaBuild and cloudFoundryDeploy . steps : mtaBuild : platform : 'CF' cloudFoundryDeploy : cloudFoundry : apiEndpoint : 'your-cf-endpoint' # default: 'https://api.cf.eu10.hana.ondemand.com' org : 'your-org-id' space : 'your-space-id' credentialsId : 'CF-jenkins-credentials-id'","title":"Scenario Configuration"},{"location":"scenarios/ui5-sap-cp/Readme/#optional-environment","text":"Optionally, you can use fioriOnCloudPlatformPipeline to deploy your build result into the Neo environment. For more information, see neoDeploy . steps : mtaBuild : platform : 'NEO' neoDeploy : neo : credentialsId : 'NEO-jenkins-credentials-id' account : 'your-account-id' host : 'hana.ondemand.com'","title":"Optional environment"},{"location":"scenarios/ui5-sap-cp/Readme/#parameters","text":"For the detailed description of the relevant parameters, see: fioriOnCloudPlatformPipeline mtaBuild cloudFoundryDeploy neoDeploy","title":"Parameters"},{"location":"scenarios/upload-to-transportrequest/Readme/","text":"Build an SAP Fiori Application and Attach It to a Transport Request on an ABAP System \u00b6 Build an application based on SAPUI5 or SAP Fiori with Jenkins and attach the build result to a transport request in an SAP ABAP system. Generally, you can choose between two technical ways to attach a binary to an ABAP transport request: We support uploads through RFC and through OData. Which option to use depends on the version of your ABAP system. For AS ABAP 7.50 SP08, 7.51 SP07, or 7.52 SP03 and newer, use the OData-based upload, for older versions, use the RFC-based upload. Prerequisites \u00b6 You have set up your Docker environment . You have set up project \u201cPiper\u201d. See guided tour . You have a transport request. In General it is possible to create a transport request on the fly. But the example here is based on an already existing transport request. Depending on the version of the ABAP system: Docker image for attaching binaries to transport requests via RFC available. Due to legal reasons there is no pre-build docker image. How to create the docker image is explained here Project Prerequisites \u00b6 This scenario requires additional files in your project and in the execution environment on your Jenkins instance. On the project level, provide and adjust the following template: File Name Description Position mta.yaml This file controls the behavior of the multitarget application (MTA) toolset. Place the mta.yaml file in your application root folder and adjust the values in brackets with your data. Depending on the modules in your MTA, additional configuration files are required, e.g. pom.xml or package.json . Context \u00b6 This scenario combines various different steps to create a complete pipeline. In this scenario, we want to show how to build an application based on SAPUI5 or SAP Fiori by using the MTA concept and how to attach the build result to a transport request inside an ABAP system. This document comprises the mtaBuild step and the transportRequestUploadRFC respectively the transportRequestUploadCTS step. In case of an RFC based upload the binary is not streamed to the ABAP endpoint. Instead an URL pointing to the binary needs to be provided. Hence the binary must be published first so that it can be accessed via HTTP. This can happen by uploading the binary to a blob store or by archiving the artifact on Jenkins. The corresponding URL needs to be provided when the artifact is attached to the transport request. The transport request can be created on the fly (see transportRequestCreate ) or we can use an already existing transport request. In case we use an already existing transport request Id the transport request Id needs to be provided in the git commit history (see transportRequestReqIDFromGit ) or the transport request Id needs to be provided inside the job (e.g. as a job parameter). The transport request can be closed by the pipeline job (see transportRequestRelease ). This is an example of a Git commit message containing the transport request ID: The headline The body. The blank line above is mandatory (Git standard). TransportRequest: <YOUR TRANSPORT REQUEST ID> By default, the Git commits between the merge base with the base branch (default: master ) and the current branch head are traversed. Screenshot: Build and Deploy Process in Jenkins Examples \u00b6 Upload via RFC \u00b6 Jenkinsfile \u00b6 Following the convention for pipeline definitions, use a Jenkinsfile , which resides in the root directory of your development sources. @Library ( 'piper-lib-os' ) _ pipeline { agent any stages { stage ( \"prepare\" ) { steps { deleteDir () checkout scm setupCommonPipelineEnvironment script: this } } stage ( 'build' ) { steps { // It depends on your project, what needs to be done here. Maybe it's sufficient to zip the sources mtaBuild script: this } } stage ( 'publish' ) { steps { // This uploads the binary into a blob store so that it can be attached to a transport request later sh \"curl --upload-file <deployable> <BLOB_STORE/path/to/application>\" // OR (in case there is no BLOB_STORE available) // This makes the artifact available on Nexus. The URL is the following: // <JENKINS_URL>/job/<JOB_NAME>/<BUILD_NUMBER>/artifact/<DEPLOYABLE>. Nota bene: this format is not an Jenkins API. // The build number can be retrieved during the build through ${currentBuild.number} archiveArtifacts artifacts: < deployable > } } // This attaches the deployable to a transport request stage ( 'attach' ) { steps { transportRequestUploadRFC script: this , transportRequestId: '<TRANSPORT_REQUEST_ID>' , // This can be omitted if present inside a Git commit message applicationUrl: '<THE_URL_TO_THE_DEPLOYABLE_ACCORDING_TO_PUBLISH_STAGE>' } } } } Configuration ( .pipeline/config.yml ) \u00b6 This is a basic configuration example, which is also located in the sources of the project. steps : transportRequestUploadRFC : changeManagement : endpoint : 'https://your.rfc.endpoint.com/' # e.g. example.com' credentialsId : 'RFC' # The ID under which the credentials are provided on Jenkins defaults to 'CM' instance : '01' # needs to be adjusted client : '001' # needs to be adjusted abapPackage : 'YOURPACK' applicationName : 'YOURAPP' applicationDescription : 'Your application description' dockerImage : 'my/rfc-client' Upload via ODATA \u00b6 Jenkinsfile \u00b6 Following the convention for pipeline definitions, use a Jenkinsfile , which resides in the root directory of your development sources. @Library ( 'piper-lib-os' ) _ pipeline { agent any stages { stage ( \"prepare\" ) { steps { deleteDir () checkout scm setupCommonPipelineEnvironment script: this } } stage ( 'build' ) { steps { // It depends on your project, what needs to be done here. // Use the SAPUI5 toolset to build your SAPUI5 application // and run the build command of the npmExecuteScripts step. npmExecuteScripts ( script: this , runScripts: [ 'build' ]) } } // Get the transport request id from your git commit message. stage ( 'request' ) { steps { transportRequestReqIDFromGit ( script: this ) } } // This attaches the deployable to a transport request. // Note: ODATA/CTS does not support the mtaBuild tool. stage ( 'attach' ) { steps { transportRequestUploadCTS script: this ) } } } } Configuration ( .pipeline/config.yml ) \u00b6 This is a basic configuration example, which is also located in the sources of the project. steps : transportRequestUploadCTS : changeManagement : endpoint : 'http://your.odata.endpoint/' credentialsId : 'CTS' # The ID under which the credentials are provided on Jenkins defaults to 'CM' clientOpts : '' # additional java options, e.g. '-Djavax.net.ssl.trustStore=/path/to/truststore.jks' client : '001' abapPackage : 'YOURPACK' applicationName : 'YOURAPP' applicationDescription : 'Your description' Parameters \u00b6 For the detailed description of the relevant parameters, see: transportRequestUploadCTS transportRequestReqIDFromGit npmExecuteScripts","title":"Build an SAP Fiori Application and Attach It to a Transport Request on an ABAP System"},{"location":"scenarios/upload-to-transportrequest/Readme/#build-an-sap-fiori-application-and-attach-it-to-a-transport-request-on-an-abap-system","text":"Build an application based on SAPUI5 or SAP Fiori with Jenkins and attach the build result to a transport request in an SAP ABAP system. Generally, you can choose between two technical ways to attach a binary to an ABAP transport request: We support uploads through RFC and through OData. Which option to use depends on the version of your ABAP system. For AS ABAP 7.50 SP08, 7.51 SP07, or 7.52 SP03 and newer, use the OData-based upload, for older versions, use the RFC-based upload.","title":"Build an SAP Fiori Application and Attach It to a Transport Request on an ABAP System"},{"location":"scenarios/upload-to-transportrequest/Readme/#prerequisites","text":"You have set up your Docker environment . You have set up project \u201cPiper\u201d. See guided tour . You have a transport request. In General it is possible to create a transport request on the fly. But the example here is based on an already existing transport request. Depending on the version of the ABAP system: Docker image for attaching binaries to transport requests via RFC available. Due to legal reasons there is no pre-build docker image. How to create the docker image is explained here","title":"Prerequisites"},{"location":"scenarios/upload-to-transportrequest/Readme/#project-prerequisites","text":"This scenario requires additional files in your project and in the execution environment on your Jenkins instance. On the project level, provide and adjust the following template: File Name Description Position mta.yaml This file controls the behavior of the multitarget application (MTA) toolset. Place the mta.yaml file in your application root folder and adjust the values in brackets with your data. Depending on the modules in your MTA, additional configuration files are required, e.g. pom.xml or package.json .","title":"Project Prerequisites"},{"location":"scenarios/upload-to-transportrequest/Readme/#context","text":"This scenario combines various different steps to create a complete pipeline. In this scenario, we want to show how to build an application based on SAPUI5 or SAP Fiori by using the MTA concept and how to attach the build result to a transport request inside an ABAP system. This document comprises the mtaBuild step and the transportRequestUploadRFC respectively the transportRequestUploadCTS step. In case of an RFC based upload the binary is not streamed to the ABAP endpoint. Instead an URL pointing to the binary needs to be provided. Hence the binary must be published first so that it can be accessed via HTTP. This can happen by uploading the binary to a blob store or by archiving the artifact on Jenkins. The corresponding URL needs to be provided when the artifact is attached to the transport request. The transport request can be created on the fly (see transportRequestCreate ) or we can use an already existing transport request. In case we use an already existing transport request Id the transport request Id needs to be provided in the git commit history (see transportRequestReqIDFromGit ) or the transport request Id needs to be provided inside the job (e.g. as a job parameter). The transport request can be closed by the pipeline job (see transportRequestRelease ). This is an example of a Git commit message containing the transport request ID: The headline The body. The blank line above is mandatory (Git standard). TransportRequest: <YOUR TRANSPORT REQUEST ID> By default, the Git commits between the merge base with the base branch (default: master ) and the current branch head are traversed. Screenshot: Build and Deploy Process in Jenkins","title":"Context"},{"location":"scenarios/upload-to-transportrequest/Readme/#examples","text":"","title":"Examples"},{"location":"scenarios/upload-to-transportrequest/Readme/#upload-via-rfc","text":"","title":"Upload via RFC"},{"location":"scenarios/upload-to-transportrequest/Readme/#jenkinsfile","text":"Following the convention for pipeline definitions, use a Jenkinsfile , which resides in the root directory of your development sources. @Library ( 'piper-lib-os' ) _ pipeline { agent any stages { stage ( \"prepare\" ) { steps { deleteDir () checkout scm setupCommonPipelineEnvironment script: this } } stage ( 'build' ) { steps { // It depends on your project, what needs to be done here. Maybe it's sufficient to zip the sources mtaBuild script: this } } stage ( 'publish' ) { steps { // This uploads the binary into a blob store so that it can be attached to a transport request later sh \"curl --upload-file <deployable> <BLOB_STORE/path/to/application>\" // OR (in case there is no BLOB_STORE available) // This makes the artifact available on Nexus. The URL is the following: // <JENKINS_URL>/job/<JOB_NAME>/<BUILD_NUMBER>/artifact/<DEPLOYABLE>. Nota bene: this format is not an Jenkins API. // The build number can be retrieved during the build through ${currentBuild.number} archiveArtifacts artifacts: < deployable > } } // This attaches the deployable to a transport request stage ( 'attach' ) { steps { transportRequestUploadRFC script: this , transportRequestId: '<TRANSPORT_REQUEST_ID>' , // This can be omitted if present inside a Git commit message applicationUrl: '<THE_URL_TO_THE_DEPLOYABLE_ACCORDING_TO_PUBLISH_STAGE>' } } } }","title":"Jenkinsfile"},{"location":"scenarios/upload-to-transportrequest/Readme/#configuration-pipelineconfigyml","text":"This is a basic configuration example, which is also located in the sources of the project. steps : transportRequestUploadRFC : changeManagement : endpoint : 'https://your.rfc.endpoint.com/' # e.g. example.com' credentialsId : 'RFC' # The ID under which the credentials are provided on Jenkins defaults to 'CM' instance : '01' # needs to be adjusted client : '001' # needs to be adjusted abapPackage : 'YOURPACK' applicationName : 'YOURAPP' applicationDescription : 'Your application description' dockerImage : 'my/rfc-client'","title":"Configuration (.pipeline/config.yml)"},{"location":"scenarios/upload-to-transportrequest/Readme/#upload-via-odata","text":"","title":"Upload via ODATA"},{"location":"scenarios/upload-to-transportrequest/Readme/#jenkinsfile_1","text":"Following the convention for pipeline definitions, use a Jenkinsfile , which resides in the root directory of your development sources. @Library ( 'piper-lib-os' ) _ pipeline { agent any stages { stage ( \"prepare\" ) { steps { deleteDir () checkout scm setupCommonPipelineEnvironment script: this } } stage ( 'build' ) { steps { // It depends on your project, what needs to be done here. // Use the SAPUI5 toolset to build your SAPUI5 application // and run the build command of the npmExecuteScripts step. npmExecuteScripts ( script: this , runScripts: [ 'build' ]) } } // Get the transport request id from your git commit message. stage ( 'request' ) { steps { transportRequestReqIDFromGit ( script: this ) } } // This attaches the deployable to a transport request. // Note: ODATA/CTS does not support the mtaBuild tool. stage ( 'attach' ) { steps { transportRequestUploadCTS script: this ) } } } }","title":"Jenkinsfile"},{"location":"scenarios/upload-to-transportrequest/Readme/#configuration-pipelineconfigyml_1","text":"This is a basic configuration example, which is also located in the sources of the project. steps : transportRequestUploadCTS : changeManagement : endpoint : 'http://your.odata.endpoint/' credentialsId : 'CTS' # The ID under which the credentials are provided on Jenkins defaults to 'CM' clientOpts : '' # additional java options, e.g. '-Djavax.net.ssl.trustStore=/path/to/truststore.jks' client : '001' abapPackage : 'YOURPACK' applicationName : 'YOURAPP' applicationDescription : 'Your description'","title":"Configuration (.pipeline/config.yml)"},{"location":"scenarios/upload-to-transportrequest/Readme/#parameters","text":"For the detailed description of the relevant parameters, see: transportRequestUploadCTS transportRequestReqIDFromGit npmExecuteScripts","title":"Parameters"},{"location":"scenarios/xsa-deploy/Readme/","text":"Build and Deploy SAP Fiori Applications on SAP HANA Extended Application Services, Advanced Model \u00b6 Build an application based on SAPUI5 or SAP Fiori with Jenkins and deploy the build result to SAP HANA extended application services, advanced model. Prerequisites \u00b6 Docker environment All artifacts referenced during the build are available either on Service Market Place or via public repositories. You have set up project \u201cPiper\u201d. See guided tour . Docker image for xs deployment is locally available. Due to legal reasons, there is no pre-build Docker image. How to create the Docker image is explained here . Project Prerequisites \u00b6 This scenario requires additional files in your project and in the execution environment on your Jenkins instance. For details see: XSA developer quick start guide . Context \u00b6 This scenario combines various different steps to create a complete pipeline. In this scenario, we want to show how to build a multitarget application (MTA) and deploy the build result into an on-prem SAP HANA XS advances system. This document comprises the mtaBuild and the xsDeploy steps. Screenshot: Build and Deploy Process in Jenkins Example \u00b6 Jenkinsfile \u00b6 Following the convention for pipeline definitions, use a Jenkinsfile , which resides in the root directory of your development sources. @Library ( 'piper-lib-os' ) _ pipeline { agent any stages { stage ( \"prepare\" ) { steps { deleteDir () checkout scm setupCommonPipelineEnvironment script: this } } stage ( 'build' ) { steps { mtaBuild script: this } } stage ( 'deploy' ) { steps { xsDeploy script: this } } } } Configuration ( .pipeline/config.yml ) \u00b6 This is a basic configuration example, which is also located in the sources of the project. steps : mtaBuild : buildTarget : 'XSA' xsDeploy : apiUrl : '<API_URL>' # e.g. 'https://example.org:30030' # credentialsId: 'XS' omitted, 'XS' is the default docker : dockerImage : '<ID_OF_THE_DOCKER_IMAGE' # for legal reasons no docker image is provided. # dockerPullImage: true # default: 'false'. Needs to be set to 'true' in case the image is served from a docker registry loginOpts : '' # during setup for non-productive builds we might set here. '--skip-ssl-validation' org : '<ORG_NAME>' space : '<SPACE>' Configuration for the MTA Build \u00b6 Parameter Description buildTarget The target platform to which the mtar can be deployed. In this case, the target platform is XSA . Configuration for the Deployment to XSA \u00b6 Parameter Description credentialsId The Jenkins credentials that contain user and password required for the deployment on SAP BTP. mode DeployMode. See stepDocu for more details. org The org. See stepDocu for more details. space The space. See stepDocu for more details. Parameters \u00b6 For the detailed description of the relevant parameters, see: mtaBuild xsDeploy","title":"Build and Deploy SAP Fiori Applications on SAP HANA Extended Application Services, Advanced Model"},{"location":"scenarios/xsa-deploy/Readme/#build-and-deploy-sap-fiori-applications-on-sap-hana-extended-application-services-advanced-model","text":"Build an application based on SAPUI5 or SAP Fiori with Jenkins and deploy the build result to SAP HANA extended application services, advanced model.","title":"Build and Deploy SAP Fiori Applications on SAP HANA Extended Application Services, Advanced Model"},{"location":"scenarios/xsa-deploy/Readme/#prerequisites","text":"Docker environment All artifacts referenced during the build are available either on Service Market Place or via public repositories. You have set up project \u201cPiper\u201d. See guided tour . Docker image for xs deployment is locally available. Due to legal reasons, there is no pre-build Docker image. How to create the Docker image is explained here .","title":"Prerequisites"},{"location":"scenarios/xsa-deploy/Readme/#project-prerequisites","text":"This scenario requires additional files in your project and in the execution environment on your Jenkins instance. For details see: XSA developer quick start guide .","title":"Project Prerequisites"},{"location":"scenarios/xsa-deploy/Readme/#context","text":"This scenario combines various different steps to create a complete pipeline. In this scenario, we want to show how to build a multitarget application (MTA) and deploy the build result into an on-prem SAP HANA XS advances system. This document comprises the mtaBuild and the xsDeploy steps. Screenshot: Build and Deploy Process in Jenkins","title":"Context"},{"location":"scenarios/xsa-deploy/Readme/#example","text":"","title":"Example"},{"location":"scenarios/xsa-deploy/Readme/#jenkinsfile","text":"Following the convention for pipeline definitions, use a Jenkinsfile , which resides in the root directory of your development sources. @Library ( 'piper-lib-os' ) _ pipeline { agent any stages { stage ( \"prepare\" ) { steps { deleteDir () checkout scm setupCommonPipelineEnvironment script: this } } stage ( 'build' ) { steps { mtaBuild script: this } } stage ( 'deploy' ) { steps { xsDeploy script: this } } } }","title":"Jenkinsfile"},{"location":"scenarios/xsa-deploy/Readme/#configuration-pipelineconfigyml","text":"This is a basic configuration example, which is also located in the sources of the project. steps : mtaBuild : buildTarget : 'XSA' xsDeploy : apiUrl : '<API_URL>' # e.g. 'https://example.org:30030' # credentialsId: 'XS' omitted, 'XS' is the default docker : dockerImage : '<ID_OF_THE_DOCKER_IMAGE' # for legal reasons no docker image is provided. # dockerPullImage: true # default: 'false'. Needs to be set to 'true' in case the image is served from a docker registry loginOpts : '' # during setup for non-productive builds we might set here. '--skip-ssl-validation' org : '<ORG_NAME>' space : '<SPACE>'","title":"Configuration (.pipeline/config.yml)"},{"location":"scenarios/xsa-deploy/Readme/#configuration-for-the-mta-build","text":"Parameter Description buildTarget The target platform to which the mtar can be deployed. In this case, the target platform is XSA .","title":"Configuration for the MTA Build"},{"location":"scenarios/xsa-deploy/Readme/#configuration-for-the-deployment-to-xsa","text":"Parameter Description credentialsId The Jenkins credentials that contain user and password required for the deployment on SAP BTP. mode DeployMode. See stepDocu for more details. org The org. See stepDocu for more details. space The space. See stepDocu for more details.","title":"Configuration for the Deployment to XSA"},{"location":"scenarios/xsa-deploy/Readme/#parameters","text":"For the detailed description of the relevant parameters, see: mtaBuild xsDeploy","title":"Parameters"},{"location":"stages/acceptance/","text":"Acceptance \u00b6 In this stage the application/service is typically deployed and automated acceptance tests are executed. This is to make sure that new functionality is tested end-to-end there is no end-to-end regression in existing functionality Stage Content \u00b6 This stage comprises following steps which are activated depending on your use-case/configuration: step step description cloudFoundryDeploy For Cloud Foundry use-cases: Performs deployment to Cloud Foundry space/org. gaugeExecuteTests Performs behavior-driven tests using Gauge test framework against the deployed application/service. healthExecuteCheck Performs health check in order to prove one aspect of operational readiness. In order to be able to respond to health checks from infrastructure components (like load balancers) it is important to provide one unprotected application endpoint which allows a judgement about the health of your application. kubernetesDeploy For Kubernetes use-cases: Performs deployment to Kubernetes landscape. multicloudDeploy Can perform both deployments to cloud foundry and neo targets. Preferred over cloudFoundryDeploy and neoDeploy, if configured. neoDeploy For Neo use-cases: Performs deployment to Neo landscape. newmanExecute Performs API testing using Newman against the deployed application/service. npmExecuteEndToEndTests Executes end to end tests by running the npm script 'ci-e2e' defined in the project's package.json file. testsPublishResults Publishes test results to Jenkins. It will automatically be active in cases tests are executed. uiVeri5ExecuteTests Performs end-to-end UI testing using UIVeri5 test framework against the deployed application/service. Stage Activation \u00b6 This stage will be active if any one of the following conditions is met: Stage configuration in config.yml file contains entries for this stage. Any of the conditions are met which are explained in the section Step Activation . Step Activation \u00b6 For this stage no conditions are assigned to steps. Additional Stage Parameters \u00b6 name mandatory default possible values script yes script - The common script environment of the Jenkinsfile running. Typically the reference to the script calling the pipeline step is provided with the this parameter, as in script: this . This allows the function to access the commonPipelineEnvironment for retrieving, e.g. configuration parameters. Configuration of Additional Stage Parameters \u00b6 The stage parameters need to be defined in the section stages of config.yml file .","title":"Acceptance Stage"},{"location":"stages/acceptance/#acceptance","text":"In this stage the application/service is typically deployed and automated acceptance tests are executed. This is to make sure that new functionality is tested end-to-end there is no end-to-end regression in existing functionality","title":"Acceptance"},{"location":"stages/acceptance/#stage-content","text":"This stage comprises following steps which are activated depending on your use-case/configuration: step step description cloudFoundryDeploy For Cloud Foundry use-cases: Performs deployment to Cloud Foundry space/org. gaugeExecuteTests Performs behavior-driven tests using Gauge test framework against the deployed application/service. healthExecuteCheck Performs health check in order to prove one aspect of operational readiness. In order to be able to respond to health checks from infrastructure components (like load balancers) it is important to provide one unprotected application endpoint which allows a judgement about the health of your application. kubernetesDeploy For Kubernetes use-cases: Performs deployment to Kubernetes landscape. multicloudDeploy Can perform both deployments to cloud foundry and neo targets. Preferred over cloudFoundryDeploy and neoDeploy, if configured. neoDeploy For Neo use-cases: Performs deployment to Neo landscape. newmanExecute Performs API testing using Newman against the deployed application/service. npmExecuteEndToEndTests Executes end to end tests by running the npm script 'ci-e2e' defined in the project's package.json file. testsPublishResults Publishes test results to Jenkins. It will automatically be active in cases tests are executed. uiVeri5ExecuteTests Performs end-to-end UI testing using UIVeri5 test framework against the deployed application/service.","title":"Stage Content"},{"location":"stages/acceptance/#stage-activation","text":"This stage will be active if any one of the following conditions is met: Stage configuration in config.yml file contains entries for this stage. Any of the conditions are met which are explained in the section Step Activation .","title":"Stage Activation"},{"location":"stages/acceptance/#step-activation","text":"For this stage no conditions are assigned to steps.","title":"Step Activation"},{"location":"stages/acceptance/#additional-stage-parameters","text":"name mandatory default possible values script yes script - The common script environment of the Jenkinsfile running. Typically the reference to the script calling the pipeline step is provided with the this parameter, as in script: this . This allows the function to access the commonPipelineEnvironment for retrieving, e.g. configuration parameters.","title":"Additional Stage Parameters"},{"location":"stages/acceptance/#configuration-of-additional-stage-parameters","text":"The stage parameters need to be defined in the section stages of config.yml file .","title":"Configuration of Additional Stage Parameters"},{"location":"stages/additionalunittests/","text":"Additional Unit Tests \u00b6 In this stage unit tests, which can not or should not be executed in the central build environment, are executed. These are for example Karma(OPA5 & QUnit) tests. Stage Content \u00b6 This stage comprises following steps which are activated depending on your use-case/configuration: step step description batsExecuteTests Executes bats tests which are for example suitable for testing Docker images via a shell. karmaExecuteTests Executes karma tests which are for example suitable for OPA5 testing as well as QUnit testing of SAP UI5 apps. npmExecuteScripts Executes npm scripts to run frontend unit tests testsPublishResults Publishes test results to Jenkins. It will automatically be active in cases tests are executed. Stage Activation \u00b6 This stage will be active if any one of the following conditions is met: Stage configuration in config.yml file contains entries for this stage. Any of the conditions are met which are explained in the section Step Activation . Step Activation \u00b6 For this stage no conditions are assigned to steps. Additional Stage Parameters \u00b6 name mandatory default possible values script yes script - The common script environment of the Jenkinsfile running. Typically the reference to the script calling the pipeline step is provided with the this parameter, as in script: this . This allows the function to access the commonPipelineEnvironment for retrieving, e.g. configuration parameters. Configuration of Additional Stage Parameters \u00b6 The stage parameters need to be defined in the section stages of config.yml file .","title":"Additional Unit Test Stage"},{"location":"stages/additionalunittests/#additional-unit-tests","text":"In this stage unit tests, which can not or should not be executed in the central build environment, are executed. These are for example Karma(OPA5 & QUnit) tests.","title":"Additional Unit Tests"},{"location":"stages/additionalunittests/#stage-content","text":"This stage comprises following steps which are activated depending on your use-case/configuration: step step description batsExecuteTests Executes bats tests which are for example suitable for testing Docker images via a shell. karmaExecuteTests Executes karma tests which are for example suitable for OPA5 testing as well as QUnit testing of SAP UI5 apps. npmExecuteScripts Executes npm scripts to run frontend unit tests testsPublishResults Publishes test results to Jenkins. It will automatically be active in cases tests are executed.","title":"Stage Content"},{"location":"stages/additionalunittests/#stage-activation","text":"This stage will be active if any one of the following conditions is met: Stage configuration in config.yml file contains entries for this stage. Any of the conditions are met which are explained in the section Step Activation .","title":"Stage Activation"},{"location":"stages/additionalunittests/#step-activation","text":"For this stage no conditions are assigned to steps.","title":"Step Activation"},{"location":"stages/additionalunittests/#additional-stage-parameters","text":"name mandatory default possible values script yes script - The common script environment of the Jenkinsfile running. Typically the reference to the script calling the pipeline step is provided with the this parameter, as in script: this . This allows the function to access the commonPipelineEnvironment for retrieving, e.g. configuration parameters.","title":"Additional Stage Parameters"},{"location":"stages/additionalunittests/#configuration-of-additional-stage-parameters","text":"The stage parameters need to be defined in the section stages of config.yml file .","title":"Configuration of Additional Stage Parameters"},{"location":"stages/build/","text":"Build \u00b6 In this stage a build is executed which typically also executes tests and code checks. The type of build is defined using the configuration buildTool , see also step buildExecute Stage Content \u00b6 This stage comprises following steps which are activated depending on your use-case/configuration: step step description buildExecute Starts build execution. This is always being executed. checksPublishResults Publishes check results to Jenkins. It will always be active. mavenExecuteStaticCodeChecks Executes static code checks for Maven based projects. The plugins SpotBugs and PMD are used. npmExecuteLint Executes linting for npm projects. pipelineStashFilesAfterBuild Executes stashing of files after build execution.<br / Build results are stashed with stash name buildResult . Note: Please make sure that your build artifacts are contained here since this stash is the foundation for subsequent tests and checks, e.g. deployment to a test landscape. sonarExecuteScan Executes a Sonar scan. testsPublishResults Publishes test results to Jenkins. It will always be active. Stage Activation \u00b6 This stage will be active if any one of the following conditions is met: Stage configuration in config.yml file contains entries for this stage. Any of the conditions are met which are explained in the section Step Activation . Step Activation \u00b6 For this stage no conditions are assigned to steps. Additional Stage Parameters \u00b6 name mandatory default possible values script yes script - The common script environment of the Jenkinsfile running. Typically the reference to the script calling the pipeline step is provided with the this parameter, as in script: this . This allows the function to access the commonPipelineEnvironment for retrieving, e.g. configuration parameters. Configuration of Additional Stage Parameters \u00b6 The stage parameters need to be defined in the section stages of config.yml file .","title":"Build Stage"},{"location":"stages/build/#build","text":"In this stage a build is executed which typically also executes tests and code checks. The type of build is defined using the configuration buildTool , see also step buildExecute","title":"Build"},{"location":"stages/build/#stage-content","text":"This stage comprises following steps which are activated depending on your use-case/configuration: step step description buildExecute Starts build execution. This is always being executed. checksPublishResults Publishes check results to Jenkins. It will always be active. mavenExecuteStaticCodeChecks Executes static code checks for Maven based projects. The plugins SpotBugs and PMD are used. npmExecuteLint Executes linting for npm projects. pipelineStashFilesAfterBuild Executes stashing of files after build execution.<br / Build results are stashed with stash name buildResult . Note: Please make sure that your build artifacts are contained here since this stash is the foundation for subsequent tests and checks, e.g. deployment to a test landscape. sonarExecuteScan Executes a Sonar scan. testsPublishResults Publishes test results to Jenkins. It will always be active.","title":"Stage Content"},{"location":"stages/build/#stage-activation","text":"This stage will be active if any one of the following conditions is met: Stage configuration in config.yml file contains entries for this stage. Any of the conditions are met which are explained in the section Step Activation .","title":"Stage Activation"},{"location":"stages/build/#step-activation","text":"For this stage no conditions are assigned to steps.","title":"Step Activation"},{"location":"stages/build/#additional-stage-parameters","text":"name mandatory default possible values script yes script - The common script environment of the Jenkinsfile running. Typically the reference to the script calling the pipeline step is provided with the this parameter, as in script: this . This allows the function to access the commonPipelineEnvironment for retrieving, e.g. configuration parameters.","title":"Additional Stage Parameters"},{"location":"stages/build/#configuration-of-additional-stage-parameters","text":"The stage parameters need to be defined in the section stages of config.yml file .","title":"Configuration of Additional Stage Parameters"},{"location":"stages/compliance/","text":"Compliance \u00b6 In this stage important compliance-relevant checks will be conducted. The stage will execute a SonarQube scan, if the step sonarExecuteSan is configured. Stage Content \u00b6 This stage comprises following steps which are activated depending on your use-case/configuration: step step description sonarExecuteScan Executes a SonarQube scan Stage Activation \u00b6 This stage will be active if any one of the following conditions is met: Stage configuration in config.yml file contains entries for this stage. Any of the conditions are met which are explained in the section Step Activation . Step Activation \u00b6 For this stage no conditions are assigned to steps. Additional Stage Parameters \u00b6 name mandatory default possible values script yes script - The common script environment of the Jenkinsfile running. Typically the reference to the script calling the pipeline step is provided with the this parameter, as in script: this . This allows the function to access the commonPipelineEnvironment for retrieving, e.g. configuration parameters. Configuration of Additional Stage Parameters \u00b6 The stage parameters need to be defined in the section stages of config.yml file .","title":"Compliance"},{"location":"stages/compliance/#compliance","text":"In this stage important compliance-relevant checks will be conducted. The stage will execute a SonarQube scan, if the step sonarExecuteSan is configured.","title":"Compliance"},{"location":"stages/compliance/#stage-content","text":"This stage comprises following steps which are activated depending on your use-case/configuration: step step description sonarExecuteScan Executes a SonarQube scan","title":"Stage Content"},{"location":"stages/compliance/#stage-activation","text":"This stage will be active if any one of the following conditions is met: Stage configuration in config.yml file contains entries for this stage. Any of the conditions are met which are explained in the section Step Activation .","title":"Stage Activation"},{"location":"stages/compliance/#step-activation","text":"For this stage no conditions are assigned to steps.","title":"Step Activation"},{"location":"stages/compliance/#additional-stage-parameters","text":"name mandatory default possible values script yes script - The common script environment of the Jenkinsfile running. Typically the reference to the script calling the pipeline step is provided with the this parameter, as in script: this . This allows the function to access the commonPipelineEnvironment for retrieving, e.g. configuration parameters.","title":"Additional Stage Parameters"},{"location":"stages/compliance/#configuration-of-additional-stage-parameters","text":"The stage parameters need to be defined in the section stages of config.yml file .","title":"Configuration of Additional Stage Parameters"},{"location":"stages/confirm/","text":"Confirm \u00b6 In this stage a manual confirmation is requested before processing subsequent stages like Promote and Release . This stage will be active in two scenarios: - manual activation of this stage - in case of an 'UNSTABLE' build (even when manual confirmation is inactive) Stage Content \u00b6 This stage comprises following steps which are activated depending on your use-case/configuration: step step description Stage Activation \u00b6 This stage will be active if any one of the following conditions is met: Stage configuration in config.yml file contains entries for this stage. Any of the conditions are met which are explained in the section Step Activation . Step Activation \u00b6 For this stage no conditions are assigned to steps. Additional Stage Parameters \u00b6 name mandatory default possible values manualConfirmation no true true , false manualConfirmationMessage no Shall we proceed to Promote & Release? manualConfirmationTimeout no 720 script yes manualConfirmation - Specifies if a manual confirmation is active before running the Promote and Release stages of the pipeline. manualConfirmationMessage - Defines message displayed as default manual confirmation. Please note: only used in case pipeline is in state SUCCESSFUL manualConfirmationTimeout - Defines how many hours a manual confirmation is possible for a dedicated pipeline. script - The common script environment of the Jenkinsfile running. Typically the reference to the script calling the pipeline step is provided with the this parameter, as in script: this . This allows the function to access the commonPipelineEnvironment for retrieving, e.g. configuration parameters. Configuration of Additional Stage Parameters \u00b6 The stage parameters need to be defined in the section stages of config.yml file .","title":"Confirm Stage"},{"location":"stages/confirm/#confirm","text":"In this stage a manual confirmation is requested before processing subsequent stages like Promote and Release . This stage will be active in two scenarios: - manual activation of this stage - in case of an 'UNSTABLE' build (even when manual confirmation is inactive)","title":"Confirm"},{"location":"stages/confirm/#stage-content","text":"This stage comprises following steps which are activated depending on your use-case/configuration: step step description","title":"Stage Content"},{"location":"stages/confirm/#stage-activation","text":"This stage will be active if any one of the following conditions is met: Stage configuration in config.yml file contains entries for this stage. Any of the conditions are met which are explained in the section Step Activation .","title":"Stage Activation"},{"location":"stages/confirm/#step-activation","text":"For this stage no conditions are assigned to steps.","title":"Step Activation"},{"location":"stages/confirm/#additional-stage-parameters","text":"name mandatory default possible values manualConfirmation no true true , false manualConfirmationMessage no Shall we proceed to Promote & Release? manualConfirmationTimeout no 720 script yes manualConfirmation - Specifies if a manual confirmation is active before running the Promote and Release stages of the pipeline. manualConfirmationMessage - Defines message displayed as default manual confirmation. Please note: only used in case pipeline is in state SUCCESSFUL manualConfirmationTimeout - Defines how many hours a manual confirmation is possible for a dedicated pipeline. script - The common script environment of the Jenkinsfile running. Typically the reference to the script calling the pipeline step is provided with the this parameter, as in script: this . This allows the function to access the commonPipelineEnvironment for retrieving, e.g. configuration parameters.","title":"Additional Stage Parameters"},{"location":"stages/confirm/#configuration-of-additional-stage-parameters","text":"The stage parameters need to be defined in the section stages of config.yml file .","title":"Configuration of Additional Stage Parameters"},{"location":"stages/examples/","text":"Example Configurations \u00b6 This page shows you some pipeline configuration examples. As Jenkinsfile only following code is required: @Library('piper-lib') _ piperPipeline script: this Pure Pull-Request Voting \u00b6 .pipeline/config.yml: general : buildTool : 'npm' Using custom defaults \u00b6 It is possible to use custom defaults as indicated on the section about Configuration . In order to use a custom defaults only a simple extension to the Jenkinsfile is required: @Library(['piper-lib-os', 'myCustomLibrary']) _ piperPipeline script: this, customDefaults: ['myCustomDefaults.yml'] more examples to come \u00b6","title":"Examples"},{"location":"stages/examples/#example-configurations","text":"This page shows you some pipeline configuration examples. As Jenkinsfile only following code is required: @Library('piper-lib') _ piperPipeline script: this","title":"Example Configurations"},{"location":"stages/examples/#pure-pull-request-voting","text":".pipeline/config.yml: general : buildTool : 'npm'","title":"Pure Pull-Request Voting"},{"location":"stages/examples/#using-custom-defaults","text":"It is possible to use custom defaults as indicated on the section about Configuration . In order to use a custom defaults only a simple extension to the Jenkinsfile is required: @Library(['piper-lib-os', 'myCustomLibrary']) _ piperPipeline script: this, customDefaults: ['myCustomDefaults.yml']","title":"Using custom defaults"},{"location":"stages/examples/#more-examples-to-come","text":"","title":"more examples to come"},{"location":"stages/init/","text":"Init \u00b6 This stage initializes the pipeline run and prepares further execution. It will check out your repository and perform some steps to initialize your pipeline run. Stage Content \u00b6 This stage comprises following steps which are activated depending on your use-case/configuration: step step description artifactPrepareVersion Sets the build version. transportRequestReqIDFromGit Retrieve transport request from git commit history. Stage Activation \u00b6 This stage will be active if any one of the following conditions is met: Stage configuration in config.yml file contains entries for this stage. Any of the conditions are met which are explained in the section Step Activation . Step Activation \u00b6 For this stage no conditions are assigned to steps. Additional Stage Parameters \u00b6 name mandatory default possible values buildTool yes docker , kaniko , maven , mta, ``npm checkoutMap no configFile no containerMapResource no customDefaults no customDefaultsFromFiles no customStashSettings no inferBuildTool no inferProjectName no legacyConfigSettings no productiveBranch no master projectName no runArtifactVersioningOnPod no true , false scmInfo no script yes skipCheckout no true , false stageConfigResource no stashContent no stashSettings no useTechnicalStageNames no verbose no true , false buildTool - Defines the build tool used. checkoutMap - Provides a clone from the specified repository. This map contains attributes, such as, branches , extensions , userRemoteConfigs etc. Example: [$class: 'GitSCM', branches: [[name: <branch_to_be_cloned>]], userRemoteConfigs: [[credentialsId: <credential_to_access_repository>, url: <repository_url>]]] . configFile - Optional path to the pipeline configuration file defining project specific settings. containerMapResource - Defines the library resource containing the container map. customDefaults - Optional list of file names which will be extracted from library resources and which serve as source for default values for the pipeline configuration. These are merged with and override built-in defaults, with a parameter supplied by the last resource file taking precedence over the same parameter supplied in an earlier resource file or built-in default. customDefaultsFromFiles - Optional list of file paths or URLs which must point to YAML content. These work exactly like customDefaults , but from local or remote files instead of library resources. They are merged with and take precedence over customDefaults . customStashSettings - Works as the stashSettings parameter, but allows the use of a stash settings file that is not available as a library resource. inferBuildTool - Enable automatic inference of build tool (maven, npm, mta) based on existing project files. If this is set to true, it is not required to provide the buildTool parameter in the general section of the pipeline configuration. inferProjectName - Enables automatic inference from the build descriptor in case projectName is not configured. legacyConfigSettings - Defines the library resource containing the legacy configuration definition. productiveBranch - Defines the main branch for your pipeline. Typically this is the master branch, which does not need to be set explicitly. Only change this in exceptional cases to a fixed branch name. projectName - Name of the project, e.g. used for the name of lockable resources. runArtifactVersioningOnPod - Specify to execute artifact versioning in a kubernetes pod. scmInfo - The map returned from a Jenkins git checkout. Used to set the git information in the common pipeline environment. script - The common script environment of the Jenkinsfile running. Typically the reference to the script calling the pipeline step is provided with the this parameter, as in script: this . This allows the function to access the commonPipelineEnvironment for retrieving, e.g. configuration parameters. skipCheckout - Optional skip of checkout if checkout was done before this step already. stageConfigResource - Defines the library resource containing stage/step initialization settings. Those define conditions when certain steps/stages will be activated. Caution: changing the default will break the standard behavior of the pipeline - thus only relevant when including Init stage into custom pipelines! stashContent - Mandatory if you skip the checkout. Then you need to unstash your workspace to get the e.g. configuration. stashSettings - Defines the library resource containing the stash settings to be performed before and after each stage. Caution: changing the default will break the standard behavior of the pipeline - thus only relevant when including Init stage into custom pipelines! useTechnicalStageNames - Enables the use of technical stage names. verbose - Whether verbose output should be produced. Configuration of Additional Stage Parameters \u00b6 The stage parameters need to be defined in the section stages of config.yml file .","title":"Init Stage"},{"location":"stages/init/#init","text":"This stage initializes the pipeline run and prepares further execution. It will check out your repository and perform some steps to initialize your pipeline run.","title":"Init"},{"location":"stages/init/#stage-content","text":"This stage comprises following steps which are activated depending on your use-case/configuration: step step description artifactPrepareVersion Sets the build version. transportRequestReqIDFromGit Retrieve transport request from git commit history.","title":"Stage Content"},{"location":"stages/init/#stage-activation","text":"This stage will be active if any one of the following conditions is met: Stage configuration in config.yml file contains entries for this stage. Any of the conditions are met which are explained in the section Step Activation .","title":"Stage Activation"},{"location":"stages/init/#step-activation","text":"For this stage no conditions are assigned to steps.","title":"Step Activation"},{"location":"stages/init/#additional-stage-parameters","text":"name mandatory default possible values buildTool yes docker , kaniko , maven , mta, ``npm checkoutMap no configFile no containerMapResource no customDefaults no customDefaultsFromFiles no customStashSettings no inferBuildTool no inferProjectName no legacyConfigSettings no productiveBranch no master projectName no runArtifactVersioningOnPod no true , false scmInfo no script yes skipCheckout no true , false stageConfigResource no stashContent no stashSettings no useTechnicalStageNames no verbose no true , false buildTool - Defines the build tool used. checkoutMap - Provides a clone from the specified repository. This map contains attributes, such as, branches , extensions , userRemoteConfigs etc. Example: [$class: 'GitSCM', branches: [[name: <branch_to_be_cloned>]], userRemoteConfigs: [[credentialsId: <credential_to_access_repository>, url: <repository_url>]]] . configFile - Optional path to the pipeline configuration file defining project specific settings. containerMapResource - Defines the library resource containing the container map. customDefaults - Optional list of file names which will be extracted from library resources and which serve as source for default values for the pipeline configuration. These are merged with and override built-in defaults, with a parameter supplied by the last resource file taking precedence over the same parameter supplied in an earlier resource file or built-in default. customDefaultsFromFiles - Optional list of file paths or URLs which must point to YAML content. These work exactly like customDefaults , but from local or remote files instead of library resources. They are merged with and take precedence over customDefaults . customStashSettings - Works as the stashSettings parameter, but allows the use of a stash settings file that is not available as a library resource. inferBuildTool - Enable automatic inference of build tool (maven, npm, mta) based on existing project files. If this is set to true, it is not required to provide the buildTool parameter in the general section of the pipeline configuration. inferProjectName - Enables automatic inference from the build descriptor in case projectName is not configured. legacyConfigSettings - Defines the library resource containing the legacy configuration definition. productiveBranch - Defines the main branch for your pipeline. Typically this is the master branch, which does not need to be set explicitly. Only change this in exceptional cases to a fixed branch name. projectName - Name of the project, e.g. used for the name of lockable resources. runArtifactVersioningOnPod - Specify to execute artifact versioning in a kubernetes pod. scmInfo - The map returned from a Jenkins git checkout. Used to set the git information in the common pipeline environment. script - The common script environment of the Jenkinsfile running. Typically the reference to the script calling the pipeline step is provided with the this parameter, as in script: this . This allows the function to access the commonPipelineEnvironment for retrieving, e.g. configuration parameters. skipCheckout - Optional skip of checkout if checkout was done before this step already. stageConfigResource - Defines the library resource containing stage/step initialization settings. Those define conditions when certain steps/stages will be activated. Caution: changing the default will break the standard behavior of the pipeline - thus only relevant when including Init stage into custom pipelines! stashContent - Mandatory if you skip the checkout. Then you need to unstash your workspace to get the e.g. configuration. stashSettings - Defines the library resource containing the stash settings to be performed before and after each stage. Caution: changing the default will break the standard behavior of the pipeline - thus only relevant when including Init stage into custom pipelines! useTechnicalStageNames - Enables the use of technical stage names. verbose - Whether verbose output should be produced.","title":"Additional Stage Parameters"},{"location":"stages/init/#configuration-of-additional-stage-parameters","text":"The stage parameters need to be defined in the section stages of config.yml file .","title":"Configuration of Additional Stage Parameters"},{"location":"stages/integration/","text":"Integration \u00b6 The stage allows to execute project-specific integration tests. Typically, integration tests are very project-specific, thus they can be defined here using the stage extension mechanism . Stage Content \u00b6 This stage comprises following steps which are activated depending on your use-case/configuration: step step description mavenExecuteIntegration Runs backend integration tests via the Jacoco Maven-plugin npmExecuteScripts Runs npm scripts to run generic integration tests written on JavaScript testsPublishResults Publishes test results to Jenkins. It will automatically be active in cases tests are executed. Stage Activation \u00b6 This stage will be active if any one of the following conditions is met: Stage configuration in config.yml file contains entries for this stage. Any of the conditions are met which are explained in the section Step Activation . Step Activation \u00b6 For this stage no conditions are assigned to steps. Additional Stage Parameters \u00b6 name mandatory default possible values script yes script - The common script environment of the Jenkinsfile running. Typically the reference to the script calling the pipeline step is provided with the this parameter, as in script: this . This allows the function to access the commonPipelineEnvironment for retrieving, e.g. configuration parameters. Configuration of Additional Stage Parameters \u00b6 The stage parameters need to be defined in the section stages of config.yml file .","title":"Integration Stage"},{"location":"stages/integration/#integration","text":"The stage allows to execute project-specific integration tests. Typically, integration tests are very project-specific, thus they can be defined here using the stage extension mechanism .","title":"Integration"},{"location":"stages/integration/#stage-content","text":"This stage comprises following steps which are activated depending on your use-case/configuration: step step description mavenExecuteIntegration Runs backend integration tests via the Jacoco Maven-plugin npmExecuteScripts Runs npm scripts to run generic integration tests written on JavaScript testsPublishResults Publishes test results to Jenkins. It will automatically be active in cases tests are executed.","title":"Stage Content"},{"location":"stages/integration/#stage-activation","text":"This stage will be active if any one of the following conditions is met: Stage configuration in config.yml file contains entries for this stage. Any of the conditions are met which are explained in the section Step Activation .","title":"Stage Activation"},{"location":"stages/integration/#step-activation","text":"For this stage no conditions are assigned to steps.","title":"Step Activation"},{"location":"stages/integration/#additional-stage-parameters","text":"name mandatory default possible values script yes script - The common script environment of the Jenkinsfile running. Typically the reference to the script calling the pipeline step is provided with the this parameter, as in script: this . This allows the function to access the commonPipelineEnvironment for retrieving, e.g. configuration parameters.","title":"Additional Stage Parameters"},{"location":"stages/integration/#configuration-of-additional-stage-parameters","text":"The stage parameters need to be defined in the section stages of config.yml file .","title":"Configuration of Additional Stage Parameters"},{"location":"stages/introduction/","text":"Project \"Piper\" general purpose pipeline \u00b6 The pipeline consists of a sequence of stages where each contains a number of individual steps. First step: Pull Request Pipeline \u00b6 In order to validate pull-requests to your GitHub repository you need to perform two simple steps: 1. Create Pipeline configuration \u00b6 Create a file .pipeline/config.yml in your repository (typically in master branch) with the following content: general : buildTool : 'npm' buildTool Please make sure that you specify the correct build tool. Following are currently supported: docker kaniko maven mta npm If your build tool is not in the list you can still use further options as described for Pull-Request Voting Stage 2. Create Jenkinsfile \u00b6 Create a file called Jenkinsfile in the root of your repository (typically in master branch) with the following content: @Library ( 'piper-lib-os' ) _ piperPipeline script: this There is typically no need to further touch this file Using custom defaults It is possible to overwrite/extend the pipeline defaults with custom defaults. piperPipeline script: this, customDefaults: ['myCustomDefaults.yml'] You find more details about the custom defaults in the configuration section using dedicated versions It is possible to use a fixed version of the library using e.g. @Library('piper-lib-os@v1.222.0') _ Make sure to only use valid git tags as versions! Second step: Prepare pipeline for your main branch \u00b6 Extend your configuration to also contain git ssh credentials information. Your .pipeline/config.yml should then look like: general : buildTool : 'npm' gitSshKeyCredentialsId : 'credentials-id-in-jenkins' gitSshKeyCredentialsId The pointer to the Jenkins credentials containing your ssh private key is an important part of the pipeline run. The credentials are for example required to push automatic versioning information to your GitHub repository. Subsequent steps: Configure individual stages \u00b6 The stages of the pipeline can be configured individually. As a general rule of thumb, only stages with an existing configuration are executed. If no dedicated configuration is required for a step, the precence of relevant files in the repository trigger the step execution. This smart and context-aware way of configuration allows you an iterative approach to configuring the individual steps. The pipeline comprises following stages: Init \u00b6 This stage takes care that the pipeline is initialized correctly. It will for example: Check out the GitHub repository Set up the overall pipeline configuration and perform basic checks Identify which pipeline stages to execute based on the configuration and file patterns Perform automatic versioning of the software artifact in case the master branch pipeline is executed. You find details about this stage on Init Stage Details Pull-Request Voting \u00b6 This stage is responsible for validating pull-requests, see also above. You find further details about this stage on the page Pull-Request Voting . Build \u00b6 In this stage the build of the software artifact is performed. The build artifact will be stash ed for use in subsequent stages. For Docker builds the build result will be uploaded to a container registry (as per your configuration). Afterwards the results of static checks & unit tests are published on the Jenkins. You find details about this stage on the page Build . Additional Unit Tests \u00b6 In this stage additional unit-like tests are executed which should not run during the build. Currently, this stage holds the execution of a Karma runner which allows for qUnit tests OPA5 (One Page Acceptance tests) for SAPUI5 You find details about this stage on the page Additional Unit Tests . Integration \u00b6 The Integration stage allows to run test based on maven, npm, or a custom integration test script. If more flexibility is required, consider using the stage extension mechanism . You find details about this stage on the page Integration . Acceptance \u00b6 In this stage the application/service is typically deployed and automated acceptance tests are executed. This is to make sure that new functionality is tested end-to-end there is no end-to-end regression in existing functionality You find details about this stage on the page Acceptance . Security \u00b6 This stage can run security checks using Checkmarx, Black Duck Detect, Fortify and WhiteSource. You find details about this stage on the page Security . Performance \u00b6 The stage will execute a Gatling test, if the step gatlingExecuteTests is configured. You find details about this stage on the page Performance . Compliance \u00b6 The stage will execute a SonarQube scan, if the step sonarExecuteSan is configured. You find details about this stage on the page Compliance . Confirm \u00b6 The Confirm stage , if executed, stops the pipeline execution and asks for manual confirmation before proceeding to the stages Promote and Release . Promote \u00b6 This stage is responsible to promote build artifacts to an artifact repository / container registry where they can be used from production deployments. You find details about this stage on the page Promote . Release \u00b6 This stage is responsible to release/deploy artifacts into your productive landscape. You find details about this stage on the page Release .","title":"Introduction"},{"location":"stages/introduction/#project-piper-general-purpose-pipeline","text":"The pipeline consists of a sequence of stages where each contains a number of individual steps.","title":"Project \"Piper\" general purpose pipeline"},{"location":"stages/introduction/#first-step-pull-request-pipeline","text":"In order to validate pull-requests to your GitHub repository you need to perform two simple steps:","title":"First step: Pull Request Pipeline"},{"location":"stages/introduction/#1-create-pipeline-configuration","text":"Create a file .pipeline/config.yml in your repository (typically in master branch) with the following content: general : buildTool : 'npm' buildTool Please make sure that you specify the correct build tool. Following are currently supported: docker kaniko maven mta npm If your build tool is not in the list you can still use further options as described for Pull-Request Voting Stage","title":"1. Create Pipeline configuration"},{"location":"stages/introduction/#2-create-jenkinsfile","text":"Create a file called Jenkinsfile in the root of your repository (typically in master branch) with the following content: @Library ( 'piper-lib-os' ) _ piperPipeline script: this There is typically no need to further touch this file Using custom defaults It is possible to overwrite/extend the pipeline defaults with custom defaults. piperPipeline script: this, customDefaults: ['myCustomDefaults.yml'] You find more details about the custom defaults in the configuration section using dedicated versions It is possible to use a fixed version of the library using e.g. @Library('piper-lib-os@v1.222.0') _ Make sure to only use valid git tags as versions!","title":"2. Create Jenkinsfile"},{"location":"stages/introduction/#second-step-prepare-pipeline-for-your-main-branch","text":"Extend your configuration to also contain git ssh credentials information. Your .pipeline/config.yml should then look like: general : buildTool : 'npm' gitSshKeyCredentialsId : 'credentials-id-in-jenkins' gitSshKeyCredentialsId The pointer to the Jenkins credentials containing your ssh private key is an important part of the pipeline run. The credentials are for example required to push automatic versioning information to your GitHub repository.","title":"Second step: Prepare pipeline for your main branch"},{"location":"stages/introduction/#subsequent-steps-configure-individual-stages","text":"The stages of the pipeline can be configured individually. As a general rule of thumb, only stages with an existing configuration are executed. If no dedicated configuration is required for a step, the precence of relevant files in the repository trigger the step execution. This smart and context-aware way of configuration allows you an iterative approach to configuring the individual steps. The pipeline comprises following stages:","title":"Subsequent steps: Configure individual stages"},{"location":"stages/introduction/#init","text":"This stage takes care that the pipeline is initialized correctly. It will for example: Check out the GitHub repository Set up the overall pipeline configuration and perform basic checks Identify which pipeline stages to execute based on the configuration and file patterns Perform automatic versioning of the software artifact in case the master branch pipeline is executed. You find details about this stage on Init Stage Details","title":"Init"},{"location":"stages/introduction/#pull-request-voting","text":"This stage is responsible for validating pull-requests, see also above. You find further details about this stage on the page Pull-Request Voting .","title":"Pull-Request Voting"},{"location":"stages/introduction/#build","text":"In this stage the build of the software artifact is performed. The build artifact will be stash ed for use in subsequent stages. For Docker builds the build result will be uploaded to a container registry (as per your configuration). Afterwards the results of static checks & unit tests are published on the Jenkins. You find details about this stage on the page Build .","title":"Build"},{"location":"stages/introduction/#additional-unit-tests","text":"In this stage additional unit-like tests are executed which should not run during the build. Currently, this stage holds the execution of a Karma runner which allows for qUnit tests OPA5 (One Page Acceptance tests) for SAPUI5 You find details about this stage on the page Additional Unit Tests .","title":"Additional Unit Tests"},{"location":"stages/introduction/#integration","text":"The Integration stage allows to run test based on maven, npm, or a custom integration test script. If more flexibility is required, consider using the stage extension mechanism . You find details about this stage on the page Integration .","title":"Integration"},{"location":"stages/introduction/#acceptance","text":"In this stage the application/service is typically deployed and automated acceptance tests are executed. This is to make sure that new functionality is tested end-to-end there is no end-to-end regression in existing functionality You find details about this stage on the page Acceptance .","title":"Acceptance"},{"location":"stages/introduction/#security","text":"This stage can run security checks using Checkmarx, Black Duck Detect, Fortify and WhiteSource. You find details about this stage on the page Security .","title":"Security"},{"location":"stages/introduction/#performance","text":"The stage will execute a Gatling test, if the step gatlingExecuteTests is configured. You find details about this stage on the page Performance .","title":"Performance"},{"location":"stages/introduction/#compliance","text":"The stage will execute a SonarQube scan, if the step sonarExecuteSan is configured. You find details about this stage on the page Compliance .","title":"Compliance"},{"location":"stages/introduction/#confirm","text":"The Confirm stage , if executed, stops the pipeline execution and asks for manual confirmation before proceeding to the stages Promote and Release .","title":"Confirm"},{"location":"stages/introduction/#promote","text":"This stage is responsible to promote build artifacts to an artifact repository / container registry where they can be used from production deployments. You find details about this stage on the page Promote .","title":"Promote"},{"location":"stages/introduction/#release","text":"This stage is responsible to release/deploy artifacts into your productive landscape. You find details about this stage on the page Release .","title":"Release"},{"location":"stages/performance/","text":"Performance \u00b6 In this stage important performance-relevant checks will be conducted. The stage will execute a Gatling test, if the step gatlingExecuteTests is configured. Stage Content \u00b6 This stage comprises following steps which are activated depending on your use-case/configuration: step step description gatlingExecuteTests Executes Gatling performance tests multicloudDeploy Can perform both to cloud foundry and neo targets. Preferred over cloudFoundryDeploy and neoDeploy, if configured. Stage Activation \u00b6 This stage will be active if any one of the following conditions is met: Stage configuration in config.yml file contains entries for this stage. Any of the conditions are met which are explained in the section Step Activation . Step Activation \u00b6 For this stage no conditions are assigned to steps. Additional Stage Parameters \u00b6 name mandatory default possible values script yes script - The common script environment of the Jenkinsfile running. Typically the reference to the script calling the pipeline step is provided with the this parameter, as in script: this . This allows the function to access the commonPipelineEnvironment for retrieving, e.g. configuration parameters. Configuration of Additional Stage Parameters \u00b6 The stage parameters need to be defined in the section stages of config.yml file .","title":"Performance Stage"},{"location":"stages/performance/#performance","text":"In this stage important performance-relevant checks will be conducted. The stage will execute a Gatling test, if the step gatlingExecuteTests is configured.","title":"Performance"},{"location":"stages/performance/#stage-content","text":"This stage comprises following steps which are activated depending on your use-case/configuration: step step description gatlingExecuteTests Executes Gatling performance tests multicloudDeploy Can perform both to cloud foundry and neo targets. Preferred over cloudFoundryDeploy and neoDeploy, if configured.","title":"Stage Content"},{"location":"stages/performance/#stage-activation","text":"This stage will be active if any one of the following conditions is met: Stage configuration in config.yml file contains entries for this stage. Any of the conditions are met which are explained in the section Step Activation .","title":"Stage Activation"},{"location":"stages/performance/#step-activation","text":"For this stage no conditions are assigned to steps.","title":"Step Activation"},{"location":"stages/performance/#additional-stage-parameters","text":"name mandatory default possible values script yes script - The common script environment of the Jenkinsfile running. Typically the reference to the script calling the pipeline step is provided with the this parameter, as in script: this . This allows the function to access the commonPipelineEnvironment for retrieving, e.g. configuration parameters.","title":"Additional Stage Parameters"},{"location":"stages/performance/#configuration-of-additional-stage-parameters","text":"The stage parameters need to be defined in the section stages of config.yml file .","title":"Configuration of Additional Stage Parameters"},{"location":"stages/promote/","text":"Promote \u00b6 This stage is responsible to promote build artifacts to an artifact repository / container registry where they can be used from in production deployments. Stage Content \u00b6 This stage comprises following steps which are activated depending on your use-case/configuration: step step description containerPushToRegistry For Docker builds: pushes the Docker image to a container registry. nexusUpload For Maven/MTA builds: uploads artifacts to a Nexus repository manager. Stage Activation \u00b6 This stage will be active if any one of the following conditions is met: Stage configuration in config.yml file contains entries for this stage. Any of the conditions are met which are explained in the section Step Activation . Step Activation \u00b6 For this stage no conditions are assigned to steps. Additional Stage Parameters \u00b6 name mandatory default possible values script yes script - The common script environment of the Jenkinsfile running. Typically the reference to the script calling the pipeline step is provided with the this parameter, as in script: this . This allows the function to access the commonPipelineEnvironment for retrieving, e.g. configuration parameters. Configuration of Additional Stage Parameters \u00b6 The stage parameters need to be defined in the section stages of config.yml file .","title":"Promote Stage"},{"location":"stages/promote/#promote","text":"This stage is responsible to promote build artifacts to an artifact repository / container registry where they can be used from in production deployments.","title":"Promote"},{"location":"stages/promote/#stage-content","text":"This stage comprises following steps which are activated depending on your use-case/configuration: step step description containerPushToRegistry For Docker builds: pushes the Docker image to a container registry. nexusUpload For Maven/MTA builds: uploads artifacts to a Nexus repository manager.","title":"Stage Content"},{"location":"stages/promote/#stage-activation","text":"This stage will be active if any one of the following conditions is met: Stage configuration in config.yml file contains entries for this stage. Any of the conditions are met which are explained in the section Step Activation .","title":"Stage Activation"},{"location":"stages/promote/#step-activation","text":"For this stage no conditions are assigned to steps.","title":"Step Activation"},{"location":"stages/promote/#additional-stage-parameters","text":"name mandatory default possible values script yes script - The common script environment of the Jenkinsfile running. Typically the reference to the script calling the pipeline step is provided with the this parameter, as in script: this . This allows the function to access the commonPipelineEnvironment for retrieving, e.g. configuration parameters.","title":"Additional Stage Parameters"},{"location":"stages/promote/#configuration-of-additional-stage-parameters","text":"The stage parameters need to be defined in the section stages of config.yml file .","title":"Configuration of Additional Stage Parameters"},{"location":"stages/prvoting/","text":"Pull-Request Voting \u00b6 This stage is executed for every pull-request. For non-Docker builds it will execute the respective build (including unit tests, static checks, ...). Build Tool not in the list? For build tools which are currently not in the list a custom dockerImage can be used with a custom dockerCommand as per step buildExecute For buildTool: docker a local Docker build will be executed in case a Docker deamon is available, if not buildTool: 'kaniko' will be used instead. Advanced Pull-Request Voting \u00b6 It is possible to trigger dedicated tests/checks pull request comments pull request labels Following steps are currently supported step name comment pull-request label karmaExecuteTests /piper karma pr_karma whitesourceExecuteScan /piper whitesource pr_whitesource Stage Content \u00b6 This stage comprises following steps which are activated depending on your use-case/configuration: step step description buildExecute Triggers the build execution. checksPublishResults Publishes check results to Jenkins. It will always be active. karmaExecuteTests Executes karma tests. For example suitable for OPA5 testing as well as QUnit testing of SAP UI5 apps. This step is not active by default. It can be activated by: * using pull request comments or pull request lables (see Advanced Pull-Request Voting . * explicit activation via stage configuration. mavenExecuteIntegration Runs backend integration tests via maven in the module integration-tests/pom.xml mavenExecuteStaticCodeChecks Executes static code checks for Maven based projects. The plugins SpotBugs and PMD are used. npmExecuteLint Executes linting for npm projects. npmExecuteScripts Executes npm scripts to run frontend unit tests. If custom names for the npm scripts are configured via the runScripts parameter the step npmExecuteScripts needs explicit activation via stage configuration . sonarExecuteScan Executes a Sonar scan. testsPublishResults Publishes test results to Jenkins. It will always be active. whitesourceExecuteScan Executes a WhiteSource scan This step is not active by default. It can be activated by: * using pull request comments or pull request lables (see Advanced Pull-Request Voting . * explicit activation via stage configuration. Stage Activation \u00b6 This stage will be active if any one of the following conditions is met: Stage configuration in config.yml file contains entries for this stage. Any of the conditions are met which are explained in the section Step Activation . Step Activation \u00b6 For this stage no conditions are assigned to steps. Additional Stage Parameters \u00b6 name mandatory default possible values buildTool no docker , kaniko , maven , mta , npm script yes buildTool - Defines the build tool used. script - The common script environment of the Jenkinsfile running. Typically the reference to the script calling the pipeline step is provided with the this parameter, as in script: this . This allows the function to access the commonPipelineEnvironment for retrieving, e.g. configuration parameters. Configuration of Additional Stage Parameters \u00b6 The stage parameters need to be defined in the section stages of config.yml file .","title":"Pull-Request Voting Stage"},{"location":"stages/prvoting/#pull-request-voting","text":"This stage is executed for every pull-request. For non-Docker builds it will execute the respective build (including unit tests, static checks, ...). Build Tool not in the list? For build tools which are currently not in the list a custom dockerImage can be used with a custom dockerCommand as per step buildExecute For buildTool: docker a local Docker build will be executed in case a Docker deamon is available, if not buildTool: 'kaniko' will be used instead.","title":"Pull-Request Voting"},{"location":"stages/prvoting/#advanced-pull-request-voting","text":"It is possible to trigger dedicated tests/checks pull request comments pull request labels Following steps are currently supported step name comment pull-request label karmaExecuteTests /piper karma pr_karma whitesourceExecuteScan /piper whitesource pr_whitesource","title":"Advanced Pull-Request Voting"},{"location":"stages/prvoting/#stage-content","text":"This stage comprises following steps which are activated depending on your use-case/configuration: step step description buildExecute Triggers the build execution. checksPublishResults Publishes check results to Jenkins. It will always be active. karmaExecuteTests Executes karma tests. For example suitable for OPA5 testing as well as QUnit testing of SAP UI5 apps. This step is not active by default. It can be activated by: * using pull request comments or pull request lables (see Advanced Pull-Request Voting . * explicit activation via stage configuration. mavenExecuteIntegration Runs backend integration tests via maven in the module integration-tests/pom.xml mavenExecuteStaticCodeChecks Executes static code checks for Maven based projects. The plugins SpotBugs and PMD are used. npmExecuteLint Executes linting for npm projects. npmExecuteScripts Executes npm scripts to run frontend unit tests. If custom names for the npm scripts are configured via the runScripts parameter the step npmExecuteScripts needs explicit activation via stage configuration . sonarExecuteScan Executes a Sonar scan. testsPublishResults Publishes test results to Jenkins. It will always be active. whitesourceExecuteScan Executes a WhiteSource scan This step is not active by default. It can be activated by: * using pull request comments or pull request lables (see Advanced Pull-Request Voting . * explicit activation via stage configuration.","title":"Stage Content"},{"location":"stages/prvoting/#stage-activation","text":"This stage will be active if any one of the following conditions is met: Stage configuration in config.yml file contains entries for this stage. Any of the conditions are met which are explained in the section Step Activation .","title":"Stage Activation"},{"location":"stages/prvoting/#step-activation","text":"For this stage no conditions are assigned to steps.","title":"Step Activation"},{"location":"stages/prvoting/#additional-stage-parameters","text":"name mandatory default possible values buildTool no docker , kaniko , maven , mta , npm script yes buildTool - Defines the build tool used. script - The common script environment of the Jenkinsfile running. Typically the reference to the script calling the pipeline step is provided with the this parameter, as in script: this . This allows the function to access the commonPipelineEnvironment for retrieving, e.g. configuration parameters.","title":"Additional Stage Parameters"},{"location":"stages/prvoting/#configuration-of-additional-stage-parameters","text":"The stage parameters need to be defined in the section stages of config.yml file .","title":"Configuration of Additional Stage Parameters"},{"location":"stages/release/","text":"Release \u00b6 This stage is responsible to release/deploy artifacts into your productive landscape. Stage Content \u00b6 This stage comprises following steps which are activated depending on your use-case/configuration: step step description cloudFoundryDeploy For Cloud Foundry use-cases: Performs deployment to Cloud Foundry space/org. githubPublishRelease Publishes release information to GitHub. healthExecuteCheck Performs health check in order to prove that deployment was successful. kubernetesDeploy For Kubernetes use-cases: Performs deployment to Kubernetes landscape. multicloudDeploy Can perform both to cloud foundry and neo targets. Preferred over cloudFoundryDeploy and neoDeploy, if configured. neoDeploy For Neo use-cases: Performs deployment to Neo landscape. npmExecuteEndToEndTests Executes smoke tests by running the npm script 'ci-smoke' defined in the project's package.json file. tmsExport For TMS use-cases: Performs export to Transport Management Service node tmsUpload For TMS use-cases: Performs upload to Transport Management Service node transportRequestUploadCTS This step uploads SAPUI5 application to the SAPUI5 ABAP repository. Stage Activation \u00b6 This stage will be active if any one of the following conditions is met: Stage configuration in config.yml file contains entries for this stage. Any of the conditions are met which are explained in the section Step Activation . Step Activation \u00b6 For this stage no conditions are assigned to steps. Additional Stage Parameters \u00b6 name mandatory default possible values script yes script - The common script environment of the Jenkinsfile running. Typically the reference to the script calling the pipeline step is provided with the this parameter, as in script: this . This allows the function to access the commonPipelineEnvironment for retrieving, e.g. configuration parameters. Configuration of Additional Stage Parameters \u00b6 The stage parameters need to be defined in the section stages of config.yml file .","title":"Release Stage"},{"location":"stages/release/#release","text":"This stage is responsible to release/deploy artifacts into your productive landscape.","title":"Release"},{"location":"stages/release/#stage-content","text":"This stage comprises following steps which are activated depending on your use-case/configuration: step step description cloudFoundryDeploy For Cloud Foundry use-cases: Performs deployment to Cloud Foundry space/org. githubPublishRelease Publishes release information to GitHub. healthExecuteCheck Performs health check in order to prove that deployment was successful. kubernetesDeploy For Kubernetes use-cases: Performs deployment to Kubernetes landscape. multicloudDeploy Can perform both to cloud foundry and neo targets. Preferred over cloudFoundryDeploy and neoDeploy, if configured. neoDeploy For Neo use-cases: Performs deployment to Neo landscape. npmExecuteEndToEndTests Executes smoke tests by running the npm script 'ci-smoke' defined in the project's package.json file. tmsExport For TMS use-cases: Performs export to Transport Management Service node tmsUpload For TMS use-cases: Performs upload to Transport Management Service node transportRequestUploadCTS This step uploads SAPUI5 application to the SAPUI5 ABAP repository.","title":"Stage Content"},{"location":"stages/release/#stage-activation","text":"This stage will be active if any one of the following conditions is met: Stage configuration in config.yml file contains entries for this stage. Any of the conditions are met which are explained in the section Step Activation .","title":"Stage Activation"},{"location":"stages/release/#step-activation","text":"For this stage no conditions are assigned to steps.","title":"Step Activation"},{"location":"stages/release/#additional-stage-parameters","text":"name mandatory default possible values script yes script - The common script environment of the Jenkinsfile running. Typically the reference to the script calling the pipeline step is provided with the this parameter, as in script: this . This allows the function to access the commonPipelineEnvironment for retrieving, e.g. configuration parameters.","title":"Additional Stage Parameters"},{"location":"stages/release/#configuration-of-additional-stage-parameters","text":"The stage parameters need to be defined in the section stages of config.yml file .","title":"Configuration of Additional Stage Parameters"},{"location":"stages/security/","text":"Security \u00b6 In this stage important security-relevant checks will be conducted. This is to achieve a decent level of security for your application. Stage Content \u00b6 This stage comprises following steps which are activated depending on your use-case/configuration: step step description checkmarxExecuteScan Executes a Checkmarx scan detectExecuteScan Executes BlackDuck Detect scans fortifyExecuteScan Executes a Fortify scan whitesourceExecuteScan Executes a WhiteSource scan Stage Activation \u00b6 This stage will be active if any one of the following conditions is met: Stage configuration in config.yml file contains entries for this stage. Any of the conditions are met which are explained in the section Step Activation . Step Activation \u00b6 For this stage no conditions are assigned to steps. Additional Stage Parameters \u00b6 name mandatory default possible values script yes script - The common script environment of the Jenkinsfile running. Typically the reference to the script calling the pipeline step is provided with the this parameter, as in script: this . This allows the function to access the commonPipelineEnvironment for retrieving, e.g. configuration parameters. Configuration of Additional Stage Parameters \u00b6 The stage parameters need to be defined in the section stages of config.yml file .","title":"Security Stage"},{"location":"stages/security/#security","text":"In this stage important security-relevant checks will be conducted. This is to achieve a decent level of security for your application.","title":"Security"},{"location":"stages/security/#stage-content","text":"This stage comprises following steps which are activated depending on your use-case/configuration: step step description checkmarxExecuteScan Executes a Checkmarx scan detectExecuteScan Executes BlackDuck Detect scans fortifyExecuteScan Executes a Fortify scan whitesourceExecuteScan Executes a WhiteSource scan","title":"Stage Content"},{"location":"stages/security/#stage-activation","text":"This stage will be active if any one of the following conditions is met: Stage configuration in config.yml file contains entries for this stage. Any of the conditions are met which are explained in the section Step Activation .","title":"Stage Activation"},{"location":"stages/security/#step-activation","text":"For this stage no conditions are assigned to steps.","title":"Step Activation"},{"location":"stages/security/#additional-stage-parameters","text":"name mandatory default possible values script yes script - The common script environment of the Jenkinsfile running. Typically the reference to the script calling the pipeline step is provided with the this parameter, as in script: this . This allows the function to access the commonPipelineEnvironment for retrieving, e.g. configuration parameters.","title":"Additional Stage Parameters"},{"location":"stages/security/#configuration-of-additional-stage-parameters","text":"The stage parameters need to be defined in the section stages of config.yml file .","title":"Configuration of Additional Stage Parameters"},{"location":"steps/abapAddonAssemblyKitCheck/","text":"abapAddonAssemblyKitCheck \u00b6 This step calls AAKaaS to check the validity of the Addon Product Modelling. Description \u00b6 The Addon Product Modelling is read from the addonDescriptorFileName (e.g. addon.yml). A connection to AAKaaS (Addon Assembly Kit as a Service) is established and the Addon Product Modelling is transfered for detailed checks . The semantic versions are resolved and stored into the piper commonPipelineEnviroment for usage in subsequent pipeline steps. For logon to AAKaaS you can either provide a credential with basic authorization (username and password) or two secret text credentials containing the technical s-users certificate (see note 2805811 for download) as base64 encoded string and the password to decrypt the file For Terminology refer to the Scenario Description . Usage \u00b6 We recommend to define values of step parameters via .pipeline/config.yml file . In this case, calling the step is essentially reduced to defining the step name. Calling the step can be done either in an orchestrator specific way (e.g. via a Jenkins library step) or on the command line. Jenkins Command Line library ( 'piper-lib-os' ) abapAddonAssemblyKitCheck script: this piper abapAddonAssemblyKitCheck Outputs \u00b6 Output type Details commonPipelineEnvironment abap/addonDescriptor Artifacts \u00b6 addonDescriptorFile (addon.yml) The addonDescriptorFile as specified in parameter addonDescriptorFileName is archived as artifact. This is done as this file is the main configuration and usually changed with every run. Thus it simplifies support if the corresponding configuration file is directly accessible in the pipeline. Prerequisites \u00b6 The credentials to access the AAKaaS (Technical Communication User) must be stored in the Jenkins Credential Store The step needs an addon.yml containing information about the Product Version and corresponding Software Component Versions/Repositories A detailed description of all prerequisites of the scenario and how to configure them can be found in the Scenario Description . Parameters \u00b6 Overview - Step \u00b6 Name Mandatory Additional information script (yes) reference to Jenkins main pipeline script abapAddonAssemblyKitCertificateFile no pass via ENV or Jenkins credentials ( abapAddonAssemblyKitCertificateFileCredentialsId ) abapAddonAssemblyKitCertificatePass no pass via ENV or Jenkins credentials ( abapAddonAssemblyKitCertificatePassCredentialsId ) abapAddonAssemblyKitEndpoint no abapAddonAssemblyKitOriginHash no pass via ENV or Jenkins credentials addonDescriptor no addonDescriptorFileName no password no pass via ENV or Jenkins credentials username no pass via ENV or Jenkins credentials verbose no activates debug output Overview - Execution Environment \u00b6 Orchestrator-specific only These parameters are relevant for orchestrator usage and not considered when using the command line option. Name Mandatory Additional information Details \u00b6 abapAddonAssemblyKitCertificateFile \u00b6 base64 encoded certificate pfx file (PKCS12 format) see note 2805811 back to overview Scope Details Aliases - Type string Mandatory no Default $PIPER_abapAddonAssemblyKitCertificateFile (if set) Secret yes Configuration scope \u2612 parameter \u2610 general \u2610 steps \u2610 stages Resource references Jenkins credential id: id: abapAddonAssemblyKitCertificateFileCredentialsId reference to: abapAddonAssemblyKitCertificateFile abapAddonAssemblyKitCertificatePass \u00b6 password to decrypt the certificate file back to overview Scope Details Aliases - Type string Mandatory no Default $PIPER_abapAddonAssemblyKitCertificatePass (if set) Secret yes Configuration scope \u2612 parameter \u2610 general \u2610 steps \u2610 stages Resource references Jenkins credential id: id: abapAddonAssemblyKitCertificatePassCredentialsId reference to: abapAddonAssemblyKitCertificatePass abapAddonAssemblyKitEndpoint \u00b6 Base URL to the Addon Assembly Kit as a Service (AAKaaS) system back to overview Scope Details Aliases - Type string Mandatory no Default https://apps.support.sap.com Secret no Configuration scope \u2612 parameter \u2612 general \u2612 steps \u2612 stages Resource references none abapAddonAssemblyKitOriginHash \u00b6 Origin Hash for restricted AAKaaS scenarios back to overview Scope Details Aliases - Type string Mandatory no Default $PIPER_abapAddonAssemblyKitOriginHash (if set) Secret yes Configuration scope \u2612 parameter \u2610 general \u2610 steps \u2610 stages Resource references none addonDescriptor \u00b6 Structure in the commonPipelineEnvironment containing information about the Product Version and corresponding Software Component Versions back to overview Scope Details Aliases - Type string Mandatory no Default $PIPER_addonDescriptor (if set) Secret no Configuration scope \u2612 parameter \u2610 general \u2612 steps \u2612 stages Resource references commonPipelineEnvironment : reference to: abap/addonDescriptor addonDescriptorFileName \u00b6 File name of the YAML file which describes the Product Version and corresponding Software Component Versions back to overview Scope Details Aliases - Type string Mandatory no Default addon.yml Secret no Configuration scope \u2612 parameter \u2612 general \u2612 steps \u2612 stages Resource references none password \u00b6 Password for the Addon Assembly Kit as a Service (AAKaaS) system back to overview Scope Details Aliases - Type string Mandatory no Default $PIPER_password (if set) Secret yes Configuration scope \u2612 parameter \u2610 general \u2610 steps \u2610 stages Resource references none script \u00b6 The common script environment of the Jenkinsfile running. Typically the reference to the script calling the pipeline step is provided with the this parameter, as in script: this . This allows the function to access the commonPipelineEnvironment for retrieving, e.g. configuration parameters. back to overview Scope Details Aliases - Type Jenkins Script Mandatory yes Default Secret no Configuration scope \u2610 parameter \u2610 general \u2610 steps \u2610 stages Resource references none username \u00b6 User for the Addon Assembly Kit as a Service (AAKaaS) system back to overview Scope Details Aliases - Type string Mandatory no Default $PIPER_username (if set) Secret yes Configuration scope \u2612 parameter \u2610 general \u2612 steps \u2612 stages Resource references none verbose \u00b6 verbose output back to overview Scope Details Aliases - Type bool Mandatory no Default false Possible values - true - false Secret no Configuration scope \u2612 parameter \u2612 general \u2612 steps \u2612 stages Resource references none abapAddonAssemblyKitCredentialsId \u00b6 CredentialsId stored in Jenkins for the Addon Assembly Kit as a Service (AAKaaS) system back to overview Scope Details Aliases - Type string Configuration scope \u2612 parameter \u2612 general \u2612 steps \u2612 stages abapAddonAssemblyKitCertificateFileCredentialsId \u00b6 Jenkins secret text credential ID containing the base64 encoded certificate pfx file (PKCS12 format) see note 2805811 back to overview Scope Details Aliases - Type string Configuration scope \u2612 parameter \u2612 general \u2612 steps \u2612 stages abapAddonAssemblyKitCertificatePassCredentialsId \u00b6 Jenkins secret text credential ID containing the password to decrypt the certificate file stored in abapAddonAssemblyKitCertificateFileCredentialsId back to overview Scope Details Aliases - Type string Configuration scope \u2612 parameter \u2612 general \u2612 steps \u2612 stages Examples \u00b6 Configuration in the config.yml \u00b6 The recommended way to configure your pipeline is via the config.yml file. In this case, calling the step in the Jenkinsfile is reduced to one line: abapAddonAssemblyKitCheck script: this If the step is to be configured individually the config.yml should look like this: steps : abapAddonAssemblyKitCheck : abapAddonAssemblyKitCredentialsId : 'abapAddonAssemblyKitCredentialsId' , addonDescriptorFileName : 'addon.yml' More convenient ways of configuration (e.g. on stage level) are described in the respective scenario/pipeline documentation.","title":"Check"},{"location":"steps/abapAddonAssemblyKitCheck/#abapaddonassemblykitcheck","text":"This step calls AAKaaS to check the validity of the Addon Product Modelling.","title":"abapAddonAssemblyKitCheck"},{"location":"steps/abapAddonAssemblyKitCheck/#description","text":"The Addon Product Modelling is read from the addonDescriptorFileName (e.g. addon.yml). A connection to AAKaaS (Addon Assembly Kit as a Service) is established and the Addon Product Modelling is transfered for detailed checks . The semantic versions are resolved and stored into the piper commonPipelineEnviroment for usage in subsequent pipeline steps. For logon to AAKaaS you can either provide a credential with basic authorization (username and password) or two secret text credentials containing the technical s-users certificate (see note 2805811 for download) as base64 encoded string and the password to decrypt the file For Terminology refer to the Scenario Description .","title":"Description"},{"location":"steps/abapAddonAssemblyKitCheck/#usage","text":"We recommend to define values of step parameters via .pipeline/config.yml file . In this case, calling the step is essentially reduced to defining the step name. Calling the step can be done either in an orchestrator specific way (e.g. via a Jenkins library step) or on the command line. Jenkins Command Line library ( 'piper-lib-os' ) abapAddonAssemblyKitCheck script: this piper abapAddonAssemblyKitCheck","title":"Usage"},{"location":"steps/abapAddonAssemblyKitCheck/#outputs","text":"Output type Details commonPipelineEnvironment abap/addonDescriptor","title":"Outputs"},{"location":"steps/abapAddonAssemblyKitCheck/#artifacts","text":"addonDescriptorFile (addon.yml) The addonDescriptorFile as specified in parameter addonDescriptorFileName is archived as artifact. This is done as this file is the main configuration and usually changed with every run. Thus it simplifies support if the corresponding configuration file is directly accessible in the pipeline.","title":"Artifacts"},{"location":"steps/abapAddonAssemblyKitCheck/#prerequisites","text":"The credentials to access the AAKaaS (Technical Communication User) must be stored in the Jenkins Credential Store The step needs an addon.yml containing information about the Product Version and corresponding Software Component Versions/Repositories A detailed description of all prerequisites of the scenario and how to configure them can be found in the Scenario Description .","title":"Prerequisites"},{"location":"steps/abapAddonAssemblyKitCheck/#parameters","text":"","title":"Parameters"},{"location":"steps/abapAddonAssemblyKitCheck/#overview-step","text":"Name Mandatory Additional information script (yes) reference to Jenkins main pipeline script abapAddonAssemblyKitCertificateFile no pass via ENV or Jenkins credentials ( abapAddonAssemblyKitCertificateFileCredentialsId ) abapAddonAssemblyKitCertificatePass no pass via ENV or Jenkins credentials ( abapAddonAssemblyKitCertificatePassCredentialsId ) abapAddonAssemblyKitEndpoint no abapAddonAssemblyKitOriginHash no pass via ENV or Jenkins credentials addonDescriptor no addonDescriptorFileName no password no pass via ENV or Jenkins credentials username no pass via ENV or Jenkins credentials verbose no activates debug output","title":"Overview - Step"},{"location":"steps/abapAddonAssemblyKitCheck/#overview-execution-environment","text":"Orchestrator-specific only These parameters are relevant for orchestrator usage and not considered when using the command line option. Name Mandatory Additional information","title":"Overview - Execution Environment"},{"location":"steps/abapAddonAssemblyKitCheck/#details","text":"","title":"Details"},{"location":"steps/abapAddonAssemblyKitCheck/#abapaddonassemblykitcertificatefile","text":"base64 encoded certificate pfx file (PKCS12 format) see note 2805811 back to overview Scope Details Aliases - Type string Mandatory no Default $PIPER_abapAddonAssemblyKitCertificateFile (if set) Secret yes Configuration scope \u2612 parameter \u2610 general \u2610 steps \u2610 stages Resource references Jenkins credential id: id: abapAddonAssemblyKitCertificateFileCredentialsId reference to: abapAddonAssemblyKitCertificateFile","title":"abapAddonAssemblyKitCertificateFile"},{"location":"steps/abapAddonAssemblyKitCheck/#abapaddonassemblykitcertificatepass","text":"password to decrypt the certificate file back to overview Scope Details Aliases - Type string Mandatory no Default $PIPER_abapAddonAssemblyKitCertificatePass (if set) Secret yes Configuration scope \u2612 parameter \u2610 general \u2610 steps \u2610 stages Resource references Jenkins credential id: id: abapAddonAssemblyKitCertificatePassCredentialsId reference to: abapAddonAssemblyKitCertificatePass","title":"abapAddonAssemblyKitCertificatePass"},{"location":"steps/abapAddonAssemblyKitCheck/#abapaddonassemblykitendpoint","text":"Base URL to the Addon Assembly Kit as a Service (AAKaaS) system back to overview Scope Details Aliases - Type string Mandatory no Default https://apps.support.sap.com Secret no Configuration scope \u2612 parameter \u2612 general \u2612 steps \u2612 stages Resource references none","title":"abapAddonAssemblyKitEndpoint"},{"location":"steps/abapAddonAssemblyKitCheck/#abapaddonassemblykitoriginhash","text":"Origin Hash for restricted AAKaaS scenarios back to overview Scope Details Aliases - Type string Mandatory no Default $PIPER_abapAddonAssemblyKitOriginHash (if set) Secret yes Configuration scope \u2612 parameter \u2610 general \u2610 steps \u2610 stages Resource references none","title":"abapAddonAssemblyKitOriginHash"},{"location":"steps/abapAddonAssemblyKitCheck/#addondescriptor","text":"Structure in the commonPipelineEnvironment containing information about the Product Version and corresponding Software Component Versions back to overview Scope Details Aliases - Type string Mandatory no Default $PIPER_addonDescriptor (if set) Secret no Configuration scope \u2612 parameter \u2610 general \u2612 steps \u2612 stages Resource references commonPipelineEnvironment : reference to: abap/addonDescriptor","title":"addonDescriptor"},{"location":"steps/abapAddonAssemblyKitCheck/#addondescriptorfilename","text":"File name of the YAML file which describes the Product Version and corresponding Software Component Versions back to overview Scope Details Aliases - Type string Mandatory no Default addon.yml Secret no Configuration scope \u2612 parameter \u2612 general \u2612 steps \u2612 stages Resource references none","title":"addonDescriptorFileName"},{"location":"steps/abapAddonAssemblyKitCheck/#password","text":"Password for the Addon Assembly Kit as a Service (AAKaaS) system back to overview Scope Details Aliases - Type string Mandatory no Default $PIPER_password (if set) Secret yes Configuration scope \u2612 parameter \u2610 general \u2610 steps \u2610 stages Resource references none","title":"password"},{"location":"steps/abapAddonAssemblyKitCheck/#script","text":"The common script environment of the Jenkinsfile running. Typically the reference to the script calling the pipeline step is provided with the this parameter, as in script: this . This allows the function to access the commonPipelineEnvironment for retrieving, e.g. configuration parameters. back to overview Scope Details Aliases - Type Jenkins Script Mandatory yes Default Secret no Configuration scope \u2610 parameter \u2610 general \u2610 steps \u2610 stages Resource references none","title":"script"},{"location":"steps/abapAddonAssemblyKitCheck/#username","text":"User for the Addon Assembly Kit as a Service (AAKaaS) system back to overview Scope Details Aliases - Type string Mandatory no Default $PIPER_username (if set) Secret yes Configuration scope \u2612 parameter \u2610 general \u2612 steps \u2612 stages Resource references none","title":"username"},{"location":"steps/abapAddonAssemblyKitCheck/#verbose","text":"verbose output back to overview Scope Details Aliases - Type bool Mandatory no Default false Possible values - true - false Secret no Configuration scope \u2612 parameter \u2612 general \u2612 steps \u2612 stages Resource references none","title":"verbose"},{"location":"steps/abapAddonAssemblyKitCheck/#abapaddonassemblykitcredentialsid","text":"CredentialsId stored in Jenkins for the Addon Assembly Kit as a Service (AAKaaS) system back to overview Scope Details Aliases - Type string Configuration scope \u2612 parameter \u2612 general \u2612 steps \u2612 stages","title":"abapAddonAssemblyKitCredentialsId"},{"location":"steps/abapAddonAssemblyKitCheck/#abapaddonassemblykitcertificatefilecredentialsid","text":"Jenkins secret text credential ID containing the base64 encoded certificate pfx file (PKCS12 format) see note 2805811 back to overview Scope Details Aliases - Type string Configuration scope \u2612 parameter \u2612 general \u2612 steps \u2612 stages","title":"abapAddonAssemblyKitCertificateFileCredentialsId"},{"location":"steps/abapAddonAssemblyKitCheck/#abapaddonassemblykitcertificatepasscredentialsid","text":"Jenkins secret text credential ID containing the password to decrypt the certificate file stored in abapAddonAssemblyKitCertificateFileCredentialsId back to overview Scope Details Aliases - Type string Configuration scope \u2612 parameter \u2612 general \u2612 steps \u2612 stages","title":"abapAddonAssemblyKitCertificatePassCredentialsId"},{"location":"steps/abapAddonAssemblyKitCheck/#examples","text":"","title":"Examples"},{"location":"steps/abapAddonAssemblyKitCheck/#configuration-in-the-configyml","text":"The recommended way to configure your pipeline is via the config.yml file. In this case, calling the step in the Jenkinsfile is reduced to one line: abapAddonAssemblyKitCheck script: this If the step is to be configured individually the config.yml should look like this: steps : abapAddonAssemblyKitCheck : abapAddonAssemblyKitCredentialsId : 'abapAddonAssemblyKitCredentialsId' , addonDescriptorFileName : 'addon.yml' More convenient ways of configuration (e.g. on stage level) are described in the respective scenario/pipeline documentation.","title":"Configuration in the config.yml"},{"location":"steps/abapAddonAssemblyKitCheckCVs/","text":"abapAddonAssemblyKitCheckCVs \u00b6 This step checks the validity of ABAP Software Component Versions. Description \u00b6 This steps takes the list of ABAP Software Component Versions(repositories) from the addonDescriptor configuration file specified via addonDescriptorFileName (e.g. addon.yml) and checks by calling AAKaaS whether they exist or are a valid successor of an existing Software Component Version. It resolves the dotted version string into version, support package level and patch level and writes it to the addonDescriptor structure in the Piper commonPipelineEnvironment for usage of subsequent pipeline steps. For logon you can either provide a credential with basic authorization (username and password) or two secret text credentials containing the technical s-users certificate (see note 2805811 for download) as base64 encoded string and the password to decrypt the file For Terminology refer to the Scenario Description . Usage \u00b6 We recommend to define values of step parameters via .pipeline/config.yml file . In this case, calling the step is essentially reduced to defining the step name. Calling the step can be done either in an orchestrator specific way (e.g. via a Jenkins library step) or on the command line. Jenkins Command Line library ( 'piper-lib-os' ) abapAddonAssemblyKitCheckCVs script: this piper abapAddonAssemblyKitCheckCVs Outputs \u00b6 Output type Details commonPipelineEnvironment abap/addonDescriptor Prerequisites \u00b6 The credentials to access the AAKaaS (Technical Communication User) must be stored in the Jenkins Credential Store The step needs an addon.yml containing information about the Product Version and corresponding Software Component Versions/Repositories A detailed description of all prerequisites of the scenario and how to configure them can be found in the Scenario Description . Parameters \u00b6 Overview - Step \u00b6 Name Mandatory Additional information script (yes) reference to Jenkins main pipeline script abapAddonAssemblyKitCertificateFile no pass via ENV or Jenkins credentials ( abapAddonAssemblyKitCertificateFileCredentialsId ) abapAddonAssemblyKitCertificatePass no pass via ENV or Jenkins credentials ( abapAddonAssemblyKitCertificatePassCredentialsId ) abapAddonAssemblyKitEndpoint no addonDescriptor no addonDescriptorFileName no password no pass via ENV or Jenkins credentials username no pass via ENV or Jenkins credentials verbose no activates debug output Overview - Execution Environment \u00b6 Orchestrator-specific only These parameters are relevant for orchestrator usage and not considered when using the command line option. Name Mandatory Additional information Details \u00b6 abapAddonAssemblyKitCertificateFile \u00b6 base64 encoded certificate pfx file (PKCS12 format) see note 2805811 back to overview Scope Details Aliases - Type string Mandatory no Default $PIPER_abapAddonAssemblyKitCertificateFile (if set) Secret yes Configuration scope \u2612 parameter \u2610 general \u2610 steps \u2610 stages Resource references Jenkins credential id: id: abapAddonAssemblyKitCertificateFileCredentialsId reference to: abapAddonAssemblyKitCertificateFile abapAddonAssemblyKitCertificatePass \u00b6 password to decrypt the certificate file back to overview Scope Details Aliases - Type string Mandatory no Default $PIPER_abapAddonAssemblyKitCertificatePass (if set) Secret yes Configuration scope \u2612 parameter \u2610 general \u2610 steps \u2610 stages Resource references Jenkins credential id: id: abapAddonAssemblyKitCertificatePassCredentialsId reference to: abapAddonAssemblyKitCertificatePass abapAddonAssemblyKitEndpoint \u00b6 Base URL to the Addon Assembly Kit as a Service (AAKaaS) system back to overview Scope Details Aliases - Type string Mandatory no Default https://apps.support.sap.com Secret no Configuration scope \u2612 parameter \u2612 general \u2612 steps \u2612 stages Resource references none addonDescriptor \u00b6 Structure in the commonPipelineEnvironment containing information about the Product Version and corresponding Software Component Versions back to overview Scope Details Aliases - Type string Mandatory no Default $PIPER_addonDescriptor (if set) Secret no Configuration scope \u2612 parameter \u2610 general \u2612 steps \u2612 stages Resource references commonPipelineEnvironment : reference to: abap/addonDescriptor addonDescriptorFileName \u00b6 File name of the YAML file which describes the Product Version and corresponding Software Component Versions back to overview Scope Details Aliases - Type string Mandatory no Default addon.yml Secret no Configuration scope \u2612 parameter \u2612 general \u2612 steps \u2612 stages Resource references none password \u00b6 Password for the Addon Assembly Kit as a Service (AAKaaS) system back to overview Scope Details Aliases - Type string Mandatory no Default $PIPER_password (if set) Secret yes Configuration scope \u2612 parameter \u2610 general \u2610 steps \u2610 stages Resource references none script \u00b6 The common script environment of the Jenkinsfile running. Typically the reference to the script calling the pipeline step is provided with the this parameter, as in script: this . This allows the function to access the commonPipelineEnvironment for retrieving, e.g. configuration parameters. back to overview Scope Details Aliases - Type Jenkins Script Mandatory yes Default Secret no Configuration scope \u2610 parameter \u2610 general \u2610 steps \u2610 stages Resource references none username \u00b6 User for the Addon Assembly Kit as a Service (AAKaaS) system back to overview Scope Details Aliases - Type string Mandatory no Default $PIPER_username (if set) Secret yes Configuration scope \u2612 parameter \u2610 general \u2612 steps \u2612 stages Resource references none verbose \u00b6 verbose output back to overview Scope Details Aliases - Type bool Mandatory no Default false Possible values - true - false Secret no Configuration scope \u2612 parameter \u2612 general \u2612 steps \u2612 stages Resource references none abapAddonAssemblyKitCredentialsId \u00b6 CredentialsId stored in Jenkins for the Addon Assembly Kit as a Service (AAKaaS) system back to overview Scope Details Aliases - Type string Configuration scope \u2612 parameter \u2612 general \u2612 steps \u2612 stages abapAddonAssemblyKitCertificateFileCredentialsId \u00b6 Jenkins secret text credential ID containing the base64 encoded certificate pfx file (PKCS12 format) see note 2805811 back to overview Scope Details Aliases - Type string Configuration scope \u2612 parameter \u2612 general \u2612 steps \u2612 stages abapAddonAssemblyKitCertificatePassCredentialsId \u00b6 Jenkins secret text credential ID containing the password to decrypt the certificate file stored in abapAddonAssemblyKitCertificateFileCredentialsId back to overview Scope Details Aliases - Type string Configuration scope \u2612 parameter \u2612 general \u2612 steps \u2612 stages Examples \u00b6 Configuration in the config.yml \u00b6 The recommended way to configure your pipeline is via the config.yml file. In this case, calling the step in the Jenkinsfile is reduced to one line: abapAddonAssemblyKitCheckPV script: this If the step is to be configured individually the config.yml should look like this: steps : abapAddonAssemblyKitCheckCVs : abapAddonAssemblyKitCredentialsId : 'abapAddonAssemblyKitCredentialsId' , addonDescriptorFileName : 'addon.yml' More convenient ways of configuration (e.g. on stage level) are described in the respective scenario/pipeline documentation.","title":"CheckCVs"},{"location":"steps/abapAddonAssemblyKitCheckCVs/#abapaddonassemblykitcheckcvs","text":"This step checks the validity of ABAP Software Component Versions.","title":"abapAddonAssemblyKitCheckCVs"},{"location":"steps/abapAddonAssemblyKitCheckCVs/#description","text":"This steps takes the list of ABAP Software Component Versions(repositories) from the addonDescriptor configuration file specified via addonDescriptorFileName (e.g. addon.yml) and checks by calling AAKaaS whether they exist or are a valid successor of an existing Software Component Version. It resolves the dotted version string into version, support package level and patch level and writes it to the addonDescriptor structure in the Piper commonPipelineEnvironment for usage of subsequent pipeline steps. For logon you can either provide a credential with basic authorization (username and password) or two secret text credentials containing the technical s-users certificate (see note 2805811 for download) as base64 encoded string and the password to decrypt the file For Terminology refer to the Scenario Description .","title":"Description"},{"location":"steps/abapAddonAssemblyKitCheckCVs/#usage","text":"We recommend to define values of step parameters via .pipeline/config.yml file . In this case, calling the step is essentially reduced to defining the step name. Calling the step can be done either in an orchestrator specific way (e.g. via a Jenkins library step) or on the command line. Jenkins Command Line library ( 'piper-lib-os' ) abapAddonAssemblyKitCheckCVs script: this piper abapAddonAssemblyKitCheckCVs","title":"Usage"},{"location":"steps/abapAddonAssemblyKitCheckCVs/#outputs","text":"Output type Details commonPipelineEnvironment abap/addonDescriptor","title":"Outputs"},{"location":"steps/abapAddonAssemblyKitCheckCVs/#prerequisites","text":"The credentials to access the AAKaaS (Technical Communication User) must be stored in the Jenkins Credential Store The step needs an addon.yml containing information about the Product Version and corresponding Software Component Versions/Repositories A detailed description of all prerequisites of the scenario and how to configure them can be found in the Scenario Description .","title":"Prerequisites"},{"location":"steps/abapAddonAssemblyKitCheckCVs/#parameters","text":"","title":"Parameters"},{"location":"steps/abapAddonAssemblyKitCheckCVs/#overview-step","text":"Name Mandatory Additional information script (yes) reference to Jenkins main pipeline script abapAddonAssemblyKitCertificateFile no pass via ENV or Jenkins credentials ( abapAddonAssemblyKitCertificateFileCredentialsId ) abapAddonAssemblyKitCertificatePass no pass via ENV or Jenkins credentials ( abapAddonAssemblyKitCertificatePassCredentialsId ) abapAddonAssemblyKitEndpoint no addonDescriptor no addonDescriptorFileName no password no pass via ENV or Jenkins credentials username no pass via ENV or Jenkins credentials verbose no activates debug output","title":"Overview - Step"},{"location":"steps/abapAddonAssemblyKitCheckCVs/#overview-execution-environment","text":"Orchestrator-specific only These parameters are relevant for orchestrator usage and not considered when using the command line option. Name Mandatory Additional information","title":"Overview - Execution Environment"},{"location":"steps/abapAddonAssemblyKitCheckCVs/#details","text":"","title":"Details"},{"location":"steps/abapAddonAssemblyKitCheckCVs/#abapaddonassemblykitcertificatefile","text":"base64 encoded certificate pfx file (PKCS12 format) see note 2805811 back to overview Scope Details Aliases - Type string Mandatory no Default $PIPER_abapAddonAssemblyKitCertificateFile (if set) Secret yes Configuration scope \u2612 parameter \u2610 general \u2610 steps \u2610 stages Resource references Jenkins credential id: id: abapAddonAssemblyKitCertificateFileCredentialsId reference to: abapAddonAssemblyKitCertificateFile","title":"abapAddonAssemblyKitCertificateFile"},{"location":"steps/abapAddonAssemblyKitCheckCVs/#abapaddonassemblykitcertificatepass","text":"password to decrypt the certificate file back to overview Scope Details Aliases - Type string Mandatory no Default $PIPER_abapAddonAssemblyKitCertificatePass (if set) Secret yes Configuration scope \u2612 parameter \u2610 general \u2610 steps \u2610 stages Resource references Jenkins credential id: id: abapAddonAssemblyKitCertificatePassCredentialsId reference to: abapAddonAssemblyKitCertificatePass","title":"abapAddonAssemblyKitCertificatePass"},{"location":"steps/abapAddonAssemblyKitCheckCVs/#abapaddonassemblykitendpoint","text":"Base URL to the Addon Assembly Kit as a Service (AAKaaS) system back to overview Scope Details Aliases - Type string Mandatory no Default https://apps.support.sap.com Secret no Configuration scope \u2612 parameter \u2612 general \u2612 steps \u2612 stages Resource references none","title":"abapAddonAssemblyKitEndpoint"},{"location":"steps/abapAddonAssemblyKitCheckCVs/#addondescriptor","text":"Structure in the commonPipelineEnvironment containing information about the Product Version and corresponding Software Component Versions back to overview Scope Details Aliases - Type string Mandatory no Default $PIPER_addonDescriptor (if set) Secret no Configuration scope \u2612 parameter \u2610 general \u2612 steps \u2612 stages Resource references commonPipelineEnvironment : reference to: abap/addonDescriptor","title":"addonDescriptor"},{"location":"steps/abapAddonAssemblyKitCheckCVs/#addondescriptorfilename","text":"File name of the YAML file which describes the Product Version and corresponding Software Component Versions back to overview Scope Details Aliases - Type string Mandatory no Default addon.yml Secret no Configuration scope \u2612 parameter \u2612 general \u2612 steps \u2612 stages Resource references none","title":"addonDescriptorFileName"},{"location":"steps/abapAddonAssemblyKitCheckCVs/#password","text":"Password for the Addon Assembly Kit as a Service (AAKaaS) system back to overview Scope Details Aliases - Type string Mandatory no Default $PIPER_password (if set) Secret yes Configuration scope \u2612 parameter \u2610 general \u2610 steps \u2610 stages Resource references none","title":"password"},{"location":"steps/abapAddonAssemblyKitCheckCVs/#script","text":"The common script environment of the Jenkinsfile running. Typically the reference to the script calling the pipeline step is provided with the this parameter, as in script: this . This allows the function to access the commonPipelineEnvironment for retrieving, e.g. configuration parameters. back to overview Scope Details Aliases - Type Jenkins Script Mandatory yes Default Secret no Configuration scope \u2610 parameter \u2610 general \u2610 steps \u2610 stages Resource references none","title":"script"},{"location":"steps/abapAddonAssemblyKitCheckCVs/#username","text":"User for the Addon Assembly Kit as a Service (AAKaaS) system back to overview Scope Details Aliases - Type string Mandatory no Default $PIPER_username (if set) Secret yes Configuration scope \u2612 parameter \u2610 general \u2612 steps \u2612 stages Resource references none","title":"username"},{"location":"steps/abapAddonAssemblyKitCheckCVs/#verbose","text":"verbose output back to overview Scope Details Aliases - Type bool Mandatory no Default false Possible values - true - false Secret no Configuration scope \u2612 parameter \u2612 general \u2612 steps \u2612 stages Resource references none","title":"verbose"},{"location":"steps/abapAddonAssemblyKitCheckCVs/#abapaddonassemblykitcredentialsid","text":"CredentialsId stored in Jenkins for the Addon Assembly Kit as a Service (AAKaaS) system back to overview Scope Details Aliases - Type string Configuration scope \u2612 parameter \u2612 general \u2612 steps \u2612 stages","title":"abapAddonAssemblyKitCredentialsId"},{"location":"steps/abapAddonAssemblyKitCheckCVs/#abapaddonassemblykitcertificatefilecredentialsid","text":"Jenkins secret text credential ID containing the base64 encoded certificate pfx file (PKCS12 format) see note 2805811 back to overview Scope Details Aliases - Type string Configuration scope \u2612 parameter \u2612 general \u2612 steps \u2612 stages","title":"abapAddonAssemblyKitCertificateFileCredentialsId"},{"location":"steps/abapAddonAssemblyKitCheckCVs/#abapaddonassemblykitcertificatepasscredentialsid","text":"Jenkins secret text credential ID containing the password to decrypt the certificate file stored in abapAddonAssemblyKitCertificateFileCredentialsId back to overview Scope Details Aliases - Type string Configuration scope \u2612 parameter \u2612 general \u2612 steps \u2612 stages","title":"abapAddonAssemblyKitCertificatePassCredentialsId"},{"location":"steps/abapAddonAssemblyKitCheckCVs/#examples","text":"","title":"Examples"},{"location":"steps/abapAddonAssemblyKitCheckCVs/#configuration-in-the-configyml","text":"The recommended way to configure your pipeline is via the config.yml file. In this case, calling the step in the Jenkinsfile is reduced to one line: abapAddonAssemblyKitCheckPV script: this If the step is to be configured individually the config.yml should look like this: steps : abapAddonAssemblyKitCheckCVs : abapAddonAssemblyKitCredentialsId : 'abapAddonAssemblyKitCredentialsId' , addonDescriptorFileName : 'addon.yml' More convenient ways of configuration (e.g. on stage level) are described in the respective scenario/pipeline documentation.","title":"Configuration in the config.yml"},{"location":"steps/abapAddonAssemblyKitCheckPV/","text":"abapAddonAssemblyKitCheckPV \u00b6 This step checks the validity of a Addon Product Version. Description \u00b6 This step checks by calling AAKaaS whether the Addon Product Version in the addonDescriptor configuration file specified via addonDescriptorFileName (e.g. addon.yml) does exist or is a valid successor of an existing Product Version. It resolves the dotted version string into version, support package stack level and patch level and writes it to the addonDescriptor structure in the Piper commonPipelineEnvironment for usage of subsequent pipeline steps. For logon you can either provide a credential with basic authorization (username and password) or two secret text credentials containing the technical s-users certificate (see note 2805811 for download) as base64 encoded string and the password to decrypt the file For Terminology refer to the Scenario Description . Usage \u00b6 We recommend to define values of step parameters via .pipeline/config.yml file . In this case, calling the step is essentially reduced to defining the step name. Calling the step can be done either in an orchestrator specific way (e.g. via a Jenkins library step) or on the command line. Jenkins Command Line library ( 'piper-lib-os' ) abapAddonAssemblyKitCheckPV script: this piper abapAddonAssemblyKitCheckPV Outputs \u00b6 Output type Details commonPipelineEnvironment abap/addonDescriptor Artifacts \u00b6 addonDescriptorFile (addon.yml) The addonDescriptorFile as specified in parameter addonDescriptorFileName is archived as artifact. This is done as this file is the main configuration and usually changed with every run. Thus it simplifies support if the corresponding configuration file is directly accessible in the pipeline. Prerequisites \u00b6 The credentials to access the AAKaaS (Technical Communication User) must be stored in the Jenkins Credential Store The step needs an addon.yml containing information about the Product Version and corresponding Software Component Versions/Repositories A detailed description of all prerequisites of the scenario and how to configure them can be found in the Scenario Description . Parameters \u00b6 Overview - Step \u00b6 Name Mandatory Additional information script (yes) reference to Jenkins main pipeline script abapAddonAssemblyKitCertificateFile no pass via ENV or Jenkins credentials ( abapAddonAssemblyKitCertificateFileCredentialsId ) abapAddonAssemblyKitCertificatePass no pass via ENV or Jenkins credentials ( abapAddonAssemblyKitCertificatePassCredentialsId ) abapAddonAssemblyKitEndpoint no addonDescriptor no addonDescriptorFileName no password no pass via ENV or Jenkins credentials username no pass via ENV or Jenkins credentials verbose no activates debug output Overview - Execution Environment \u00b6 Orchestrator-specific only These parameters are relevant for orchestrator usage and not considered when using the command line option. Name Mandatory Additional information Details \u00b6 abapAddonAssemblyKitCertificateFile \u00b6 base64 encoded certificate pfx file (PKCS12 format) see note 2805811 back to overview Scope Details Aliases - Type string Mandatory no Default $PIPER_abapAddonAssemblyKitCertificateFile (if set) Secret yes Configuration scope \u2612 parameter \u2610 general \u2610 steps \u2610 stages Resource references Jenkins credential id: id: abapAddonAssemblyKitCertificateFileCredentialsId reference to: abapAddonAssemblyKitCertificateFile abapAddonAssemblyKitCertificatePass \u00b6 password to decrypt the certificate file back to overview Scope Details Aliases - Type string Mandatory no Default $PIPER_abapAddonAssemblyKitCertificatePass (if set) Secret yes Configuration scope \u2612 parameter \u2610 general \u2610 steps \u2610 stages Resource references Jenkins credential id: id: abapAddonAssemblyKitCertificatePassCredentialsId reference to: abapAddonAssemblyKitCertificatePass abapAddonAssemblyKitEndpoint \u00b6 Base URL to the Addon Assembly Kit as a Service (AAKaaS) system back to overview Scope Details Aliases - Type string Mandatory no Default https://apps.support.sap.com Secret no Configuration scope \u2612 parameter \u2612 general \u2612 steps \u2612 stages Resource references none addonDescriptor \u00b6 Structure in the commonPipelineEnvironment containing information about the Product Version and corresponding Software Component Versions back to overview Scope Details Aliases - Type string Mandatory no Default $PIPER_addonDescriptor (if set) Secret no Configuration scope \u2612 parameter \u2610 general \u2612 steps \u2612 stages Resource references commonPipelineEnvironment : reference to: abap/addonDescriptor addonDescriptorFileName \u00b6 File name of the YAML file which describes the Product Version and corresponding Software Component Versions back to overview Scope Details Aliases - Type string Mandatory no Default addon.yml Secret no Configuration scope \u2612 parameter \u2612 general \u2612 steps \u2612 stages Resource references none password \u00b6 Password for the Addon Assembly Kit as a Service (AAKaaS) system back to overview Scope Details Aliases - Type string Mandatory no Default $PIPER_password (if set) Secret yes Configuration scope \u2612 parameter \u2610 general \u2610 steps \u2610 stages Resource references none script \u00b6 The common script environment of the Jenkinsfile running. Typically the reference to the script calling the pipeline step is provided with the this parameter, as in script: this . This allows the function to access the commonPipelineEnvironment for retrieving, e.g. configuration parameters. back to overview Scope Details Aliases - Type Jenkins Script Mandatory yes Default Secret no Configuration scope \u2610 parameter \u2610 general \u2610 steps \u2610 stages Resource references none username \u00b6 User for the Addon Assembly Kit as a Service (AAKaaS) system back to overview Scope Details Aliases - Type string Mandatory no Default $PIPER_username (if set) Secret yes Configuration scope \u2612 parameter \u2610 general \u2612 steps \u2612 stages Resource references none verbose \u00b6 verbose output back to overview Scope Details Aliases - Type bool Mandatory no Default false Possible values - true - false Secret no Configuration scope \u2612 parameter \u2612 general \u2612 steps \u2612 stages Resource references none abapAddonAssemblyKitCredentialsId \u00b6 CredentialsId stored in Jenkins for the Addon Assembly Kit as a Service (AAKaaS) system back to overview Scope Details Aliases - Type string Configuration scope \u2612 parameter \u2612 general \u2612 steps \u2612 stages abapAddonAssemblyKitCertificateFileCredentialsId \u00b6 Jenkins secret text credential ID containing the base64 encoded certificate pfx file (PKCS12 format) see note 2805811 back to overview Scope Details Aliases - Type string Configuration scope \u2612 parameter \u2612 general \u2612 steps \u2612 stages abapAddonAssemblyKitCertificatePassCredentialsId \u00b6 Jenkins secret text credential ID containing the password to decrypt the certificate file stored in abapAddonAssemblyKitCertificateFileCredentialsId back to overview Scope Details Aliases - Type string Configuration scope \u2612 parameter \u2612 general \u2612 steps \u2612 stages Examples \u00b6 Configuration in the config.yml \u00b6 The recommended way to configure your pipeline is via the config.yml file. In this case, calling the step in the Jenkinsfile is reduced to one line: abapAddonAssemblyKitCheckPV script: this If the step is to be configured individually the config.yml should look like this: steps : abapAddonAssemblyKitCheckCVs : abapAddonAssemblyKitCredentialsId : 'abapAddonAssemblyKitCredentialsId' , addonDescriptorFileName : 'addon.yml' More convenient ways of configuration (e.g. on stage level) are described in the respective scenario/pipeline documentation.","title":"CheckPV"},{"location":"steps/abapAddonAssemblyKitCheckPV/#abapaddonassemblykitcheckpv","text":"This step checks the validity of a Addon Product Version.","title":"abapAddonAssemblyKitCheckPV"},{"location":"steps/abapAddonAssemblyKitCheckPV/#description","text":"This step checks by calling AAKaaS whether the Addon Product Version in the addonDescriptor configuration file specified via addonDescriptorFileName (e.g. addon.yml) does exist or is a valid successor of an existing Product Version. It resolves the dotted version string into version, support package stack level and patch level and writes it to the addonDescriptor structure in the Piper commonPipelineEnvironment for usage of subsequent pipeline steps. For logon you can either provide a credential with basic authorization (username and password) or two secret text credentials containing the technical s-users certificate (see note 2805811 for download) as base64 encoded string and the password to decrypt the file For Terminology refer to the Scenario Description .","title":"Description"},{"location":"steps/abapAddonAssemblyKitCheckPV/#usage","text":"We recommend to define values of step parameters via .pipeline/config.yml file . In this case, calling the step is essentially reduced to defining the step name. Calling the step can be done either in an orchestrator specific way (e.g. via a Jenkins library step) or on the command line. Jenkins Command Line library ( 'piper-lib-os' ) abapAddonAssemblyKitCheckPV script: this piper abapAddonAssemblyKitCheckPV","title":"Usage"},{"location":"steps/abapAddonAssemblyKitCheckPV/#outputs","text":"Output type Details commonPipelineEnvironment abap/addonDescriptor","title":"Outputs"},{"location":"steps/abapAddonAssemblyKitCheckPV/#artifacts","text":"addonDescriptorFile (addon.yml) The addonDescriptorFile as specified in parameter addonDescriptorFileName is archived as artifact. This is done as this file is the main configuration and usually changed with every run. Thus it simplifies support if the corresponding configuration file is directly accessible in the pipeline.","title":"Artifacts"},{"location":"steps/abapAddonAssemblyKitCheckPV/#prerequisites","text":"The credentials to access the AAKaaS (Technical Communication User) must be stored in the Jenkins Credential Store The step needs an addon.yml containing information about the Product Version and corresponding Software Component Versions/Repositories A detailed description of all prerequisites of the scenario and how to configure them can be found in the Scenario Description .","title":"Prerequisites"},{"location":"steps/abapAddonAssemblyKitCheckPV/#parameters","text":"","title":"Parameters"},{"location":"steps/abapAddonAssemblyKitCheckPV/#overview-step","text":"Name Mandatory Additional information script (yes) reference to Jenkins main pipeline script abapAddonAssemblyKitCertificateFile no pass via ENV or Jenkins credentials ( abapAddonAssemblyKitCertificateFileCredentialsId ) abapAddonAssemblyKitCertificatePass no pass via ENV or Jenkins credentials ( abapAddonAssemblyKitCertificatePassCredentialsId ) abapAddonAssemblyKitEndpoint no addonDescriptor no addonDescriptorFileName no password no pass via ENV or Jenkins credentials username no pass via ENV or Jenkins credentials verbose no activates debug output","title":"Overview - Step"},{"location":"steps/abapAddonAssemblyKitCheckPV/#overview-execution-environment","text":"Orchestrator-specific only These parameters are relevant for orchestrator usage and not considered when using the command line option. Name Mandatory Additional information","title":"Overview - Execution Environment"},{"location":"steps/abapAddonAssemblyKitCheckPV/#details","text":"","title":"Details"},{"location":"steps/abapAddonAssemblyKitCheckPV/#abapaddonassemblykitcertificatefile","text":"base64 encoded certificate pfx file (PKCS12 format) see note 2805811 back to overview Scope Details Aliases - Type string Mandatory no Default $PIPER_abapAddonAssemblyKitCertificateFile (if set) Secret yes Configuration scope \u2612 parameter \u2610 general \u2610 steps \u2610 stages Resource references Jenkins credential id: id: abapAddonAssemblyKitCertificateFileCredentialsId reference to: abapAddonAssemblyKitCertificateFile","title":"abapAddonAssemblyKitCertificateFile"},{"location":"steps/abapAddonAssemblyKitCheckPV/#abapaddonassemblykitcertificatepass","text":"password to decrypt the certificate file back to overview Scope Details Aliases - Type string Mandatory no Default $PIPER_abapAddonAssemblyKitCertificatePass (if set) Secret yes Configuration scope \u2612 parameter \u2610 general \u2610 steps \u2610 stages Resource references Jenkins credential id: id: abapAddonAssemblyKitCertificatePassCredentialsId reference to: abapAddonAssemblyKitCertificatePass","title":"abapAddonAssemblyKitCertificatePass"},{"location":"steps/abapAddonAssemblyKitCheckPV/#abapaddonassemblykitendpoint","text":"Base URL to the Addon Assembly Kit as a Service (AAKaaS) system back to overview Scope Details Aliases - Type string Mandatory no Default https://apps.support.sap.com Secret no Configuration scope \u2612 parameter \u2612 general \u2612 steps \u2612 stages Resource references none","title":"abapAddonAssemblyKitEndpoint"},{"location":"steps/abapAddonAssemblyKitCheckPV/#addondescriptor","text":"Structure in the commonPipelineEnvironment containing information about the Product Version and corresponding Software Component Versions back to overview Scope Details Aliases - Type string Mandatory no Default $PIPER_addonDescriptor (if set) Secret no Configuration scope \u2612 parameter \u2610 general \u2612 steps \u2612 stages Resource references commonPipelineEnvironment : reference to: abap/addonDescriptor","title":"addonDescriptor"},{"location":"steps/abapAddonAssemblyKitCheckPV/#addondescriptorfilename","text":"File name of the YAML file which describes the Product Version and corresponding Software Component Versions back to overview Scope Details Aliases - Type string Mandatory no Default addon.yml Secret no Configuration scope \u2612 parameter \u2612 general \u2612 steps \u2612 stages Resource references none","title":"addonDescriptorFileName"},{"location":"steps/abapAddonAssemblyKitCheckPV/#password","text":"Password for the Addon Assembly Kit as a Service (AAKaaS) system back to overview Scope Details Aliases - Type string Mandatory no Default $PIPER_password (if set) Secret yes Configuration scope \u2612 parameter \u2610 general \u2610 steps \u2610 stages Resource references none","title":"password"},{"location":"steps/abapAddonAssemblyKitCheckPV/#script","text":"The common script environment of the Jenkinsfile running. Typically the reference to the script calling the pipeline step is provided with the this parameter, as in script: this . This allows the function to access the commonPipelineEnvironment for retrieving, e.g. configuration parameters. back to overview Scope Details Aliases - Type Jenkins Script Mandatory yes Default Secret no Configuration scope \u2610 parameter \u2610 general \u2610 steps \u2610 stages Resource references none","title":"script"},{"location":"steps/abapAddonAssemblyKitCheckPV/#username","text":"User for the Addon Assembly Kit as a Service (AAKaaS) system back to overview Scope Details Aliases - Type string Mandatory no Default $PIPER_username (if set) Secret yes Configuration scope \u2612 parameter \u2610 general \u2612 steps \u2612 stages Resource references none","title":"username"},{"location":"steps/abapAddonAssemblyKitCheckPV/#verbose","text":"verbose output back to overview Scope Details Aliases - Type bool Mandatory no Default false Possible values - true - false Secret no Configuration scope \u2612 parameter \u2612 general \u2612 steps \u2612 stages Resource references none","title":"verbose"},{"location":"steps/abapAddonAssemblyKitCheckPV/#abapaddonassemblykitcredentialsid","text":"CredentialsId stored in Jenkins for the Addon Assembly Kit as a Service (AAKaaS) system back to overview Scope Details Aliases - Type string Configuration scope \u2612 parameter \u2612 general \u2612 steps \u2612 stages","title":"abapAddonAssemblyKitCredentialsId"},{"location":"steps/abapAddonAssemblyKitCheckPV/#abapaddonassemblykitcertificatefilecredentialsid","text":"Jenkins secret text credential ID containing the base64 encoded certificate pfx file (PKCS12 format) see note 2805811 back to overview Scope Details Aliases - Type string Configuration scope \u2612 parameter \u2612 general \u2612 steps \u2612 stages","title":"abapAddonAssemblyKitCertificateFileCredentialsId"},{"location":"steps/abapAddonAssemblyKitCheckPV/#abapaddonassemblykitcertificatepasscredentialsid","text":"Jenkins secret text credential ID containing the password to decrypt the certificate file stored in abapAddonAssemblyKitCertificateFileCredentialsId back to overview Scope Details Aliases - Type string Configuration scope \u2612 parameter \u2612 general \u2612 steps \u2612 stages","title":"abapAddonAssemblyKitCertificatePassCredentialsId"},{"location":"steps/abapAddonAssemblyKitCheckPV/#examples","text":"","title":"Examples"},{"location":"steps/abapAddonAssemblyKitCheckPV/#configuration-in-the-configyml","text":"The recommended way to configure your pipeline is via the config.yml file. In this case, calling the step in the Jenkinsfile is reduced to one line: abapAddonAssemblyKitCheckPV script: this If the step is to be configured individually the config.yml should look like this: steps : abapAddonAssemblyKitCheckCVs : abapAddonAssemblyKitCredentialsId : 'abapAddonAssemblyKitCredentialsId' , addonDescriptorFileName : 'addon.yml' More convenient ways of configuration (e.g. on stage level) are described in the respective scenario/pipeline documentation.","title":"Configuration in the config.yml"},{"location":"steps/abapAddonAssemblyKitCreateTargetVector/","text":"abapAddonAssemblyKitCreateTargetVector \u00b6 This step creates a Target Vector for software lifecycle operations Description \u00b6 This step takes the Product Version and the corresponding list of Software Component Versions from the addonDescriptor in the commonPipelineEnvironment. With these it creates a Target Vector, which is necessary for executing software lifecylce operations in ABAP Cloud Platform systems. The Target Vector describes the software state, which shall be reached in the managed ABAP Cloud Platform system. For logon you can either provide a credential with basic authorization (username and password) or two secret text credentials containing the technical s-users certificate (see note 2805811 for download) as base64 encoded string and the password to decrypt the file For Terminology refer to the Scenario Description . Usage \u00b6 We recommend to define values of step parameters via .pipeline/config.yml file . In this case, calling the step is essentially reduced to defining the step name. Calling the step can be done either in an orchestrator specific way (e.g. via a Jenkins library step) or on the command line. Jenkins Command Line library ( 'piper-lib-os' ) abapAddonAssemblyKitCreateTargetVector script: this piper abapAddonAssemblyKitCreateTargetVector Outputs \u00b6 Output type Details commonPipelineEnvironment abap/addonDescriptor Prerequisites \u00b6 The credentials to access the AAKaaS (Technical Communication User) must be stored in the Jenkins Credential Store Product Version name and the resolved version(version, spslevel and patchlevel) must be part of the addonDescriptor structure in Piper commonPipelineEnvironment. This is the case if the step abapAddonAssemblyKitCheckPV has been executed before. For each Software Component Version which should be part of the Target Vector, the name and the resolved version(version, splevel and patchlevel) as well as the Delivery Package must be part of the addonDescriptor structure in Piper commonPipelineEnvironment. This is the case if the step abapAddonAssemblyKitCheckCVs has been executed before. The Delivery Packages must exist in the package registry (status \"P\" = planned) which is the case if step abapAddonAssemblyKitReserveNextPackages has been executed before. Alternatively the package can already exist as physical packages (status \"L\" = locked or \"R\" = released). A detailed description of all prerequisites of the scenario and how to configure them can be found in the Scenario Description . Parameters \u00b6 Overview - Step \u00b6 Name Mandatory Additional information addonDescriptor yes script (yes) reference to Jenkins main pipeline script abapAddonAssemblyKitCertificateFile no pass via ENV or Jenkins credentials ( abapAddonAssemblyKitCertificateFileCredentialsId ) abapAddonAssemblyKitCertificatePass no pass via ENV or Jenkins credentials ( abapAddonAssemblyKitCertificatePassCredentialsId ) abapAddonAssemblyKitEndpoint no abapAddonAssemblyKitOriginHash no pass via ENV or Jenkins credentials password no pass via ENV or Jenkins credentials username no pass via ENV or Jenkins credentials verbose no activates debug output Overview - Execution Environment \u00b6 Orchestrator-specific only These parameters are relevant for orchestrator usage and not considered when using the command line option. Name Mandatory Additional information Details \u00b6 abapAddonAssemblyKitCertificateFile \u00b6 base64 encoded certificate pfx file (PKCS12 format) see note 2805811 back to overview Scope Details Aliases - Type string Mandatory no Default $PIPER_abapAddonAssemblyKitCertificateFile (if set) Secret yes Configuration scope \u2612 parameter \u2610 general \u2610 steps \u2610 stages Resource references Jenkins credential id: id: abapAddonAssemblyKitCertificateFileCredentialsId reference to: abapAddonAssemblyKitCertificateFile abapAddonAssemblyKitCertificatePass \u00b6 password to decrypt the certificate file back to overview Scope Details Aliases - Type string Mandatory no Default $PIPER_abapAddonAssemblyKitCertificatePass (if set) Secret yes Configuration scope \u2612 parameter \u2610 general \u2610 steps \u2610 stages Resource references Jenkins credential id: id: abapAddonAssemblyKitCertificatePassCredentialsId reference to: abapAddonAssemblyKitCertificatePass abapAddonAssemblyKitEndpoint \u00b6 Base URL to the Addon Assembly Kit as a Service (AAKaaS) system back to overview Scope Details Aliases - Type string Mandatory no Default https://apps.support.sap.com Secret no Configuration scope \u2612 parameter \u2612 general \u2612 steps \u2612 stages Resource references none abapAddonAssemblyKitOriginHash \u00b6 Origin Hash for restricted AAKaaS scenarios back to overview Scope Details Aliases - Type string Mandatory no Default $PIPER_abapAddonAssemblyKitOriginHash (if set) Secret yes Configuration scope \u2612 parameter \u2610 general \u2610 steps \u2610 stages Resource references none addonDescriptor \u00b6 Structure in the commonPipelineEnvironment containing information about the Product Version and corresponding Software Component Versions back to overview Scope Details Aliases - Type string Mandatory yes Default $PIPER_addonDescriptor (if set) Secret no Configuration scope \u2612 parameter \u2610 general \u2612 steps \u2612 stages Resource references commonPipelineEnvironment : reference to: abap/addonDescriptor password \u00b6 Password for the Addon Assembly Kit as a Service (AAKaaS) system back to overview Scope Details Aliases - Type string Mandatory no Default $PIPER_password (if set) Secret yes Configuration scope \u2612 parameter \u2610 general \u2610 steps \u2610 stages Resource references none script \u00b6 The common script environment of the Jenkinsfile running. Typically the reference to the script calling the pipeline step is provided with the this parameter, as in script: this . This allows the function to access the commonPipelineEnvironment for retrieving, e.g. configuration parameters. back to overview Scope Details Aliases - Type Jenkins Script Mandatory yes Default Secret no Configuration scope \u2610 parameter \u2610 general \u2610 steps \u2610 stages Resource references none username \u00b6 User for the Addon Assembly Kit as a Service (AAKaaS) system back to overview Scope Details Aliases - Type string Mandatory no Default $PIPER_username (if set) Secret yes Configuration scope \u2612 parameter \u2610 general \u2612 steps \u2612 stages Resource references none verbose \u00b6 verbose output back to overview Scope Details Aliases - Type bool Mandatory no Default false Possible values - true - false Secret no Configuration scope \u2612 parameter \u2612 general \u2612 steps \u2612 stages Resource references none abapAddonAssemblyKitCredentialsId \u00b6 Credential stored in Jenkins for the Addon Assembly Kit as a Service (AAKaaS) system back to overview Scope Details Aliases - Type string Configuration scope \u2612 parameter \u2612 general \u2612 steps \u2612 stages abapAddonAssemblyKitCertificateFileCredentialsId \u00b6 Jenkins secret text credential ID containing the base64 encoded certificate pfx file (PKCS12 format) see note 2805811 back to overview Scope Details Aliases - Type string Configuration scope \u2612 parameter \u2612 general \u2612 steps \u2612 stages abapAddonAssemblyKitCertificatePassCredentialsId \u00b6 Jenkins secret text credential ID containing the password to decrypt the certificate file stored in abapAddonAssemblyKitCertificateFileCredentialsId back to overview Scope Details Aliases - Type string Configuration scope \u2612 parameter \u2612 general \u2612 steps \u2612 stages Examples \u00b6 Configuration in the config.yml \u00b6 The recommended way to configure your pipeline is via the config.yml file. In this case, calling the step in the Jenkinsfile is reduced to one line: abapAddonAssemblyKitCreateTargetVector script: this If the step is to be configured individually the config.yml should look like this: steps : abapAddonAssemblyKitCreateTargetVector : abapAddonAssemblyKitCredentialsId : 'abapAddonAssemblyKitCredentialsId' More convenient ways of configuration (e.g. on stage level) are described in the respective scenario/pipeline documentation.","title":"CreateTargetVector"},{"location":"steps/abapAddonAssemblyKitCreateTargetVector/#abapaddonassemblykitcreatetargetvector","text":"This step creates a Target Vector for software lifecycle operations","title":"abapAddonAssemblyKitCreateTargetVector"},{"location":"steps/abapAddonAssemblyKitCreateTargetVector/#description","text":"This step takes the Product Version and the corresponding list of Software Component Versions from the addonDescriptor in the commonPipelineEnvironment. With these it creates a Target Vector, which is necessary for executing software lifecylce operations in ABAP Cloud Platform systems. The Target Vector describes the software state, which shall be reached in the managed ABAP Cloud Platform system. For logon you can either provide a credential with basic authorization (username and password) or two secret text credentials containing the technical s-users certificate (see note 2805811 for download) as base64 encoded string and the password to decrypt the file For Terminology refer to the Scenario Description .","title":"Description"},{"location":"steps/abapAddonAssemblyKitCreateTargetVector/#usage","text":"We recommend to define values of step parameters via .pipeline/config.yml file . In this case, calling the step is essentially reduced to defining the step name. Calling the step can be done either in an orchestrator specific way (e.g. via a Jenkins library step) or on the command line. Jenkins Command Line library ( 'piper-lib-os' ) abapAddonAssemblyKitCreateTargetVector script: this piper abapAddonAssemblyKitCreateTargetVector","title":"Usage"},{"location":"steps/abapAddonAssemblyKitCreateTargetVector/#outputs","text":"Output type Details commonPipelineEnvironment abap/addonDescriptor","title":"Outputs"},{"location":"steps/abapAddonAssemblyKitCreateTargetVector/#prerequisites","text":"The credentials to access the AAKaaS (Technical Communication User) must be stored in the Jenkins Credential Store Product Version name and the resolved version(version, spslevel and patchlevel) must be part of the addonDescriptor structure in Piper commonPipelineEnvironment. This is the case if the step abapAddonAssemblyKitCheckPV has been executed before. For each Software Component Version which should be part of the Target Vector, the name and the resolved version(version, splevel and patchlevel) as well as the Delivery Package must be part of the addonDescriptor structure in Piper commonPipelineEnvironment. This is the case if the step abapAddonAssemblyKitCheckCVs has been executed before. The Delivery Packages must exist in the package registry (status \"P\" = planned) which is the case if step abapAddonAssemblyKitReserveNextPackages has been executed before. Alternatively the package can already exist as physical packages (status \"L\" = locked or \"R\" = released). A detailed description of all prerequisites of the scenario and how to configure them can be found in the Scenario Description .","title":"Prerequisites"},{"location":"steps/abapAddonAssemblyKitCreateTargetVector/#parameters","text":"","title":"Parameters"},{"location":"steps/abapAddonAssemblyKitCreateTargetVector/#overview-step","text":"Name Mandatory Additional information addonDescriptor yes script (yes) reference to Jenkins main pipeline script abapAddonAssemblyKitCertificateFile no pass via ENV or Jenkins credentials ( abapAddonAssemblyKitCertificateFileCredentialsId ) abapAddonAssemblyKitCertificatePass no pass via ENV or Jenkins credentials ( abapAddonAssemblyKitCertificatePassCredentialsId ) abapAddonAssemblyKitEndpoint no abapAddonAssemblyKitOriginHash no pass via ENV or Jenkins credentials password no pass via ENV or Jenkins credentials username no pass via ENV or Jenkins credentials verbose no activates debug output","title":"Overview - Step"},{"location":"steps/abapAddonAssemblyKitCreateTargetVector/#overview-execution-environment","text":"Orchestrator-specific only These parameters are relevant for orchestrator usage and not considered when using the command line option. Name Mandatory Additional information","title":"Overview - Execution Environment"},{"location":"steps/abapAddonAssemblyKitCreateTargetVector/#details","text":"","title":"Details"},{"location":"steps/abapAddonAssemblyKitCreateTargetVector/#abapaddonassemblykitcertificatefile","text":"base64 encoded certificate pfx file (PKCS12 format) see note 2805811 back to overview Scope Details Aliases - Type string Mandatory no Default $PIPER_abapAddonAssemblyKitCertificateFile (if set) Secret yes Configuration scope \u2612 parameter \u2610 general \u2610 steps \u2610 stages Resource references Jenkins credential id: id: abapAddonAssemblyKitCertificateFileCredentialsId reference to: abapAddonAssemblyKitCertificateFile","title":"abapAddonAssemblyKitCertificateFile"},{"location":"steps/abapAddonAssemblyKitCreateTargetVector/#abapaddonassemblykitcertificatepass","text":"password to decrypt the certificate file back to overview Scope Details Aliases - Type string Mandatory no Default $PIPER_abapAddonAssemblyKitCertificatePass (if set) Secret yes Configuration scope \u2612 parameter \u2610 general \u2610 steps \u2610 stages Resource references Jenkins credential id: id: abapAddonAssemblyKitCertificatePassCredentialsId reference to: abapAddonAssemblyKitCertificatePass","title":"abapAddonAssemblyKitCertificatePass"},{"location":"steps/abapAddonAssemblyKitCreateTargetVector/#abapaddonassemblykitendpoint","text":"Base URL to the Addon Assembly Kit as a Service (AAKaaS) system back to overview Scope Details Aliases - Type string Mandatory no Default https://apps.support.sap.com Secret no Configuration scope \u2612 parameter \u2612 general \u2612 steps \u2612 stages Resource references none","title":"abapAddonAssemblyKitEndpoint"},{"location":"steps/abapAddonAssemblyKitCreateTargetVector/#abapaddonassemblykitoriginhash","text":"Origin Hash for restricted AAKaaS scenarios back to overview Scope Details Aliases - Type string Mandatory no Default $PIPER_abapAddonAssemblyKitOriginHash (if set) Secret yes Configuration scope \u2612 parameter \u2610 general \u2610 steps \u2610 stages Resource references none","title":"abapAddonAssemblyKitOriginHash"},{"location":"steps/abapAddonAssemblyKitCreateTargetVector/#addondescriptor","text":"Structure in the commonPipelineEnvironment containing information about the Product Version and corresponding Software Component Versions back to overview Scope Details Aliases - Type string Mandatory yes Default $PIPER_addonDescriptor (if set) Secret no Configuration scope \u2612 parameter \u2610 general \u2612 steps \u2612 stages Resource references commonPipelineEnvironment : reference to: abap/addonDescriptor","title":"addonDescriptor"},{"location":"steps/abapAddonAssemblyKitCreateTargetVector/#password","text":"Password for the Addon Assembly Kit as a Service (AAKaaS) system back to overview Scope Details Aliases - Type string Mandatory no Default $PIPER_password (if set) Secret yes Configuration scope \u2612 parameter \u2610 general \u2610 steps \u2610 stages Resource references none","title":"password"},{"location":"steps/abapAddonAssemblyKitCreateTargetVector/#script","text":"The common script environment of the Jenkinsfile running. Typically the reference to the script calling the pipeline step is provided with the this parameter, as in script: this . This allows the function to access the commonPipelineEnvironment for retrieving, e.g. configuration parameters. back to overview Scope Details Aliases - Type Jenkins Script Mandatory yes Default Secret no Configuration scope \u2610 parameter \u2610 general \u2610 steps \u2610 stages Resource references none","title":"script"},{"location":"steps/abapAddonAssemblyKitCreateTargetVector/#username","text":"User for the Addon Assembly Kit as a Service (AAKaaS) system back to overview Scope Details Aliases - Type string Mandatory no Default $PIPER_username (if set) Secret yes Configuration scope \u2612 parameter \u2610 general \u2612 steps \u2612 stages Resource references none","title":"username"},{"location":"steps/abapAddonAssemblyKitCreateTargetVector/#verbose","text":"verbose output back to overview Scope Details Aliases - Type bool Mandatory no Default false Possible values - true - false Secret no Configuration scope \u2612 parameter \u2612 general \u2612 steps \u2612 stages Resource references none","title":"verbose"},{"location":"steps/abapAddonAssemblyKitCreateTargetVector/#abapaddonassemblykitcredentialsid","text":"Credential stored in Jenkins for the Addon Assembly Kit as a Service (AAKaaS) system back to overview Scope Details Aliases - Type string Configuration scope \u2612 parameter \u2612 general \u2612 steps \u2612 stages","title":"abapAddonAssemblyKitCredentialsId"},{"location":"steps/abapAddonAssemblyKitCreateTargetVector/#abapaddonassemblykitcertificatefilecredentialsid","text":"Jenkins secret text credential ID containing the base64 encoded certificate pfx file (PKCS12 format) see note 2805811 back to overview Scope Details Aliases - Type string Configuration scope \u2612 parameter \u2612 general \u2612 steps \u2612 stages","title":"abapAddonAssemblyKitCertificateFileCredentialsId"},{"location":"steps/abapAddonAssemblyKitCreateTargetVector/#abapaddonassemblykitcertificatepasscredentialsid","text":"Jenkins secret text credential ID containing the password to decrypt the certificate file stored in abapAddonAssemblyKitCertificateFileCredentialsId back to overview Scope Details Aliases - Type string Configuration scope \u2612 parameter \u2612 general \u2612 steps \u2612 stages","title":"abapAddonAssemblyKitCertificatePassCredentialsId"},{"location":"steps/abapAddonAssemblyKitCreateTargetVector/#examples","text":"","title":"Examples"},{"location":"steps/abapAddonAssemblyKitCreateTargetVector/#configuration-in-the-configyml","text":"The recommended way to configure your pipeline is via the config.yml file. In this case, calling the step in the Jenkinsfile is reduced to one line: abapAddonAssemblyKitCreateTargetVector script: this If the step is to be configured individually the config.yml should look like this: steps : abapAddonAssemblyKitCreateTargetVector : abapAddonAssemblyKitCredentialsId : 'abapAddonAssemblyKitCredentialsId' More convenient ways of configuration (e.g. on stage level) are described in the respective scenario/pipeline documentation.","title":"Configuration in the config.yml"},{"location":"steps/abapAddonAssemblyKitPublishTargetVector/","text":"abapAddonAssemblyKitPublishTargetVector \u00b6 This step triggers the publication of the Target Vector according to the specified scope. Description \u00b6 This step reads the Target Vector ID from the addonDescriptor in the commonPipelineEnvironment and triggers the publication of the Target Vector. With targetVectorScope \"T\" the Target Vector will be published to the test environment and with targetVectorScope \"P\" it will be published to the productive environment. For logon you can either provide a credential with basic authorization (username and password) or two secret text credentials containing the technical s-users certificate (see note 2805811 for download) as base64 encoded string and the password to decrypt the file For Terminology refer to the Scenario Description . Usage \u00b6 We recommend to define values of step parameters via .pipeline/config.yml file . In this case, calling the step is essentially reduced to defining the step name. Calling the step can be done either in an orchestrator specific way (e.g. via a Jenkins library step) or on the command line. Jenkins Command Line library ( 'piper-lib-os' ) abapAddonAssemblyKitPublishTargetVector script: this piper abapAddonAssemblyKitPublishTargetVector Prerequisites \u00b6 The credentials to access the AAKaaS (Technical Communication User) must be stored in the Jenkins Credential Store This step needs an existing Target Vector as well as the scope where it should be published. The Target Vector ID is taken from the addonDescriptor in the commonPipelineEnvironment. If you run prior to this step the step abapAddonAssemblyKitCreateTargetVector , the Target Vector will be created and its ID will be written to the commonPipelineEnvironment A detailed description of all prerequisites of the scenario and how to configure them can be found in the Scenario Description . Parameters \u00b6 Overview - Step \u00b6 Name Mandatory Additional information addonDescriptor yes script (yes) reference to Jenkins main pipeline script abapAddonAssemblyKitCertificateFile no pass via ENV or Jenkins credentials ( abapAddonAssemblyKitCertificateFileCredentialsId ) abapAddonAssemblyKitCertificatePass no pass via ENV or Jenkins credentials ( abapAddonAssemblyKitCertificatePassCredentialsId ) abapAddonAssemblyKitEndpoint no abapAddonAssemblyKitOriginHash no pass via ENV or Jenkins credentials maxRuntimeInMinutes no password no pass via ENV or Jenkins credentials pollingIntervalInSeconds no targetVectorScope no username no pass via ENV or Jenkins credentials verbose no activates debug output Overview - Execution Environment \u00b6 Orchestrator-specific only These parameters are relevant for orchestrator usage and not considered when using the command line option. Name Mandatory Additional information Details \u00b6 abapAddonAssemblyKitCertificateFile \u00b6 base64 encoded certificate pfx file (PKCS12 format) see note 2805811 back to overview Scope Details Aliases - Type string Mandatory no Default $PIPER_abapAddonAssemblyKitCertificateFile (if set) Secret yes Configuration scope \u2612 parameter \u2610 general \u2610 steps \u2610 stages Resource references Jenkins credential id: id: abapAddonAssemblyKitCertificateFileCredentialsId reference to: abapAddonAssemblyKitCertificateFile abapAddonAssemblyKitCertificatePass \u00b6 password to decrypt the certificate file back to overview Scope Details Aliases - Type string Mandatory no Default $PIPER_abapAddonAssemblyKitCertificatePass (if set) Secret yes Configuration scope \u2612 parameter \u2610 general \u2610 steps \u2610 stages Resource references Jenkins credential id: id: abapAddonAssemblyKitCertificatePassCredentialsId reference to: abapAddonAssemblyKitCertificatePass abapAddonAssemblyKitEndpoint \u00b6 Base URL to the Addon Assembly Kit as a Service (AAKaaS) system back to overview Scope Details Aliases - Type string Mandatory no Default https://apps.support.sap.com Secret no Configuration scope \u2612 parameter \u2612 general \u2612 steps \u2612 stages Resource references none abapAddonAssemblyKitOriginHash \u00b6 Origin Hash for restricted AAKaaS scenarios back to overview Scope Details Aliases - Type string Mandatory no Default $PIPER_abapAddonAssemblyKitOriginHash (if set) Secret yes Configuration scope \u2612 parameter \u2610 general \u2610 steps \u2610 stages Resource references none addonDescriptor \u00b6 Structure in the commonPipelineEnvironment containing information about the Product Version and corresponding Software Component Versions back to overview Scope Details Aliases - Type string Mandatory yes Default $PIPER_addonDescriptor (if set) Secret no Configuration scope \u2612 parameter \u2610 general \u2612 steps \u2612 stages Resource references commonPipelineEnvironment : reference to: abap/addonDescriptor maxRuntimeInMinutes \u00b6 Maximum runtime for status polling in minutes back to overview Scope Details Aliases - Type int Mandatory no Default 90 Secret no Configuration scope \u2612 parameter \u2612 general \u2612 steps \u2612 stages Resource references none password \u00b6 Password for the Addon Assembly Kit as a Service (AAKaaS) system back to overview Scope Details Aliases - Type string Mandatory no Default $PIPER_password (if set) Secret yes Configuration scope \u2612 parameter \u2610 general \u2610 steps \u2610 stages Resource references none pollingIntervalInSeconds \u00b6 Wait time in seconds between polling calls back to overview Scope Details Aliases - Type int Mandatory no Default 60 Secret no Configuration scope \u2612 parameter \u2612 general \u2612 steps \u2612 stages Resource references none script \u00b6 The common script environment of the Jenkinsfile running. Typically the reference to the script calling the pipeline step is provided with the this parameter, as in script: this . This allows the function to access the commonPipelineEnvironment for retrieving, e.g. configuration parameters. back to overview Scope Details Aliases - Type Jenkins Script Mandatory yes Default Secret no Configuration scope \u2610 parameter \u2610 general \u2610 steps \u2610 stages Resource references none targetVectorScope \u00b6 Determines whether the Target Vector is published to the productive ('P') or test ('T') environment back to overview Scope Details Aliases - Type string Mandatory no Default T Possible values - T - P Secret no Configuration scope \u2612 parameter \u2610 general \u2612 steps \u2612 stages Resource references none username \u00b6 User for the Addon Assembly Kit as a Service (AAKaaS) system back to overview Scope Details Aliases - Type string Mandatory no Default $PIPER_username (if set) Secret yes Configuration scope \u2612 parameter \u2610 general \u2612 steps \u2612 stages Resource references none verbose \u00b6 verbose output back to overview Scope Details Aliases - Type bool Mandatory no Default false Possible values - true - false Secret no Configuration scope \u2612 parameter \u2612 general \u2612 steps \u2612 stages Resource references none abapAddonAssemblyKitCredentialsId \u00b6 Credential stored in Jenkins for the Addon Assembly Kit as a Service (AAKaaS) system back to overview Scope Details Aliases - Type string Configuration scope \u2612 parameter \u2612 general \u2612 steps \u2612 stages abapAddonAssemblyKitCertificateFileCredentialsId \u00b6 Jenkins secret text credential ID containing the base64 encoded certificate pfx file (PKCS12 format) see note 2805811 back to overview Scope Details Aliases - Type string Configuration scope \u2612 parameter \u2612 general \u2612 steps \u2612 stages abapAddonAssemblyKitCertificatePassCredentialsId \u00b6 Jenkins secret text credential ID containing the password to decrypt the certificate file stored in abapAddonAssemblyKitCertificateFileCredentialsId back to overview Scope Details Aliases - Type string Configuration scope \u2612 parameter \u2612 general \u2612 steps \u2612 stages Examples \u00b6 Configuration in the config.yml \u00b6 The recommended way to configure your pipeline is via the config.yml file. In this case, calling the step in the Jenkinsfile is reduced to one line: abapAddonAssemblyKitPublishTargetVector ( targetVectorScope: 'T' , script: this , ) If the step is to be configured individually the config.yml should look like this: steps : abapAddonAssemblyKitPublishTargetVector : abapAddonAssemblyKitCredentialsId : 'abapAddonAssemblyKitCredentialsId' More convenient ways of configuration (e.g. on stage level) are described in the respective scenario/pipeline documentation.","title":"PublishTargetVector"},{"location":"steps/abapAddonAssemblyKitPublishTargetVector/#abapaddonassemblykitpublishtargetvector","text":"This step triggers the publication of the Target Vector according to the specified scope.","title":"abapAddonAssemblyKitPublishTargetVector"},{"location":"steps/abapAddonAssemblyKitPublishTargetVector/#description","text":"This step reads the Target Vector ID from the addonDescriptor in the commonPipelineEnvironment and triggers the publication of the Target Vector. With targetVectorScope \"T\" the Target Vector will be published to the test environment and with targetVectorScope \"P\" it will be published to the productive environment. For logon you can either provide a credential with basic authorization (username and password) or two secret text credentials containing the technical s-users certificate (see note 2805811 for download) as base64 encoded string and the password to decrypt the file For Terminology refer to the Scenario Description .","title":"Description"},{"location":"steps/abapAddonAssemblyKitPublishTargetVector/#usage","text":"We recommend to define values of step parameters via .pipeline/config.yml file . In this case, calling the step is essentially reduced to defining the step name. Calling the step can be done either in an orchestrator specific way (e.g. via a Jenkins library step) or on the command line. Jenkins Command Line library ( 'piper-lib-os' ) abapAddonAssemblyKitPublishTargetVector script: this piper abapAddonAssemblyKitPublishTargetVector","title":"Usage"},{"location":"steps/abapAddonAssemblyKitPublishTargetVector/#prerequisites","text":"The credentials to access the AAKaaS (Technical Communication User) must be stored in the Jenkins Credential Store This step needs an existing Target Vector as well as the scope where it should be published. The Target Vector ID is taken from the addonDescriptor in the commonPipelineEnvironment. If you run prior to this step the step abapAddonAssemblyKitCreateTargetVector , the Target Vector will be created and its ID will be written to the commonPipelineEnvironment A detailed description of all prerequisites of the scenario and how to configure them can be found in the Scenario Description .","title":"Prerequisites"},{"location":"steps/abapAddonAssemblyKitPublishTargetVector/#parameters","text":"","title":"Parameters"},{"location":"steps/abapAddonAssemblyKitPublishTargetVector/#overview-step","text":"Name Mandatory Additional information addonDescriptor yes script (yes) reference to Jenkins main pipeline script abapAddonAssemblyKitCertificateFile no pass via ENV or Jenkins credentials ( abapAddonAssemblyKitCertificateFileCredentialsId ) abapAddonAssemblyKitCertificatePass no pass via ENV or Jenkins credentials ( abapAddonAssemblyKitCertificatePassCredentialsId ) abapAddonAssemblyKitEndpoint no abapAddonAssemblyKitOriginHash no pass via ENV or Jenkins credentials maxRuntimeInMinutes no password no pass via ENV or Jenkins credentials pollingIntervalInSeconds no targetVectorScope no username no pass via ENV or Jenkins credentials verbose no activates debug output","title":"Overview - Step"},{"location":"steps/abapAddonAssemblyKitPublishTargetVector/#overview-execution-environment","text":"Orchestrator-specific only These parameters are relevant for orchestrator usage and not considered when using the command line option. Name Mandatory Additional information","title":"Overview - Execution Environment"},{"location":"steps/abapAddonAssemblyKitPublishTargetVector/#details","text":"","title":"Details"},{"location":"steps/abapAddonAssemblyKitPublishTargetVector/#abapaddonassemblykitcertificatefile","text":"base64 encoded certificate pfx file (PKCS12 format) see note 2805811 back to overview Scope Details Aliases - Type string Mandatory no Default $PIPER_abapAddonAssemblyKitCertificateFile (if set) Secret yes Configuration scope \u2612 parameter \u2610 general \u2610 steps \u2610 stages Resource references Jenkins credential id: id: abapAddonAssemblyKitCertificateFileCredentialsId reference to: abapAddonAssemblyKitCertificateFile","title":"abapAddonAssemblyKitCertificateFile"},{"location":"steps/abapAddonAssemblyKitPublishTargetVector/#abapaddonassemblykitcertificatepass","text":"password to decrypt the certificate file back to overview Scope Details Aliases - Type string Mandatory no Default $PIPER_abapAddonAssemblyKitCertificatePass (if set) Secret yes Configuration scope \u2612 parameter \u2610 general \u2610 steps \u2610 stages Resource references Jenkins credential id: id: abapAddonAssemblyKitCertificatePassCredentialsId reference to: abapAddonAssemblyKitCertificatePass","title":"abapAddonAssemblyKitCertificatePass"},{"location":"steps/abapAddonAssemblyKitPublishTargetVector/#abapaddonassemblykitendpoint","text":"Base URL to the Addon Assembly Kit as a Service (AAKaaS) system back to overview Scope Details Aliases - Type string Mandatory no Default https://apps.support.sap.com Secret no Configuration scope \u2612 parameter \u2612 general \u2612 steps \u2612 stages Resource references none","title":"abapAddonAssemblyKitEndpoint"},{"location":"steps/abapAddonAssemblyKitPublishTargetVector/#abapaddonassemblykitoriginhash","text":"Origin Hash for restricted AAKaaS scenarios back to overview Scope Details Aliases - Type string Mandatory no Default $PIPER_abapAddonAssemblyKitOriginHash (if set) Secret yes Configuration scope \u2612 parameter \u2610 general \u2610 steps \u2610 stages Resource references none","title":"abapAddonAssemblyKitOriginHash"},{"location":"steps/abapAddonAssemblyKitPublishTargetVector/#addondescriptor","text":"Structure in the commonPipelineEnvironment containing information about the Product Version and corresponding Software Component Versions back to overview Scope Details Aliases - Type string Mandatory yes Default $PIPER_addonDescriptor (if set) Secret no Configuration scope \u2612 parameter \u2610 general \u2612 steps \u2612 stages Resource references commonPipelineEnvironment : reference to: abap/addonDescriptor","title":"addonDescriptor"},{"location":"steps/abapAddonAssemblyKitPublishTargetVector/#maxruntimeinminutes","text":"Maximum runtime for status polling in minutes back to overview Scope Details Aliases - Type int Mandatory no Default 90 Secret no Configuration scope \u2612 parameter \u2612 general \u2612 steps \u2612 stages Resource references none","title":"maxRuntimeInMinutes"},{"location":"steps/abapAddonAssemblyKitPublishTargetVector/#password","text":"Password for the Addon Assembly Kit as a Service (AAKaaS) system back to overview Scope Details Aliases - Type string Mandatory no Default $PIPER_password (if set) Secret yes Configuration scope \u2612 parameter \u2610 general \u2610 steps \u2610 stages Resource references none","title":"password"},{"location":"steps/abapAddonAssemblyKitPublishTargetVector/#pollingintervalinseconds","text":"Wait time in seconds between polling calls back to overview Scope Details Aliases - Type int Mandatory no Default 60 Secret no Configuration scope \u2612 parameter \u2612 general \u2612 steps \u2612 stages Resource references none","title":"pollingIntervalInSeconds"},{"location":"steps/abapAddonAssemblyKitPublishTargetVector/#script","text":"The common script environment of the Jenkinsfile running. Typically the reference to the script calling the pipeline step is provided with the this parameter, as in script: this . This allows the function to access the commonPipelineEnvironment for retrieving, e.g. configuration parameters. back to overview Scope Details Aliases - Type Jenkins Script Mandatory yes Default Secret no Configuration scope \u2610 parameter \u2610 general \u2610 steps \u2610 stages Resource references none","title":"script"},{"location":"steps/abapAddonAssemblyKitPublishTargetVector/#targetvectorscope","text":"Determines whether the Target Vector is published to the productive ('P') or test ('T') environment back to overview Scope Details Aliases - Type string Mandatory no Default T Possible values - T - P Secret no Configuration scope \u2612 parameter \u2610 general \u2612 steps \u2612 stages Resource references none","title":"targetVectorScope"},{"location":"steps/abapAddonAssemblyKitPublishTargetVector/#username","text":"User for the Addon Assembly Kit as a Service (AAKaaS) system back to overview Scope Details Aliases - Type string Mandatory no Default $PIPER_username (if set) Secret yes Configuration scope \u2612 parameter \u2610 general \u2612 steps \u2612 stages Resource references none","title":"username"},{"location":"steps/abapAddonAssemblyKitPublishTargetVector/#verbose","text":"verbose output back to overview Scope Details Aliases - Type bool Mandatory no Default false Possible values - true - false Secret no Configuration scope \u2612 parameter \u2612 general \u2612 steps \u2612 stages Resource references none","title":"verbose"},{"location":"steps/abapAddonAssemblyKitPublishTargetVector/#abapaddonassemblykitcredentialsid","text":"Credential stored in Jenkins for the Addon Assembly Kit as a Service (AAKaaS) system back to overview Scope Details Aliases - Type string Configuration scope \u2612 parameter \u2612 general \u2612 steps \u2612 stages","title":"abapAddonAssemblyKitCredentialsId"},{"location":"steps/abapAddonAssemblyKitPublishTargetVector/#abapaddonassemblykitcertificatefilecredentialsid","text":"Jenkins secret text credential ID containing the base64 encoded certificate pfx file (PKCS12 format) see note 2805811 back to overview Scope Details Aliases - Type string Configuration scope \u2612 parameter \u2612 general \u2612 steps \u2612 stages","title":"abapAddonAssemblyKitCertificateFileCredentialsId"},{"location":"steps/abapAddonAssemblyKitPublishTargetVector/#abapaddonassemblykitcertificatepasscredentialsid","text":"Jenkins secret text credential ID containing the password to decrypt the certificate file stored in abapAddonAssemblyKitCertificateFileCredentialsId back to overview Scope Details Aliases - Type string Configuration scope \u2612 parameter \u2612 general \u2612 steps \u2612 stages","title":"abapAddonAssemblyKitCertificatePassCredentialsId"},{"location":"steps/abapAddonAssemblyKitPublishTargetVector/#examples","text":"","title":"Examples"},{"location":"steps/abapAddonAssemblyKitPublishTargetVector/#configuration-in-the-configyml","text":"The recommended way to configure your pipeline is via the config.yml file. In this case, calling the step in the Jenkinsfile is reduced to one line: abapAddonAssemblyKitPublishTargetVector ( targetVectorScope: 'T' , script: this , ) If the step is to be configured individually the config.yml should look like this: steps : abapAddonAssemblyKitPublishTargetVector : abapAddonAssemblyKitCredentialsId : 'abapAddonAssemblyKitCredentialsId' More convenient ways of configuration (e.g. on stage level) are described in the respective scenario/pipeline documentation.","title":"Configuration in the config.yml"},{"location":"steps/abapAddonAssemblyKitRegisterPackages/","text":"abapAddonAssemblyKitRegisterPackages \u00b6 This step uploads the SAR archives and creates physical Delivery Packages to AAKaaS. Description \u00b6 This step takes the list of Software Component Versions from the addonDescriptor in the commonPipelineEnvironment. For Packages in status \"P\" = planned it uploads the SAR archive with the data file and metadata XML of the Delivery Packages composed and exported in the build system and creates physical Delivery Package in AAKaaS. The new status \"L\" = locked is written back to the addonDescriptor in the commonPipelineEnvironment. For logon you can either provide a credential with basic authorization (username and password) or two secret text credentials containing the technical s-users certificate (see note 2805811 for download) as base64 encoded string and the password to decrypt the file For Terminology refer to the Scenario Description . Usage \u00b6 We recommend to define values of step parameters via .pipeline/config.yml file . In this case, calling the step is essentially reduced to defining the step name. Calling the step can be done either in an orchestrator specific way (e.g. via a Jenkins library step) or on the command line. Jenkins Command Line library ( 'piper-lib-os' ) abapAddonAssemblyKitRegisterPackages script: this piper abapAddonAssemblyKitRegisterPackages Outputs \u00b6 Output type Details commonPipelineEnvironment abap/addonDescriptor Prerequisites \u00b6 The credentials to access the AAKaaS (Technical Communication User) must be stored in the Jenkins Credential Store This step needs the names of the packages which should be registered. For each package a SAR archive with the data file and metadata XML must be provided. The package names and their status are taken from the addonDescriptor in the commonPipelineEnvironment, as well as the SarXMLFilePath with the path to the SAR file. The information will be written to the commonPipelineEnvironment if you run prior to this step the step abapAddonAssemblyKitReserveNextPackages The SAR archive is produced if you run the step abapEnvironmentAssemblePackages A detailed description of all prerequisites of the scenario and how to configure them can be found in the Scenario Description . Parameters \u00b6 Overview - Step \u00b6 Name Mandatory Additional information addonDescriptor yes script (yes) reference to Jenkins main pipeline script abapAddonAssemblyKitCertificateFile no pass via ENV or Jenkins credentials ( abapAddonAssemblyKitCertificateFileCredentialsId ) abapAddonAssemblyKitCertificatePass no pass via ENV or Jenkins credentials ( abapAddonAssemblyKitCertificatePassCredentialsId ) abapAddonAssemblyKitEndpoint no abapAddonAssemblyKitOriginHash no pass via ENV or Jenkins credentials password no pass via ENV or Jenkins credentials username no pass via ENV or Jenkins credentials verbose no activates debug output Overview - Execution Environment \u00b6 Orchestrator-specific only These parameters are relevant for orchestrator usage and not considered when using the command line option. Name Mandatory Additional information Details \u00b6 abapAddonAssemblyKitCertificateFile \u00b6 base64 encoded certificate pfx file (PKCS12 format) see note 2805811 back to overview Scope Details Aliases - Type string Mandatory no Default $PIPER_abapAddonAssemblyKitCertificateFile (if set) Secret yes Configuration scope \u2612 parameter \u2610 general \u2610 steps \u2610 stages Resource references Jenkins credential id: id: abapAddonAssemblyKitCertificateFileCredentialsId reference to: abapAddonAssemblyKitCertificateFile abapAddonAssemblyKitCertificatePass \u00b6 password to decrypt the certificate file back to overview Scope Details Aliases - Type string Mandatory no Default $PIPER_abapAddonAssemblyKitCertificatePass (if set) Secret yes Configuration scope \u2612 parameter \u2610 general \u2610 steps \u2610 stages Resource references Jenkins credential id: id: abapAddonAssemblyKitCertificatePassCredentialsId reference to: abapAddonAssemblyKitCertificatePass abapAddonAssemblyKitEndpoint \u00b6 Base URL to the Addon Assembly Kit as a Service (AAKaaS) system back to overview Scope Details Aliases - Type string Mandatory no Default https://apps.support.sap.com Secret no Configuration scope \u2612 parameter \u2612 general \u2612 steps \u2612 stages Resource references none abapAddonAssemblyKitOriginHash \u00b6 Origin Hash for restricted AAKaaS scenarios back to overview Scope Details Aliases - Type string Mandatory no Default $PIPER_abapAddonAssemblyKitOriginHash (if set) Secret yes Configuration scope \u2612 parameter \u2610 general \u2610 steps \u2610 stages Resource references none addonDescriptor \u00b6 Structure in the commonPipelineEnvironment containing information about the Product Version and corresponding Software Component Versions back to overview Scope Details Aliases - Type string Mandatory yes Default $PIPER_addonDescriptor (if set) Secret no Configuration scope \u2612 parameter \u2610 general \u2612 steps \u2612 stages Resource references commonPipelineEnvironment : reference to: abap/addonDescriptor password \u00b6 Password for the Addon Assembly Kit as a Service (AAKaaS) system back to overview Scope Details Aliases - Type string Mandatory no Default $PIPER_password (if set) Secret yes Configuration scope \u2612 parameter \u2610 general \u2610 steps \u2610 stages Resource references none script \u00b6 The common script environment of the Jenkinsfile running. Typically the reference to the script calling the pipeline step is provided with the this parameter, as in script: this . This allows the function to access the commonPipelineEnvironment for retrieving, e.g. configuration parameters. back to overview Scope Details Aliases - Type Jenkins Script Mandatory yes Default Secret no Configuration scope \u2610 parameter \u2610 general \u2610 steps \u2610 stages Resource references none username \u00b6 User for the Addon Assembly Kit as a Service (AAKaaS) system back to overview Scope Details Aliases - Type string Mandatory no Default $PIPER_username (if set) Secret yes Configuration scope \u2612 parameter \u2610 general \u2612 steps \u2612 stages Resource references none verbose \u00b6 verbose output back to overview Scope Details Aliases - Type bool Mandatory no Default false Possible values - true - false Secret no Configuration scope \u2612 parameter \u2612 general \u2612 steps \u2612 stages Resource references none abapAddonAssemblyKitCredentialsId \u00b6 Credential stored in Jenkins for the Addon Assembly Kit as a Service (AAKaaS) system back to overview Scope Details Aliases - Type string Configuration scope \u2612 parameter \u2612 general \u2612 steps \u2612 stages abapAddonAssemblyKitCertificateFileCredentialsId \u00b6 Jenkins secret text credential ID containing the base64 encoded certificate pfx file (PKCS12 format) see note 2805811 back to overview Scope Details Aliases - Type string Configuration scope \u2612 parameter \u2612 general \u2612 steps \u2612 stages abapAddonAssemblyKitCertificatePassCredentialsId \u00b6 Jenkins secret text credential ID containing the password to decrypt the certificate file stored in abapAddonAssemblyKitCertificateFileCredentialsId back to overview Scope Details Aliases - Type string Configuration scope \u2612 parameter \u2612 general \u2612 steps \u2612 stages Examples \u00b6 Configuration in the config.yml \u00b6 The recommended way to configure your pipeline is via the config.yml file. In this case, calling the step in the Jenkinsfile is reduced to one line: abapAddonAssemblyKitRegisterPackages script: this If the step is to be configured individually the config.yml should look like this: steps : abapAddonAssemblyKitRegisterPackages : abapAddonAssemblyKitCredentialsId : 'abapAddonAssemblyKitCredentialsId' More convenient ways of configuration (e.g. on stage level) are described in the respective scenario/pipeline documentation.","title":"RegisterPackages"},{"location":"steps/abapAddonAssemblyKitRegisterPackages/#abapaddonassemblykitregisterpackages","text":"This step uploads the SAR archives and creates physical Delivery Packages to AAKaaS.","title":"abapAddonAssemblyKitRegisterPackages"},{"location":"steps/abapAddonAssemblyKitRegisterPackages/#description","text":"This step takes the list of Software Component Versions from the addonDescriptor in the commonPipelineEnvironment. For Packages in status \"P\" = planned it uploads the SAR archive with the data file and metadata XML of the Delivery Packages composed and exported in the build system and creates physical Delivery Package in AAKaaS. The new status \"L\" = locked is written back to the addonDescriptor in the commonPipelineEnvironment. For logon you can either provide a credential with basic authorization (username and password) or two secret text credentials containing the technical s-users certificate (see note 2805811 for download) as base64 encoded string and the password to decrypt the file For Terminology refer to the Scenario Description .","title":"Description"},{"location":"steps/abapAddonAssemblyKitRegisterPackages/#usage","text":"We recommend to define values of step parameters via .pipeline/config.yml file . In this case, calling the step is essentially reduced to defining the step name. Calling the step can be done either in an orchestrator specific way (e.g. via a Jenkins library step) or on the command line. Jenkins Command Line library ( 'piper-lib-os' ) abapAddonAssemblyKitRegisterPackages script: this piper abapAddonAssemblyKitRegisterPackages","title":"Usage"},{"location":"steps/abapAddonAssemblyKitRegisterPackages/#outputs","text":"Output type Details commonPipelineEnvironment abap/addonDescriptor","title":"Outputs"},{"location":"steps/abapAddonAssemblyKitRegisterPackages/#prerequisites","text":"The credentials to access the AAKaaS (Technical Communication User) must be stored in the Jenkins Credential Store This step needs the names of the packages which should be registered. For each package a SAR archive with the data file and metadata XML must be provided. The package names and their status are taken from the addonDescriptor in the commonPipelineEnvironment, as well as the SarXMLFilePath with the path to the SAR file. The information will be written to the commonPipelineEnvironment if you run prior to this step the step abapAddonAssemblyKitReserveNextPackages The SAR archive is produced if you run the step abapEnvironmentAssemblePackages A detailed description of all prerequisites of the scenario and how to configure them can be found in the Scenario Description .","title":"Prerequisites"},{"location":"steps/abapAddonAssemblyKitRegisterPackages/#parameters","text":"","title":"Parameters"},{"location":"steps/abapAddonAssemblyKitRegisterPackages/#overview-step","text":"Name Mandatory Additional information addonDescriptor yes script (yes) reference to Jenkins main pipeline script abapAddonAssemblyKitCertificateFile no pass via ENV or Jenkins credentials ( abapAddonAssemblyKitCertificateFileCredentialsId ) abapAddonAssemblyKitCertificatePass no pass via ENV or Jenkins credentials ( abapAddonAssemblyKitCertificatePassCredentialsId ) abapAddonAssemblyKitEndpoint no abapAddonAssemblyKitOriginHash no pass via ENV or Jenkins credentials password no pass via ENV or Jenkins credentials username no pass via ENV or Jenkins credentials verbose no activates debug output","title":"Overview - Step"},{"location":"steps/abapAddonAssemblyKitRegisterPackages/#overview-execution-environment","text":"Orchestrator-specific only These parameters are relevant for orchestrator usage and not considered when using the command line option. Name Mandatory Additional information","title":"Overview - Execution Environment"},{"location":"steps/abapAddonAssemblyKitRegisterPackages/#details","text":"","title":"Details"},{"location":"steps/abapAddonAssemblyKitRegisterPackages/#abapaddonassemblykitcertificatefile","text":"base64 encoded certificate pfx file (PKCS12 format) see note 2805811 back to overview Scope Details Aliases - Type string Mandatory no Default $PIPER_abapAddonAssemblyKitCertificateFile (if set) Secret yes Configuration scope \u2612 parameter \u2610 general \u2610 steps \u2610 stages Resource references Jenkins credential id: id: abapAddonAssemblyKitCertificateFileCredentialsId reference to: abapAddonAssemblyKitCertificateFile","title":"abapAddonAssemblyKitCertificateFile"},{"location":"steps/abapAddonAssemblyKitRegisterPackages/#abapaddonassemblykitcertificatepass","text":"password to decrypt the certificate file back to overview Scope Details Aliases - Type string Mandatory no Default $PIPER_abapAddonAssemblyKitCertificatePass (if set) Secret yes Configuration scope \u2612 parameter \u2610 general \u2610 steps \u2610 stages Resource references Jenkins credential id: id: abapAddonAssemblyKitCertificatePassCredentialsId reference to: abapAddonAssemblyKitCertificatePass","title":"abapAddonAssemblyKitCertificatePass"},{"location":"steps/abapAddonAssemblyKitRegisterPackages/#abapaddonassemblykitendpoint","text":"Base URL to the Addon Assembly Kit as a Service (AAKaaS) system back to overview Scope Details Aliases - Type string Mandatory no Default https://apps.support.sap.com Secret no Configuration scope \u2612 parameter \u2612 general \u2612 steps \u2612 stages Resource references none","title":"abapAddonAssemblyKitEndpoint"},{"location":"steps/abapAddonAssemblyKitRegisterPackages/#abapaddonassemblykitoriginhash","text":"Origin Hash for restricted AAKaaS scenarios back to overview Scope Details Aliases - Type string Mandatory no Default $PIPER_abapAddonAssemblyKitOriginHash (if set) Secret yes Configuration scope \u2612 parameter \u2610 general \u2610 steps \u2610 stages Resource references none","title":"abapAddonAssemblyKitOriginHash"},{"location":"steps/abapAddonAssemblyKitRegisterPackages/#addondescriptor","text":"Structure in the commonPipelineEnvironment containing information about the Product Version and corresponding Software Component Versions back to overview Scope Details Aliases - Type string Mandatory yes Default $PIPER_addonDescriptor (if set) Secret no Configuration scope \u2612 parameter \u2610 general \u2612 steps \u2612 stages Resource references commonPipelineEnvironment : reference to: abap/addonDescriptor","title":"addonDescriptor"},{"location":"steps/abapAddonAssemblyKitRegisterPackages/#password","text":"Password for the Addon Assembly Kit as a Service (AAKaaS) system back to overview Scope Details Aliases - Type string Mandatory no Default $PIPER_password (if set) Secret yes Configuration scope \u2612 parameter \u2610 general \u2610 steps \u2610 stages Resource references none","title":"password"},{"location":"steps/abapAddonAssemblyKitRegisterPackages/#script","text":"The common script environment of the Jenkinsfile running. Typically the reference to the script calling the pipeline step is provided with the this parameter, as in script: this . This allows the function to access the commonPipelineEnvironment for retrieving, e.g. configuration parameters. back to overview Scope Details Aliases - Type Jenkins Script Mandatory yes Default Secret no Configuration scope \u2610 parameter \u2610 general \u2610 steps \u2610 stages Resource references none","title":"script"},{"location":"steps/abapAddonAssemblyKitRegisterPackages/#username","text":"User for the Addon Assembly Kit as a Service (AAKaaS) system back to overview Scope Details Aliases - Type string Mandatory no Default $PIPER_username (if set) Secret yes Configuration scope \u2612 parameter \u2610 general \u2612 steps \u2612 stages Resource references none","title":"username"},{"location":"steps/abapAddonAssemblyKitRegisterPackages/#verbose","text":"verbose output back to overview Scope Details Aliases - Type bool Mandatory no Default false Possible values - true - false Secret no Configuration scope \u2612 parameter \u2612 general \u2612 steps \u2612 stages Resource references none","title":"verbose"},{"location":"steps/abapAddonAssemblyKitRegisterPackages/#abapaddonassemblykitcredentialsid","text":"Credential stored in Jenkins for the Addon Assembly Kit as a Service (AAKaaS) system back to overview Scope Details Aliases - Type string Configuration scope \u2612 parameter \u2612 general \u2612 steps \u2612 stages","title":"abapAddonAssemblyKitCredentialsId"},{"location":"steps/abapAddonAssemblyKitRegisterPackages/#abapaddonassemblykitcertificatefilecredentialsid","text":"Jenkins secret text credential ID containing the base64 encoded certificate pfx file (PKCS12 format) see note 2805811 back to overview Scope Details Aliases - Type string Configuration scope \u2612 parameter \u2612 general \u2612 steps \u2612 stages","title":"abapAddonAssemblyKitCertificateFileCredentialsId"},{"location":"steps/abapAddonAssemblyKitRegisterPackages/#abapaddonassemblykitcertificatepasscredentialsid","text":"Jenkins secret text credential ID containing the password to decrypt the certificate file stored in abapAddonAssemblyKitCertificateFileCredentialsId back to overview Scope Details Aliases - Type string Configuration scope \u2612 parameter \u2612 general \u2612 steps \u2612 stages","title":"abapAddonAssemblyKitCertificatePassCredentialsId"},{"location":"steps/abapAddonAssemblyKitRegisterPackages/#examples","text":"","title":"Examples"},{"location":"steps/abapAddonAssemblyKitRegisterPackages/#configuration-in-the-configyml","text":"The recommended way to configure your pipeline is via the config.yml file. In this case, calling the step in the Jenkinsfile is reduced to one line: abapAddonAssemblyKitRegisterPackages script: this If the step is to be configured individually the config.yml should look like this: steps : abapAddonAssemblyKitRegisterPackages : abapAddonAssemblyKitCredentialsId : 'abapAddonAssemblyKitCredentialsId' More convenient ways of configuration (e.g. on stage level) are described in the respective scenario/pipeline documentation.","title":"Configuration in the config.yml"},{"location":"steps/abapAddonAssemblyKitReleasePackages/","text":"abapAddonAssemblyKitReleasePackages \u00b6 This step releases the physical Delivery Packages Description \u00b6 This step takes the list of Software Component Versions from the addonDescriptor in the commonPipelineEnvironment. The physical Delivery Packages in status \u201cL\u201d are released. The new status \"R\"eleased is written back to the addonDescriptor in the commonPipelineEnvironment. For logon you can either provide a credential with basic authorization (username and password) or two secret text credentials containing the technical s-users certificate (see note 2805811 for download) as base64 encoded string and the password to decrypt the file For Terminology refer to the Scenario Description . Usage \u00b6 We recommend to define values of step parameters via .pipeline/config.yml file . In this case, calling the step is essentially reduced to defining the step name. Calling the step can be done either in an orchestrator specific way (e.g. via a Jenkins library step) or on the command line. Jenkins Command Line library ( 'piper-lib-os' ) abapAddonAssemblyKitReleasePackages script: this piper abapAddonAssemblyKitReleasePackages Outputs \u00b6 Output type Details commonPipelineEnvironment abap/addonDescriptor Prerequisites \u00b6 The credentials to access the AAKaaS (Technical Communication User) must be stored in the Jenkins Credential Store This step needs the names of the packages which should be released. The packages needs to be in status \"L\"ocked. If they are already in status \"R\"eleased it is fine, then the release will just not be executed. However this step will end with an error if a package has status \"P\"lanned. The package names are taken from the addonDescriptor in the commonPipelineEnvironment together with the status of the packages. The step abapAddonAssemblyKitRegisterPackages will set the status of the packages to \"L\"ocked and writes the needed data to the commonPipelineEnvironment. A detailed description of all prerequisites of the scenario and how to configure them can be found in the Scenario Description . Parameters \u00b6 Overview - Step \u00b6 Name Mandatory Additional information addonDescriptor yes script (yes) reference to Jenkins main pipeline script abapAddonAssemblyKitCertificateFile no pass via ENV or Jenkins credentials ( abapAddonAssemblyKitCertificateFileCredentialsId ) abapAddonAssemblyKitCertificatePass no pass via ENV or Jenkins credentials ( abapAddonAssemblyKitCertificatePassCredentialsId ) abapAddonAssemblyKitEndpoint no abapAddonAssemblyKitOriginHash no pass via ENV or Jenkins credentials maxRuntimeInMinutes no password no pollingIntervalInSeconds no username no verbose no activates debug output Overview - Execution Environment \u00b6 Orchestrator-specific only These parameters are relevant for orchestrator usage and not considered when using the command line option. Name Mandatory Additional information Details \u00b6 abapAddonAssemblyKitCertificateFile \u00b6 base64 encoded certificate pfx file (PKCS12 format) see note 2805811 back to overview Scope Details Aliases - Type string Mandatory no Default $PIPER_abapAddonAssemblyKitCertificateFile (if set) Secret yes Configuration scope \u2612 parameter \u2610 general \u2610 steps \u2610 stages Resource references Jenkins credential id: id: abapAddonAssemblyKitCertificateFileCredentialsId reference to: abapAddonAssemblyKitCertificateFile abapAddonAssemblyKitCertificatePass \u00b6 password to decrypt the certificate file back to overview Scope Details Aliases - Type string Mandatory no Default $PIPER_abapAddonAssemblyKitCertificatePass (if set) Secret yes Configuration scope \u2612 parameter \u2610 general \u2610 steps \u2610 stages Resource references Jenkins credential id: id: abapAddonAssemblyKitCertificatePassCredentialsId reference to: abapAddonAssemblyKitCertificatePass abapAddonAssemblyKitEndpoint \u00b6 Base URL to the Addon Assembly Kit as a Service (AAKaaS) system back to overview Scope Details Aliases - Type string Mandatory no Default https://apps.support.sap.com Secret no Configuration scope \u2612 parameter \u2612 general \u2612 steps \u2612 stages Resource references none abapAddonAssemblyKitOriginHash \u00b6 Origin Hash for restricted AAKaaS scenarios back to overview Scope Details Aliases - Type string Mandatory no Default $PIPER_abapAddonAssemblyKitOriginHash (if set) Secret yes Configuration scope \u2612 parameter \u2610 general \u2610 steps \u2610 stages Resource references none addonDescriptor \u00b6 Structure in the commonPipelineEnvironment containing information about the Product Version and corresponding Software Component Versions back to overview Scope Details Aliases - Type string Mandatory yes Default $PIPER_addonDescriptor (if set) Secret no Configuration scope \u2612 parameter \u2610 general \u2612 steps \u2612 stages Resource references commonPipelineEnvironment : reference to: abap/addonDescriptor maxRuntimeInMinutes \u00b6 Maximum runtime for status polling in minutes back to overview Scope Details Aliases - Type int Mandatory no Default 5 Secret no Configuration scope \u2612 parameter \u2612 general \u2612 steps \u2612 stages Resource references none password \u00b6 Password for the Addon Assembly Kit as a Service (AAKaaS) system back to overview Scope Details Aliases - Type string Mandatory no Default $PIPER_password (if set) Secret no Configuration scope \u2612 parameter \u2610 general \u2610 steps \u2610 stages Resource references none pollingIntervalInSeconds \u00b6 Wait time in seconds between polling calls back to overview Scope Details Aliases - Type int Mandatory no Default 30 Secret no Configuration scope \u2612 parameter \u2612 general \u2612 steps \u2612 stages Resource references none script \u00b6 The common script environment of the Jenkinsfile running. Typically the reference to the script calling the pipeline step is provided with the this parameter, as in script: this . This allows the function to access the commonPipelineEnvironment for retrieving, e.g. configuration parameters. back to overview Scope Details Aliases - Type Jenkins Script Mandatory yes Default Secret no Configuration scope \u2610 parameter \u2610 general \u2610 steps \u2610 stages Resource references none username \u00b6 User for the Addon Assembly Kit as a Service (AAKaaS) system back to overview Scope Details Aliases - Type string Mandatory no Default $PIPER_username (if set) Secret no Configuration scope \u2612 parameter \u2610 general \u2612 steps \u2612 stages Resource references none verbose \u00b6 verbose output back to overview Scope Details Aliases - Type bool Mandatory no Default false Possible values - true - false Secret no Configuration scope \u2612 parameter \u2612 general \u2612 steps \u2612 stages Resource references none abapAddonAssemblyKitCredentialsId \u00b6 Credential stored in Jenkins for the Addon Assembly Kit as a Service (AAKaaS) system back to overview Scope Details Aliases - Type string Configuration scope \u2612 parameter \u2612 general \u2612 steps \u2612 stages abapAddonAssemblyKitCertificateFileCredentialsId \u00b6 Jenkins secret text credential ID containing the base64 encoded certificate pfx file (PKCS12 format) see note 2805811 back to overview Scope Details Aliases - Type string Configuration scope \u2612 parameter \u2612 general \u2612 steps \u2612 stages abapAddonAssemblyKitCertificatePassCredentialsId \u00b6 Jenkins secret text credential ID containing the password to decrypt the certificate file stored in abapAddonAssemblyKitCertificateFileCredentialsId back to overview Scope Details Aliases - Type string Configuration scope \u2612 parameter \u2612 general \u2612 steps \u2612 stages Examples \u00b6 Configuration in the config.yml \u00b6 The recommended way to configure your pipeline is via the config.yml file. In this case, calling the step in the Jenkinsfile is reduced to one line: abapAddonAssemblyKitReleasePackages script: this If the step is to be configured individually the config.yml should look like this: steps : abapAddonAssemblyKitReleasePackages : abapAddonAssemblyKitCredentialsId : 'abapAddonAssemblyKitCredentialsId' More convenient ways of configuration (e.g. on stage level) are described in the respective scenario/pipeline documentation.","title":"ReleasePackages"},{"location":"steps/abapAddonAssemblyKitReleasePackages/#abapaddonassemblykitreleasepackages","text":"This step releases the physical Delivery Packages","title":"abapAddonAssemblyKitReleasePackages"},{"location":"steps/abapAddonAssemblyKitReleasePackages/#description","text":"This step takes the list of Software Component Versions from the addonDescriptor in the commonPipelineEnvironment. The physical Delivery Packages in status \u201cL\u201d are released. The new status \"R\"eleased is written back to the addonDescriptor in the commonPipelineEnvironment. For logon you can either provide a credential with basic authorization (username and password) or two secret text credentials containing the technical s-users certificate (see note 2805811 for download) as base64 encoded string and the password to decrypt the file For Terminology refer to the Scenario Description .","title":"Description"},{"location":"steps/abapAddonAssemblyKitReleasePackages/#usage","text":"We recommend to define values of step parameters via .pipeline/config.yml file . In this case, calling the step is essentially reduced to defining the step name. Calling the step can be done either in an orchestrator specific way (e.g. via a Jenkins library step) or on the command line. Jenkins Command Line library ( 'piper-lib-os' ) abapAddonAssemblyKitReleasePackages script: this piper abapAddonAssemblyKitReleasePackages","title":"Usage"},{"location":"steps/abapAddonAssemblyKitReleasePackages/#outputs","text":"Output type Details commonPipelineEnvironment abap/addonDescriptor","title":"Outputs"},{"location":"steps/abapAddonAssemblyKitReleasePackages/#prerequisites","text":"The credentials to access the AAKaaS (Technical Communication User) must be stored in the Jenkins Credential Store This step needs the names of the packages which should be released. The packages needs to be in status \"L\"ocked. If they are already in status \"R\"eleased it is fine, then the release will just not be executed. However this step will end with an error if a package has status \"P\"lanned. The package names are taken from the addonDescriptor in the commonPipelineEnvironment together with the status of the packages. The step abapAddonAssemblyKitRegisterPackages will set the status of the packages to \"L\"ocked and writes the needed data to the commonPipelineEnvironment. A detailed description of all prerequisites of the scenario and how to configure them can be found in the Scenario Description .","title":"Prerequisites"},{"location":"steps/abapAddonAssemblyKitReleasePackages/#parameters","text":"","title":"Parameters"},{"location":"steps/abapAddonAssemblyKitReleasePackages/#overview-step","text":"Name Mandatory Additional information addonDescriptor yes script (yes) reference to Jenkins main pipeline script abapAddonAssemblyKitCertificateFile no pass via ENV or Jenkins credentials ( abapAddonAssemblyKitCertificateFileCredentialsId ) abapAddonAssemblyKitCertificatePass no pass via ENV or Jenkins credentials ( abapAddonAssemblyKitCertificatePassCredentialsId ) abapAddonAssemblyKitEndpoint no abapAddonAssemblyKitOriginHash no pass via ENV or Jenkins credentials maxRuntimeInMinutes no password no pollingIntervalInSeconds no username no verbose no activates debug output","title":"Overview - Step"},{"location":"steps/abapAddonAssemblyKitReleasePackages/#overview-execution-environment","text":"Orchestrator-specific only These parameters are relevant for orchestrator usage and not considered when using the command line option. Name Mandatory Additional information","title":"Overview - Execution Environment"},{"location":"steps/abapAddonAssemblyKitReleasePackages/#details","text":"","title":"Details"},{"location":"steps/abapAddonAssemblyKitReleasePackages/#abapaddonassemblykitcertificatefile","text":"base64 encoded certificate pfx file (PKCS12 format) see note 2805811 back to overview Scope Details Aliases - Type string Mandatory no Default $PIPER_abapAddonAssemblyKitCertificateFile (if set) Secret yes Configuration scope \u2612 parameter \u2610 general \u2610 steps \u2610 stages Resource references Jenkins credential id: id: abapAddonAssemblyKitCertificateFileCredentialsId reference to: abapAddonAssemblyKitCertificateFile","title":"abapAddonAssemblyKitCertificateFile"},{"location":"steps/abapAddonAssemblyKitReleasePackages/#abapaddonassemblykitcertificatepass","text":"password to decrypt the certificate file back to overview Scope Details Aliases - Type string Mandatory no Default $PIPER_abapAddonAssemblyKitCertificatePass (if set) Secret yes Configuration scope \u2612 parameter \u2610 general \u2610 steps \u2610 stages Resource references Jenkins credential id: id: abapAddonAssemblyKitCertificatePassCredentialsId reference to: abapAddonAssemblyKitCertificatePass","title":"abapAddonAssemblyKitCertificatePass"},{"location":"steps/abapAddonAssemblyKitReleasePackages/#abapaddonassemblykitendpoint","text":"Base URL to the Addon Assembly Kit as a Service (AAKaaS) system back to overview Scope Details Aliases - Type string Mandatory no Default https://apps.support.sap.com Secret no Configuration scope \u2612 parameter \u2612 general \u2612 steps \u2612 stages Resource references none","title":"abapAddonAssemblyKitEndpoint"},{"location":"steps/abapAddonAssemblyKitReleasePackages/#abapaddonassemblykitoriginhash","text":"Origin Hash for restricted AAKaaS scenarios back to overview Scope Details Aliases - Type string Mandatory no Default $PIPER_abapAddonAssemblyKitOriginHash (if set) Secret yes Configuration scope \u2612 parameter \u2610 general \u2610 steps \u2610 stages Resource references none","title":"abapAddonAssemblyKitOriginHash"},{"location":"steps/abapAddonAssemblyKitReleasePackages/#addondescriptor","text":"Structure in the commonPipelineEnvironment containing information about the Product Version and corresponding Software Component Versions back to overview Scope Details Aliases - Type string Mandatory yes Default $PIPER_addonDescriptor (if set) Secret no Configuration scope \u2612 parameter \u2610 general \u2612 steps \u2612 stages Resource references commonPipelineEnvironment : reference to: abap/addonDescriptor","title":"addonDescriptor"},{"location":"steps/abapAddonAssemblyKitReleasePackages/#maxruntimeinminutes","text":"Maximum runtime for status polling in minutes back to overview Scope Details Aliases - Type int Mandatory no Default 5 Secret no Configuration scope \u2612 parameter \u2612 general \u2612 steps \u2612 stages Resource references none","title":"maxRuntimeInMinutes"},{"location":"steps/abapAddonAssemblyKitReleasePackages/#password","text":"Password for the Addon Assembly Kit as a Service (AAKaaS) system back to overview Scope Details Aliases - Type string Mandatory no Default $PIPER_password (if set) Secret no Configuration scope \u2612 parameter \u2610 general \u2610 steps \u2610 stages Resource references none","title":"password"},{"location":"steps/abapAddonAssemblyKitReleasePackages/#pollingintervalinseconds","text":"Wait time in seconds between polling calls back to overview Scope Details Aliases - Type int Mandatory no Default 30 Secret no Configuration scope \u2612 parameter \u2612 general \u2612 steps \u2612 stages Resource references none","title":"pollingIntervalInSeconds"},{"location":"steps/abapAddonAssemblyKitReleasePackages/#script","text":"The common script environment of the Jenkinsfile running. Typically the reference to the script calling the pipeline step is provided with the this parameter, as in script: this . This allows the function to access the commonPipelineEnvironment for retrieving, e.g. configuration parameters. back to overview Scope Details Aliases - Type Jenkins Script Mandatory yes Default Secret no Configuration scope \u2610 parameter \u2610 general \u2610 steps \u2610 stages Resource references none","title":"script"},{"location":"steps/abapAddonAssemblyKitReleasePackages/#username","text":"User for the Addon Assembly Kit as a Service (AAKaaS) system back to overview Scope Details Aliases - Type string Mandatory no Default $PIPER_username (if set) Secret no Configuration scope \u2612 parameter \u2610 general \u2612 steps \u2612 stages Resource references none","title":"username"},{"location":"steps/abapAddonAssemblyKitReleasePackages/#verbose","text":"verbose output back to overview Scope Details Aliases - Type bool Mandatory no Default false Possible values - true - false Secret no Configuration scope \u2612 parameter \u2612 general \u2612 steps \u2612 stages Resource references none","title":"verbose"},{"location":"steps/abapAddonAssemblyKitReleasePackages/#abapaddonassemblykitcredentialsid","text":"Credential stored in Jenkins for the Addon Assembly Kit as a Service (AAKaaS) system back to overview Scope Details Aliases - Type string Configuration scope \u2612 parameter \u2612 general \u2612 steps \u2612 stages","title":"abapAddonAssemblyKitCredentialsId"},{"location":"steps/abapAddonAssemblyKitReleasePackages/#abapaddonassemblykitcertificatefilecredentialsid","text":"Jenkins secret text credential ID containing the base64 encoded certificate pfx file (PKCS12 format) see note 2805811 back to overview Scope Details Aliases - Type string Configuration scope \u2612 parameter \u2612 general \u2612 steps \u2612 stages","title":"abapAddonAssemblyKitCertificateFileCredentialsId"},{"location":"steps/abapAddonAssemblyKitReleasePackages/#abapaddonassemblykitcertificatepasscredentialsid","text":"Jenkins secret text credential ID containing the password to decrypt the certificate file stored in abapAddonAssemblyKitCertificateFileCredentialsId back to overview Scope Details Aliases - Type string Configuration scope \u2612 parameter \u2612 general \u2612 steps \u2612 stages","title":"abapAddonAssemblyKitCertificatePassCredentialsId"},{"location":"steps/abapAddonAssemblyKitReleasePackages/#examples","text":"","title":"Examples"},{"location":"steps/abapAddonAssemblyKitReleasePackages/#configuration-in-the-configyml","text":"The recommended way to configure your pipeline is via the config.yml file. In this case, calling the step in the Jenkinsfile is reduced to one line: abapAddonAssemblyKitReleasePackages script: this If the step is to be configured individually the config.yml should look like this: steps : abapAddonAssemblyKitReleasePackages : abapAddonAssemblyKitCredentialsId : 'abapAddonAssemblyKitCredentialsId' More convenient ways of configuration (e.g. on stage level) are described in the respective scenario/pipeline documentation.","title":"Configuration in the config.yml"},{"location":"steps/abapAddonAssemblyKitReserveNextPackages/","text":"abapAddonAssemblyKitReserveNextPackages \u00b6 This step determines the ABAP delivery packages (name and type), which are needed to deliver Software Component Versions. Description \u00b6 This step takes the list of Software Component Versions from the addonDescriptor in the commonPipelineEnvironment and determines the ABAP delivery packages. If a package does not exist yet in the package registry, it is created there. The response contains detail information for this package and a package status, which determines the next actions: \"P\": Package was created in the registry; production can be started / continued \"R\": Package exists and is already released; production is not needed and will be skipped. The step waits until the status \"P\" or \"R\" is achieved. The name, type and namespace of each package is written back to the addonDescriptor in the commonPipelineEnvironment. For logon you can either provide a credential with basic authorization (username and password) or two secret text credentials containing the technical s-users certificate (see note 2805811 for download) as base64 encoded string and the password to decrypt the file For Terminology refer to the Scenario Description . Usage \u00b6 We recommend to define values of step parameters via .pipeline/config.yml file . In this case, calling the step is essentially reduced to defining the step name. Calling the step can be done either in an orchestrator specific way (e.g. via a Jenkins library step) or on the command line. Jenkins Command Line library ( 'piper-lib-os' ) abapAddonAssemblyKitReserveNextPackages script: this piper abapAddonAssemblyKitReserveNextPackages Outputs \u00b6 Output type Details commonPipelineEnvironment abap/addonDescriptor Prerequisites \u00b6 The credentials to access the AAKaaS (Technical Communication User) must be stored in the Jenkins Credential Store The step needs information about the Software Component Versions for which packages should be reserved. This information is provided via the addonDescriptor in the commonPipelineEnvironment where the fields 'name' and 'version' in the repositories list need to be filled. The Software Component Versions must be valid. The validation is performed and the required information is written to the CommonPipelineEnvironment if you run prior to this step the step abapAddonAssemblyKitCheckCVs A detailed description of all prerequisites of the scenario and how to configure them can be found in the Scenario Description . Parameters \u00b6 Overview - Step \u00b6 Name Mandatory Additional information addonDescriptor yes script (yes) reference to Jenkins main pipeline script abapAddonAssemblyKitCertificateFile no pass via ENV or Jenkins credentials ( abapAddonAssemblyKitCertificateFileCredentialsId ) abapAddonAssemblyKitCertificatePass no pass via ENV or Jenkins credentials ( abapAddonAssemblyKitCertificatePassCredentialsId ) abapAddonAssemblyKitEndpoint no abapAddonAssemblyKitOriginHash no pass via ENV or Jenkins credentials maxRuntimeInMinutes no password no pass via ENV or Jenkins credentials pollingIntervalInSeconds no username no pass via ENV or Jenkins credentials verbose no activates debug output Overview - Execution Environment \u00b6 Orchestrator-specific only These parameters are relevant for orchestrator usage and not considered when using the command line option. Name Mandatory Additional information Details \u00b6 abapAddonAssemblyKitCertificateFile \u00b6 base64 encoded certificate pfx file (PKCS12 format) see note 2805811 back to overview Scope Details Aliases - Type string Mandatory no Default $PIPER_abapAddonAssemblyKitCertificateFile (if set) Secret yes Configuration scope \u2612 parameter \u2610 general \u2610 steps \u2610 stages Resource references Jenkins credential id: id: abapAddonAssemblyKitCertificateFileCredentialsId reference to: abapAddonAssemblyKitCertificateFile abapAddonAssemblyKitCertificatePass \u00b6 password to decrypt the certificate file back to overview Scope Details Aliases - Type string Mandatory no Default $PIPER_abapAddonAssemblyKitCertificatePass (if set) Secret yes Configuration scope \u2612 parameter \u2610 general \u2610 steps \u2610 stages Resource references Jenkins credential id: id: abapAddonAssemblyKitCertificatePassCredentialsId reference to: abapAddonAssemblyKitCertificatePass abapAddonAssemblyKitEndpoint \u00b6 Base URL to the Addon Assembly Kit as a Service (AAKaaS) system back to overview Scope Details Aliases - Type string Mandatory no Default https://apps.support.sap.com Secret no Configuration scope \u2612 parameter \u2612 general \u2612 steps \u2612 stages Resource references none abapAddonAssemblyKitOriginHash \u00b6 Origin Hash for restricted AAKaaS scenarios back to overview Scope Details Aliases - Type string Mandatory no Default $PIPER_abapAddonAssemblyKitOriginHash (if set) Secret yes Configuration scope \u2612 parameter \u2610 general \u2610 steps \u2610 stages Resource references none addonDescriptor \u00b6 Structure in the commonPipelineEnvironment containing information about the Product Version and corresponding Software Component Versions back to overview Scope Details Aliases - Type string Mandatory yes Default $PIPER_addonDescriptor (if set) Secret no Configuration scope \u2612 parameter \u2610 general \u2612 steps \u2612 stages Resource references commonPipelineEnvironment : reference to: abap/addonDescriptor maxRuntimeInMinutes \u00b6 Maximum runtime for status polling in minutes back to overview Scope Details Aliases - Type int Mandatory no Default 5 Secret no Configuration scope \u2612 parameter \u2612 general \u2612 steps \u2612 stages Resource references none password \u00b6 Password for the Addon Assembly Kit as a Service (AAKaaS) system back to overview Scope Details Aliases - Type string Mandatory no Default $PIPER_password (if set) Secret yes Configuration scope \u2612 parameter \u2610 general \u2610 steps \u2610 stages Resource references none pollingIntervalInSeconds \u00b6 Wait time in seconds between polling calls back to overview Scope Details Aliases - Type int Mandatory no Default 30 Secret no Configuration scope \u2612 parameter \u2612 general \u2612 steps \u2612 stages Resource references none script \u00b6 The common script environment of the Jenkinsfile running. Typically the reference to the script calling the pipeline step is provided with the this parameter, as in script: this . This allows the function to access the commonPipelineEnvironment for retrieving, e.g. configuration parameters. back to overview Scope Details Aliases - Type Jenkins Script Mandatory yes Default Secret no Configuration scope \u2610 parameter \u2610 general \u2610 steps \u2610 stages Resource references none username \u00b6 User for the Addon Assembly Kit as a Service (AAKaaS) system back to overview Scope Details Aliases - Type string Mandatory no Default $PIPER_username (if set) Secret yes Configuration scope \u2612 parameter \u2610 general \u2612 steps \u2612 stages Resource references none verbose \u00b6 verbose output back to overview Scope Details Aliases - Type bool Mandatory no Default false Possible values - true - false Secret no Configuration scope \u2612 parameter \u2612 general \u2612 steps \u2612 stages Resource references none abapAddonAssemblyKitCredentialsId \u00b6 Credential stored in Jenkins for the Addon Assembly Kit as a Service (AAKaaS) system back to overview Scope Details Aliases - Type string Configuration scope \u2612 parameter \u2612 general \u2612 steps \u2612 stages abapAddonAssemblyKitCertificateFileCredentialsId \u00b6 Jenkins secret text credential ID containing the base64 encoded certificate pfx file (PKCS12 format) see note 2805811 back to overview Scope Details Aliases - Type string Configuration scope \u2612 parameter \u2612 general \u2612 steps \u2612 stages abapAddonAssemblyKitCertificatePassCredentialsId \u00b6 Jenkins secret text credential ID containing the password to decrypt the certificate file stored in abapAddonAssemblyKitCertificateFileCredentialsId back to overview Scope Details Aliases - Type string Configuration scope \u2612 parameter \u2612 general \u2612 steps \u2612 stages Examples \u00b6 Configuration in the config.yml \u00b6 The recommended way to configure your pipeline is via the config.yml file. In this case, calling the step in the Jenkinsfile is reduced to one line: abapAddonAssemblyKitReserveNextPackages script: this If the step is to be configured individually the config.yml should look like this: steps : abapAddonAssemblyKitReserveNextPackages : abapAddonAssemblyKitCredentialsId : 'abapAddonAssemblyKitCredentialsId' More convenient ways of configuration (e.g. on stage level) are described in the respective scenario/pipeline documentation.","title":"ReserveNextPackages"},{"location":"steps/abapAddonAssemblyKitReserveNextPackages/#abapaddonassemblykitreservenextpackages","text":"This step determines the ABAP delivery packages (name and type), which are needed to deliver Software Component Versions.","title":"abapAddonAssemblyKitReserveNextPackages"},{"location":"steps/abapAddonAssemblyKitReserveNextPackages/#description","text":"This step takes the list of Software Component Versions from the addonDescriptor in the commonPipelineEnvironment and determines the ABAP delivery packages. If a package does not exist yet in the package registry, it is created there. The response contains detail information for this package and a package status, which determines the next actions: \"P\": Package was created in the registry; production can be started / continued \"R\": Package exists and is already released; production is not needed and will be skipped. The step waits until the status \"P\" or \"R\" is achieved. The name, type and namespace of each package is written back to the addonDescriptor in the commonPipelineEnvironment. For logon you can either provide a credential with basic authorization (username and password) or two secret text credentials containing the technical s-users certificate (see note 2805811 for download) as base64 encoded string and the password to decrypt the file For Terminology refer to the Scenario Description .","title":"Description"},{"location":"steps/abapAddonAssemblyKitReserveNextPackages/#usage","text":"We recommend to define values of step parameters via .pipeline/config.yml file . In this case, calling the step is essentially reduced to defining the step name. Calling the step can be done either in an orchestrator specific way (e.g. via a Jenkins library step) or on the command line. Jenkins Command Line library ( 'piper-lib-os' ) abapAddonAssemblyKitReserveNextPackages script: this piper abapAddonAssemblyKitReserveNextPackages","title":"Usage"},{"location":"steps/abapAddonAssemblyKitReserveNextPackages/#outputs","text":"Output type Details commonPipelineEnvironment abap/addonDescriptor","title":"Outputs"},{"location":"steps/abapAddonAssemblyKitReserveNextPackages/#prerequisites","text":"The credentials to access the AAKaaS (Technical Communication User) must be stored in the Jenkins Credential Store The step needs information about the Software Component Versions for which packages should be reserved. This information is provided via the addonDescriptor in the commonPipelineEnvironment where the fields 'name' and 'version' in the repositories list need to be filled. The Software Component Versions must be valid. The validation is performed and the required information is written to the CommonPipelineEnvironment if you run prior to this step the step abapAddonAssemblyKitCheckCVs A detailed description of all prerequisites of the scenario and how to configure them can be found in the Scenario Description .","title":"Prerequisites"},{"location":"steps/abapAddonAssemblyKitReserveNextPackages/#parameters","text":"","title":"Parameters"},{"location":"steps/abapAddonAssemblyKitReserveNextPackages/#overview-step","text":"Name Mandatory Additional information addonDescriptor yes script (yes) reference to Jenkins main pipeline script abapAddonAssemblyKitCertificateFile no pass via ENV or Jenkins credentials ( abapAddonAssemblyKitCertificateFileCredentialsId ) abapAddonAssemblyKitCertificatePass no pass via ENV or Jenkins credentials ( abapAddonAssemblyKitCertificatePassCredentialsId ) abapAddonAssemblyKitEndpoint no abapAddonAssemblyKitOriginHash no pass via ENV or Jenkins credentials maxRuntimeInMinutes no password no pass via ENV or Jenkins credentials pollingIntervalInSeconds no username no pass via ENV or Jenkins credentials verbose no activates debug output","title":"Overview - Step"},{"location":"steps/abapAddonAssemblyKitReserveNextPackages/#overview-execution-environment","text":"Orchestrator-specific only These parameters are relevant for orchestrator usage and not considered when using the command line option. Name Mandatory Additional information","title":"Overview - Execution Environment"},{"location":"steps/abapAddonAssemblyKitReserveNextPackages/#details","text":"","title":"Details"},{"location":"steps/abapAddonAssemblyKitReserveNextPackages/#abapaddonassemblykitcertificatefile","text":"base64 encoded certificate pfx file (PKCS12 format) see note 2805811 back to overview Scope Details Aliases - Type string Mandatory no Default $PIPER_abapAddonAssemblyKitCertificateFile (if set) Secret yes Configuration scope \u2612 parameter \u2610 general \u2610 steps \u2610 stages Resource references Jenkins credential id: id: abapAddonAssemblyKitCertificateFileCredentialsId reference to: abapAddonAssemblyKitCertificateFile","title":"abapAddonAssemblyKitCertificateFile"},{"location":"steps/abapAddonAssemblyKitReserveNextPackages/#abapaddonassemblykitcertificatepass","text":"password to decrypt the certificate file back to overview Scope Details Aliases - Type string Mandatory no Default $PIPER_abapAddonAssemblyKitCertificatePass (if set) Secret yes Configuration scope \u2612 parameter \u2610 general \u2610 steps \u2610 stages Resource references Jenkins credential id: id: abapAddonAssemblyKitCertificatePassCredentialsId reference to: abapAddonAssemblyKitCertificatePass","title":"abapAddonAssemblyKitCertificatePass"},{"location":"steps/abapAddonAssemblyKitReserveNextPackages/#abapaddonassemblykitendpoint","text":"Base URL to the Addon Assembly Kit as a Service (AAKaaS) system back to overview Scope Details Aliases - Type string Mandatory no Default https://apps.support.sap.com Secret no Configuration scope \u2612 parameter \u2612 general \u2612 steps \u2612 stages Resource references none","title":"abapAddonAssemblyKitEndpoint"},{"location":"steps/abapAddonAssemblyKitReserveNextPackages/#abapaddonassemblykitoriginhash","text":"Origin Hash for restricted AAKaaS scenarios back to overview Scope Details Aliases - Type string Mandatory no Default $PIPER_abapAddonAssemblyKitOriginHash (if set) Secret yes Configuration scope \u2612 parameter \u2610 general \u2610 steps \u2610 stages Resource references none","title":"abapAddonAssemblyKitOriginHash"},{"location":"steps/abapAddonAssemblyKitReserveNextPackages/#addondescriptor","text":"Structure in the commonPipelineEnvironment containing information about the Product Version and corresponding Software Component Versions back to overview Scope Details Aliases - Type string Mandatory yes Default $PIPER_addonDescriptor (if set) Secret no Configuration scope \u2612 parameter \u2610 general \u2612 steps \u2612 stages Resource references commonPipelineEnvironment : reference to: abap/addonDescriptor","title":"addonDescriptor"},{"location":"steps/abapAddonAssemblyKitReserveNextPackages/#maxruntimeinminutes","text":"Maximum runtime for status polling in minutes back to overview Scope Details Aliases - Type int Mandatory no Default 5 Secret no Configuration scope \u2612 parameter \u2612 general \u2612 steps \u2612 stages Resource references none","title":"maxRuntimeInMinutes"},{"location":"steps/abapAddonAssemblyKitReserveNextPackages/#password","text":"Password for the Addon Assembly Kit as a Service (AAKaaS) system back to overview Scope Details Aliases - Type string Mandatory no Default $PIPER_password (if set) Secret yes Configuration scope \u2612 parameter \u2610 general \u2610 steps \u2610 stages Resource references none","title":"password"},{"location":"steps/abapAddonAssemblyKitReserveNextPackages/#pollingintervalinseconds","text":"Wait time in seconds between polling calls back to overview Scope Details Aliases - Type int Mandatory no Default 30 Secret no Configuration scope \u2612 parameter \u2612 general \u2612 steps \u2612 stages Resource references none","title":"pollingIntervalInSeconds"},{"location":"steps/abapAddonAssemblyKitReserveNextPackages/#script","text":"The common script environment of the Jenkinsfile running. Typically the reference to the script calling the pipeline step is provided with the this parameter, as in script: this . This allows the function to access the commonPipelineEnvironment for retrieving, e.g. configuration parameters. back to overview Scope Details Aliases - Type Jenkins Script Mandatory yes Default Secret no Configuration scope \u2610 parameter \u2610 general \u2610 steps \u2610 stages Resource references none","title":"script"},{"location":"steps/abapAddonAssemblyKitReserveNextPackages/#username","text":"User for the Addon Assembly Kit as a Service (AAKaaS) system back to overview Scope Details Aliases - Type string Mandatory no Default $PIPER_username (if set) Secret yes Configuration scope \u2612 parameter \u2610 general \u2612 steps \u2612 stages Resource references none","title":"username"},{"location":"steps/abapAddonAssemblyKitReserveNextPackages/#verbose","text":"verbose output back to overview Scope Details Aliases - Type bool Mandatory no Default false Possible values - true - false Secret no Configuration scope \u2612 parameter \u2612 general \u2612 steps \u2612 stages Resource references none","title":"verbose"},{"location":"steps/abapAddonAssemblyKitReserveNextPackages/#abapaddonassemblykitcredentialsid","text":"Credential stored in Jenkins for the Addon Assembly Kit as a Service (AAKaaS) system back to overview Scope Details Aliases - Type string Configuration scope \u2612 parameter \u2612 general \u2612 steps \u2612 stages","title":"abapAddonAssemblyKitCredentialsId"},{"location":"steps/abapAddonAssemblyKitReserveNextPackages/#abapaddonassemblykitcertificatefilecredentialsid","text":"Jenkins secret text credential ID containing the base64 encoded certificate pfx file (PKCS12 format) see note 2805811 back to overview Scope Details Aliases - Type string Configuration scope \u2612 parameter \u2612 general \u2612 steps \u2612 stages","title":"abapAddonAssemblyKitCertificateFileCredentialsId"},{"location":"steps/abapAddonAssemblyKitReserveNextPackages/#abapaddonassemblykitcertificatepasscredentialsid","text":"Jenkins secret text credential ID containing the password to decrypt the certificate file stored in abapAddonAssemblyKitCertificateFileCredentialsId back to overview Scope Details Aliases - Type string Configuration scope \u2612 parameter \u2612 general \u2612 steps \u2612 stages","title":"abapAddonAssemblyKitCertificatePassCredentialsId"},{"location":"steps/abapAddonAssemblyKitReserveNextPackages/#examples","text":"","title":"Examples"},{"location":"steps/abapAddonAssemblyKitReserveNextPackages/#configuration-in-the-configyml","text":"The recommended way to configure your pipeline is via the config.yml file. In this case, calling the step in the Jenkinsfile is reduced to one line: abapAddonAssemblyKitReserveNextPackages script: this If the step is to be configured individually the config.yml should look like this: steps : abapAddonAssemblyKitReserveNextPackages : abapAddonAssemblyKitCredentialsId : 'abapAddonAssemblyKitCredentialsId' More convenient ways of configuration (e.g. on stage level) are described in the respective scenario/pipeline documentation.","title":"Configuration in the config.yml"},{"location":"steps/abapEnvironmentAssembleConfirm/","text":"abapEnvironmentAssembleConfirm \u00b6 Confirm the Delivery of Assembly for installation, support package or patch in SAP BTP ABAP Environment system Description \u00b6 This step confirms the assemblies of provided [installations, support packages or patches] in SAP BTP ABAP Environment system Usage \u00b6 We recommend to define values of step parameters via .pipeline/config.yml file . In this case, calling the step is essentially reduced to defining the step name. Calling the step can be done either in an orchestrator specific way (e.g. via a Jenkins library step) or on the command line. Jenkins Command Line library ( 'piper-lib-os' ) abapEnvironmentAssembleConfirm script: this piper abapEnvironmentAssembleConfirm Outputs \u00b6 Output type Details commonPipelineEnvironment abap/addonDescriptor Prerequisites \u00b6 A SAP BTP, ABAP environment system is available. This can be created manually on Cloud Foundry. In a pipeline, you can do this, for example, with the step cloudFoundryCreateService . Communication Scenario \u201cSAP BTP, ABAP Environment - Software Assembly Integration (SAP_COM_0582)\u201c is setup for this system. E.g. a Communication User , a Communication System and a Communication Arrangement are configured. This can be done manually through the respective applications on the SAP BTP, ABAP environment system, or through creating a service key for the system on Cloud Foundry with the parameters {\u201cscenario_id\u201d: \u201cSAP_COM_0582\", \u201ctype\u201d: \u201cbasic\u201d}. In a pipeline, you can do this, for example, with the step cloudFoundryCreateServiceKey . You have following options to provide the ABAP endpoint configuration: The host and credentials the SAP BTP, ABAP environment system itself. The credentials must be configured for the Communication Scenario SAP_COM_0582. The Cloud Foundry parameters (API endpoint, organization, space), credentials, the service instance for the ABAP service and the service key for the Communication Scenario SAP_COM_0582. Only provide one of those options with the respective credentials. If all values are provided, the direct communication (via host) has priority. The step needs information about the packages which should be assembled present in the CommonPipelineEnvironment. For each repository/component version it needs the name of the repository, the version, splevel, patchlevel, namespace, packagename, package type, the status of the package, and optional the predecessor commit id. To upload this information to the CommonPipelineEnvironment run prior to this step the steps: abapAddonAssemblyKitCheckCVs , abapAddonAssemblyKitReserveNextPackages . If one of the package is already in status released, the assembly for this package will not be executed. The Software Components for which packages are to be assembled need to be present in the system. This can be done manually through the respective applications on the SAP BTP, ABAP environment system. In a pipeline, you can do this, for example, with the step abapEnvironmentPullGitRepo . The packages to be assembled need to be reserved in AAKaaS and the corresponding information needs to be present in CommonPipelineEnvironment. To do so run step abapAddonAssemblyKitReserveNextPackages prior this step. Parameters \u00b6 Overview - Step \u00b6 Name Mandatory Additional information addonDescriptor yes password (yes) pass via ENV or Jenkins credentials script (yes) reference to Jenkins main pipeline script username (yes) pass via ENV or Jenkins credentials certificateNames no cfApiEndpoint no cfOrg no cfServiceInstance no cfServiceKeyName no cfSpace no host no maxRuntimeInMinutes no verbose no activates debug output Overview - Execution Environment \u00b6 Orchestrator-specific only These parameters are relevant for orchestrator usage and not considered when using the command line option. Name Mandatory Additional information containerCommand no containerShell no dockerEnvVars no dockerImage no dockerName no dockerOptions no dockerPullImage no dockerVolumeBind no dockerWorkspace no Details \u00b6 addonDescriptor \u00b6 Structure in the commonPipelineEnvironment containing information about the Product Version and corresponding Software Component Versions back to overview Scope Details Aliases - Type string Mandatory yes Default $PIPER_addonDescriptor (if set) Secret no Configuration scope \u2612 parameter \u2610 general \u2612 steps \u2612 stages Resource references commonPipelineEnvironment : reference to: abap/addonDescriptor certificateNames \u00b6 certificates for the backend system, this certificates needs to be stored in .pipeline/trustStore back to overview Scope Details Aliases - Type []string Mandatory no Default $PIPER_certificateNames (if set) Secret no Configuration scope \u2612 parameter \u2612 general \u2612 steps \u2612 stages Resource references none cfApiEndpoint \u00b6 Cloud Foundry API endpoint back to overview Scope Details Aliases cloudFoundry/apiEndpoint Type string Mandatory no Default $PIPER_cfApiEndpoint (if set) Secret no Configuration scope \u2612 parameter \u2612 general \u2612 steps \u2612 stages Resource references none cfOrg \u00b6 Cloud Foundry target organization back to overview Scope Details Aliases cloudFoundry/org Type string Mandatory no Default $PIPER_cfOrg (if set) Secret no Configuration scope \u2612 parameter \u2612 general \u2612 steps \u2612 stages Resource references none cfServiceInstance \u00b6 Cloud Foundry Service Instance back to overview Scope Details Aliases cloudFoundry/serviceInstance Type string Mandatory no Default $PIPER_cfServiceInstance (if set) Secret no Configuration scope \u2612 parameter \u2612 general \u2612 steps \u2612 stages Resource references none cfServiceKeyName \u00b6 Cloud Foundry Service Key back to overview Scope Details Aliases - cloudFoundry/serviceKey - cloudFoundry/serviceKeyName - cfServiceKey Type string Mandatory no Default $PIPER_cfServiceKeyName (if set) Secret no Configuration scope \u2612 parameter \u2612 general \u2612 steps \u2612 stages Resource references none cfSpace \u00b6 Cloud Foundry target space back to overview Scope Details Aliases cloudFoundry/space Type string Mandatory no Default $PIPER_cfSpace (if set) Secret no Configuration scope \u2612 parameter \u2612 general \u2612 steps \u2612 stages Resource references none containerCommand \u00b6 Jenkins-specific: Used for proper environment setup. Kubernetes only: Allows to specify start command for container created with dockerImage parameter to overwrite Piper default (/usr/bin/tail -f /dev/null). back to overview Scope Details Aliases - Type string Mandatory no Default Secret no Configuration scope \u2612 parameter \u2612 general \u2612 steps \u2612 stages Resource references none containerShell \u00b6 Jenkins-specific: Used for proper environment setup. Allows to specify the shell to be executed for container with containerName. back to overview Scope Details Aliases - Type string Mandatory no Default Secret no Configuration scope \u2612 parameter \u2612 general \u2612 steps \u2612 stages Resource references none dockerEnvVars \u00b6 Environment variables to set in the container, e.g. [http_proxy: \"proxy:8080\"]. back to overview Scope Details Aliases - Type map[string]string Mandatory no Default Secret no Configuration scope \u2612 parameter \u2612 general \u2612 steps \u2612 stages Resource references none dockerImage \u00b6 Name of the docker image that should be used. If empty, Docker is not used and the command is executed directly on the Jenkins system. back to overview Scope Details Aliases - Type string Mandatory no Default ppiper/cf-cli:latest Secret no Configuration scope \u2612 parameter \u2612 general \u2612 steps \u2612 stages Resource references none dockerName \u00b6 Kubernetes only: Name of the container launching dockerImage. SideCar only: Name of the container in local network. back to overview Scope Details Aliases - Type string Mandatory no Default cf Secret no Configuration scope \u2612 parameter \u2612 general \u2612 steps \u2612 stages Resource references none dockerOptions \u00b6 Docker options to be set when starting the container. back to overview Scope Details Aliases - Type []string Mandatory no Default Secret no Configuration scope \u2612 parameter \u2612 general \u2612 steps \u2612 stages Resource references none dockerPullImage \u00b6 Set this to 'false' to bypass a docker image pull. Useful during development process. Allows testing of images which are available in the local registry only. back to overview Scope Details Aliases - Type bool Mandatory no Default true Possible values - true - false Secret no Configuration scope \u2612 parameter \u2612 general \u2612 steps \u2612 stages Resource references none dockerVolumeBind \u00b6 Jenkins-specific: Used for proper environment setup. Volumes that should be mounted into the docker container. back to overview Scope Details Aliases - Type map[string]string Mandatory no Default Secret no Configuration scope \u2612 parameter \u2612 general \u2612 steps \u2612 stages Resource references none dockerWorkspace \u00b6 Jenkins-specific: Used for proper environment setup. Kubernetes only: Specifies a dedicated user home directory for the container which will be passed as value for environment variable HOME . back to overview Scope Details Aliases - Type string Mandatory no Default Secret no Configuration scope \u2612 parameter \u2612 general \u2612 steps \u2612 stages Resource references none host \u00b6 Specifies the host address of the SAP BTP ABAP Environment system back to overview Scope Details Aliases - Type string Mandatory no Default $PIPER_host (if set) Secret no Configuration scope \u2612 parameter \u2612 general \u2612 steps \u2612 stages Resource references none maxRuntimeInMinutes \u00b6 maximal runtime of the step back to overview Scope Details Aliases - Type int Mandatory no Default 360 Secret no Configuration scope \u2612 parameter \u2610 general \u2612 steps \u2612 stages Resource references none password \u00b6 Password for either the Cloud Foundry API or the Communication Arrangement for SAP_COM_0582 back to overview Scope Details Aliases - Type string Mandatory yes Default $PIPER_password (if set) Secret yes Configuration scope \u2612 parameter \u2610 general \u2612 steps \u2612 stages Resource references none script \u00b6 The common script environment of the Jenkinsfile running. Typically the reference to the script calling the pipeline step is provided with the this parameter, as in script: this . This allows the function to access the commonPipelineEnvironment for retrieving, e.g. configuration parameters. back to overview Scope Details Aliases - Type Jenkins Script Mandatory yes Default Secret no Configuration scope \u2610 parameter \u2610 general \u2610 steps \u2610 stages Resource references none username \u00b6 User for either the Cloud Foundry API or the Communication Arrangement for SAP_COM_0582 back to overview Scope Details Aliases - Type string Mandatory yes Default $PIPER_username (if set) Secret yes Configuration scope \u2612 parameter \u2610 general \u2612 steps \u2612 stages Resource references none verbose \u00b6 verbose output back to overview Scope Details Aliases - Type bool Mandatory no Default false Possible values - true - false Secret no Configuration scope \u2612 parameter \u2612 general \u2612 steps \u2612 stages Resource references none abapCredentialsId \u00b6 Jenkins credentials ID containing user and password to authenticate to the Cloud Platform ABAP Environment system or the Cloud Foundry API back to overview Scope Details Aliases - cfCredentialsId - credentialsId Type string Configuration scope \u2612 parameter \u2612 general \u2612 steps \u2612 stages Examples \u00b6 Configuration in the config.yml \u00b6 The recommended way to configure your pipeline is via the config.yml file. In this case, calling the step in the Jenkinsfile is reduced to one line: abapEnvironmentAssembleConfirm script: this If you want to provide the host and credentials of the Communication Arrangement directly, the configuration could look as follows: steps : abapEnvironmentAssembleConfirm : abapCredentialsId : 'abapCredentialsId' , host : 'https://myABAPendpoint.com' , Or by authenticating against Cloud Foundry and reading the Service Key details from there: steps : abapEnvironmentAssembleConfirm : abapCredentialsId : 'cfCredentialsId' , cfApiEndpoint : 'https://test.server.com' , cfOrg : 'cfOrg' , cfSpace : 'cfSpace' , cfServiceInstance : 'myServiceInstance' , cfServiceKeyName : 'myServiceKey' , Input via the CommonPipelineEnvironment \u00b6 { \"addonProduct\" : \"\" , \"addonVersion\" : \"\" , \"addonVersionAAK\" : \"\" , \"addonUniqueID\" : \"\" , \"customerID\" : \"\" , \"AddonSpsLevel\" : \"\" , \"AddonPatchLevel\" : \"\" , \"TargetVectorID\" : \"\" , \"repositories\" :[ { \"name\" : \"/DMO/REPO_A\" , \"tag\" : \"\" , \"branch\" : \"\" , \"version\" : \"\" , \"versionAAK\" : \"0001\" , \"PackageName\" : \"SAPK001001REPOA\" , \"PackageType\" : \"CPK\" , \"SpLevel\" : \"0000\" , \"PatchLevel\" : \"0001\" , \"PredecessorCommitID\" : \"cbb834e9e03cde177d2f109a6676901972983fbc\" , \"Status\" : \"P\" , \"Namespace\" : \"/DMO/\" , \"SarXMLFilePath\" : \"\" }, { \"name\" : \"/DMO/REPO_B\" , \"tag\" : \"\" , \"branch\" : \"\" , \"version\" : \"\" , \"versionAAK\" : \"0002\" , \"PackageName\" : \"SAPK002001REPOB\" , \"PackageType\" : \"CPK\" , \"SpLevel\" : \"0001\" , \"PatchLevel\" : \"0001\" , \"PredecessorCommitID\" : \"2f7d43923c041a07a76c8adc859c737ad772ef26\" , \"Status\" : \"P\" , \"Namespace\" : \"/DMO/\" , \"SarXMLFilePath\" : \"\" } ]}","title":"abapEnvironmentAssembleConfirm"},{"location":"steps/abapEnvironmentAssembleConfirm/#abapenvironmentassembleconfirm","text":"Confirm the Delivery of Assembly for installation, support package or patch in SAP BTP ABAP Environment system","title":"abapEnvironmentAssembleConfirm"},{"location":"steps/abapEnvironmentAssembleConfirm/#description","text":"This step confirms the assemblies of provided [installations, support packages or patches] in SAP BTP ABAP Environment system","title":"Description"},{"location":"steps/abapEnvironmentAssembleConfirm/#usage","text":"We recommend to define values of step parameters via .pipeline/config.yml file . In this case, calling the step is essentially reduced to defining the step name. Calling the step can be done either in an orchestrator specific way (e.g. via a Jenkins library step) or on the command line. Jenkins Command Line library ( 'piper-lib-os' ) abapEnvironmentAssembleConfirm script: this piper abapEnvironmentAssembleConfirm","title":"Usage"},{"location":"steps/abapEnvironmentAssembleConfirm/#outputs","text":"Output type Details commonPipelineEnvironment abap/addonDescriptor","title":"Outputs"},{"location":"steps/abapEnvironmentAssembleConfirm/#prerequisites","text":"A SAP BTP, ABAP environment system is available. This can be created manually on Cloud Foundry. In a pipeline, you can do this, for example, with the step cloudFoundryCreateService . Communication Scenario \u201cSAP BTP, ABAP Environment - Software Assembly Integration (SAP_COM_0582)\u201c is setup for this system. E.g. a Communication User , a Communication System and a Communication Arrangement are configured. This can be done manually through the respective applications on the SAP BTP, ABAP environment system, or through creating a service key for the system on Cloud Foundry with the parameters {\u201cscenario_id\u201d: \u201cSAP_COM_0582\", \u201ctype\u201d: \u201cbasic\u201d}. In a pipeline, you can do this, for example, with the step cloudFoundryCreateServiceKey . You have following options to provide the ABAP endpoint configuration: The host and credentials the SAP BTP, ABAP environment system itself. The credentials must be configured for the Communication Scenario SAP_COM_0582. The Cloud Foundry parameters (API endpoint, organization, space), credentials, the service instance for the ABAP service and the service key for the Communication Scenario SAP_COM_0582. Only provide one of those options with the respective credentials. If all values are provided, the direct communication (via host) has priority. The step needs information about the packages which should be assembled present in the CommonPipelineEnvironment. For each repository/component version it needs the name of the repository, the version, splevel, patchlevel, namespace, packagename, package type, the status of the package, and optional the predecessor commit id. To upload this information to the CommonPipelineEnvironment run prior to this step the steps: abapAddonAssemblyKitCheckCVs , abapAddonAssemblyKitReserveNextPackages . If one of the package is already in status released, the assembly for this package will not be executed. The Software Components for which packages are to be assembled need to be present in the system. This can be done manually through the respective applications on the SAP BTP, ABAP environment system. In a pipeline, you can do this, for example, with the step abapEnvironmentPullGitRepo . The packages to be assembled need to be reserved in AAKaaS and the corresponding information needs to be present in CommonPipelineEnvironment. To do so run step abapAddonAssemblyKitReserveNextPackages prior this step.","title":"Prerequisites"},{"location":"steps/abapEnvironmentAssembleConfirm/#parameters","text":"","title":"Parameters"},{"location":"steps/abapEnvironmentAssembleConfirm/#overview-step","text":"Name Mandatory Additional information addonDescriptor yes password (yes) pass via ENV or Jenkins credentials script (yes) reference to Jenkins main pipeline script username (yes) pass via ENV or Jenkins credentials certificateNames no cfApiEndpoint no cfOrg no cfServiceInstance no cfServiceKeyName no cfSpace no host no maxRuntimeInMinutes no verbose no activates debug output","title":"Overview - Step"},{"location":"steps/abapEnvironmentAssembleConfirm/#overview-execution-environment","text":"Orchestrator-specific only These parameters are relevant for orchestrator usage and not considered when using the command line option. Name Mandatory Additional information containerCommand no containerShell no dockerEnvVars no dockerImage no dockerName no dockerOptions no dockerPullImage no dockerVolumeBind no dockerWorkspace no","title":"Overview - Execution Environment"},{"location":"steps/abapEnvironmentAssembleConfirm/#details","text":"","title":"Details"},{"location":"steps/abapEnvironmentAssembleConfirm/#addondescriptor","text":"Structure in the commonPipelineEnvironment containing information about the Product Version and corresponding Software Component Versions back to overview Scope Details Aliases - Type string Mandatory yes Default $PIPER_addonDescriptor (if set) Secret no Configuration scope \u2612 parameter \u2610 general \u2612 steps \u2612 stages Resource references commonPipelineEnvironment : reference to: abap/addonDescriptor","title":"addonDescriptor"},{"location":"steps/abapEnvironmentAssembleConfirm/#certificatenames","text":"certificates for the backend system, this certificates needs to be stored in .pipeline/trustStore back to overview Scope Details Aliases - Type []string Mandatory no Default $PIPER_certificateNames (if set) Secret no Configuration scope \u2612 parameter \u2612 general \u2612 steps \u2612 stages Resource references none","title":"certificateNames"},{"location":"steps/abapEnvironmentAssembleConfirm/#cfapiendpoint","text":"Cloud Foundry API endpoint back to overview Scope Details Aliases cloudFoundry/apiEndpoint Type string Mandatory no Default $PIPER_cfApiEndpoint (if set) Secret no Configuration scope \u2612 parameter \u2612 general \u2612 steps \u2612 stages Resource references none","title":"cfApiEndpoint"},{"location":"steps/abapEnvironmentAssembleConfirm/#cforg","text":"Cloud Foundry target organization back to overview Scope Details Aliases cloudFoundry/org Type string Mandatory no Default $PIPER_cfOrg (if set) Secret no Configuration scope \u2612 parameter \u2612 general \u2612 steps \u2612 stages Resource references none","title":"cfOrg"},{"location":"steps/abapEnvironmentAssembleConfirm/#cfserviceinstance","text":"Cloud Foundry Service Instance back to overview Scope Details Aliases cloudFoundry/serviceInstance Type string Mandatory no Default $PIPER_cfServiceInstance (if set) Secret no Configuration scope \u2612 parameter \u2612 general \u2612 steps \u2612 stages Resource references none","title":"cfServiceInstance"},{"location":"steps/abapEnvironmentAssembleConfirm/#cfservicekeyname","text":"Cloud Foundry Service Key back to overview Scope Details Aliases - cloudFoundry/serviceKey - cloudFoundry/serviceKeyName - cfServiceKey Type string Mandatory no Default $PIPER_cfServiceKeyName (if set) Secret no Configuration scope \u2612 parameter \u2612 general \u2612 steps \u2612 stages Resource references none","title":"cfServiceKeyName"},{"location":"steps/abapEnvironmentAssembleConfirm/#cfspace","text":"Cloud Foundry target space back to overview Scope Details Aliases cloudFoundry/space Type string Mandatory no Default $PIPER_cfSpace (if set) Secret no Configuration scope \u2612 parameter \u2612 general \u2612 steps \u2612 stages Resource references none","title":"cfSpace"},{"location":"steps/abapEnvironmentAssembleConfirm/#containercommand","text":"Jenkins-specific: Used for proper environment setup. Kubernetes only: Allows to specify start command for container created with dockerImage parameter to overwrite Piper default (/usr/bin/tail -f /dev/null). back to overview Scope Details Aliases - Type string Mandatory no Default Secret no Configuration scope \u2612 parameter \u2612 general \u2612 steps \u2612 stages Resource references none","title":"containerCommand"},{"location":"steps/abapEnvironmentAssembleConfirm/#containershell","text":"Jenkins-specific: Used for proper environment setup. Allows to specify the shell to be executed for container with containerName. back to overview Scope Details Aliases - Type string Mandatory no Default Secret no Configuration scope \u2612 parameter \u2612 general \u2612 steps \u2612 stages Resource references none","title":"containerShell"},{"location":"steps/abapEnvironmentAssembleConfirm/#dockerenvvars","text":"Environment variables to set in the container, e.g. [http_proxy: \"proxy:8080\"]. back to overview Scope Details Aliases - Type map[string]string Mandatory no Default Secret no Configuration scope \u2612 parameter \u2612 general \u2612 steps \u2612 stages Resource references none","title":"dockerEnvVars"},{"location":"steps/abapEnvironmentAssembleConfirm/#dockerimage","text":"Name of the docker image that should be used. If empty, Docker is not used and the command is executed directly on the Jenkins system. back to overview Scope Details Aliases - Type string Mandatory no Default ppiper/cf-cli:latest Secret no Configuration scope \u2612 parameter \u2612 general \u2612 steps \u2612 stages Resource references none","title":"dockerImage"},{"location":"steps/abapEnvironmentAssembleConfirm/#dockername","text":"Kubernetes only: Name of the container launching dockerImage. SideCar only: Name of the container in local network. back to overview Scope Details Aliases - Type string Mandatory no Default cf Secret no Configuration scope \u2612 parameter \u2612 general \u2612 steps \u2612 stages Resource references none","title":"dockerName"},{"location":"steps/abapEnvironmentAssembleConfirm/#dockeroptions","text":"Docker options to be set when starting the container. back to overview Scope Details Aliases - Type []string Mandatory no Default Secret no Configuration scope \u2612 parameter \u2612 general \u2612 steps \u2612 stages Resource references none","title":"dockerOptions"},{"location":"steps/abapEnvironmentAssembleConfirm/#dockerpullimage","text":"Set this to 'false' to bypass a docker image pull. Useful during development process. Allows testing of images which are available in the local registry only. back to overview Scope Details Aliases - Type bool Mandatory no Default true Possible values - true - false Secret no Configuration scope \u2612 parameter \u2612 general \u2612 steps \u2612 stages Resource references none","title":"dockerPullImage"},{"location":"steps/abapEnvironmentAssembleConfirm/#dockervolumebind","text":"Jenkins-specific: Used for proper environment setup. Volumes that should be mounted into the docker container. back to overview Scope Details Aliases - Type map[string]string Mandatory no Default Secret no Configuration scope \u2612 parameter \u2612 general \u2612 steps \u2612 stages Resource references none","title":"dockerVolumeBind"},{"location":"steps/abapEnvironmentAssembleConfirm/#dockerworkspace","text":"Jenkins-specific: Used for proper environment setup. Kubernetes only: Specifies a dedicated user home directory for the container which will be passed as value for environment variable HOME . back to overview Scope Details Aliases - Type string Mandatory no Default Secret no Configuration scope \u2612 parameter \u2612 general \u2612 steps \u2612 stages Resource references none","title":"dockerWorkspace"},{"location":"steps/abapEnvironmentAssembleConfirm/#host","text":"Specifies the host address of the SAP BTP ABAP Environment system back to overview Scope Details Aliases - Type string Mandatory no Default $PIPER_host (if set) Secret no Configuration scope \u2612 parameter \u2612 general \u2612 steps \u2612 stages Resource references none","title":"host"},{"location":"steps/abapEnvironmentAssembleConfirm/#maxruntimeinminutes","text":"maximal runtime of the step back to overview Scope Details Aliases - Type int Mandatory no Default 360 Secret no Configuration scope \u2612 parameter \u2610 general \u2612 steps \u2612 stages Resource references none","title":"maxRuntimeInMinutes"},{"location":"steps/abapEnvironmentAssembleConfirm/#password","text":"Password for either the Cloud Foundry API or the Communication Arrangement for SAP_COM_0582 back to overview Scope Details Aliases - Type string Mandatory yes Default $PIPER_password (if set) Secret yes Configuration scope \u2612 parameter \u2610 general \u2612 steps \u2612 stages Resource references none","title":"password"},{"location":"steps/abapEnvironmentAssembleConfirm/#script","text":"The common script environment of the Jenkinsfile running. Typically the reference to the script calling the pipeline step is provided with the this parameter, as in script: this . This allows the function to access the commonPipelineEnvironment for retrieving, e.g. configuration parameters. back to overview Scope Details Aliases - Type Jenkins Script Mandatory yes Default Secret no Configuration scope \u2610 parameter \u2610 general \u2610 steps \u2610 stages Resource references none","title":"script"},{"location":"steps/abapEnvironmentAssembleConfirm/#username","text":"User for either the Cloud Foundry API or the Communication Arrangement for SAP_COM_0582 back to overview Scope Details Aliases - Type string Mandatory yes Default $PIPER_username (if set) Secret yes Configuration scope \u2612 parameter \u2610 general \u2612 steps \u2612 stages Resource references none","title":"username"},{"location":"steps/abapEnvironmentAssembleConfirm/#verbose","text":"verbose output back to overview Scope Details Aliases - Type bool Mandatory no Default false Possible values - true - false Secret no Configuration scope \u2612 parameter \u2612 general \u2612 steps \u2612 stages Resource references none","title":"verbose"},{"location":"steps/abapEnvironmentAssembleConfirm/#abapcredentialsid","text":"Jenkins credentials ID containing user and password to authenticate to the Cloud Platform ABAP Environment system or the Cloud Foundry API back to overview Scope Details Aliases - cfCredentialsId - credentialsId Type string Configuration scope \u2612 parameter \u2612 general \u2612 steps \u2612 stages","title":"abapCredentialsId"},{"location":"steps/abapEnvironmentAssembleConfirm/#examples","text":"","title":"Examples"},{"location":"steps/abapEnvironmentAssembleConfirm/#configuration-in-the-configyml","text":"The recommended way to configure your pipeline is via the config.yml file. In this case, calling the step in the Jenkinsfile is reduced to one line: abapEnvironmentAssembleConfirm script: this If you want to provide the host and credentials of the Communication Arrangement directly, the configuration could look as follows: steps : abapEnvironmentAssembleConfirm : abapCredentialsId : 'abapCredentialsId' , host : 'https://myABAPendpoint.com' , Or by authenticating against Cloud Foundry and reading the Service Key details from there: steps : abapEnvironmentAssembleConfirm : abapCredentialsId : 'cfCredentialsId' , cfApiEndpoint : 'https://test.server.com' , cfOrg : 'cfOrg' , cfSpace : 'cfSpace' , cfServiceInstance : 'myServiceInstance' , cfServiceKeyName : 'myServiceKey' ,","title":"Configuration in the config.yml"},{"location":"steps/abapEnvironmentAssembleConfirm/#input-via-the-commonpipelineenvironment","text":"{ \"addonProduct\" : \"\" , \"addonVersion\" : \"\" , \"addonVersionAAK\" : \"\" , \"addonUniqueID\" : \"\" , \"customerID\" : \"\" , \"AddonSpsLevel\" : \"\" , \"AddonPatchLevel\" : \"\" , \"TargetVectorID\" : \"\" , \"repositories\" :[ { \"name\" : \"/DMO/REPO_A\" , \"tag\" : \"\" , \"branch\" : \"\" , \"version\" : \"\" , \"versionAAK\" : \"0001\" , \"PackageName\" : \"SAPK001001REPOA\" , \"PackageType\" : \"CPK\" , \"SpLevel\" : \"0000\" , \"PatchLevel\" : \"0001\" , \"PredecessorCommitID\" : \"cbb834e9e03cde177d2f109a6676901972983fbc\" , \"Status\" : \"P\" , \"Namespace\" : \"/DMO/\" , \"SarXMLFilePath\" : \"\" }, { \"name\" : \"/DMO/REPO_B\" , \"tag\" : \"\" , \"branch\" : \"\" , \"version\" : \"\" , \"versionAAK\" : \"0002\" , \"PackageName\" : \"SAPK002001REPOB\" , \"PackageType\" : \"CPK\" , \"SpLevel\" : \"0001\" , \"PatchLevel\" : \"0001\" , \"PredecessorCommitID\" : \"2f7d43923c041a07a76c8adc859c737ad772ef26\" , \"Status\" : \"P\" , \"Namespace\" : \"/DMO/\" , \"SarXMLFilePath\" : \"\" } ]}","title":"Input via the CommonPipelineEnvironment"},{"location":"steps/abapEnvironmentAssemblePackages/","text":"abapEnvironmentAssemblePackages \u00b6 Assembly of installation, support package or patch in SAP BTP ABAP Environment system Description \u00b6 This step runs the assembly of a list of provided installations, support packages or patches in SAP BTP ABAP Environment system and saves the corresponding SAR archive to the filesystem. Among others a semantic version API snapshot will be searched and marked as check-relevant in the assembly system, ATC checks for consistency of software component dependencies as well as API compatibility will run, and a new semantic version API snapshot will be created as well. Refer to Software Assembly Integration (SAP_COM_0582) . Usage \u00b6 We recommend to define values of step parameters via .pipeline/config.yml file . In this case, calling the step is essentially reduced to defining the step name. Calling the step can be done either in an orchestrator specific way (e.g. via a Jenkins library step) or on the command line. Jenkins Command Line library ( 'piper-lib-os' ) abapEnvironmentAssemblePackages script: this piper abapEnvironmentAssemblePackages Outputs \u00b6 Output type Details commonPipelineEnvironment abap/addonDescriptor Artifacts \u00b6 package logs ({packagename}.zip) This archive contains all relevant transport logs per assembled package which might be needed for detailed analysis in case of support requests or for audit purpose. For productive builds it might be advisable to store this file as well as the overall pipeline run logs in a revision proof manner. For every assembled package an respective zip archive with its related logs are created and archived as artifact. Prerequisites \u00b6 A SAP BTP, ABAP environment system is available. This can be created manually on Cloud Foundry. In a pipeline, you can do this, for example, with the step cloudFoundryCreateService . Communication Scenario \u201cSAP BTP, ABAP Environment - Software Assembly Integration (SAP_COM_0582)\u201c is setup for this system. E.g. a Communication User , a Communication System and a Communication Arrangement are configured. This can be done manually through the respective applications on the SAP BTP, ABAP environment system, or through creating a service key for the system on cloud foundry with the parameters {\u201cscenario_id\u201d: \u201cSAP_COM_0582\", \u201ctype\u201d: \u201cbasic\u201d}. In a pipeline, you can do this, for example, with the step cloudFoundryCreateServiceKey . You have following options to provide the ABAP endpoint configuration: The host and credentials the SAP BTP, ABAP environment system itself. The credentials must be configured for the Communication Scenario SAP_COM_0582. The Cloud Foundry parameters (API endpoint, organization, space), credentials, the service instance for the ABAP service and the service key for the Communication Scenario SAP_COM_0582. Only provide one of those options with the respective credentials. If all values are provided, the direct communication (via host) has priority. The step needs information about the packages which should be assembled present in the CommonPipelineEnvironment. For each repository/component version it needs the name of the repository, the version, splevel, patchlevel, namespace, packagename, package type, the status of the package, and optional the predecessor commit id. To upload this information to the CommonPipelineEnvironment run prior to this step the steps: abapAddonAssemblyKitCheckCVs , abapAddonAssemblyKitReserveNextPackages . If one of the package is already in status released, the assembly for this package will not be executed. The Software Components for which packages are to be assembled need to be present in the system. This can be done manually through the respective applications on the SAP BTP, ABAP environment system. In a pipeline, you can do this, for example, with the step abapEnvironmentPullGitRepo . In case multiple software component are used, any dependencies between the components need to be defined in Software Component Relations . The packages to be assembled need to be reserved in AAKaaS and the corresponding information needs to be present in CommonPipelineEnvironment. To do so run step abapAddonAssemblyKitReserveNextPackages prior this step. Parameters \u00b6 Overview - Step \u00b6 Name Mandatory Additional information addonDescriptor yes password (yes) pass via ENV or Jenkins credentials script (yes) reference to Jenkins main pipeline script username (yes) pass via ENV or Jenkins credentials alternativePhaseName no certificateNames no cfApiEndpoint no cfOrg no cfServiceInstance no cfServiceKeyName no cfSpace no host no maxRuntimeInMinutes no pollIntervalsInMilliseconds no verbose no activates debug output Overview - Execution Environment \u00b6 Orchestrator-specific only These parameters are relevant for orchestrator usage and not considered when using the command line option. Name Mandatory Additional information containerCommand no containerShell no dockerEnvVars no dockerImage no dockerName no dockerOptions no dockerPullImage no dockerVolumeBind no dockerWorkspace no Details \u00b6 addonDescriptor \u00b6 Structure in the commonPipelineEnvironment containing information about the Product Version and corresponding Software Component Versions back to overview Scope Details Aliases - Type string Mandatory yes Default $PIPER_addonDescriptor (if set) Secret no Configuration scope \u2612 parameter \u2610 general \u2612 steps \u2612 stages Resource references commonPipelineEnvironment : reference to: abap/addonDescriptor alternativePhaseName \u00b6 overrides default phase name back to overview Scope Details Aliases - Type string Mandatory no Default $PIPER_alternativePhaseName (if set) Secret no Configuration scope \u2612 parameter \u2612 general \u2612 steps \u2612 stages Resource references none certificateNames \u00b6 file names of trusted (self-signed) server certificates - need to be stored in .pipeline/trustStore back to overview Scope Details Aliases - Type []string Mandatory no Default $PIPER_certificateNames (if set) Secret no Configuration scope \u2612 parameter \u2612 general \u2612 steps \u2612 stages Resource references none cfApiEndpoint \u00b6 Cloud Foundry API endpoint back to overview Scope Details Aliases cloudFoundry/apiEndpoint Type string Mandatory no Default $PIPER_cfApiEndpoint (if set) Secret no Configuration scope \u2612 parameter \u2612 general \u2612 steps \u2612 stages Resource references none cfOrg \u00b6 Cloud Foundry target organization back to overview Scope Details Aliases cloudFoundry/org Type string Mandatory no Default $PIPER_cfOrg (if set) Secret no Configuration scope \u2612 parameter \u2612 general \u2612 steps \u2612 stages Resource references none cfServiceInstance \u00b6 Cloud Foundry Service Instance back to overview Scope Details Aliases cloudFoundry/serviceInstance Type string Mandatory no Default $PIPER_cfServiceInstance (if set) Secret no Configuration scope \u2612 parameter \u2612 general \u2612 steps \u2612 stages Resource references none cfServiceKeyName \u00b6 Cloud Foundry Service Key back to overview Scope Details Aliases - cloudFoundry/serviceKey - cloudFoundry/serviceKeyName - cfServiceKey Type string Mandatory no Default $PIPER_cfServiceKeyName (if set) Secret no Configuration scope \u2612 parameter \u2612 general \u2612 steps \u2612 stages Resource references none cfSpace \u00b6 Cloud Foundry target space back to overview Scope Details Aliases cloudFoundry/space Type string Mandatory no Default $PIPER_cfSpace (if set) Secret no Configuration scope \u2612 parameter \u2612 general \u2612 steps \u2612 stages Resource references none containerCommand \u00b6 Jenkins-specific: Used for proper environment setup. Kubernetes only: Allows to specify start command for container created with dockerImage parameter to overwrite Piper default (/usr/bin/tail -f /dev/null). back to overview Scope Details Aliases - Type string Mandatory no Default Secret no Configuration scope \u2612 parameter \u2612 general \u2612 steps \u2612 stages Resource references none containerShell \u00b6 Jenkins-specific: Used for proper environment setup. Allows to specify the shell to be executed for container with containerName. back to overview Scope Details Aliases - Type string Mandatory no Default Secret no Configuration scope \u2612 parameter \u2612 general \u2612 steps \u2612 stages Resource references none dockerEnvVars \u00b6 Environment variables to set in the container, e.g. [http_proxy: \"proxy:8080\"]. back to overview Scope Details Aliases - Type map[string]string Mandatory no Default Secret no Configuration scope \u2612 parameter \u2612 general \u2612 steps \u2612 stages Resource references none dockerImage \u00b6 Name of the docker image that should be used. If empty, Docker is not used and the command is executed directly on the Jenkins system. back to overview Scope Details Aliases - Type string Mandatory no Default ppiper/cf-cli:latest Secret no Configuration scope \u2612 parameter \u2612 general \u2612 steps \u2612 stages Resource references none dockerName \u00b6 Kubernetes only: Name of the container launching dockerImage. SideCar only: Name of the container in local network. back to overview Scope Details Aliases - Type string Mandatory no Default cf Secret no Configuration scope \u2612 parameter \u2612 general \u2612 steps \u2612 stages Resource references none dockerOptions \u00b6 Docker options to be set when starting the container. back to overview Scope Details Aliases - Type []string Mandatory no Default Secret no Configuration scope \u2612 parameter \u2612 general \u2612 steps \u2612 stages Resource references none dockerPullImage \u00b6 Set this to 'false' to bypass a docker image pull. Useful during development process. Allows testing of images which are available in the local registry only. back to overview Scope Details Aliases - Type bool Mandatory no Default true Possible values - true - false Secret no Configuration scope \u2612 parameter \u2612 general \u2612 steps \u2612 stages Resource references none dockerVolumeBind \u00b6 Jenkins-specific: Used for proper environment setup. Volumes that should be mounted into the docker container. back to overview Scope Details Aliases - Type map[string]string Mandatory no Default Secret no Configuration scope \u2612 parameter \u2612 general \u2612 steps \u2612 stages Resource references none dockerWorkspace \u00b6 Jenkins-specific: Used for proper environment setup. Kubernetes only: Specifies a dedicated user home directory for the container which will be passed as value for environment variable HOME . back to overview Scope Details Aliases - Type string Mandatory no Default Secret no Configuration scope \u2612 parameter \u2612 general \u2612 steps \u2612 stages Resource references none host \u00b6 Specifies the host address of the SAP BTP ABAP Environment system back to overview Scope Details Aliases - Type string Mandatory no Default $PIPER_host (if set) Secret no Configuration scope \u2612 parameter \u2612 general \u2612 steps \u2612 stages Resource references none maxRuntimeInMinutes \u00b6 maximal runtime of the step in minutes back to overview Scope Details Aliases - Type int Mandatory no Default 360 Secret no Configuration scope \u2612 parameter \u2610 general \u2612 steps \u2612 stages Resource references none password \u00b6 Password for either the Cloud Foundry API or the Communication Arrangement for SAP_COM_0582 back to overview Scope Details Aliases - Type string Mandatory yes Default $PIPER_password (if set) Secret yes Configuration scope \u2612 parameter \u2610 general \u2612 steps \u2612 stages Resource references none pollIntervalsInMilliseconds \u00b6 wait time in milliseconds till next status request in the backend system back to overview Scope Details Aliases - Type int Mandatory no Default 60000 Secret no Configuration scope \u2612 parameter \u2610 general \u2612 steps \u2612 stages Resource references none script \u00b6 The common script environment of the Jenkinsfile running. Typically the reference to the script calling the pipeline step is provided with the this parameter, as in script: this . This allows the function to access the commonPipelineEnvironment for retrieving, e.g. configuration parameters. back to overview Scope Details Aliases - Type Jenkins Script Mandatory yes Default Secret no Configuration scope \u2610 parameter \u2610 general \u2610 steps \u2610 stages Resource references none username \u00b6 User for either the Cloud Foundry API or the Communication Arrangement for SAP_COM_0582 back to overview Scope Details Aliases - Type string Mandatory yes Default $PIPER_username (if set) Secret yes Configuration scope \u2612 parameter \u2610 general \u2612 steps \u2612 stages Resource references none verbose \u00b6 verbose output back to overview Scope Details Aliases - Type bool Mandatory no Default false Possible values - true - false Secret no Configuration scope \u2612 parameter \u2612 general \u2612 steps \u2612 stages Resource references none abapCredentialsId \u00b6 Jenkins credentials ID containing user and password to authenticate to the Cloud Platform ABAP Environment system or the Cloud Foundry API back to overview Scope Details Aliases - cfCredentialsId - credentialsId Type string Configuration scope \u2612 parameter \u2612 general \u2612 steps \u2612 stages Examples \u00b6 Configuration in the config.yml \u00b6 The recommended way to configure your pipeline is via the config.yml file. In this case, calling the step in the Jenkinsfile is reduced to one line: abapEnvironmentAssemblePackages script: this If you want to provide the host and credentials of the Communication Arrangement directly, the configuration could look as follows: steps : abapEnvironmentAssemblePackages : abapCredentialsId : 'abapCredentialsId' , host : 'https://myABAPendpoint.com' , Or by authenticating against Cloud Foundry and reading the Service Key details from there: steps : abapEnvironmentAssemblePackages : abapCredentialsId : 'cfCredentialsId' , cfApiEndpoint : 'https://test.server.com' , cfOrg : 'cfOrg' , cfSpace : 'cfSpace' , cfServiceInstance : 'myServiceInstance' , cfServiceKeyName : 'myServiceKey' , Input via the CommonPipelineEnvironment \u00b6 { \"addonProduct\" : \"\" , \"addonVersion\" : \"\" , \"addonVersionAAK\" : \"\" , \"addonUniqueID\" : \"\" , \"customerID\" : \"\" , \"AddonSpsLevel\" : \"\" , \"AddonPatchLevel\" : \"\" , \"TargetVectorID\" : \"\" , \"repositories\" :[ { \"name\" : \"/DMO/REPO_A\" , \"tag\" : \"\" , \"branch\" : \"\" , \"version\" : \"\" , \"versionAAK\" : \"0001\" , \"PackageName\" : \"SAPK001001REPOA\" , \"PackageType\" : \"CPK\" , \"SpLevel\" : \"0000\" , \"PatchLevel\" : \"0001\" , \"PredecessorCommitID\" : \"cbb834e9e03cde177d2f109a6676901972983fbc\" , \"Status\" : \"P\" , \"Namespace\" : \"/DMO/\" , \"SarXMLFilePath\" : \"\" }, { \"name\" : \"/DMO/REPO_B\" , \"tag\" : \"\" , \"branch\" : \"\" , \"version\" : \"\" , \"versionAAK\" : \"0002\" , \"PackageName\" : \"SAPK002001REPOB\" , \"PackageType\" : \"CPK\" , \"SpLevel\" : \"0001\" , \"PatchLevel\" : \"0001\" , \"PredecessorCommitID\" : \"2f7d43923c041a07a76c8adc859c737ad772ef26\" , \"Status\" : \"P\" , \"Namespace\" : \"/DMO/\" , \"SarXMLFilePath\" : \"\" } ]}","title":"abapEnvironmentAssemblePackages"},{"location":"steps/abapEnvironmentAssemblePackages/#abapenvironmentassemblepackages","text":"Assembly of installation, support package or patch in SAP BTP ABAP Environment system","title":"abapEnvironmentAssemblePackages"},{"location":"steps/abapEnvironmentAssemblePackages/#description","text":"This step runs the assembly of a list of provided installations, support packages or patches in SAP BTP ABAP Environment system and saves the corresponding SAR archive to the filesystem. Among others a semantic version API snapshot will be searched and marked as check-relevant in the assembly system, ATC checks for consistency of software component dependencies as well as API compatibility will run, and a new semantic version API snapshot will be created as well. Refer to Software Assembly Integration (SAP_COM_0582) .","title":"Description"},{"location":"steps/abapEnvironmentAssemblePackages/#usage","text":"We recommend to define values of step parameters via .pipeline/config.yml file . In this case, calling the step is essentially reduced to defining the step name. Calling the step can be done either in an orchestrator specific way (e.g. via a Jenkins library step) or on the command line. Jenkins Command Line library ( 'piper-lib-os' ) abapEnvironmentAssemblePackages script: this piper abapEnvironmentAssemblePackages","title":"Usage"},{"location":"steps/abapEnvironmentAssemblePackages/#outputs","text":"Output type Details commonPipelineEnvironment abap/addonDescriptor","title":"Outputs"},{"location":"steps/abapEnvironmentAssemblePackages/#artifacts","text":"package logs ({packagename}.zip) This archive contains all relevant transport logs per assembled package which might be needed for detailed analysis in case of support requests or for audit purpose. For productive builds it might be advisable to store this file as well as the overall pipeline run logs in a revision proof manner. For every assembled package an respective zip archive with its related logs are created and archived as artifact.","title":"Artifacts"},{"location":"steps/abapEnvironmentAssemblePackages/#prerequisites","text":"A SAP BTP, ABAP environment system is available. This can be created manually on Cloud Foundry. In a pipeline, you can do this, for example, with the step cloudFoundryCreateService . Communication Scenario \u201cSAP BTP, ABAP Environment - Software Assembly Integration (SAP_COM_0582)\u201c is setup for this system. E.g. a Communication User , a Communication System and a Communication Arrangement are configured. This can be done manually through the respective applications on the SAP BTP, ABAP environment system, or through creating a service key for the system on cloud foundry with the parameters {\u201cscenario_id\u201d: \u201cSAP_COM_0582\", \u201ctype\u201d: \u201cbasic\u201d}. In a pipeline, you can do this, for example, with the step cloudFoundryCreateServiceKey . You have following options to provide the ABAP endpoint configuration: The host and credentials the SAP BTP, ABAP environment system itself. The credentials must be configured for the Communication Scenario SAP_COM_0582. The Cloud Foundry parameters (API endpoint, organization, space), credentials, the service instance for the ABAP service and the service key for the Communication Scenario SAP_COM_0582. Only provide one of those options with the respective credentials. If all values are provided, the direct communication (via host) has priority. The step needs information about the packages which should be assembled present in the CommonPipelineEnvironment. For each repository/component version it needs the name of the repository, the version, splevel, patchlevel, namespace, packagename, package type, the status of the package, and optional the predecessor commit id. To upload this information to the CommonPipelineEnvironment run prior to this step the steps: abapAddonAssemblyKitCheckCVs , abapAddonAssemblyKitReserveNextPackages . If one of the package is already in status released, the assembly for this package will not be executed. The Software Components for which packages are to be assembled need to be present in the system. This can be done manually through the respective applications on the SAP BTP, ABAP environment system. In a pipeline, you can do this, for example, with the step abapEnvironmentPullGitRepo . In case multiple software component are used, any dependencies between the components need to be defined in Software Component Relations . The packages to be assembled need to be reserved in AAKaaS and the corresponding information needs to be present in CommonPipelineEnvironment. To do so run step abapAddonAssemblyKitReserveNextPackages prior this step.","title":"Prerequisites"},{"location":"steps/abapEnvironmentAssemblePackages/#parameters","text":"","title":"Parameters"},{"location":"steps/abapEnvironmentAssemblePackages/#overview-step","text":"Name Mandatory Additional information addonDescriptor yes password (yes) pass via ENV or Jenkins credentials script (yes) reference to Jenkins main pipeline script username (yes) pass via ENV or Jenkins credentials alternativePhaseName no certificateNames no cfApiEndpoint no cfOrg no cfServiceInstance no cfServiceKeyName no cfSpace no host no maxRuntimeInMinutes no pollIntervalsInMilliseconds no verbose no activates debug output","title":"Overview - Step"},{"location":"steps/abapEnvironmentAssemblePackages/#overview-execution-environment","text":"Orchestrator-specific only These parameters are relevant for orchestrator usage and not considered when using the command line option. Name Mandatory Additional information containerCommand no containerShell no dockerEnvVars no dockerImage no dockerName no dockerOptions no dockerPullImage no dockerVolumeBind no dockerWorkspace no","title":"Overview - Execution Environment"},{"location":"steps/abapEnvironmentAssemblePackages/#details","text":"","title":"Details"},{"location":"steps/abapEnvironmentAssemblePackages/#addondescriptor","text":"Structure in the commonPipelineEnvironment containing information about the Product Version and corresponding Software Component Versions back to overview Scope Details Aliases - Type string Mandatory yes Default $PIPER_addonDescriptor (if set) Secret no Configuration scope \u2612 parameter \u2610 general \u2612 steps \u2612 stages Resource references commonPipelineEnvironment : reference to: abap/addonDescriptor","title":"addonDescriptor"},{"location":"steps/abapEnvironmentAssemblePackages/#alternativephasename","text":"overrides default phase name back to overview Scope Details Aliases - Type string Mandatory no Default $PIPER_alternativePhaseName (if set) Secret no Configuration scope \u2612 parameter \u2612 general \u2612 steps \u2612 stages Resource references none","title":"alternativePhaseName"},{"location":"steps/abapEnvironmentAssemblePackages/#certificatenames","text":"file names of trusted (self-signed) server certificates - need to be stored in .pipeline/trustStore back to overview Scope Details Aliases - Type []string Mandatory no Default $PIPER_certificateNames (if set) Secret no Configuration scope \u2612 parameter \u2612 general \u2612 steps \u2612 stages Resource references none","title":"certificateNames"},{"location":"steps/abapEnvironmentAssemblePackages/#cfapiendpoint","text":"Cloud Foundry API endpoint back to overview Scope Details Aliases cloudFoundry/apiEndpoint Type string Mandatory no Default $PIPER_cfApiEndpoint (if set) Secret no Configuration scope \u2612 parameter \u2612 general \u2612 steps \u2612 stages Resource references none","title":"cfApiEndpoint"},{"location":"steps/abapEnvironmentAssemblePackages/#cforg","text":"Cloud Foundry target organization back to overview Scope Details Aliases cloudFoundry/org Type string Mandatory no Default $PIPER_cfOrg (if set) Secret no Configuration scope \u2612 parameter \u2612 general \u2612 steps \u2612 stages Resource references none","title":"cfOrg"},{"location":"steps/abapEnvironmentAssemblePackages/#cfserviceinstance","text":"Cloud Foundry Service Instance back to overview Scope Details Aliases cloudFoundry/serviceInstance Type string Mandatory no Default $PIPER_cfServiceInstance (if set) Secret no Configuration scope \u2612 parameter \u2612 general \u2612 steps \u2612 stages Resource references none","title":"cfServiceInstance"},{"location":"steps/abapEnvironmentAssemblePackages/#cfservicekeyname","text":"Cloud Foundry Service Key back to overview Scope Details Aliases - cloudFoundry/serviceKey - cloudFoundry/serviceKeyName - cfServiceKey Type string Mandatory no Default $PIPER_cfServiceKeyName (if set) Secret no Configuration scope \u2612 parameter \u2612 general \u2612 steps \u2612 stages Resource references none","title":"cfServiceKeyName"},{"location":"steps/abapEnvironmentAssemblePackages/#cfspace","text":"Cloud Foundry target space back to overview Scope Details Aliases cloudFoundry/space Type string Mandatory no Default $PIPER_cfSpace (if set) Secret no Configuration scope \u2612 parameter \u2612 general \u2612 steps \u2612 stages Resource references none","title":"cfSpace"},{"location":"steps/abapEnvironmentAssemblePackages/#containercommand","text":"Jenkins-specific: Used for proper environment setup. Kubernetes only: Allows to specify start command for container created with dockerImage parameter to overwrite Piper default (/usr/bin/tail -f /dev/null). back to overview Scope Details Aliases - Type string Mandatory no Default Secret no Configuration scope \u2612 parameter \u2612 general \u2612 steps \u2612 stages Resource references none","title":"containerCommand"},{"location":"steps/abapEnvironmentAssemblePackages/#containershell","text":"Jenkins-specific: Used for proper environment setup. Allows to specify the shell to be executed for container with containerName. back to overview Scope Details Aliases - Type string Mandatory no Default Secret no Configuration scope \u2612 parameter \u2612 general \u2612 steps \u2612 stages Resource references none","title":"containerShell"},{"location":"steps/abapEnvironmentAssemblePackages/#dockerenvvars","text":"Environment variables to set in the container, e.g. [http_proxy: \"proxy:8080\"]. back to overview Scope Details Aliases - Type map[string]string Mandatory no Default Secret no Configuration scope \u2612 parameter \u2612 general \u2612 steps \u2612 stages Resource references none","title":"dockerEnvVars"},{"location":"steps/abapEnvironmentAssemblePackages/#dockerimage","text":"Name of the docker image that should be used. If empty, Docker is not used and the command is executed directly on the Jenkins system. back to overview Scope Details Aliases - Type string Mandatory no Default ppiper/cf-cli:latest Secret no Configuration scope \u2612 parameter \u2612 general \u2612 steps \u2612 stages Resource references none","title":"dockerImage"},{"location":"steps/abapEnvironmentAssemblePackages/#dockername","text":"Kubernetes only: Name of the container launching dockerImage. SideCar only: Name of the container in local network. back to overview Scope Details Aliases - Type string Mandatory no Default cf Secret no Configuration scope \u2612 parameter \u2612 general \u2612 steps \u2612 stages Resource references none","title":"dockerName"},{"location":"steps/abapEnvironmentAssemblePackages/#dockeroptions","text":"Docker options to be set when starting the container. back to overview Scope Details Aliases - Type []string Mandatory no Default Secret no Configuration scope \u2612 parameter \u2612 general \u2612 steps \u2612 stages Resource references none","title":"dockerOptions"},{"location":"steps/abapEnvironmentAssemblePackages/#dockerpullimage","text":"Set this to 'false' to bypass a docker image pull. Useful during development process. Allows testing of images which are available in the local registry only. back to overview Scope Details Aliases - Type bool Mandatory no Default true Possible values - true - false Secret no Configuration scope \u2612 parameter \u2612 general \u2612 steps \u2612 stages Resource references none","title":"dockerPullImage"},{"location":"steps/abapEnvironmentAssemblePackages/#dockervolumebind","text":"Jenkins-specific: Used for proper environment setup. Volumes that should be mounted into the docker container. back to overview Scope Details Aliases - Type map[string]string Mandatory no Default Secret no Configuration scope \u2612 parameter \u2612 general \u2612 steps \u2612 stages Resource references none","title":"dockerVolumeBind"},{"location":"steps/abapEnvironmentAssemblePackages/#dockerworkspace","text":"Jenkins-specific: Used for proper environment setup. Kubernetes only: Specifies a dedicated user home directory for the container which will be passed as value for environment variable HOME . back to overview Scope Details Aliases - Type string Mandatory no Default Secret no Configuration scope \u2612 parameter \u2612 general \u2612 steps \u2612 stages Resource references none","title":"dockerWorkspace"},{"location":"steps/abapEnvironmentAssemblePackages/#host","text":"Specifies the host address of the SAP BTP ABAP Environment system back to overview Scope Details Aliases - Type string Mandatory no Default $PIPER_host (if set) Secret no Configuration scope \u2612 parameter \u2612 general \u2612 steps \u2612 stages Resource references none","title":"host"},{"location":"steps/abapEnvironmentAssemblePackages/#maxruntimeinminutes","text":"maximal runtime of the step in minutes back to overview Scope Details Aliases - Type int Mandatory no Default 360 Secret no Configuration scope \u2612 parameter \u2610 general \u2612 steps \u2612 stages Resource references none","title":"maxRuntimeInMinutes"},{"location":"steps/abapEnvironmentAssemblePackages/#password","text":"Password for either the Cloud Foundry API or the Communication Arrangement for SAP_COM_0582 back to overview Scope Details Aliases - Type string Mandatory yes Default $PIPER_password (if set) Secret yes Configuration scope \u2612 parameter \u2610 general \u2612 steps \u2612 stages Resource references none","title":"password"},{"location":"steps/abapEnvironmentAssemblePackages/#pollintervalsinmilliseconds","text":"wait time in milliseconds till next status request in the backend system back to overview Scope Details Aliases - Type int Mandatory no Default 60000 Secret no Configuration scope \u2612 parameter \u2610 general \u2612 steps \u2612 stages Resource references none","title":"pollIntervalsInMilliseconds"},{"location":"steps/abapEnvironmentAssemblePackages/#script","text":"The common script environment of the Jenkinsfile running. Typically the reference to the script calling the pipeline step is provided with the this parameter, as in script: this . This allows the function to access the commonPipelineEnvironment for retrieving, e.g. configuration parameters. back to overview Scope Details Aliases - Type Jenkins Script Mandatory yes Default Secret no Configuration scope \u2610 parameter \u2610 general \u2610 steps \u2610 stages Resource references none","title":"script"},{"location":"steps/abapEnvironmentAssemblePackages/#username","text":"User for either the Cloud Foundry API or the Communication Arrangement for SAP_COM_0582 back to overview Scope Details Aliases - Type string Mandatory yes Default $PIPER_username (if set) Secret yes Configuration scope \u2612 parameter \u2610 general \u2612 steps \u2612 stages Resource references none","title":"username"},{"location":"steps/abapEnvironmentAssemblePackages/#verbose","text":"verbose output back to overview Scope Details Aliases - Type bool Mandatory no Default false Possible values - true - false Secret no Configuration scope \u2612 parameter \u2612 general \u2612 steps \u2612 stages Resource references none","title":"verbose"},{"location":"steps/abapEnvironmentAssemblePackages/#abapcredentialsid","text":"Jenkins credentials ID containing user and password to authenticate to the Cloud Platform ABAP Environment system or the Cloud Foundry API back to overview Scope Details Aliases - cfCredentialsId - credentialsId Type string Configuration scope \u2612 parameter \u2612 general \u2612 steps \u2612 stages","title":"abapCredentialsId"},{"location":"steps/abapEnvironmentAssemblePackages/#examples","text":"","title":"Examples"},{"location":"steps/abapEnvironmentAssemblePackages/#configuration-in-the-configyml","text":"The recommended way to configure your pipeline is via the config.yml file. In this case, calling the step in the Jenkinsfile is reduced to one line: abapEnvironmentAssemblePackages script: this If you want to provide the host and credentials of the Communication Arrangement directly, the configuration could look as follows: steps : abapEnvironmentAssemblePackages : abapCredentialsId : 'abapCredentialsId' , host : 'https://myABAPendpoint.com' , Or by authenticating against Cloud Foundry and reading the Service Key details from there: steps : abapEnvironmentAssemblePackages : abapCredentialsId : 'cfCredentialsId' , cfApiEndpoint : 'https://test.server.com' , cfOrg : 'cfOrg' , cfSpace : 'cfSpace' , cfServiceInstance : 'myServiceInstance' , cfServiceKeyName : 'myServiceKey' ,","title":"Configuration in the config.yml"},{"location":"steps/abapEnvironmentAssemblePackages/#input-via-the-commonpipelineenvironment","text":"{ \"addonProduct\" : \"\" , \"addonVersion\" : \"\" , \"addonVersionAAK\" : \"\" , \"addonUniqueID\" : \"\" , \"customerID\" : \"\" , \"AddonSpsLevel\" : \"\" , \"AddonPatchLevel\" : \"\" , \"TargetVectorID\" : \"\" , \"repositories\" :[ { \"name\" : \"/DMO/REPO_A\" , \"tag\" : \"\" , \"branch\" : \"\" , \"version\" : \"\" , \"versionAAK\" : \"0001\" , \"PackageName\" : \"SAPK001001REPOA\" , \"PackageType\" : \"CPK\" , \"SpLevel\" : \"0000\" , \"PatchLevel\" : \"0001\" , \"PredecessorCommitID\" : \"cbb834e9e03cde177d2f109a6676901972983fbc\" , \"Status\" : \"P\" , \"Namespace\" : \"/DMO/\" , \"SarXMLFilePath\" : \"\" }, { \"name\" : \"/DMO/REPO_B\" , \"tag\" : \"\" , \"branch\" : \"\" , \"version\" : \"\" , \"versionAAK\" : \"0002\" , \"PackageName\" : \"SAPK002001REPOB\" , \"PackageType\" : \"CPK\" , \"SpLevel\" : \"0001\" , \"PatchLevel\" : \"0001\" , \"PredecessorCommitID\" : \"2f7d43923c041a07a76c8adc859c737ad772ef26\" , \"Status\" : \"P\" , \"Namespace\" : \"/DMO/\" , \"SarXMLFilePath\" : \"\" } ]}","title":"Input via the CommonPipelineEnvironment"},{"location":"steps/abapEnvironmentBuild/","text":"abapEnvironmentBuild \u00b6 Executes builds as defined with the build framework Description \u00b6 Executes builds as defined with the build framework. Transaction overview /n/BUILD/OVERVIEW Usage \u00b6 We recommend to define values of step parameters via .pipeline/config.yml file . In this case, calling the step is essentially reduced to defining the step name. Calling the step can be done either in an orchestrator specific way (e.g. via a Jenkins library step) or on the command line. Jenkins Command Line library ( 'piper-lib-os' ) abapEnvironmentBuild script: this piper abapEnvironmentBuild Outputs \u00b6 Output type Details commonPipelineEnvironment abap/buildValues Prerequisites SAP BTP, ABAP environment \u00b6 A SAP BTP, ABAP environment system is available. This can be created manually on Cloud Foundry. In a pipeline, you can do this, for example, with the step cloudFoundryCreateService . Communication Scenario \u201cSAP BTP, ABAP Environment - Software Assembly Integration (SAP_COM_0582)\u201c is setup for this system. E.g. a Communication User , a Communication System and a Communication Arrangement are configured. This can be done manually through the respective applications on the SAP BTP, ABAP environment system, or through creating a service key for the system on cloud foundry with the parameters {\u201cscenario_id\u201d: \u201cSAP_COM_0582\", \u201ctype\u201d: \u201cbasic\u201d}. In a pipeline, you can do this, for example, with the step cloudFoundryCreateServiceKey . You have following options to provide the ABAP endpoint configuration: The host and credentials the SAP BTP, ABAP environment system itself. The credentials must be configured for the Communication Scenario SAP_COM_0582. The Cloud Foundry parameters (API endpoint, organization, space), credentials, the service instance for the ABAP service and the service key for the Communication Scenario SAP_COM_0582. Only provide one of those options with the respective credentials. If all values are provided, the direct communication (via host) has priority. Prerequisites On Premise \u00b6 You need to specify the host and credentials to your system A certificate for the system needs to be stored in .pipeline/trustStore and the name of the certificate needs to be handed over via the configuration Parameters \u00b6 Overview - Step \u00b6 Name Mandatory Additional information password (yes) pass via ENV or Jenkins credentials phase yes script (yes) reference to Jenkins main pipeline script username (yes) pass via ENV or Jenkins credentials abapSourceClient no addonDescriptor no certificateNames no cfApiEndpoint no cfOrg no cfServiceInstance no cfServiceKeyName no cfSpace no conditionOnAddonDescriptor no cpeValues no downloadAllResultFiles no downloadResultFilenames no filenamePrefixForDownload no host no maxRuntimeInMinutes no pollingIntervalInSeconds no publishAllDownloadedResultFiles no publishResultFilenames no stopOnFirstError no subDirectoryForDownload no treatWarningsAsError no useFieldsOfAddonDescriptor no values no verbose no activates debug output Overview - Execution Environment \u00b6 Orchestrator-specific only These parameters are relevant for orchestrator usage and not considered when using the command line option. Name Mandatory Additional information containerCommand no containerShell no dockerEnvVars no dockerImage no dockerName no dockerOptions no dockerPullImage no dockerVolumeBind no dockerWorkspace no Details \u00b6 abapSourceClient \u00b6 Specifies the client of the SAP BTP ABAP Environment system, use only in combination with host back to overview Scope Details Aliases - Type string Mandatory no Default $PIPER_abapSourceClient (if set) Secret no Configuration scope \u2612 parameter \u2612 general \u2612 steps \u2612 stages Resource references none addonDescriptor \u00b6 Structure in the commonPipelineEnvironment containing information about the Product Version and corresponding Software Component Versions back to overview Scope Details Aliases - Type string Mandatory no Default $PIPER_addonDescriptor (if set) Secret no Configuration scope \u2612 parameter \u2610 general \u2612 steps \u2612 stages Resource references commonPipelineEnvironment : reference to: abap/addonDescriptor certificateNames \u00b6 file names of trusted (self-signed) server certificates - need to be stored in .pipeline/trustStore back to overview Scope Details Aliases - Type []string Mandatory no Default $PIPER_certificateNames (if set) Secret no Configuration scope \u2612 parameter \u2612 general \u2612 steps \u2612 stages Resource references none cfApiEndpoint \u00b6 Cloud Foundry API endpoint back to overview Scope Details Aliases cloudFoundry/apiEndpoint Type string Mandatory no Default $PIPER_cfApiEndpoint (if set) Secret no Configuration scope \u2612 parameter \u2612 general \u2612 steps \u2612 stages Resource references none cfOrg \u00b6 Cloud Foundry target organization back to overview Scope Details Aliases cloudFoundry/org Type string Mandatory no Default $PIPER_cfOrg (if set) Secret no Configuration scope \u2612 parameter \u2612 general \u2612 steps \u2612 stages Resource references none cfServiceInstance \u00b6 Cloud Foundry Service Instance back to overview Scope Details Aliases cloudFoundry/serviceInstance Type string Mandatory no Default $PIPER_cfServiceInstance (if set) Secret no Configuration scope \u2612 parameter \u2612 general \u2612 steps \u2612 stages Resource references none cfServiceKeyName \u00b6 Cloud Foundry Service Key back to overview Scope Details Aliases - cloudFoundry/serviceKey - cloudFoundry/serviceKeyName - cfServiceKey Type string Mandatory no Default $PIPER_cfServiceKeyName (if set) Secret no Configuration scope \u2612 parameter \u2612 general \u2612 steps \u2612 stages Resource references none cfSpace \u00b6 Cloud Foundry target space back to overview Scope Details Aliases cloudFoundry/space Type string Mandatory no Default $PIPER_cfSpace (if set) Secret no Configuration scope \u2612 parameter \u2612 general \u2612 steps \u2612 stages Resource references none conditionOnAddonDescriptor \u00b6 normally if useFieldsOfAddonDescriptor is not initial, a build is triggered for each repository in the addonDescriptor. This can be changed by posing conditions. Please enter in the format '[{\"field\":\"Status\",\"operator\":\"==\",\"value\":\"P\"}]' back to overview Scope Details Aliases - Type string Mandatory no Default $PIPER_conditionOnAddonDescriptor (if set) Secret no Configuration scope \u2612 parameter \u2610 general \u2612 steps \u2612 stages Resource references none containerCommand \u00b6 Jenkins-specific: Used for proper environment setup. Kubernetes only: Allows to specify start command for container created with dockerImage parameter to overwrite Piper default (/usr/bin/tail -f /dev/null). back to overview Scope Details Aliases - Type string Mandatory no Default Secret no Configuration scope \u2612 parameter \u2612 general \u2612 steps \u2612 stages Resource references none containerShell \u00b6 Jenkins-specific: Used for proper environment setup. Allows to specify the shell to be executed for container with containerName. back to overview Scope Details Aliases - Type string Mandatory no Default Secret no Configuration scope \u2612 parameter \u2612 general \u2612 steps \u2612 stages Resource references none cpeValues \u00b6 Values taken from the previous step, if a value was also specified in the config file, the value from cpe will be discarded back to overview Scope Details Aliases - Type string Mandatory no Default $PIPER_cpeValues (if set) Secret no Configuration scope \u2610 parameter \u2610 general \u2610 steps \u2610 stages Resource references commonPipelineEnvironment : reference to: abap/buildValues dockerEnvVars \u00b6 Environment variables to set in the container, e.g. [http_proxy: \"proxy:8080\"]. back to overview Scope Details Aliases - Type map[string]string Mandatory no Default Secret no Configuration scope \u2612 parameter \u2612 general \u2612 steps \u2612 stages Resource references none dockerImage \u00b6 Name of the docker image that should be used. If empty, Docker is not used and the command is executed directly on the Jenkins system. back to overview Scope Details Aliases - Type string Mandatory no Default ppiper/cf-cli:latest Secret no Configuration scope \u2612 parameter \u2612 general \u2612 steps \u2612 stages Resource references none dockerName \u00b6 Kubernetes only: Name of the container launching dockerImage. SideCar only: Name of the container in local network. back to overview Scope Details Aliases - Type string Mandatory no Default cf Secret no Configuration scope \u2612 parameter \u2612 general \u2612 steps \u2612 stages Resource references none dockerOptions \u00b6 Docker options to be set when starting the container. back to overview Scope Details Aliases - Type []string Mandatory no Default Secret no Configuration scope \u2612 parameter \u2612 general \u2612 steps \u2612 stages Resource references none dockerPullImage \u00b6 Set this to 'false' to bypass a docker image pull. Useful during development process. Allows testing of images which are available in the local registry only. back to overview Scope Details Aliases - Type bool Mandatory no Default true Possible values - true - false Secret no Configuration scope \u2612 parameter \u2612 general \u2612 steps \u2612 stages Resource references none dockerVolumeBind \u00b6 Jenkins-specific: Used for proper environment setup. Volumes that should be mounted into the docker container. back to overview Scope Details Aliases - Type map[string]string Mandatory no Default Secret no Configuration scope \u2612 parameter \u2612 general \u2612 steps \u2612 stages Resource references none dockerWorkspace \u00b6 Jenkins-specific: Used for proper environment setup. Kubernetes only: Specifies a dedicated user home directory for the container which will be passed as value for environment variable HOME . back to overview Scope Details Aliases - Type string Mandatory no Default Secret no Configuration scope \u2612 parameter \u2612 general \u2612 steps \u2612 stages Resource references none downloadAllResultFiles \u00b6 If true, all build artefacts are downloaded back to overview Scope Details Aliases - Type bool Mandatory no Default false Possible values - true - false Secret no Configuration scope \u2612 parameter \u2610 general \u2612 steps \u2612 stages Resource references none downloadResultFilenames \u00b6 Only the specified files are downloaded. If downloadAllResultFiles is true, this parameter is ignored back to overview Scope Details Aliases - Type []string Mandatory no Default $PIPER_downloadResultFilenames (if set) Secret no Configuration scope \u2612 parameter \u2610 general \u2612 steps \u2612 stages Resource references none filenamePrefixForDownload \u00b6 Filename prefix for the downloaded files, {buildID} and {taskID} can be used and will be resolved accordingly back to overview Scope Details Aliases - Type string Mandatory no Default $PIPER_filenamePrefixForDownload (if set) Secret no Configuration scope \u2612 parameter \u2612 general \u2612 steps \u2612 stages Resource references none host \u00b6 Specifies the host address of the SAP BTP ABAP Environment system back to overview Scope Details Aliases - Type string Mandatory no Default $PIPER_host (if set) Secret no Configuration scope \u2612 parameter \u2612 general \u2612 steps \u2612 stages Resource references none maxRuntimeInMinutes \u00b6 maximal runtime of the step in minutes back to overview Scope Details Aliases - Type int Mandatory no Default 360 Secret no Configuration scope \u2612 parameter \u2610 general \u2612 steps \u2612 stages Resource references none password \u00b6 Password back to overview Scope Details Aliases - Type string Mandatory yes Default $PIPER_password (if set) Secret yes Configuration scope \u2612 parameter \u2610 general \u2612 steps \u2612 stages Resource references none phase \u00b6 Phase as specified in the build script in the backend system back to overview Scope Details Aliases - Type string Mandatory yes Default $PIPER_phase (if set) Secret no Configuration scope \u2612 parameter \u2610 general \u2612 steps \u2612 stages Resource references none pollingIntervalInSeconds \u00b6 wait time in seconds till next status request in the backend system back to overview Scope Details Aliases - Type int Mandatory no Default 60 Secret no Configuration scope \u2612 parameter \u2610 general \u2612 steps \u2612 stages Resource references none publishAllDownloadedResultFiles \u00b6 If true, it publishes all downloaded files back to overview Scope Details Aliases - Type bool Mandatory no Default false Possible values - true - false Secret no Configuration scope \u2612 parameter \u2610 general \u2612 steps \u2612 stages Resource references none publishResultFilenames \u00b6 Only the specified files get published, in case the file was not downloaded before an error occures back to overview Scope Details Aliases - Type []string Mandatory no Default $PIPER_publishResultFilenames (if set) Secret no Configuration scope \u2612 parameter \u2610 general \u2612 steps \u2612 stages Resource references none script \u00b6 The common script environment of the Jenkinsfile running. Typically the reference to the script calling the pipeline step is provided with the this parameter, as in script: this . This allows the function to access the commonPipelineEnvironment for retrieving, e.g. configuration parameters. back to overview Scope Details Aliases - Type Jenkins Script Mandatory yes Default Secret no Configuration scope \u2610 parameter \u2610 general \u2610 steps \u2610 stages Resource references none stopOnFirstError \u00b6 If false, it does not stop if an error occured for one repository in the addonDescriptor, but continues with the next repository. However the step is marked as failed in the end if an error occured. back to overview Scope Details Aliases - Type bool Mandatory no Default false Possible values - true - false Secret no Configuration scope \u2612 parameter \u2610 general \u2612 steps \u2612 stages Resource references none subDirectoryForDownload \u00b6 Target directory to store the downloaded files, {buildID} and {taskID} can be used and will be resolved accordingly back to overview Scope Details Aliases - Type string Mandatory no Default $PIPER_subDirectoryForDownload (if set) Secret no Configuration scope \u2612 parameter \u2612 general \u2612 steps \u2612 stages Resource references none treatWarningsAsError \u00b6 If a warrning occures, the step will be set to unstable back to overview Scope Details Aliases - Type bool Mandatory no Default false Possible values - true - false Secret no Configuration scope \u2612 parameter \u2610 general \u2612 steps \u2612 stages Resource references none useFieldsOfAddonDescriptor \u00b6 use fields of the addonDescriptor in the cpe as input values. Please enter in the format '[{\"use\":\"Name\",\"renameTo\":\"SWC\"}]' back to overview Scope Details Aliases - Type string Mandatory no Default $PIPER_useFieldsOfAddonDescriptor (if set) Secret no Configuration scope \u2612 parameter \u2610 general \u2612 steps \u2612 stages Resource references none username \u00b6 User back to overview Scope Details Aliases - Type string Mandatory yes Default $PIPER_username (if set) Secret yes Configuration scope \u2612 parameter \u2610 general \u2612 steps \u2612 stages Resource references none values \u00b6 Input values for the build framework, please enter in the format '[{\"value_id\":\"Id1\",\"value\":\"value1\"},{\"value_id\":\"Id2\",\"value\":\"value2\"}]' back to overview Scope Details Aliases - Type string Mandatory no Default $PIPER_values (if set) Secret no Configuration scope \u2612 parameter \u2610 general \u2612 steps \u2612 stages Resource references none verbose \u00b6 verbose output back to overview Scope Details Aliases - Type bool Mandatory no Default false Possible values - true - false Secret no Configuration scope \u2612 parameter \u2612 general \u2612 steps \u2612 stages Resource references none abapCredentialsId \u00b6 Jenkins credentials ID containing user and password to authenticate to the Cloud Platform ABAP Environment system or the Cloud Foundry API back to overview Scope Details Aliases - cfCredentialsId - credentialsId Type string Configuration scope \u2612 parameter \u2612 general \u2612 steps \u2612 stages Examples \u00b6 Configuration in the config.yml \u00b6 If you want to use this step several time in one pipeline with different phases, the steps have to be put in different stages as it is not allowed to run the same step repeatedly in one stage. The recommended way to configure your pipeline is via the config.yml file. In this case, calling the step in the Jenkinsfile is reduced to one line: stage ( 'MyPhase' ) { steps { abapEnvironmentBuild script: this } } If you want to provide the host and credentials of the Communication Arrangement directly or you want to run in on premise, the configuration could look as follows: stages : MyPhase : abapCredentialsId : 'abapCredentialsId' , host : 'https://myABAPendpoint.com' , Or by authenticating against Cloud Foundry and reading the Service Key details from there: stages : MyPhase : abapCredentialsId : 'cfCredentialsId' , cfApiEndpoint : 'https://test.server.com' , cfOrg : 'cfOrg' , cfSpace : 'cfSpace' , cfServiceInstance : 'myServiceInstance' , cfServiceKeyName : 'myServiceKey' , One possible complete config example. Please note that the values are handed over as a string, which has inside a json structure: stages : MyPhase : abapCredentialsId : 'abapCredentialsId' host : 'https://myABAPendpoint.com' certificateNames : [ 'myCert.cer' ] phase : 'MyPhase' values : '[{\"value_id\":\"ID1\",\"value\":\"Value1\"},{\"value_id\":\"ID2\",\"value\":\"Value2\"}]' downloadResultFilenames : [ 'File1' , 'File2' ] publishResultFilenames : [ 'File2' ] subDirectoryForDownload : 'MyDir' filenamePrefixForDownload : 'MyPrefix' treatWarningsAsError : true maxRuntimeInMinutes : 360 pollingIntervallInSeconds : 15","title":"abapEnvironmentBuild"},{"location":"steps/abapEnvironmentBuild/#abapenvironmentbuild","text":"Executes builds as defined with the build framework","title":"abapEnvironmentBuild"},{"location":"steps/abapEnvironmentBuild/#description","text":"Executes builds as defined with the build framework. Transaction overview /n/BUILD/OVERVIEW","title":"Description"},{"location":"steps/abapEnvironmentBuild/#usage","text":"We recommend to define values of step parameters via .pipeline/config.yml file . In this case, calling the step is essentially reduced to defining the step name. Calling the step can be done either in an orchestrator specific way (e.g. via a Jenkins library step) or on the command line. Jenkins Command Line library ( 'piper-lib-os' ) abapEnvironmentBuild script: this piper abapEnvironmentBuild","title":"Usage"},{"location":"steps/abapEnvironmentBuild/#outputs","text":"Output type Details commonPipelineEnvironment abap/buildValues","title":"Outputs"},{"location":"steps/abapEnvironmentBuild/#prerequisites-sap-btp-abap-environment","text":"A SAP BTP, ABAP environment system is available. This can be created manually on Cloud Foundry. In a pipeline, you can do this, for example, with the step cloudFoundryCreateService . Communication Scenario \u201cSAP BTP, ABAP Environment - Software Assembly Integration (SAP_COM_0582)\u201c is setup for this system. E.g. a Communication User , a Communication System and a Communication Arrangement are configured. This can be done manually through the respective applications on the SAP BTP, ABAP environment system, or through creating a service key for the system on cloud foundry with the parameters {\u201cscenario_id\u201d: \u201cSAP_COM_0582\", \u201ctype\u201d: \u201cbasic\u201d}. In a pipeline, you can do this, for example, with the step cloudFoundryCreateServiceKey . You have following options to provide the ABAP endpoint configuration: The host and credentials the SAP BTP, ABAP environment system itself. The credentials must be configured for the Communication Scenario SAP_COM_0582. The Cloud Foundry parameters (API endpoint, organization, space), credentials, the service instance for the ABAP service and the service key for the Communication Scenario SAP_COM_0582. Only provide one of those options with the respective credentials. If all values are provided, the direct communication (via host) has priority.","title":"Prerequisites SAP BTP, ABAP environment"},{"location":"steps/abapEnvironmentBuild/#prerequisites-on-premise","text":"You need to specify the host and credentials to your system A certificate for the system needs to be stored in .pipeline/trustStore and the name of the certificate needs to be handed over via the configuration","title":"Prerequisites On Premise"},{"location":"steps/abapEnvironmentBuild/#parameters","text":"","title":"Parameters"},{"location":"steps/abapEnvironmentBuild/#overview-step","text":"Name Mandatory Additional information password (yes) pass via ENV or Jenkins credentials phase yes script (yes) reference to Jenkins main pipeline script username (yes) pass via ENV or Jenkins credentials abapSourceClient no addonDescriptor no certificateNames no cfApiEndpoint no cfOrg no cfServiceInstance no cfServiceKeyName no cfSpace no conditionOnAddonDescriptor no cpeValues no downloadAllResultFiles no downloadResultFilenames no filenamePrefixForDownload no host no maxRuntimeInMinutes no pollingIntervalInSeconds no publishAllDownloadedResultFiles no publishResultFilenames no stopOnFirstError no subDirectoryForDownload no treatWarningsAsError no useFieldsOfAddonDescriptor no values no verbose no activates debug output","title":"Overview - Step"},{"location":"steps/abapEnvironmentBuild/#overview-execution-environment","text":"Orchestrator-specific only These parameters are relevant for orchestrator usage and not considered when using the command line option. Name Mandatory Additional information containerCommand no containerShell no dockerEnvVars no dockerImage no dockerName no dockerOptions no dockerPullImage no dockerVolumeBind no dockerWorkspace no","title":"Overview - Execution Environment"},{"location":"steps/abapEnvironmentBuild/#details","text":"","title":"Details"},{"location":"steps/abapEnvironmentBuild/#abapsourceclient","text":"Specifies the client of the SAP BTP ABAP Environment system, use only in combination with host back to overview Scope Details Aliases - Type string Mandatory no Default $PIPER_abapSourceClient (if set) Secret no Configuration scope \u2612 parameter \u2612 general \u2612 steps \u2612 stages Resource references none","title":"abapSourceClient"},{"location":"steps/abapEnvironmentBuild/#addondescriptor","text":"Structure in the commonPipelineEnvironment containing information about the Product Version and corresponding Software Component Versions back to overview Scope Details Aliases - Type string Mandatory no Default $PIPER_addonDescriptor (if set) Secret no Configuration scope \u2612 parameter \u2610 general \u2612 steps \u2612 stages Resource references commonPipelineEnvironment : reference to: abap/addonDescriptor","title":"addonDescriptor"},{"location":"steps/abapEnvironmentBuild/#certificatenames","text":"file names of trusted (self-signed) server certificates - need to be stored in .pipeline/trustStore back to overview Scope Details Aliases - Type []string Mandatory no Default $PIPER_certificateNames (if set) Secret no Configuration scope \u2612 parameter \u2612 general \u2612 steps \u2612 stages Resource references none","title":"certificateNames"},{"location":"steps/abapEnvironmentBuild/#cfapiendpoint","text":"Cloud Foundry API endpoint back to overview Scope Details Aliases cloudFoundry/apiEndpoint Type string Mandatory no Default $PIPER_cfApiEndpoint (if set) Secret no Configuration scope \u2612 parameter \u2612 general \u2612 steps \u2612 stages Resource references none","title":"cfApiEndpoint"},{"location":"steps/abapEnvironmentBuild/#cforg","text":"Cloud Foundry target organization back to overview Scope Details Aliases cloudFoundry/org Type string Mandatory no Default $PIPER_cfOrg (if set) Secret no Configuration scope \u2612 parameter \u2612 general \u2612 steps \u2612 stages Resource references none","title":"cfOrg"},{"location":"steps/abapEnvironmentBuild/#cfserviceinstance","text":"Cloud Foundry Service Instance back to overview Scope Details Aliases cloudFoundry/serviceInstance Type string Mandatory no Default $PIPER_cfServiceInstance (if set) Secret no Configuration scope \u2612 parameter \u2612 general \u2612 steps \u2612 stages Resource references none","title":"cfServiceInstance"},{"location":"steps/abapEnvironmentBuild/#cfservicekeyname","text":"Cloud Foundry Service Key back to overview Scope Details Aliases - cloudFoundry/serviceKey - cloudFoundry/serviceKeyName - cfServiceKey Type string Mandatory no Default $PIPER_cfServiceKeyName (if set) Secret no Configuration scope \u2612 parameter \u2612 general \u2612 steps \u2612 stages Resource references none","title":"cfServiceKeyName"},{"location":"steps/abapEnvironmentBuild/#cfspace","text":"Cloud Foundry target space back to overview Scope Details Aliases cloudFoundry/space Type string Mandatory no Default $PIPER_cfSpace (if set) Secret no Configuration scope \u2612 parameter \u2612 general \u2612 steps \u2612 stages Resource references none","title":"cfSpace"},{"location":"steps/abapEnvironmentBuild/#conditiononaddondescriptor","text":"normally if useFieldsOfAddonDescriptor is not initial, a build is triggered for each repository in the addonDescriptor. This can be changed by posing conditions. Please enter in the format '[{\"field\":\"Status\",\"operator\":\"==\",\"value\":\"P\"}]' back to overview Scope Details Aliases - Type string Mandatory no Default $PIPER_conditionOnAddonDescriptor (if set) Secret no Configuration scope \u2612 parameter \u2610 general \u2612 steps \u2612 stages Resource references none","title":"conditionOnAddonDescriptor"},{"location":"steps/abapEnvironmentBuild/#containercommand","text":"Jenkins-specific: Used for proper environment setup. Kubernetes only: Allows to specify start command for container created with dockerImage parameter to overwrite Piper default (/usr/bin/tail -f /dev/null). back to overview Scope Details Aliases - Type string Mandatory no Default Secret no Configuration scope \u2612 parameter \u2612 general \u2612 steps \u2612 stages Resource references none","title":"containerCommand"},{"location":"steps/abapEnvironmentBuild/#containershell","text":"Jenkins-specific: Used for proper environment setup. Allows to specify the shell to be executed for container with containerName. back to overview Scope Details Aliases - Type string Mandatory no Default Secret no Configuration scope \u2612 parameter \u2612 general \u2612 steps \u2612 stages Resource references none","title":"containerShell"},{"location":"steps/abapEnvironmentBuild/#cpevalues","text":"Values taken from the previous step, if a value was also specified in the config file, the value from cpe will be discarded back to overview Scope Details Aliases - Type string Mandatory no Default $PIPER_cpeValues (if set) Secret no Configuration scope \u2610 parameter \u2610 general \u2610 steps \u2610 stages Resource references commonPipelineEnvironment : reference to: abap/buildValues","title":"cpeValues"},{"location":"steps/abapEnvironmentBuild/#dockerenvvars","text":"Environment variables to set in the container, e.g. [http_proxy: \"proxy:8080\"]. back to overview Scope Details Aliases - Type map[string]string Mandatory no Default Secret no Configuration scope \u2612 parameter \u2612 general \u2612 steps \u2612 stages Resource references none","title":"dockerEnvVars"},{"location":"steps/abapEnvironmentBuild/#dockerimage","text":"Name of the docker image that should be used. If empty, Docker is not used and the command is executed directly on the Jenkins system. back to overview Scope Details Aliases - Type string Mandatory no Default ppiper/cf-cli:latest Secret no Configuration scope \u2612 parameter \u2612 general \u2612 steps \u2612 stages Resource references none","title":"dockerImage"},{"location":"steps/abapEnvironmentBuild/#dockername","text":"Kubernetes only: Name of the container launching dockerImage. SideCar only: Name of the container in local network. back to overview Scope Details Aliases - Type string Mandatory no Default cf Secret no Configuration scope \u2612 parameter \u2612 general \u2612 steps \u2612 stages Resource references none","title":"dockerName"},{"location":"steps/abapEnvironmentBuild/#dockeroptions","text":"Docker options to be set when starting the container. back to overview Scope Details Aliases - Type []string Mandatory no Default Secret no Configuration scope \u2612 parameter \u2612 general \u2612 steps \u2612 stages Resource references none","title":"dockerOptions"},{"location":"steps/abapEnvironmentBuild/#dockerpullimage","text":"Set this to 'false' to bypass a docker image pull. Useful during development process. Allows testing of images which are available in the local registry only. back to overview Scope Details Aliases - Type bool Mandatory no Default true Possible values - true - false Secret no Configuration scope \u2612 parameter \u2612 general \u2612 steps \u2612 stages Resource references none","title":"dockerPullImage"},{"location":"steps/abapEnvironmentBuild/#dockervolumebind","text":"Jenkins-specific: Used for proper environment setup. Volumes that should be mounted into the docker container. back to overview Scope Details Aliases - Type map[string]string Mandatory no Default Secret no Configuration scope \u2612 parameter \u2612 general \u2612 steps \u2612 stages Resource references none","title":"dockerVolumeBind"},{"location":"steps/abapEnvironmentBuild/#dockerworkspace","text":"Jenkins-specific: Used for proper environment setup. Kubernetes only: Specifies a dedicated user home directory for the container which will be passed as value for environment variable HOME . back to overview Scope Details Aliases - Type string Mandatory no Default Secret no Configuration scope \u2612 parameter \u2612 general \u2612 steps \u2612 stages Resource references none","title":"dockerWorkspace"},{"location":"steps/abapEnvironmentBuild/#downloadallresultfiles","text":"If true, all build artefacts are downloaded back to overview Scope Details Aliases - Type bool Mandatory no Default false Possible values - true - false Secret no Configuration scope \u2612 parameter \u2610 general \u2612 steps \u2612 stages Resource references none","title":"downloadAllResultFiles"},{"location":"steps/abapEnvironmentBuild/#downloadresultfilenames","text":"Only the specified files are downloaded. If downloadAllResultFiles is true, this parameter is ignored back to overview Scope Details Aliases - Type []string Mandatory no Default $PIPER_downloadResultFilenames (if set) Secret no Configuration scope \u2612 parameter \u2610 general \u2612 steps \u2612 stages Resource references none","title":"downloadResultFilenames"},{"location":"steps/abapEnvironmentBuild/#filenameprefixfordownload","text":"Filename prefix for the downloaded files, {buildID} and {taskID} can be used and will be resolved accordingly back to overview Scope Details Aliases - Type string Mandatory no Default $PIPER_filenamePrefixForDownload (if set) Secret no Configuration scope \u2612 parameter \u2612 general \u2612 steps \u2612 stages Resource references none","title":"filenamePrefixForDownload"},{"location":"steps/abapEnvironmentBuild/#host","text":"Specifies the host address of the SAP BTP ABAP Environment system back to overview Scope Details Aliases - Type string Mandatory no Default $PIPER_host (if set) Secret no Configuration scope \u2612 parameter \u2612 general \u2612 steps \u2612 stages Resource references none","title":"host"},{"location":"steps/abapEnvironmentBuild/#maxruntimeinminutes","text":"maximal runtime of the step in minutes back to overview Scope Details Aliases - Type int Mandatory no Default 360 Secret no Configuration scope \u2612 parameter \u2610 general \u2612 steps \u2612 stages Resource references none","title":"maxRuntimeInMinutes"},{"location":"steps/abapEnvironmentBuild/#password","text":"Password back to overview Scope Details Aliases - Type string Mandatory yes Default $PIPER_password (if set) Secret yes Configuration scope \u2612 parameter \u2610 general \u2612 steps \u2612 stages Resource references none","title":"password"},{"location":"steps/abapEnvironmentBuild/#phase","text":"Phase as specified in the build script in the backend system back to overview Scope Details Aliases - Type string Mandatory yes Default $PIPER_phase (if set) Secret no Configuration scope \u2612 parameter \u2610 general \u2612 steps \u2612 stages Resource references none","title":"phase"},{"location":"steps/abapEnvironmentBuild/#pollingintervalinseconds","text":"wait time in seconds till next status request in the backend system back to overview Scope Details Aliases - Type int Mandatory no Default 60 Secret no Configuration scope \u2612 parameter \u2610 general \u2612 steps \u2612 stages Resource references none","title":"pollingIntervalInSeconds"},{"location":"steps/abapEnvironmentBuild/#publishalldownloadedresultfiles","text":"If true, it publishes all downloaded files back to overview Scope Details Aliases - Type bool Mandatory no Default false Possible values - true - false Secret no Configuration scope \u2612 parameter \u2610 general \u2612 steps \u2612 stages Resource references none","title":"publishAllDownloadedResultFiles"},{"location":"steps/abapEnvironmentBuild/#publishresultfilenames","text":"Only the specified files get published, in case the file was not downloaded before an error occures back to overview Scope Details Aliases - Type []string Mandatory no Default $PIPER_publishResultFilenames (if set) Secret no Configuration scope \u2612 parameter \u2610 general \u2612 steps \u2612 stages Resource references none","title":"publishResultFilenames"},{"location":"steps/abapEnvironmentBuild/#script","text":"The common script environment of the Jenkinsfile running. Typically the reference to the script calling the pipeline step is provided with the this parameter, as in script: this . This allows the function to access the commonPipelineEnvironment for retrieving, e.g. configuration parameters. back to overview Scope Details Aliases - Type Jenkins Script Mandatory yes Default Secret no Configuration scope \u2610 parameter \u2610 general \u2610 steps \u2610 stages Resource references none","title":"script"},{"location":"steps/abapEnvironmentBuild/#stoponfirsterror","text":"If false, it does not stop if an error occured for one repository in the addonDescriptor, but continues with the next repository. However the step is marked as failed in the end if an error occured. back to overview Scope Details Aliases - Type bool Mandatory no Default false Possible values - true - false Secret no Configuration scope \u2612 parameter \u2610 general \u2612 steps \u2612 stages Resource references none","title":"stopOnFirstError"},{"location":"steps/abapEnvironmentBuild/#subdirectoryfordownload","text":"Target directory to store the downloaded files, {buildID} and {taskID} can be used and will be resolved accordingly back to overview Scope Details Aliases - Type string Mandatory no Default $PIPER_subDirectoryForDownload (if set) Secret no Configuration scope \u2612 parameter \u2612 general \u2612 steps \u2612 stages Resource references none","title":"subDirectoryForDownload"},{"location":"steps/abapEnvironmentBuild/#treatwarningsaserror","text":"If a warrning occures, the step will be set to unstable back to overview Scope Details Aliases - Type bool Mandatory no Default false Possible values - true - false Secret no Configuration scope \u2612 parameter \u2610 general \u2612 steps \u2612 stages Resource references none","title":"treatWarningsAsError"},{"location":"steps/abapEnvironmentBuild/#usefieldsofaddondescriptor","text":"use fields of the addonDescriptor in the cpe as input values. Please enter in the format '[{\"use\":\"Name\",\"renameTo\":\"SWC\"}]' back to overview Scope Details Aliases - Type string Mandatory no Default $PIPER_useFieldsOfAddonDescriptor (if set) Secret no Configuration scope \u2612 parameter \u2610 general \u2612 steps \u2612 stages Resource references none","title":"useFieldsOfAddonDescriptor"},{"location":"steps/abapEnvironmentBuild/#username","text":"User back to overview Scope Details Aliases - Type string Mandatory yes Default $PIPER_username (if set) Secret yes Configuration scope \u2612 parameter \u2610 general \u2612 steps \u2612 stages Resource references none","title":"username"},{"location":"steps/abapEnvironmentBuild/#values","text":"Input values for the build framework, please enter in the format '[{\"value_id\":\"Id1\",\"value\":\"value1\"},{\"value_id\":\"Id2\",\"value\":\"value2\"}]' back to overview Scope Details Aliases - Type string Mandatory no Default $PIPER_values (if set) Secret no Configuration scope \u2612 parameter \u2610 general \u2612 steps \u2612 stages Resource references none","title":"values"},{"location":"steps/abapEnvironmentBuild/#verbose","text":"verbose output back to overview Scope Details Aliases - Type bool Mandatory no Default false Possible values - true - false Secret no Configuration scope \u2612 parameter \u2612 general \u2612 steps \u2612 stages Resource references none","title":"verbose"},{"location":"steps/abapEnvironmentBuild/#abapcredentialsid","text":"Jenkins credentials ID containing user and password to authenticate to the Cloud Platform ABAP Environment system or the Cloud Foundry API back to overview Scope Details Aliases - cfCredentialsId - credentialsId Type string Configuration scope \u2612 parameter \u2612 general \u2612 steps \u2612 stages","title":"abapCredentialsId"},{"location":"steps/abapEnvironmentBuild/#examples","text":"","title":"Examples"},{"location":"steps/abapEnvironmentBuild/#configuration-in-the-configyml","text":"If you want to use this step several time in one pipeline with different phases, the steps have to be put in different stages as it is not allowed to run the same step repeatedly in one stage. The recommended way to configure your pipeline is via the config.yml file. In this case, calling the step in the Jenkinsfile is reduced to one line: stage ( 'MyPhase' ) { steps { abapEnvironmentBuild script: this } } If you want to provide the host and credentials of the Communication Arrangement directly or you want to run in on premise, the configuration could look as follows: stages : MyPhase : abapCredentialsId : 'abapCredentialsId' , host : 'https://myABAPendpoint.com' , Or by authenticating against Cloud Foundry and reading the Service Key details from there: stages : MyPhase : abapCredentialsId : 'cfCredentialsId' , cfApiEndpoint : 'https://test.server.com' , cfOrg : 'cfOrg' , cfSpace : 'cfSpace' , cfServiceInstance : 'myServiceInstance' , cfServiceKeyName : 'myServiceKey' , One possible complete config example. Please note that the values are handed over as a string, which has inside a json structure: stages : MyPhase : abapCredentialsId : 'abapCredentialsId' host : 'https://myABAPendpoint.com' certificateNames : [ 'myCert.cer' ] phase : 'MyPhase' values : '[{\"value_id\":\"ID1\",\"value\":\"Value1\"},{\"value_id\":\"ID2\",\"value\":\"Value2\"}]' downloadResultFilenames : [ 'File1' , 'File2' ] publishResultFilenames : [ 'File2' ] subDirectoryForDownload : 'MyDir' filenamePrefixForDownload : 'MyPrefix' treatWarningsAsError : true maxRuntimeInMinutes : 360 pollingIntervallInSeconds : 15","title":"Configuration in the config.yml"},{"location":"steps/abapEnvironmentCheckoutBranch/","text":"abapEnvironmentCheckoutBranch \u00b6 Switches between branches of a git repository on a SAP BTP ABAP Environment system Description \u00b6 This step switches between branches of a git repository (Software Component) on a SAP BTP ABAP Environment system. Please provide either of the following options: The host and credentials the BTP ABAP Environment system itself. The credentials must be configured for the Communication Scenario SAP_COM_0948 . The Cloud Foundry parameters (API endpoint, organization, space), credentials, the service instance for the ABAP service and the service key for the Communication Scenario SAP_COM_0948. Only provide one of those options with the respective credentials. If all values are provided, the direct communication (via host) has priority. Usage \u00b6 We recommend to define values of step parameters via .pipeline/config.yml file . In this case, calling the step is essentially reduced to defining the step name. Calling the step can be done either in an orchestrator specific way (e.g. via a Jenkins library step) or on the command line. Jenkins Command Line library ( 'piper-lib-os' ) abapEnvironmentCheckoutBranch script: this piper abapEnvironmentCheckoutBranch Prerequisites \u00b6 A SAP BTP, ABAP environment system is available. On this system, a Communication User , a Communication System and a Communication Arrangement is setup for the Communication Scenario \"Software Component Management Integration (SAP_COM_0948)\". This can be done manually through the respective applications on the SAP BTP, ABAP environment system or through creating a service key for the system on Cloud Foundry with the parameters {\"scenario_id\": \"SAP_COM_0948\", \"type\": \"basic\"}. In a pipeline, you can do this with the step cloudFoundryCreateServiceKey . In addition, the software component should be cloned into the system instance. You can do this with the step abapEnvironmentCloneGitRepo . Parameters \u00b6 Overview - Step \u00b6 Name Mandatory Additional information password (yes) pass via ENV or Jenkins credentials ( abapCredentialsId ) script (yes) reference to Jenkins main pipeline script username (yes) pass via ENV or Jenkins credentials ( abapCredentialsId ) branchName no certificateNames no cfApiEndpoint no cfOrg no cfServiceInstance no cfServiceKeyName no cfSpace no host no logOutput no repositories no repositoryName no verbose no activates debug output Overview - Execution Environment \u00b6 Orchestrator-specific only These parameters are relevant for orchestrator usage and not considered when using the command line option. Name Mandatory Additional information containerCommand no containerShell no dockerEnvVars no dockerImage no dockerName no dockerOptions no dockerPullImage no dockerVolumeBind no dockerWorkspace no Details \u00b6 branchName \u00b6 Specifies a Branch of a Repository (Software Component) on the SAP BTP ABAP Environment system back to overview Scope Details Aliases - Type string Mandatory no Default $PIPER_branchName (if set) Secret no Configuration scope \u2612 parameter \u2610 general \u2612 steps \u2612 stages Resource references none certificateNames \u00b6 file names of trusted (self-signed) server certificates - need to be stored in .pipeline/trustStore back to overview Scope Details Aliases - Type []string Mandatory no Default $PIPER_certificateNames (if set) Secret no Configuration scope \u2612 parameter \u2612 general \u2612 steps \u2612 stages Resource references none cfApiEndpoint \u00b6 Cloud Foundry API Enpoint back to overview Scope Details Aliases cloudFoundry/apiEndpoint Type string Mandatory no Default $PIPER_cfApiEndpoint (if set) Secret no Configuration scope \u2612 parameter \u2612 general \u2612 steps \u2612 stages Resource references none cfOrg \u00b6 Cloud Foundry target organization back to overview Scope Details Aliases cloudFoundry/org Type string Mandatory no Default $PIPER_cfOrg (if set) Secret no Configuration scope \u2612 parameter \u2612 general \u2612 steps \u2612 stages Resource references none cfServiceInstance \u00b6 Cloud Foundry Service Instance back to overview Scope Details Aliases cloudFoundry/serviceInstance Type string Mandatory no Default $PIPER_cfServiceInstance (if set) Secret no Configuration scope \u2612 parameter \u2612 general \u2612 steps \u2612 stages Resource references none cfServiceKeyName \u00b6 Cloud Foundry Service Key back to overview Scope Details Aliases - cloudFoundry/serviceKey - cloudFoundry/serviceKeyName - cfServiceKeyName Type string Mandatory no Default $PIPER_cfServiceKeyName (if set) Secret no Configuration scope \u2612 parameter \u2612 general \u2612 steps \u2612 stages Resource references none cfSpace \u00b6 Cloud Foundry target space back to overview Scope Details Aliases cloudFoundry/space Type string Mandatory no Default $PIPER_cfSpace (if set) Secret no Configuration scope \u2612 parameter \u2612 general \u2612 steps \u2612 stages Resource references none containerCommand \u00b6 Jenkins-specific: Used for proper environment setup. Kubernetes only: Allows to specify start command for container created with dockerImage parameter to overwrite Piper default (/usr/bin/tail -f /dev/null). back to overview Scope Details Aliases - Type string Mandatory no Default Secret no Configuration scope \u2612 parameter \u2612 general \u2612 steps \u2612 stages Resource references none containerShell \u00b6 Jenkins-specific: Used for proper environment setup. Allows to specify the shell to be executed for container with containerName. back to overview Scope Details Aliases - Type string Mandatory no Default Secret no Configuration scope \u2612 parameter \u2612 general \u2612 steps \u2612 stages Resource references none dockerEnvVars \u00b6 Environment variables to set in the container, e.g. [http_proxy: \"proxy:8080\"]. back to overview Scope Details Aliases - Type map[string]string Mandatory no Default Secret no Configuration scope \u2612 parameter \u2612 general \u2612 steps \u2612 stages Resource references none dockerImage \u00b6 Name of the docker image that should be used. If empty, Docker is not used and the command is executed directly on the Jenkins system. back to overview Scope Details Aliases - Type string Mandatory no Default ppiper/cf-cli:latest Secret no Configuration scope \u2612 parameter \u2612 general \u2612 steps \u2612 stages Resource references none dockerName \u00b6 Kubernetes only: Name of the container launching dockerImage. SideCar only: Name of the container in local network. back to overview Scope Details Aliases - Type string Mandatory no Default cf Secret no Configuration scope \u2612 parameter \u2612 general \u2612 steps \u2612 stages Resource references none dockerOptions \u00b6 Docker options to be set when starting the container. back to overview Scope Details Aliases - Type []string Mandatory no Default Secret no Configuration scope \u2612 parameter \u2612 general \u2612 steps \u2612 stages Resource references none dockerPullImage \u00b6 Set this to 'false' to bypass a docker image pull. Useful during development process. Allows testing of images which are available in the local registry only. back to overview Scope Details Aliases - Type bool Mandatory no Default true Possible values - true - false Secret no Configuration scope \u2612 parameter \u2612 general \u2612 steps \u2612 stages Resource references none dockerVolumeBind \u00b6 Jenkins-specific: Used for proper environment setup. Volumes that should be mounted into the docker container. back to overview Scope Details Aliases - Type map[string]string Mandatory no Default Secret no Configuration scope \u2612 parameter \u2612 general \u2612 steps \u2612 stages Resource references none dockerWorkspace \u00b6 Jenkins-specific: Used for proper environment setup. Kubernetes only: Specifies a dedicated user home directory for the container which will be passed as value for environment variable HOME . back to overview Scope Details Aliases - Type string Mandatory no Default Secret no Configuration scope \u2612 parameter \u2612 general \u2612 steps \u2612 stages Resource references none host \u00b6 Specifies the host address of the SAP BTP ABAP Environment system back to overview Scope Details Aliases - Type string Mandatory no Default $PIPER_host (if set) Secret no Configuration scope \u2612 parameter \u2612 general \u2612 steps \u2612 stages Resource references none logOutput \u00b6 Specifies how the clone logs from the Manage Software Components App are displayed or saved back to overview Scope Details Aliases - Type string Mandatory no Default STANDARD Possible values - ZIP - STANDARD Secret no Configuration scope \u2612 parameter \u2612 general \u2612 steps \u2612 stages Resource references none password \u00b6 Password for either the Cloud Foundry API or the Communication Arrangement for SAP_COM_0948 back to overview Scope Details Aliases - Type string Mandatory yes Default $PIPER_password (if set) Secret yes Configuration scope \u2612 parameter \u2610 general \u2612 steps \u2612 stages Resource references Jenkins credential id: id: abapCredentialsId reference to: password repositories \u00b6 Specifies a YAML file containing the repositories configuration back to overview Scope Details Aliases - Type string Mandatory no Default $PIPER_repositories (if set) Secret no Configuration scope \u2612 parameter \u2612 general \u2612 steps \u2612 stages Resource references none repositoryName \u00b6 Specifies a Repository (Software Component) on the SAP BTP ABAP Environment system back to overview Scope Details Aliases - Type string Mandatory no Default $PIPER_repositoryName (if set) Secret no Configuration scope \u2612 parameter \u2610 general \u2612 steps \u2612 stages Resource references none script \u00b6 The common script environment of the Jenkinsfile running. Typically the reference to the script calling the pipeline step is provided with the this parameter, as in script: this . This allows the function to access the commonPipelineEnvironment for retrieving, e.g. configuration parameters. back to overview Scope Details Aliases - Type Jenkins Script Mandatory yes Default Secret no Configuration scope \u2610 parameter \u2610 general \u2610 steps \u2610 stages Resource references none username \u00b6 User for either the Cloud Foundry API or the Communication Arrangement for SAP_COM_0948 back to overview Scope Details Aliases - Type string Mandatory yes Default $PIPER_username (if set) Secret yes Configuration scope \u2612 parameter \u2610 general \u2612 steps \u2612 stages Resource references Jenkins credential id: id: abapCredentialsId reference to: username verbose \u00b6 verbose output back to overview Scope Details Aliases - Type bool Mandatory no Default false Possible values - true - false Secret no Configuration scope \u2612 parameter \u2612 general \u2612 steps \u2612 stages Resource references none abapCredentialsId \u00b6 Jenkins credentials ID containing user and password to authenticate to the BTP ABAP Environment system or the Cloud Foundry API back to overview Scope Details Aliases - cfCredentialsId - credentialsId Type string Configuration scope \u2612 parameter \u2612 general \u2612 steps \u2612 stages Example: Configuration in the config.yml \u00b6 The recommended way to configure your pipeline is via the config.yml file. In this case, calling the step in the Jenkinsfile is reduced to one line: abapEnvironmentCheckoutBranch script: this If you want to provide the host and credentials of the Communication Arrangement directly, the configuration could look as follows: steps : abapEnvironmentCheckoutBranch : repositoryName : '/DMO/GIT_REPOSITORY' branchName : 'my-demo-branch' abapCredentialsId : 'abapCredentialsId' host : '1234-abcd-5678-efgh-ijk.abap.eu10.hana.ondemand.com' Please note that the branchName parameter specifies the target branch you want to switch on. Also keep in mind that the repositoryName parameter must define a single repository. Also you can specify a dedicated file, e.g. repositories.yml containing a list of repositories and the respective branches you want to switch on: steps : abapEnvironmentCheckoutBranch : repositories : 'repositories.yml' abapCredentialsId : 'abapCredentialsId' host : '1234-abcd-5678-efgh-ijk.abap.eu10.hana.ondemand.com' The associated config file, e.g. repositories.yml could look as follows: repositories : - name : '/DMO/GIT_REPOSITORY' branch : 'master' - name : '/DMO/GIT_REPO' branch : 'master' Please note that you need to use the YAML data structure as in the example above when using the repositories.yml config file. For this step it is mandatory to fill the branch values. You can also use this file for the abapEnvironmentPullGitRepo step. Using this configuration file is the recommended approach. If you want to read the host and credentials from the Cloud Foundry service key of the respective instance, the configuration could look as follows: steps : abapEnvironmentCheckoutBranch : repositoryName : '/DMO/GIT_REPOSITORY' branchName : 'my-demo-branch' cfCredentialsId : 'cfCredentialsId' cfApiEndpoint : 'https://test.server.com' cfOrg : 'cfOrg' cfSpace : 'cfSpace' cfServiceInstance : 'cfServiceInstance' cfServiceKeyName : 'cfServiceKeyName' Example: Configuration in the Jenkinsfile \u00b6 It is also possible to call the steps - including all parameters - directly in the Jenkinsfile. In the first example, the host and the credentialsId of the Communication Arrangement are directly provided. abapEnvironmentCheckoutBranach ( script: this , repositoryName: '/DMO/GIT_REPOSITORY' , branchName: 'my-demo-branch' , abapCredentialsId: 'abapCredentialsId' , host: '1234-abcd-5678-efgh-ijk.abap.eu10.hana.ondemand.com' ) In the second example, the host and credentialsId will be read from the provided cloud foundry service key of the specified service instance. abapEnvironmentCheckoutBranch ( script: this , repositoryName: '/DMO/GIT_REPOSITORY' , branchName: 'my-demo-branch' abapCredentialsId: 'cfCredentialsId' , cfApiEndpoint: 'https://test.server.com' , cfOrg: 'cfOrg' , cfSpace: 'cfSpace' , cfServiceInstance: 'cfServiceInstance' , cfServiceKeyName: 'cfServiceKeyName' )","title":"abapEnvironmentCheckoutBranch"},{"location":"steps/abapEnvironmentCheckoutBranch/#abapenvironmentcheckoutbranch","text":"Switches between branches of a git repository on a SAP BTP ABAP Environment system","title":"abapEnvironmentCheckoutBranch"},{"location":"steps/abapEnvironmentCheckoutBranch/#description","text":"This step switches between branches of a git repository (Software Component) on a SAP BTP ABAP Environment system. Please provide either of the following options: The host and credentials the BTP ABAP Environment system itself. The credentials must be configured for the Communication Scenario SAP_COM_0948 . The Cloud Foundry parameters (API endpoint, organization, space), credentials, the service instance for the ABAP service and the service key for the Communication Scenario SAP_COM_0948. Only provide one of those options with the respective credentials. If all values are provided, the direct communication (via host) has priority.","title":"Description"},{"location":"steps/abapEnvironmentCheckoutBranch/#usage","text":"We recommend to define values of step parameters via .pipeline/config.yml file . In this case, calling the step is essentially reduced to defining the step name. Calling the step can be done either in an orchestrator specific way (e.g. via a Jenkins library step) or on the command line. Jenkins Command Line library ( 'piper-lib-os' ) abapEnvironmentCheckoutBranch script: this piper abapEnvironmentCheckoutBranch","title":"Usage"},{"location":"steps/abapEnvironmentCheckoutBranch/#prerequisites","text":"A SAP BTP, ABAP environment system is available. On this system, a Communication User , a Communication System and a Communication Arrangement is setup for the Communication Scenario \"Software Component Management Integration (SAP_COM_0948)\". This can be done manually through the respective applications on the SAP BTP, ABAP environment system or through creating a service key for the system on Cloud Foundry with the parameters {\"scenario_id\": \"SAP_COM_0948\", \"type\": \"basic\"}. In a pipeline, you can do this with the step cloudFoundryCreateServiceKey . In addition, the software component should be cloned into the system instance. You can do this with the step abapEnvironmentCloneGitRepo .","title":"Prerequisites"},{"location":"steps/abapEnvironmentCheckoutBranch/#parameters","text":"","title":"Parameters"},{"location":"steps/abapEnvironmentCheckoutBranch/#overview-step","text":"Name Mandatory Additional information password (yes) pass via ENV or Jenkins credentials ( abapCredentialsId ) script (yes) reference to Jenkins main pipeline script username (yes) pass via ENV or Jenkins credentials ( abapCredentialsId ) branchName no certificateNames no cfApiEndpoint no cfOrg no cfServiceInstance no cfServiceKeyName no cfSpace no host no logOutput no repositories no repositoryName no verbose no activates debug output","title":"Overview - Step"},{"location":"steps/abapEnvironmentCheckoutBranch/#overview-execution-environment","text":"Orchestrator-specific only These parameters are relevant for orchestrator usage and not considered when using the command line option. Name Mandatory Additional information containerCommand no containerShell no dockerEnvVars no dockerImage no dockerName no dockerOptions no dockerPullImage no dockerVolumeBind no dockerWorkspace no","title":"Overview - Execution Environment"},{"location":"steps/abapEnvironmentCheckoutBranch/#details","text":"","title":"Details"},{"location":"steps/abapEnvironmentCheckoutBranch/#branchname","text":"Specifies a Branch of a Repository (Software Component) on the SAP BTP ABAP Environment system back to overview Scope Details Aliases - Type string Mandatory no Default $PIPER_branchName (if set) Secret no Configuration scope \u2612 parameter \u2610 general \u2612 steps \u2612 stages Resource references none","title":"branchName"},{"location":"steps/abapEnvironmentCheckoutBranch/#certificatenames","text":"file names of trusted (self-signed) server certificates - need to be stored in .pipeline/trustStore back to overview Scope Details Aliases - Type []string Mandatory no Default $PIPER_certificateNames (if set) Secret no Configuration scope \u2612 parameter \u2612 general \u2612 steps \u2612 stages Resource references none","title":"certificateNames"},{"location":"steps/abapEnvironmentCheckoutBranch/#cfapiendpoint","text":"Cloud Foundry API Enpoint back to overview Scope Details Aliases cloudFoundry/apiEndpoint Type string Mandatory no Default $PIPER_cfApiEndpoint (if set) Secret no Configuration scope \u2612 parameter \u2612 general \u2612 steps \u2612 stages Resource references none","title":"cfApiEndpoint"},{"location":"steps/abapEnvironmentCheckoutBranch/#cforg","text":"Cloud Foundry target organization back to overview Scope Details Aliases cloudFoundry/org Type string Mandatory no Default $PIPER_cfOrg (if set) Secret no Configuration scope \u2612 parameter \u2612 general \u2612 steps \u2612 stages Resource references none","title":"cfOrg"},{"location":"steps/abapEnvironmentCheckoutBranch/#cfserviceinstance","text":"Cloud Foundry Service Instance back to overview Scope Details Aliases cloudFoundry/serviceInstance Type string Mandatory no Default $PIPER_cfServiceInstance (if set) Secret no Configuration scope \u2612 parameter \u2612 general \u2612 steps \u2612 stages Resource references none","title":"cfServiceInstance"},{"location":"steps/abapEnvironmentCheckoutBranch/#cfservicekeyname","text":"Cloud Foundry Service Key back to overview Scope Details Aliases - cloudFoundry/serviceKey - cloudFoundry/serviceKeyName - cfServiceKeyName Type string Mandatory no Default $PIPER_cfServiceKeyName (if set) Secret no Configuration scope \u2612 parameter \u2612 general \u2612 steps \u2612 stages Resource references none","title":"cfServiceKeyName"},{"location":"steps/abapEnvironmentCheckoutBranch/#cfspace","text":"Cloud Foundry target space back to overview Scope Details Aliases cloudFoundry/space Type string Mandatory no Default $PIPER_cfSpace (if set) Secret no Configuration scope \u2612 parameter \u2612 general \u2612 steps \u2612 stages Resource references none","title":"cfSpace"},{"location":"steps/abapEnvironmentCheckoutBranch/#containercommand","text":"Jenkins-specific: Used for proper environment setup. Kubernetes only: Allows to specify start command for container created with dockerImage parameter to overwrite Piper default (/usr/bin/tail -f /dev/null). back to overview Scope Details Aliases - Type string Mandatory no Default Secret no Configuration scope \u2612 parameter \u2612 general \u2612 steps \u2612 stages Resource references none","title":"containerCommand"},{"location":"steps/abapEnvironmentCheckoutBranch/#containershell","text":"Jenkins-specific: Used for proper environment setup. Allows to specify the shell to be executed for container with containerName. back to overview Scope Details Aliases - Type string Mandatory no Default Secret no Configuration scope \u2612 parameter \u2612 general \u2612 steps \u2612 stages Resource references none","title":"containerShell"},{"location":"steps/abapEnvironmentCheckoutBranch/#dockerenvvars","text":"Environment variables to set in the container, e.g. [http_proxy: \"proxy:8080\"]. back to overview Scope Details Aliases - Type map[string]string Mandatory no Default Secret no Configuration scope \u2612 parameter \u2612 general \u2612 steps \u2612 stages Resource references none","title":"dockerEnvVars"},{"location":"steps/abapEnvironmentCheckoutBranch/#dockerimage","text":"Name of the docker image that should be used. If empty, Docker is not used and the command is executed directly on the Jenkins system. back to overview Scope Details Aliases - Type string Mandatory no Default ppiper/cf-cli:latest Secret no Configuration scope \u2612 parameter \u2612 general \u2612 steps \u2612 stages Resource references none","title":"dockerImage"},{"location":"steps/abapEnvironmentCheckoutBranch/#dockername","text":"Kubernetes only: Name of the container launching dockerImage. SideCar only: Name of the container in local network. back to overview Scope Details Aliases - Type string Mandatory no Default cf Secret no Configuration scope \u2612 parameter \u2612 general \u2612 steps \u2612 stages Resource references none","title":"dockerName"},{"location":"steps/abapEnvironmentCheckoutBranch/#dockeroptions","text":"Docker options to be set when starting the container. back to overview Scope Details Aliases - Type []string Mandatory no Default Secret no Configuration scope \u2612 parameter \u2612 general \u2612 steps \u2612 stages Resource references none","title":"dockerOptions"},{"location":"steps/abapEnvironmentCheckoutBranch/#dockerpullimage","text":"Set this to 'false' to bypass a docker image pull. Useful during development process. Allows testing of images which are available in the local registry only. back to overview Scope Details Aliases - Type bool Mandatory no Default true Possible values - true - false Secret no Configuration scope \u2612 parameter \u2612 general \u2612 steps \u2612 stages Resource references none","title":"dockerPullImage"},{"location":"steps/abapEnvironmentCheckoutBranch/#dockervolumebind","text":"Jenkins-specific: Used for proper environment setup. Volumes that should be mounted into the docker container. back to overview Scope Details Aliases - Type map[string]string Mandatory no Default Secret no Configuration scope \u2612 parameter \u2612 general \u2612 steps \u2612 stages Resource references none","title":"dockerVolumeBind"},{"location":"steps/abapEnvironmentCheckoutBranch/#dockerworkspace","text":"Jenkins-specific: Used for proper environment setup. Kubernetes only: Specifies a dedicated user home directory for the container which will be passed as value for environment variable HOME . back to overview Scope Details Aliases - Type string Mandatory no Default Secret no Configuration scope \u2612 parameter \u2612 general \u2612 steps \u2612 stages Resource references none","title":"dockerWorkspace"},{"location":"steps/abapEnvironmentCheckoutBranch/#host","text":"Specifies the host address of the SAP BTP ABAP Environment system back to overview Scope Details Aliases - Type string Mandatory no Default $PIPER_host (if set) Secret no Configuration scope \u2612 parameter \u2612 general \u2612 steps \u2612 stages Resource references none","title":"host"},{"location":"steps/abapEnvironmentCheckoutBranch/#logoutput","text":"Specifies how the clone logs from the Manage Software Components App are displayed or saved back to overview Scope Details Aliases - Type string Mandatory no Default STANDARD Possible values - ZIP - STANDARD Secret no Configuration scope \u2612 parameter \u2612 general \u2612 steps \u2612 stages Resource references none","title":"logOutput"},{"location":"steps/abapEnvironmentCheckoutBranch/#password","text":"Password for either the Cloud Foundry API or the Communication Arrangement for SAP_COM_0948 back to overview Scope Details Aliases - Type string Mandatory yes Default $PIPER_password (if set) Secret yes Configuration scope \u2612 parameter \u2610 general \u2612 steps \u2612 stages Resource references Jenkins credential id: id: abapCredentialsId reference to: password","title":"password"},{"location":"steps/abapEnvironmentCheckoutBranch/#repositories","text":"Specifies a YAML file containing the repositories configuration back to overview Scope Details Aliases - Type string Mandatory no Default $PIPER_repositories (if set) Secret no Configuration scope \u2612 parameter \u2612 general \u2612 steps \u2612 stages Resource references none","title":"repositories"},{"location":"steps/abapEnvironmentCheckoutBranch/#repositoryname","text":"Specifies a Repository (Software Component) on the SAP BTP ABAP Environment system back to overview Scope Details Aliases - Type string Mandatory no Default $PIPER_repositoryName (if set) Secret no Configuration scope \u2612 parameter \u2610 general \u2612 steps \u2612 stages Resource references none","title":"repositoryName"},{"location":"steps/abapEnvironmentCheckoutBranch/#script","text":"The common script environment of the Jenkinsfile running. Typically the reference to the script calling the pipeline step is provided with the this parameter, as in script: this . This allows the function to access the commonPipelineEnvironment for retrieving, e.g. configuration parameters. back to overview Scope Details Aliases - Type Jenkins Script Mandatory yes Default Secret no Configuration scope \u2610 parameter \u2610 general \u2610 steps \u2610 stages Resource references none","title":"script"},{"location":"steps/abapEnvironmentCheckoutBranch/#username","text":"User for either the Cloud Foundry API or the Communication Arrangement for SAP_COM_0948 back to overview Scope Details Aliases - Type string Mandatory yes Default $PIPER_username (if set) Secret yes Configuration scope \u2612 parameter \u2610 general \u2612 steps \u2612 stages Resource references Jenkins credential id: id: abapCredentialsId reference to: username","title":"username"},{"location":"steps/abapEnvironmentCheckoutBranch/#verbose","text":"verbose output back to overview Scope Details Aliases - Type bool Mandatory no Default false Possible values - true - false Secret no Configuration scope \u2612 parameter \u2612 general \u2612 steps \u2612 stages Resource references none","title":"verbose"},{"location":"steps/abapEnvironmentCheckoutBranch/#abapcredentialsid","text":"Jenkins credentials ID containing user and password to authenticate to the BTP ABAP Environment system or the Cloud Foundry API back to overview Scope Details Aliases - cfCredentialsId - credentialsId Type string Configuration scope \u2612 parameter \u2612 general \u2612 steps \u2612 stages","title":"abapCredentialsId"},{"location":"steps/abapEnvironmentCheckoutBranch/#example-configuration-in-the-configyml","text":"The recommended way to configure your pipeline is via the config.yml file. In this case, calling the step in the Jenkinsfile is reduced to one line: abapEnvironmentCheckoutBranch script: this If you want to provide the host and credentials of the Communication Arrangement directly, the configuration could look as follows: steps : abapEnvironmentCheckoutBranch : repositoryName : '/DMO/GIT_REPOSITORY' branchName : 'my-demo-branch' abapCredentialsId : 'abapCredentialsId' host : '1234-abcd-5678-efgh-ijk.abap.eu10.hana.ondemand.com' Please note that the branchName parameter specifies the target branch you want to switch on. Also keep in mind that the repositoryName parameter must define a single repository. Also you can specify a dedicated file, e.g. repositories.yml containing a list of repositories and the respective branches you want to switch on: steps : abapEnvironmentCheckoutBranch : repositories : 'repositories.yml' abapCredentialsId : 'abapCredentialsId' host : '1234-abcd-5678-efgh-ijk.abap.eu10.hana.ondemand.com' The associated config file, e.g. repositories.yml could look as follows: repositories : - name : '/DMO/GIT_REPOSITORY' branch : 'master' - name : '/DMO/GIT_REPO' branch : 'master' Please note that you need to use the YAML data structure as in the example above when using the repositories.yml config file. For this step it is mandatory to fill the branch values. You can also use this file for the abapEnvironmentPullGitRepo step. Using this configuration file is the recommended approach. If you want to read the host and credentials from the Cloud Foundry service key of the respective instance, the configuration could look as follows: steps : abapEnvironmentCheckoutBranch : repositoryName : '/DMO/GIT_REPOSITORY' branchName : 'my-demo-branch' cfCredentialsId : 'cfCredentialsId' cfApiEndpoint : 'https://test.server.com' cfOrg : 'cfOrg' cfSpace : 'cfSpace' cfServiceInstance : 'cfServiceInstance' cfServiceKeyName : 'cfServiceKeyName'","title":"Example: Configuration in the config.yml"},{"location":"steps/abapEnvironmentCheckoutBranch/#example-configuration-in-the-jenkinsfile","text":"It is also possible to call the steps - including all parameters - directly in the Jenkinsfile. In the first example, the host and the credentialsId of the Communication Arrangement are directly provided. abapEnvironmentCheckoutBranach ( script: this , repositoryName: '/DMO/GIT_REPOSITORY' , branchName: 'my-demo-branch' , abapCredentialsId: 'abapCredentialsId' , host: '1234-abcd-5678-efgh-ijk.abap.eu10.hana.ondemand.com' ) In the second example, the host and credentialsId will be read from the provided cloud foundry service key of the specified service instance. abapEnvironmentCheckoutBranch ( script: this , repositoryName: '/DMO/GIT_REPOSITORY' , branchName: 'my-demo-branch' abapCredentialsId: 'cfCredentialsId' , cfApiEndpoint: 'https://test.server.com' , cfOrg: 'cfOrg' , cfSpace: 'cfSpace' , cfServiceInstance: 'cfServiceInstance' , cfServiceKeyName: 'cfServiceKeyName' )","title":"Example: Configuration in the Jenkinsfile"},{"location":"steps/abapEnvironmentCloneGitRepo/","text":"abapEnvironmentCloneGitRepo \u00b6 Clones a git repository to a SAP BTP ABAP Environment system Description \u00b6 Clones a git repository (Software Component) to a SAP BTP ABAP Environment system. If the repository is already cloned, the step will checkout the configured branch and pull the specified commit, instead. Please provide either of the following options: The host and credentials the BTP ABAP Environment system itself. The credentials must be configured for the Communication Scenario SAP_COM_0948 . The Cloud Foundry parameters (API endpoint, organization, space), credentials, the service instance for the ABAP service and the service key for the Communication Scenario SAP_COM_0948. Only provide one of those options with the respective credentials. If all values are provided, the direct communication (via host) has priority. Usage \u00b6 We recommend to define values of step parameters via .pipeline/config.yml file . In this case, calling the step is essentially reduced to defining the step name. Calling the step can be done either in an orchestrator specific way (e.g. via a Jenkins library step) or on the command line. Jenkins Command Line library ( 'piper-lib-os' ) abapEnvironmentCloneGitRepo script: this piper abapEnvironmentCloneGitRepo Prerequisites \u00b6 A SAP BTP, ABAP environment system is available. On this system, a Communication User , a Communication System and a Communication Arrangement is setup for the Communication Scenario \"Software Component Management Integration (SAP_COM_0948)\". This can be done manually through the respective applications on the SAP BTP, ABAP environment system or through creating a service key for the system on Cloud Foundry with the parameters {\"scenario_id\": \"SAP_COM_0948\", \"type\": \"basic\"}. In a pipeline, you can do this with the step cloudFoundryCreateServiceKey . Parameters \u00b6 Overview - Step \u00b6 Name Mandatory Additional information byogPassword (yes) pass via ENV or Jenkins credentials ( byogCredentialsId ) byogUsername (yes) pass via ENV or Jenkins credentials ( byogCredentialsId ) password (yes) pass via ENV or Jenkins credentials ( abapCredentialsId ) script (yes) reference to Jenkins main pipeline script username (yes) pass via ENV or Jenkins credentials ( abapCredentialsId ) branchName no byogAuthMethod no certificateNames no cfApiEndpoint no cfOrg no cfServiceInstance no cfServiceKeyName no cfSpace no host no logOutput no repositories no repositoryName no verbose no activates debug output Overview - Execution Environment \u00b6 Orchestrator-specific only These parameters are relevant for orchestrator usage and not considered when using the command line option. Name Mandatory Additional information containerCommand no containerShell no dockerEnvVars no dockerImage no dockerName no dockerOptions no dockerPullImage no dockerVolumeBind no dockerWorkspace no Details \u00b6 branchName \u00b6 Specifies a branch of a repository (Software Components) on the SAP BTP ABAP Environment system back to overview Scope Details Aliases - Type string Mandatory no Default $PIPER_branchName (if set) Secret no Configuration scope \u2612 parameter \u2610 general \u2612 steps \u2612 stages Resource references none byogAuthMethod \u00b6 Specifies which authentication method is used for bring your own git (BYOG) repositories back to overview Scope Details Aliases - Type string Mandatory no Default TOKEN Possible values - TOKEN - BASIC Secret no Configuration scope \u2612 parameter \u2612 general \u2612 steps \u2612 stages Resource references none byogPassword \u00b6 Password for bring your own git (BYOG) authentication back to overview Scope Details Aliases - Type string Mandatory yes Default $PIPER_byogPassword (if set) Secret yes Configuration scope \u2612 parameter \u2612 general \u2612 steps \u2612 stages Resource references Jenkins credential id: id: byogCredentialsId reference to: password byogUsername \u00b6 Username for bring your own git (BYOG) authentication back to overview Scope Details Aliases - Type string Mandatory yes Default $PIPER_byogUsername (if set) Secret yes Configuration scope \u2612 parameter \u2612 general \u2612 steps \u2612 stages Resource references Jenkins credential id: id: byogCredentialsId reference to: username certificateNames \u00b6 file names of trusted (self-signed) server certificates - need to be stored in .pipeline/trustStore back to overview Scope Details Aliases - Type []string Mandatory no Default $PIPER_certificateNames (if set) Secret no Configuration scope \u2612 parameter \u2612 general \u2612 steps \u2612 stages Resource references none cfApiEndpoint \u00b6 Cloud Foundry API Enpoint back to overview Scope Details Aliases cloudFoundry/apiEndpoint Type string Mandatory no Default $PIPER_cfApiEndpoint (if set) Secret no Configuration scope \u2612 parameter \u2612 general \u2612 steps \u2612 stages Resource references none cfOrg \u00b6 Cloud Foundry target organization back to overview Scope Details Aliases cloudFoundry/org Type string Mandatory no Default $PIPER_cfOrg (if set) Secret no Configuration scope \u2612 parameter \u2612 general \u2612 steps \u2612 stages Resource references none cfServiceInstance \u00b6 Cloud Foundry Service Instance back to overview Scope Details Aliases cloudFoundry/serviceInstance Type string Mandatory no Default $PIPER_cfServiceInstance (if set) Secret no Configuration scope \u2612 parameter \u2612 general \u2612 steps \u2612 stages Resource references none cfServiceKeyName \u00b6 Cloud Foundry Service Key back to overview Scope Details Aliases - cloudFoundry/serviceKey - cloudFoundry/serviceKeyName - cfServiceKey Type string Mandatory no Default $PIPER_cfServiceKeyName (if set) Secret no Configuration scope \u2612 parameter \u2612 general \u2612 steps \u2612 stages Resource references none cfSpace \u00b6 Cloud Foundry target space back to overview Scope Details Aliases cloudFoundry/space Type string Mandatory no Default $PIPER_cfSpace (if set) Secret no Configuration scope \u2612 parameter \u2612 general \u2612 steps \u2612 stages Resource references none containerCommand \u00b6 Jenkins-specific: Used for proper environment setup. Kubernetes only: Allows to specify start command for container created with dockerImage parameter to overwrite Piper default (/usr/bin/tail -f /dev/null). back to overview Scope Details Aliases - Type string Mandatory no Default Secret no Configuration scope \u2612 parameter \u2612 general \u2612 steps \u2612 stages Resource references none containerShell \u00b6 Jenkins-specific: Used for proper environment setup. Allows to specify the shell to be executed for container with containerName. back to overview Scope Details Aliases - Type string Mandatory no Default Secret no Configuration scope \u2612 parameter \u2612 general \u2612 steps \u2612 stages Resource references none dockerEnvVars \u00b6 Environment variables to set in the container, e.g. [http_proxy: \"proxy:8080\"]. back to overview Scope Details Aliases - Type map[string]string Mandatory no Default Secret no Configuration scope \u2612 parameter \u2612 general \u2612 steps \u2612 stages Resource references none dockerImage \u00b6 Name of the docker image that should be used. If empty, Docker is not used and the command is executed directly on the Jenkins system. back to overview Scope Details Aliases - Type string Mandatory no Default ppiper/cf-cli:latest Secret no Configuration scope \u2612 parameter \u2612 general \u2612 steps \u2612 stages Resource references none dockerName \u00b6 Kubernetes only: Name of the container launching dockerImage. SideCar only: Name of the container in local network. back to overview Scope Details Aliases - Type string Mandatory no Default cf Secret no Configuration scope \u2612 parameter \u2612 general \u2612 steps \u2612 stages Resource references none dockerOptions \u00b6 Docker options to be set when starting the container. back to overview Scope Details Aliases - Type []string Mandatory no Default Secret no Configuration scope \u2612 parameter \u2612 general \u2612 steps \u2612 stages Resource references none dockerPullImage \u00b6 Set this to 'false' to bypass a docker image pull. Useful during development process. Allows testing of images which are available in the local registry only. back to overview Scope Details Aliases - Type bool Mandatory no Default true Possible values - true - false Secret no Configuration scope \u2612 parameter \u2612 general \u2612 steps \u2612 stages Resource references none dockerVolumeBind \u00b6 Jenkins-specific: Used for proper environment setup. Volumes that should be mounted into the docker container. back to overview Scope Details Aliases - Type map[string]string Mandatory no Default Secret no Configuration scope \u2612 parameter \u2612 general \u2612 steps \u2612 stages Resource references none dockerWorkspace \u00b6 Jenkins-specific: Used for proper environment setup. Kubernetes only: Specifies a dedicated user home directory for the container which will be passed as value for environment variable HOME . back to overview Scope Details Aliases - Type string Mandatory no Default Secret no Configuration scope \u2612 parameter \u2612 general \u2612 steps \u2612 stages Resource references none host \u00b6 Specifies the host address of the SAP BTP ABAP Environment system back to overview Scope Details Aliases - Type string Mandatory no Default $PIPER_host (if set) Secret no Configuration scope \u2612 parameter \u2612 general \u2612 steps \u2612 stages Resource references none logOutput \u00b6 Specifies how the clone logs from the Manage Software Components App are displayed or saved back to overview Scope Details Aliases - Type string Mandatory no Default STANDARD Possible values - ZIP - STANDARD Secret no Configuration scope \u2612 parameter \u2612 general \u2612 steps \u2612 stages Resource references none password \u00b6 Password for either the Cloud Foundry API or the Communication Arrangement for SAP_COM_0948 back to overview Scope Details Aliases - Type string Mandatory yes Default $PIPER_password (if set) Secret yes Configuration scope \u2612 parameter \u2610 general \u2612 steps \u2612 stages Resource references Jenkins credential id: id: abapCredentialsId reference to: password repositories \u00b6 Specifies a YAML file containing the repositories configuration back to overview Scope Details Aliases - Type string Mandatory no Default $PIPER_repositories (if set) Secret no Configuration scope \u2612 parameter \u2612 general \u2612 steps \u2612 stages Resource references none repositoryName \u00b6 Specifies a repository (Software Components) on the SAP BTP ABAP Environment system back to overview Scope Details Aliases - Type string Mandatory no Default $PIPER_repositoryName (if set) Secret no Configuration scope \u2612 parameter \u2610 general \u2612 steps \u2612 stages Resource references none script \u00b6 The common script environment of the Jenkinsfile running. Typically the reference to the script calling the pipeline step is provided with the this parameter, as in script: this . This allows the function to access the commonPipelineEnvironment for retrieving, e.g. configuration parameters. back to overview Scope Details Aliases - Type Jenkins Script Mandatory yes Default Secret no Configuration scope \u2610 parameter \u2610 general \u2610 steps \u2610 stages Resource references none username \u00b6 User for either the Cloud Foundry API or the Communication Arrangement for SAP_COM_0948 back to overview Scope Details Aliases - Type string Mandatory yes Default $PIPER_username (if set) Secret yes Configuration scope \u2612 parameter \u2610 general \u2612 steps \u2612 stages Resource references Jenkins credential id: id: abapCredentialsId reference to: username verbose \u00b6 verbose output back to overview Scope Details Aliases - Type bool Mandatory no Default false Possible values - true - false Secret no Configuration scope \u2612 parameter \u2612 general \u2612 steps \u2612 stages Resource references none abapCredentialsId \u00b6 Jenkins credentials ID containing user and password to authenticate to the BTP ABAP Environment system or the Cloud Foundry API back to overview Scope Details Aliases - cfCredentialsId - credentialsId Type string Configuration scope \u2612 parameter \u2612 general \u2612 steps \u2612 stages byogCredentialsId \u00b6 Jenkins credentials ID containing ByogUsername and ByogPassword to authenticate to a software component which is used in a BYOG scenario. (https://help.sap.com/docs/btp/sap-business-technology-platform/cloning-software-components-to-abap-environment-system-383ce2f9e2eb40f1b8ad538ddf79e656) back to overview Scope Details Aliases - Type string Configuration scope \u2612 parameter \u2612 general \u2612 steps \u2612 stages Example: Configuration in the config.yml \u00b6 The recommended way to configure your pipeline is via the config.yml file. In this case, calling the step in the Jenkinsfile is reduced to one line: abapEnvironmentCheckoutBranch script: this If you want to provide the host and credentials of the Communication Arrangement directly, the configuration could look as follows: steps : abapEnvironmentCloneGitRepo : repositoryName : '/DMO/GIT_REPOSITORY' branchName : 'my-demo-branch' abapCredentialsId : 'abapCredentialsId' host : '1234-abcd-5678-efgh-ijk.abap.eu10.hana.ondemand.com' Please note that the branchName parameter specifies the target branch you want to clone. Also keep in mind that the repositoryName parameter must define a single repository. Another option is to read the host and credentials from the cloud foundry service key of the respective instance. Furthermore, if you want to clone multiple repositories, they can be specified in a configuration file. With this approach the config.yml would look like this: steps : abapEnvironmentCloneGitRepo : repositories : 'repositories.yml' cfCredentialsId : 'cfCredentialsId' cfApiEndpoint : 'https://test.server.com' cfOrg : 'cfOrg' cfSpace : 'cfSpace' cfServiceInstance : 'cfServiceInstance' cfServiceKeyName : 'cfServiceKeyName' and the configuration file repositories.yml would look like this: repositories : - name : '/DMO/REPO' branch : 'main' - name : '/DMO/REPO_COMMIT' branch : 'feature' commitID : 'cd87a3cac2bc946b7629580e58598c3db56a26f8' - name : '/DMO/REPO_TAG' branch : 'release' tag : 'myTag' Using such a configuration file is the recommended approach. Please note that you need to use the YAML data structure as in the example above when using the repositories.yml config file. If you want to clone a specific commit, either a commitID or a tag can be specified. If both are specified, the tag will be ignored. Example: Configuration in the Jenkinsfile \u00b6 It is also possible to call the steps - including all parameters - directly in the Jenkinsfile. In the first example, the host and the credentialsId of the Communication Arrangement are directly provided. abapEnvironmentCloneGitRepo ( script: this , repositoryName: '/DMO/GIT_REPOSITORY' , branchName: 'my-demo-branch' , abapCredentialsId: 'abapCredentialsId' , host: '1234-abcd-5678-efgh-ijk.abap.eu10.hana.ondemand.com' ) In the second example, the host and credentialsId will be read from the provided cloud foundry service key of the specified service instance. abapEnvironmentCloneGitRepo ( script: this , repositoryName: '/DMO/GIT_REPOSITORY' , branchName: 'my-demo-branch' abapCredentialsId: 'cfCredentialsId' , cfApiEndpoint: 'https://test.server.com' , cfOrg: 'cfOrg' , cfSpace: 'cfSpace' , cfServiceInstance: 'cfServiceInstance' , cfServiceKeyName: 'cfServiceKeyName' ) Example: Cloning a Bring Your Own Git (BYOG) repository \u00b6 Feature will be available in November 2024. Since a ByoG repository is an external repository, you must be authenticated to clone it. For this, the corresponding credentials must be stored in Jenkins as a username and password/token. Store the credentials: A new credential with the type username and password must be stored. Jenkins Dashboard > Manage Jenkins > Credentials These credentials are used to clone the ByoG repository. More information on configuring the credentials can be found here . The config.yaml should look like this: steps : abapEnvironmentCloneGitRepo : repositories : 'repos.yaml' byogCredentialsId : 'byogCredentialsId' abapCredentialsId : 'abapCredentialsId' host : '1234-abcd-5678-efgh-ijk.abap.eu10.hana.ondemand.com' byogCredentialsId: 'byogCredentialsId' is the reference to the defined credential in Jenkins. So take care that this matches with your setup. After that, the ByoG repository that is to be cloned must be specified in the repos.yaml: repositories : - name : '/DMO/REPO_BYOG' branch : 'main' After the pipeline has run through, the repository has been cloned.","title":"abapEnvironmentCloneGitRepo"},{"location":"steps/abapEnvironmentCloneGitRepo/#abapenvironmentclonegitrepo","text":"Clones a git repository to a SAP BTP ABAP Environment system","title":"abapEnvironmentCloneGitRepo"},{"location":"steps/abapEnvironmentCloneGitRepo/#description","text":"Clones a git repository (Software Component) to a SAP BTP ABAP Environment system. If the repository is already cloned, the step will checkout the configured branch and pull the specified commit, instead. Please provide either of the following options: The host and credentials the BTP ABAP Environment system itself. The credentials must be configured for the Communication Scenario SAP_COM_0948 . The Cloud Foundry parameters (API endpoint, organization, space), credentials, the service instance for the ABAP service and the service key for the Communication Scenario SAP_COM_0948. Only provide one of those options with the respective credentials. If all values are provided, the direct communication (via host) has priority.","title":"Description"},{"location":"steps/abapEnvironmentCloneGitRepo/#usage","text":"We recommend to define values of step parameters via .pipeline/config.yml file . In this case, calling the step is essentially reduced to defining the step name. Calling the step can be done either in an orchestrator specific way (e.g. via a Jenkins library step) or on the command line. Jenkins Command Line library ( 'piper-lib-os' ) abapEnvironmentCloneGitRepo script: this piper abapEnvironmentCloneGitRepo","title":"Usage"},{"location":"steps/abapEnvironmentCloneGitRepo/#prerequisites","text":"A SAP BTP, ABAP environment system is available. On this system, a Communication User , a Communication System and a Communication Arrangement is setup for the Communication Scenario \"Software Component Management Integration (SAP_COM_0948)\". This can be done manually through the respective applications on the SAP BTP, ABAP environment system or through creating a service key for the system on Cloud Foundry with the parameters {\"scenario_id\": \"SAP_COM_0948\", \"type\": \"basic\"}. In a pipeline, you can do this with the step cloudFoundryCreateServiceKey .","title":"Prerequisites"},{"location":"steps/abapEnvironmentCloneGitRepo/#parameters","text":"","title":"Parameters"},{"location":"steps/abapEnvironmentCloneGitRepo/#overview-step","text":"Name Mandatory Additional information byogPassword (yes) pass via ENV or Jenkins credentials ( byogCredentialsId ) byogUsername (yes) pass via ENV or Jenkins credentials ( byogCredentialsId ) password (yes) pass via ENV or Jenkins credentials ( abapCredentialsId ) script (yes) reference to Jenkins main pipeline script username (yes) pass via ENV or Jenkins credentials ( abapCredentialsId ) branchName no byogAuthMethod no certificateNames no cfApiEndpoint no cfOrg no cfServiceInstance no cfServiceKeyName no cfSpace no host no logOutput no repositories no repositoryName no verbose no activates debug output","title":"Overview - Step"},{"location":"steps/abapEnvironmentCloneGitRepo/#overview-execution-environment","text":"Orchestrator-specific only These parameters are relevant for orchestrator usage and not considered when using the command line option. Name Mandatory Additional information containerCommand no containerShell no dockerEnvVars no dockerImage no dockerName no dockerOptions no dockerPullImage no dockerVolumeBind no dockerWorkspace no","title":"Overview - Execution Environment"},{"location":"steps/abapEnvironmentCloneGitRepo/#details","text":"","title":"Details"},{"location":"steps/abapEnvironmentCloneGitRepo/#branchname","text":"Specifies a branch of a repository (Software Components) on the SAP BTP ABAP Environment system back to overview Scope Details Aliases - Type string Mandatory no Default $PIPER_branchName (if set) Secret no Configuration scope \u2612 parameter \u2610 general \u2612 steps \u2612 stages Resource references none","title":"branchName"},{"location":"steps/abapEnvironmentCloneGitRepo/#byogauthmethod","text":"Specifies which authentication method is used for bring your own git (BYOG) repositories back to overview Scope Details Aliases - Type string Mandatory no Default TOKEN Possible values - TOKEN - BASIC Secret no Configuration scope \u2612 parameter \u2612 general \u2612 steps \u2612 stages Resource references none","title":"byogAuthMethod"},{"location":"steps/abapEnvironmentCloneGitRepo/#byogpassword","text":"Password for bring your own git (BYOG) authentication back to overview Scope Details Aliases - Type string Mandatory yes Default $PIPER_byogPassword (if set) Secret yes Configuration scope \u2612 parameter \u2612 general \u2612 steps \u2612 stages Resource references Jenkins credential id: id: byogCredentialsId reference to: password","title":"byogPassword"},{"location":"steps/abapEnvironmentCloneGitRepo/#byogusername","text":"Username for bring your own git (BYOG) authentication back to overview Scope Details Aliases - Type string Mandatory yes Default $PIPER_byogUsername (if set) Secret yes Configuration scope \u2612 parameter \u2612 general \u2612 steps \u2612 stages Resource references Jenkins credential id: id: byogCredentialsId reference to: username","title":"byogUsername"},{"location":"steps/abapEnvironmentCloneGitRepo/#certificatenames","text":"file names of trusted (self-signed) server certificates - need to be stored in .pipeline/trustStore back to overview Scope Details Aliases - Type []string Mandatory no Default $PIPER_certificateNames (if set) Secret no Configuration scope \u2612 parameter \u2612 general \u2612 steps \u2612 stages Resource references none","title":"certificateNames"},{"location":"steps/abapEnvironmentCloneGitRepo/#cfapiendpoint","text":"Cloud Foundry API Enpoint back to overview Scope Details Aliases cloudFoundry/apiEndpoint Type string Mandatory no Default $PIPER_cfApiEndpoint (if set) Secret no Configuration scope \u2612 parameter \u2612 general \u2612 steps \u2612 stages Resource references none","title":"cfApiEndpoint"},{"location":"steps/abapEnvironmentCloneGitRepo/#cforg","text":"Cloud Foundry target organization back to overview Scope Details Aliases cloudFoundry/org Type string Mandatory no Default $PIPER_cfOrg (if set) Secret no Configuration scope \u2612 parameter \u2612 general \u2612 steps \u2612 stages Resource references none","title":"cfOrg"},{"location":"steps/abapEnvironmentCloneGitRepo/#cfserviceinstance","text":"Cloud Foundry Service Instance back to overview Scope Details Aliases cloudFoundry/serviceInstance Type string Mandatory no Default $PIPER_cfServiceInstance (if set) Secret no Configuration scope \u2612 parameter \u2612 general \u2612 steps \u2612 stages Resource references none","title":"cfServiceInstance"},{"location":"steps/abapEnvironmentCloneGitRepo/#cfservicekeyname","text":"Cloud Foundry Service Key back to overview Scope Details Aliases - cloudFoundry/serviceKey - cloudFoundry/serviceKeyName - cfServiceKey Type string Mandatory no Default $PIPER_cfServiceKeyName (if set) Secret no Configuration scope \u2612 parameter \u2612 general \u2612 steps \u2612 stages Resource references none","title":"cfServiceKeyName"},{"location":"steps/abapEnvironmentCloneGitRepo/#cfspace","text":"Cloud Foundry target space back to overview Scope Details Aliases cloudFoundry/space Type string Mandatory no Default $PIPER_cfSpace (if set) Secret no Configuration scope \u2612 parameter \u2612 general \u2612 steps \u2612 stages Resource references none","title":"cfSpace"},{"location":"steps/abapEnvironmentCloneGitRepo/#containercommand","text":"Jenkins-specific: Used for proper environment setup. Kubernetes only: Allows to specify start command for container created with dockerImage parameter to overwrite Piper default (/usr/bin/tail -f /dev/null). back to overview Scope Details Aliases - Type string Mandatory no Default Secret no Configuration scope \u2612 parameter \u2612 general \u2612 steps \u2612 stages Resource references none","title":"containerCommand"},{"location":"steps/abapEnvironmentCloneGitRepo/#containershell","text":"Jenkins-specific: Used for proper environment setup. Allows to specify the shell to be executed for container with containerName. back to overview Scope Details Aliases - Type string Mandatory no Default Secret no Configuration scope \u2612 parameter \u2612 general \u2612 steps \u2612 stages Resource references none","title":"containerShell"},{"location":"steps/abapEnvironmentCloneGitRepo/#dockerenvvars","text":"Environment variables to set in the container, e.g. [http_proxy: \"proxy:8080\"]. back to overview Scope Details Aliases - Type map[string]string Mandatory no Default Secret no Configuration scope \u2612 parameter \u2612 general \u2612 steps \u2612 stages Resource references none","title":"dockerEnvVars"},{"location":"steps/abapEnvironmentCloneGitRepo/#dockerimage","text":"Name of the docker image that should be used. If empty, Docker is not used and the command is executed directly on the Jenkins system. back to overview Scope Details Aliases - Type string Mandatory no Default ppiper/cf-cli:latest Secret no Configuration scope \u2612 parameter \u2612 general \u2612 steps \u2612 stages Resource references none","title":"dockerImage"},{"location":"steps/abapEnvironmentCloneGitRepo/#dockername","text":"Kubernetes only: Name of the container launching dockerImage. SideCar only: Name of the container in local network. back to overview Scope Details Aliases - Type string Mandatory no Default cf Secret no Configuration scope \u2612 parameter \u2612 general \u2612 steps \u2612 stages Resource references none","title":"dockerName"},{"location":"steps/abapEnvironmentCloneGitRepo/#dockeroptions","text":"Docker options to be set when starting the container. back to overview Scope Details Aliases - Type []string Mandatory no Default Secret no Configuration scope \u2612 parameter \u2612 general \u2612 steps \u2612 stages Resource references none","title":"dockerOptions"},{"location":"steps/abapEnvironmentCloneGitRepo/#dockerpullimage","text":"Set this to 'false' to bypass a docker image pull. Useful during development process. Allows testing of images which are available in the local registry only. back to overview Scope Details Aliases - Type bool Mandatory no Default true Possible values - true - false Secret no Configuration scope \u2612 parameter \u2612 general \u2612 steps \u2612 stages Resource references none","title":"dockerPullImage"},{"location":"steps/abapEnvironmentCloneGitRepo/#dockervolumebind","text":"Jenkins-specific: Used for proper environment setup. Volumes that should be mounted into the docker container. back to overview Scope Details Aliases - Type map[string]string Mandatory no Default Secret no Configuration scope \u2612 parameter \u2612 general \u2612 steps \u2612 stages Resource references none","title":"dockerVolumeBind"},{"location":"steps/abapEnvironmentCloneGitRepo/#dockerworkspace","text":"Jenkins-specific: Used for proper environment setup. Kubernetes only: Specifies a dedicated user home directory for the container which will be passed as value for environment variable HOME . back to overview Scope Details Aliases - Type string Mandatory no Default Secret no Configuration scope \u2612 parameter \u2612 general \u2612 steps \u2612 stages Resource references none","title":"dockerWorkspace"},{"location":"steps/abapEnvironmentCloneGitRepo/#host","text":"Specifies the host address of the SAP BTP ABAP Environment system back to overview Scope Details Aliases - Type string Mandatory no Default $PIPER_host (if set) Secret no Configuration scope \u2612 parameter \u2612 general \u2612 steps \u2612 stages Resource references none","title":"host"},{"location":"steps/abapEnvironmentCloneGitRepo/#logoutput","text":"Specifies how the clone logs from the Manage Software Components App are displayed or saved back to overview Scope Details Aliases - Type string Mandatory no Default STANDARD Possible values - ZIP - STANDARD Secret no Configuration scope \u2612 parameter \u2612 general \u2612 steps \u2612 stages Resource references none","title":"logOutput"},{"location":"steps/abapEnvironmentCloneGitRepo/#password","text":"Password for either the Cloud Foundry API or the Communication Arrangement for SAP_COM_0948 back to overview Scope Details Aliases - Type string Mandatory yes Default $PIPER_password (if set) Secret yes Configuration scope \u2612 parameter \u2610 general \u2612 steps \u2612 stages Resource references Jenkins credential id: id: abapCredentialsId reference to: password","title":"password"},{"location":"steps/abapEnvironmentCloneGitRepo/#repositories","text":"Specifies a YAML file containing the repositories configuration back to overview Scope Details Aliases - Type string Mandatory no Default $PIPER_repositories (if set) Secret no Configuration scope \u2612 parameter \u2612 general \u2612 steps \u2612 stages Resource references none","title":"repositories"},{"location":"steps/abapEnvironmentCloneGitRepo/#repositoryname","text":"Specifies a repository (Software Components) on the SAP BTP ABAP Environment system back to overview Scope Details Aliases - Type string Mandatory no Default $PIPER_repositoryName (if set) Secret no Configuration scope \u2612 parameter \u2610 general \u2612 steps \u2612 stages Resource references none","title":"repositoryName"},{"location":"steps/abapEnvironmentCloneGitRepo/#script","text":"The common script environment of the Jenkinsfile running. Typically the reference to the script calling the pipeline step is provided with the this parameter, as in script: this . This allows the function to access the commonPipelineEnvironment for retrieving, e.g. configuration parameters. back to overview Scope Details Aliases - Type Jenkins Script Mandatory yes Default Secret no Configuration scope \u2610 parameter \u2610 general \u2610 steps \u2610 stages Resource references none","title":"script"},{"location":"steps/abapEnvironmentCloneGitRepo/#username","text":"User for either the Cloud Foundry API or the Communication Arrangement for SAP_COM_0948 back to overview Scope Details Aliases - Type string Mandatory yes Default $PIPER_username (if set) Secret yes Configuration scope \u2612 parameter \u2610 general \u2612 steps \u2612 stages Resource references Jenkins credential id: id: abapCredentialsId reference to: username","title":"username"},{"location":"steps/abapEnvironmentCloneGitRepo/#verbose","text":"verbose output back to overview Scope Details Aliases - Type bool Mandatory no Default false Possible values - true - false Secret no Configuration scope \u2612 parameter \u2612 general \u2612 steps \u2612 stages Resource references none","title":"verbose"},{"location":"steps/abapEnvironmentCloneGitRepo/#abapcredentialsid","text":"Jenkins credentials ID containing user and password to authenticate to the BTP ABAP Environment system or the Cloud Foundry API back to overview Scope Details Aliases - cfCredentialsId - credentialsId Type string Configuration scope \u2612 parameter \u2612 general \u2612 steps \u2612 stages","title":"abapCredentialsId"},{"location":"steps/abapEnvironmentCloneGitRepo/#byogcredentialsid","text":"Jenkins credentials ID containing ByogUsername and ByogPassword to authenticate to a software component which is used in a BYOG scenario. (https://help.sap.com/docs/btp/sap-business-technology-platform/cloning-software-components-to-abap-environment-system-383ce2f9e2eb40f1b8ad538ddf79e656) back to overview Scope Details Aliases - Type string Configuration scope \u2612 parameter \u2612 general \u2612 steps \u2612 stages","title":"byogCredentialsId"},{"location":"steps/abapEnvironmentCloneGitRepo/#example-configuration-in-the-configyml","text":"The recommended way to configure your pipeline is via the config.yml file. In this case, calling the step in the Jenkinsfile is reduced to one line: abapEnvironmentCheckoutBranch script: this If you want to provide the host and credentials of the Communication Arrangement directly, the configuration could look as follows: steps : abapEnvironmentCloneGitRepo : repositoryName : '/DMO/GIT_REPOSITORY' branchName : 'my-demo-branch' abapCredentialsId : 'abapCredentialsId' host : '1234-abcd-5678-efgh-ijk.abap.eu10.hana.ondemand.com' Please note that the branchName parameter specifies the target branch you want to clone. Also keep in mind that the repositoryName parameter must define a single repository. Another option is to read the host and credentials from the cloud foundry service key of the respective instance. Furthermore, if you want to clone multiple repositories, they can be specified in a configuration file. With this approach the config.yml would look like this: steps : abapEnvironmentCloneGitRepo : repositories : 'repositories.yml' cfCredentialsId : 'cfCredentialsId' cfApiEndpoint : 'https://test.server.com' cfOrg : 'cfOrg' cfSpace : 'cfSpace' cfServiceInstance : 'cfServiceInstance' cfServiceKeyName : 'cfServiceKeyName' and the configuration file repositories.yml would look like this: repositories : - name : '/DMO/REPO' branch : 'main' - name : '/DMO/REPO_COMMIT' branch : 'feature' commitID : 'cd87a3cac2bc946b7629580e58598c3db56a26f8' - name : '/DMO/REPO_TAG' branch : 'release' tag : 'myTag' Using such a configuration file is the recommended approach. Please note that you need to use the YAML data structure as in the example above when using the repositories.yml config file. If you want to clone a specific commit, either a commitID or a tag can be specified. If both are specified, the tag will be ignored.","title":"Example: Configuration in the config.yml"},{"location":"steps/abapEnvironmentCloneGitRepo/#example-configuration-in-the-jenkinsfile","text":"It is also possible to call the steps - including all parameters - directly in the Jenkinsfile. In the first example, the host and the credentialsId of the Communication Arrangement are directly provided. abapEnvironmentCloneGitRepo ( script: this , repositoryName: '/DMO/GIT_REPOSITORY' , branchName: 'my-demo-branch' , abapCredentialsId: 'abapCredentialsId' , host: '1234-abcd-5678-efgh-ijk.abap.eu10.hana.ondemand.com' ) In the second example, the host and credentialsId will be read from the provided cloud foundry service key of the specified service instance. abapEnvironmentCloneGitRepo ( script: this , repositoryName: '/DMO/GIT_REPOSITORY' , branchName: 'my-demo-branch' abapCredentialsId: 'cfCredentialsId' , cfApiEndpoint: 'https://test.server.com' , cfOrg: 'cfOrg' , cfSpace: 'cfSpace' , cfServiceInstance: 'cfServiceInstance' , cfServiceKeyName: 'cfServiceKeyName' )","title":"Example: Configuration in the Jenkinsfile"},{"location":"steps/abapEnvironmentCloneGitRepo/#example-cloning-a-bring-your-own-git-byog-repository","text":"Feature will be available in November 2024. Since a ByoG repository is an external repository, you must be authenticated to clone it. For this, the corresponding credentials must be stored in Jenkins as a username and password/token. Store the credentials: A new credential with the type username and password must be stored. Jenkins Dashboard > Manage Jenkins > Credentials These credentials are used to clone the ByoG repository. More information on configuring the credentials can be found here . The config.yaml should look like this: steps : abapEnvironmentCloneGitRepo : repositories : 'repos.yaml' byogCredentialsId : 'byogCredentialsId' abapCredentialsId : 'abapCredentialsId' host : '1234-abcd-5678-efgh-ijk.abap.eu10.hana.ondemand.com' byogCredentialsId: 'byogCredentialsId' is the reference to the defined credential in Jenkins. So take care that this matches with your setup. After that, the ByoG repository that is to be cloned must be specified in the repos.yaml: repositories : - name : '/DMO/REPO_BYOG' branch : 'main' After the pipeline has run through, the repository has been cloned.","title":"Example: Cloning a Bring Your Own Git (BYOG) repository"},{"location":"steps/abapEnvironmentCreateSystem/","text":"abapEnvironmentCreateSystem \u00b6 Creates a SAP BTP ABAP Environment system (aka Steampunk system) Description \u00b6 This step creates a SAP BTP ABAP Environment system (aka Steampunk system) via the cloud foundry command line interface (cf CLI). This can be done by providing a service manifest as a configuration file (parameter serviceManifest ) or by passing the configuration values directly via the other parameters of this step. Usage \u00b6 We recommend to define values of step parameters via .pipeline/config.yml file . In this case, calling the step is essentially reduced to defining the step name. Calling the step can be done either in an orchestrator specific way (e.g. via a Jenkins library step) or on the command line. Jenkins Command Line library ( 'piper-lib-os' ) abapEnvironmentCreateSystem script: this piper abapEnvironmentCreateSystem Prerequisites \u00b6 On SAP Business Technology Platform (SAP BTP), Cloud Foundry needs to be enabled on subaccount level. This can be done on the Subaccount Overview page. The subaccount is then mapped to a \u201cCloud Foundry Organization\u201d, for which you must provide a suitable name during the creation. Have a look at the documentation for more details. A (technical) user is required to access the SAP BTP via the cf CLI. The user needs to be a member of the global account and has to have the Space Developer role. The user and password need to be stored in the Jenkins Credentials Store. Please make sure, that there are enough entitlements in the subaccount for the Service Plan , which you want to use for this step. Parameters \u00b6 Overview - Step \u00b6 Name Mandatory Additional information cfOrg yes cfSpace yes password (yes) pass via ENV, Vault or Jenkins credentials ( cfCredentialsId ) script (yes) reference to Jenkins main pipeline script username (yes) pass via ENV, Vault or Jenkins credentials ( cfCredentialsId ) abapSystemAdminEmail no abapSystemDescription no abapSystemID no abapSystemIsDevelopmentAllowed no abapSystemSizeOfPersistence no abapSystemSizeOfRuntime no addonDescriptorFileName no cfApiEndpoint no cfService no cfServiceInstance no cfServicePlan no includeAddon no serviceManifest no verbose no activates debug output Overview - Execution Environment \u00b6 Orchestrator-specific only These parameters are relevant for orchestrator usage and not considered when using the command line option. Name Mandatory Additional information containerCommand no containerShell no dockerEnvVars no dockerImage no dockerName no dockerOptions no dockerPullImage no dockerVolumeBind no dockerWorkspace no Details \u00b6 abapSystemAdminEmail \u00b6 Admin E-Mail address for the initial administrator of the system back to overview Scope Details Aliases - Type string Mandatory no Default $PIPER_abapSystemAdminEmail (if set) Secret no Configuration scope \u2612 parameter \u2612 general \u2612 steps \u2612 stages Resource references none abapSystemDescription \u00b6 Description for the ABAP Environment system back to overview Scope Details Aliases - Type string Mandatory no Default Test system created by an automated pipeline Secret no Configuration scope \u2612 parameter \u2612 general \u2612 steps \u2612 stages Resource references none abapSystemID \u00b6 The three character name of the system - maps to 'sapSystemName' back to overview Scope Details Aliases - Type string Mandatory no Default H02 Secret no Configuration scope \u2612 parameter \u2612 general \u2612 steps \u2612 stages Resource references none abapSystemIsDevelopmentAllowed \u00b6 This parameter determines, if development is allowed on the system back to overview Scope Details Aliases - Type bool Mandatory no Default true Possible values - true - false Secret no Configuration scope \u2612 parameter \u2612 general \u2612 steps \u2612 stages Resource references none abapSystemSizeOfPersistence \u00b6 The size of the persistence back to overview Scope Details Aliases - Type int Mandatory no Default 0 Secret no Configuration scope \u2612 parameter \u2612 general \u2612 steps \u2612 stages Resource references none abapSystemSizeOfRuntime \u00b6 The size of the runtime back to overview Scope Details Aliases - Type int Mandatory no Default 0 Secret no Configuration scope \u2612 parameter \u2612 general \u2612 steps \u2612 stages Resource references none addonDescriptorFileName \u00b6 The file name of the addonDescriptor back to overview Scope Details Aliases - Type string Mandatory no Default $PIPER_addonDescriptorFileName (if set) Secret no Configuration scope \u2612 parameter \u2612 general \u2612 steps \u2612 stages Resource references none cfApiEndpoint \u00b6 Cloud Foundry API endpoint back to overview Scope Details Aliases cloudFoundry/apiEndpoint Type string Mandatory no Default https://api.cf.eu10.hana.ondemand.com Secret no Configuration scope \u2612 parameter \u2612 general \u2612 steps \u2612 stages Resource references none cfOrg \u00b6 Cloud Foundry org back to overview Scope Details Aliases cloudFoundry/org Type string Mandatory yes Default $PIPER_cfOrg (if set) Secret no Configuration scope \u2612 parameter \u2612 general \u2612 steps \u2612 stages Resource references none cfService \u00b6 Parameter for Cloud Foundry Service to be used for creating Cloud Foundry Service back to overview Scope Details Aliases cloudFoundry/service Type string Mandatory no Default $PIPER_cfService (if set) Secret no Configuration scope \u2612 parameter \u2612 general \u2612 steps \u2612 stages Resource references none cfServiceInstance \u00b6 Parameter for naming the Service Instance when creating a Cloud Foundry Service back to overview Scope Details Aliases cloudFoundry/serviceInstance Type string Mandatory no Default $PIPER_cfServiceInstance (if set) Secret no Configuration scope \u2612 parameter \u2612 general \u2612 steps \u2612 stages Resource references none cfServicePlan \u00b6 Parameter for Cloud Foundry Service Plan to be used when creating a Cloud Foundry Service back to overview Scope Details Aliases cloudFoundry/servicePlan Type string Mandatory no Default $PIPER_cfServicePlan (if set) Secret no Configuration scope \u2612 parameter \u2612 general \u2612 steps \u2612 stages Resource references none cfSpace \u00b6 Cloud Foundry Space back to overview Scope Details Aliases cloudFoundry/space Type string Mandatory yes Default $PIPER_cfSpace (if set) Secret no Configuration scope \u2612 parameter \u2612 general \u2612 steps \u2612 stages Resource references none containerCommand \u00b6 Jenkins-specific: Used for proper environment setup. Kubernetes only: Allows to specify start command for container created with dockerImage parameter to overwrite Piper default (/usr/bin/tail -f /dev/null). back to overview Scope Details Aliases - Type string Mandatory no Default Secret no Configuration scope \u2612 parameter \u2612 general \u2612 steps \u2612 stages Resource references none containerShell \u00b6 Jenkins-specific: Used for proper environment setup. Allows to specify the shell to be executed for container with containerName. back to overview Scope Details Aliases - Type string Mandatory no Default Secret no Configuration scope \u2612 parameter \u2612 general \u2612 steps \u2612 stages Resource references none dockerEnvVars \u00b6 Environment variables to set in the container, e.g. [http_proxy: \"proxy:8080\"]. back to overview Scope Details Aliases - Type map[string]string Mandatory no Default Secret no Configuration scope \u2612 parameter \u2612 general \u2612 steps \u2612 stages Resource references none dockerImage \u00b6 Name of the docker image that should be used. If empty, Docker is not used and the command is executed directly on the Jenkins system. back to overview Scope Details Aliases - Type string Mandatory no Default ppiper/cf-cli:latest Secret no Configuration scope \u2612 parameter \u2612 general \u2612 steps \u2612 stages Resource references none dockerName \u00b6 Kubernetes only: Name of the container launching dockerImage. SideCar only: Name of the container in local network. back to overview Scope Details Aliases - Type string Mandatory no Default cf Secret no Configuration scope \u2612 parameter \u2612 general \u2612 steps \u2612 stages Resource references none dockerOptions \u00b6 Docker options to be set when starting the container. back to overview Scope Details Aliases - Type []string Mandatory no Default Secret no Configuration scope \u2612 parameter \u2612 general \u2612 steps \u2612 stages Resource references none dockerPullImage \u00b6 Set this to 'false' to bypass a docker image pull. Useful during development process. Allows testing of images which are available in the local registry only. back to overview Scope Details Aliases - Type bool Mandatory no Default true Possible values - true - false Secret no Configuration scope \u2612 parameter \u2612 general \u2612 steps \u2612 stages Resource references none dockerVolumeBind \u00b6 Jenkins-specific: Used for proper environment setup. Volumes that should be mounted into the docker container. back to overview Scope Details Aliases - Type map[string]string Mandatory no Default Secret no Configuration scope \u2612 parameter \u2612 general \u2612 steps \u2612 stages Resource references none dockerWorkspace \u00b6 Jenkins-specific: Used for proper environment setup. Kubernetes only: Specifies a dedicated user home directory for the container which will be passed as value for environment variable HOME . back to overview Scope Details Aliases - Type string Mandatory no Default Secret no Configuration scope \u2612 parameter \u2612 general \u2612 steps \u2612 stages Resource references none includeAddon \u00b6 Must be set to true to install the addon provided via 'addonDescriptorFileName' back to overview Scope Details Aliases - Type bool Mandatory no Default false Possible values - true - false Secret no Configuration scope \u2612 parameter \u2610 general \u2610 steps \u2612 stages Resource references none password \u00b6 Password for Cloud Foundry User back to overview Scope Details Aliases - Type string Mandatory yes Default $PIPER_password (if set) Secret yes Configuration scope \u2612 parameter \u2610 general \u2612 steps \u2612 stages Resource references Jenkins credential id: id: cfCredentialsId reference to: password Vault resource: name: cloudfoundryVaultSecretName default value: cloudfoundry-$(org)-$(space) Vault paths: $(vaultPath)/cloudfoundry-$(org)-$(space) $(vaultBasePath)/$(vaultPipelineName)/cloudfoundry-$(org)-$(space) $(vaultBasePath)/GROUP-SECRETS/cloudfoundry-$(org)-$(space) script \u00b6 The common script environment of the Jenkinsfile running. Typically the reference to the script calling the pipeline step is provided with the this parameter, as in script: this . This allows the function to access the commonPipelineEnvironment for retrieving, e.g. configuration parameters. back to overview Scope Details Aliases - Type Jenkins Script Mandatory yes Default Secret no Configuration scope \u2610 parameter \u2610 general \u2610 steps \u2610 stages Resource references none serviceManifest \u00b6 Path to Cloud Foundry Service Manifest in YAML format for multiple service creations that are being passed to a Create-Service-Push Cloud Foundry cli plugin back to overview Scope Details Aliases - cloudFoundry/serviceManifest - cfServiceManifest Type string Mandatory no Default $PIPER_serviceManifest (if set) Secret no Configuration scope \u2612 parameter \u2612 general \u2612 steps \u2612 stages Resource references none username \u00b6 User or E-Mail for CF back to overview Scope Details Aliases - Type string Mandatory yes Default $PIPER_username (if set) Secret yes Configuration scope \u2612 parameter \u2610 general \u2612 steps \u2612 stages Resource references Jenkins credential id: id: cfCredentialsId reference to: username Vault resource: name: cloudfoundryVaultSecretName default value: cloudfoundry-$(org)-$(space) Vault paths: $(vaultPath)/cloudfoundry-$(org)-$(space) $(vaultBasePath)/$(vaultPipelineName)/cloudfoundry-$(org)-$(space) $(vaultBasePath)/GROUP-SECRETS/cloudfoundry-$(org)-$(space) verbose \u00b6 verbose output back to overview Scope Details Aliases - Type bool Mandatory no Default false Possible values - true - false Secret no Configuration scope \u2612 parameter \u2612 general \u2612 steps \u2612 stages Resource references none cfCredentialsId \u00b6 Jenkins 'Username with password' credentials ID containing user and password to authenticate to the Cloud Foundry API. back to overview Scope Details Aliases cloudFoundry/credentialsId Type string Configuration scope \u2612 parameter \u2612 general \u2612 steps \u2612 stages Example: Configuration in the config.yml \u00b6 The recommended way to configure your pipeline is via the config.yml file. In this case, calling the step in the Jenkinsfile is reduced to one line: abapEnvironmentCreateSystem script: this The configuration values for the system can be passed through the config.yml file: steps : abapEnvironmentCreateSystem : cfCredentialsId : 'cfCredentialsId' cfApiEndpoint : 'https://test.server.com' cfOrg : 'cfOrg' cfSpace : 'cfSpace' cfServiceInstance : 'H02_Q_system' cfService : 'abap' cfServicePlan : 'standard' abapSystemAdminEmail : 'user@example.com' abapSystemDescription : 'ABAP Environment Q System' abapSystemIsDevelopmentAllowed : true abapSystemID : 'H02' abapSystemSizeOfPersistence : 4 abapSystemSizeOfRuntime : 1 Example: Configuration in the Jenkinsfile \u00b6 The step, including all parameters, can also be called directly from the Jenkinsfile. In the following example, a configuration file is used. abapEnvironmentCreateSystem ( script: this , cfCredentialsId: 'cfCredentialsId' , cfApiEndpoint: 'https://test.server.com' , cfOrg: 'cfOrg' , cfSpace: 'cfSpace' , cfServiceManifest: 'manifest.yml' ) The file manifest.yml would look like this: --- create-services : - name : \"H02_Q_system\" broker : \"abap\" plan : \"standard\" parameters : \"{ \\\"admin_email\\\" : \\\"user@example.com\\\", \\\"description\\\" : \\\"ABAP Environment Q System\\\", \\\"is_development_allowed\\\" : true, \\\"sapsystemname\\\" : \\\"H02\\\", \\\"size_of_persistence\\\" : 4, \\\"size_of_runtime\\\" : 1 }\"","title":"abapEnvironmentCreateSystem"},{"location":"steps/abapEnvironmentCreateSystem/#abapenvironmentcreatesystem","text":"Creates a SAP BTP ABAP Environment system (aka Steampunk system)","title":"abapEnvironmentCreateSystem"},{"location":"steps/abapEnvironmentCreateSystem/#description","text":"This step creates a SAP BTP ABAP Environment system (aka Steampunk system) via the cloud foundry command line interface (cf CLI). This can be done by providing a service manifest as a configuration file (parameter serviceManifest ) or by passing the configuration values directly via the other parameters of this step.","title":"Description"},{"location":"steps/abapEnvironmentCreateSystem/#usage","text":"We recommend to define values of step parameters via .pipeline/config.yml file . In this case, calling the step is essentially reduced to defining the step name. Calling the step can be done either in an orchestrator specific way (e.g. via a Jenkins library step) or on the command line. Jenkins Command Line library ( 'piper-lib-os' ) abapEnvironmentCreateSystem script: this piper abapEnvironmentCreateSystem","title":"Usage"},{"location":"steps/abapEnvironmentCreateSystem/#prerequisites","text":"On SAP Business Technology Platform (SAP BTP), Cloud Foundry needs to be enabled on subaccount level. This can be done on the Subaccount Overview page. The subaccount is then mapped to a \u201cCloud Foundry Organization\u201d, for which you must provide a suitable name during the creation. Have a look at the documentation for more details. A (technical) user is required to access the SAP BTP via the cf CLI. The user needs to be a member of the global account and has to have the Space Developer role. The user and password need to be stored in the Jenkins Credentials Store. Please make sure, that there are enough entitlements in the subaccount for the Service Plan , which you want to use for this step.","title":"Prerequisites"},{"location":"steps/abapEnvironmentCreateSystem/#parameters","text":"","title":"Parameters"},{"location":"steps/abapEnvironmentCreateSystem/#overview-step","text":"Name Mandatory Additional information cfOrg yes cfSpace yes password (yes) pass via ENV, Vault or Jenkins credentials ( cfCredentialsId ) script (yes) reference to Jenkins main pipeline script username (yes) pass via ENV, Vault or Jenkins credentials ( cfCredentialsId ) abapSystemAdminEmail no abapSystemDescription no abapSystemID no abapSystemIsDevelopmentAllowed no abapSystemSizeOfPersistence no abapSystemSizeOfRuntime no addonDescriptorFileName no cfApiEndpoint no cfService no cfServiceInstance no cfServicePlan no includeAddon no serviceManifest no verbose no activates debug output","title":"Overview - Step"},{"location":"steps/abapEnvironmentCreateSystem/#overview-execution-environment","text":"Orchestrator-specific only These parameters are relevant for orchestrator usage and not considered when using the command line option. Name Mandatory Additional information containerCommand no containerShell no dockerEnvVars no dockerImage no dockerName no dockerOptions no dockerPullImage no dockerVolumeBind no dockerWorkspace no","title":"Overview - Execution Environment"},{"location":"steps/abapEnvironmentCreateSystem/#details","text":"","title":"Details"},{"location":"steps/abapEnvironmentCreateSystem/#abapsystemadminemail","text":"Admin E-Mail address for the initial administrator of the system back to overview Scope Details Aliases - Type string Mandatory no Default $PIPER_abapSystemAdminEmail (if set) Secret no Configuration scope \u2612 parameter \u2612 general \u2612 steps \u2612 stages Resource references none","title":"abapSystemAdminEmail"},{"location":"steps/abapEnvironmentCreateSystem/#abapsystemdescription","text":"Description for the ABAP Environment system back to overview Scope Details Aliases - Type string Mandatory no Default Test system created by an automated pipeline Secret no Configuration scope \u2612 parameter \u2612 general \u2612 steps \u2612 stages Resource references none","title":"abapSystemDescription"},{"location":"steps/abapEnvironmentCreateSystem/#abapsystemid","text":"The three character name of the system - maps to 'sapSystemName' back to overview Scope Details Aliases - Type string Mandatory no Default H02 Secret no Configuration scope \u2612 parameter \u2612 general \u2612 steps \u2612 stages Resource references none","title":"abapSystemID"},{"location":"steps/abapEnvironmentCreateSystem/#abapsystemisdevelopmentallowed","text":"This parameter determines, if development is allowed on the system back to overview Scope Details Aliases - Type bool Mandatory no Default true Possible values - true - false Secret no Configuration scope \u2612 parameter \u2612 general \u2612 steps \u2612 stages Resource references none","title":"abapSystemIsDevelopmentAllowed"},{"location":"steps/abapEnvironmentCreateSystem/#abapsystemsizeofpersistence","text":"The size of the persistence back to overview Scope Details Aliases - Type int Mandatory no Default 0 Secret no Configuration scope \u2612 parameter \u2612 general \u2612 steps \u2612 stages Resource references none","title":"abapSystemSizeOfPersistence"},{"location":"steps/abapEnvironmentCreateSystem/#abapsystemsizeofruntime","text":"The size of the runtime back to overview Scope Details Aliases - Type int Mandatory no Default 0 Secret no Configuration scope \u2612 parameter \u2612 general \u2612 steps \u2612 stages Resource references none","title":"abapSystemSizeOfRuntime"},{"location":"steps/abapEnvironmentCreateSystem/#addondescriptorfilename","text":"The file name of the addonDescriptor back to overview Scope Details Aliases - Type string Mandatory no Default $PIPER_addonDescriptorFileName (if set) Secret no Configuration scope \u2612 parameter \u2612 general \u2612 steps \u2612 stages Resource references none","title":"addonDescriptorFileName"},{"location":"steps/abapEnvironmentCreateSystem/#cfapiendpoint","text":"Cloud Foundry API endpoint back to overview Scope Details Aliases cloudFoundry/apiEndpoint Type string Mandatory no Default https://api.cf.eu10.hana.ondemand.com Secret no Configuration scope \u2612 parameter \u2612 general \u2612 steps \u2612 stages Resource references none","title":"cfApiEndpoint"},{"location":"steps/abapEnvironmentCreateSystem/#cforg","text":"Cloud Foundry org back to overview Scope Details Aliases cloudFoundry/org Type string Mandatory yes Default $PIPER_cfOrg (if set) Secret no Configuration scope \u2612 parameter \u2612 general \u2612 steps \u2612 stages Resource references none","title":"cfOrg"},{"location":"steps/abapEnvironmentCreateSystem/#cfservice","text":"Parameter for Cloud Foundry Service to be used for creating Cloud Foundry Service back to overview Scope Details Aliases cloudFoundry/service Type string Mandatory no Default $PIPER_cfService (if set) Secret no Configuration scope \u2612 parameter \u2612 general \u2612 steps \u2612 stages Resource references none","title":"cfService"},{"location":"steps/abapEnvironmentCreateSystem/#cfserviceinstance","text":"Parameter for naming the Service Instance when creating a Cloud Foundry Service back to overview Scope Details Aliases cloudFoundry/serviceInstance Type string Mandatory no Default $PIPER_cfServiceInstance (if set) Secret no Configuration scope \u2612 parameter \u2612 general \u2612 steps \u2612 stages Resource references none","title":"cfServiceInstance"},{"location":"steps/abapEnvironmentCreateSystem/#cfserviceplan","text":"Parameter for Cloud Foundry Service Plan to be used when creating a Cloud Foundry Service back to overview Scope Details Aliases cloudFoundry/servicePlan Type string Mandatory no Default $PIPER_cfServicePlan (if set) Secret no Configuration scope \u2612 parameter \u2612 general \u2612 steps \u2612 stages Resource references none","title":"cfServicePlan"},{"location":"steps/abapEnvironmentCreateSystem/#cfspace","text":"Cloud Foundry Space back to overview Scope Details Aliases cloudFoundry/space Type string Mandatory yes Default $PIPER_cfSpace (if set) Secret no Configuration scope \u2612 parameter \u2612 general \u2612 steps \u2612 stages Resource references none","title":"cfSpace"},{"location":"steps/abapEnvironmentCreateSystem/#containercommand","text":"Jenkins-specific: Used for proper environment setup. Kubernetes only: Allows to specify start command for container created with dockerImage parameter to overwrite Piper default (/usr/bin/tail -f /dev/null). back to overview Scope Details Aliases - Type string Mandatory no Default Secret no Configuration scope \u2612 parameter \u2612 general \u2612 steps \u2612 stages Resource references none","title":"containerCommand"},{"location":"steps/abapEnvironmentCreateSystem/#containershell","text":"Jenkins-specific: Used for proper environment setup. Allows to specify the shell to be executed for container with containerName. back to overview Scope Details Aliases - Type string Mandatory no Default Secret no Configuration scope \u2612 parameter \u2612 general \u2612 steps \u2612 stages Resource references none","title":"containerShell"},{"location":"steps/abapEnvironmentCreateSystem/#dockerenvvars","text":"Environment variables to set in the container, e.g. [http_proxy: \"proxy:8080\"]. back to overview Scope Details Aliases - Type map[string]string Mandatory no Default Secret no Configuration scope \u2612 parameter \u2612 general \u2612 steps \u2612 stages Resource references none","title":"dockerEnvVars"},{"location":"steps/abapEnvironmentCreateSystem/#dockerimage","text":"Name of the docker image that should be used. If empty, Docker is not used and the command is executed directly on the Jenkins system. back to overview Scope Details Aliases - Type string Mandatory no Default ppiper/cf-cli:latest Secret no Configuration scope \u2612 parameter \u2612 general \u2612 steps \u2612 stages Resource references none","title":"dockerImage"},{"location":"steps/abapEnvironmentCreateSystem/#dockername","text":"Kubernetes only: Name of the container launching dockerImage. SideCar only: Name of the container in local network. back to overview Scope Details Aliases - Type string Mandatory no Default cf Secret no Configuration scope \u2612 parameter \u2612 general \u2612 steps \u2612 stages Resource references none","title":"dockerName"},{"location":"steps/abapEnvironmentCreateSystem/#dockeroptions","text":"Docker options to be set when starting the container. back to overview Scope Details Aliases - Type []string Mandatory no Default Secret no Configuration scope \u2612 parameter \u2612 general \u2612 steps \u2612 stages Resource references none","title":"dockerOptions"},{"location":"steps/abapEnvironmentCreateSystem/#dockerpullimage","text":"Set this to 'false' to bypass a docker image pull. Useful during development process. Allows testing of images which are available in the local registry only. back to overview Scope Details Aliases - Type bool Mandatory no Default true Possible values - true - false Secret no Configuration scope \u2612 parameter \u2612 general \u2612 steps \u2612 stages Resource references none","title":"dockerPullImage"},{"location":"steps/abapEnvironmentCreateSystem/#dockervolumebind","text":"Jenkins-specific: Used for proper environment setup. Volumes that should be mounted into the docker container. back to overview Scope Details Aliases - Type map[string]string Mandatory no Default Secret no Configuration scope \u2612 parameter \u2612 general \u2612 steps \u2612 stages Resource references none","title":"dockerVolumeBind"},{"location":"steps/abapEnvironmentCreateSystem/#dockerworkspace","text":"Jenkins-specific: Used for proper environment setup. Kubernetes only: Specifies a dedicated user home directory for the container which will be passed as value for environment variable HOME . back to overview Scope Details Aliases - Type string Mandatory no Default Secret no Configuration scope \u2612 parameter \u2612 general \u2612 steps \u2612 stages Resource references none","title":"dockerWorkspace"},{"location":"steps/abapEnvironmentCreateSystem/#includeaddon","text":"Must be set to true to install the addon provided via 'addonDescriptorFileName' back to overview Scope Details Aliases - Type bool Mandatory no Default false Possible values - true - false Secret no Configuration scope \u2612 parameter \u2610 general \u2610 steps \u2612 stages Resource references none","title":"includeAddon"},{"location":"steps/abapEnvironmentCreateSystem/#password","text":"Password for Cloud Foundry User back to overview Scope Details Aliases - Type string Mandatory yes Default $PIPER_password (if set) Secret yes Configuration scope \u2612 parameter \u2610 general \u2612 steps \u2612 stages Resource references Jenkins credential id: id: cfCredentialsId reference to: password Vault resource: name: cloudfoundryVaultSecretName default value: cloudfoundry-$(org)-$(space) Vault paths: $(vaultPath)/cloudfoundry-$(org)-$(space) $(vaultBasePath)/$(vaultPipelineName)/cloudfoundry-$(org)-$(space) $(vaultBasePath)/GROUP-SECRETS/cloudfoundry-$(org)-$(space)","title":"password"},{"location":"steps/abapEnvironmentCreateSystem/#script","text":"The common script environment of the Jenkinsfile running. Typically the reference to the script calling the pipeline step is provided with the this parameter, as in script: this . This allows the function to access the commonPipelineEnvironment for retrieving, e.g. configuration parameters. back to overview Scope Details Aliases - Type Jenkins Script Mandatory yes Default Secret no Configuration scope \u2610 parameter \u2610 general \u2610 steps \u2610 stages Resource references none","title":"script"},{"location":"steps/abapEnvironmentCreateSystem/#servicemanifest","text":"Path to Cloud Foundry Service Manifest in YAML format for multiple service creations that are being passed to a Create-Service-Push Cloud Foundry cli plugin back to overview Scope Details Aliases - cloudFoundry/serviceManifest - cfServiceManifest Type string Mandatory no Default $PIPER_serviceManifest (if set) Secret no Configuration scope \u2612 parameter \u2612 general \u2612 steps \u2612 stages Resource references none","title":"serviceManifest"},{"location":"steps/abapEnvironmentCreateSystem/#username","text":"User or E-Mail for CF back to overview Scope Details Aliases - Type string Mandatory yes Default $PIPER_username (if set) Secret yes Configuration scope \u2612 parameter \u2610 general \u2612 steps \u2612 stages Resource references Jenkins credential id: id: cfCredentialsId reference to: username Vault resource: name: cloudfoundryVaultSecretName default value: cloudfoundry-$(org)-$(space) Vault paths: $(vaultPath)/cloudfoundry-$(org)-$(space) $(vaultBasePath)/$(vaultPipelineName)/cloudfoundry-$(org)-$(space) $(vaultBasePath)/GROUP-SECRETS/cloudfoundry-$(org)-$(space)","title":"username"},{"location":"steps/abapEnvironmentCreateSystem/#verbose","text":"verbose output back to overview Scope Details Aliases - Type bool Mandatory no Default false Possible values - true - false Secret no Configuration scope \u2612 parameter \u2612 general \u2612 steps \u2612 stages Resource references none","title":"verbose"},{"location":"steps/abapEnvironmentCreateSystem/#cfcredentialsid","text":"Jenkins 'Username with password' credentials ID containing user and password to authenticate to the Cloud Foundry API. back to overview Scope Details Aliases cloudFoundry/credentialsId Type string Configuration scope \u2612 parameter \u2612 general \u2612 steps \u2612 stages","title":"cfCredentialsId"},{"location":"steps/abapEnvironmentCreateSystem/#example-configuration-in-the-configyml","text":"The recommended way to configure your pipeline is via the config.yml file. In this case, calling the step in the Jenkinsfile is reduced to one line: abapEnvironmentCreateSystem script: this The configuration values for the system can be passed through the config.yml file: steps : abapEnvironmentCreateSystem : cfCredentialsId : 'cfCredentialsId' cfApiEndpoint : 'https://test.server.com' cfOrg : 'cfOrg' cfSpace : 'cfSpace' cfServiceInstance : 'H02_Q_system' cfService : 'abap' cfServicePlan : 'standard' abapSystemAdminEmail : 'user@example.com' abapSystemDescription : 'ABAP Environment Q System' abapSystemIsDevelopmentAllowed : true abapSystemID : 'H02' abapSystemSizeOfPersistence : 4 abapSystemSizeOfRuntime : 1","title":"Example: Configuration in the config.yml"},{"location":"steps/abapEnvironmentCreateSystem/#example-configuration-in-the-jenkinsfile","text":"The step, including all parameters, can also be called directly from the Jenkinsfile. In the following example, a configuration file is used. abapEnvironmentCreateSystem ( script: this , cfCredentialsId: 'cfCredentialsId' , cfApiEndpoint: 'https://test.server.com' , cfOrg: 'cfOrg' , cfSpace: 'cfSpace' , cfServiceManifest: 'manifest.yml' ) The file manifest.yml would look like this: --- create-services : - name : \"H02_Q_system\" broker : \"abap\" plan : \"standard\" parameters : \"{ \\\"admin_email\\\" : \\\"user@example.com\\\", \\\"description\\\" : \\\"ABAP Environment Q System\\\", \\\"is_development_allowed\\\" : true, \\\"sapsystemname\\\" : \\\"H02\\\", \\\"size_of_persistence\\\" : 4, \\\"size_of_runtime\\\" : 1 }\"","title":"Example: Configuration in the Jenkinsfile"},{"location":"steps/abapEnvironmentCreateTag/","text":"abapEnvironmentCreateTag \u00b6 Creates a tag for a git repository to a SAP BTP ABAP Environment system Description \u00b6 Creates tags for specific commits of one or multiple repositories / software components. The tag can be specified explicitly as well as being generated by an addon product version or an addon component version. Please provide either of the following options: The host and credentials the BTP ABAP Environment system itself. The credentials must be configured for the Communication Scenario SAP_COM_0948 . The Cloud Foundry parameters (API endpoint, organization, space), credentials, the service instance for the ABAP service and the service key for the Communication Scenario SAP_COM_0948. Only provide one of those options with the respective credentials. If all values are provided, the direct communication (via host) has priority. Usage \u00b6 We recommend to define values of step parameters via .pipeline/config.yml file . In this case, calling the step is essentially reduced to defining the step name. Calling the step can be done either in an orchestrator specific way (e.g. via a Jenkins library step) or on the command line. Jenkins Command Line library ( 'piper-lib-os' ) abapEnvironmentCreateTag script: this piper abapEnvironmentCreateTag Prerequisites \u00b6 A SAP BTP, ABAP environment system is available. On this system, a Communication User , a Communication System and a Communication Arrangement is setup for the Communication Scenario \"Software Component Management Integration (SAP_COM_0948)\". This can be done manually through the respective applications on the SAP BTP, ABAP environment system or through creating a service key for the system on Cloud Foundry with the parameters {\"scenario_id\": \"SAP_COM_0948\", \"type\": \"basic\"}. In a pipeline, you can do this with the step cloudFoundryCreateServiceKey . In addition, the software component should be cloned into the system instance. You can do this with the step abapEnvironmentCloneGitRepo . Parameters \u00b6 Overview - Step \u00b6 Name Mandatory Additional information password (yes) pass via ENV or Jenkins credentials ( abapCredentialsId ) script (yes) reference to Jenkins main pipeline script username (yes) pass via ENV or Jenkins credentials ( abapCredentialsId ) certificateNames no cfApiEndpoint no cfOrg no cfServiceInstance no cfServiceKeyName no cfSpace no commitID no generateTagForAddonComponentVersion no generateTagForAddonProductVersion no host no repositories no repositoryName no tagDescription no tagName no verbose no activates debug output Overview - Execution Environment \u00b6 Orchestrator-specific only These parameters are relevant for orchestrator usage and not considered when using the command line option. Name Mandatory Additional information containerCommand no containerShell no dockerEnvVars no dockerImage no dockerName no dockerOptions no dockerPullImage no dockerVolumeBind no dockerWorkspace no Details \u00b6 certificateNames \u00b6 file names of trusted (self-signed) server certificates - need to be stored in .pipeline/trustStore back to overview Scope Details Aliases - Type []string Mandatory no Default $PIPER_certificateNames (if set) Secret no Configuration scope \u2612 parameter \u2612 general \u2612 steps \u2612 stages Resource references none cfApiEndpoint \u00b6 Cloud Foundry API Enpoint back to overview Scope Details Aliases cloudFoundry/apiEndpoint Type string Mandatory no Default $PIPER_cfApiEndpoint (if set) Secret no Configuration scope \u2612 parameter \u2612 general \u2612 steps \u2612 stages Resource references none cfOrg \u00b6 Cloud Foundry target organization back to overview Scope Details Aliases cloudFoundry/org Type string Mandatory no Default $PIPER_cfOrg (if set) Secret no Configuration scope \u2612 parameter \u2612 general \u2612 steps \u2612 stages Resource references none cfServiceInstance \u00b6 Cloud Foundry Service Instance back to overview Scope Details Aliases cloudFoundry/serviceInstance Type string Mandatory no Default $PIPER_cfServiceInstance (if set) Secret no Configuration scope \u2612 parameter \u2612 general \u2612 steps \u2612 stages Resource references none cfServiceKeyName \u00b6 Cloud Foundry Service Key back to overview Scope Details Aliases - cloudFoundry/serviceKey - cloudFoundry/serviceKeyName - cfServiceKey Type string Mandatory no Default $PIPER_cfServiceKeyName (if set) Secret no Configuration scope \u2612 parameter \u2612 general \u2612 steps \u2612 stages Resource references none cfSpace \u00b6 Cloud Foundry target space back to overview Scope Details Aliases cloudFoundry/space Type string Mandatory no Default $PIPER_cfSpace (if set) Secret no Configuration scope \u2612 parameter \u2612 general \u2612 steps \u2612 stages Resource references none commitID \u00b6 Specifies a commitID, for which a tag will be created back to overview Scope Details Aliases - Type string Mandatory no Default $PIPER_commitID (if set) Secret no Configuration scope \u2612 parameter \u2610 general \u2612 steps \u2612 stages Resource references none containerCommand \u00b6 Jenkins-specific: Used for proper environment setup. Kubernetes only: Allows to specify start command for container created with dockerImage parameter to overwrite Piper default (/usr/bin/tail -f /dev/null). back to overview Scope Details Aliases - Type string Mandatory no Default Secret no Configuration scope \u2612 parameter \u2612 general \u2612 steps \u2612 stages Resource references none containerShell \u00b6 Jenkins-specific: Used for proper environment setup. Allows to specify the shell to be executed for container with containerName. back to overview Scope Details Aliases - Type string Mandatory no Default Secret no Configuration scope \u2612 parameter \u2612 general \u2612 steps \u2612 stages Resource references none dockerEnvVars \u00b6 Environment variables to set in the container, e.g. [http_proxy: \"proxy:8080\"]. back to overview Scope Details Aliases - Type map[string]string Mandatory no Default Secret no Configuration scope \u2612 parameter \u2612 general \u2612 steps \u2612 stages Resource references none dockerImage \u00b6 Name of the docker image that should be used. If empty, Docker is not used and the command is executed directly on the Jenkins system. back to overview Scope Details Aliases - Type string Mandatory no Default ppiper/cf-cli:latest Secret no Configuration scope \u2612 parameter \u2612 general \u2612 steps \u2612 stages Resource references none dockerName \u00b6 Kubernetes only: Name of the container launching dockerImage. SideCar only: Name of the container in local network. back to overview Scope Details Aliases - Type string Mandatory no Default cf Secret no Configuration scope \u2612 parameter \u2612 general \u2612 steps \u2612 stages Resource references none dockerOptions \u00b6 Docker options to be set when starting the container. back to overview Scope Details Aliases - Type []string Mandatory no Default Secret no Configuration scope \u2612 parameter \u2612 general \u2612 steps \u2612 stages Resource references none dockerPullImage \u00b6 Set this to 'false' to bypass a docker image pull. Useful during development process. Allows testing of images which are available in the local registry only. back to overview Scope Details Aliases - Type bool Mandatory no Default true Possible values - true - false Secret no Configuration scope \u2612 parameter \u2612 general \u2612 steps \u2612 stages Resource references none dockerVolumeBind \u00b6 Jenkins-specific: Used for proper environment setup. Volumes that should be mounted into the docker container. back to overview Scope Details Aliases - Type map[string]string Mandatory no Default Secret no Configuration scope \u2612 parameter \u2612 general \u2612 steps \u2612 stages Resource references none dockerWorkspace \u00b6 Jenkins-specific: Used for proper environment setup. Kubernetes only: Specifies a dedicated user home directory for the container which will be passed as value for environment variable HOME . back to overview Scope Details Aliases - Type string Mandatory no Default Secret no Configuration scope \u2612 parameter \u2612 general \u2612 steps \u2612 stages Resource references none generateTagForAddonComponentVersion \u00b6 Specifies if a tag will be created for the repositories on the SAP BTP ABAP Environment system back to overview Scope Details Aliases - Type bool Mandatory no Default false Possible values - true - false Secret no Configuration scope \u2612 parameter \u2610 general \u2612 steps \u2612 stages Resource references none generateTagForAddonProductVersion \u00b6 Specifies if a tag will be created for the repositories on the SAP BTP ABAP Environment system back to overview Scope Details Aliases - Type bool Mandatory no Default false Possible values - true - false Secret no Configuration scope \u2612 parameter \u2610 general \u2612 steps \u2612 stages Resource references none host \u00b6 Specifies the host address of the SAP BTP ABAP Environment system back to overview Scope Details Aliases - Type string Mandatory no Default $PIPER_host (if set) Secret no Configuration scope \u2612 parameter \u2612 general \u2612 steps \u2612 stages Resource references none password \u00b6 Password for either the Cloud Foundry API or the Communication Arrangement for SAP_COM_0948 back to overview Scope Details Aliases - Type string Mandatory yes Default $PIPER_password (if set) Secret yes Configuration scope \u2612 parameter \u2610 general \u2612 steps \u2612 stages Resource references Jenkins credential id: id: abapCredentialsId reference to: password repositories \u00b6 Specifies a YAML file containing the repositories configuration back to overview Scope Details Aliases addonDescriptorFileName Type string Mandatory no Default $PIPER_repositories (if set) Secret no Configuration scope \u2612 parameter \u2612 general \u2612 steps \u2612 stages Resource references none repositoryName \u00b6 Specifies a repository (Software Components) on the SAP BTP ABAP Environment system back to overview Scope Details Aliases - Type string Mandatory no Default $PIPER_repositoryName (if set) Secret no Configuration scope \u2612 parameter \u2610 general \u2612 steps \u2612 stages Resource references none script \u00b6 The common script environment of the Jenkinsfile running. Typically the reference to the script calling the pipeline step is provided with the this parameter, as in script: this . This allows the function to access the commonPipelineEnvironment for retrieving, e.g. configuration parameters. back to overview Scope Details Aliases - Type Jenkins Script Mandatory yes Default Secret no Configuration scope \u2610 parameter \u2610 general \u2610 steps \u2610 stages Resource references none tagDescription \u00b6 Specifies a description for the created tag back to overview Scope Details Aliases - Type string Mandatory no Default $PIPER_tagDescription (if set) Secret no Configuration scope \u2612 parameter \u2610 general \u2612 steps \u2612 stages Resource references none tagName \u00b6 Specifies a tagName that will be created for the repositories on the SAP BTP ABAP Environment system back to overview Scope Details Aliases - Type string Mandatory no Default $PIPER_tagName (if set) Secret no Configuration scope \u2612 parameter \u2610 general \u2612 steps \u2612 stages Resource references none username \u00b6 User for either the Cloud Foundry API or the Communication Arrangement for SAP_COM_0948 back to overview Scope Details Aliases - Type string Mandatory yes Default $PIPER_username (if set) Secret yes Configuration scope \u2612 parameter \u2610 general \u2612 steps \u2612 stages Resource references Jenkins credential id: id: abapCredentialsId reference to: username verbose \u00b6 verbose output back to overview Scope Details Aliases - Type bool Mandatory no Default false Possible values - true - false Secret no Configuration scope \u2612 parameter \u2612 general \u2612 steps \u2612 stages Resource references none abapCredentialsId \u00b6 Jenkins credentials ID containing user and password to authenticate to the BTP ABAP Environment system or the Cloud Foundry API back to overview Scope Details Aliases - cfCredentialsId - credentialsId Type string Configuration scope \u2612 parameter \u2612 general \u2612 steps \u2612 stages Example: Configuration in the config.yml \u00b6 The recommended way to configure your pipeline is via the config.yml file. In this case, calling the step in the Jenkinsfile is reduced to one line: abapEnvironmentCreateTag script: this If you want to provide the host and credentials of the Communication Arrangement directly, the configuration could look as follows: steps : abapEnvironmentCreateTag : repositoryName : '/DMO/GIT_REPOSITORY' commitID : 'cd87a3c' tagName : 'myTag' tagDescription : 'Created via Jenkins' abapCredentialsId : 'abapCredentialsId' host : '1234-abcd-5678-efgh-ijk.abap.eu10.hana.ondemand.com' Another option is to read the host and credentials from the cloud foundry service key of the respective instance. Furthermore, if you want to specify multiple repositories, you can use a configuration file: repositories.yml / addon.yml . If you are using the ABAP Environment Pipeline to build an add-on , you can also generate tags based on the product and component versions. With this approach the config.yml would look like this: steps : abapEnvironmentCreateTag : repositories : 'repositories.yml' generateTagForAddonProductVersion : true generateTagForAddonComponentVersion : true cfCredentialsId : 'cfCredentialsId' cfApiEndpoint : 'https://test.server.com' cfOrg : 'cfOrg' cfSpace : 'cfSpace' cfServiceInstance : 'cfServiceInstance' cfServiceKeyName : 'cfServiceKeyName' and the configuration file repositories.yml / addon.yml would look like this: addonVersion : \"1.2.3\" addonProduct : \"/DMO/PRODUCT\" repositories : - name : '/DMO/REPO' branch : 'feature' commitID : 'cd87a3cac2bc946b7629580e58598c3db56a26f8' version : '1.0.0' Using such a configuration file is the recommended approach. Please note that you need to use the YAML data structure as in the example above when using the repositories.yml / addon.yml config file.","title":"abapEnvironmentCreateTag"},{"location":"steps/abapEnvironmentCreateTag/#abapenvironmentcreatetag","text":"Creates a tag for a git repository to a SAP BTP ABAP Environment system","title":"abapEnvironmentCreateTag"},{"location":"steps/abapEnvironmentCreateTag/#description","text":"Creates tags for specific commits of one or multiple repositories / software components. The tag can be specified explicitly as well as being generated by an addon product version or an addon component version. Please provide either of the following options: The host and credentials the BTP ABAP Environment system itself. The credentials must be configured for the Communication Scenario SAP_COM_0948 . The Cloud Foundry parameters (API endpoint, organization, space), credentials, the service instance for the ABAP service and the service key for the Communication Scenario SAP_COM_0948. Only provide one of those options with the respective credentials. If all values are provided, the direct communication (via host) has priority.","title":"Description"},{"location":"steps/abapEnvironmentCreateTag/#usage","text":"We recommend to define values of step parameters via .pipeline/config.yml file . In this case, calling the step is essentially reduced to defining the step name. Calling the step can be done either in an orchestrator specific way (e.g. via a Jenkins library step) or on the command line. Jenkins Command Line library ( 'piper-lib-os' ) abapEnvironmentCreateTag script: this piper abapEnvironmentCreateTag","title":"Usage"},{"location":"steps/abapEnvironmentCreateTag/#prerequisites","text":"A SAP BTP, ABAP environment system is available. On this system, a Communication User , a Communication System and a Communication Arrangement is setup for the Communication Scenario \"Software Component Management Integration (SAP_COM_0948)\". This can be done manually through the respective applications on the SAP BTP, ABAP environment system or through creating a service key for the system on Cloud Foundry with the parameters {\"scenario_id\": \"SAP_COM_0948\", \"type\": \"basic\"}. In a pipeline, you can do this with the step cloudFoundryCreateServiceKey . In addition, the software component should be cloned into the system instance. You can do this with the step abapEnvironmentCloneGitRepo .","title":"Prerequisites"},{"location":"steps/abapEnvironmentCreateTag/#parameters","text":"","title":"Parameters"},{"location":"steps/abapEnvironmentCreateTag/#overview-step","text":"Name Mandatory Additional information password (yes) pass via ENV or Jenkins credentials ( abapCredentialsId ) script (yes) reference to Jenkins main pipeline script username (yes) pass via ENV or Jenkins credentials ( abapCredentialsId ) certificateNames no cfApiEndpoint no cfOrg no cfServiceInstance no cfServiceKeyName no cfSpace no commitID no generateTagForAddonComponentVersion no generateTagForAddonProductVersion no host no repositories no repositoryName no tagDescription no tagName no verbose no activates debug output","title":"Overview - Step"},{"location":"steps/abapEnvironmentCreateTag/#overview-execution-environment","text":"Orchestrator-specific only These parameters are relevant for orchestrator usage and not considered when using the command line option. Name Mandatory Additional information containerCommand no containerShell no dockerEnvVars no dockerImage no dockerName no dockerOptions no dockerPullImage no dockerVolumeBind no dockerWorkspace no","title":"Overview - Execution Environment"},{"location":"steps/abapEnvironmentCreateTag/#details","text":"","title":"Details"},{"location":"steps/abapEnvironmentCreateTag/#certificatenames","text":"file names of trusted (self-signed) server certificates - need to be stored in .pipeline/trustStore back to overview Scope Details Aliases - Type []string Mandatory no Default $PIPER_certificateNames (if set) Secret no Configuration scope \u2612 parameter \u2612 general \u2612 steps \u2612 stages Resource references none","title":"certificateNames"},{"location":"steps/abapEnvironmentCreateTag/#cfapiendpoint","text":"Cloud Foundry API Enpoint back to overview Scope Details Aliases cloudFoundry/apiEndpoint Type string Mandatory no Default $PIPER_cfApiEndpoint (if set) Secret no Configuration scope \u2612 parameter \u2612 general \u2612 steps \u2612 stages Resource references none","title":"cfApiEndpoint"},{"location":"steps/abapEnvironmentCreateTag/#cforg","text":"Cloud Foundry target organization back to overview Scope Details Aliases cloudFoundry/org Type string Mandatory no Default $PIPER_cfOrg (if set) Secret no Configuration scope \u2612 parameter \u2612 general \u2612 steps \u2612 stages Resource references none","title":"cfOrg"},{"location":"steps/abapEnvironmentCreateTag/#cfserviceinstance","text":"Cloud Foundry Service Instance back to overview Scope Details Aliases cloudFoundry/serviceInstance Type string Mandatory no Default $PIPER_cfServiceInstance (if set) Secret no Configuration scope \u2612 parameter \u2612 general \u2612 steps \u2612 stages Resource references none","title":"cfServiceInstance"},{"location":"steps/abapEnvironmentCreateTag/#cfservicekeyname","text":"Cloud Foundry Service Key back to overview Scope Details Aliases - cloudFoundry/serviceKey - cloudFoundry/serviceKeyName - cfServiceKey Type string Mandatory no Default $PIPER_cfServiceKeyName (if set) Secret no Configuration scope \u2612 parameter \u2612 general \u2612 steps \u2612 stages Resource references none","title":"cfServiceKeyName"},{"location":"steps/abapEnvironmentCreateTag/#cfspace","text":"Cloud Foundry target space back to overview Scope Details Aliases cloudFoundry/space Type string Mandatory no Default $PIPER_cfSpace (if set) Secret no Configuration scope \u2612 parameter \u2612 general \u2612 steps \u2612 stages Resource references none","title":"cfSpace"},{"location":"steps/abapEnvironmentCreateTag/#commitid","text":"Specifies a commitID, for which a tag will be created back to overview Scope Details Aliases - Type string Mandatory no Default $PIPER_commitID (if set) Secret no Configuration scope \u2612 parameter \u2610 general \u2612 steps \u2612 stages Resource references none","title":"commitID"},{"location":"steps/abapEnvironmentCreateTag/#containercommand","text":"Jenkins-specific: Used for proper environment setup. Kubernetes only: Allows to specify start command for container created with dockerImage parameter to overwrite Piper default (/usr/bin/tail -f /dev/null). back to overview Scope Details Aliases - Type string Mandatory no Default Secret no Configuration scope \u2612 parameter \u2612 general \u2612 steps \u2612 stages Resource references none","title":"containerCommand"},{"location":"steps/abapEnvironmentCreateTag/#containershell","text":"Jenkins-specific: Used for proper environment setup. Allows to specify the shell to be executed for container with containerName. back to overview Scope Details Aliases - Type string Mandatory no Default Secret no Configuration scope \u2612 parameter \u2612 general \u2612 steps \u2612 stages Resource references none","title":"containerShell"},{"location":"steps/abapEnvironmentCreateTag/#dockerenvvars","text":"Environment variables to set in the container, e.g. [http_proxy: \"proxy:8080\"]. back to overview Scope Details Aliases - Type map[string]string Mandatory no Default Secret no Configuration scope \u2612 parameter \u2612 general \u2612 steps \u2612 stages Resource references none","title":"dockerEnvVars"},{"location":"steps/abapEnvironmentCreateTag/#dockerimage","text":"Name of the docker image that should be used. If empty, Docker is not used and the command is executed directly on the Jenkins system. back to overview Scope Details Aliases - Type string Mandatory no Default ppiper/cf-cli:latest Secret no Configuration scope \u2612 parameter \u2612 general \u2612 steps \u2612 stages Resource references none","title":"dockerImage"},{"location":"steps/abapEnvironmentCreateTag/#dockername","text":"Kubernetes only: Name of the container launching dockerImage. SideCar only: Name of the container in local network. back to overview Scope Details Aliases - Type string Mandatory no Default cf Secret no Configuration scope \u2612 parameter \u2612 general \u2612 steps \u2612 stages Resource references none","title":"dockerName"},{"location":"steps/abapEnvironmentCreateTag/#dockeroptions","text":"Docker options to be set when starting the container. back to overview Scope Details Aliases - Type []string Mandatory no Default Secret no Configuration scope \u2612 parameter \u2612 general \u2612 steps \u2612 stages Resource references none","title":"dockerOptions"},{"location":"steps/abapEnvironmentCreateTag/#dockerpullimage","text":"Set this to 'false' to bypass a docker image pull. Useful during development process. Allows testing of images which are available in the local registry only. back to overview Scope Details Aliases - Type bool Mandatory no Default true Possible values - true - false Secret no Configuration scope \u2612 parameter \u2612 general \u2612 steps \u2612 stages Resource references none","title":"dockerPullImage"},{"location":"steps/abapEnvironmentCreateTag/#dockervolumebind","text":"Jenkins-specific: Used for proper environment setup. Volumes that should be mounted into the docker container. back to overview Scope Details Aliases - Type map[string]string Mandatory no Default Secret no Configuration scope \u2612 parameter \u2612 general \u2612 steps \u2612 stages Resource references none","title":"dockerVolumeBind"},{"location":"steps/abapEnvironmentCreateTag/#dockerworkspace","text":"Jenkins-specific: Used for proper environment setup. Kubernetes only: Specifies a dedicated user home directory for the container which will be passed as value for environment variable HOME . back to overview Scope Details Aliases - Type string Mandatory no Default Secret no Configuration scope \u2612 parameter \u2612 general \u2612 steps \u2612 stages Resource references none","title":"dockerWorkspace"},{"location":"steps/abapEnvironmentCreateTag/#generatetagforaddoncomponentversion","text":"Specifies if a tag will be created for the repositories on the SAP BTP ABAP Environment system back to overview Scope Details Aliases - Type bool Mandatory no Default false Possible values - true - false Secret no Configuration scope \u2612 parameter \u2610 general \u2612 steps \u2612 stages Resource references none","title":"generateTagForAddonComponentVersion"},{"location":"steps/abapEnvironmentCreateTag/#generatetagforaddonproductversion","text":"Specifies if a tag will be created for the repositories on the SAP BTP ABAP Environment system back to overview Scope Details Aliases - Type bool Mandatory no Default false Possible values - true - false Secret no Configuration scope \u2612 parameter \u2610 general \u2612 steps \u2612 stages Resource references none","title":"generateTagForAddonProductVersion"},{"location":"steps/abapEnvironmentCreateTag/#host","text":"Specifies the host address of the SAP BTP ABAP Environment system back to overview Scope Details Aliases - Type string Mandatory no Default $PIPER_host (if set) Secret no Configuration scope \u2612 parameter \u2612 general \u2612 steps \u2612 stages Resource references none","title":"host"},{"location":"steps/abapEnvironmentCreateTag/#password","text":"Password for either the Cloud Foundry API or the Communication Arrangement for SAP_COM_0948 back to overview Scope Details Aliases - Type string Mandatory yes Default $PIPER_password (if set) Secret yes Configuration scope \u2612 parameter \u2610 general \u2612 steps \u2612 stages Resource references Jenkins credential id: id: abapCredentialsId reference to: password","title":"password"},{"location":"steps/abapEnvironmentCreateTag/#repositories","text":"Specifies a YAML file containing the repositories configuration back to overview Scope Details Aliases addonDescriptorFileName Type string Mandatory no Default $PIPER_repositories (if set) Secret no Configuration scope \u2612 parameter \u2612 general \u2612 steps \u2612 stages Resource references none","title":"repositories"},{"location":"steps/abapEnvironmentCreateTag/#repositoryname","text":"Specifies a repository (Software Components) on the SAP BTP ABAP Environment system back to overview Scope Details Aliases - Type string Mandatory no Default $PIPER_repositoryName (if set) Secret no Configuration scope \u2612 parameter \u2610 general \u2612 steps \u2612 stages Resource references none","title":"repositoryName"},{"location":"steps/abapEnvironmentCreateTag/#script","text":"The common script environment of the Jenkinsfile running. Typically the reference to the script calling the pipeline step is provided with the this parameter, as in script: this . This allows the function to access the commonPipelineEnvironment for retrieving, e.g. configuration parameters. back to overview Scope Details Aliases - Type Jenkins Script Mandatory yes Default Secret no Configuration scope \u2610 parameter \u2610 general \u2610 steps \u2610 stages Resource references none","title":"script"},{"location":"steps/abapEnvironmentCreateTag/#tagdescription","text":"Specifies a description for the created tag back to overview Scope Details Aliases - Type string Mandatory no Default $PIPER_tagDescription (if set) Secret no Configuration scope \u2612 parameter \u2610 general \u2612 steps \u2612 stages Resource references none","title":"tagDescription"},{"location":"steps/abapEnvironmentCreateTag/#tagname","text":"Specifies a tagName that will be created for the repositories on the SAP BTP ABAP Environment system back to overview Scope Details Aliases - Type string Mandatory no Default $PIPER_tagName (if set) Secret no Configuration scope \u2612 parameter \u2610 general \u2612 steps \u2612 stages Resource references none","title":"tagName"},{"location":"steps/abapEnvironmentCreateTag/#username","text":"User for either the Cloud Foundry API or the Communication Arrangement for SAP_COM_0948 back to overview Scope Details Aliases - Type string Mandatory yes Default $PIPER_username (if set) Secret yes Configuration scope \u2612 parameter \u2610 general \u2612 steps \u2612 stages Resource references Jenkins credential id: id: abapCredentialsId reference to: username","title":"username"},{"location":"steps/abapEnvironmentCreateTag/#verbose","text":"verbose output back to overview Scope Details Aliases - Type bool Mandatory no Default false Possible values - true - false Secret no Configuration scope \u2612 parameter \u2612 general \u2612 steps \u2612 stages Resource references none","title":"verbose"},{"location":"steps/abapEnvironmentCreateTag/#abapcredentialsid","text":"Jenkins credentials ID containing user and password to authenticate to the BTP ABAP Environment system or the Cloud Foundry API back to overview Scope Details Aliases - cfCredentialsId - credentialsId Type string Configuration scope \u2612 parameter \u2612 general \u2612 steps \u2612 stages","title":"abapCredentialsId"},{"location":"steps/abapEnvironmentCreateTag/#example-configuration-in-the-configyml","text":"The recommended way to configure your pipeline is via the config.yml file. In this case, calling the step in the Jenkinsfile is reduced to one line: abapEnvironmentCreateTag script: this If you want to provide the host and credentials of the Communication Arrangement directly, the configuration could look as follows: steps : abapEnvironmentCreateTag : repositoryName : '/DMO/GIT_REPOSITORY' commitID : 'cd87a3c' tagName : 'myTag' tagDescription : 'Created via Jenkins' abapCredentialsId : 'abapCredentialsId' host : '1234-abcd-5678-efgh-ijk.abap.eu10.hana.ondemand.com' Another option is to read the host and credentials from the cloud foundry service key of the respective instance. Furthermore, if you want to specify multiple repositories, you can use a configuration file: repositories.yml / addon.yml . If you are using the ABAP Environment Pipeline to build an add-on , you can also generate tags based on the product and component versions. With this approach the config.yml would look like this: steps : abapEnvironmentCreateTag : repositories : 'repositories.yml' generateTagForAddonProductVersion : true generateTagForAddonComponentVersion : true cfCredentialsId : 'cfCredentialsId' cfApiEndpoint : 'https://test.server.com' cfOrg : 'cfOrg' cfSpace : 'cfSpace' cfServiceInstance : 'cfServiceInstance' cfServiceKeyName : 'cfServiceKeyName' and the configuration file repositories.yml / addon.yml would look like this: addonVersion : \"1.2.3\" addonProduct : \"/DMO/PRODUCT\" repositories : - name : '/DMO/REPO' branch : 'feature' commitID : 'cd87a3cac2bc946b7629580e58598c3db56a26f8' version : '1.0.0' Using such a configuration file is the recommended approach. Please note that you need to use the YAML data structure as in the example above when using the repositories.yml / addon.yml config file.","title":"Example: Configuration in the config.yml"},{"location":"steps/abapEnvironmentPullGitRepo/","text":"abapEnvironmentPullGitRepo \u00b6 Pulls a git repository to a SAP BTP ABAP Environment system Description \u00b6 Pulls a git repository (Software Component) to a SAP BTP ABAP Environment system. Please provide either of the following options: The host and credentials the BTP ABAP Environment system itself. The credentials must be configured for the Communication Scenario SAP_COM_0948 . The Cloud Foundry parameters (API endpoint, organization, space), credentials, the service instance for the ABAP service and the service key for the Communication Scenario SAP_COM_0948. Only provide one of those options with the respective credentials. If all values are provided, the direct communication (via host) has priority. Usage \u00b6 We recommend to define values of step parameters via .pipeline/config.yml file . In this case, calling the step is essentially reduced to defining the step name. Calling the step can be done either in an orchestrator specific way (e.g. via a Jenkins library step) or on the command line. Jenkins Command Line library ( 'piper-lib-os' ) abapEnvironmentPullGitRepo script: this piper abapEnvironmentPullGitRepo Prerequisites \u00b6 A SAP BTP, ABAP environment system is available. On this system, a Communication User , a Communication System and a Communication Arrangement is setup for the Communication Scenario \"Software Component Management Integration (SAP_COM_0948)\". This can be done manually through the respective applications on the SAP BTP, ABAP environment system or through creating a service key for the system on Cloud Foundry with the parameters {\"scenario_id\": \"SAP_COM_0948\", \"type\": \"basic\"}. In a pipeline, you can do this with the step cloudFoundryCreateServiceKey . In addition, the software component should be cloned into the system instance. You can do this with the step abapEnvironmentCloneGitRepo . Parameters \u00b6 Overview - Step \u00b6 Name Mandatory Additional information password (yes) pass via ENV or Jenkins credentials ( abapCredentialsId ) script (yes) reference to Jenkins main pipeline script username (yes) pass via ENV or Jenkins credentials ( abapCredentialsId ) certificateNames no cfApiEndpoint no cfOrg no cfServiceInstance no cfServiceKeyName no cfSpace no commitID no host no ignoreCommit no logOutput no repositories no repositoryName no repositoryNames no verbose no activates debug output Overview - Execution Environment \u00b6 Orchestrator-specific only These parameters are relevant for orchestrator usage and not considered when using the command line option. Name Mandatory Additional information containerCommand no containerShell no dockerEnvVars no dockerImage no dockerName no dockerOptions no dockerPullImage no dockerVolumeBind no dockerWorkspace no Details \u00b6 certificateNames \u00b6 file names of trusted (self-signed) server certificates - need to be stored in .pipeline/trustStore back to overview Scope Details Aliases - Type []string Mandatory no Default $PIPER_certificateNames (if set) Secret no Configuration scope \u2612 parameter \u2612 general \u2612 steps \u2612 stages Resource references none cfApiEndpoint \u00b6 Cloud Foundry API Enpoint back to overview Scope Details Aliases cloudFoundry/apiEndpoint Type string Mandatory no Default $PIPER_cfApiEndpoint (if set) Secret no Configuration scope \u2612 parameter \u2612 general \u2612 steps \u2612 stages Resource references none cfOrg \u00b6 Cloud Foundry target organization back to overview Scope Details Aliases cloudFoundry/org Type string Mandatory no Default $PIPER_cfOrg (if set) Secret no Configuration scope \u2612 parameter \u2612 general \u2612 steps \u2612 stages Resource references none cfServiceInstance \u00b6 Cloud Foundry Service Instance back to overview Scope Details Aliases cloudFoundry/serviceInstance Type string Mandatory no Default $PIPER_cfServiceInstance (if set) Secret no Configuration scope \u2612 parameter \u2612 general \u2612 steps \u2612 stages Resource references none cfServiceKeyName \u00b6 Cloud Foundry Service Key back to overview Scope Details Aliases - cloudFoundry/serviceKey - cloudFoundry/serviceKeyName - cfServiceKey Type string Mandatory no Default $PIPER_cfServiceKeyName (if set) Secret no Configuration scope \u2612 parameter \u2612 general \u2612 steps \u2612 stages Resource references none cfSpace \u00b6 Cloud Foundry target space back to overview Scope Details Aliases cloudFoundry/space Type string Mandatory no Default $PIPER_cfSpace (if set) Secret no Configuration scope \u2612 parameter \u2612 general \u2612 steps \u2612 stages Resource references none commitID \u00b6 Specifies a commitID of the repository, configured via \"repositoryName\" on the SAP BTP ABAP Environment system back to overview Scope Details Aliases - Type string Mandatory no Default $PIPER_commitID (if set) Secret no Configuration scope \u2612 parameter \u2610 general \u2612 steps \u2612 stages Resource references none containerCommand \u00b6 Jenkins-specific: Used for proper environment setup. Kubernetes only: Allows to specify start command for container created with dockerImage parameter to overwrite Piper default (/usr/bin/tail -f /dev/null). back to overview Scope Details Aliases - Type string Mandatory no Default Secret no Configuration scope \u2612 parameter \u2612 general \u2612 steps \u2612 stages Resource references none containerShell \u00b6 Jenkins-specific: Used for proper environment setup. Allows to specify the shell to be executed for container with containerName. back to overview Scope Details Aliases - Type string Mandatory no Default Secret no Configuration scope \u2612 parameter \u2612 general \u2612 steps \u2612 stages Resource references none dockerEnvVars \u00b6 Environment variables to set in the container, e.g. [http_proxy: \"proxy:8080\"]. back to overview Scope Details Aliases - Type map[string]string Mandatory no Default Secret no Configuration scope \u2612 parameter \u2612 general \u2612 steps \u2612 stages Resource references none dockerImage \u00b6 Name of the docker image that should be used. If empty, Docker is not used and the command is executed directly on the Jenkins system. back to overview Scope Details Aliases - Type string Mandatory no Default ppiper/cf-cli:latest Secret no Configuration scope \u2612 parameter \u2612 general \u2612 steps \u2612 stages Resource references none dockerName \u00b6 Kubernetes only: Name of the container launching dockerImage. SideCar only: Name of the container in local network. back to overview Scope Details Aliases - Type string Mandatory no Default cf Secret no Configuration scope \u2612 parameter \u2612 general \u2612 steps \u2612 stages Resource references none dockerOptions \u00b6 Docker options to be set when starting the container. back to overview Scope Details Aliases - Type []string Mandatory no Default Secret no Configuration scope \u2612 parameter \u2612 general \u2612 steps \u2612 stages Resource references none dockerPullImage \u00b6 Set this to 'false' to bypass a docker image pull. Useful during development process. Allows testing of images which are available in the local registry only. back to overview Scope Details Aliases - Type bool Mandatory no Default true Possible values - true - false Secret no Configuration scope \u2612 parameter \u2612 general \u2612 steps \u2612 stages Resource references none dockerVolumeBind \u00b6 Jenkins-specific: Used for proper environment setup. Volumes that should be mounted into the docker container. back to overview Scope Details Aliases - Type map[string]string Mandatory no Default Secret no Configuration scope \u2612 parameter \u2612 general \u2612 steps \u2612 stages Resource references none dockerWorkspace \u00b6 Jenkins-specific: Used for proper environment setup. Kubernetes only: Specifies a dedicated user home directory for the container which will be passed as value for environment variable HOME . back to overview Scope Details Aliases - Type string Mandatory no Default Secret no Configuration scope \u2612 parameter \u2612 general \u2612 steps \u2612 stages Resource references none host \u00b6 Specifies the host address of the SAP BTP ABAP Environment system back to overview Scope Details Aliases - Type string Mandatory no Default $PIPER_host (if set) Secret no Configuration scope \u2612 parameter \u2612 general \u2612 steps \u2612 stages Resource references none ignoreCommit \u00b6 ingores a commit provided via the repositories file back to overview Scope Details Aliases - Type bool Mandatory no Default false Possible values - true - false Secret no Configuration scope \u2612 parameter \u2610 general \u2610 steps \u2610 stages Resource references none logOutput \u00b6 Specifies how the clone logs from the Manage Software Components App are displayed or saved back to overview Scope Details Aliases - Type string Mandatory no Default STANDARD Possible values - ZIP - STANDARD Secret no Configuration scope \u2612 parameter \u2612 general \u2612 steps \u2612 stages Resource references none password \u00b6 Password for either the Cloud Foundry API or the Communication Arrangement for SAP_COM_0948 back to overview Scope Details Aliases - Type string Mandatory yes Default $PIPER_password (if set) Secret yes Configuration scope \u2612 parameter \u2610 general \u2612 steps \u2612 stages Resource references Jenkins credential id: id: abapCredentialsId reference to: password repositories \u00b6 Specifies a YAML file containing the repositories configuration back to overview Scope Details Aliases - Type string Mandatory no Default $PIPER_repositories (if set) Secret no Configuration scope \u2612 parameter \u2612 general \u2612 steps \u2612 stages Resource references none repositoryName \u00b6 Specifies a repository (Software Component) on the SAP BTP ABAP Environment system back to overview Scope Details Aliases - Type string Mandatory no Default $PIPER_repositoryName (if set) Secret no Configuration scope \u2612 parameter \u2610 general \u2612 steps \u2612 stages Resource references none repositoryNames \u00b6 Specifies a list of Repositories (Software Components) on the SAP BTP ABAP Environment system back to overview Scope Details Aliases - Type []string Mandatory no Default $PIPER_repositoryNames (if set) Secret no Configuration scope \u2612 parameter \u2610 general \u2612 steps \u2612 stages Resource references none script \u00b6 The common script environment of the Jenkinsfile running. Typically the reference to the script calling the pipeline step is provided with the this parameter, as in script: this . This allows the function to access the commonPipelineEnvironment for retrieving, e.g. configuration parameters. back to overview Scope Details Aliases - Type Jenkins Script Mandatory yes Default Secret no Configuration scope \u2610 parameter \u2610 general \u2610 steps \u2610 stages Resource references none username \u00b6 User for either the Cloud Foundry API or the Communication Arrangement for SAP_COM_0948 back to overview Scope Details Aliases - Type string Mandatory yes Default $PIPER_username (if set) Secret yes Configuration scope \u2612 parameter \u2610 general \u2612 steps \u2612 stages Resource references Jenkins credential id: id: abapCredentialsId reference to: username verbose \u00b6 verbose output back to overview Scope Details Aliases - Type bool Mandatory no Default false Possible values - true - false Secret no Configuration scope \u2612 parameter \u2612 general \u2612 steps \u2612 stages Resource references none abapCredentialsId \u00b6 Jenkins credentials ID containing user and password to authenticate to the BTP ABAP Environment system or the Cloud Foundry API back to overview Scope Details Aliases - cfCredentialsId - credentialsId Type string Configuration scope \u2612 parameter \u2612 general \u2612 steps \u2612 stages Example: Configuration in the config.yml \u00b6 The recommended way to configure your pipeline is via the config.yml file. In this case, calling the step in the Jenkinsfile is reduced to one line: abapEnvironmentPullGitRepo script: this If you want to provide the host and credentials of the Communication Arrangement directly, the configuration could look as follows: steps : abapEnvironmentPullGitRepo : repositoryName : '/DMO/GIT_REPOSITORY' abapCredentialsId : 'abapCredentialsId' host : '1234-abcd-5678-efgh-ijk.abap.eu10.hana.ondemand.com' However, we recommend to use a dedicated file, e.g. repositories.yml to specify the repositories to be pulled: steps : abapEnvironmentPullGitRepo : repositories : 'repositories.yml' abapCredentialsId : 'abapCredentialsId' host : '1234-abcd-5678-efgh-ijk.abap.eu10.hana.ondemand.com' The associated config file, e.g. repositories.yml could look as follows: repositories : - name : '/DMO/GIT_REPOSITORY' branch : 'main' - name : '/DMO/GIT_REPO_COMMIT' branch : 'feature' commitID : 'cd87a3cac2bc946b7629580e58598c3db56a26f8' - name : '/DMO/GIT_REPO_TAG' branch : 'realease' tag : 'myTag' It is optional to provide a branch. However, if you also want to use this file for the abapEnvironmentCheckoutBranch step it is recommended to follow the above structure. If you want to pull a specific commit, either a commitID or a tag can be specified. If both are specified, the tag will be ignored. If you want to read the host and credentials from the cloud foundry service key of the respective instance, the configuration could look as follows: steps : abapEnvironmentPullGitRepo : repositoryName : '/DMO/GIT_REPOSITORY' cfCredentialsId : 'cfCredentialsId' cfApiEndpoint : 'https://test.server.com' cfOrg : 'cfOrg' cfSpace : 'cfSpace' cfServiceInstance : 'cfServiceInstance' cfServiceKeyName : 'cfServiceKeyName' Example: Configuration in the Jenkinsfile \u00b6 It is also possible to call the steps - including all parameters - directly in the Jenkinsfile. In the first example, the host and the credentialsId of the Communication Arrangement are directly provided. abapEnvironmentPullGitRepo ( script: this , repositoryName: '/DMO/GIT_REPOSITORY' , CommitID: 'abcd1234' abapCredentialsId: 'abapCredentialsId' , host: '1234-abcd-5678-efgh-ijk.abap.eu10.hana.ondemand.com' ) In the second example, the host and credentialsId will be read from the provided Cloud Foundry service key of the specified service instance. abapEnvironmentPullGitRepo ( script: this , repositoryName: '/DMO/GIT_REPOSITORY' , abapCredentialsId: 'cfCredentialsId' , cfApiEndpoint: 'https://test.server.com' , cfOrg: 'cfOrg' , cfSpace: 'cfSpace' , cfServiceInstance: 'cfServiceInstance' , cfServiceKeyName: 'cfServiceKeyName' )","title":"abapEnvironmentPullGitRepo"},{"location":"steps/abapEnvironmentPullGitRepo/#abapenvironmentpullgitrepo","text":"Pulls a git repository to a SAP BTP ABAP Environment system","title":"abapEnvironmentPullGitRepo"},{"location":"steps/abapEnvironmentPullGitRepo/#description","text":"Pulls a git repository (Software Component) to a SAP BTP ABAP Environment system. Please provide either of the following options: The host and credentials the BTP ABAP Environment system itself. The credentials must be configured for the Communication Scenario SAP_COM_0948 . The Cloud Foundry parameters (API endpoint, organization, space), credentials, the service instance for the ABAP service and the service key for the Communication Scenario SAP_COM_0948. Only provide one of those options with the respective credentials. If all values are provided, the direct communication (via host) has priority.","title":"Description"},{"location":"steps/abapEnvironmentPullGitRepo/#usage","text":"We recommend to define values of step parameters via .pipeline/config.yml file . In this case, calling the step is essentially reduced to defining the step name. Calling the step can be done either in an orchestrator specific way (e.g. via a Jenkins library step) or on the command line. Jenkins Command Line library ( 'piper-lib-os' ) abapEnvironmentPullGitRepo script: this piper abapEnvironmentPullGitRepo","title":"Usage"},{"location":"steps/abapEnvironmentPullGitRepo/#prerequisites","text":"A SAP BTP, ABAP environment system is available. On this system, a Communication User , a Communication System and a Communication Arrangement is setup for the Communication Scenario \"Software Component Management Integration (SAP_COM_0948)\". This can be done manually through the respective applications on the SAP BTP, ABAP environment system or through creating a service key for the system on Cloud Foundry with the parameters {\"scenario_id\": \"SAP_COM_0948\", \"type\": \"basic\"}. In a pipeline, you can do this with the step cloudFoundryCreateServiceKey . In addition, the software component should be cloned into the system instance. You can do this with the step abapEnvironmentCloneGitRepo .","title":"Prerequisites"},{"location":"steps/abapEnvironmentPullGitRepo/#parameters","text":"","title":"Parameters"},{"location":"steps/abapEnvironmentPullGitRepo/#overview-step","text":"Name Mandatory Additional information password (yes) pass via ENV or Jenkins credentials ( abapCredentialsId ) script (yes) reference to Jenkins main pipeline script username (yes) pass via ENV or Jenkins credentials ( abapCredentialsId ) certificateNames no cfApiEndpoint no cfOrg no cfServiceInstance no cfServiceKeyName no cfSpace no commitID no host no ignoreCommit no logOutput no repositories no repositoryName no repositoryNames no verbose no activates debug output","title":"Overview - Step"},{"location":"steps/abapEnvironmentPullGitRepo/#overview-execution-environment","text":"Orchestrator-specific only These parameters are relevant for orchestrator usage and not considered when using the command line option. Name Mandatory Additional information containerCommand no containerShell no dockerEnvVars no dockerImage no dockerName no dockerOptions no dockerPullImage no dockerVolumeBind no dockerWorkspace no","title":"Overview - Execution Environment"},{"location":"steps/abapEnvironmentPullGitRepo/#details","text":"","title":"Details"},{"location":"steps/abapEnvironmentPullGitRepo/#certificatenames","text":"file names of trusted (self-signed) server certificates - need to be stored in .pipeline/trustStore back to overview Scope Details Aliases - Type []string Mandatory no Default $PIPER_certificateNames (if set) Secret no Configuration scope \u2612 parameter \u2612 general \u2612 steps \u2612 stages Resource references none","title":"certificateNames"},{"location":"steps/abapEnvironmentPullGitRepo/#cfapiendpoint","text":"Cloud Foundry API Enpoint back to overview Scope Details Aliases cloudFoundry/apiEndpoint Type string Mandatory no Default $PIPER_cfApiEndpoint (if set) Secret no Configuration scope \u2612 parameter \u2612 general \u2612 steps \u2612 stages Resource references none","title":"cfApiEndpoint"},{"location":"steps/abapEnvironmentPullGitRepo/#cforg","text":"Cloud Foundry target organization back to overview Scope Details Aliases cloudFoundry/org Type string Mandatory no Default $PIPER_cfOrg (if set) Secret no Configuration scope \u2612 parameter \u2612 general \u2612 steps \u2612 stages Resource references none","title":"cfOrg"},{"location":"steps/abapEnvironmentPullGitRepo/#cfserviceinstance","text":"Cloud Foundry Service Instance back to overview Scope Details Aliases cloudFoundry/serviceInstance Type string Mandatory no Default $PIPER_cfServiceInstance (if set) Secret no Configuration scope \u2612 parameter \u2612 general \u2612 steps \u2612 stages Resource references none","title":"cfServiceInstance"},{"location":"steps/abapEnvironmentPullGitRepo/#cfservicekeyname","text":"Cloud Foundry Service Key back to overview Scope Details Aliases - cloudFoundry/serviceKey - cloudFoundry/serviceKeyName - cfServiceKey Type string Mandatory no Default $PIPER_cfServiceKeyName (if set) Secret no Configuration scope \u2612 parameter \u2612 general \u2612 steps \u2612 stages Resource references none","title":"cfServiceKeyName"},{"location":"steps/abapEnvironmentPullGitRepo/#cfspace","text":"Cloud Foundry target space back to overview Scope Details Aliases cloudFoundry/space Type string Mandatory no Default $PIPER_cfSpace (if set) Secret no Configuration scope \u2612 parameter \u2612 general \u2612 steps \u2612 stages Resource references none","title":"cfSpace"},{"location":"steps/abapEnvironmentPullGitRepo/#commitid","text":"Specifies a commitID of the repository, configured via \"repositoryName\" on the SAP BTP ABAP Environment system back to overview Scope Details Aliases - Type string Mandatory no Default $PIPER_commitID (if set) Secret no Configuration scope \u2612 parameter \u2610 general \u2612 steps \u2612 stages Resource references none","title":"commitID"},{"location":"steps/abapEnvironmentPullGitRepo/#containercommand","text":"Jenkins-specific: Used for proper environment setup. Kubernetes only: Allows to specify start command for container created with dockerImage parameter to overwrite Piper default (/usr/bin/tail -f /dev/null). back to overview Scope Details Aliases - Type string Mandatory no Default Secret no Configuration scope \u2612 parameter \u2612 general \u2612 steps \u2612 stages Resource references none","title":"containerCommand"},{"location":"steps/abapEnvironmentPullGitRepo/#containershell","text":"Jenkins-specific: Used for proper environment setup. Allows to specify the shell to be executed for container with containerName. back to overview Scope Details Aliases - Type string Mandatory no Default Secret no Configuration scope \u2612 parameter \u2612 general \u2612 steps \u2612 stages Resource references none","title":"containerShell"},{"location":"steps/abapEnvironmentPullGitRepo/#dockerenvvars","text":"Environment variables to set in the container, e.g. [http_proxy: \"proxy:8080\"]. back to overview Scope Details Aliases - Type map[string]string Mandatory no Default Secret no Configuration scope \u2612 parameter \u2612 general \u2612 steps \u2612 stages Resource references none","title":"dockerEnvVars"},{"location":"steps/abapEnvironmentPullGitRepo/#dockerimage","text":"Name of the docker image that should be used. If empty, Docker is not used and the command is executed directly on the Jenkins system. back to overview Scope Details Aliases - Type string Mandatory no Default ppiper/cf-cli:latest Secret no Configuration scope \u2612 parameter \u2612 general \u2612 steps \u2612 stages Resource references none","title":"dockerImage"},{"location":"steps/abapEnvironmentPullGitRepo/#dockername","text":"Kubernetes only: Name of the container launching dockerImage. SideCar only: Name of the container in local network. back to overview Scope Details Aliases - Type string Mandatory no Default cf Secret no Configuration scope \u2612 parameter \u2612 general \u2612 steps \u2612 stages Resource references none","title":"dockerName"},{"location":"steps/abapEnvironmentPullGitRepo/#dockeroptions","text":"Docker options to be set when starting the container. back to overview Scope Details Aliases - Type []string Mandatory no Default Secret no Configuration scope \u2612 parameter \u2612 general \u2612 steps \u2612 stages Resource references none","title":"dockerOptions"},{"location":"steps/abapEnvironmentPullGitRepo/#dockerpullimage","text":"Set this to 'false' to bypass a docker image pull. Useful during development process. Allows testing of images which are available in the local registry only. back to overview Scope Details Aliases - Type bool Mandatory no Default true Possible values - true - false Secret no Configuration scope \u2612 parameter \u2612 general \u2612 steps \u2612 stages Resource references none","title":"dockerPullImage"},{"location":"steps/abapEnvironmentPullGitRepo/#dockervolumebind","text":"Jenkins-specific: Used for proper environment setup. Volumes that should be mounted into the docker container. back to overview Scope Details Aliases - Type map[string]string Mandatory no Default Secret no Configuration scope \u2612 parameter \u2612 general \u2612 steps \u2612 stages Resource references none","title":"dockerVolumeBind"},{"location":"steps/abapEnvironmentPullGitRepo/#dockerworkspace","text":"Jenkins-specific: Used for proper environment setup. Kubernetes only: Specifies a dedicated user home directory for the container which will be passed as value for environment variable HOME . back to overview Scope Details Aliases - Type string Mandatory no Default Secret no Configuration scope \u2612 parameter \u2612 general \u2612 steps \u2612 stages Resource references none","title":"dockerWorkspace"},{"location":"steps/abapEnvironmentPullGitRepo/#host","text":"Specifies the host address of the SAP BTP ABAP Environment system back to overview Scope Details Aliases - Type string Mandatory no Default $PIPER_host (if set) Secret no Configuration scope \u2612 parameter \u2612 general \u2612 steps \u2612 stages Resource references none","title":"host"},{"location":"steps/abapEnvironmentPullGitRepo/#ignorecommit","text":"ingores a commit provided via the repositories file back to overview Scope Details Aliases - Type bool Mandatory no Default false Possible values - true - false Secret no Configuration scope \u2612 parameter \u2610 general \u2610 steps \u2610 stages Resource references none","title":"ignoreCommit"},{"location":"steps/abapEnvironmentPullGitRepo/#logoutput","text":"Specifies how the clone logs from the Manage Software Components App are displayed or saved back to overview Scope Details Aliases - Type string Mandatory no Default STANDARD Possible values - ZIP - STANDARD Secret no Configuration scope \u2612 parameter \u2612 general \u2612 steps \u2612 stages Resource references none","title":"logOutput"},{"location":"steps/abapEnvironmentPullGitRepo/#password","text":"Password for either the Cloud Foundry API or the Communication Arrangement for SAP_COM_0948 back to overview Scope Details Aliases - Type string Mandatory yes Default $PIPER_password (if set) Secret yes Configuration scope \u2612 parameter \u2610 general \u2612 steps \u2612 stages Resource references Jenkins credential id: id: abapCredentialsId reference to: password","title":"password"},{"location":"steps/abapEnvironmentPullGitRepo/#repositories","text":"Specifies a YAML file containing the repositories configuration back to overview Scope Details Aliases - Type string Mandatory no Default $PIPER_repositories (if set) Secret no Configuration scope \u2612 parameter \u2612 general \u2612 steps \u2612 stages Resource references none","title":"repositories"},{"location":"steps/abapEnvironmentPullGitRepo/#repositoryname","text":"Specifies a repository (Software Component) on the SAP BTP ABAP Environment system back to overview Scope Details Aliases - Type string Mandatory no Default $PIPER_repositoryName (if set) Secret no Configuration scope \u2612 parameter \u2610 general \u2612 steps \u2612 stages Resource references none","title":"repositoryName"},{"location":"steps/abapEnvironmentPullGitRepo/#repositorynames","text":"Specifies a list of Repositories (Software Components) on the SAP BTP ABAP Environment system back to overview Scope Details Aliases - Type []string Mandatory no Default $PIPER_repositoryNames (if set) Secret no Configuration scope \u2612 parameter \u2610 general \u2612 steps \u2612 stages Resource references none","title":"repositoryNames"},{"location":"steps/abapEnvironmentPullGitRepo/#script","text":"The common script environment of the Jenkinsfile running. Typically the reference to the script calling the pipeline step is provided with the this parameter, as in script: this . This allows the function to access the commonPipelineEnvironment for retrieving, e.g. configuration parameters. back to overview Scope Details Aliases - Type Jenkins Script Mandatory yes Default Secret no Configuration scope \u2610 parameter \u2610 general \u2610 steps \u2610 stages Resource references none","title":"script"},{"location":"steps/abapEnvironmentPullGitRepo/#username","text":"User for either the Cloud Foundry API or the Communication Arrangement for SAP_COM_0948 back to overview Scope Details Aliases - Type string Mandatory yes Default $PIPER_username (if set) Secret yes Configuration scope \u2612 parameter \u2610 general \u2612 steps \u2612 stages Resource references Jenkins credential id: id: abapCredentialsId reference to: username","title":"username"},{"location":"steps/abapEnvironmentPullGitRepo/#verbose","text":"verbose output back to overview Scope Details Aliases - Type bool Mandatory no Default false Possible values - true - false Secret no Configuration scope \u2612 parameter \u2612 general \u2612 steps \u2612 stages Resource references none","title":"verbose"},{"location":"steps/abapEnvironmentPullGitRepo/#abapcredentialsid","text":"Jenkins credentials ID containing user and password to authenticate to the BTP ABAP Environment system or the Cloud Foundry API back to overview Scope Details Aliases - cfCredentialsId - credentialsId Type string Configuration scope \u2612 parameter \u2612 general \u2612 steps \u2612 stages","title":"abapCredentialsId"},{"location":"steps/abapEnvironmentPullGitRepo/#example-configuration-in-the-configyml","text":"The recommended way to configure your pipeline is via the config.yml file. In this case, calling the step in the Jenkinsfile is reduced to one line: abapEnvironmentPullGitRepo script: this If you want to provide the host and credentials of the Communication Arrangement directly, the configuration could look as follows: steps : abapEnvironmentPullGitRepo : repositoryName : '/DMO/GIT_REPOSITORY' abapCredentialsId : 'abapCredentialsId' host : '1234-abcd-5678-efgh-ijk.abap.eu10.hana.ondemand.com' However, we recommend to use a dedicated file, e.g. repositories.yml to specify the repositories to be pulled: steps : abapEnvironmentPullGitRepo : repositories : 'repositories.yml' abapCredentialsId : 'abapCredentialsId' host : '1234-abcd-5678-efgh-ijk.abap.eu10.hana.ondemand.com' The associated config file, e.g. repositories.yml could look as follows: repositories : - name : '/DMO/GIT_REPOSITORY' branch : 'main' - name : '/DMO/GIT_REPO_COMMIT' branch : 'feature' commitID : 'cd87a3cac2bc946b7629580e58598c3db56a26f8' - name : '/DMO/GIT_REPO_TAG' branch : 'realease' tag : 'myTag' It is optional to provide a branch. However, if you also want to use this file for the abapEnvironmentCheckoutBranch step it is recommended to follow the above structure. If you want to pull a specific commit, either a commitID or a tag can be specified. If both are specified, the tag will be ignored. If you want to read the host and credentials from the cloud foundry service key of the respective instance, the configuration could look as follows: steps : abapEnvironmentPullGitRepo : repositoryName : '/DMO/GIT_REPOSITORY' cfCredentialsId : 'cfCredentialsId' cfApiEndpoint : 'https://test.server.com' cfOrg : 'cfOrg' cfSpace : 'cfSpace' cfServiceInstance : 'cfServiceInstance' cfServiceKeyName : 'cfServiceKeyName'","title":"Example: Configuration in the config.yml"},{"location":"steps/abapEnvironmentPullGitRepo/#example-configuration-in-the-jenkinsfile","text":"It is also possible to call the steps - including all parameters - directly in the Jenkinsfile. In the first example, the host and the credentialsId of the Communication Arrangement are directly provided. abapEnvironmentPullGitRepo ( script: this , repositoryName: '/DMO/GIT_REPOSITORY' , CommitID: 'abcd1234' abapCredentialsId: 'abapCredentialsId' , host: '1234-abcd-5678-efgh-ijk.abap.eu10.hana.ondemand.com' ) In the second example, the host and credentialsId will be read from the provided Cloud Foundry service key of the specified service instance. abapEnvironmentPullGitRepo ( script: this , repositoryName: '/DMO/GIT_REPOSITORY' , abapCredentialsId: 'cfCredentialsId' , cfApiEndpoint: 'https://test.server.com' , cfOrg: 'cfOrg' , cfSpace: 'cfSpace' , cfServiceInstance: 'cfServiceInstance' , cfServiceKeyName: 'cfServiceKeyName' )","title":"Example: Configuration in the Jenkinsfile"},{"location":"steps/abapEnvironmentPushATCSystemConfig/","text":"abapEnvironmentPushATCSystemConfig \u00b6 Create/Update ATC System Configuration Description \u00b6 This step is for creating/updating an ATC system configurationon on an SAP BTP, ABAP Environment system. Please provide either of the following options: The host and credentials the SAP BTP, ABAP Environment system itself. The credentials must be configured for the Communication Scenario SAP_COM_0763 . The Cloud Foundry parameters (API endpoint, organization, space), credentials, the service instance for the ABAP service and the service key for the Communication Scenario SAP_COM_0763. Only provide one of those options with the respective credentials. If all values are provided, the direct communication (via host) has priority. Usage \u00b6 We recommend to define values of step parameters via .pipeline/config.yml file . In this case, calling the step is essentially reduced to defining the step name. Calling the step can be done either in an orchestrator specific way (e.g. via a Jenkins library step) or on the command line. Jenkins Command Line library ( 'piper-lib-os' ) abapEnvironmentPushATCSystemConfig script: this piper abapEnvironmentPushATCSystemConfig Prerequisites \u00b6 A SAP BTP, ABAP environment system is available. On this system, a Communication User , a Communication System and a Communication Arrangement is setup for the Communication Scenario \u201cABAP Test Cockpit Configuration Integration (SAP_COM_0763)\u201c. This can be done manually through the respective applications on the SAP BTP, ABAP environment system or through creating a service key for the system on Cloud Foundry with the parameters {\u201cscenario_id\u201d: \u201cSAP_COM_0763\", \u201ctype\u201d: \u201cbasic\u201d}. In a pipeline, you can do this with the step cloudFoundryCreateServiceKey . You can either provide the ABAP endpoint configuration to directly trigger an ATC run on the ABAP system or optionally provide the Cloud Foundry parameters with your credentials to read a Service Key of a SAP BTP, ABAP environment system in Cloud Foundry that contains all the details of the ABAP endpoint to trigger an ATC run. Regardless if you chose an ABAP endpoint directly or reading a Cloud Foundry Service Key, you have to provide the configuration of the packages and software components you want to be checked in an ATC run in a .yml or .yaml file. This file must be stored in the same folder as the Jenkinsfile defining the pipeline. The software components and/or packages you want to be checked must be present in the configured system in order to run the check. Please make sure that you have created or pulled the respective software components and/or Packages in the SAP BTP, ABAP environment system. Examples will be listed below. Parameters \u00b6 Overview - Step \u00b6 Name Mandatory Additional information atcSystemConfigFilePath yes password (yes) pass via ENV or Jenkins credentials ( abapCredentialsId ) script (yes) reference to Jenkins main pipeline script username (yes) pass via ENV or Jenkins credentials ( abapCredentialsId ) cfApiEndpoint no cfOrg no cfServiceInstance no cfServiceKeyName no cfSpace no host no patchIfExisting no verbose no activates debug output Overview - Execution Environment \u00b6 Orchestrator-specific only These parameters are relevant for orchestrator usage and not considered when using the command line option. Name Mandatory Additional information containerCommand no containerShell no dockerEnvVars no dockerImage no dockerName no dockerOptions no dockerPullImage no dockerVolumeBind no dockerWorkspace no Details \u00b6 atcSystemConfigFilePath \u00b6 Path to a JSON file with ATC System Configuration back to overview Scope Details Aliases - Type string Mandatory yes Default $PIPER_atcSystemConfigFilePath (if set) Secret no Configuration scope \u2612 parameter \u2610 general \u2612 steps \u2612 stages Resource references none cfApiEndpoint \u00b6 Cloud Foundry API endpoint back to overview Scope Details Aliases cloudFoundry/apiEndpoint Type string Mandatory no Default $PIPER_cfApiEndpoint (if set) Secret no Configuration scope \u2612 parameter \u2612 general \u2612 steps \u2612 stages Resource references none cfOrg \u00b6 CF org back to overview Scope Details Aliases cloudFoundry/org Type string Mandatory no Default $PIPER_cfOrg (if set) Secret no Configuration scope \u2612 parameter \u2612 general \u2612 steps \u2612 stages Resource references none cfServiceInstance \u00b6 Parameter of ServiceInstance Name to delete CloudFoundry Service back to overview Scope Details Aliases cloudFoundry/serviceInstance Type string Mandatory no Default $PIPER_cfServiceInstance (if set) Secret no Configuration scope \u2612 parameter \u2612 general \u2612 steps \u2612 stages Resource references none cfServiceKeyName \u00b6 Parameter of CloudFoundry Service Key to be created back to overview Scope Details Aliases - cloudFoundry/serviceKey - cloudFoundry/serviceKeyName - cfServiceKey Type string Mandatory no Default $PIPER_cfServiceKeyName (if set) Secret no Configuration scope \u2612 parameter \u2612 general \u2612 steps \u2612 stages Resource references none cfSpace \u00b6 CF Space back to overview Scope Details Aliases cloudFoundry/space Type string Mandatory no Default $PIPER_cfSpace (if set) Secret no Configuration scope \u2612 parameter \u2612 general \u2612 steps \u2612 stages Resource references none containerCommand \u00b6 Jenkins-specific: Used for proper environment setup. Kubernetes only: Allows to specify start command for container created with dockerImage parameter to overwrite Piper default (/usr/bin/tail -f /dev/null). back to overview Scope Details Aliases - Type string Mandatory no Default Secret no Configuration scope \u2612 parameter \u2612 general \u2612 steps \u2612 stages Resource references none containerShell \u00b6 Jenkins-specific: Used for proper environment setup. Allows to specify the shell to be executed for container with containerName. back to overview Scope Details Aliases - Type string Mandatory no Default Secret no Configuration scope \u2612 parameter \u2612 general \u2612 steps \u2612 stages Resource references none dockerEnvVars \u00b6 Environment variables to set in the container, e.g. [http_proxy: \"proxy:8080\"]. back to overview Scope Details Aliases - Type map[string]string Mandatory no Default Secret no Configuration scope \u2612 parameter \u2612 general \u2612 steps \u2612 stages Resource references none dockerImage \u00b6 Name of the docker image that should be used. If empty, Docker is not used and the command is executed directly on the Jenkins system. back to overview Scope Details Aliases - Type string Mandatory no Default ppiper/cf-cli:latest Secret no Configuration scope \u2612 parameter \u2612 general \u2612 steps \u2612 stages Resource references none dockerName \u00b6 Kubernetes only: Name of the container launching dockerImage. SideCar only: Name of the container in local network. back to overview Scope Details Aliases - Type string Mandatory no Default cf Secret no Configuration scope \u2612 parameter \u2612 general \u2612 steps \u2612 stages Resource references none dockerOptions \u00b6 Docker options to be set when starting the container. back to overview Scope Details Aliases - Type []string Mandatory no Default Secret no Configuration scope \u2612 parameter \u2612 general \u2612 steps \u2612 stages Resource references none dockerPullImage \u00b6 Set this to 'false' to bypass a docker image pull. Useful during development process. Allows testing of images which are available in the local registry only. back to overview Scope Details Aliases - Type bool Mandatory no Default true Possible values - true - false Secret no Configuration scope \u2612 parameter \u2612 general \u2612 steps \u2612 stages Resource references none dockerVolumeBind \u00b6 Jenkins-specific: Used for proper environment setup. Volumes that should be mounted into the docker container. back to overview Scope Details Aliases - Type map[string]string Mandatory no Default Secret no Configuration scope \u2612 parameter \u2612 general \u2612 steps \u2612 stages Resource references none dockerWorkspace \u00b6 Jenkins-specific: Used for proper environment setup. Kubernetes only: Specifies a dedicated user home directory for the container which will be passed as value for environment variable HOME . back to overview Scope Details Aliases - Type string Mandatory no Default Secret no Configuration scope \u2612 parameter \u2612 general \u2612 steps \u2612 stages Resource references none host \u00b6 Specifies the host address of the SAP SAP BTP, ABAP Environment system back to overview Scope Details Aliases - Type string Mandatory no Default $PIPER_host (if set) Secret no Configuration scope \u2612 parameter \u2612 general \u2612 steps \u2612 stages Resource references none password \u00b6 Password for either the Cloud Foundry API or the Communication Arrangement for SAP_COM_0763 back to overview Scope Details Aliases - Type string Mandatory yes Default $PIPER_password (if set) Secret yes Configuration scope \u2612 parameter \u2610 general \u2612 steps \u2612 stages Resource references Jenkins credential id: id: abapCredentialsId reference to: password patchIfExisting \u00b6 In case an configuration under the given name already exists in the system. Should the step update/patch the existing ATC Systm Configuration from the provided ATC System Configuration file? back to overview Scope Details Aliases - Type bool Mandatory no Default true Possible values - true - false Secret no Configuration scope \u2612 parameter \u2610 general \u2612 steps \u2612 stages Resource references none script \u00b6 The common script environment of the Jenkinsfile running. Typically the reference to the script calling the pipeline step is provided with the this parameter, as in script: this . This allows the function to access the commonPipelineEnvironment for retrieving, e.g. configuration parameters. back to overview Scope Details Aliases - Type Jenkins Script Mandatory yes Default Secret no Configuration scope \u2610 parameter \u2610 general \u2610 steps \u2610 stages Resource references none username \u00b6 User for either the Cloud Foundry API or the Communication Arrangement for SAP_COM_0763 back to overview Scope Details Aliases - Type string Mandatory yes Default $PIPER_username (if set) Secret yes Configuration scope \u2612 parameter \u2610 general \u2612 steps \u2612 stages Resource references Jenkins credential id: id: abapCredentialsId reference to: username verbose \u00b6 verbose output back to overview Scope Details Aliases - Type bool Mandatory no Default false Possible values - true - false Secret no Configuration scope \u2612 parameter \u2612 general \u2612 steps \u2612 stages Resource references none abapCredentialsId \u00b6 Jenkins credentials ID containing user and password to authenticate to the SAP BTP, ABAP Environment system or the Cloud Foundry API back to overview Scope Details Aliases cfCredentialsId Type string Configuration scope \u2612 parameter \u2612 general \u2612 steps \u2612 stages Examples \u00b6 Configuration in the config.yml \u00b6 The recommended way to configure your pipeline is via the config.yml file. In this case, calling the step in the Jenkinsfile is reduced to one line: abapEnvironmentPushATCSystemConfig script: this If you want to provide the host and credentials of the Communication Arrangement directly, the configuration could look as follows: steps : abapEnvironmentPushATCSystemConfig : abapCredentialsId : 'abapCredentialsId' , host : 'https://myABAPendpoint.com' , atcSystemConfigFilePath : 'atcSystemConfig.json' , To trigger a create/update ATC System Configuration step an ATC System configuration file atcSystemConfig.json will be needed. Check section 'ATC System Configuration file example' for more information. Create/Update an ATC System Configuration via Cloud Foundry Service Key example in Jenkinsfile \u00b6 The following example triggers a Create/Update operation on an ATC System Configuration via reading the Service Key of an ABAP instance in Cloud Foundry. You can store the credentials in Jenkins and use the cfCredentialsId parameter to authenticate to Cloud Foundry. The username and password to authenticate to ABAP system will then be read from the Cloud Foundry service key that is bound to the ABAP instance. This can be done accordingly: abapEnvironmentPushATCSystemConfig ( cfApiEndpoint : 'https://test.server.com' , cfOrg : 'cfOrg' , cfSpace: 'cfSpace' , cfServiceInstance: 'myServiceInstance' , cfServiceKeyName: 'myServiceKey' , abapCredentialsId: 'cfCredentialsId' , atcSystemConfigFilePath: 'atcSystemConfig.json' , script: this , ) Create/Update an ATC System Configuration via direct ABAP endpoint configuration in Jenkinsfile \u00b6 This example triggers a create/update operation on an ATC System Configuration run directly on the ABAP endpoint. In order to trigger the create/update operation on an ATC System Configuration you have to pass the username and password for authentication to the ABAP endpoint via parameters as well as the ABAP endpoint/host. You can store the credentials in Jenkins and use the abapCredentialsId parameter to authenticate to the ABAP endpoint/host. This must be configured as following: abapEnvironmentPushATCSystemConfig ( abapCredentialsId: 'abapCredentialsId' , host: 'https://myABAPendpoint.com' , atcSystemConfigFilePath: 'atcSystemConfig.json' , script: this , ) To create/update an ATC System Configuration a file atcSystemConfig.json will be needed. Check section 'ATC System configuration file example' for more information. ATC System configuration file example \u00b6 The step always performs a check first, if an ATC System Configuration with the same name provided in the file atcSystemConfig.json with the attribute conf_name. This file contains an JSON Representation of an ATC System Configuration. Some json file examples can be found below. In case an ATC System Configuration with this name already exists, by default, the step would perform an update of this ATC System Configuration with the ATC System Configuration information provided in file atcSystemConfig.json . If this is not desired, an update could be supressed by using the parameter patchIfExisting in the configuration yaml the following way: steps : abapEnvironmentPushATCSystemConfig : atcSystemConfigFilePath : atcSystemConfig.json, patchIfExisting : false, In this case the step skips further processing after existence check and returns with a Warning. Providing a specifc System configuration file atcSystemConfig.json is mandatory. The following section contains an example of an atcSystemConfig.json file. This file must be stored in the same Git folder where the Jenkinsfile is stored to run the pipeline. This folder must be taken as a SCM in the Jenkins pipeline to run the pipeline. See below an example for an atcSystemConfig.json file for creating/updating an ATC System Configuration with the name myATCSystemConfigurationName including a change of one priority. { \"conf_name\" : \"myATCSystemConfigurationName\" , \"checkvariant\" : \"SAP_CLOUD_PLATFORM_ATC_DEFAULT\" , \"block_findings\" : \"0\" , \"inform_findings\" : \"1\" , \"_priorities\" : [ { \"test\" : \"CL_CI_TEST_AMDP_HDB_MIGRATION\" , \"message_id\" : \"FAIL_ABAP\" , \"priority\" : 2 } ] } See below an example for an atcSystemConfig.json file for creating/updating an ATC System Configuration with the name myATCSystemConfigurationName. { \"conf_name\" : \"myATCSystemConfigurationName\" , \"checkvariant\" : \"SAP_CLOUD_PLATFORM_ATC_DEFAULT\" , \"block_findings\" : \"0\" , \"inform_findings\" : \"1\" }","title":"abapEnvironmentPushATCSystemConfig"},{"location":"steps/abapEnvironmentPushATCSystemConfig/#abapenvironmentpushatcsystemconfig","text":"Create/Update ATC System Configuration","title":"abapEnvironmentPushATCSystemConfig"},{"location":"steps/abapEnvironmentPushATCSystemConfig/#description","text":"This step is for creating/updating an ATC system configurationon on an SAP BTP, ABAP Environment system. Please provide either of the following options: The host and credentials the SAP BTP, ABAP Environment system itself. The credentials must be configured for the Communication Scenario SAP_COM_0763 . The Cloud Foundry parameters (API endpoint, organization, space), credentials, the service instance for the ABAP service and the service key for the Communication Scenario SAP_COM_0763. Only provide one of those options with the respective credentials. If all values are provided, the direct communication (via host) has priority.","title":"Description"},{"location":"steps/abapEnvironmentPushATCSystemConfig/#usage","text":"We recommend to define values of step parameters via .pipeline/config.yml file . In this case, calling the step is essentially reduced to defining the step name. Calling the step can be done either in an orchestrator specific way (e.g. via a Jenkins library step) or on the command line. Jenkins Command Line library ( 'piper-lib-os' ) abapEnvironmentPushATCSystemConfig script: this piper abapEnvironmentPushATCSystemConfig","title":"Usage"},{"location":"steps/abapEnvironmentPushATCSystemConfig/#prerequisites","text":"A SAP BTP, ABAP environment system is available. On this system, a Communication User , a Communication System and a Communication Arrangement is setup for the Communication Scenario \u201cABAP Test Cockpit Configuration Integration (SAP_COM_0763)\u201c. This can be done manually through the respective applications on the SAP BTP, ABAP environment system or through creating a service key for the system on Cloud Foundry with the parameters {\u201cscenario_id\u201d: \u201cSAP_COM_0763\", \u201ctype\u201d: \u201cbasic\u201d}. In a pipeline, you can do this with the step cloudFoundryCreateServiceKey . You can either provide the ABAP endpoint configuration to directly trigger an ATC run on the ABAP system or optionally provide the Cloud Foundry parameters with your credentials to read a Service Key of a SAP BTP, ABAP environment system in Cloud Foundry that contains all the details of the ABAP endpoint to trigger an ATC run. Regardless if you chose an ABAP endpoint directly or reading a Cloud Foundry Service Key, you have to provide the configuration of the packages and software components you want to be checked in an ATC run in a .yml or .yaml file. This file must be stored in the same folder as the Jenkinsfile defining the pipeline. The software components and/or packages you want to be checked must be present in the configured system in order to run the check. Please make sure that you have created or pulled the respective software components and/or Packages in the SAP BTP, ABAP environment system. Examples will be listed below.","title":"Prerequisites"},{"location":"steps/abapEnvironmentPushATCSystemConfig/#parameters","text":"","title":"Parameters"},{"location":"steps/abapEnvironmentPushATCSystemConfig/#overview-step","text":"Name Mandatory Additional information atcSystemConfigFilePath yes password (yes) pass via ENV or Jenkins credentials ( abapCredentialsId ) script (yes) reference to Jenkins main pipeline script username (yes) pass via ENV or Jenkins credentials ( abapCredentialsId ) cfApiEndpoint no cfOrg no cfServiceInstance no cfServiceKeyName no cfSpace no host no patchIfExisting no verbose no activates debug output","title":"Overview - Step"},{"location":"steps/abapEnvironmentPushATCSystemConfig/#overview-execution-environment","text":"Orchestrator-specific only These parameters are relevant for orchestrator usage and not considered when using the command line option. Name Mandatory Additional information containerCommand no containerShell no dockerEnvVars no dockerImage no dockerName no dockerOptions no dockerPullImage no dockerVolumeBind no dockerWorkspace no","title":"Overview - Execution Environment"},{"location":"steps/abapEnvironmentPushATCSystemConfig/#details","text":"","title":"Details"},{"location":"steps/abapEnvironmentPushATCSystemConfig/#atcsystemconfigfilepath","text":"Path to a JSON file with ATC System Configuration back to overview Scope Details Aliases - Type string Mandatory yes Default $PIPER_atcSystemConfigFilePath (if set) Secret no Configuration scope \u2612 parameter \u2610 general \u2612 steps \u2612 stages Resource references none","title":"atcSystemConfigFilePath"},{"location":"steps/abapEnvironmentPushATCSystemConfig/#cfapiendpoint","text":"Cloud Foundry API endpoint back to overview Scope Details Aliases cloudFoundry/apiEndpoint Type string Mandatory no Default $PIPER_cfApiEndpoint (if set) Secret no Configuration scope \u2612 parameter \u2612 general \u2612 steps \u2612 stages Resource references none","title":"cfApiEndpoint"},{"location":"steps/abapEnvironmentPushATCSystemConfig/#cforg","text":"CF org back to overview Scope Details Aliases cloudFoundry/org Type string Mandatory no Default $PIPER_cfOrg (if set) Secret no Configuration scope \u2612 parameter \u2612 general \u2612 steps \u2612 stages Resource references none","title":"cfOrg"},{"location":"steps/abapEnvironmentPushATCSystemConfig/#cfserviceinstance","text":"Parameter of ServiceInstance Name to delete CloudFoundry Service back to overview Scope Details Aliases cloudFoundry/serviceInstance Type string Mandatory no Default $PIPER_cfServiceInstance (if set) Secret no Configuration scope \u2612 parameter \u2612 general \u2612 steps \u2612 stages Resource references none","title":"cfServiceInstance"},{"location":"steps/abapEnvironmentPushATCSystemConfig/#cfservicekeyname","text":"Parameter of CloudFoundry Service Key to be created back to overview Scope Details Aliases - cloudFoundry/serviceKey - cloudFoundry/serviceKeyName - cfServiceKey Type string Mandatory no Default $PIPER_cfServiceKeyName (if set) Secret no Configuration scope \u2612 parameter \u2612 general \u2612 steps \u2612 stages Resource references none","title":"cfServiceKeyName"},{"location":"steps/abapEnvironmentPushATCSystemConfig/#cfspace","text":"CF Space back to overview Scope Details Aliases cloudFoundry/space Type string Mandatory no Default $PIPER_cfSpace (if set) Secret no Configuration scope \u2612 parameter \u2612 general \u2612 steps \u2612 stages Resource references none","title":"cfSpace"},{"location":"steps/abapEnvironmentPushATCSystemConfig/#containercommand","text":"Jenkins-specific: Used for proper environment setup. Kubernetes only: Allows to specify start command for container created with dockerImage parameter to overwrite Piper default (/usr/bin/tail -f /dev/null). back to overview Scope Details Aliases - Type string Mandatory no Default Secret no Configuration scope \u2612 parameter \u2612 general \u2612 steps \u2612 stages Resource references none","title":"containerCommand"},{"location":"steps/abapEnvironmentPushATCSystemConfig/#containershell","text":"Jenkins-specific: Used for proper environment setup. Allows to specify the shell to be executed for container with containerName. back to overview Scope Details Aliases - Type string Mandatory no Default Secret no Configuration scope \u2612 parameter \u2612 general \u2612 steps \u2612 stages Resource references none","title":"containerShell"},{"location":"steps/abapEnvironmentPushATCSystemConfig/#dockerenvvars","text":"Environment variables to set in the container, e.g. [http_proxy: \"proxy:8080\"]. back to overview Scope Details Aliases - Type map[string]string Mandatory no Default Secret no Configuration scope \u2612 parameter \u2612 general \u2612 steps \u2612 stages Resource references none","title":"dockerEnvVars"},{"location":"steps/abapEnvironmentPushATCSystemConfig/#dockerimage","text":"Name of the docker image that should be used. If empty, Docker is not used and the command is executed directly on the Jenkins system. back to overview Scope Details Aliases - Type string Mandatory no Default ppiper/cf-cli:latest Secret no Configuration scope \u2612 parameter \u2612 general \u2612 steps \u2612 stages Resource references none","title":"dockerImage"},{"location":"steps/abapEnvironmentPushATCSystemConfig/#dockername","text":"Kubernetes only: Name of the container launching dockerImage. SideCar only: Name of the container in local network. back to overview Scope Details Aliases - Type string Mandatory no Default cf Secret no Configuration scope \u2612 parameter \u2612 general \u2612 steps \u2612 stages Resource references none","title":"dockerName"},{"location":"steps/abapEnvironmentPushATCSystemConfig/#dockeroptions","text":"Docker options to be set when starting the container. back to overview Scope Details Aliases - Type []string Mandatory no Default Secret no Configuration scope \u2612 parameter \u2612 general \u2612 steps \u2612 stages Resource references none","title":"dockerOptions"},{"location":"steps/abapEnvironmentPushATCSystemConfig/#dockerpullimage","text":"Set this to 'false' to bypass a docker image pull. Useful during development process. Allows testing of images which are available in the local registry only. back to overview Scope Details Aliases - Type bool Mandatory no Default true Possible values - true - false Secret no Configuration scope \u2612 parameter \u2612 general \u2612 steps \u2612 stages Resource references none","title":"dockerPullImage"},{"location":"steps/abapEnvironmentPushATCSystemConfig/#dockervolumebind","text":"Jenkins-specific: Used for proper environment setup. Volumes that should be mounted into the docker container. back to overview Scope Details Aliases - Type map[string]string Mandatory no Default Secret no Configuration scope \u2612 parameter \u2612 general \u2612 steps \u2612 stages Resource references none","title":"dockerVolumeBind"},{"location":"steps/abapEnvironmentPushATCSystemConfig/#dockerworkspace","text":"Jenkins-specific: Used for proper environment setup. Kubernetes only: Specifies a dedicated user home directory for the container which will be passed as value for environment variable HOME . back to overview Scope Details Aliases - Type string Mandatory no Default Secret no Configuration scope \u2612 parameter \u2612 general \u2612 steps \u2612 stages Resource references none","title":"dockerWorkspace"},{"location":"steps/abapEnvironmentPushATCSystemConfig/#host","text":"Specifies the host address of the SAP SAP BTP, ABAP Environment system back to overview Scope Details Aliases - Type string Mandatory no Default $PIPER_host (if set) Secret no Configuration scope \u2612 parameter \u2612 general \u2612 steps \u2612 stages Resource references none","title":"host"},{"location":"steps/abapEnvironmentPushATCSystemConfig/#password","text":"Password for either the Cloud Foundry API or the Communication Arrangement for SAP_COM_0763 back to overview Scope Details Aliases - Type string Mandatory yes Default $PIPER_password (if set) Secret yes Configuration scope \u2612 parameter \u2610 general \u2612 steps \u2612 stages Resource references Jenkins credential id: id: abapCredentialsId reference to: password","title":"password"},{"location":"steps/abapEnvironmentPushATCSystemConfig/#patchifexisting","text":"In case an configuration under the given name already exists in the system. Should the step update/patch the existing ATC Systm Configuration from the provided ATC System Configuration file? back to overview Scope Details Aliases - Type bool Mandatory no Default true Possible values - true - false Secret no Configuration scope \u2612 parameter \u2610 general \u2612 steps \u2612 stages Resource references none","title":"patchIfExisting"},{"location":"steps/abapEnvironmentPushATCSystemConfig/#script","text":"The common script environment of the Jenkinsfile running. Typically the reference to the script calling the pipeline step is provided with the this parameter, as in script: this . This allows the function to access the commonPipelineEnvironment for retrieving, e.g. configuration parameters. back to overview Scope Details Aliases - Type Jenkins Script Mandatory yes Default Secret no Configuration scope \u2610 parameter \u2610 general \u2610 steps \u2610 stages Resource references none","title":"script"},{"location":"steps/abapEnvironmentPushATCSystemConfig/#username","text":"User for either the Cloud Foundry API or the Communication Arrangement for SAP_COM_0763 back to overview Scope Details Aliases - Type string Mandatory yes Default $PIPER_username (if set) Secret yes Configuration scope \u2612 parameter \u2610 general \u2612 steps \u2612 stages Resource references Jenkins credential id: id: abapCredentialsId reference to: username","title":"username"},{"location":"steps/abapEnvironmentPushATCSystemConfig/#verbose","text":"verbose output back to overview Scope Details Aliases - Type bool Mandatory no Default false Possible values - true - false Secret no Configuration scope \u2612 parameter \u2612 general \u2612 steps \u2612 stages Resource references none","title":"verbose"},{"location":"steps/abapEnvironmentPushATCSystemConfig/#abapcredentialsid","text":"Jenkins credentials ID containing user and password to authenticate to the SAP BTP, ABAP Environment system or the Cloud Foundry API back to overview Scope Details Aliases cfCredentialsId Type string Configuration scope \u2612 parameter \u2612 general \u2612 steps \u2612 stages","title":"abapCredentialsId"},{"location":"steps/abapEnvironmentPushATCSystemConfig/#examples","text":"","title":"Examples"},{"location":"steps/abapEnvironmentPushATCSystemConfig/#configuration-in-the-configyml","text":"The recommended way to configure your pipeline is via the config.yml file. In this case, calling the step in the Jenkinsfile is reduced to one line: abapEnvironmentPushATCSystemConfig script: this If you want to provide the host and credentials of the Communication Arrangement directly, the configuration could look as follows: steps : abapEnvironmentPushATCSystemConfig : abapCredentialsId : 'abapCredentialsId' , host : 'https://myABAPendpoint.com' , atcSystemConfigFilePath : 'atcSystemConfig.json' , To trigger a create/update ATC System Configuration step an ATC System configuration file atcSystemConfig.json will be needed. Check section 'ATC System Configuration file example' for more information.","title":"Configuration in the config.yml"},{"location":"steps/abapEnvironmentPushATCSystemConfig/#createupdate-an-atc-system-configuration-via-cloud-foundry-service-key-example-in-jenkinsfile","text":"The following example triggers a Create/Update operation on an ATC System Configuration via reading the Service Key of an ABAP instance in Cloud Foundry. You can store the credentials in Jenkins and use the cfCredentialsId parameter to authenticate to Cloud Foundry. The username and password to authenticate to ABAP system will then be read from the Cloud Foundry service key that is bound to the ABAP instance. This can be done accordingly: abapEnvironmentPushATCSystemConfig ( cfApiEndpoint : 'https://test.server.com' , cfOrg : 'cfOrg' , cfSpace: 'cfSpace' , cfServiceInstance: 'myServiceInstance' , cfServiceKeyName: 'myServiceKey' , abapCredentialsId: 'cfCredentialsId' , atcSystemConfigFilePath: 'atcSystemConfig.json' , script: this , )","title":"Create/Update an ATC System Configuration via Cloud Foundry Service Key example in Jenkinsfile"},{"location":"steps/abapEnvironmentPushATCSystemConfig/#createupdate-an-atc-system-configuration-via-direct-abap-endpoint-configuration-in-jenkinsfile","text":"This example triggers a create/update operation on an ATC System Configuration run directly on the ABAP endpoint. In order to trigger the create/update operation on an ATC System Configuration you have to pass the username and password for authentication to the ABAP endpoint via parameters as well as the ABAP endpoint/host. You can store the credentials in Jenkins and use the abapCredentialsId parameter to authenticate to the ABAP endpoint/host. This must be configured as following: abapEnvironmentPushATCSystemConfig ( abapCredentialsId: 'abapCredentialsId' , host: 'https://myABAPendpoint.com' , atcSystemConfigFilePath: 'atcSystemConfig.json' , script: this , ) To create/update an ATC System Configuration a file atcSystemConfig.json will be needed. Check section 'ATC System configuration file example' for more information.","title":"Create/Update an ATC System Configuration via direct ABAP endpoint configuration in Jenkinsfile"},{"location":"steps/abapEnvironmentPushATCSystemConfig/#atc-system-configuration-file-example","text":"The step always performs a check first, if an ATC System Configuration with the same name provided in the file atcSystemConfig.json with the attribute conf_name. This file contains an JSON Representation of an ATC System Configuration. Some json file examples can be found below. In case an ATC System Configuration with this name already exists, by default, the step would perform an update of this ATC System Configuration with the ATC System Configuration information provided in file atcSystemConfig.json . If this is not desired, an update could be supressed by using the parameter patchIfExisting in the configuration yaml the following way: steps : abapEnvironmentPushATCSystemConfig : atcSystemConfigFilePath : atcSystemConfig.json, patchIfExisting : false, In this case the step skips further processing after existence check and returns with a Warning. Providing a specifc System configuration file atcSystemConfig.json is mandatory. The following section contains an example of an atcSystemConfig.json file. This file must be stored in the same Git folder where the Jenkinsfile is stored to run the pipeline. This folder must be taken as a SCM in the Jenkins pipeline to run the pipeline. See below an example for an atcSystemConfig.json file for creating/updating an ATC System Configuration with the name myATCSystemConfigurationName including a change of one priority. { \"conf_name\" : \"myATCSystemConfigurationName\" , \"checkvariant\" : \"SAP_CLOUD_PLATFORM_ATC_DEFAULT\" , \"block_findings\" : \"0\" , \"inform_findings\" : \"1\" , \"_priorities\" : [ { \"test\" : \"CL_CI_TEST_AMDP_HDB_MIGRATION\" , \"message_id\" : \"FAIL_ABAP\" , \"priority\" : 2 } ] } See below an example for an atcSystemConfig.json file for creating/updating an ATC System Configuration with the name myATCSystemConfigurationName. { \"conf_name\" : \"myATCSystemConfigurationName\" , \"checkvariant\" : \"SAP_CLOUD_PLATFORM_ATC_DEFAULT\" , \"block_findings\" : \"0\" , \"inform_findings\" : \"1\" }","title":"ATC System configuration file example"},{"location":"steps/abapEnvironmentRunATCCheck/","text":"abapEnvironmentRunATCCheck \u00b6 Runs an ATC Check Description \u00b6 This step is for triggering an ATC test run on an SAP BTP ABAP Environment system. Please provide either of the following options: The host and credentials the Cloud Platform ABAP Environment system itself. The credentials must be configured for the Communication Scenario SAP_COM_0901 . The Cloud Foundry parameters (API endpoint, organization, space), credentials, the service instance for the ABAP service and the service key for the Communication Scenario SAP_COM_0901. Only provide one of those options with the respective credentials. If all values are provided, the direct communication (via host) has priority. Regardless of the option you chose, please make sure to provide the configuration the object set (e.g. with Software Components and Packages) that you want to be checked analog to the examples listed on this page. Usage \u00b6 We recommend to define values of step parameters via .pipeline/config.yml file . In this case, calling the step is essentially reduced to defining the step name. Calling the step can be done either in an orchestrator specific way (e.g. via a Jenkins library step) or on the command line. Jenkins Command Line library ( 'piper-lib-os' ) abapEnvironmentRunATCCheck script: this piper abapEnvironmentRunATCCheck !!! Currently the Object Set configuration is limited to the usage of Multi Property Sets. Please note that other sets besides the Multi Property Set will not be included in the ATC runs. You can see an example of the Multi Property Sets with all configurable properties. However, we strongly reccommend to only specify packages and software components like in the first two examples of the section ATC config file example . Prerequisites \u00b6 A SAP BTP, ABAP environment system is available. On this system, a Communication User , a Communication System and a Communication Arrangement is setup for the Communication Scenario \u201cABAP Test Cockpit - Test Integration (SAP_COM_0901)\u201c. This can be done manually through the respective applications on the SAP BTP, ABAP environment system or through creating a service key for the system on Cloud Foundry with the parameters {\u201cscenario_id\u201d: \u201cSAP_COM_0901\", \u201ctype\u201d: \u201cbasic\u201d}. In a pipeline, you can do this with the step cloudFoundryCreateServiceKey . You can either provide the ABAP endpoint configuration to directly trigger an ATC run on the ABAP system or optionally provide the Cloud Foundry parameters with your credentials to read a Service Key of a SAP BTP, ABAP environment system in Cloud Foundry that contains all the details of the ABAP endpoint to trigger an ATC run. Regardless if you chose an ABAP endpoint directly or reading a Cloud Foundry Service Key, you have to provide the configuration of the packages and software components you want to be checked in an ATC run in a .yml or .yaml file. This file must be stored in the same folder as the Jenkinsfile defining the pipeline. The software components and/or packages you want to be checked must be present in the configured system in order to run the check. Please make sure that you have created or pulled the respective software components and/or Packages in the SAP BTP, ABAP environment system. Examples will be listed below. Parameters \u00b6 Overview - Step \u00b6 Name Mandatory Additional information password (yes) pass via ENV or Jenkins credentials ( abapCredentialsId ) script (yes) reference to Jenkins main pipeline script username (yes) pass via ENV or Jenkins credentials ( abapCredentialsId ) atcConfig no atcResultsFileName no cfApiEndpoint no cfOrg no cfServiceInstance no cfServiceKeyName no cfSpace no failOnSeverity no generateHTML no host no repositories no verbose no activates debug output Overview - Execution Environment \u00b6 Orchestrator-specific only These parameters are relevant for orchestrator usage and not considered when using the command line option. Name Mandatory Additional information containerCommand no containerShell no dockerEnvVars no dockerImage no dockerName no dockerOptions no dockerPullImage no dockerVolumeBind no dockerWorkspace no Details \u00b6 atcConfig \u00b6 Path to a YAML configuration file for the object set to be checked during ATC run back to overview Scope Details Aliases - Type string Mandatory no Default $PIPER_atcConfig (if set) Secret no Configuration scope \u2612 parameter \u2610 general \u2612 steps \u2612 stages Resource references none atcResultsFileName \u00b6 Specifies output file name for the results from the ATC run. This file name will also be used for generating the HTML file back to overview Scope Details Aliases - Type string Mandatory no Default ATCResults.xml Secret no Configuration scope \u2612 parameter \u2610 general \u2612 steps \u2612 stages Resource references none cfApiEndpoint \u00b6 Cloud Foundry API endpoint back to overview Scope Details Aliases cloudFoundry/apiEndpoint Type string Mandatory no Default $PIPER_cfApiEndpoint (if set) Secret no Configuration scope \u2612 parameter \u2612 general \u2612 steps \u2612 stages Resource references none cfOrg \u00b6 CF org back to overview Scope Details Aliases cloudFoundry/org Type string Mandatory no Default $PIPER_cfOrg (if set) Secret no Configuration scope \u2612 parameter \u2612 general \u2612 steps \u2612 stages Resource references none cfServiceInstance \u00b6 Parameter of ServiceInstance Name to delete CloudFoundry Service back to overview Scope Details Aliases cloudFoundry/serviceInstance Type string Mandatory no Default $PIPER_cfServiceInstance (if set) Secret no Configuration scope \u2612 parameter \u2612 general \u2612 steps \u2612 stages Resource references none cfServiceKeyName \u00b6 Parameter of CloudFoundry Service Key to be created back to overview Scope Details Aliases - cloudFoundry/serviceKey - cloudFoundry/serviceKeyName - cfServiceKey Type string Mandatory no Default $PIPER_cfServiceKeyName (if set) Secret no Configuration scope \u2612 parameter \u2612 general \u2612 steps \u2612 stages Resource references none cfSpace \u00b6 CF Space back to overview Scope Details Aliases cloudFoundry/space Type string Mandatory no Default $PIPER_cfSpace (if set) Secret no Configuration scope \u2612 parameter \u2612 general \u2612 steps \u2612 stages Resource references none containerCommand \u00b6 Jenkins-specific: Used for proper environment setup. Kubernetes only: Allows to specify start command for container created with dockerImage parameter to overwrite Piper default (/usr/bin/tail -f /dev/null). back to overview Scope Details Aliases - Type string Mandatory no Default Secret no Configuration scope \u2612 parameter \u2612 general \u2612 steps \u2612 stages Resource references none containerShell \u00b6 Jenkins-specific: Used for proper environment setup. Allows to specify the shell to be executed for container with containerName. back to overview Scope Details Aliases - Type string Mandatory no Default Secret no Configuration scope \u2612 parameter \u2612 general \u2612 steps \u2612 stages Resource references none dockerEnvVars \u00b6 Environment variables to set in the container, e.g. [http_proxy: \"proxy:8080\"]. back to overview Scope Details Aliases - Type map[string]string Mandatory no Default Secret no Configuration scope \u2612 parameter \u2612 general \u2612 steps \u2612 stages Resource references none dockerImage \u00b6 Name of the docker image that should be used. If empty, Docker is not used and the command is executed directly on the Jenkins system. back to overview Scope Details Aliases - Type string Mandatory no Default ppiper/cf-cli:latest Secret no Configuration scope \u2612 parameter \u2612 general \u2612 steps \u2612 stages Resource references none dockerName \u00b6 Kubernetes only: Name of the container launching dockerImage. SideCar only: Name of the container in local network. back to overview Scope Details Aliases - Type string Mandatory no Default cf Secret no Configuration scope \u2612 parameter \u2612 general \u2612 steps \u2612 stages Resource references none dockerOptions \u00b6 Docker options to be set when starting the container. back to overview Scope Details Aliases - Type []string Mandatory no Default Secret no Configuration scope \u2612 parameter \u2612 general \u2612 steps \u2612 stages Resource references none dockerPullImage \u00b6 Set this to 'false' to bypass a docker image pull. Useful during development process. Allows testing of images which are available in the local registry only. back to overview Scope Details Aliases - Type bool Mandatory no Default true Possible values - true - false Secret no Configuration scope \u2612 parameter \u2612 general \u2612 steps \u2612 stages Resource references none dockerVolumeBind \u00b6 Jenkins-specific: Used for proper environment setup. Volumes that should be mounted into the docker container. back to overview Scope Details Aliases - Type map[string]string Mandatory no Default Secret no Configuration scope \u2612 parameter \u2612 general \u2612 steps \u2612 stages Resource references none dockerWorkspace \u00b6 Jenkins-specific: Used for proper environment setup. Kubernetes only: Specifies a dedicated user home directory for the container which will be passed as value for environment variable HOME . back to overview Scope Details Aliases - Type string Mandatory no Default Secret no Configuration scope \u2612 parameter \u2612 general \u2612 steps \u2612 stages Resource references none failOnSeverity \u00b6 Specifies the severity level, for which the ATC step should fail if at least one message with this severity (or \"higher\") level is returned by the ATC Check Run (possible values - error, warning, info). Initial value is default behavior and ATC findings of any severity do not fail the step back to overview Scope Details Aliases - Type string Mandatory no Default $PIPER_failOnSeverity (if set) Secret no Configuration scope \u2612 parameter \u2612 general \u2612 steps \u2612 stages Resource references none generateHTML \u00b6 Specifies whether the ATC results should also be generated as an HTML document back to overview Scope Details Aliases - Type bool Mandatory no Default false Possible values - true - false Secret no Configuration scope \u2612 parameter \u2612 general \u2612 steps \u2612 stages Resource references none host \u00b6 Specifies the host address of the SAP BTP ABAP Environment system back to overview Scope Details Aliases - Type string Mandatory no Default $PIPER_host (if set) Secret no Configuration scope \u2612 parameter \u2612 general \u2612 steps \u2612 stages Resource references none password \u00b6 Password for either the Cloud Foundry API or the Communication Arrangement for SAP_COM_0901 back to overview Scope Details Aliases - Type string Mandatory yes Default $PIPER_password (if set) Secret yes Configuration scope \u2612 parameter \u2610 general \u2612 steps \u2612 stages Resource references Jenkins credential id: id: abapCredentialsId reference to: password repositories \u00b6 Specifies a YAML file containing the repositories configuration back to overview Scope Details Aliases - Type string Mandatory no Default $PIPER_repositories (if set) Secret no Configuration scope \u2612 parameter \u2612 general \u2612 steps \u2612 stages Resource references none script \u00b6 The common script environment of the Jenkinsfile running. Typically the reference to the script calling the pipeline step is provided with the this parameter, as in script: this . This allows the function to access the commonPipelineEnvironment for retrieving, e.g. configuration parameters. back to overview Scope Details Aliases - Type Jenkins Script Mandatory yes Default Secret no Configuration scope \u2610 parameter \u2610 general \u2610 steps \u2610 stages Resource references none username \u00b6 User for either the Cloud Foundry API or the Communication Arrangement for SAP_COM_0901 back to overview Scope Details Aliases - Type string Mandatory yes Default $PIPER_username (if set) Secret yes Configuration scope \u2612 parameter \u2610 general \u2612 steps \u2612 stages Resource references Jenkins credential id: id: abapCredentialsId reference to: username verbose \u00b6 verbose output back to overview Scope Details Aliases - Type bool Mandatory no Default false Possible values - true - false Secret no Configuration scope \u2612 parameter \u2612 general \u2612 steps \u2612 stages Resource references none abapCredentialsId \u00b6 Jenkins credentials ID containing user and password to authenticate to the Cloud Platform ABAP Environment system or the Cloud Foundry API back to overview Scope Details Aliases cfCredentialsId Type string Configuration scope \u2612 parameter \u2612 general \u2612 steps \u2612 stages Examples \u00b6 Configuration in the config.yml \u00b6 The recommended way to configure your pipeline is via the config.yml file. In this case, calling the step in the Jenkinsfile is reduced to one line: abapEnvironmentRunATCCheck script: this If you want to provide the host and credentials of the Communication Arrangement directly, the configuration could look as follows: steps : abapEnvironmentRunATCCheck : abapCredentialsId : 'abapCredentialsId' , host : 'https://myABAPendpoint.com' , atcConfig : 'atcconfig.yml' , ATC run via Cloud Foundry Service Key example in Jenkinsfile \u00b6 The following example triggers an ATC run via reading the Service Key of an ABAP instance in Cloud Foundry. You can store the credentials in Jenkins and use the cfCredentialsId parameter to authenticate to Cloud Foundry. The username and password to authenticate to ABAP system will then be read from the Cloud Foundry service key that is bound to the ABAP instance. This can be done accordingly: abapEnvironmentRunATCCheck ( cfApiEndpoint : 'https://test.server.com' , cfOrg : 'cfOrg' , cfSpace: 'cfSpace' , cfServiceInstance: 'myServiceInstance' , cfServiceKeyName: 'myServiceKey' , abapCredentialsId: 'cfCredentialsId' , atcConfig: 'atcconfig.yml' , script: this , ) To trigger the ATC run an ATC config file atcconfig.yml will be needed. Check section 'ATC config file example' for more information. ATC run via direct ABAP endpoint configuration in Jenkinsfile \u00b6 This example triggers an ATC run directly on the ABAP endpoint. In order to trigger the ATC run you have to pass the username and password for authentication to the ABAP endpoint via parameters as well as the ABAP endpoint/host. You can store the credentials in Jenkins and use the abapCredentialsId parameter to authenticate to the ABAP endpoint/host. This must be configured as following: abapEnvironmentRunATCCheck ( abapCredentialsId: 'abapCredentialsId' , host: 'https://myABAPendpoint.com' , atcConfig: 'atcconfig.yml' , script: this , ) To trigger the ATC run an ATC config file atcconfig.yml will be needed. Check section 'ATC config file example' for more information. ATC config file example \u00b6 Providing a specifc ATC configuration is optional. If you are using a repositories.yml file for the Clone stage of the ABAP environment pipeline, a default ATC configuration will be derived if no explicit ATC configuration is available. The following section contains an example of an atcconfig.yml file. This file must be stored in the same Git folder where the Jenkinsfile is stored to run the pipeline. This folder must be taken as a SCM in the Jenkins pipeline to run the pipeline. You can specify a list of packages and/or software components to be checked. This must be in the same format as below example for a atcconfig.yml file. In case subpackages shall be included in the checks you can use packagetrees. Please note that if you chose to provide both packages and software components to be checked with the atcconfig.yml file, the set of packages and the set of software components will be combinend by the API using a logical AND operation. Therefore, we advise to specify either the software components or packages. Additionally, if you don't specify a dedicated ATC check variant to be used, the ABAP_CLOUD_DEVELOPMENT_DEFAULT variant will be used as default. For more information on how to configure a check variant for an ATC run please check the last example on this page. See below example for an atcconfig.yml file with both packages and software components to be checked: objectset : softwarecomponents : - name : TestComponent - name : TestComponent2 packages : - name : TestPackage packagetrees : - name : TestPackageWithSubpackages The following example of an atcconfig.yml file that only contains packages and packagetrees to be checked: objectset : packages : - name : TestPackage packagetrees : - name : TestPackageWithSubpackages The following example of an atcconfig.yml file that only contains software components to be checked: objectset : softwarecomponents : - name : TestComponent - name : TestComponent2 The following is an example of an atcconfig.yml file that supports the check variant and configuration ATC options and containing the software components TestComponent and TestComponent2 as Objectset. checkvariant : \"TestCheckVariant\" configuration : \"TestConfiguration\" objectset : softwarecomponents : - name : TestComponent - name : TestComponent2 The following example of an atcconfig.yml file contains all possible properties of the Multi Property Set that can be used. Please take note that this is not the reccommended approach. If you want to check packages or software components please use the two above examples. The usage of the Multi Property Set is only reccommended for ATC runs that require these rules for the test execution. There is no official documentation on the usage of the Multi Property Set. checkvariant : \"TestCheckVariant\" configuration : \"TestConfiguration\" objectset : type : multiPropertySet multipropertyset : owners : - name : demoOwner softwarecomponents : - name : demoSoftwareComponent versions : - value : ACTIVE packages : - name : demoPackage packagetrees : - name : TestPackageWithSubpackages objectnamepatterns : - value : 'ZCL_*' languages : - value : EN sourcesystems : - name : H01 objecttypes : - name : CLAS objecttypegroups : - name : CLAS releasestates : - value : RELEASED applicationcomponents : - name : demoApplicationComponent transportlayers : - name : H01","title":"abapEnvironmentRunATCCheck"},{"location":"steps/abapEnvironmentRunATCCheck/#abapenvironmentrunatccheck","text":"Runs an ATC Check","title":"abapEnvironmentRunATCCheck"},{"location":"steps/abapEnvironmentRunATCCheck/#description","text":"This step is for triggering an ATC test run on an SAP BTP ABAP Environment system. Please provide either of the following options: The host and credentials the Cloud Platform ABAP Environment system itself. The credentials must be configured for the Communication Scenario SAP_COM_0901 . The Cloud Foundry parameters (API endpoint, organization, space), credentials, the service instance for the ABAP service and the service key for the Communication Scenario SAP_COM_0901. Only provide one of those options with the respective credentials. If all values are provided, the direct communication (via host) has priority. Regardless of the option you chose, please make sure to provide the configuration the object set (e.g. with Software Components and Packages) that you want to be checked analog to the examples listed on this page.","title":"Description"},{"location":"steps/abapEnvironmentRunATCCheck/#usage","text":"We recommend to define values of step parameters via .pipeline/config.yml file . In this case, calling the step is essentially reduced to defining the step name. Calling the step can be done either in an orchestrator specific way (e.g. via a Jenkins library step) or on the command line. Jenkins Command Line library ( 'piper-lib-os' ) abapEnvironmentRunATCCheck script: this piper abapEnvironmentRunATCCheck !!! Currently the Object Set configuration is limited to the usage of Multi Property Sets. Please note that other sets besides the Multi Property Set will not be included in the ATC runs. You can see an example of the Multi Property Sets with all configurable properties. However, we strongly reccommend to only specify packages and software components like in the first two examples of the section ATC config file example .","title":"Usage"},{"location":"steps/abapEnvironmentRunATCCheck/#prerequisites","text":"A SAP BTP, ABAP environment system is available. On this system, a Communication User , a Communication System and a Communication Arrangement is setup for the Communication Scenario \u201cABAP Test Cockpit - Test Integration (SAP_COM_0901)\u201c. This can be done manually through the respective applications on the SAP BTP, ABAP environment system or through creating a service key for the system on Cloud Foundry with the parameters {\u201cscenario_id\u201d: \u201cSAP_COM_0901\", \u201ctype\u201d: \u201cbasic\u201d}. In a pipeline, you can do this with the step cloudFoundryCreateServiceKey . You can either provide the ABAP endpoint configuration to directly trigger an ATC run on the ABAP system or optionally provide the Cloud Foundry parameters with your credentials to read a Service Key of a SAP BTP, ABAP environment system in Cloud Foundry that contains all the details of the ABAP endpoint to trigger an ATC run. Regardless if you chose an ABAP endpoint directly or reading a Cloud Foundry Service Key, you have to provide the configuration of the packages and software components you want to be checked in an ATC run in a .yml or .yaml file. This file must be stored in the same folder as the Jenkinsfile defining the pipeline. The software components and/or packages you want to be checked must be present in the configured system in order to run the check. Please make sure that you have created or pulled the respective software components and/or Packages in the SAP BTP, ABAP environment system. Examples will be listed below.","title":"Prerequisites"},{"location":"steps/abapEnvironmentRunATCCheck/#parameters","text":"","title":"Parameters"},{"location":"steps/abapEnvironmentRunATCCheck/#overview-step","text":"Name Mandatory Additional information password (yes) pass via ENV or Jenkins credentials ( abapCredentialsId ) script (yes) reference to Jenkins main pipeline script username (yes) pass via ENV or Jenkins credentials ( abapCredentialsId ) atcConfig no atcResultsFileName no cfApiEndpoint no cfOrg no cfServiceInstance no cfServiceKeyName no cfSpace no failOnSeverity no generateHTML no host no repositories no verbose no activates debug output","title":"Overview - Step"},{"location":"steps/abapEnvironmentRunATCCheck/#overview-execution-environment","text":"Orchestrator-specific only These parameters are relevant for orchestrator usage and not considered when using the command line option. Name Mandatory Additional information containerCommand no containerShell no dockerEnvVars no dockerImage no dockerName no dockerOptions no dockerPullImage no dockerVolumeBind no dockerWorkspace no","title":"Overview - Execution Environment"},{"location":"steps/abapEnvironmentRunATCCheck/#details","text":"","title":"Details"},{"location":"steps/abapEnvironmentRunATCCheck/#atcconfig","text":"Path to a YAML configuration file for the object set to be checked during ATC run back to overview Scope Details Aliases - Type string Mandatory no Default $PIPER_atcConfig (if set) Secret no Configuration scope \u2612 parameter \u2610 general \u2612 steps \u2612 stages Resource references none","title":"atcConfig"},{"location":"steps/abapEnvironmentRunATCCheck/#atcresultsfilename","text":"Specifies output file name for the results from the ATC run. This file name will also be used for generating the HTML file back to overview Scope Details Aliases - Type string Mandatory no Default ATCResults.xml Secret no Configuration scope \u2612 parameter \u2610 general \u2612 steps \u2612 stages Resource references none","title":"atcResultsFileName"},{"location":"steps/abapEnvironmentRunATCCheck/#cfapiendpoint","text":"Cloud Foundry API endpoint back to overview Scope Details Aliases cloudFoundry/apiEndpoint Type string Mandatory no Default $PIPER_cfApiEndpoint (if set) Secret no Configuration scope \u2612 parameter \u2612 general \u2612 steps \u2612 stages Resource references none","title":"cfApiEndpoint"},{"location":"steps/abapEnvironmentRunATCCheck/#cforg","text":"CF org back to overview Scope Details Aliases cloudFoundry/org Type string Mandatory no Default $PIPER_cfOrg (if set) Secret no Configuration scope \u2612 parameter \u2612 general \u2612 steps \u2612 stages Resource references none","title":"cfOrg"},{"location":"steps/abapEnvironmentRunATCCheck/#cfserviceinstance","text":"Parameter of ServiceInstance Name to delete CloudFoundry Service back to overview Scope Details Aliases cloudFoundry/serviceInstance Type string Mandatory no Default $PIPER_cfServiceInstance (if set) Secret no Configuration scope \u2612 parameter \u2612 general \u2612 steps \u2612 stages Resource references none","title":"cfServiceInstance"},{"location":"steps/abapEnvironmentRunATCCheck/#cfservicekeyname","text":"Parameter of CloudFoundry Service Key to be created back to overview Scope Details Aliases - cloudFoundry/serviceKey - cloudFoundry/serviceKeyName - cfServiceKey Type string Mandatory no Default $PIPER_cfServiceKeyName (if set) Secret no Configuration scope \u2612 parameter \u2612 general \u2612 steps \u2612 stages Resource references none","title":"cfServiceKeyName"},{"location":"steps/abapEnvironmentRunATCCheck/#cfspace","text":"CF Space back to overview Scope Details Aliases cloudFoundry/space Type string Mandatory no Default $PIPER_cfSpace (if set) Secret no Configuration scope \u2612 parameter \u2612 general \u2612 steps \u2612 stages Resource references none","title":"cfSpace"},{"location":"steps/abapEnvironmentRunATCCheck/#containercommand","text":"Jenkins-specific: Used for proper environment setup. Kubernetes only: Allows to specify start command for container created with dockerImage parameter to overwrite Piper default (/usr/bin/tail -f /dev/null). back to overview Scope Details Aliases - Type string Mandatory no Default Secret no Configuration scope \u2612 parameter \u2612 general \u2612 steps \u2612 stages Resource references none","title":"containerCommand"},{"location":"steps/abapEnvironmentRunATCCheck/#containershell","text":"Jenkins-specific: Used for proper environment setup. Allows to specify the shell to be executed for container with containerName. back to overview Scope Details Aliases - Type string Mandatory no Default Secret no Configuration scope \u2612 parameter \u2612 general \u2612 steps \u2612 stages Resource references none","title":"containerShell"},{"location":"steps/abapEnvironmentRunATCCheck/#dockerenvvars","text":"Environment variables to set in the container, e.g. [http_proxy: \"proxy:8080\"]. back to overview Scope Details Aliases - Type map[string]string Mandatory no Default Secret no Configuration scope \u2612 parameter \u2612 general \u2612 steps \u2612 stages Resource references none","title":"dockerEnvVars"},{"location":"steps/abapEnvironmentRunATCCheck/#dockerimage","text":"Name of the docker image that should be used. If empty, Docker is not used and the command is executed directly on the Jenkins system. back to overview Scope Details Aliases - Type string Mandatory no Default ppiper/cf-cli:latest Secret no Configuration scope \u2612 parameter \u2612 general \u2612 steps \u2612 stages Resource references none","title":"dockerImage"},{"location":"steps/abapEnvironmentRunATCCheck/#dockername","text":"Kubernetes only: Name of the container launching dockerImage. SideCar only: Name of the container in local network. back to overview Scope Details Aliases - Type string Mandatory no Default cf Secret no Configuration scope \u2612 parameter \u2612 general \u2612 steps \u2612 stages Resource references none","title":"dockerName"},{"location":"steps/abapEnvironmentRunATCCheck/#dockeroptions","text":"Docker options to be set when starting the container. back to overview Scope Details Aliases - Type []string Mandatory no Default Secret no Configuration scope \u2612 parameter \u2612 general \u2612 steps \u2612 stages Resource references none","title":"dockerOptions"},{"location":"steps/abapEnvironmentRunATCCheck/#dockerpullimage","text":"Set this to 'false' to bypass a docker image pull. Useful during development process. Allows testing of images which are available in the local registry only. back to overview Scope Details Aliases - Type bool Mandatory no Default true Possible values - true - false Secret no Configuration scope \u2612 parameter \u2612 general \u2612 steps \u2612 stages Resource references none","title":"dockerPullImage"},{"location":"steps/abapEnvironmentRunATCCheck/#dockervolumebind","text":"Jenkins-specific: Used for proper environment setup. Volumes that should be mounted into the docker container. back to overview Scope Details Aliases - Type map[string]string Mandatory no Default Secret no Configuration scope \u2612 parameter \u2612 general \u2612 steps \u2612 stages Resource references none","title":"dockerVolumeBind"},{"location":"steps/abapEnvironmentRunATCCheck/#dockerworkspace","text":"Jenkins-specific: Used for proper environment setup. Kubernetes only: Specifies a dedicated user home directory for the container which will be passed as value for environment variable HOME . back to overview Scope Details Aliases - Type string Mandatory no Default Secret no Configuration scope \u2612 parameter \u2612 general \u2612 steps \u2612 stages Resource references none","title":"dockerWorkspace"},{"location":"steps/abapEnvironmentRunATCCheck/#failonseverity","text":"Specifies the severity level, for which the ATC step should fail if at least one message with this severity (or \"higher\") level is returned by the ATC Check Run (possible values - error, warning, info). Initial value is default behavior and ATC findings of any severity do not fail the step back to overview Scope Details Aliases - Type string Mandatory no Default $PIPER_failOnSeverity (if set) Secret no Configuration scope \u2612 parameter \u2612 general \u2612 steps \u2612 stages Resource references none","title":"failOnSeverity"},{"location":"steps/abapEnvironmentRunATCCheck/#generatehtml","text":"Specifies whether the ATC results should also be generated as an HTML document back to overview Scope Details Aliases - Type bool Mandatory no Default false Possible values - true - false Secret no Configuration scope \u2612 parameter \u2612 general \u2612 steps \u2612 stages Resource references none","title":"generateHTML"},{"location":"steps/abapEnvironmentRunATCCheck/#host","text":"Specifies the host address of the SAP BTP ABAP Environment system back to overview Scope Details Aliases - Type string Mandatory no Default $PIPER_host (if set) Secret no Configuration scope \u2612 parameter \u2612 general \u2612 steps \u2612 stages Resource references none","title":"host"},{"location":"steps/abapEnvironmentRunATCCheck/#password","text":"Password for either the Cloud Foundry API or the Communication Arrangement for SAP_COM_0901 back to overview Scope Details Aliases - Type string Mandatory yes Default $PIPER_password (if set) Secret yes Configuration scope \u2612 parameter \u2610 general \u2612 steps \u2612 stages Resource references Jenkins credential id: id: abapCredentialsId reference to: password","title":"password"},{"location":"steps/abapEnvironmentRunATCCheck/#repositories","text":"Specifies a YAML file containing the repositories configuration back to overview Scope Details Aliases - Type string Mandatory no Default $PIPER_repositories (if set) Secret no Configuration scope \u2612 parameter \u2612 general \u2612 steps \u2612 stages Resource references none","title":"repositories"},{"location":"steps/abapEnvironmentRunATCCheck/#script","text":"The common script environment of the Jenkinsfile running. Typically the reference to the script calling the pipeline step is provided with the this parameter, as in script: this . This allows the function to access the commonPipelineEnvironment for retrieving, e.g. configuration parameters. back to overview Scope Details Aliases - Type Jenkins Script Mandatory yes Default Secret no Configuration scope \u2610 parameter \u2610 general \u2610 steps \u2610 stages Resource references none","title":"script"},{"location":"steps/abapEnvironmentRunATCCheck/#username","text":"User for either the Cloud Foundry API or the Communication Arrangement for SAP_COM_0901 back to overview Scope Details Aliases - Type string Mandatory yes Default $PIPER_username (if set) Secret yes Configuration scope \u2612 parameter \u2610 general \u2612 steps \u2612 stages Resource references Jenkins credential id: id: abapCredentialsId reference to: username","title":"username"},{"location":"steps/abapEnvironmentRunATCCheck/#verbose","text":"verbose output back to overview Scope Details Aliases - Type bool Mandatory no Default false Possible values - true - false Secret no Configuration scope \u2612 parameter \u2612 general \u2612 steps \u2612 stages Resource references none","title":"verbose"},{"location":"steps/abapEnvironmentRunATCCheck/#abapcredentialsid","text":"Jenkins credentials ID containing user and password to authenticate to the Cloud Platform ABAP Environment system or the Cloud Foundry API back to overview Scope Details Aliases cfCredentialsId Type string Configuration scope \u2612 parameter \u2612 general \u2612 steps \u2612 stages","title":"abapCredentialsId"},{"location":"steps/abapEnvironmentRunATCCheck/#examples","text":"","title":"Examples"},{"location":"steps/abapEnvironmentRunATCCheck/#configuration-in-the-configyml","text":"The recommended way to configure your pipeline is via the config.yml file. In this case, calling the step in the Jenkinsfile is reduced to one line: abapEnvironmentRunATCCheck script: this If you want to provide the host and credentials of the Communication Arrangement directly, the configuration could look as follows: steps : abapEnvironmentRunATCCheck : abapCredentialsId : 'abapCredentialsId' , host : 'https://myABAPendpoint.com' , atcConfig : 'atcconfig.yml' ,","title":"Configuration in the config.yml"},{"location":"steps/abapEnvironmentRunATCCheck/#atc-run-via-cloud-foundry-service-key-example-in-jenkinsfile","text":"The following example triggers an ATC run via reading the Service Key of an ABAP instance in Cloud Foundry. You can store the credentials in Jenkins and use the cfCredentialsId parameter to authenticate to Cloud Foundry. The username and password to authenticate to ABAP system will then be read from the Cloud Foundry service key that is bound to the ABAP instance. This can be done accordingly: abapEnvironmentRunATCCheck ( cfApiEndpoint : 'https://test.server.com' , cfOrg : 'cfOrg' , cfSpace: 'cfSpace' , cfServiceInstance: 'myServiceInstance' , cfServiceKeyName: 'myServiceKey' , abapCredentialsId: 'cfCredentialsId' , atcConfig: 'atcconfig.yml' , script: this , ) To trigger the ATC run an ATC config file atcconfig.yml will be needed. Check section 'ATC config file example' for more information.","title":"ATC run via Cloud Foundry Service Key example in Jenkinsfile"},{"location":"steps/abapEnvironmentRunATCCheck/#atc-run-via-direct-abap-endpoint-configuration-in-jenkinsfile","text":"This example triggers an ATC run directly on the ABAP endpoint. In order to trigger the ATC run you have to pass the username and password for authentication to the ABAP endpoint via parameters as well as the ABAP endpoint/host. You can store the credentials in Jenkins and use the abapCredentialsId parameter to authenticate to the ABAP endpoint/host. This must be configured as following: abapEnvironmentRunATCCheck ( abapCredentialsId: 'abapCredentialsId' , host: 'https://myABAPendpoint.com' , atcConfig: 'atcconfig.yml' , script: this , ) To trigger the ATC run an ATC config file atcconfig.yml will be needed. Check section 'ATC config file example' for more information.","title":"ATC run via direct ABAP endpoint configuration in Jenkinsfile"},{"location":"steps/abapEnvironmentRunATCCheck/#atc-config-file-example","text":"Providing a specifc ATC configuration is optional. If you are using a repositories.yml file for the Clone stage of the ABAP environment pipeline, a default ATC configuration will be derived if no explicit ATC configuration is available. The following section contains an example of an atcconfig.yml file. This file must be stored in the same Git folder where the Jenkinsfile is stored to run the pipeline. This folder must be taken as a SCM in the Jenkins pipeline to run the pipeline. You can specify a list of packages and/or software components to be checked. This must be in the same format as below example for a atcconfig.yml file. In case subpackages shall be included in the checks you can use packagetrees. Please note that if you chose to provide both packages and software components to be checked with the atcconfig.yml file, the set of packages and the set of software components will be combinend by the API using a logical AND operation. Therefore, we advise to specify either the software components or packages. Additionally, if you don't specify a dedicated ATC check variant to be used, the ABAP_CLOUD_DEVELOPMENT_DEFAULT variant will be used as default. For more information on how to configure a check variant for an ATC run please check the last example on this page. See below example for an atcconfig.yml file with both packages and software components to be checked: objectset : softwarecomponents : - name : TestComponent - name : TestComponent2 packages : - name : TestPackage packagetrees : - name : TestPackageWithSubpackages The following example of an atcconfig.yml file that only contains packages and packagetrees to be checked: objectset : packages : - name : TestPackage packagetrees : - name : TestPackageWithSubpackages The following example of an atcconfig.yml file that only contains software components to be checked: objectset : softwarecomponents : - name : TestComponent - name : TestComponent2 The following is an example of an atcconfig.yml file that supports the check variant and configuration ATC options and containing the software components TestComponent and TestComponent2 as Objectset. checkvariant : \"TestCheckVariant\" configuration : \"TestConfiguration\" objectset : softwarecomponents : - name : TestComponent - name : TestComponent2 The following example of an atcconfig.yml file contains all possible properties of the Multi Property Set that can be used. Please take note that this is not the reccommended approach. If you want to check packages or software components please use the two above examples. The usage of the Multi Property Set is only reccommended for ATC runs that require these rules for the test execution. There is no official documentation on the usage of the Multi Property Set. checkvariant : \"TestCheckVariant\" configuration : \"TestConfiguration\" objectset : type : multiPropertySet multipropertyset : owners : - name : demoOwner softwarecomponents : - name : demoSoftwareComponent versions : - value : ACTIVE packages : - name : demoPackage packagetrees : - name : TestPackageWithSubpackages objectnamepatterns : - value : 'ZCL_*' languages : - value : EN sourcesystems : - name : H01 objecttypes : - name : CLAS objecttypegroups : - name : CLAS releasestates : - value : RELEASED applicationcomponents : - name : demoApplicationComponent transportlayers : - name : H01","title":"ATC config file example"},{"location":"steps/abapEnvironmentRunAUnitTest/","text":"abapEnvironmentRunAUnitTest \u00b6 Runs an AUnit Test Description \u00b6 This step is for triggering an AUnit test run on an SAP BTP ABAP Environment system. Please provide either of the following options: The host and credentials of the BTP ABAP Environment system itself. The credentials must be configured for the Communication Scenario SAP_COM_0735. The Cloud Foundry parameters (API endpoint, organization, space), credentials, the service instance for the ABAP service and the service key for the Communication Scenario SAP_COM_0735. Only provide one of those options with the respective credentials. If all values are provided, the direct communication (via host) has priority. Regardless of the option you chose, please make sure to provide the object set containing the objects that you want to be checked analog to the examples listed on this page. Usage \u00b6 We recommend to define values of step parameters via .pipeline/config.yml file . In this case, calling the step is essentially reduced to defining the step name. Calling the step can be done either in an orchestrator specific way (e.g. via a Jenkins library step) or on the command line. Jenkins Command Line library ( 'piper-lib-os' ) abapEnvironmentRunAUnitTest script: this piper abapEnvironmentRunAUnitTest !!! Currently the Object Set configuration is limited to the usage of Multi Property Sets. Please note that other sets besides the Multi Property Set will not be included in the ABAP Unit test runs. You can see an example of the Multi Property Sets with all configurable properties. However, we strongly reccommend to only specify packages and software components like in the first two examples of the section AUnit config file example . Prerequisites \u00b6 A SAP BTP, ABAP environment system is available. On this system, a Communication User , a Communication System and a Communication Arrangement is setup for the Communication Scenario \u201cSAP BTP, ABAP Environment - Software Component Test Integration (SAP_COM_0735)\u201c. This can be done manually through the respective applications on the SAP BTP, ABAP environment system or through creating a Service Key for the system on Cloud Foundry with the parameters {\u201cscenario_id\u201d: \u201cSAP_COM_0735\", \u201ctype\u201d: \u201cbasic\u201d}. In a pipeline, you can do this with the step cloudFoundryCreateServiceKey . You can either provide the ABAP endpoint configuration to directly trigger an AUnit run on the ABAP system or optionally provide the Cloud Foundry parameters with your credentials to read a Service Key of a SAP BTP, ABAP environment system in Cloud Foundry that contains all the details of the ABAP endpoint to trigger an AUnit run. Regardless if you chose an ABAP endpoint directly or reading a Cloud Foundry Service Key, you have to provide the object set containing the objects you want to be checked in an AUnit run in a .yml or .yaml file. This file must be stored in the same folder as the Jenkinsfile defining the pipeline. Make sure that the objects contained in the object set are present in the configured system in order to run the check. Please make sure that you have created or pulled the respective software components and/or packages including the test classes and objects in the SAP BTP, ABAP environment system, that should be checked. Parameters \u00b6 Overview - Step \u00b6 Name Mandatory Additional information password (yes) pass via ENV or Jenkins credentials ( abapCredentialsId ) script (yes) reference to Jenkins main pipeline script username (yes) pass via ENV or Jenkins credentials ( abapCredentialsId ) aUnitConfig no aUnitResultsFileName no cfApiEndpoint no cfOrg no cfServiceInstance no cfServiceKeyName no cfSpace no generateHTML no host no repositories no verbose no activates debug output Overview - Execution Environment \u00b6 Orchestrator-specific only These parameters are relevant for orchestrator usage and not considered when using the command line option. Name Mandatory Additional information containerCommand no containerShell no dockerEnvVars no dockerImage no dockerName no dockerOptions no dockerPullImage no dockerVolumeBind no dockerWorkspace no Details \u00b6 aUnitConfig \u00b6 Path to a YAML configuration file for the object set to be checked during the AUnit test run back to overview Scope Details Aliases - Type string Mandatory no Default $PIPER_aUnitConfig (if set) Secret no Configuration scope \u2612 parameter \u2610 general \u2612 steps \u2612 stages Resource references none aUnitResultsFileName \u00b6 Specifies output file name for the results from the AUnit run. back to overview Scope Details Aliases - Type string Mandatory no Default AUnitResults.xml Secret no Configuration scope \u2612 parameter \u2610 general \u2612 steps \u2612 stages Resource references none cfApiEndpoint \u00b6 Cloud Foundry API endpoint back to overview Scope Details Aliases cloudFoundry/apiEndpoint Type string Mandatory no Default $PIPER_cfApiEndpoint (if set) Secret no Configuration scope \u2612 parameter \u2612 general \u2612 steps \u2612 stages Resource references none cfOrg \u00b6 Cloud Foundry org back to overview Scope Details Aliases cloudFoundry/org Type string Mandatory no Default $PIPER_cfOrg (if set) Secret no Configuration scope \u2612 parameter \u2612 general \u2612 steps \u2612 stages Resource references none cfServiceInstance \u00b6 Parameter of ServiceInstance Name to delete Cloud Foundry Service back to overview Scope Details Aliases cloudFoundry/serviceInstance Type string Mandatory no Default $PIPER_cfServiceInstance (if set) Secret no Configuration scope \u2612 parameter \u2612 general \u2612 steps \u2612 stages Resource references none cfServiceKeyName \u00b6 Parameter of Cloud Foundry Service Key to be created back to overview Scope Details Aliases - cloudFoundry/serviceKey - cloudFoundry/serviceKeyName - cfServiceKey Type string Mandatory no Default $PIPER_cfServiceKeyName (if set) Secret no Configuration scope \u2612 parameter \u2612 general \u2612 steps \u2612 stages Resource references none cfSpace \u00b6 Cloud Foundry Space back to overview Scope Details Aliases cloudFoundry/space Type string Mandatory no Default $PIPER_cfSpace (if set) Secret no Configuration scope \u2612 parameter \u2612 general \u2612 steps \u2612 stages Resource references none containerCommand \u00b6 Jenkins-specific: Used for proper environment setup. Kubernetes only: Allows to specify start command for container created with dockerImage parameter to overwrite Piper default (/usr/bin/tail -f /dev/null). back to overview Scope Details Aliases - Type string Mandatory no Default Secret no Configuration scope \u2612 parameter \u2612 general \u2612 steps \u2612 stages Resource references none containerShell \u00b6 Jenkins-specific: Used for proper environment setup. Allows to specify the shell to be executed for container with containerName. back to overview Scope Details Aliases - Type string Mandatory no Default Secret no Configuration scope \u2612 parameter \u2612 general \u2612 steps \u2612 stages Resource references none dockerEnvVars \u00b6 Environment variables to set in the container, e.g. [http_proxy: \"proxy:8080\"]. back to overview Scope Details Aliases - Type map[string]string Mandatory no Default Secret no Configuration scope \u2612 parameter \u2612 general \u2612 steps \u2612 stages Resource references none dockerImage \u00b6 Name of the docker image that should be used. If empty, Docker is not used and the command is executed directly on the Jenkins system. back to overview Scope Details Aliases - Type string Mandatory no Default ppiper/cf-cli:latest Secret no Configuration scope \u2612 parameter \u2612 general \u2612 steps \u2612 stages Resource references none dockerName \u00b6 Kubernetes only: Name of the container launching dockerImage. SideCar only: Name of the container in local network. back to overview Scope Details Aliases - Type string Mandatory no Default cf Secret no Configuration scope \u2612 parameter \u2612 general \u2612 steps \u2612 stages Resource references none dockerOptions \u00b6 Docker options to be set when starting the container. back to overview Scope Details Aliases - Type []string Mandatory no Default Secret no Configuration scope \u2612 parameter \u2612 general \u2612 steps \u2612 stages Resource references none dockerPullImage \u00b6 Set this to 'false' to bypass a docker image pull. Useful during development process. Allows testing of images which are available in the local registry only. back to overview Scope Details Aliases - Type bool Mandatory no Default true Possible values - true - false Secret no Configuration scope \u2612 parameter \u2612 general \u2612 steps \u2612 stages Resource references none dockerVolumeBind \u00b6 Jenkins-specific: Used for proper environment setup. Volumes that should be mounted into the docker container. back to overview Scope Details Aliases - Type map[string]string Mandatory no Default Secret no Configuration scope \u2612 parameter \u2612 general \u2612 steps \u2612 stages Resource references none dockerWorkspace \u00b6 Jenkins-specific: Used for proper environment setup. Kubernetes only: Specifies a dedicated user home directory for the container which will be passed as value for environment variable HOME . back to overview Scope Details Aliases - Type string Mandatory no Default Secret no Configuration scope \u2612 parameter \u2612 general \u2612 steps \u2612 stages Resource references none generateHTML \u00b6 Specifies whether the AUnit results should also be generated as an HTML document back to overview Scope Details Aliases - Type bool Mandatory no Default false Possible values - true - false Secret no Configuration scope \u2612 parameter \u2612 general \u2612 steps \u2612 stages Resource references none host \u00b6 Specifies the host address of the SAP BTP ABAP Environment system back to overview Scope Details Aliases - Type string Mandatory no Default $PIPER_host (if set) Secret no Configuration scope \u2612 parameter \u2612 general \u2612 steps \u2612 stages Resource references none password \u00b6 Password for either the Cloud Foundry API or the Communication Arrangement for SAP_COM_0735 back to overview Scope Details Aliases - Type string Mandatory yes Default $PIPER_password (if set) Secret yes Configuration scope \u2612 parameter \u2610 general \u2612 steps \u2612 stages Resource references Jenkins credential id: id: abapCredentialsId reference to: password repositories \u00b6 Specifies a YAML file containing the repositories configuration back to overview Scope Details Aliases - Type string Mandatory no Default $PIPER_repositories (if set) Secret no Configuration scope \u2612 parameter \u2612 general \u2612 steps \u2612 stages Resource references none script \u00b6 The common script environment of the Jenkinsfile running. Typically the reference to the script calling the pipeline step is provided with the this parameter, as in script: this . This allows the function to access the commonPipelineEnvironment for retrieving, e.g. configuration parameters. back to overview Scope Details Aliases - Type Jenkins Script Mandatory yes Default Secret no Configuration scope \u2610 parameter \u2610 general \u2610 steps \u2610 stages Resource references none username \u00b6 User for either the Cloud Foundry API or the Communication Arrangement for SAP_COM_0735 back to overview Scope Details Aliases - Type string Mandatory yes Default $PIPER_username (if set) Secret yes Configuration scope \u2612 parameter \u2610 general \u2612 steps \u2612 stages Resource references Jenkins credential id: id: abapCredentialsId reference to: username verbose \u00b6 verbose output back to overview Scope Details Aliases - Type bool Mandatory no Default false Possible values - true - false Secret no Configuration scope \u2612 parameter \u2612 general \u2612 steps \u2612 stages Resource references none abapCredentialsId \u00b6 Jenkins credentials ID containing user and password to authenticate to the BTP ABAP Environment system or the Cloud Foundry API back to overview Scope Details Aliases cfCredentialsId Type string Configuration scope \u2612 parameter \u2612 general \u2612 steps \u2612 stages Examples \u00b6 AUnit test run via direct ABAP endpoint configuration in Jenkinsfile \u00b6 This example triggers an AUnit test run directly on the ABAP endpoint. In order to trigger the AUnit test run you have to pass the username and password for authentication to the ABAP endpoint via parameters as well as the ABAP endpoint/host. You can store the credentials in Jenkins and use the abapCredentialsId parameter to authenticate to the ABAP endpoint/host. This must be configured as following: abapEnvironmentRunAUnitTest ( abapCredentialsId: 'abapCredentialsId' , host: 'https://myABAPendpoint.com' , aUnitConfig: 'aUnitConfig.yml' , script: this , ) To trigger the AUnit test run an AUnit config file aUnitConfig.yml will be needed. Check the section 'AUnit config file example' for more information. AUnit test run via Cloud Foundry Service Key example in Jenkinsfile \u00b6 The following example triggers an AUnit test run via reading the Service Key of an ABAP instance in Cloud Foundry. You can store the credentials in Jenkins and use the cfCredentialsId parameter to authenticate to Cloud Foundry. The username and password to authenticate to ABAP system will then be read from the Cloud Foundry Service Key that is bound to the ABAP instance. This can be done accordingly: abapEnvironmentRunAUnitTest ( cfApiEndpoint: 'https://test.server.com' , cfOrg: 'cfOrg' , cfSpace: 'cfSpace' , cfServiceInstance: 'myServiceInstance' , cfServiceKeyName: 'myServiceKey' , abapCredentialsId: 'cfCredentialsId' , aUnitConfig: 'aUnitConfig.yml' , script: this , ) To trigger the AUnit test run an AUnit config file aUnitConfig.yml will be needed. Check the section 'AUnit config file example' for more information. AUnit test run via direct ABAP endpoint configuration in Jenkinsfile \u00b6 This example triggers an AUnit run directly on the ABAP endpoint. In order to trigger the AUnit run you have to pass the username and password for authentication to the ABAP endpoint via parameters as well as the ABAP endpoint/host. You can store the credentials in Jenkins and use the abapCredentialsId parameter to authenticate to the ABAP endpoint/host. This must be configured as following: abapEnvironmentRunAUnitTest ( abapCredentialsId: 'abapCredentialsId' , host: 'https://myABAPendpoint.com' , aUnitConfig: 'aUnitConfig.yml' , script: this , ) To trigger the AUnit run an AUnit config file aUnitConfig.yml will be needed. Check section 'AUnit config file example' for more information. AUnit config file example \u00b6 Providing a specifc AUnit configuration is optional. If you are using a repositories.yml file for the Clone stage of the ABAP environment pipeline, a default AUnit configuration will be derived if no explicit AUnit configuration is available. The following section contains an example of an aUnitConfig.yml file. This file must be stored in the same Git folder where the Jenkinsfile is stored to run the pipeline. This repository containing the Jenkinsfile must be taken as a SCM in the Jenkins pipeline to run the pipeline. You can specify a Multi Property Set containing multiple properties that should be checked. Each property that is specified in the Multi Property Set acts like an additional rule. This means if you specify e.g. a Multi Property Set containing the owner and package properties that an ABAP Unit test run will be started testing all objects belonging to this owner inside of the given package. If you additionally define the Version to be ACTIVE for the ABAP Unit test run inside of the Multi Property Set, only objects belonging to this owner which are active inside of the package would be tested. This must be in the same format as below examples for a aUnitConfig.yml file. Note that if you want to check complete software components we recommend to use the softwareComponent property over the package property. See below example for an aUnitConfig.yml file containing a minimal configuration for the software component /DMO/SWC to be checked: title : My AUnit run context : My unit tests objectset : softwarecomponents : - name : /DMO/SWC See below example for an aUnitConfig.yml file with the configured options containing the package Z_TEST_PACKAGE to be checked: title : My AUnit run context : My unit tests objectset : packages : - name : Z_TEST_PACKAGE The following example of an aUnitConfig.yml file containing the software component Z_TESTSC and shows the available options: title : My AUnit run context : My unit tests options : measurements : none scope : ownTests : true foreignTests : true riskLevel : harmless : true dangerous : true critical : true duration : short : true medium : true long : true objectset : softwarecomponents : - name : Z_TESTSC The following example of an aUnitConfig.yml file contains all possible properties of the Multi Property Set that can be used. Please take note that this is not the reccommended approach. If you want to check packages or software components please use the two above examples. The usage of the Multi Property Set is only reccommended for ABAP Unit tests that require these rules for the test execution. There is no official documentation on the usage of the Multi Property Set. title : My AUnit run context : My unit tests options : measurements : none scope : ownTests : true foreignTests : true riskLevel : harmless : true dangerous : true critical : true duration : short : true medium : true long : true objectset : type : multiPropertySet multipropertyset : owners : - name : demoOwner softwarecomponents : - name : demoSoftwareComponent versions : - value : ACTIVE packages : - name : demoPackage objectnamepatterns : - value : 'ZCL_*' languages : - value : EN sourcesystems : - name : H01 objecttypes : - name : CLAS objecttypegroups : - name : CLAS releasestates : - value : RELEASED applicationcomponents : - name : demoApplicationComponent transportlayers : - name : H01","title":"abapEnvironmentRunAUnitTest"},{"location":"steps/abapEnvironmentRunAUnitTest/#abapenvironmentrunaunittest","text":"Runs an AUnit Test","title":"abapEnvironmentRunAUnitTest"},{"location":"steps/abapEnvironmentRunAUnitTest/#description","text":"This step is for triggering an AUnit test run on an SAP BTP ABAP Environment system. Please provide either of the following options: The host and credentials of the BTP ABAP Environment system itself. The credentials must be configured for the Communication Scenario SAP_COM_0735. The Cloud Foundry parameters (API endpoint, organization, space), credentials, the service instance for the ABAP service and the service key for the Communication Scenario SAP_COM_0735. Only provide one of those options with the respective credentials. If all values are provided, the direct communication (via host) has priority. Regardless of the option you chose, please make sure to provide the object set containing the objects that you want to be checked analog to the examples listed on this page.","title":"Description"},{"location":"steps/abapEnvironmentRunAUnitTest/#usage","text":"We recommend to define values of step parameters via .pipeline/config.yml file . In this case, calling the step is essentially reduced to defining the step name. Calling the step can be done either in an orchestrator specific way (e.g. via a Jenkins library step) or on the command line. Jenkins Command Line library ( 'piper-lib-os' ) abapEnvironmentRunAUnitTest script: this piper abapEnvironmentRunAUnitTest !!! Currently the Object Set configuration is limited to the usage of Multi Property Sets. Please note that other sets besides the Multi Property Set will not be included in the ABAP Unit test runs. You can see an example of the Multi Property Sets with all configurable properties. However, we strongly reccommend to only specify packages and software components like in the first two examples of the section AUnit config file example .","title":"Usage"},{"location":"steps/abapEnvironmentRunAUnitTest/#prerequisites","text":"A SAP BTP, ABAP environment system is available. On this system, a Communication User , a Communication System and a Communication Arrangement is setup for the Communication Scenario \u201cSAP BTP, ABAP Environment - Software Component Test Integration (SAP_COM_0735)\u201c. This can be done manually through the respective applications on the SAP BTP, ABAP environment system or through creating a Service Key for the system on Cloud Foundry with the parameters {\u201cscenario_id\u201d: \u201cSAP_COM_0735\", \u201ctype\u201d: \u201cbasic\u201d}. In a pipeline, you can do this with the step cloudFoundryCreateServiceKey . You can either provide the ABAP endpoint configuration to directly trigger an AUnit run on the ABAP system or optionally provide the Cloud Foundry parameters with your credentials to read a Service Key of a SAP BTP, ABAP environment system in Cloud Foundry that contains all the details of the ABAP endpoint to trigger an AUnit run. Regardless if you chose an ABAP endpoint directly or reading a Cloud Foundry Service Key, you have to provide the object set containing the objects you want to be checked in an AUnit run in a .yml or .yaml file. This file must be stored in the same folder as the Jenkinsfile defining the pipeline. Make sure that the objects contained in the object set are present in the configured system in order to run the check. Please make sure that you have created or pulled the respective software components and/or packages including the test classes and objects in the SAP BTP, ABAP environment system, that should be checked.","title":"Prerequisites"},{"location":"steps/abapEnvironmentRunAUnitTest/#parameters","text":"","title":"Parameters"},{"location":"steps/abapEnvironmentRunAUnitTest/#overview-step","text":"Name Mandatory Additional information password (yes) pass via ENV or Jenkins credentials ( abapCredentialsId ) script (yes) reference to Jenkins main pipeline script username (yes) pass via ENV or Jenkins credentials ( abapCredentialsId ) aUnitConfig no aUnitResultsFileName no cfApiEndpoint no cfOrg no cfServiceInstance no cfServiceKeyName no cfSpace no generateHTML no host no repositories no verbose no activates debug output","title":"Overview - Step"},{"location":"steps/abapEnvironmentRunAUnitTest/#overview-execution-environment","text":"Orchestrator-specific only These parameters are relevant for orchestrator usage and not considered when using the command line option. Name Mandatory Additional information containerCommand no containerShell no dockerEnvVars no dockerImage no dockerName no dockerOptions no dockerPullImage no dockerVolumeBind no dockerWorkspace no","title":"Overview - Execution Environment"},{"location":"steps/abapEnvironmentRunAUnitTest/#details","text":"","title":"Details"},{"location":"steps/abapEnvironmentRunAUnitTest/#aunitconfig","text":"Path to a YAML configuration file for the object set to be checked during the AUnit test run back to overview Scope Details Aliases - Type string Mandatory no Default $PIPER_aUnitConfig (if set) Secret no Configuration scope \u2612 parameter \u2610 general \u2612 steps \u2612 stages Resource references none","title":"aUnitConfig"},{"location":"steps/abapEnvironmentRunAUnitTest/#aunitresultsfilename","text":"Specifies output file name for the results from the AUnit run. back to overview Scope Details Aliases - Type string Mandatory no Default AUnitResults.xml Secret no Configuration scope \u2612 parameter \u2610 general \u2612 steps \u2612 stages Resource references none","title":"aUnitResultsFileName"},{"location":"steps/abapEnvironmentRunAUnitTest/#cfapiendpoint","text":"Cloud Foundry API endpoint back to overview Scope Details Aliases cloudFoundry/apiEndpoint Type string Mandatory no Default $PIPER_cfApiEndpoint (if set) Secret no Configuration scope \u2612 parameter \u2612 general \u2612 steps \u2612 stages Resource references none","title":"cfApiEndpoint"},{"location":"steps/abapEnvironmentRunAUnitTest/#cforg","text":"Cloud Foundry org back to overview Scope Details Aliases cloudFoundry/org Type string Mandatory no Default $PIPER_cfOrg (if set) Secret no Configuration scope \u2612 parameter \u2612 general \u2612 steps \u2612 stages Resource references none","title":"cfOrg"},{"location":"steps/abapEnvironmentRunAUnitTest/#cfserviceinstance","text":"Parameter of ServiceInstance Name to delete Cloud Foundry Service back to overview Scope Details Aliases cloudFoundry/serviceInstance Type string Mandatory no Default $PIPER_cfServiceInstance (if set) Secret no Configuration scope \u2612 parameter \u2612 general \u2612 steps \u2612 stages Resource references none","title":"cfServiceInstance"},{"location":"steps/abapEnvironmentRunAUnitTest/#cfservicekeyname","text":"Parameter of Cloud Foundry Service Key to be created back to overview Scope Details Aliases - cloudFoundry/serviceKey - cloudFoundry/serviceKeyName - cfServiceKey Type string Mandatory no Default $PIPER_cfServiceKeyName (if set) Secret no Configuration scope \u2612 parameter \u2612 general \u2612 steps \u2612 stages Resource references none","title":"cfServiceKeyName"},{"location":"steps/abapEnvironmentRunAUnitTest/#cfspace","text":"Cloud Foundry Space back to overview Scope Details Aliases cloudFoundry/space Type string Mandatory no Default $PIPER_cfSpace (if set) Secret no Configuration scope \u2612 parameter \u2612 general \u2612 steps \u2612 stages Resource references none","title":"cfSpace"},{"location":"steps/abapEnvironmentRunAUnitTest/#containercommand","text":"Jenkins-specific: Used for proper environment setup. Kubernetes only: Allows to specify start command for container created with dockerImage parameter to overwrite Piper default (/usr/bin/tail -f /dev/null). back to overview Scope Details Aliases - Type string Mandatory no Default Secret no Configuration scope \u2612 parameter \u2612 general \u2612 steps \u2612 stages Resource references none","title":"containerCommand"},{"location":"steps/abapEnvironmentRunAUnitTest/#containershell","text":"Jenkins-specific: Used for proper environment setup. Allows to specify the shell to be executed for container with containerName. back to overview Scope Details Aliases - Type string Mandatory no Default Secret no Configuration scope \u2612 parameter \u2612 general \u2612 steps \u2612 stages Resource references none","title":"containerShell"},{"location":"steps/abapEnvironmentRunAUnitTest/#dockerenvvars","text":"Environment variables to set in the container, e.g. [http_proxy: \"proxy:8080\"]. back to overview Scope Details Aliases - Type map[string]string Mandatory no Default Secret no Configuration scope \u2612 parameter \u2612 general \u2612 steps \u2612 stages Resource references none","title":"dockerEnvVars"},{"location":"steps/abapEnvironmentRunAUnitTest/#dockerimage","text":"Name of the docker image that should be used. If empty, Docker is not used and the command is executed directly on the Jenkins system. back to overview Scope Details Aliases - Type string Mandatory no Default ppiper/cf-cli:latest Secret no Configuration scope \u2612 parameter \u2612 general \u2612 steps \u2612 stages Resource references none","title":"dockerImage"},{"location":"steps/abapEnvironmentRunAUnitTest/#dockername","text":"Kubernetes only: Name of the container launching dockerImage. SideCar only: Name of the container in local network. back to overview Scope Details Aliases - Type string Mandatory no Default cf Secret no Configuration scope \u2612 parameter \u2612 general \u2612 steps \u2612 stages Resource references none","title":"dockerName"},{"location":"steps/abapEnvironmentRunAUnitTest/#dockeroptions","text":"Docker options to be set when starting the container. back to overview Scope Details Aliases - Type []string Mandatory no Default Secret no Configuration scope \u2612 parameter \u2612 general \u2612 steps \u2612 stages Resource references none","title":"dockerOptions"},{"location":"steps/abapEnvironmentRunAUnitTest/#dockerpullimage","text":"Set this to 'false' to bypass a docker image pull. Useful during development process. Allows testing of images which are available in the local registry only. back to overview Scope Details Aliases - Type bool Mandatory no Default true Possible values - true - false Secret no Configuration scope \u2612 parameter \u2612 general \u2612 steps \u2612 stages Resource references none","title":"dockerPullImage"},{"location":"steps/abapEnvironmentRunAUnitTest/#dockervolumebind","text":"Jenkins-specific: Used for proper environment setup. Volumes that should be mounted into the docker container. back to overview Scope Details Aliases - Type map[string]string Mandatory no Default Secret no Configuration scope \u2612 parameter \u2612 general \u2612 steps \u2612 stages Resource references none","title":"dockerVolumeBind"},{"location":"steps/abapEnvironmentRunAUnitTest/#dockerworkspace","text":"Jenkins-specific: Used for proper environment setup. Kubernetes only: Specifies a dedicated user home directory for the container which will be passed as value for environment variable HOME . back to overview Scope Details Aliases - Type string Mandatory no Default Secret no Configuration scope \u2612 parameter \u2612 general \u2612 steps \u2612 stages Resource references none","title":"dockerWorkspace"},{"location":"steps/abapEnvironmentRunAUnitTest/#generatehtml","text":"Specifies whether the AUnit results should also be generated as an HTML document back to overview Scope Details Aliases - Type bool Mandatory no Default false Possible values - true - false Secret no Configuration scope \u2612 parameter \u2612 general \u2612 steps \u2612 stages Resource references none","title":"generateHTML"},{"location":"steps/abapEnvironmentRunAUnitTest/#host","text":"Specifies the host address of the SAP BTP ABAP Environment system back to overview Scope Details Aliases - Type string Mandatory no Default $PIPER_host (if set) Secret no Configuration scope \u2612 parameter \u2612 general \u2612 steps \u2612 stages Resource references none","title":"host"},{"location":"steps/abapEnvironmentRunAUnitTest/#password","text":"Password for either the Cloud Foundry API or the Communication Arrangement for SAP_COM_0735 back to overview Scope Details Aliases - Type string Mandatory yes Default $PIPER_password (if set) Secret yes Configuration scope \u2612 parameter \u2610 general \u2612 steps \u2612 stages Resource references Jenkins credential id: id: abapCredentialsId reference to: password","title":"password"},{"location":"steps/abapEnvironmentRunAUnitTest/#repositories","text":"Specifies a YAML file containing the repositories configuration back to overview Scope Details Aliases - Type string Mandatory no Default $PIPER_repositories (if set) Secret no Configuration scope \u2612 parameter \u2612 general \u2612 steps \u2612 stages Resource references none","title":"repositories"},{"location":"steps/abapEnvironmentRunAUnitTest/#script","text":"The common script environment of the Jenkinsfile running. Typically the reference to the script calling the pipeline step is provided with the this parameter, as in script: this . This allows the function to access the commonPipelineEnvironment for retrieving, e.g. configuration parameters. back to overview Scope Details Aliases - Type Jenkins Script Mandatory yes Default Secret no Configuration scope \u2610 parameter \u2610 general \u2610 steps \u2610 stages Resource references none","title":"script"},{"location":"steps/abapEnvironmentRunAUnitTest/#username","text":"User for either the Cloud Foundry API or the Communication Arrangement for SAP_COM_0735 back to overview Scope Details Aliases - Type string Mandatory yes Default $PIPER_username (if set) Secret yes Configuration scope \u2612 parameter \u2610 general \u2612 steps \u2612 stages Resource references Jenkins credential id: id: abapCredentialsId reference to: username","title":"username"},{"location":"steps/abapEnvironmentRunAUnitTest/#verbose","text":"verbose output back to overview Scope Details Aliases - Type bool Mandatory no Default false Possible values - true - false Secret no Configuration scope \u2612 parameter \u2612 general \u2612 steps \u2612 stages Resource references none","title":"verbose"},{"location":"steps/abapEnvironmentRunAUnitTest/#abapcredentialsid","text":"Jenkins credentials ID containing user and password to authenticate to the BTP ABAP Environment system or the Cloud Foundry API back to overview Scope Details Aliases cfCredentialsId Type string Configuration scope \u2612 parameter \u2612 general \u2612 steps \u2612 stages","title":"abapCredentialsId"},{"location":"steps/abapEnvironmentRunAUnitTest/#examples","text":"","title":"Examples"},{"location":"steps/abapEnvironmentRunAUnitTest/#aunit-test-run-via-direct-abap-endpoint-configuration-in-jenkinsfile","text":"This example triggers an AUnit test run directly on the ABAP endpoint. In order to trigger the AUnit test run you have to pass the username and password for authentication to the ABAP endpoint via parameters as well as the ABAP endpoint/host. You can store the credentials in Jenkins and use the abapCredentialsId parameter to authenticate to the ABAP endpoint/host. This must be configured as following: abapEnvironmentRunAUnitTest ( abapCredentialsId: 'abapCredentialsId' , host: 'https://myABAPendpoint.com' , aUnitConfig: 'aUnitConfig.yml' , script: this , ) To trigger the AUnit test run an AUnit config file aUnitConfig.yml will be needed. Check the section 'AUnit config file example' for more information.","title":"AUnit test run via direct ABAP endpoint configuration in Jenkinsfile"},{"location":"steps/abapEnvironmentRunAUnitTest/#aunit-test-run-via-cloud-foundry-service-key-example-in-jenkinsfile","text":"The following example triggers an AUnit test run via reading the Service Key of an ABAP instance in Cloud Foundry. You can store the credentials in Jenkins and use the cfCredentialsId parameter to authenticate to Cloud Foundry. The username and password to authenticate to ABAP system will then be read from the Cloud Foundry Service Key that is bound to the ABAP instance. This can be done accordingly: abapEnvironmentRunAUnitTest ( cfApiEndpoint: 'https://test.server.com' , cfOrg: 'cfOrg' , cfSpace: 'cfSpace' , cfServiceInstance: 'myServiceInstance' , cfServiceKeyName: 'myServiceKey' , abapCredentialsId: 'cfCredentialsId' , aUnitConfig: 'aUnitConfig.yml' , script: this , ) To trigger the AUnit test run an AUnit config file aUnitConfig.yml will be needed. Check the section 'AUnit config file example' for more information.","title":"AUnit test run via Cloud Foundry Service Key example in Jenkinsfile"},{"location":"steps/abapEnvironmentRunAUnitTest/#aunit-test-run-via-direct-abap-endpoint-configuration-in-jenkinsfile_1","text":"This example triggers an AUnit run directly on the ABAP endpoint. In order to trigger the AUnit run you have to pass the username and password for authentication to the ABAP endpoint via parameters as well as the ABAP endpoint/host. You can store the credentials in Jenkins and use the abapCredentialsId parameter to authenticate to the ABAP endpoint/host. This must be configured as following: abapEnvironmentRunAUnitTest ( abapCredentialsId: 'abapCredentialsId' , host: 'https://myABAPendpoint.com' , aUnitConfig: 'aUnitConfig.yml' , script: this , ) To trigger the AUnit run an AUnit config file aUnitConfig.yml will be needed. Check section 'AUnit config file example' for more information.","title":"AUnit test run via direct ABAP endpoint configuration in Jenkinsfile"},{"location":"steps/abapEnvironmentRunAUnitTest/#aunit-config-file-example","text":"Providing a specifc AUnit configuration is optional. If you are using a repositories.yml file for the Clone stage of the ABAP environment pipeline, a default AUnit configuration will be derived if no explicit AUnit configuration is available. The following section contains an example of an aUnitConfig.yml file. This file must be stored in the same Git folder where the Jenkinsfile is stored to run the pipeline. This repository containing the Jenkinsfile must be taken as a SCM in the Jenkins pipeline to run the pipeline. You can specify a Multi Property Set containing multiple properties that should be checked. Each property that is specified in the Multi Property Set acts like an additional rule. This means if you specify e.g. a Multi Property Set containing the owner and package properties that an ABAP Unit test run will be started testing all objects belonging to this owner inside of the given package. If you additionally define the Version to be ACTIVE for the ABAP Unit test run inside of the Multi Property Set, only objects belonging to this owner which are active inside of the package would be tested. This must be in the same format as below examples for a aUnitConfig.yml file. Note that if you want to check complete software components we recommend to use the softwareComponent property over the package property. See below example for an aUnitConfig.yml file containing a minimal configuration for the software component /DMO/SWC to be checked: title : My AUnit run context : My unit tests objectset : softwarecomponents : - name : /DMO/SWC See below example for an aUnitConfig.yml file with the configured options containing the package Z_TEST_PACKAGE to be checked: title : My AUnit run context : My unit tests objectset : packages : - name : Z_TEST_PACKAGE The following example of an aUnitConfig.yml file containing the software component Z_TESTSC and shows the available options: title : My AUnit run context : My unit tests options : measurements : none scope : ownTests : true foreignTests : true riskLevel : harmless : true dangerous : true critical : true duration : short : true medium : true long : true objectset : softwarecomponents : - name : Z_TESTSC The following example of an aUnitConfig.yml file contains all possible properties of the Multi Property Set that can be used. Please take note that this is not the reccommended approach. If you want to check packages or software components please use the two above examples. The usage of the Multi Property Set is only reccommended for ABAP Unit tests that require these rules for the test execution. There is no official documentation on the usage of the Multi Property Set. title : My AUnit run context : My unit tests options : measurements : none scope : ownTests : true foreignTests : true riskLevel : harmless : true dangerous : true critical : true duration : short : true medium : true long : true objectset : type : multiPropertySet multipropertyset : owners : - name : demoOwner softwarecomponents : - name : demoSoftwareComponent versions : - value : ACTIVE packages : - name : demoPackage objectnamepatterns : - value : 'ZCL_*' languages : - value : EN sourcesystems : - name : H01 objecttypes : - name : CLAS objecttypegroups : - name : CLAS releasestates : - value : RELEASED applicationcomponents : - name : demoApplicationComponent transportlayers : - name : H01","title":"AUnit config file example"},{"location":"steps/abapLandscapePortalUpdateAddOnProduct/","text":"abapLandscapePortalUpdateAddOnProduct \u00b6 Update the AddOn product in SAP BTP ABAP Environment system of Landscape Portal Description \u00b6 This step describes the AddOn product update in SAP BTP ABAP Environment system of Landscape Portal Usage \u00b6 We recommend to define values of step parameters via .pipeline/config.yml file . In this case, calling the step is essentially reduced to defining the step name. Calling the step can be done either in an orchestrator specific way (e.g. via a Jenkins library step) or on the command line. Jenkins Command Line library ( 'piper-lib-os' ) abapLandscapePortalUpdateAddOnProduct script: this piper abapLandscapePortalUpdateAddOnProduct Prerequisites \u00b6 Please make sure, that you are under Embedded Steampunk environment. Please make sure, that the service landscape-portal-api-for-s4hc with plan api was assigned as entitlement to the subaccount, where you are about to deploy addon product. Please make sure, that before deploying addon product, an instance of landscape-portal-api-for-s4hc (plan api) was created, and a service key with x509 authentication mechanism was created for the instance. The service key needs to be stored in the Jenkins Credentials Store. Please make sure, that the system to deploy addon product is active, and the descriptor file with deployment information is available. Parameters \u00b6 Overview - Step \u00b6 Name Mandatory Additional information abapSystemNumber yes landscapePortalAPIServiceKey (yes) pass via ENV or Jenkins credentials ( landscapePortalAPICredentialsId ) script (yes) reference to Jenkins main pipeline script addonDescriptorFileName no verbose no activates debug output Overview - Execution Environment \u00b6 Orchestrator-specific only These parameters are relevant for orchestrator usage and not considered when using the command line option. Name Mandatory Additional information Details \u00b6 abapSystemNumber \u00b6 System Number of the abap integration test system back to overview Scope Details Aliases - Type string Mandatory yes Default $PIPER_abapSystemNumber (if set) Secret no Configuration scope \u2612 parameter \u2610 general \u2612 steps \u2612 stages Resource references none addonDescriptorFileName \u00b6 File name of the YAML file which describes the Product Version and corresponding Software Component Versions back to overview Scope Details Aliases - Type string Mandatory no Default addon.yml Secret no Configuration scope \u2612 parameter \u2612 general \u2612 steps \u2612 stages Resource references none landscapePortalAPIServiceKey \u00b6 Service key JSON string to access the Landscape Portal Access API back to overview Scope Details Aliases - Type string Mandatory yes Default $PIPER_landscapePortalAPIServiceKey (if set) Secret yes Configuration scope \u2612 parameter \u2610 general \u2610 steps \u2610 stages Resource references Jenkins credential id: id: landscapePortalAPICredentialsId reference to: landscapePortalAPIServiceKey script \u00b6 The common script environment of the Jenkinsfile running. Typically the reference to the script calling the pipeline step is provided with the this parameter, as in script: this . This allows the function to access the commonPipelineEnvironment for retrieving, e.g. configuration parameters. back to overview Scope Details Aliases - Type Jenkins Script Mandatory yes Default Secret no Configuration scope \u2610 parameter \u2610 general \u2610 steps \u2610 stages Resource references none verbose \u00b6 verbose output back to overview Scope Details Aliases - Type bool Mandatory no Default false Possible values - true - false Secret no Configuration scope \u2612 parameter \u2612 general \u2612 steps \u2612 stages Resource references none landscapePortalAPICredentialsId \u00b6 Jenkins secret text credential ID containing the service key to access the Landscape Portal Access API back to overview Scope Details Aliases - Type string Configuration scope \u2612 parameter \u2612 general \u2612 steps \u2612 stages Example: Configuration in the config.yml \u00b6 The recommended way to configure your pipeline is via the config.yml file. In this case, calling the step in the Jenkinsfile is reduced to one line: abapLandscapePortalUpdateAddOnProduct script: this The configuration values for the addon update can be passed through the config.yml file: steps : abapLandscapePortalUpdateAddOnProduct : landscapePortalAPICredentialsId : 'landscapePortalAPICredentialsId' abapSystemNumber : 'abapSystemNumber' addonDescriptorFileName : 'addon.yml' addonDescriptor : 'addonDescriptor' Example: Configuration in the Jenkinsfile \u00b6 The step, including all parameters, can also be called directly from the Jenkinsfile. In the following example, a configuration file is used. abapLandscapePortalUpdateAddOnProduct ( script: this , landscapePortalAPICredentialsId: 'landscapePortalAPICredentialsId' abapSystemNumber: 'abapSystemNumber' addonDescriptorFileName: 'addon.yml' addonDescriptor: 'addonDescriptor' ) The file addon.yml would look like this: addonProduct : some-addon-product addonVersion : some-addon-version","title":"abapLandscapePortalUpdateAddOnProduct"},{"location":"steps/abapLandscapePortalUpdateAddOnProduct/#abaplandscapeportalupdateaddonproduct","text":"Update the AddOn product in SAP BTP ABAP Environment system of Landscape Portal","title":"abapLandscapePortalUpdateAddOnProduct"},{"location":"steps/abapLandscapePortalUpdateAddOnProduct/#description","text":"This step describes the AddOn product update in SAP BTP ABAP Environment system of Landscape Portal","title":"Description"},{"location":"steps/abapLandscapePortalUpdateAddOnProduct/#usage","text":"We recommend to define values of step parameters via .pipeline/config.yml file . In this case, calling the step is essentially reduced to defining the step name. Calling the step can be done either in an orchestrator specific way (e.g. via a Jenkins library step) or on the command line. Jenkins Command Line library ( 'piper-lib-os' ) abapLandscapePortalUpdateAddOnProduct script: this piper abapLandscapePortalUpdateAddOnProduct","title":"Usage"},{"location":"steps/abapLandscapePortalUpdateAddOnProduct/#prerequisites","text":"Please make sure, that you are under Embedded Steampunk environment. Please make sure, that the service landscape-portal-api-for-s4hc with plan api was assigned as entitlement to the subaccount, where you are about to deploy addon product. Please make sure, that before deploying addon product, an instance of landscape-portal-api-for-s4hc (plan api) was created, and a service key with x509 authentication mechanism was created for the instance. The service key needs to be stored in the Jenkins Credentials Store. Please make sure, that the system to deploy addon product is active, and the descriptor file with deployment information is available.","title":"Prerequisites"},{"location":"steps/abapLandscapePortalUpdateAddOnProduct/#parameters","text":"","title":"Parameters"},{"location":"steps/abapLandscapePortalUpdateAddOnProduct/#overview-step","text":"Name Mandatory Additional information abapSystemNumber yes landscapePortalAPIServiceKey (yes) pass via ENV or Jenkins credentials ( landscapePortalAPICredentialsId ) script (yes) reference to Jenkins main pipeline script addonDescriptorFileName no verbose no activates debug output","title":"Overview - Step"},{"location":"steps/abapLandscapePortalUpdateAddOnProduct/#overview-execution-environment","text":"Orchestrator-specific only These parameters are relevant for orchestrator usage and not considered when using the command line option. Name Mandatory Additional information","title":"Overview - Execution Environment"},{"location":"steps/abapLandscapePortalUpdateAddOnProduct/#details","text":"","title":"Details"},{"location":"steps/abapLandscapePortalUpdateAddOnProduct/#abapsystemnumber","text":"System Number of the abap integration test system back to overview Scope Details Aliases - Type string Mandatory yes Default $PIPER_abapSystemNumber (if set) Secret no Configuration scope \u2612 parameter \u2610 general \u2612 steps \u2612 stages Resource references none","title":"abapSystemNumber"},{"location":"steps/abapLandscapePortalUpdateAddOnProduct/#addondescriptorfilename","text":"File name of the YAML file which describes the Product Version and corresponding Software Component Versions back to overview Scope Details Aliases - Type string Mandatory no Default addon.yml Secret no Configuration scope \u2612 parameter \u2612 general \u2612 steps \u2612 stages Resource references none","title":"addonDescriptorFileName"},{"location":"steps/abapLandscapePortalUpdateAddOnProduct/#landscapeportalapiservicekey","text":"Service key JSON string to access the Landscape Portal Access API back to overview Scope Details Aliases - Type string Mandatory yes Default $PIPER_landscapePortalAPIServiceKey (if set) Secret yes Configuration scope \u2612 parameter \u2610 general \u2610 steps \u2610 stages Resource references Jenkins credential id: id: landscapePortalAPICredentialsId reference to: landscapePortalAPIServiceKey","title":"landscapePortalAPIServiceKey"},{"location":"steps/abapLandscapePortalUpdateAddOnProduct/#script","text":"The common script environment of the Jenkinsfile running. Typically the reference to the script calling the pipeline step is provided with the this parameter, as in script: this . This allows the function to access the commonPipelineEnvironment for retrieving, e.g. configuration parameters. back to overview Scope Details Aliases - Type Jenkins Script Mandatory yes Default Secret no Configuration scope \u2610 parameter \u2610 general \u2610 steps \u2610 stages Resource references none","title":"script"},{"location":"steps/abapLandscapePortalUpdateAddOnProduct/#verbose","text":"verbose output back to overview Scope Details Aliases - Type bool Mandatory no Default false Possible values - true - false Secret no Configuration scope \u2612 parameter \u2612 general \u2612 steps \u2612 stages Resource references none","title":"verbose"},{"location":"steps/abapLandscapePortalUpdateAddOnProduct/#landscapeportalapicredentialsid","text":"Jenkins secret text credential ID containing the service key to access the Landscape Portal Access API back to overview Scope Details Aliases - Type string Configuration scope \u2612 parameter \u2612 general \u2612 steps \u2612 stages","title":"landscapePortalAPICredentialsId"},{"location":"steps/abapLandscapePortalUpdateAddOnProduct/#example-configuration-in-the-configyml","text":"The recommended way to configure your pipeline is via the config.yml file. In this case, calling the step in the Jenkinsfile is reduced to one line: abapLandscapePortalUpdateAddOnProduct script: this The configuration values for the addon update can be passed through the config.yml file: steps : abapLandscapePortalUpdateAddOnProduct : landscapePortalAPICredentialsId : 'landscapePortalAPICredentialsId' abapSystemNumber : 'abapSystemNumber' addonDescriptorFileName : 'addon.yml' addonDescriptor : 'addonDescriptor'","title":"Example: Configuration in the config.yml"},{"location":"steps/abapLandscapePortalUpdateAddOnProduct/#example-configuration-in-the-jenkinsfile","text":"The step, including all parameters, can also be called directly from the Jenkinsfile. In the following example, a configuration file is used. abapLandscapePortalUpdateAddOnProduct ( script: this , landscapePortalAPICredentialsId: 'landscapePortalAPICredentialsId' abapSystemNumber: 'abapSystemNumber' addonDescriptorFileName: 'addon.yml' addonDescriptor: 'addonDescriptor' ) The file addon.yml would look like this: addonProduct : some-addon-product addonVersion : some-addon-version","title":"Example: Configuration in the Jenkinsfile"},{"location":"steps/ansSendEvent/","text":"ansSendEvent \u00b6 Send Event to the SAP Alert Notification Service Description \u00b6 With this step one can send an Event to the SAP Alert Notification Service. Usage \u00b6 We recommend to define values of step parameters via .pipeline/config.yml file . In this case, calling the step is essentially reduced to defining the step name. Calling the step can be done either in an orchestrator specific way (e.g. via a Jenkins library step) or on the command line. Jenkins Command Line library ( 'piper-lib-os' ) ansSendEvent script: this piper ansSendEvent The SAP Alert Notification service for SAP BTP allows users to define certain delivery channels, for example, e-mail or triggering of HTTP requests, to receive notifications from pipeline events. Prerequisites \u00b6 A service-key credential from the alert notification service. Parameters \u00b6 Overview - Step \u00b6 Name Mandatory Additional information ansServiceKey (yes) pass via ENV or Jenkins credentials ( ansServiceKeyCredentialsId ) script (yes) reference to Jenkins main pipeline script body no category no eventType no priority no resourceInstance no resourceName no resourceTags no resourceType no severity no subject no tags no verbose no activates debug output Overview - Execution Environment \u00b6 Orchestrator-specific only These parameters are relevant for orchestrator usage and not considered when using the command line option. Name Mandatory Additional information Details \u00b6 ansServiceKey \u00b6 Service key JSON string to access the SAP Alert Notification Service back to overview Scope Details Aliases - Type string Mandatory yes Default $PIPER_ansServiceKey (if set) Secret yes Configuration scope \u2612 parameter \u2610 general \u2610 steps \u2610 stages Resource references Jenkins credential id: id: ansServiceKeyCredentialsId reference to: ansServiceKey body \u00b6 Detailed description of the event back to overview Scope Details Aliases - Type string Mandatory no Default Call from Piper step ansSendEvent Secret no Configuration scope \u2612 parameter \u2610 general \u2612 steps \u2612 stages Resource references none category \u00b6 Event category back to overview Scope Details Aliases - Type string Mandatory no Default NOTIFICATION Possible values - NOTIFICATION - ALERT - EXCEPTION Secret no Configuration scope \u2612 parameter \u2610 general \u2612 steps \u2612 stages Resource references none eventType \u00b6 Type of the event back to overview Scope Details Aliases - Type string Mandatory no Default Piper Secret no Configuration scope \u2612 parameter \u2610 general \u2612 steps \u2612 stages Resource references none priority \u00b6 Event priority in the range of 1 to 1000 back to overview Scope Details Aliases - Type int Mandatory no Default 0 Secret no Configuration scope \u2612 parameter \u2610 general \u2612 steps \u2612 stages Resource references none resourceInstance \u00b6 Optional resource instance identifier back to overview Scope Details Aliases - Type string Mandatory no Default $PIPER_resourceInstance (if set) Secret no Configuration scope \u2612 parameter \u2610 general \u2612 steps \u2612 stages Resource references none resourceName \u00b6 Unique resource name back to overview Scope Details Aliases - Type string Mandatory no Default Pipeline Secret no Configuration scope \u2612 parameter \u2610 general \u2612 steps \u2612 stages Resource references none resourceTags \u00b6 Optional key-value pairs describing the resource in details back to overview Scope Details Aliases - Type map[string]interface{} Mandatory no Default $PIPER_resourceTags (if set) Secret no Configuration scope \u2612 parameter \u2610 general \u2612 steps \u2612 stages Resource references none resourceType \u00b6 Resource type identifier back to overview Scope Details Aliases - Type string Mandatory no Default Pipeline Secret no Configuration scope \u2612 parameter \u2610 general \u2612 steps \u2612 stages Resource references none script \u00b6 The common script environment of the Jenkinsfile running. Typically the reference to the script calling the pipeline step is provided with the this parameter, as in script: this . This allows the function to access the commonPipelineEnvironment for retrieving, e.g. configuration parameters. back to overview Scope Details Aliases - Type Jenkins Script Mandatory yes Default Secret no Configuration scope \u2610 parameter \u2610 general \u2610 steps \u2610 stages Resource references none severity \u00b6 Event severity back to overview Scope Details Aliases - Type string Mandatory no Default INFO Possible values - INFO - NOTICE - WARNING - ERROR - FATAL Secret no Configuration scope \u2612 parameter \u2610 general \u2612 steps \u2612 stages Resource references none subject \u00b6 Short description of the event back to overview Scope Details Aliases - Type string Mandatory no Default ansSendEvent Secret no Configuration scope \u2612 parameter \u2610 general \u2612 steps \u2612 stages Resource references none tags \u00b6 Optional key-value pairs describing the event in details back to overview Scope Details Aliases - Type map[string]interface{} Mandatory no Default $PIPER_tags (if set) Secret no Configuration scope \u2612 parameter \u2610 general \u2612 steps \u2612 stages Resource references none verbose \u00b6 verbose output back to overview Scope Details Aliases - Type bool Mandatory no Default false Possible values - true - false Secret no Configuration scope \u2612 parameter \u2612 general \u2612 steps \u2612 stages Resource references none ansServiceKeyCredentialsId \u00b6 Jenkins secret text credential ID containing the service key to access the SAP Alert Notification Service back to overview Scope Details Aliases - Type string Configuration scope \u2612 parameter \u2612 general \u2612 steps \u2612 stages Example \u00b6 Example configuration for the use in a Jenkinsfile . ansSendEvent ( script: this , ansServiceKeyCredentialsId: \"myANSCredential\" , eventType: \"errorEvent\" , severity: \"ERROR\" , category: \"EXCEPTION\" , subject: \"Something went wrong\" , body: \"The details of what went wrong\" , priority: 3 , tags: [ myTag: \"myValue\" , yourTag: \"yourValue\" ], resourceName: \"Test Pipeline\" , resourceType: \"My Pipeline\" , resourceInstance: \"myPipeline\" , resourceTags: [ myResourceTag: \"a value\" ] ) Example for the use in a YAML configuration file (such as .pipeline/config.yaml ). steps : <...> ansSendEvent : ansServiceKeyCredentialsId : \"myANSCredential\" , eventType : \"errorEvent\" , severity : \"ERROR\" , category : \"EXCEPTION\" , subject : \"Something went wrong\" , body : \"The details of what went wrong\" , priority : 3, tags : myTag : \"myValue\" , yourTag : \"yourValue\" , resourceName : \"Test Pipeline\" , resourceType : \"My Pipeline\" , resourceInstance : \"myPipeline\" , resourceTags : myResourceTag : \"a value\"","title":"ansSendEvent"},{"location":"steps/ansSendEvent/#anssendevent","text":"Send Event to the SAP Alert Notification Service","title":"ansSendEvent"},{"location":"steps/ansSendEvent/#description","text":"With this step one can send an Event to the SAP Alert Notification Service.","title":"Description"},{"location":"steps/ansSendEvent/#usage","text":"We recommend to define values of step parameters via .pipeline/config.yml file . In this case, calling the step is essentially reduced to defining the step name. Calling the step can be done either in an orchestrator specific way (e.g. via a Jenkins library step) or on the command line. Jenkins Command Line library ( 'piper-lib-os' ) ansSendEvent script: this piper ansSendEvent The SAP Alert Notification service for SAP BTP allows users to define certain delivery channels, for example, e-mail or triggering of HTTP requests, to receive notifications from pipeline events.","title":"Usage"},{"location":"steps/ansSendEvent/#prerequisites","text":"A service-key credential from the alert notification service.","title":"Prerequisites"},{"location":"steps/ansSendEvent/#parameters","text":"","title":"Parameters"},{"location":"steps/ansSendEvent/#overview-step","text":"Name Mandatory Additional information ansServiceKey (yes) pass via ENV or Jenkins credentials ( ansServiceKeyCredentialsId ) script (yes) reference to Jenkins main pipeline script body no category no eventType no priority no resourceInstance no resourceName no resourceTags no resourceType no severity no subject no tags no verbose no activates debug output","title":"Overview - Step"},{"location":"steps/ansSendEvent/#overview-execution-environment","text":"Orchestrator-specific only These parameters are relevant for orchestrator usage and not considered when using the command line option. Name Mandatory Additional information","title":"Overview - Execution Environment"},{"location":"steps/ansSendEvent/#details","text":"","title":"Details"},{"location":"steps/ansSendEvent/#ansservicekey","text":"Service key JSON string to access the SAP Alert Notification Service back to overview Scope Details Aliases - Type string Mandatory yes Default $PIPER_ansServiceKey (if set) Secret yes Configuration scope \u2612 parameter \u2610 general \u2610 steps \u2610 stages Resource references Jenkins credential id: id: ansServiceKeyCredentialsId reference to: ansServiceKey","title":"ansServiceKey"},{"location":"steps/ansSendEvent/#body","text":"Detailed description of the event back to overview Scope Details Aliases - Type string Mandatory no Default Call from Piper step ansSendEvent Secret no Configuration scope \u2612 parameter \u2610 general \u2612 steps \u2612 stages Resource references none","title":"body"},{"location":"steps/ansSendEvent/#category","text":"Event category back to overview Scope Details Aliases - Type string Mandatory no Default NOTIFICATION Possible values - NOTIFICATION - ALERT - EXCEPTION Secret no Configuration scope \u2612 parameter \u2610 general \u2612 steps \u2612 stages Resource references none","title":"category"},{"location":"steps/ansSendEvent/#eventtype","text":"Type of the event back to overview Scope Details Aliases - Type string Mandatory no Default Piper Secret no Configuration scope \u2612 parameter \u2610 general \u2612 steps \u2612 stages Resource references none","title":"eventType"},{"location":"steps/ansSendEvent/#priority","text":"Event priority in the range of 1 to 1000 back to overview Scope Details Aliases - Type int Mandatory no Default 0 Secret no Configuration scope \u2612 parameter \u2610 general \u2612 steps \u2612 stages Resource references none","title":"priority"},{"location":"steps/ansSendEvent/#resourceinstance","text":"Optional resource instance identifier back to overview Scope Details Aliases - Type string Mandatory no Default $PIPER_resourceInstance (if set) Secret no Configuration scope \u2612 parameter \u2610 general \u2612 steps \u2612 stages Resource references none","title":"resourceInstance"},{"location":"steps/ansSendEvent/#resourcename","text":"Unique resource name back to overview Scope Details Aliases - Type string Mandatory no Default Pipeline Secret no Configuration scope \u2612 parameter \u2610 general \u2612 steps \u2612 stages Resource references none","title":"resourceName"},{"location":"steps/ansSendEvent/#resourcetags","text":"Optional key-value pairs describing the resource in details back to overview Scope Details Aliases - Type map[string]interface{} Mandatory no Default $PIPER_resourceTags (if set) Secret no Configuration scope \u2612 parameter \u2610 general \u2612 steps \u2612 stages Resource references none","title":"resourceTags"},{"location":"steps/ansSendEvent/#resourcetype","text":"Resource type identifier back to overview Scope Details Aliases - Type string Mandatory no Default Pipeline Secret no Configuration scope \u2612 parameter \u2610 general \u2612 steps \u2612 stages Resource references none","title":"resourceType"},{"location":"steps/ansSendEvent/#script","text":"The common script environment of the Jenkinsfile running. Typically the reference to the script calling the pipeline step is provided with the this parameter, as in script: this . This allows the function to access the commonPipelineEnvironment for retrieving, e.g. configuration parameters. back to overview Scope Details Aliases - Type Jenkins Script Mandatory yes Default Secret no Configuration scope \u2610 parameter \u2610 general \u2610 steps \u2610 stages Resource references none","title":"script"},{"location":"steps/ansSendEvent/#severity","text":"Event severity back to overview Scope Details Aliases - Type string Mandatory no Default INFO Possible values - INFO - NOTICE - WARNING - ERROR - FATAL Secret no Configuration scope \u2612 parameter \u2610 general \u2612 steps \u2612 stages Resource references none","title":"severity"},{"location":"steps/ansSendEvent/#subject","text":"Short description of the event back to overview Scope Details Aliases - Type string Mandatory no Default ansSendEvent Secret no Configuration scope \u2612 parameter \u2610 general \u2612 steps \u2612 stages Resource references none","title":"subject"},{"location":"steps/ansSendEvent/#tags","text":"Optional key-value pairs describing the event in details back to overview Scope Details Aliases - Type map[string]interface{} Mandatory no Default $PIPER_tags (if set) Secret no Configuration scope \u2612 parameter \u2610 general \u2612 steps \u2612 stages Resource references none","title":"tags"},{"location":"steps/ansSendEvent/#verbose","text":"verbose output back to overview Scope Details Aliases - Type bool Mandatory no Default false Possible values - true - false Secret no Configuration scope \u2612 parameter \u2612 general \u2612 steps \u2612 stages Resource references none","title":"verbose"},{"location":"steps/ansSendEvent/#ansservicekeycredentialsid","text":"Jenkins secret text credential ID containing the service key to access the SAP Alert Notification Service back to overview Scope Details Aliases - Type string Configuration scope \u2612 parameter \u2612 general \u2612 steps \u2612 stages","title":"ansServiceKeyCredentialsId"},{"location":"steps/ansSendEvent/#example","text":"Example configuration for the use in a Jenkinsfile . ansSendEvent ( script: this , ansServiceKeyCredentialsId: \"myANSCredential\" , eventType: \"errorEvent\" , severity: \"ERROR\" , category: \"EXCEPTION\" , subject: \"Something went wrong\" , body: \"The details of what went wrong\" , priority: 3 , tags: [ myTag: \"myValue\" , yourTag: \"yourValue\" ], resourceName: \"Test Pipeline\" , resourceType: \"My Pipeline\" , resourceInstance: \"myPipeline\" , resourceTags: [ myResourceTag: \"a value\" ] ) Example for the use in a YAML configuration file (such as .pipeline/config.yaml ). steps : <...> ansSendEvent : ansServiceKeyCredentialsId : \"myANSCredential\" , eventType : \"errorEvent\" , severity : \"ERROR\" , category : \"EXCEPTION\" , subject : \"Something went wrong\" , body : \"The details of what went wrong\" , priority : 3, tags : myTag : \"myValue\" , yourTag : \"yourValue\" , resourceName : \"Test Pipeline\" , resourceType : \"My Pipeline\" , resourceInstance : \"myPipeline\" , resourceTags : myResourceTag : \"a value\"","title":"Example"},{"location":"steps/apiKeyValueMapDownload/","text":"apiKeyValueMapDownload \u00b6 Download a specific Key Value Map from the API Portal Description \u00b6 With this step you can download a specific Key Value Map from the API Portal, which returns a zip file with the Key Value Map contents in to current workspace using the OData API. Learn more about the SAP API Management API for downloading an Key Value Map artifact here . Usage \u00b6 We recommend to define values of step parameters via .pipeline/config.yml file . In this case, calling the step is essentially reduced to defining the step name. Calling the step can be done either in an orchestrator specific way (e.g. via a Jenkins library step) or on the command line. Jenkins Command Line library ( 'piper-lib-os' ) apiKeyValueMapDownload script: this piper apiKeyValueMapDownload Prerequisites \u00b6 Parameters \u00b6 Overview - Step \u00b6 Name Mandatory Additional information apiServiceKey (yes) pass via ENV or Jenkins credentials ( apimApiServiceKeyCredentialsId ) downloadPath yes keyValueMapName yes script (yes) reference to Jenkins main pipeline script verbose no activates debug output Overview - Execution Environment \u00b6 Orchestrator-specific only These parameters are relevant for orchestrator usage and not considered when using the command line option. Name Mandatory Additional information Details \u00b6 apiServiceKey \u00b6 Service key JSON string to access the API Management Runtime service instance of plan 'api' back to overview Scope Details Aliases - Type string Mandatory yes Default $PIPER_apiServiceKey (if set) Secret yes Configuration scope \u2612 parameter \u2610 general \u2610 steps \u2610 stages Resource references Jenkins credential id: id: apimApiServiceKeyCredentialsId reference to: apiServiceKey downloadPath \u00b6 Specifies Key Value Map download CSV file location. back to overview Scope Details Aliases - Type string Mandatory yes Default $PIPER_downloadPath (if set) Secret no Configuration scope \u2612 parameter \u2610 general \u2612 steps \u2612 stages Resource references none keyValueMapName \u00b6 Specifies the name of the Key Value Map. back to overview Scope Details Aliases - Type string Mandatory yes Default $PIPER_keyValueMapName (if set) Secret no Configuration scope \u2612 parameter \u2610 general \u2612 steps \u2612 stages Resource references none script \u00b6 The common script environment of the Jenkinsfile running. Typically the reference to the script calling the pipeline step is provided with the this parameter, as in script: this . This allows the function to access the commonPipelineEnvironment for retrieving, e.g. configuration parameters. back to overview Scope Details Aliases - Type Jenkins Script Mandatory yes Default Secret no Configuration scope \u2610 parameter \u2610 general \u2610 steps \u2610 stages Resource references none verbose \u00b6 verbose output back to overview Scope Details Aliases - Type bool Mandatory no Default false Possible values - true - false Secret no Configuration scope \u2612 parameter \u2612 general \u2612 steps \u2612 stages Resource references none apimApiServiceKeyCredentialsId \u00b6 Jenkins secret text credential ID containing the service key to the API Management Runtime service instance of plan 'api' back to overview Scope Details Aliases - Type string Configuration scope \u2612 parameter \u2612 general \u2612 steps \u2612 stages Example \u00b6 Example configuration for the use in a Jenkinsfile . apiKeyValueMapDownload script: this Example for the use in a YAML configuration file (such as .pipeline/config.yaml ). steps : <...> apiKeyValueMapDownload : apimApiServiceKeyCredentialsId : 'MY_API_SERVICE_KEY' apiProxyName : 'MY_API_KEY_VALUE_MAP_NAME' downloadPath : MY_API_KEY_VALUE_MAP_CSV_FILE_DOWNLOAD_PATH","title":"apiKeyValueMapDownload"},{"location":"steps/apiKeyValueMapDownload/#apikeyvaluemapdownload","text":"Download a specific Key Value Map from the API Portal","title":"apiKeyValueMapDownload"},{"location":"steps/apiKeyValueMapDownload/#description","text":"With this step you can download a specific Key Value Map from the API Portal, which returns a zip file with the Key Value Map contents in to current workspace using the OData API. Learn more about the SAP API Management API for downloading an Key Value Map artifact here .","title":"Description"},{"location":"steps/apiKeyValueMapDownload/#usage","text":"We recommend to define values of step parameters via .pipeline/config.yml file . In this case, calling the step is essentially reduced to defining the step name. Calling the step can be done either in an orchestrator specific way (e.g. via a Jenkins library step) or on the command line. Jenkins Command Line library ( 'piper-lib-os' ) apiKeyValueMapDownload script: this piper apiKeyValueMapDownload","title":"Usage"},{"location":"steps/apiKeyValueMapDownload/#prerequisites","text":"","title":"Prerequisites"},{"location":"steps/apiKeyValueMapDownload/#parameters","text":"","title":"Parameters"},{"location":"steps/apiKeyValueMapDownload/#overview-step","text":"Name Mandatory Additional information apiServiceKey (yes) pass via ENV or Jenkins credentials ( apimApiServiceKeyCredentialsId ) downloadPath yes keyValueMapName yes script (yes) reference to Jenkins main pipeline script verbose no activates debug output","title":"Overview - Step"},{"location":"steps/apiKeyValueMapDownload/#overview-execution-environment","text":"Orchestrator-specific only These parameters are relevant for orchestrator usage and not considered when using the command line option. Name Mandatory Additional information","title":"Overview - Execution Environment"},{"location":"steps/apiKeyValueMapDownload/#details","text":"","title":"Details"},{"location":"steps/apiKeyValueMapDownload/#apiservicekey","text":"Service key JSON string to access the API Management Runtime service instance of plan 'api' back to overview Scope Details Aliases - Type string Mandatory yes Default $PIPER_apiServiceKey (if set) Secret yes Configuration scope \u2612 parameter \u2610 general \u2610 steps \u2610 stages Resource references Jenkins credential id: id: apimApiServiceKeyCredentialsId reference to: apiServiceKey","title":"apiServiceKey"},{"location":"steps/apiKeyValueMapDownload/#downloadpath","text":"Specifies Key Value Map download CSV file location. back to overview Scope Details Aliases - Type string Mandatory yes Default $PIPER_downloadPath (if set) Secret no Configuration scope \u2612 parameter \u2610 general \u2612 steps \u2612 stages Resource references none","title":"downloadPath"},{"location":"steps/apiKeyValueMapDownload/#keyvaluemapname","text":"Specifies the name of the Key Value Map. back to overview Scope Details Aliases - Type string Mandatory yes Default $PIPER_keyValueMapName (if set) Secret no Configuration scope \u2612 parameter \u2610 general \u2612 steps \u2612 stages Resource references none","title":"keyValueMapName"},{"location":"steps/apiKeyValueMapDownload/#script","text":"The common script environment of the Jenkinsfile running. Typically the reference to the script calling the pipeline step is provided with the this parameter, as in script: this . This allows the function to access the commonPipelineEnvironment for retrieving, e.g. configuration parameters. back to overview Scope Details Aliases - Type Jenkins Script Mandatory yes Default Secret no Configuration scope \u2610 parameter \u2610 general \u2610 steps \u2610 stages Resource references none","title":"script"},{"location":"steps/apiKeyValueMapDownload/#verbose","text":"verbose output back to overview Scope Details Aliases - Type bool Mandatory no Default false Possible values - true - false Secret no Configuration scope \u2612 parameter \u2612 general \u2612 steps \u2612 stages Resource references none","title":"verbose"},{"location":"steps/apiKeyValueMapDownload/#apimapiservicekeycredentialsid","text":"Jenkins secret text credential ID containing the service key to the API Management Runtime service instance of plan 'api' back to overview Scope Details Aliases - Type string Configuration scope \u2612 parameter \u2612 general \u2612 steps \u2612 stages","title":"apimApiServiceKeyCredentialsId"},{"location":"steps/apiKeyValueMapDownload/#example","text":"Example configuration for the use in a Jenkinsfile . apiKeyValueMapDownload script: this Example for the use in a YAML configuration file (such as .pipeline/config.yaml ). steps : <...> apiKeyValueMapDownload : apimApiServiceKeyCredentialsId : 'MY_API_SERVICE_KEY' apiProxyName : 'MY_API_KEY_VALUE_MAP_NAME' downloadPath : MY_API_KEY_VALUE_MAP_CSV_FILE_DOWNLOAD_PATH","title":"Example"},{"location":"steps/apiKeyValueMapUpload/","text":"apiKeyValueMapUpload \u00b6 this steps creates an API key value map artifact in the API Portal Description \u00b6 This steps creates an API key value map artifact in the API Portal using the OData API. Learn more about the SAP API Management API for creating an API key value map artifact here . Usage \u00b6 We recommend to define values of step parameters via .pipeline/config.yml file . In this case, calling the step is essentially reduced to defining the step name. Calling the step can be done either in an orchestrator specific way (e.g. via a Jenkins library step) or on the command line. Jenkins Command Line library ( 'piper-lib-os' ) apiKeyValueMapUpload script: this piper apiKeyValueMapUpload With this step you can store one or more key value pairs of data stored in a group called a map or key value map. To consume the ApiKeyValueMapUpload step, proceed as follows: Copy the SAP API management service key from the SAP BTP sub account cockpit, under instance and subscriptions \u2192 service API Management, API portal, which was created under apiportal-apiaccess plan. Store your service key created for SAP API Management in the Jenkins server as a secret text. Create a new Jenkins pipeline designated for the ApiKeyValueMapUpload step. Execute the pipeline and validate the step exection results as explained in the blog Integration Suite Piper commands Using the ApiKeyValueMapUpload step, you can create a new API key value map in the API portal. The ApiKeyValueMapUpload step allows you to prevent command execution in case an API key value map already exists. If API key value map already exists, then delete it and execute the piper step again, which will create a new API Key value Map. ApiKeyValueMapUpload only supports create operation. Prerequisites \u00b6 Parameters \u00b6 Overview - Step \u00b6 Name Mandatory Additional information apiServiceKey (yes) pass via ENV or Jenkins credentials ( apimApiServiceKeyCredentialsId ) key yes keyValueMapName yes script (yes) reference to Jenkins main pipeline script value yes verbose no activates debug output Overview - Execution Environment \u00b6 Orchestrator-specific only These parameters are relevant for orchestrator usage and not considered when using the command line option. Name Mandatory Additional information Details \u00b6 apiServiceKey \u00b6 Service key JSON string to access the API Management Runtime service instance of plan 'api' back to overview Scope Details Aliases - Type string Mandatory yes Default $PIPER_apiServiceKey (if set) Secret yes Configuration scope \u2612 parameter \u2610 general \u2610 steps \u2610 stages Resource references Jenkins credential id: id: apimApiServiceKeyCredentialsId reference to: apiServiceKey key \u00b6 Specifies API key name of API key value map back to overview Scope Details Aliases - Type string Mandatory yes Default $PIPER_key (if set) Secret no Configuration scope \u2612 parameter \u2610 general \u2612 steps \u2612 stages Resource references none keyValueMapName \u00b6 Specifies the name of the API key value map back to overview Scope Details Aliases - Type string Mandatory yes Default $PIPER_keyValueMapName (if set) Secret no Configuration scope \u2612 parameter \u2610 general \u2612 steps \u2612 stages Resource references none script \u00b6 The common script environment of the Jenkinsfile running. Typically the reference to the script calling the pipeline step is provided with the this parameter, as in script: this . This allows the function to access the commonPipelineEnvironment for retrieving, e.g. configuration parameters. back to overview Scope Details Aliases - Type Jenkins Script Mandatory yes Default Secret no Configuration scope \u2610 parameter \u2610 general \u2610 steps \u2610 stages Resource references none value \u00b6 Specifies API key value of API key value map back to overview Scope Details Aliases - Type string Mandatory yes Default $PIPER_value (if set) Secret no Configuration scope \u2612 parameter \u2610 general \u2612 steps \u2612 stages Resource references none verbose \u00b6 verbose output back to overview Scope Details Aliases - Type bool Mandatory no Default false Possible values - true - false Secret no Configuration scope \u2612 parameter \u2612 general \u2612 steps \u2612 stages Resource references none apimApiServiceKeyCredentialsId \u00b6 Jenkins secret text credential ID containing the service key to the API Management Runtime service instance of plan 'api' back to overview Scope Details Aliases - Type string Configuration scope \u2612 parameter \u2612 general \u2612 steps \u2612 stages Example \u00b6 Configuration example for a Jenkinsfile : apiKeyValueMapUpload script: this Configuration example for a YAML file(for example .pipeline/config.yaml ): steps : <...> apiKeyValueMapUpload : apimApiServiceKeyCredentialsId : 'MY_API_SERVICE_KEY' key : API_KEY_NAME value : API_KEY_VALUE keyValueMapName : API_KEY_VALUE_MAP_NAME","title":"apiKeyValueMapUpload"},{"location":"steps/apiKeyValueMapUpload/#apikeyvaluemapupload","text":"this steps creates an API key value map artifact in the API Portal","title":"apiKeyValueMapUpload"},{"location":"steps/apiKeyValueMapUpload/#description","text":"This steps creates an API key value map artifact in the API Portal using the OData API. Learn more about the SAP API Management API for creating an API key value map artifact here .","title":"Description"},{"location":"steps/apiKeyValueMapUpload/#usage","text":"We recommend to define values of step parameters via .pipeline/config.yml file . In this case, calling the step is essentially reduced to defining the step name. Calling the step can be done either in an orchestrator specific way (e.g. via a Jenkins library step) or on the command line. Jenkins Command Line library ( 'piper-lib-os' ) apiKeyValueMapUpload script: this piper apiKeyValueMapUpload With this step you can store one or more key value pairs of data stored in a group called a map or key value map. To consume the ApiKeyValueMapUpload step, proceed as follows: Copy the SAP API management service key from the SAP BTP sub account cockpit, under instance and subscriptions \u2192 service API Management, API portal, which was created under apiportal-apiaccess plan. Store your service key created for SAP API Management in the Jenkins server as a secret text. Create a new Jenkins pipeline designated for the ApiKeyValueMapUpload step. Execute the pipeline and validate the step exection results as explained in the blog Integration Suite Piper commands Using the ApiKeyValueMapUpload step, you can create a new API key value map in the API portal. The ApiKeyValueMapUpload step allows you to prevent command execution in case an API key value map already exists. If API key value map already exists, then delete it and execute the piper step again, which will create a new API Key value Map. ApiKeyValueMapUpload only supports create operation.","title":"Usage"},{"location":"steps/apiKeyValueMapUpload/#prerequisites","text":"","title":"Prerequisites"},{"location":"steps/apiKeyValueMapUpload/#parameters","text":"","title":"Parameters"},{"location":"steps/apiKeyValueMapUpload/#overview-step","text":"Name Mandatory Additional information apiServiceKey (yes) pass via ENV or Jenkins credentials ( apimApiServiceKeyCredentialsId ) key yes keyValueMapName yes script (yes) reference to Jenkins main pipeline script value yes verbose no activates debug output","title":"Overview - Step"},{"location":"steps/apiKeyValueMapUpload/#overview-execution-environment","text":"Orchestrator-specific only These parameters are relevant for orchestrator usage and not considered when using the command line option. Name Mandatory Additional information","title":"Overview - Execution Environment"},{"location":"steps/apiKeyValueMapUpload/#details","text":"","title":"Details"},{"location":"steps/apiKeyValueMapUpload/#apiservicekey","text":"Service key JSON string to access the API Management Runtime service instance of plan 'api' back to overview Scope Details Aliases - Type string Mandatory yes Default $PIPER_apiServiceKey (if set) Secret yes Configuration scope \u2612 parameter \u2610 general \u2610 steps \u2610 stages Resource references Jenkins credential id: id: apimApiServiceKeyCredentialsId reference to: apiServiceKey","title":"apiServiceKey"},{"location":"steps/apiKeyValueMapUpload/#key","text":"Specifies API key name of API key value map back to overview Scope Details Aliases - Type string Mandatory yes Default $PIPER_key (if set) Secret no Configuration scope \u2612 parameter \u2610 general \u2612 steps \u2612 stages Resource references none","title":"key"},{"location":"steps/apiKeyValueMapUpload/#keyvaluemapname","text":"Specifies the name of the API key value map back to overview Scope Details Aliases - Type string Mandatory yes Default $PIPER_keyValueMapName (if set) Secret no Configuration scope \u2612 parameter \u2610 general \u2612 steps \u2612 stages Resource references none","title":"keyValueMapName"},{"location":"steps/apiKeyValueMapUpload/#script","text":"The common script environment of the Jenkinsfile running. Typically the reference to the script calling the pipeline step is provided with the this parameter, as in script: this . This allows the function to access the commonPipelineEnvironment for retrieving, e.g. configuration parameters. back to overview Scope Details Aliases - Type Jenkins Script Mandatory yes Default Secret no Configuration scope \u2610 parameter \u2610 general \u2610 steps \u2610 stages Resource references none","title":"script"},{"location":"steps/apiKeyValueMapUpload/#value","text":"Specifies API key value of API key value map back to overview Scope Details Aliases - Type string Mandatory yes Default $PIPER_value (if set) Secret no Configuration scope \u2612 parameter \u2610 general \u2612 steps \u2612 stages Resource references none","title":"value"},{"location":"steps/apiKeyValueMapUpload/#verbose","text":"verbose output back to overview Scope Details Aliases - Type bool Mandatory no Default false Possible values - true - false Secret no Configuration scope \u2612 parameter \u2612 general \u2612 steps \u2612 stages Resource references none","title":"verbose"},{"location":"steps/apiKeyValueMapUpload/#apimapiservicekeycredentialsid","text":"Jenkins secret text credential ID containing the service key to the API Management Runtime service instance of plan 'api' back to overview Scope Details Aliases - Type string Configuration scope \u2612 parameter \u2612 general \u2612 steps \u2612 stages","title":"apimApiServiceKeyCredentialsId"},{"location":"steps/apiKeyValueMapUpload/#example","text":"Configuration example for a Jenkinsfile : apiKeyValueMapUpload script: this Configuration example for a YAML file(for example .pipeline/config.yaml ): steps : <...> apiKeyValueMapUpload : apimApiServiceKeyCredentialsId : 'MY_API_SERVICE_KEY' key : API_KEY_NAME value : API_KEY_VALUE keyValueMapName : API_KEY_VALUE_MAP_NAME","title":"Example"},{"location":"steps/apiProviderDownload/","text":"apiProviderDownload \u00b6 Download a specific API Provider from the API Portal Description \u00b6 With this step you can download a specific API Provider from the API Portal, which returns a JSON file with the api provider contents in to current workspace using the OData API. Learn more about the SAP API Management API for downloading an api provider artifact here . Usage \u00b6 We recommend to define values of step parameters via .pipeline/config.yml file . In this case, calling the step is essentially reduced to defining the step name. Calling the step can be done either in an orchestrator specific way (e.g. via a Jenkins library step) or on the command line. Jenkins Command Line library ( 'piper-lib-os' ) apiProviderDownload script: this piper apiProviderDownload API Provider defines the connection details for services running on specific hosts. This function returns the APIProvider entity and stores it in the file system. Prerequisites \u00b6 API Provider artifact to be downloaded should exist in the API Portal. Parameters \u00b6 Overview - Step \u00b6 Name Mandatory Additional information apiProviderName yes apiServiceKey (yes) pass via ENV or Jenkins credentials ( apimApiServiceKeyCredentialsId ) downloadPath yes script (yes) reference to Jenkins main pipeline script verbose no activates debug output Overview - Execution Environment \u00b6 Orchestrator-specific only These parameters are relevant for orchestrator usage and not considered when using the command line option. Name Mandatory Additional information Details \u00b6 apiProviderName \u00b6 Specifies the name of the API Provider. back to overview Scope Details Aliases - Type string Mandatory yes Default $PIPER_apiProviderName (if set) Secret no Configuration scope \u2612 parameter \u2610 general \u2612 steps \u2612 stages Resource references none apiServiceKey \u00b6 Service key JSON string to access the API Management Runtime service instance of plan 'api' back to overview Scope Details Aliases - Type string Mandatory yes Default $PIPER_apiServiceKey (if set) Secret yes Configuration scope \u2612 parameter \u2610 general \u2610 steps \u2610 stages Resource references Jenkins credential id: id: apimApiServiceKeyCredentialsId reference to: apiServiceKey downloadPath \u00b6 Specifies api provider download directory location. The file name must not be included in the path. back to overview Scope Details Aliases - Type string Mandatory yes Default $PIPER_downloadPath (if set) Secret no Configuration scope \u2612 parameter \u2610 general \u2612 steps \u2612 stages Resource references none script \u00b6 The common script environment of the Jenkinsfile running. Typically the reference to the script calling the pipeline step is provided with the this parameter, as in script: this . This allows the function to access the commonPipelineEnvironment for retrieving, e.g. configuration parameters. back to overview Scope Details Aliases - Type Jenkins Script Mandatory yes Default Secret no Configuration scope \u2610 parameter \u2610 general \u2610 steps \u2610 stages Resource references none verbose \u00b6 verbose output back to overview Scope Details Aliases - Type bool Mandatory no Default false Possible values - true - false Secret no Configuration scope \u2612 parameter \u2612 general \u2612 steps \u2612 stages Resource references none apimApiServiceKeyCredentialsId \u00b6 Jenkins secret text credential ID containing the service key to the API Management Runtime service instance of plan 'api' back to overview Scope Details Aliases - Type string Configuration scope \u2612 parameter \u2612 general \u2612 steps \u2612 stages Example \u00b6 Example configuration for the use in a Jenkinsfile . apiProviderDownload script: this Example for the use in a YAML configuration file (such as .pipeline/config.yaml ). steps : <...> apiProviderDownload : apimApiServiceKeyCredentialsId : 'MY_API_SERVICE_KEY' apiProviderName : 'MY_API_PROVIDER_NAME' downloadPath : MY_API_PROVIDER_JSON_FILE_DOWNLOAD_PATH","title":"apiProviderDownload"},{"location":"steps/apiProviderDownload/#apiproviderdownload","text":"Download a specific API Provider from the API Portal","title":"apiProviderDownload"},{"location":"steps/apiProviderDownload/#description","text":"With this step you can download a specific API Provider from the API Portal, which returns a JSON file with the api provider contents in to current workspace using the OData API. Learn more about the SAP API Management API for downloading an api provider artifact here .","title":"Description"},{"location":"steps/apiProviderDownload/#usage","text":"We recommend to define values of step parameters via .pipeline/config.yml file . In this case, calling the step is essentially reduced to defining the step name. Calling the step can be done either in an orchestrator specific way (e.g. via a Jenkins library step) or on the command line. Jenkins Command Line library ( 'piper-lib-os' ) apiProviderDownload script: this piper apiProviderDownload API Provider defines the connection details for services running on specific hosts. This function returns the APIProvider entity and stores it in the file system.","title":"Usage"},{"location":"steps/apiProviderDownload/#prerequisites","text":"API Provider artifact to be downloaded should exist in the API Portal.","title":"Prerequisites"},{"location":"steps/apiProviderDownload/#parameters","text":"","title":"Parameters"},{"location":"steps/apiProviderDownload/#overview-step","text":"Name Mandatory Additional information apiProviderName yes apiServiceKey (yes) pass via ENV or Jenkins credentials ( apimApiServiceKeyCredentialsId ) downloadPath yes script (yes) reference to Jenkins main pipeline script verbose no activates debug output","title":"Overview - Step"},{"location":"steps/apiProviderDownload/#overview-execution-environment","text":"Orchestrator-specific only These parameters are relevant for orchestrator usage and not considered when using the command line option. Name Mandatory Additional information","title":"Overview - Execution Environment"},{"location":"steps/apiProviderDownload/#details","text":"","title":"Details"},{"location":"steps/apiProviderDownload/#apiprovidername","text":"Specifies the name of the API Provider. back to overview Scope Details Aliases - Type string Mandatory yes Default $PIPER_apiProviderName (if set) Secret no Configuration scope \u2612 parameter \u2610 general \u2612 steps \u2612 stages Resource references none","title":"apiProviderName"},{"location":"steps/apiProviderDownload/#apiservicekey","text":"Service key JSON string to access the API Management Runtime service instance of plan 'api' back to overview Scope Details Aliases - Type string Mandatory yes Default $PIPER_apiServiceKey (if set) Secret yes Configuration scope \u2612 parameter \u2610 general \u2610 steps \u2610 stages Resource references Jenkins credential id: id: apimApiServiceKeyCredentialsId reference to: apiServiceKey","title":"apiServiceKey"},{"location":"steps/apiProviderDownload/#downloadpath","text":"Specifies api provider download directory location. The file name must not be included in the path. back to overview Scope Details Aliases - Type string Mandatory yes Default $PIPER_downloadPath (if set) Secret no Configuration scope \u2612 parameter \u2610 general \u2612 steps \u2612 stages Resource references none","title":"downloadPath"},{"location":"steps/apiProviderDownload/#script","text":"The common script environment of the Jenkinsfile running. Typically the reference to the script calling the pipeline step is provided with the this parameter, as in script: this . This allows the function to access the commonPipelineEnvironment for retrieving, e.g. configuration parameters. back to overview Scope Details Aliases - Type Jenkins Script Mandatory yes Default Secret no Configuration scope \u2610 parameter \u2610 general \u2610 steps \u2610 stages Resource references none","title":"script"},{"location":"steps/apiProviderDownload/#verbose","text":"verbose output back to overview Scope Details Aliases - Type bool Mandatory no Default false Possible values - true - false Secret no Configuration scope \u2612 parameter \u2612 general \u2612 steps \u2612 stages Resource references none","title":"verbose"},{"location":"steps/apiProviderDownload/#apimapiservicekeycredentialsid","text":"Jenkins secret text credential ID containing the service key to the API Management Runtime service instance of plan 'api' back to overview Scope Details Aliases - Type string Configuration scope \u2612 parameter \u2612 general \u2612 steps \u2612 stages","title":"apimApiServiceKeyCredentialsId"},{"location":"steps/apiProviderDownload/#example","text":"Example configuration for the use in a Jenkinsfile . apiProviderDownload script: this Example for the use in a YAML configuration file (such as .pipeline/config.yaml ). steps : <...> apiProviderDownload : apimApiServiceKeyCredentialsId : 'MY_API_SERVICE_KEY' apiProviderName : 'MY_API_PROVIDER_NAME' downloadPath : MY_API_PROVIDER_JSON_FILE_DOWNLOAD_PATH","title":"Example"},{"location":"steps/apiProviderList/","text":"apiProviderList \u00b6 Get a full List of all API providers from the API Portal Description \u00b6 With this step, you can get a list of all API providers from the API Portal using the OData API. Learn more about the API Management API for getting list of an API Providers here . Usage \u00b6 We recommend to define values of step parameters via .pipeline/config.yml file . In this case, calling the step is essentially reduced to defining the step name. Calling the step can be done either in an orchestrator specific way (e.g. via a Jenkins library step) or on the command line. Jenkins Command Line library ( 'piper-lib-os' ) apiProviderList script: this piper apiProviderList Outputs \u00b6 Output type Details commonPipelineEnvironment custom/apiProviderList With this step, you can retrieve all the API providers from the API portal. An API provider is a concept in API Management, capability of SAP Integration Suite, which defines the connection details for services running on specific hosts whose details you want to access. You use an API provider to define not only the details of the host you want an application to reach, but also to define any further details that are necessary to establish the connection, for example, proxy settings. For more details, see the blog API Providers To consume the ApiProviderList step, proceed as follows: Copy the SAP API management service key from the SAP BTP cockpit. Go to Instance and Subscriptions \u2192 service API Management, API portal, which was created under apiportal-apiaccess plan. Store your service key created for API Management in the Jenkins server as a secret text. Create a new Jenkins pipeline designated for the ApiProviderList step. Execute the pipeline and validate the step exection results as explained in the blog Integration Suite Piper commands Use the ApiProviderList step to get the api providers list from the API Portal. ApiProviderList only supports GET operation. Prerequisites \u00b6 Parameters \u00b6 Overview - Step \u00b6 Name Mandatory Additional information apiServiceKey (yes) pass via ENV or Jenkins credentials ( apimApiServiceKeyCredentialsId ) script (yes) reference to Jenkins main pipeline script count no expand no filter no orderby no search no select no skip no top no verbose no activates debug output Overview - Execution Environment \u00b6 Orchestrator-specific only These parameters are relevant for orchestrator usage and not considered when using the command line option. Name Mandatory Additional information Details \u00b6 apiServiceKey \u00b6 Service key JSON string to access the API Management Runtime service instance of plan 'api' back to overview Scope Details Aliases - Type string Mandatory yes Default $PIPER_apiServiceKey (if set) Secret yes Configuration scope \u2612 parameter \u2610 general \u2610 steps \u2610 stages Resource references Jenkins credential id: id: apimApiServiceKeyCredentialsId reference to: apiServiceKey count \u00b6 Include count of items. back to overview Scope Details Aliases - Type bool Mandatory no Default false Possible values - true - false Secret no Configuration scope \u2612 parameter \u2610 general \u2612 steps \u2612 stages Resource references none expand \u00b6 Expand related entities. back to overview Scope Details Aliases - Type string Mandatory no Default $PIPER_expand (if set) Secret no Configuration scope \u2612 parameter \u2610 general \u2612 steps \u2612 stages Resource references none filter \u00b6 Filter items by property values. back to overview Scope Details Aliases - Type string Mandatory no Default $PIPER_filter (if set) Secret no Configuration scope \u2612 parameter \u2610 general \u2612 steps \u2612 stages Resource references none orderby \u00b6 Order by property values. back to overview Scope Details Aliases - Type string Mandatory no Default $PIPER_orderby (if set) Secret no Configuration scope \u2612 parameter \u2610 general \u2612 steps \u2612 stages Resource references none script \u00b6 The common script environment of the Jenkinsfile running. Typically the reference to the script calling the pipeline step is provided with the this parameter, as in script: this . This allows the function to access the commonPipelineEnvironment for retrieving, e.g. configuration parameters. back to overview Scope Details Aliases - Type Jenkins Script Mandatory yes Default Secret no Configuration scope \u2610 parameter \u2610 general \u2610 steps \u2610 stages Resource references none search \u00b6 Search items by search phrases. back to overview Scope Details Aliases - Type string Mandatory no Default $PIPER_search (if set) Secret no Configuration scope \u2612 parameter \u2610 general \u2612 steps \u2612 stages Resource references none select \u00b6 Select properties to be returned. back to overview Scope Details Aliases - Type string Mandatory no Default $PIPER_select (if set) Secret no Configuration scope \u2612 parameter \u2610 general \u2612 steps \u2612 stages Resource references none skip \u00b6 Skip the first n items. back to overview Scope Details Aliases - Type int Mandatory no Default 0 Secret no Configuration scope \u2612 parameter \u2610 general \u2612 steps \u2612 stages Resource references none top \u00b6 Show only the first n items. back to overview Scope Details Aliases - Type int Mandatory no Default 0 Secret no Configuration scope \u2612 parameter \u2610 general \u2612 steps \u2612 stages Resource references none verbose \u00b6 verbose output back to overview Scope Details Aliases - Type bool Mandatory no Default false Possible values - true - false Secret no Configuration scope \u2612 parameter \u2612 general \u2612 steps \u2612 stages Resource references none apimApiServiceKeyCredentialsId \u00b6 Jenkins secret text credential ID containing the service key to the API Management Runtime service instance of plan 'api' back to overview Scope Details Aliases - Type string Configuration scope \u2612 parameter \u2612 general \u2612 steps \u2612 stages Example \u00b6 Configuration example for a Jenkinsfile : apiProviderList script: this Configuration example for a YAML file(for example .pipeline/config.yaml ): steps : <...> apiProviderList : apimApiServiceKeyCredentialsId : 'MY_API_SERVICE_KEY' Top : MY_API_PROVIDER_GET_N_ENTITIES Skip : MY_API_PROVIDER_SKIP_N_ENTITIES Filter : MY_API_PROVIDER_FILTER_BY_ENTITY_FIELD Orderby : MY_API_PROVIDER_ORDER_BY_ENTITY_FIELD Count : MY_API_PROVIDER_ORDER_ENTITY_COUNT Search : MY_API_PROVIDER_SEARCH_BY_ENTITY_FIELD Select : MY_API_PROVIDER_SELECT_BY_ENTITY_FIELD Expand : MY_API_PROVIDER_EXPAND_BY_ENTITY_FIELD","title":"apiProviderList"},{"location":"steps/apiProviderList/#apiproviderlist","text":"Get a full List of all API providers from the API Portal","title":"apiProviderList"},{"location":"steps/apiProviderList/#description","text":"With this step, you can get a list of all API providers from the API Portal using the OData API. Learn more about the API Management API for getting list of an API Providers here .","title":"Description"},{"location":"steps/apiProviderList/#usage","text":"We recommend to define values of step parameters via .pipeline/config.yml file . In this case, calling the step is essentially reduced to defining the step name. Calling the step can be done either in an orchestrator specific way (e.g. via a Jenkins library step) or on the command line. Jenkins Command Line library ( 'piper-lib-os' ) apiProviderList script: this piper apiProviderList","title":"Usage"},{"location":"steps/apiProviderList/#outputs","text":"Output type Details commonPipelineEnvironment custom/apiProviderList With this step, you can retrieve all the API providers from the API portal. An API provider is a concept in API Management, capability of SAP Integration Suite, which defines the connection details for services running on specific hosts whose details you want to access. You use an API provider to define not only the details of the host you want an application to reach, but also to define any further details that are necessary to establish the connection, for example, proxy settings. For more details, see the blog API Providers To consume the ApiProviderList step, proceed as follows: Copy the SAP API management service key from the SAP BTP cockpit. Go to Instance and Subscriptions \u2192 service API Management, API portal, which was created under apiportal-apiaccess plan. Store your service key created for API Management in the Jenkins server as a secret text. Create a new Jenkins pipeline designated for the ApiProviderList step. Execute the pipeline and validate the step exection results as explained in the blog Integration Suite Piper commands Use the ApiProviderList step to get the api providers list from the API Portal. ApiProviderList only supports GET operation.","title":"Outputs"},{"location":"steps/apiProviderList/#prerequisites","text":"","title":"Prerequisites"},{"location":"steps/apiProviderList/#parameters","text":"","title":"Parameters"},{"location":"steps/apiProviderList/#overview-step","text":"Name Mandatory Additional information apiServiceKey (yes) pass via ENV or Jenkins credentials ( apimApiServiceKeyCredentialsId ) script (yes) reference to Jenkins main pipeline script count no expand no filter no orderby no search no select no skip no top no verbose no activates debug output","title":"Overview - Step"},{"location":"steps/apiProviderList/#overview-execution-environment","text":"Orchestrator-specific only These parameters are relevant for orchestrator usage and not considered when using the command line option. Name Mandatory Additional information","title":"Overview - Execution Environment"},{"location":"steps/apiProviderList/#details","text":"","title":"Details"},{"location":"steps/apiProviderList/#apiservicekey","text":"Service key JSON string to access the API Management Runtime service instance of plan 'api' back to overview Scope Details Aliases - Type string Mandatory yes Default $PIPER_apiServiceKey (if set) Secret yes Configuration scope \u2612 parameter \u2610 general \u2610 steps \u2610 stages Resource references Jenkins credential id: id: apimApiServiceKeyCredentialsId reference to: apiServiceKey","title":"apiServiceKey"},{"location":"steps/apiProviderList/#count","text":"Include count of items. back to overview Scope Details Aliases - Type bool Mandatory no Default false Possible values - true - false Secret no Configuration scope \u2612 parameter \u2610 general \u2612 steps \u2612 stages Resource references none","title":"count"},{"location":"steps/apiProviderList/#expand","text":"Expand related entities. back to overview Scope Details Aliases - Type string Mandatory no Default $PIPER_expand (if set) Secret no Configuration scope \u2612 parameter \u2610 general \u2612 steps \u2612 stages Resource references none","title":"expand"},{"location":"steps/apiProviderList/#filter","text":"Filter items by property values. back to overview Scope Details Aliases - Type string Mandatory no Default $PIPER_filter (if set) Secret no Configuration scope \u2612 parameter \u2610 general \u2612 steps \u2612 stages Resource references none","title":"filter"},{"location":"steps/apiProviderList/#orderby","text":"Order by property values. back to overview Scope Details Aliases - Type string Mandatory no Default $PIPER_orderby (if set) Secret no Configuration scope \u2612 parameter \u2610 general \u2612 steps \u2612 stages Resource references none","title":"orderby"},{"location":"steps/apiProviderList/#script","text":"The common script environment of the Jenkinsfile running. Typically the reference to the script calling the pipeline step is provided with the this parameter, as in script: this . This allows the function to access the commonPipelineEnvironment for retrieving, e.g. configuration parameters. back to overview Scope Details Aliases - Type Jenkins Script Mandatory yes Default Secret no Configuration scope \u2610 parameter \u2610 general \u2610 steps \u2610 stages Resource references none","title":"script"},{"location":"steps/apiProviderList/#search","text":"Search items by search phrases. back to overview Scope Details Aliases - Type string Mandatory no Default $PIPER_search (if set) Secret no Configuration scope \u2612 parameter \u2610 general \u2612 steps \u2612 stages Resource references none","title":"search"},{"location":"steps/apiProviderList/#select","text":"Select properties to be returned. back to overview Scope Details Aliases - Type string Mandatory no Default $PIPER_select (if set) Secret no Configuration scope \u2612 parameter \u2610 general \u2612 steps \u2612 stages Resource references none","title":"select"},{"location":"steps/apiProviderList/#skip","text":"Skip the first n items. back to overview Scope Details Aliases - Type int Mandatory no Default 0 Secret no Configuration scope \u2612 parameter \u2610 general \u2612 steps \u2612 stages Resource references none","title":"skip"},{"location":"steps/apiProviderList/#top","text":"Show only the first n items. back to overview Scope Details Aliases - Type int Mandatory no Default 0 Secret no Configuration scope \u2612 parameter \u2610 general \u2612 steps \u2612 stages Resource references none","title":"top"},{"location":"steps/apiProviderList/#verbose","text":"verbose output back to overview Scope Details Aliases - Type bool Mandatory no Default false Possible values - true - false Secret no Configuration scope \u2612 parameter \u2612 general \u2612 steps \u2612 stages Resource references none","title":"verbose"},{"location":"steps/apiProviderList/#apimapiservicekeycredentialsid","text":"Jenkins secret text credential ID containing the service key to the API Management Runtime service instance of plan 'api' back to overview Scope Details Aliases - Type string Configuration scope \u2612 parameter \u2612 general \u2612 steps \u2612 stages","title":"apimApiServiceKeyCredentialsId"},{"location":"steps/apiProviderList/#example","text":"Configuration example for a Jenkinsfile : apiProviderList script: this Configuration example for a YAML file(for example .pipeline/config.yaml ): steps : <...> apiProviderList : apimApiServiceKeyCredentialsId : 'MY_API_SERVICE_KEY' Top : MY_API_PROVIDER_GET_N_ENTITIES Skip : MY_API_PROVIDER_SKIP_N_ENTITIES Filter : MY_API_PROVIDER_FILTER_BY_ENTITY_FIELD Orderby : MY_API_PROVIDER_ORDER_BY_ENTITY_FIELD Count : MY_API_PROVIDER_ORDER_ENTITY_COUNT Search : MY_API_PROVIDER_SEARCH_BY_ENTITY_FIELD Select : MY_API_PROVIDER_SELECT_BY_ENTITY_FIELD Expand : MY_API_PROVIDER_EXPAND_BY_ENTITY_FIELD","title":"Example"},{"location":"steps/apiProviderUpload/","text":"apiProviderUpload \u00b6 this steps creates an API provider artifact in the API Portal. Description \u00b6 This steps creates an API provider artifact in the API Portal using the OData API. Learn more about API Management api for creating an API provider artifact here . Usage \u00b6 We recommend to define values of step parameters via .pipeline/config.yml file . In this case, calling the step is essentially reduced to defining the step name. Calling the step can be done either in an orchestrator specific way (e.g. via a Jenkins library step) or on the command line. Jenkins Command Line library ( 'piper-lib-os' ) apiProviderUpload script: this piper apiProviderUpload With this step, you can add a new entity to the API Providers. An API Provider is a concept in API Management, capability of SAP Integration Suite, which defines the connection details for services running on specific hosts whose details you want to access. You use an API provider to define not only the details of the host you want an application to reach, but also to define any further details that are necessary to establish the connection, for example, proxy settings.For more details, see the blog API Providers To consume the ApiProviderUpload step, proceed as follows: Copy the SAP API management service key from the SAP BTP cockpit. Go to instance and subscriptions \u2192 service API Management, API portal, which was created under apiportal-apiaccess plan. Store your service key created for API Management in the Jenkins server as a secret text. Create a new Jenkins pipeline designated for the ApiKeyValueMapUpload step. Create a api provider json file in the jenkins worksapce relative file path, as an input for ApiKeyValueMapUpload step. Execute the pipeline and validate the step exection results as explained in the blog Integration Suite Piper commands Use the ApiProviderUpload step to create a new API provider in the API portal. If API provider already exists, then delete it and execute the piper step again, which will create a new API provider. ApiProviderUpload only supports create operation. Prerequisites \u00b6 Parameters \u00b6 Overview - Step \u00b6 Name Mandatory Additional information apiServiceKey (yes) pass via ENV or Jenkins credentials ( apimApiServiceKeyCredentialsId ) filePath yes script (yes) reference to Jenkins main pipeline script verbose no activates debug output Overview - Execution Environment \u00b6 Orchestrator-specific only These parameters are relevant for orchestrator usage and not considered when using the command line option. Name Mandatory Additional information Details \u00b6 apiServiceKey \u00b6 Service key JSON string to access the API Management Runtime service instance of plan 'api' back to overview Scope Details Aliases - Type string Mandatory yes Default $PIPER_apiServiceKey (if set) Secret yes Configuration scope \u2612 parameter \u2610 general \u2610 steps \u2610 stages Resource references Jenkins credential id: id: apimApiServiceKeyCredentialsId reference to: apiServiceKey filePath \u00b6 Specifies api provider json file relative path back to overview Scope Details Aliases - Type string Mandatory yes Default $PIPER_filePath (if set) Secret no Configuration scope \u2612 parameter \u2610 general \u2612 steps \u2612 stages Resource references none script \u00b6 The common script environment of the Jenkinsfile running. Typically the reference to the script calling the pipeline step is provided with the this parameter, as in script: this . This allows the function to access the commonPipelineEnvironment for retrieving, e.g. configuration parameters. back to overview Scope Details Aliases - Type Jenkins Script Mandatory yes Default Secret no Configuration scope \u2610 parameter \u2610 general \u2610 steps \u2610 stages Resource references none verbose \u00b6 verbose output back to overview Scope Details Aliases - Type bool Mandatory no Default false Possible values - true - false Secret no Configuration scope \u2612 parameter \u2612 general \u2612 steps \u2612 stages Resource references none apimApiServiceKeyCredentialsId \u00b6 Jenkins secret text credential ID containing the service key to the API Management Runtime service instance of plan 'api' back to overview Scope Details Aliases - Type string Configuration scope \u2612 parameter \u2612 general \u2612 steps \u2612 stages Example \u00b6 Configuration example for a Jenkinsfile : apiProviderUpload script: this Configuration example for a YAML file(for example .pipeline/config.yaml ): steps : <...> apiKeyValueMapUpload : apimApiServiceKeyCredentialsId : 'MY_API_SERVICE_KEY' filePath : MY_API_PROVIDER_JSON_FILE_PATH","title":"apiProviderUpload"},{"location":"steps/apiProviderUpload/#apiproviderupload","text":"this steps creates an API provider artifact in the API Portal.","title":"apiProviderUpload"},{"location":"steps/apiProviderUpload/#description","text":"This steps creates an API provider artifact in the API Portal using the OData API. Learn more about API Management api for creating an API provider artifact here .","title":"Description"},{"location":"steps/apiProviderUpload/#usage","text":"We recommend to define values of step parameters via .pipeline/config.yml file . In this case, calling the step is essentially reduced to defining the step name. Calling the step can be done either in an orchestrator specific way (e.g. via a Jenkins library step) or on the command line. Jenkins Command Line library ( 'piper-lib-os' ) apiProviderUpload script: this piper apiProviderUpload With this step, you can add a new entity to the API Providers. An API Provider is a concept in API Management, capability of SAP Integration Suite, which defines the connection details for services running on specific hosts whose details you want to access. You use an API provider to define not only the details of the host you want an application to reach, but also to define any further details that are necessary to establish the connection, for example, proxy settings.For more details, see the blog API Providers To consume the ApiProviderUpload step, proceed as follows: Copy the SAP API management service key from the SAP BTP cockpit. Go to instance and subscriptions \u2192 service API Management, API portal, which was created under apiportal-apiaccess plan. Store your service key created for API Management in the Jenkins server as a secret text. Create a new Jenkins pipeline designated for the ApiKeyValueMapUpload step. Create a api provider json file in the jenkins worksapce relative file path, as an input for ApiKeyValueMapUpload step. Execute the pipeline and validate the step exection results as explained in the blog Integration Suite Piper commands Use the ApiProviderUpload step to create a new API provider in the API portal. If API provider already exists, then delete it and execute the piper step again, which will create a new API provider. ApiProviderUpload only supports create operation.","title":"Usage"},{"location":"steps/apiProviderUpload/#prerequisites","text":"","title":"Prerequisites"},{"location":"steps/apiProviderUpload/#parameters","text":"","title":"Parameters"},{"location":"steps/apiProviderUpload/#overview-step","text":"Name Mandatory Additional information apiServiceKey (yes) pass via ENV or Jenkins credentials ( apimApiServiceKeyCredentialsId ) filePath yes script (yes) reference to Jenkins main pipeline script verbose no activates debug output","title":"Overview - Step"},{"location":"steps/apiProviderUpload/#overview-execution-environment","text":"Orchestrator-specific only These parameters are relevant for orchestrator usage and not considered when using the command line option. Name Mandatory Additional information","title":"Overview - Execution Environment"},{"location":"steps/apiProviderUpload/#details","text":"","title":"Details"},{"location":"steps/apiProviderUpload/#apiservicekey","text":"Service key JSON string to access the API Management Runtime service instance of plan 'api' back to overview Scope Details Aliases - Type string Mandatory yes Default $PIPER_apiServiceKey (if set) Secret yes Configuration scope \u2612 parameter \u2610 general \u2610 steps \u2610 stages Resource references Jenkins credential id: id: apimApiServiceKeyCredentialsId reference to: apiServiceKey","title":"apiServiceKey"},{"location":"steps/apiProviderUpload/#filepath","text":"Specifies api provider json file relative path back to overview Scope Details Aliases - Type string Mandatory yes Default $PIPER_filePath (if set) Secret no Configuration scope \u2612 parameter \u2610 general \u2612 steps \u2612 stages Resource references none","title":"filePath"},{"location":"steps/apiProviderUpload/#script","text":"The common script environment of the Jenkinsfile running. Typically the reference to the script calling the pipeline step is provided with the this parameter, as in script: this . This allows the function to access the commonPipelineEnvironment for retrieving, e.g. configuration parameters. back to overview Scope Details Aliases - Type Jenkins Script Mandatory yes Default Secret no Configuration scope \u2610 parameter \u2610 general \u2610 steps \u2610 stages Resource references none","title":"script"},{"location":"steps/apiProviderUpload/#verbose","text":"verbose output back to overview Scope Details Aliases - Type bool Mandatory no Default false Possible values - true - false Secret no Configuration scope \u2612 parameter \u2612 general \u2612 steps \u2612 stages Resource references none","title":"verbose"},{"location":"steps/apiProviderUpload/#apimapiservicekeycredentialsid","text":"Jenkins secret text credential ID containing the service key to the API Management Runtime service instance of plan 'api' back to overview Scope Details Aliases - Type string Configuration scope \u2612 parameter \u2612 general \u2612 steps \u2612 stages","title":"apimApiServiceKeyCredentialsId"},{"location":"steps/apiProviderUpload/#example","text":"Configuration example for a Jenkinsfile : apiProviderUpload script: this Configuration example for a YAML file(for example .pipeline/config.yaml ): steps : <...> apiKeyValueMapUpload : apimApiServiceKeyCredentialsId : 'MY_API_SERVICE_KEY' filePath : MY_API_PROVIDER_JSON_FILE_PATH","title":"Example"},{"location":"steps/apiProxyDownload/","text":"apiProxyDownload \u00b6 Download a specific API Proxy from the API Portal Description \u00b6 With this step you can download a specific API Proxy from the API Portal, which returns a zip file with the api proxy contents in to current workspace using the OData API. Learn more about the SAP API Management API for downloading an api proxy artifact here . Usage \u00b6 We recommend to define values of step parameters via .pipeline/config.yml file . In this case, calling the step is essentially reduced to defining the step name. Calling the step can be done either in an orchestrator specific way (e.g. via a Jenkins library step) or on the command line. Jenkins Command Line library ( 'piper-lib-os' ) apiProxyDownload script: this piper apiProxyDownload Prerequisites \u00b6 Parameters \u00b6 Overview - Step \u00b6 Name Mandatory Additional information apiProxyName yes apiServiceKey (yes) pass via ENV or Jenkins credentials ( apimApiServiceKeyCredentialsId ) downloadPath yes script (yes) reference to Jenkins main pipeline script verbose no activates debug output Overview - Execution Environment \u00b6 Orchestrator-specific only These parameters are relevant for orchestrator usage and not considered when using the command line option. Name Mandatory Additional information Details \u00b6 apiProxyName \u00b6 Specifies the name of the API Proxy. back to overview Scope Details Aliases - Type string Mandatory yes Default $PIPER_apiProxyName (if set) Secret no Configuration scope \u2612 parameter \u2610 general \u2612 steps \u2612 stages Resource references none apiServiceKey \u00b6 Service key JSON string to access the API Management Runtime service instance of plan 'api' back to overview Scope Details Aliases - Type string Mandatory yes Default $PIPER_apiServiceKey (if set) Secret yes Configuration scope \u2612 parameter \u2610 general \u2610 steps \u2610 stages Resource references Jenkins credential id: id: apimApiServiceKeyCredentialsId reference to: apiServiceKey downloadPath \u00b6 Specifies api proxy download directory location. The file name should not be included in the path. back to overview Scope Details Aliases - Type string Mandatory yes Default $PIPER_downloadPath (if set) Secret no Configuration scope \u2612 parameter \u2610 general \u2612 steps \u2612 stages Resource references none script \u00b6 The common script environment of the Jenkinsfile running. Typically the reference to the script calling the pipeline step is provided with the this parameter, as in script: this . This allows the function to access the commonPipelineEnvironment for retrieving, e.g. configuration parameters. back to overview Scope Details Aliases - Type Jenkins Script Mandatory yes Default Secret no Configuration scope \u2610 parameter \u2610 general \u2610 steps \u2610 stages Resource references none verbose \u00b6 verbose output back to overview Scope Details Aliases - Type bool Mandatory no Default false Possible values - true - false Secret no Configuration scope \u2612 parameter \u2612 general \u2612 steps \u2612 stages Resource references none apimApiServiceKeyCredentialsId \u00b6 Jenkins secret text credential ID containing the service key to the API Management Runtime service instance of plan 'api' back to overview Scope Details Aliases - Type string Configuration scope \u2612 parameter \u2612 general \u2612 steps \u2612 stages Example \u00b6 Example configuration for the use in a Jenkinsfile . apiProxyDownload script: this Example for the use in a YAML configuration file (such as .pipeline/config.yaml ). steps : <...> apiProxyDownload : apimApiServiceKeyCredentialsId : 'MY_API_SERVICE_KEY' apiProxyName : 'MY_API_PROXY_NAME' downloadPath : MY_API_PROXY_DOWNLOAD_PATH","title":"apiProxyDownload"},{"location":"steps/apiProxyDownload/#apiproxydownload","text":"Download a specific API Proxy from the API Portal","title":"apiProxyDownload"},{"location":"steps/apiProxyDownload/#description","text":"With this step you can download a specific API Proxy from the API Portal, which returns a zip file with the api proxy contents in to current workspace using the OData API. Learn more about the SAP API Management API for downloading an api proxy artifact here .","title":"Description"},{"location":"steps/apiProxyDownload/#usage","text":"We recommend to define values of step parameters via .pipeline/config.yml file . In this case, calling the step is essentially reduced to defining the step name. Calling the step can be done either in an orchestrator specific way (e.g. via a Jenkins library step) or on the command line. Jenkins Command Line library ( 'piper-lib-os' ) apiProxyDownload script: this piper apiProxyDownload","title":"Usage"},{"location":"steps/apiProxyDownload/#prerequisites","text":"","title":"Prerequisites"},{"location":"steps/apiProxyDownload/#parameters","text":"","title":"Parameters"},{"location":"steps/apiProxyDownload/#overview-step","text":"Name Mandatory Additional information apiProxyName yes apiServiceKey (yes) pass via ENV or Jenkins credentials ( apimApiServiceKeyCredentialsId ) downloadPath yes script (yes) reference to Jenkins main pipeline script verbose no activates debug output","title":"Overview - Step"},{"location":"steps/apiProxyDownload/#overview-execution-environment","text":"Orchestrator-specific only These parameters are relevant for orchestrator usage and not considered when using the command line option. Name Mandatory Additional information","title":"Overview - Execution Environment"},{"location":"steps/apiProxyDownload/#details","text":"","title":"Details"},{"location":"steps/apiProxyDownload/#apiproxyname","text":"Specifies the name of the API Proxy. back to overview Scope Details Aliases - Type string Mandatory yes Default $PIPER_apiProxyName (if set) Secret no Configuration scope \u2612 parameter \u2610 general \u2612 steps \u2612 stages Resource references none","title":"apiProxyName"},{"location":"steps/apiProxyDownload/#apiservicekey","text":"Service key JSON string to access the API Management Runtime service instance of plan 'api' back to overview Scope Details Aliases - Type string Mandatory yes Default $PIPER_apiServiceKey (if set) Secret yes Configuration scope \u2612 parameter \u2610 general \u2610 steps \u2610 stages Resource references Jenkins credential id: id: apimApiServiceKeyCredentialsId reference to: apiServiceKey","title":"apiServiceKey"},{"location":"steps/apiProxyDownload/#downloadpath","text":"Specifies api proxy download directory location. The file name should not be included in the path. back to overview Scope Details Aliases - Type string Mandatory yes Default $PIPER_downloadPath (if set) Secret no Configuration scope \u2612 parameter \u2610 general \u2612 steps \u2612 stages Resource references none","title":"downloadPath"},{"location":"steps/apiProxyDownload/#script","text":"The common script environment of the Jenkinsfile running. Typically the reference to the script calling the pipeline step is provided with the this parameter, as in script: this . This allows the function to access the commonPipelineEnvironment for retrieving, e.g. configuration parameters. back to overview Scope Details Aliases - Type Jenkins Script Mandatory yes Default Secret no Configuration scope \u2610 parameter \u2610 general \u2610 steps \u2610 stages Resource references none","title":"script"},{"location":"steps/apiProxyDownload/#verbose","text":"verbose output back to overview Scope Details Aliases - Type bool Mandatory no Default false Possible values - true - false Secret no Configuration scope \u2612 parameter \u2612 general \u2612 steps \u2612 stages Resource references none","title":"verbose"},{"location":"steps/apiProxyDownload/#apimapiservicekeycredentialsid","text":"Jenkins secret text credential ID containing the service key to the API Management Runtime service instance of plan 'api' back to overview Scope Details Aliases - Type string Configuration scope \u2612 parameter \u2612 general \u2612 steps \u2612 stages","title":"apimApiServiceKeyCredentialsId"},{"location":"steps/apiProxyDownload/#example","text":"Example configuration for the use in a Jenkinsfile . apiProxyDownload script: this Example for the use in a YAML configuration file (such as .pipeline/config.yaml ). steps : <...> apiProxyDownload : apimApiServiceKeyCredentialsId : 'MY_API_SERVICE_KEY' apiProxyName : 'MY_API_PROXY_NAME' downloadPath : MY_API_PROXY_DOWNLOAD_PATH","title":"Example"},{"location":"steps/apiProxyList/","text":"apiProxyList \u00b6 Get the List of an API Proxy from the API Portal Description \u00b6 With this step you can get list of all API Proxy from the API Portal using the OData API. Learn more about the API Management API for getting list of an API proxy artifact here . Usage \u00b6 We recommend to define values of step parameters via .pipeline/config.yml file . In this case, calling the step is essentially reduced to defining the step name. Calling the step can be done either in an orchestrator specific way (e.g. via a Jenkins library step) or on the command line. Jenkins Command Line library ( 'piper-lib-os' ) apiProxyList script: this piper apiProxyList Outputs \u00b6 Output type Details commonPipelineEnvironment custom/apiProxyList With this step, you can retrieve all the API proxies from the API portal. An API Proxy is a concept in API Management, capability of SAP Integration Suite, which anonymizes any HTTP endpoints like REST, OData, or SOAP and enhance it with policies and routes. An API proxy is a discrete representation of an API. It is implemented as a set of configuration files, policies, and code snippets that rely on the resource information provided by API Management. For more information, see the document API Proxy To consume the ApiProxyList step, proceed as follows: Copy the SAP API management service key from the SAP BTP cockpit. Go to instance and subscriptions \u2192 service API Management, API portal, which was created under apiportal-apiaccess plan. Store your service key created for API Management in the Jenkins server as a secret text. Create a new Jenkins pipeline designated for the ApiProxyList step. Execute the pipeline and validate the step exection results as explained in the blog Integration Suite Piper commands Use the ApiProxyList step to get the api proxy list from the API portal. ApiProxyList only supports GET operation. Prerequisites \u00b6 Parameters \u00b6 Overview - Step \u00b6 Name Mandatory Additional information apiServiceKey (yes) pass via ENV or Jenkins credentials ( apimApiServiceKeyCredentialsId ) script (yes) reference to Jenkins main pipeline script count no expand no filter no orderby no search no select no skip no top no verbose no activates debug output Overview - Execution Environment \u00b6 Orchestrator-specific only These parameters are relevant for orchestrator usage and not considered when using the command line option. Name Mandatory Additional information Details \u00b6 apiServiceKey \u00b6 Service key JSON string to access the API Management Runtime service instance of plan 'api' back to overview Scope Details Aliases - Type string Mandatory yes Default $PIPER_apiServiceKey (if set) Secret yes Configuration scope \u2612 parameter \u2610 general \u2610 steps \u2610 stages Resource references Jenkins credential id: id: apimApiServiceKeyCredentialsId reference to: apiServiceKey count \u00b6 Include count of items. back to overview Scope Details Aliases - Type bool Mandatory no Default false Possible values - true - false Secret no Configuration scope \u2612 parameter \u2610 general \u2612 steps \u2612 stages Resource references none expand \u00b6 Expand related entities. back to overview Scope Details Aliases - Type string Mandatory no Default $PIPER_expand (if set) Secret no Configuration scope \u2612 parameter \u2610 general \u2612 steps \u2612 stages Resource references none filter \u00b6 Filter items by property values. back to overview Scope Details Aliases - Type string Mandatory no Default $PIPER_filter (if set) Secret no Configuration scope \u2612 parameter \u2610 general \u2612 steps \u2612 stages Resource references none orderby \u00b6 Order by property values. back to overview Scope Details Aliases - Type string Mandatory no Default $PIPER_orderby (if set) Secret no Configuration scope \u2612 parameter \u2610 general \u2612 steps \u2612 stages Resource references none script \u00b6 The common script environment of the Jenkinsfile running. Typically the reference to the script calling the pipeline step is provided with the this parameter, as in script: this . This allows the function to access the commonPipelineEnvironment for retrieving, e.g. configuration parameters. back to overview Scope Details Aliases - Type Jenkins Script Mandatory yes Default Secret no Configuration scope \u2610 parameter \u2610 general \u2610 steps \u2610 stages Resource references none search \u00b6 Search items by search phrases. back to overview Scope Details Aliases - Type string Mandatory no Default $PIPER_search (if set) Secret no Configuration scope \u2612 parameter \u2610 general \u2612 steps \u2612 stages Resource references none select \u00b6 Select properties to be returned. back to overview Scope Details Aliases - Type string Mandatory no Default $PIPER_select (if set) Secret no Configuration scope \u2612 parameter \u2610 general \u2612 steps \u2612 stages Resource references none skip \u00b6 Skip the first n items. back to overview Scope Details Aliases - Type int Mandatory no Default 0 Secret no Configuration scope \u2612 parameter \u2610 general \u2612 steps \u2612 stages Resource references none top \u00b6 Show only the first n items. back to overview Scope Details Aliases - Type int Mandatory no Default 0 Secret no Configuration scope \u2612 parameter \u2610 general \u2612 steps \u2612 stages Resource references none verbose \u00b6 verbose output back to overview Scope Details Aliases - Type bool Mandatory no Default false Possible values - true - false Secret no Configuration scope \u2612 parameter \u2612 general \u2612 steps \u2612 stages Resource references none apimApiServiceKeyCredentialsId \u00b6 Jenkins secret text credential ID containing the service key to the API Management Runtime service instance of plan 'api' back to overview Scope Details Aliases - Type string Configuration scope \u2612 parameter \u2612 general \u2612 steps \u2612 stages Example \u00b6 Configuration example for a Jenkinsfile : apiProxyList script: this Configuration example for a YAML file(for example .pipeline/config.yaml ): steps : <...> apiProxyList : apimApiServiceKeyCredentialsId : 'MY_API_SERVICE_KEY' Top : MY_API_PROXY_GET_N_ENTITIES Skip : MY_API_PROXY_SKIP_N_ENTITIES Filter : MY_API_PROXY_FILTER_BY_ENTITY_FIELD Orderby : MY_API_PROXY_ORDER_BY_ENTITY_FIELD Count : MY_API_PROXY_ORDER_ENTITY_COUNT Search : MY_API_PROXY_SEARCH_BY_ENTITY_FIELD Select : MY_API_PROXY_SELECT_BY_ENTITY_FIELD Expand : MY_API_PROXY_EXPAND_BY_ENTITY_FIELD","title":"apiProxyList"},{"location":"steps/apiProxyList/#apiproxylist","text":"Get the List of an API Proxy from the API Portal","title":"apiProxyList"},{"location":"steps/apiProxyList/#description","text":"With this step you can get list of all API Proxy from the API Portal using the OData API. Learn more about the API Management API for getting list of an API proxy artifact here .","title":"Description"},{"location":"steps/apiProxyList/#usage","text":"We recommend to define values of step parameters via .pipeline/config.yml file . In this case, calling the step is essentially reduced to defining the step name. Calling the step can be done either in an orchestrator specific way (e.g. via a Jenkins library step) or on the command line. Jenkins Command Line library ( 'piper-lib-os' ) apiProxyList script: this piper apiProxyList","title":"Usage"},{"location":"steps/apiProxyList/#outputs","text":"Output type Details commonPipelineEnvironment custom/apiProxyList With this step, you can retrieve all the API proxies from the API portal. An API Proxy is a concept in API Management, capability of SAP Integration Suite, which anonymizes any HTTP endpoints like REST, OData, or SOAP and enhance it with policies and routes. An API proxy is a discrete representation of an API. It is implemented as a set of configuration files, policies, and code snippets that rely on the resource information provided by API Management. For more information, see the document API Proxy To consume the ApiProxyList step, proceed as follows: Copy the SAP API management service key from the SAP BTP cockpit. Go to instance and subscriptions \u2192 service API Management, API portal, which was created under apiportal-apiaccess plan. Store your service key created for API Management in the Jenkins server as a secret text. Create a new Jenkins pipeline designated for the ApiProxyList step. Execute the pipeline and validate the step exection results as explained in the blog Integration Suite Piper commands Use the ApiProxyList step to get the api proxy list from the API portal. ApiProxyList only supports GET operation.","title":"Outputs"},{"location":"steps/apiProxyList/#prerequisites","text":"","title":"Prerequisites"},{"location":"steps/apiProxyList/#parameters","text":"","title":"Parameters"},{"location":"steps/apiProxyList/#overview-step","text":"Name Mandatory Additional information apiServiceKey (yes) pass via ENV or Jenkins credentials ( apimApiServiceKeyCredentialsId ) script (yes) reference to Jenkins main pipeline script count no expand no filter no orderby no search no select no skip no top no verbose no activates debug output","title":"Overview - Step"},{"location":"steps/apiProxyList/#overview-execution-environment","text":"Orchestrator-specific only These parameters are relevant for orchestrator usage and not considered when using the command line option. Name Mandatory Additional information","title":"Overview - Execution Environment"},{"location":"steps/apiProxyList/#details","text":"","title":"Details"},{"location":"steps/apiProxyList/#apiservicekey","text":"Service key JSON string to access the API Management Runtime service instance of plan 'api' back to overview Scope Details Aliases - Type string Mandatory yes Default $PIPER_apiServiceKey (if set) Secret yes Configuration scope \u2612 parameter \u2610 general \u2610 steps \u2610 stages Resource references Jenkins credential id: id: apimApiServiceKeyCredentialsId reference to: apiServiceKey","title":"apiServiceKey"},{"location":"steps/apiProxyList/#count","text":"Include count of items. back to overview Scope Details Aliases - Type bool Mandatory no Default false Possible values - true - false Secret no Configuration scope \u2612 parameter \u2610 general \u2612 steps \u2612 stages Resource references none","title":"count"},{"location":"steps/apiProxyList/#expand","text":"Expand related entities. back to overview Scope Details Aliases - Type string Mandatory no Default $PIPER_expand (if set) Secret no Configuration scope \u2612 parameter \u2610 general \u2612 steps \u2612 stages Resource references none","title":"expand"},{"location":"steps/apiProxyList/#filter","text":"Filter items by property values. back to overview Scope Details Aliases - Type string Mandatory no Default $PIPER_filter (if set) Secret no Configuration scope \u2612 parameter \u2610 general \u2612 steps \u2612 stages Resource references none","title":"filter"},{"location":"steps/apiProxyList/#orderby","text":"Order by property values. back to overview Scope Details Aliases - Type string Mandatory no Default $PIPER_orderby (if set) Secret no Configuration scope \u2612 parameter \u2610 general \u2612 steps \u2612 stages Resource references none","title":"orderby"},{"location":"steps/apiProxyList/#script","text":"The common script environment of the Jenkinsfile running. Typically the reference to the script calling the pipeline step is provided with the this parameter, as in script: this . This allows the function to access the commonPipelineEnvironment for retrieving, e.g. configuration parameters. back to overview Scope Details Aliases - Type Jenkins Script Mandatory yes Default Secret no Configuration scope \u2610 parameter \u2610 general \u2610 steps \u2610 stages Resource references none","title":"script"},{"location":"steps/apiProxyList/#search","text":"Search items by search phrases. back to overview Scope Details Aliases - Type string Mandatory no Default $PIPER_search (if set) Secret no Configuration scope \u2612 parameter \u2610 general \u2612 steps \u2612 stages Resource references none","title":"search"},{"location":"steps/apiProxyList/#select","text":"Select properties to be returned. back to overview Scope Details Aliases - Type string Mandatory no Default $PIPER_select (if set) Secret no Configuration scope \u2612 parameter \u2610 general \u2612 steps \u2612 stages Resource references none","title":"select"},{"location":"steps/apiProxyList/#skip","text":"Skip the first n items. back to overview Scope Details Aliases - Type int Mandatory no Default 0 Secret no Configuration scope \u2612 parameter \u2610 general \u2612 steps \u2612 stages Resource references none","title":"skip"},{"location":"steps/apiProxyList/#top","text":"Show only the first n items. back to overview Scope Details Aliases - Type int Mandatory no Default 0 Secret no Configuration scope \u2612 parameter \u2610 general \u2612 steps \u2612 stages Resource references none","title":"top"},{"location":"steps/apiProxyList/#verbose","text":"verbose output back to overview Scope Details Aliases - Type bool Mandatory no Default false Possible values - true - false Secret no Configuration scope \u2612 parameter \u2612 general \u2612 steps \u2612 stages Resource references none","title":"verbose"},{"location":"steps/apiProxyList/#apimapiservicekeycredentialsid","text":"Jenkins secret text credential ID containing the service key to the API Management Runtime service instance of plan 'api' back to overview Scope Details Aliases - Type string Configuration scope \u2612 parameter \u2612 general \u2612 steps \u2612 stages","title":"apimApiServiceKeyCredentialsId"},{"location":"steps/apiProxyList/#example","text":"Configuration example for a Jenkinsfile : apiProxyList script: this Configuration example for a YAML file(for example .pipeline/config.yaml ): steps : <...> apiProxyList : apimApiServiceKeyCredentialsId : 'MY_API_SERVICE_KEY' Top : MY_API_PROXY_GET_N_ENTITIES Skip : MY_API_PROXY_SKIP_N_ENTITIES Filter : MY_API_PROXY_FILTER_BY_ENTITY_FIELD Orderby : MY_API_PROXY_ORDER_BY_ENTITY_FIELD Count : MY_API_PROXY_ORDER_ENTITY_COUNT Search : MY_API_PROXY_SEARCH_BY_ENTITY_FIELD Select : MY_API_PROXY_SELECT_BY_ENTITY_FIELD Expand : MY_API_PROXY_EXPAND_BY_ENTITY_FIELD","title":"Example"},{"location":"steps/apiProxyUpload/","text":"apiProxyUpload \u00b6 Upload an api proxy artifact in to the API Portal Description \u00b6 With this step you can upload an api proxy artifact in to the API Portal using the OData API. Learn more about the SAP API Management API for uploading an api proxy artifact here . Usage \u00b6 We recommend to define values of step parameters via .pipeline/config.yml file . In this case, calling the step is essentially reduced to defining the step name. Calling the step can be done either in an orchestrator specific way (e.g. via a Jenkins library step) or on the command line. Jenkins Command Line library ( 'piper-lib-os' ) apiProxyUpload script: this piper apiProxyUpload Prerequisites \u00b6 Parameters \u00b6 Overview - Step \u00b6 Name Mandatory Additional information apiServiceKey (yes) pass via ENV or Jenkins credentials ( apimApiServiceKeyCredentialsId ) filePath yes script (yes) reference to Jenkins main pipeline script verbose no activates debug output Overview - Execution Environment \u00b6 Orchestrator-specific only These parameters are relevant for orchestrator usage and not considered when using the command line option. Name Mandatory Additional information Details \u00b6 apiServiceKey \u00b6 Service key JSON string to access the API Management Runtime service instance of plan 'api' back to overview Scope Details Aliases - Type string Mandatory yes Default $PIPER_apiServiceKey (if set) Secret yes Configuration scope \u2612 parameter \u2610 general \u2610 steps \u2610 stages Resource references Jenkins credential id: id: apimApiServiceKeyCredentialsId reference to: apiServiceKey filePath \u00b6 Specifies api proxy zip artifact relative file path back to overview Scope Details Aliases - Type string Mandatory yes Default $PIPER_filePath (if set) Secret no Configuration scope \u2612 parameter \u2610 general \u2612 steps \u2612 stages Resource references none script \u00b6 The common script environment of the Jenkinsfile running. Typically the reference to the script calling the pipeline step is provided with the this parameter, as in script: this . This allows the function to access the commonPipelineEnvironment for retrieving, e.g. configuration parameters. back to overview Scope Details Aliases - Type Jenkins Script Mandatory yes Default Secret no Configuration scope \u2610 parameter \u2610 general \u2610 steps \u2610 stages Resource references none verbose \u00b6 verbose output back to overview Scope Details Aliases - Type bool Mandatory no Default false Possible values - true - false Secret no Configuration scope \u2612 parameter \u2612 general \u2612 steps \u2612 stages Resource references none apimApiServiceKeyCredentialsId \u00b6 Jenkins secret text credential ID containing the service key to the API Management Runtime service instance of plan 'api' back to overview Scope Details Aliases - Type string Configuration scope \u2612 parameter \u2612 general \u2612 steps \u2612 stages Example \u00b6 Example configuration for the use in a Jenkinsfile . apiProxyUpload script: this Example for the use in a YAML configuration file (such as .pipeline/config.yaml ). steps : <...> apiProxyUpload : apimApiServiceKeyCredentialsId : 'MY_API_SERVICE_KEY' filePath : MY_API_PROXY_ZIP_FILE_PATH","title":"apiProxyUpload"},{"location":"steps/apiProxyUpload/#apiproxyupload","text":"Upload an api proxy artifact in to the API Portal","title":"apiProxyUpload"},{"location":"steps/apiProxyUpload/#description","text":"With this step you can upload an api proxy artifact in to the API Portal using the OData API. Learn more about the SAP API Management API for uploading an api proxy artifact here .","title":"Description"},{"location":"steps/apiProxyUpload/#usage","text":"We recommend to define values of step parameters via .pipeline/config.yml file . In this case, calling the step is essentially reduced to defining the step name. Calling the step can be done either in an orchestrator specific way (e.g. via a Jenkins library step) or on the command line. Jenkins Command Line library ( 'piper-lib-os' ) apiProxyUpload script: this piper apiProxyUpload","title":"Usage"},{"location":"steps/apiProxyUpload/#prerequisites","text":"","title":"Prerequisites"},{"location":"steps/apiProxyUpload/#parameters","text":"","title":"Parameters"},{"location":"steps/apiProxyUpload/#overview-step","text":"Name Mandatory Additional information apiServiceKey (yes) pass via ENV or Jenkins credentials ( apimApiServiceKeyCredentialsId ) filePath yes script (yes) reference to Jenkins main pipeline script verbose no activates debug output","title":"Overview - Step"},{"location":"steps/apiProxyUpload/#overview-execution-environment","text":"Orchestrator-specific only These parameters are relevant for orchestrator usage and not considered when using the command line option. Name Mandatory Additional information","title":"Overview - Execution Environment"},{"location":"steps/apiProxyUpload/#details","text":"","title":"Details"},{"location":"steps/apiProxyUpload/#apiservicekey","text":"Service key JSON string to access the API Management Runtime service instance of plan 'api' back to overview Scope Details Aliases - Type string Mandatory yes Default $PIPER_apiServiceKey (if set) Secret yes Configuration scope \u2612 parameter \u2610 general \u2610 steps \u2610 stages Resource references Jenkins credential id: id: apimApiServiceKeyCredentialsId reference to: apiServiceKey","title":"apiServiceKey"},{"location":"steps/apiProxyUpload/#filepath","text":"Specifies api proxy zip artifact relative file path back to overview Scope Details Aliases - Type string Mandatory yes Default $PIPER_filePath (if set) Secret no Configuration scope \u2612 parameter \u2610 general \u2612 steps \u2612 stages Resource references none","title":"filePath"},{"location":"steps/apiProxyUpload/#script","text":"The common script environment of the Jenkinsfile running. Typically the reference to the script calling the pipeline step is provided with the this parameter, as in script: this . This allows the function to access the commonPipelineEnvironment for retrieving, e.g. configuration parameters. back to overview Scope Details Aliases - Type Jenkins Script Mandatory yes Default Secret no Configuration scope \u2610 parameter \u2610 general \u2610 steps \u2610 stages Resource references none","title":"script"},{"location":"steps/apiProxyUpload/#verbose","text":"verbose output back to overview Scope Details Aliases - Type bool Mandatory no Default false Possible values - true - false Secret no Configuration scope \u2612 parameter \u2612 general \u2612 steps \u2612 stages Resource references none","title":"verbose"},{"location":"steps/apiProxyUpload/#apimapiservicekeycredentialsid","text":"Jenkins secret text credential ID containing the service key to the API Management Runtime service instance of plan 'api' back to overview Scope Details Aliases - Type string Configuration scope \u2612 parameter \u2612 general \u2612 steps \u2612 stages","title":"apimApiServiceKeyCredentialsId"},{"location":"steps/apiProxyUpload/#example","text":"Example configuration for the use in a Jenkinsfile . apiProxyUpload script: this Example for the use in a YAML configuration file (such as .pipeline/config.yaml ). steps : <...> apiProxyUpload : apimApiServiceKeyCredentialsId : 'MY_API_SERVICE_KEY' filePath : MY_API_PROXY_ZIP_FILE_PATH","title":"Example"},{"location":"steps/artifactPrepareVersion/","text":"artifactPrepareVersion \u00b6 Prepares and potentially updates the artifact's version before building the artifact. Description \u00b6 Prepares and potentially updates the artifact's version before building the artifact. The continuous delivery process requires that each build is done with a unique version number. There are two common patterns found: 1. Continuous Deployment pattern with automatic versioning \u00b6 The team has full authority on <major>.<minor>.<patch> and can increase any part whenever required. Nonetheless, the automatic versioning makes sure that every build will create a unique version by appending <major>.<minor>.<patch> with a buildversion (we use a timestamp) and optionally the commitId. In order to represent this version also in the version control system the new unique version will be pushed with a dedicated tag ( <tagPrefix><major>.<minor>.<patch><unique extension> ). Depending on the build tool used and thus the allowed versioning format the <unique extension> varies. Remarks: There is no commit to master since this would create a perpetuum mobile and just trigger the next automatic build with automatic versioning, and so on ... Not creating a tag would lead to a loss of the final artifact version in scm which often is not acceptable You need to ensure that your CI/CD system can push back to your SCM (via providing ssh or HTTP(s) credentials) This pattern is the default behavior ( versioningType: cloud ) since this is suitable for most cloud deliveries. It is possible to use versioningType: cloud_noTag which has a slightly different behavior than described above: The new version will NOT be written as tag into the SCM but it is only available in the corresponding CI/CD workspace IMPORTANT NOTICE: Using the option cloud_noTag should not be picked in case you need to ensure a fully traceable path from SCM commit to your build artifact. 2. Pure version <major>.<minor>.<patch> \u00b6 This pattern is often used by teams that have cloud deliveries with no fully automated procedure, e.g. delivery after each takt. Another typical use-case is development of a library with regular releases where the versioning pattern should be consumable and thus ideally complies to a <major>.<minor>.<patch> pattern. The version is then either manually set by the team in the course of the development process or automatically pushed to master after a successful release. Unlike for the Continuous Deloyment pattern described above, in this case there is no dedicated tagging required for the build process since the version is already available in the repository. Configuration of this pattern is done via versioningType: library . Support of additional build tools \u00b6 Besides the buildTools provided out of the box (like maven , mta , npm , ...) it is possible to set buildTool: custom . This allows you to provide automatic versioning for tools using a: file with the version as only content: \u00b6 Define buildTool: custom as well as filePath: <path to your file> Please note: <path to your file> need to point either to a *.txt file or to a file without extension. ini file containing the version: \u00b6 Define buildTool: custom , filePath: <path to your ini-file> as well as parameters versionSection and versionSource to point to the version location (section & parameter name) within the file. Please note: <path to your file> need to point either to a *.cfg or a *.ini file. json file containing the version: \u00b6 Define buildTool: custom , filePath: <path to your *.json file as well as parameter versionSource to point to the parameter containing the version. yaml file containing the version \u00b6 Define buildTool: custom , filePath: <path to your *.yml/*.yaml file as well as parameter versionSource to point to the parameter containing the version. Usage \u00b6 We recommend to define values of step parameters via .pipeline/config.yml file . In this case, calling the step is essentially reduced to defining the step name. Calling the step can be done either in an orchestrator specific way (e.g. via a Jenkins library step) or on the command line. Jenkins Command Line library ( 'piper-lib-os' ) artifactPrepareVersion script: this piper artifactPrepareVersion Outputs \u00b6 Output type Details commonPipelineEnvironment artifactVersion originalArtifactVersion artifactId groupId packaging git/commitId git/headCommitId git/commitMessage Parameters \u00b6 Overview - Step \u00b6 Name Mandatory Additional information CAPVersioningPreference (yes) mandatory in case of: - buildTool = CAP buildTool yes script (yes) reference to Jenkins main pipeline script additionalTargetDescriptors no additionalTargetTools no commitUserName no customTlsCertificateLinks no customVersionField no customVersionSection no customVersioningScheme no dockerVersionSource no fetchCoordinates no filePath no globalSettingsFile no includeCommitId no isOptimizedAndScheduled no m2Path no password no pass via ENV, Vault or Jenkins credentials ( gitHttpsCredentialsId ) projectSettingsFile no shortCommitId no tagPrefix no unixTimestamp no username no pass via ENV, Vault or Jenkins credentials ( gitHttpsCredentialsId ) verbose no activates debug output versioningTemplate no versioningType no Overview - Execution Environment \u00b6 Orchestrator-specific only These parameters are relevant for orchestrator usage and not considered when using the command line option. Name Mandatory Additional information containerCommand no containerShell no dockerEnvVars no dockerImage no dockerName no dockerOptions no dockerPullImage no dockerVolumeBind no dockerWorkspace no Details \u00b6 CAPVersioningPreference \u00b6 If maven is chosen (default value), then the step expects a pom.xml file in the project's root folder. Alternatively, you can specify the path to the file using the filePath parameter. If npm is chosen, then the step expects a package.json file in the project's root folder. Alternatively, you can specify the path to the file using the filePath parameter. In case you want to propagate version to addition file(s), it can be done via additionalTargetTools and additionalTargetDescriptors parameters. back to overview Scope Details Aliases - Type string Mandatory mandatory in case of: - buildTool = CAP Default maven Possible values - maven - npm Secret no Configuration scope \u2612 parameter \u2610 general \u2612 steps \u2612 stages Resource references none additionalTargetDescriptors \u00b6 Only for versioning types cloud and cloud_noTag . In case default build descriptors cannot be used for additionalTargetTools this parameter allows to define a dedicated search pattern per build tool. For each entry in additionalTargetTools a dedicated entry has to be maintained. You can use either a file name or a glob pattern like **/package.json . For helm the default value is **/Chart.yaml , thus typically no adaptions are required, but if a helm chart contains nested chart(s), the parameter needs to be set explicitly. back to overview Scope Details Aliases - Type []string Mandatory no Default $PIPER_additionalTargetDescriptors (if set) Secret no Configuration scope \u2612 parameter \u2610 general \u2612 steps \u2612 stages Resource references none additionalTargetTools \u00b6 Only for versioning types cloud and cloud_noTag . This parameter allows you to propagate the version to other build-tool specific descriptors. If the parameter additionalTargetDescriptors is not defined the default build descriptors are used. One example is to propagate the version into a helm chart. This can be achieved like steps: artifactPrepareVersion: additionalTargetTools: - helm back to overview Scope Details Aliases - Type []string Mandatory no Default $PIPER_additionalTargetTools (if set) Possible values - custom - docker - dub - golang - gradle - helm - maven - mta - npm - pip - sbt - yarn Secret no Configuration scope \u2612 parameter \u2610 general \u2612 steps \u2612 stages Resource references none buildTool \u00b6 Defines the tool which is used for building the artifact. back to overview Scope Details Aliases - Type string Mandatory yes Default $PIPER_buildTool (if set) Possible values - custom - docker - dub - golang - gradle - helm - maven - mta - npm - pip - sbt - yarn - CAP Secret no Configuration scope \u2612 parameter \u2612 general \u2612 steps \u2612 stages Resource references none commitUserName \u00b6 Defines the user name which appears in version control for the versioning update (in case versioningType: cloud ). back to overview Scope Details Aliases gitUserName Type string Mandatory no Default Project Piper Secret no Configuration scope \u2612 parameter \u2610 general \u2612 steps \u2612 stages Resource references none containerCommand \u00b6 Jenkins-specific: Used for proper environment setup. Kubernetes only: Allows to specify start command for container created with dockerImage parameter to overwrite Piper default (/usr/bin/tail -f /dev/null). back to overview Scope Details Aliases - Type string Mandatory no Default Secret no Configuration scope \u2612 parameter \u2612 general \u2612 steps \u2612 stages Resource references none containerShell \u00b6 Jenkins-specific: Used for proper environment setup. Allows to specify the shell to be executed for container with containerName. back to overview Scope Details Aliases - Type string Mandatory no Default Secret no Configuration scope \u2612 parameter \u2612 general \u2612 steps \u2612 stages Resource references none customTlsCertificateLinks \u00b6 List containing download links of custom TLS certificates. This is required to ensure trusted connections to registries with custom certificates. back to overview Scope Details Aliases - Type []string Mandatory no Default buildTool= maven : <nil> buildTool= gradle : <nil> Secret no Configuration scope \u2612 parameter \u2612 general \u2612 steps \u2612 stages Resource references none customVersionField \u00b6 For buildTool: custom : Defines the field which contains the version in the descriptor file. back to overview Scope Details Aliases - Type string Mandatory no Default $PIPER_customVersionField (if set) Secret no Configuration scope \u2612 parameter \u2610 general \u2612 steps \u2612 stages Resource references none customVersionSection \u00b6 For buildTool: custom : Defines the section for version retrieval in vase a .ini/ .cfg file is used. back to overview Scope Details Aliases - Type string Mandatory no Default $PIPER_customVersionSection (if set) Secret no Configuration scope \u2612 parameter \u2610 general \u2612 steps \u2612 stages Resource references none customVersioningScheme \u00b6 For buildTool: custom : Defines the versioning scheme to be used. back to overview Scope Details Aliases - Type string Mandatory no Default maven Possible values - docker - maven - pep440 - semver2 Secret no Configuration scope \u2612 parameter \u2610 general \u2612 steps \u2612 stages Resource references none dockerEnvVars \u00b6 Environment variables to set in the container, e.g. [http_proxy: \"proxy:8080\"]. back to overview Scope Details Aliases - Type map[string]string Mandatory no Default Secret no Configuration scope \u2612 parameter \u2612 general \u2612 steps \u2612 stages Resource references none dockerImage \u00b6 Name of the docker image that should be used. If empty, Docker is not used and the command is executed directly on the Jenkins system. back to overview Scope Details Aliases - Type string Mandatory no Default buildTool= maven : maven:3.8.6-jdk-8 buildTool= CAP : maven:3.8.6-jdk-8 buildTool= gradle : gradle:6-jdk11-alpine Secret no Configuration scope \u2612 parameter \u2612 general \u2612 steps \u2612 stages Resource references none dockerName \u00b6 Kubernetes only: Name of the container launching dockerImage. SideCar only: Name of the container in local network. back to overview Scope Details Aliases - Type string Mandatory no Default Secret no Configuration scope \u2612 parameter \u2612 general \u2612 steps \u2612 stages Resource references none dockerOptions \u00b6 Docker options to be set when starting the container. back to overview Scope Details Aliases - Type []string Mandatory no Default Secret no Configuration scope \u2612 parameter \u2612 general \u2612 steps \u2612 stages Resource references none dockerPullImage \u00b6 Set this to 'false' to bypass a docker image pull. Useful during development process. Allows testing of images which are available in the local registry only. back to overview Scope Details Aliases - Type bool Mandatory no Default buildTool= maven : true buildTool= CAP : true buildTool= gradle : true Possible values - true - false Secret no Configuration scope \u2612 parameter \u2612 general \u2612 steps \u2612 stages Resource references none dockerVersionSource \u00b6 For buildTool: docker : Defines the source of the version. Can be FROM , any supported buildTool or an environment variable name. back to overview Scope Details Aliases - Type string Mandatory no Default $PIPER_dockerVersionSource (if set) Secret no Configuration scope \u2612 parameter \u2610 general \u2612 steps \u2612 stages Resource references none dockerVolumeBind \u00b6 Jenkins-specific: Used for proper environment setup. Volumes that should be mounted into the docker container. back to overview Scope Details Aliases - Type map[string]string Mandatory no Default Secret no Configuration scope \u2612 parameter \u2612 general \u2612 steps \u2612 stages Resource references none dockerWorkspace \u00b6 Jenkins-specific: Used for proper environment setup. Kubernetes only: Specifies a dedicated user home directory for the container which will be passed as value for environment variable HOME . back to overview Scope Details Aliases - Type string Mandatory no Default Secret no Configuration scope \u2612 parameter \u2612 general \u2612 steps \u2612 stages Resource references none fetchCoordinates \u00b6 If set to true the step will retreive artifact coordinates and store them in the common pipeline environment. back to overview Scope Details Aliases - Type bool Mandatory no Default false Possible values - true - false Secret no Configuration scope \u2612 parameter \u2610 general \u2612 steps \u2612 stages Resource references none filePath \u00b6 Defines a custom path to the descriptor file. Build tool specific defaults are used (e.g. maven: pom.xml , npm: package.json , mta: mta.yaml ). back to overview Scope Details Aliases - Type string Mandatory no Default $PIPER_filePath (if set) Secret no Configuration scope \u2612 parameter \u2610 general \u2612 steps \u2612 stages Resource references none globalSettingsFile \u00b6 Maven only - Path to the mvn settings file that should be used as global settings file. back to overview Scope Details Aliases maven/globalSettingsFile Type string Mandatory no Default $PIPER_globalSettingsFile (if set) Secret no Configuration scope \u2612 parameter \u2612 general \u2612 steps \u2612 stages Resource references none includeCommitId \u00b6 Defines if the automatically generated version ( versioningType: cloud ) should include the commit id hash. back to overview Scope Details Aliases - Type bool Mandatory no Default true Possible values - true - false Secret no Configuration scope \u2612 parameter \u2610 general \u2612 steps \u2612 stages Resource references none isOptimizedAndScheduled \u00b6 Whether the pipeline runs in optimized mode and the current execution is a scheduled one back to overview Scope Details Aliases - Type bool Mandatory no Default false Possible values - true - false Secret no Configuration scope \u2612 parameter \u2610 general \u2610 steps \u2610 stages Resource references commonPipelineEnvironment : reference to: custom/isOptimizedAndScheduled m2Path \u00b6 Maven only - Path to the location of the local repository that should be used. back to overview Scope Details Aliases maven/m2Path Type string Mandatory no Default $PIPER_m2Path (if set) Secret no Configuration scope \u2612 parameter \u2612 general \u2612 steps \u2612 stages Resource references none password \u00b6 Password/token for git authentication. back to overview Scope Details Aliases access_token Type string Mandatory no Default $PIPER_password (if set) Secret yes Configuration scope \u2612 parameter \u2610 general \u2612 steps \u2612 stages Resource references Jenkins credential id: id: gitHttpsCredentialsId reference to: password Vault resource: name: gitHttpsCredentialVaultSecretName default value: gitHttpsCredential Vault paths: $(vaultPath)/gitHttpsCredential $(vaultBasePath)/$(vaultPipelineName)/gitHttpsCredential $(vaultBasePath)/GROUP-SECRETS/gitHttpsCredential projectSettingsFile \u00b6 Maven only - Path to the mvn settings file that should be used as project settings file. back to overview Scope Details Aliases maven/projectSettingsFile Type string Mandatory no Default $PIPER_projectSettingsFile (if set) Secret no Configuration scope \u2612 parameter \u2612 general \u2612 steps \u2612 stages Resource references none script \u00b6 The common script environment of the Jenkinsfile running. Typically the reference to the script calling the pipeline step is provided with the this parameter, as in script: this . This allows the function to access the commonPipelineEnvironment for retrieving, e.g. configuration parameters. back to overview Scope Details Aliases - Type Jenkins Script Mandatory yes Default Secret no Configuration scope \u2610 parameter \u2610 general \u2610 steps \u2610 stages Resource references none shortCommitId \u00b6 Defines if a short version of the commitId should be used. GitHub format is used (first 7 characters). back to overview Scope Details Aliases - Type bool Mandatory no Default false Possible values - true - false Secret no Configuration scope \u2612 parameter \u2610 general \u2612 steps \u2612 stages Resource references none tagPrefix \u00b6 Defines the prefix which is used for the git tag which is written during the versioning run (only versioningType: cloud ). back to overview Scope Details Aliases - Type string Mandatory no Default build_ Secret no Configuration scope \u2612 parameter \u2610 general \u2612 steps \u2612 stages Resource references none unixTimestamp \u00b6 Defines if the Unix timestamp number should be used as build number instead of the standard date format. back to overview Scope Details Aliases - Type bool Mandatory no Default false Possible values - true - false Secret no Configuration scope \u2612 parameter \u2610 general \u2612 steps \u2612 stages Resource references none username \u00b6 User name for git authentication back to overview Scope Details Aliases - Type string Mandatory no Default $PIPER_username (if set) Secret yes Configuration scope \u2612 parameter \u2610 general \u2612 steps \u2612 stages Resource references Jenkins credential id: id: gitHttpsCredentialsId reference to: username Vault resource: name: gitHttpsCredentialVaultSecretName default value: gitHttpsCredential Vault paths: $(vaultPath)/gitHttpsCredential $(vaultBasePath)/$(vaultPipelineName)/gitHttpsCredential $(vaultBasePath)/GROUP-SECRETS/gitHttpsCredential verbose \u00b6 verbose output back to overview Scope Details Aliases - Type bool Mandatory no Default false Possible values - true - false Secret no Configuration scope \u2612 parameter \u2612 general \u2612 steps \u2612 stages Resource references none versioningTemplate \u00b6 DEPRECATED: Defines the template for the automatic version which will be created back to overview Scope Details Aliases - Type string Mandatory no Default $PIPER_versioningTemplate (if set) Secret no Configuration scope \u2612 parameter \u2610 general \u2612 steps \u2612 stages Resource references none versioningType \u00b6 Defines the type of versioning: cloud : fully automatic while also commiting a tag into the git repository containing the updated build descriptors cloud_noTag : fully automatic but no tag created library : manual, i.e. the pipeline will pick up the version from the build descriptor, but not generate a new version Please note: Type cloud will automatically fall back to cloud_noTag in case a pull request is being built or in case the pipeline runs in optimized and scheduled mode (in this mode no build is being performed and thus no version tag is required to persist the build input) back to overview Scope Details Aliases - Type string Mandatory no Default cloud Possible values - cloud - cloud_noTag - library Secret no Configuration scope \u2612 parameter \u2610 general \u2612 steps \u2612 stages Resource references none gitHttpsCredentialsId \u00b6 Jenkins 'Username with password' credentials ID containing username/password for http access to your git repository. back to overview Scope Details Aliases - Type string Configuration scope \u2612 parameter \u2612 general \u2612 steps \u2612 stages gitSshKeyCredentialsId \u00b6 Jenkins 'SSH Username with private key' credentials ID ssh key for accessing your git repository. You can find details about how to generate an ssh key in the GitHub documentation . back to overview Scope Details Aliases gitCredentialsId ( deprecated ) Type string Configuration scope \u2612 parameter \u2612 general \u2612 steps \u2612 stages","title":"artifactPrepareVersion"},{"location":"steps/artifactPrepareVersion/#artifactprepareversion","text":"Prepares and potentially updates the artifact's version before building the artifact.","title":"artifactPrepareVersion"},{"location":"steps/artifactPrepareVersion/#description","text":"Prepares and potentially updates the artifact's version before building the artifact. The continuous delivery process requires that each build is done with a unique version number. There are two common patterns found:","title":"Description"},{"location":"steps/artifactPrepareVersion/#1-continuous-deployment-pattern-with-automatic-versioning","text":"The team has full authority on <major>.<minor>.<patch> and can increase any part whenever required. Nonetheless, the automatic versioning makes sure that every build will create a unique version by appending <major>.<minor>.<patch> with a buildversion (we use a timestamp) and optionally the commitId. In order to represent this version also in the version control system the new unique version will be pushed with a dedicated tag ( <tagPrefix><major>.<minor>.<patch><unique extension> ). Depending on the build tool used and thus the allowed versioning format the <unique extension> varies. Remarks: There is no commit to master since this would create a perpetuum mobile and just trigger the next automatic build with automatic versioning, and so on ... Not creating a tag would lead to a loss of the final artifact version in scm which often is not acceptable You need to ensure that your CI/CD system can push back to your SCM (via providing ssh or HTTP(s) credentials) This pattern is the default behavior ( versioningType: cloud ) since this is suitable for most cloud deliveries. It is possible to use versioningType: cloud_noTag which has a slightly different behavior than described above: The new version will NOT be written as tag into the SCM but it is only available in the corresponding CI/CD workspace IMPORTANT NOTICE: Using the option cloud_noTag should not be picked in case you need to ensure a fully traceable path from SCM commit to your build artifact.","title":"1. Continuous Deployment pattern with automatic versioning"},{"location":"steps/artifactPrepareVersion/#2-pure-version-majorminorpatch","text":"This pattern is often used by teams that have cloud deliveries with no fully automated procedure, e.g. delivery after each takt. Another typical use-case is development of a library with regular releases where the versioning pattern should be consumable and thus ideally complies to a <major>.<minor>.<patch> pattern. The version is then either manually set by the team in the course of the development process or automatically pushed to master after a successful release. Unlike for the Continuous Deloyment pattern described above, in this case there is no dedicated tagging required for the build process since the version is already available in the repository. Configuration of this pattern is done via versioningType: library .","title":"2. Pure version &lt;major&gt;.&lt;minor&gt;.&lt;patch&gt;"},{"location":"steps/artifactPrepareVersion/#support-of-additional-build-tools","text":"Besides the buildTools provided out of the box (like maven , mta , npm , ...) it is possible to set buildTool: custom . This allows you to provide automatic versioning for tools using a:","title":"Support of additional build tools"},{"location":"steps/artifactPrepareVersion/#file-with-the-version-as-only-content","text":"Define buildTool: custom as well as filePath: <path to your file> Please note: <path to your file> need to point either to a *.txt file or to a file without extension.","title":"file with the version as only content:"},{"location":"steps/artifactPrepareVersion/#ini-file-containing-the-version","text":"Define buildTool: custom , filePath: <path to your ini-file> as well as parameters versionSection and versionSource to point to the version location (section & parameter name) within the file. Please note: <path to your file> need to point either to a *.cfg or a *.ini file.","title":"ini file containing the version:"},{"location":"steps/artifactPrepareVersion/#json-file-containing-the-version","text":"Define buildTool: custom , filePath: <path to your *.json file as well as parameter versionSource to point to the parameter containing the version.","title":"json file containing the version:"},{"location":"steps/artifactPrepareVersion/#yaml-file-containing-the-version","text":"Define buildTool: custom , filePath: <path to your *.yml/*.yaml file as well as parameter versionSource to point to the parameter containing the version.","title":"yaml file containing the version"},{"location":"steps/artifactPrepareVersion/#usage","text":"We recommend to define values of step parameters via .pipeline/config.yml file . In this case, calling the step is essentially reduced to defining the step name. Calling the step can be done either in an orchestrator specific way (e.g. via a Jenkins library step) or on the command line. Jenkins Command Line library ( 'piper-lib-os' ) artifactPrepareVersion script: this piper artifactPrepareVersion","title":"Usage"},{"location":"steps/artifactPrepareVersion/#outputs","text":"Output type Details commonPipelineEnvironment artifactVersion originalArtifactVersion artifactId groupId packaging git/commitId git/headCommitId git/commitMessage","title":"Outputs"},{"location":"steps/artifactPrepareVersion/#parameters","text":"","title":"Parameters"},{"location":"steps/artifactPrepareVersion/#overview-step","text":"Name Mandatory Additional information CAPVersioningPreference (yes) mandatory in case of: - buildTool = CAP buildTool yes script (yes) reference to Jenkins main pipeline script additionalTargetDescriptors no additionalTargetTools no commitUserName no customTlsCertificateLinks no customVersionField no customVersionSection no customVersioningScheme no dockerVersionSource no fetchCoordinates no filePath no globalSettingsFile no includeCommitId no isOptimizedAndScheduled no m2Path no password no pass via ENV, Vault or Jenkins credentials ( gitHttpsCredentialsId ) projectSettingsFile no shortCommitId no tagPrefix no unixTimestamp no username no pass via ENV, Vault or Jenkins credentials ( gitHttpsCredentialsId ) verbose no activates debug output versioningTemplate no versioningType no","title":"Overview - Step"},{"location":"steps/artifactPrepareVersion/#overview-execution-environment","text":"Orchestrator-specific only These parameters are relevant for orchestrator usage and not considered when using the command line option. Name Mandatory Additional information containerCommand no containerShell no dockerEnvVars no dockerImage no dockerName no dockerOptions no dockerPullImage no dockerVolumeBind no dockerWorkspace no","title":"Overview - Execution Environment"},{"location":"steps/artifactPrepareVersion/#details","text":"","title":"Details"},{"location":"steps/artifactPrepareVersion/#capversioningpreference","text":"If maven is chosen (default value), then the step expects a pom.xml file in the project's root folder. Alternatively, you can specify the path to the file using the filePath parameter. If npm is chosen, then the step expects a package.json file in the project's root folder. Alternatively, you can specify the path to the file using the filePath parameter. In case you want to propagate version to addition file(s), it can be done via additionalTargetTools and additionalTargetDescriptors parameters. back to overview Scope Details Aliases - Type string Mandatory mandatory in case of: - buildTool = CAP Default maven Possible values - maven - npm Secret no Configuration scope \u2612 parameter \u2610 general \u2612 steps \u2612 stages Resource references none","title":"CAPVersioningPreference"},{"location":"steps/artifactPrepareVersion/#additionaltargetdescriptors","text":"Only for versioning types cloud and cloud_noTag . In case default build descriptors cannot be used for additionalTargetTools this parameter allows to define a dedicated search pattern per build tool. For each entry in additionalTargetTools a dedicated entry has to be maintained. You can use either a file name or a glob pattern like **/package.json . For helm the default value is **/Chart.yaml , thus typically no adaptions are required, but if a helm chart contains nested chart(s), the parameter needs to be set explicitly. back to overview Scope Details Aliases - Type []string Mandatory no Default $PIPER_additionalTargetDescriptors (if set) Secret no Configuration scope \u2612 parameter \u2610 general \u2612 steps \u2612 stages Resource references none","title":"additionalTargetDescriptors"},{"location":"steps/artifactPrepareVersion/#additionaltargettools","text":"Only for versioning types cloud and cloud_noTag . This parameter allows you to propagate the version to other build-tool specific descriptors. If the parameter additionalTargetDescriptors is not defined the default build descriptors are used. One example is to propagate the version into a helm chart. This can be achieved like steps: artifactPrepareVersion: additionalTargetTools: - helm back to overview Scope Details Aliases - Type []string Mandatory no Default $PIPER_additionalTargetTools (if set) Possible values - custom - docker - dub - golang - gradle - helm - maven - mta - npm - pip - sbt - yarn Secret no Configuration scope \u2612 parameter \u2610 general \u2612 steps \u2612 stages Resource references none","title":"additionalTargetTools"},{"location":"steps/artifactPrepareVersion/#buildtool","text":"Defines the tool which is used for building the artifact. back to overview Scope Details Aliases - Type string Mandatory yes Default $PIPER_buildTool (if set) Possible values - custom - docker - dub - golang - gradle - helm - maven - mta - npm - pip - sbt - yarn - CAP Secret no Configuration scope \u2612 parameter \u2612 general \u2612 steps \u2612 stages Resource references none","title":"buildTool"},{"location":"steps/artifactPrepareVersion/#commitusername","text":"Defines the user name which appears in version control for the versioning update (in case versioningType: cloud ). back to overview Scope Details Aliases gitUserName Type string Mandatory no Default Project Piper Secret no Configuration scope \u2612 parameter \u2610 general \u2612 steps \u2612 stages Resource references none","title":"commitUserName"},{"location":"steps/artifactPrepareVersion/#containercommand","text":"Jenkins-specific: Used for proper environment setup. Kubernetes only: Allows to specify start command for container created with dockerImage parameter to overwrite Piper default (/usr/bin/tail -f /dev/null). back to overview Scope Details Aliases - Type string Mandatory no Default Secret no Configuration scope \u2612 parameter \u2612 general \u2612 steps \u2612 stages Resource references none","title":"containerCommand"},{"location":"steps/artifactPrepareVersion/#containershell","text":"Jenkins-specific: Used for proper environment setup. Allows to specify the shell to be executed for container with containerName. back to overview Scope Details Aliases - Type string Mandatory no Default Secret no Configuration scope \u2612 parameter \u2612 general \u2612 steps \u2612 stages Resource references none","title":"containerShell"},{"location":"steps/artifactPrepareVersion/#customtlscertificatelinks","text":"List containing download links of custom TLS certificates. This is required to ensure trusted connections to registries with custom certificates. back to overview Scope Details Aliases - Type []string Mandatory no Default buildTool= maven : <nil> buildTool= gradle : <nil> Secret no Configuration scope \u2612 parameter \u2612 general \u2612 steps \u2612 stages Resource references none","title":"customTlsCertificateLinks"},{"location":"steps/artifactPrepareVersion/#customversionfield","text":"For buildTool: custom : Defines the field which contains the version in the descriptor file. back to overview Scope Details Aliases - Type string Mandatory no Default $PIPER_customVersionField (if set) Secret no Configuration scope \u2612 parameter \u2610 general \u2612 steps \u2612 stages Resource references none","title":"customVersionField"},{"location":"steps/artifactPrepareVersion/#customversionsection","text":"For buildTool: custom : Defines the section for version retrieval in vase a .ini/ .cfg file is used. back to overview Scope Details Aliases - Type string Mandatory no Default $PIPER_customVersionSection (if set) Secret no Configuration scope \u2612 parameter \u2610 general \u2612 steps \u2612 stages Resource references none","title":"customVersionSection"},{"location":"steps/artifactPrepareVersion/#customversioningscheme","text":"For buildTool: custom : Defines the versioning scheme to be used. back to overview Scope Details Aliases - Type string Mandatory no Default maven Possible values - docker - maven - pep440 - semver2 Secret no Configuration scope \u2612 parameter \u2610 general \u2612 steps \u2612 stages Resource references none","title":"customVersioningScheme"},{"location":"steps/artifactPrepareVersion/#dockerenvvars","text":"Environment variables to set in the container, e.g. [http_proxy: \"proxy:8080\"]. back to overview Scope Details Aliases - Type map[string]string Mandatory no Default Secret no Configuration scope \u2612 parameter \u2612 general \u2612 steps \u2612 stages Resource references none","title":"dockerEnvVars"},{"location":"steps/artifactPrepareVersion/#dockerimage","text":"Name of the docker image that should be used. If empty, Docker is not used and the command is executed directly on the Jenkins system. back to overview Scope Details Aliases - Type string Mandatory no Default buildTool= maven : maven:3.8.6-jdk-8 buildTool= CAP : maven:3.8.6-jdk-8 buildTool= gradle : gradle:6-jdk11-alpine Secret no Configuration scope \u2612 parameter \u2612 general \u2612 steps \u2612 stages Resource references none","title":"dockerImage"},{"location":"steps/artifactPrepareVersion/#dockername","text":"Kubernetes only: Name of the container launching dockerImage. SideCar only: Name of the container in local network. back to overview Scope Details Aliases - Type string Mandatory no Default Secret no Configuration scope \u2612 parameter \u2612 general \u2612 steps \u2612 stages Resource references none","title":"dockerName"},{"location":"steps/artifactPrepareVersion/#dockeroptions","text":"Docker options to be set when starting the container. back to overview Scope Details Aliases - Type []string Mandatory no Default Secret no Configuration scope \u2612 parameter \u2612 general \u2612 steps \u2612 stages Resource references none","title":"dockerOptions"},{"location":"steps/artifactPrepareVersion/#dockerpullimage","text":"Set this to 'false' to bypass a docker image pull. Useful during development process. Allows testing of images which are available in the local registry only. back to overview Scope Details Aliases - Type bool Mandatory no Default buildTool= maven : true buildTool= CAP : true buildTool= gradle : true Possible values - true - false Secret no Configuration scope \u2612 parameter \u2612 general \u2612 steps \u2612 stages Resource references none","title":"dockerPullImage"},{"location":"steps/artifactPrepareVersion/#dockerversionsource","text":"For buildTool: docker : Defines the source of the version. Can be FROM , any supported buildTool or an environment variable name. back to overview Scope Details Aliases - Type string Mandatory no Default $PIPER_dockerVersionSource (if set) Secret no Configuration scope \u2612 parameter \u2610 general \u2612 steps \u2612 stages Resource references none","title":"dockerVersionSource"},{"location":"steps/artifactPrepareVersion/#dockervolumebind","text":"Jenkins-specific: Used for proper environment setup. Volumes that should be mounted into the docker container. back to overview Scope Details Aliases - Type map[string]string Mandatory no Default Secret no Configuration scope \u2612 parameter \u2612 general \u2612 steps \u2612 stages Resource references none","title":"dockerVolumeBind"},{"location":"steps/artifactPrepareVersion/#dockerworkspace","text":"Jenkins-specific: Used for proper environment setup. Kubernetes only: Specifies a dedicated user home directory for the container which will be passed as value for environment variable HOME . back to overview Scope Details Aliases - Type string Mandatory no Default Secret no Configuration scope \u2612 parameter \u2612 general \u2612 steps \u2612 stages Resource references none","title":"dockerWorkspace"},{"location":"steps/artifactPrepareVersion/#fetchcoordinates","text":"If set to true the step will retreive artifact coordinates and store them in the common pipeline environment. back to overview Scope Details Aliases - Type bool Mandatory no Default false Possible values - true - false Secret no Configuration scope \u2612 parameter \u2610 general \u2612 steps \u2612 stages Resource references none","title":"fetchCoordinates"},{"location":"steps/artifactPrepareVersion/#filepath","text":"Defines a custom path to the descriptor file. Build tool specific defaults are used (e.g. maven: pom.xml , npm: package.json , mta: mta.yaml ). back to overview Scope Details Aliases - Type string Mandatory no Default $PIPER_filePath (if set) Secret no Configuration scope \u2612 parameter \u2610 general \u2612 steps \u2612 stages Resource references none","title":"filePath"},{"location":"steps/artifactPrepareVersion/#globalsettingsfile","text":"Maven only - Path to the mvn settings file that should be used as global settings file. back to overview Scope Details Aliases maven/globalSettingsFile Type string Mandatory no Default $PIPER_globalSettingsFile (if set) Secret no Configuration scope \u2612 parameter \u2612 general \u2612 steps \u2612 stages Resource references none","title":"globalSettingsFile"},{"location":"steps/artifactPrepareVersion/#includecommitid","text":"Defines if the automatically generated version ( versioningType: cloud ) should include the commit id hash. back to overview Scope Details Aliases - Type bool Mandatory no Default true Possible values - true - false Secret no Configuration scope \u2612 parameter \u2610 general \u2612 steps \u2612 stages Resource references none","title":"includeCommitId"},{"location":"steps/artifactPrepareVersion/#isoptimizedandscheduled","text":"Whether the pipeline runs in optimized mode and the current execution is a scheduled one back to overview Scope Details Aliases - Type bool Mandatory no Default false Possible values - true - false Secret no Configuration scope \u2612 parameter \u2610 general \u2610 steps \u2610 stages Resource references commonPipelineEnvironment : reference to: custom/isOptimizedAndScheduled","title":"isOptimizedAndScheduled"},{"location":"steps/artifactPrepareVersion/#m2path","text":"Maven only - Path to the location of the local repository that should be used. back to overview Scope Details Aliases maven/m2Path Type string Mandatory no Default $PIPER_m2Path (if set) Secret no Configuration scope \u2612 parameter \u2612 general \u2612 steps \u2612 stages Resource references none","title":"m2Path"},{"location":"steps/artifactPrepareVersion/#password","text":"Password/token for git authentication. back to overview Scope Details Aliases access_token Type string Mandatory no Default $PIPER_password (if set) Secret yes Configuration scope \u2612 parameter \u2610 general \u2612 steps \u2612 stages Resource references Jenkins credential id: id: gitHttpsCredentialsId reference to: password Vault resource: name: gitHttpsCredentialVaultSecretName default value: gitHttpsCredential Vault paths: $(vaultPath)/gitHttpsCredential $(vaultBasePath)/$(vaultPipelineName)/gitHttpsCredential $(vaultBasePath)/GROUP-SECRETS/gitHttpsCredential","title":"password"},{"location":"steps/artifactPrepareVersion/#projectsettingsfile","text":"Maven only - Path to the mvn settings file that should be used as project settings file. back to overview Scope Details Aliases maven/projectSettingsFile Type string Mandatory no Default $PIPER_projectSettingsFile (if set) Secret no Configuration scope \u2612 parameter \u2612 general \u2612 steps \u2612 stages Resource references none","title":"projectSettingsFile"},{"location":"steps/artifactPrepareVersion/#script","text":"The common script environment of the Jenkinsfile running. Typically the reference to the script calling the pipeline step is provided with the this parameter, as in script: this . This allows the function to access the commonPipelineEnvironment for retrieving, e.g. configuration parameters. back to overview Scope Details Aliases - Type Jenkins Script Mandatory yes Default Secret no Configuration scope \u2610 parameter \u2610 general \u2610 steps \u2610 stages Resource references none","title":"script"},{"location":"steps/artifactPrepareVersion/#shortcommitid","text":"Defines if a short version of the commitId should be used. GitHub format is used (first 7 characters). back to overview Scope Details Aliases - Type bool Mandatory no Default false Possible values - true - false Secret no Configuration scope \u2612 parameter \u2610 general \u2612 steps \u2612 stages Resource references none","title":"shortCommitId"},{"location":"steps/artifactPrepareVersion/#tagprefix","text":"Defines the prefix which is used for the git tag which is written during the versioning run (only versioningType: cloud ). back to overview Scope Details Aliases - Type string Mandatory no Default build_ Secret no Configuration scope \u2612 parameter \u2610 general \u2612 steps \u2612 stages Resource references none","title":"tagPrefix"},{"location":"steps/artifactPrepareVersion/#unixtimestamp","text":"Defines if the Unix timestamp number should be used as build number instead of the standard date format. back to overview Scope Details Aliases - Type bool Mandatory no Default false Possible values - true - false Secret no Configuration scope \u2612 parameter \u2610 general \u2612 steps \u2612 stages Resource references none","title":"unixTimestamp"},{"location":"steps/artifactPrepareVersion/#username","text":"User name for git authentication back to overview Scope Details Aliases - Type string Mandatory no Default $PIPER_username (if set) Secret yes Configuration scope \u2612 parameter \u2610 general \u2612 steps \u2612 stages Resource references Jenkins credential id: id: gitHttpsCredentialsId reference to: username Vault resource: name: gitHttpsCredentialVaultSecretName default value: gitHttpsCredential Vault paths: $(vaultPath)/gitHttpsCredential $(vaultBasePath)/$(vaultPipelineName)/gitHttpsCredential $(vaultBasePath)/GROUP-SECRETS/gitHttpsCredential","title":"username"},{"location":"steps/artifactPrepareVersion/#verbose","text":"verbose output back to overview Scope Details Aliases - Type bool Mandatory no Default false Possible values - true - false Secret no Configuration scope \u2612 parameter \u2612 general \u2612 steps \u2612 stages Resource references none","title":"verbose"},{"location":"steps/artifactPrepareVersion/#versioningtemplate","text":"DEPRECATED: Defines the template for the automatic version which will be created back to overview Scope Details Aliases - Type string Mandatory no Default $PIPER_versioningTemplate (if set) Secret no Configuration scope \u2612 parameter \u2610 general \u2612 steps \u2612 stages Resource references none","title":"versioningTemplate"},{"location":"steps/artifactPrepareVersion/#versioningtype","text":"Defines the type of versioning: cloud : fully automatic while also commiting a tag into the git repository containing the updated build descriptors cloud_noTag : fully automatic but no tag created library : manual, i.e. the pipeline will pick up the version from the build descriptor, but not generate a new version Please note: Type cloud will automatically fall back to cloud_noTag in case a pull request is being built or in case the pipeline runs in optimized and scheduled mode (in this mode no build is being performed and thus no version tag is required to persist the build input) back to overview Scope Details Aliases - Type string Mandatory no Default cloud Possible values - cloud - cloud_noTag - library Secret no Configuration scope \u2612 parameter \u2610 general \u2612 steps \u2612 stages Resource references none","title":"versioningType"},{"location":"steps/artifactPrepareVersion/#githttpscredentialsid","text":"Jenkins 'Username with password' credentials ID containing username/password for http access to your git repository. back to overview Scope Details Aliases - Type string Configuration scope \u2612 parameter \u2612 general \u2612 steps \u2612 stages","title":"gitHttpsCredentialsId"},{"location":"steps/artifactPrepareVersion/#gitsshkeycredentialsid","text":"Jenkins 'SSH Username with private key' credentials ID ssh key for accessing your git repository. You can find details about how to generate an ssh key in the GitHub documentation . back to overview Scope Details Aliases gitCredentialsId ( deprecated ) Type string Configuration scope \u2612 parameter \u2612 general \u2612 steps \u2612 stages","title":"gitSshKeyCredentialsId"},{"location":"steps/artifactSetVersion/","text":"artifactSetVersion \u00b6 Description \u00b6 The continuous delivery process requires that each build is done with a unique version number. The version generated using this step will contain: Version (major.minor.patch) from descriptor file in master repository is preserved. Developers should be able to autonomously decide on increasing either part of this version number. Timestamp CommitId (by default the long version of the hash) Optionally, but enabled by default, the new version is pushed as a new tag into the source code repository (e.g. GitHub). If this option is chosen, git credentials and the repository URL needs to be provided. Since you might not want to configure the git credentials in Jenkins, committing and pushing can be disabled using the commitVersion parameter as described below. If you require strict reproducibility of your builds, this should be used. Prerequisites \u00b6 none Parameters \u00b6 name mandatory default possible values artifactType no appContainer buildTool yes dub , docker , golang , maven , mta , npm , pip , sbt commitVersion no true true , false dockerVersionSource no FROM, (ENV name),appVersion filePath no buildTool= dub : dub.json buildTool= docker : Dockerfile buildTool= golang : VERSION buildTool= maven : pom.xml buildTool= mta : mta.yaml buildTool= npm : package.json buildTool= pip : version.txt buildTool= sbt : sbtDescriptor.json gitCommitId no gitDisableSslVerification no false gitHttpsCredentialsId no git gitHttpsUrl for gitPushMode HTTPS gitPushMode no SSH 'SSH', 'HTTPS', 'NONE' gitSshKeyCredentialsId no `` gitSshUrl for gitPushMode SSH gitUserEMail no gitUserName no script yes tagPrefix no build_ timestamp no timestampTemplate no %Y%m%d%H%M%S verbose no false true , false versioningTemplate no buildTool= dub : ${version}-${timestamp}${commitId?\"+\"+commitId:\"\"} buildTool= docker : ${version}-${timestamp}${commitId?\"_\"+commitId:\"\"} buildTool= golang : ${version}-${timestamp}${commitId?\"+\"+commitId:\"\"} buildTool= maven : ${version}-${timestamp}${commitId?\"_\"+commitId:\"\"} buildTool= mta : ${version}-${timestamp}${commitId?\"+\"+commitId:\"\"} buildTool= npm : ${version}-${timestamp}${commitId?\"+\"+commitId:\"\"} buildTool= pip : ${version}.${timestamp}${commitId?\".\"+commitId:\"\"} buildTool= sbt : ${version}-${timestamp}${commitId?\"+\"+commitId:\"\"} artifactType - Defines the type of the artifact. buildTool - Defines the tool which is used for building the artifact. commitVersion - Controls if the changed version is committed and pushed to the git repository. If this is enabled (which is the default), you need to provide gitCredentialsId and gitSshUrl . dockerVersionSource - Specifies the source to be used for the main version which is used for generating the automatic version. * This can either be the version of the base image - as retrieved from the FROM statement within the Dockerfile, e.g. FROM jenkins:2.46.2 * Alternatively the name of an environment variable defined in the Docker image can be used which contains the version number, e.g. ENV MY_VERSION 1.2.3 * The third option appVersion applies only to the artifactType appContainer . Here the version of the app which is packaged into the container will be used as version for the container itself. filePath - Defines a custom path to the descriptor file. gitCommitId - Defines the version prefix of the automatically generated version. By default it will take the long commitId hash. You could pass any other string (e.g. the short commitId hash) to be used. In case you don't want to have the gitCommitId added to the automatic versioning string you could set the value to an empty string: '' . gitDisableSslVerification - Disables the ssl verification for git push. Intended to be used only for troubleshooting. Productive usage is not recommanded. gitHttpsCredentialsId - gitHttpsUrl - Defines the git https url to the source code repository. Used in conjunction with 'GitPushMode.HTTPS'. gitPushMode - Controls which protocol is used for performing push operation to remote repo. Required credentials needs to be configured ('gitSshKeyCredentialsId'/'gitHttpsCredentialsId'). Push is only performed in case 'commitVersion' is set to 'true'. gitSshKeyCredentialsId - Defines the ssh git credentials to be used for writing the tag. gitSshUrl - Defines the git ssh url to the source code repository. Used in conjunction with 'GitPushMode.SSH'. gitUserEMail - Allows to overwrite the global git setting 'user.email' available on your Jenkins server. gitUserName - Allows to overwrite the global git setting 'user.name' available on your Jenkins server. script - The common script environment of the Jenkinsfile running. Typically the reference to the script calling the pipeline step is provided with the this parameter, as in script: this . This allows the function to access the commonPipelineEnvironment for retrieving, e.g. configuration parameters. tagPrefix - Defines the prefix which is used for the git tag which is written during the versioning run. timestamp - Defines the timestamp to be used in the automatic version string. You could overwrite the default behavior by explicitly setting this string. timestampTemplate - Defines the template for the timestamp which will be part of the created version. verbose - Prints some more information for troubleshooting. May reveal security relevant information. Usage is recommanded for troubleshooting only. Productive usage is not recommended. versioningTemplate - Defines the template for the automatic version which will be created. Step configuration \u00b6 We recommend to define values of step parameters via config.yml file . In following sections of the config.yml the configuration is possible: parameter general step/stage artifactType X buildTool X commitVersion X dockerVersionSource X filePath X gitCommitId gitDisableSslVerification X gitHttpsCredentialsId X gitHttpsUrl X gitPushMode X gitSshKeyCredentialsId X gitSshUrl X gitUserEMail X gitUserName X script tagPrefix X timestamp X timestampTemplate X verbose X versioningTemplate X Dependencies \u00b6 The step depends on the following Jenkins plugins credentials-binding pipeline-utility-steps ssh-agent workflow-basic-steps workflow-cps-global-lib workflow-durable-task-step Transitive dependencies are omitted. The list might be incomplete. Consider using the ppiper/jenkins-master docker image. This images comes with preinstalled plugins. Example \u00b6 artifactSetVersion script: this , buildTool: 'maven'","title":"artifactSetVersion"},{"location":"steps/artifactSetVersion/#artifactsetversion","text":"","title":"artifactSetVersion"},{"location":"steps/artifactSetVersion/#description","text":"The continuous delivery process requires that each build is done with a unique version number. The version generated using this step will contain: Version (major.minor.patch) from descriptor file in master repository is preserved. Developers should be able to autonomously decide on increasing either part of this version number. Timestamp CommitId (by default the long version of the hash) Optionally, but enabled by default, the new version is pushed as a new tag into the source code repository (e.g. GitHub). If this option is chosen, git credentials and the repository URL needs to be provided. Since you might not want to configure the git credentials in Jenkins, committing and pushing can be disabled using the commitVersion parameter as described below. If you require strict reproducibility of your builds, this should be used.","title":"Description"},{"location":"steps/artifactSetVersion/#prerequisites","text":"none","title":"Prerequisites"},{"location":"steps/artifactSetVersion/#parameters","text":"name mandatory default possible values artifactType no appContainer buildTool yes dub , docker , golang , maven , mta , npm , pip , sbt commitVersion no true true , false dockerVersionSource no FROM, (ENV name),appVersion filePath no buildTool= dub : dub.json buildTool= docker : Dockerfile buildTool= golang : VERSION buildTool= maven : pom.xml buildTool= mta : mta.yaml buildTool= npm : package.json buildTool= pip : version.txt buildTool= sbt : sbtDescriptor.json gitCommitId no gitDisableSslVerification no false gitHttpsCredentialsId no git gitHttpsUrl for gitPushMode HTTPS gitPushMode no SSH 'SSH', 'HTTPS', 'NONE' gitSshKeyCredentialsId no `` gitSshUrl for gitPushMode SSH gitUserEMail no gitUserName no script yes tagPrefix no build_ timestamp no timestampTemplate no %Y%m%d%H%M%S verbose no false true , false versioningTemplate no buildTool= dub : ${version}-${timestamp}${commitId?\"+\"+commitId:\"\"} buildTool= docker : ${version}-${timestamp}${commitId?\"_\"+commitId:\"\"} buildTool= golang : ${version}-${timestamp}${commitId?\"+\"+commitId:\"\"} buildTool= maven : ${version}-${timestamp}${commitId?\"_\"+commitId:\"\"} buildTool= mta : ${version}-${timestamp}${commitId?\"+\"+commitId:\"\"} buildTool= npm : ${version}-${timestamp}${commitId?\"+\"+commitId:\"\"} buildTool= pip : ${version}.${timestamp}${commitId?\".\"+commitId:\"\"} buildTool= sbt : ${version}-${timestamp}${commitId?\"+\"+commitId:\"\"} artifactType - Defines the type of the artifact. buildTool - Defines the tool which is used for building the artifact. commitVersion - Controls if the changed version is committed and pushed to the git repository. If this is enabled (which is the default), you need to provide gitCredentialsId and gitSshUrl . dockerVersionSource - Specifies the source to be used for the main version which is used for generating the automatic version. * This can either be the version of the base image - as retrieved from the FROM statement within the Dockerfile, e.g. FROM jenkins:2.46.2 * Alternatively the name of an environment variable defined in the Docker image can be used which contains the version number, e.g. ENV MY_VERSION 1.2.3 * The third option appVersion applies only to the artifactType appContainer . Here the version of the app which is packaged into the container will be used as version for the container itself. filePath - Defines a custom path to the descriptor file. gitCommitId - Defines the version prefix of the automatically generated version. By default it will take the long commitId hash. You could pass any other string (e.g. the short commitId hash) to be used. In case you don't want to have the gitCommitId added to the automatic versioning string you could set the value to an empty string: '' . gitDisableSslVerification - Disables the ssl verification for git push. Intended to be used only for troubleshooting. Productive usage is not recommanded. gitHttpsCredentialsId - gitHttpsUrl - Defines the git https url to the source code repository. Used in conjunction with 'GitPushMode.HTTPS'. gitPushMode - Controls which protocol is used for performing push operation to remote repo. Required credentials needs to be configured ('gitSshKeyCredentialsId'/'gitHttpsCredentialsId'). Push is only performed in case 'commitVersion' is set to 'true'. gitSshKeyCredentialsId - Defines the ssh git credentials to be used for writing the tag. gitSshUrl - Defines the git ssh url to the source code repository. Used in conjunction with 'GitPushMode.SSH'. gitUserEMail - Allows to overwrite the global git setting 'user.email' available on your Jenkins server. gitUserName - Allows to overwrite the global git setting 'user.name' available on your Jenkins server. script - The common script environment of the Jenkinsfile running. Typically the reference to the script calling the pipeline step is provided with the this parameter, as in script: this . This allows the function to access the commonPipelineEnvironment for retrieving, e.g. configuration parameters. tagPrefix - Defines the prefix which is used for the git tag which is written during the versioning run. timestamp - Defines the timestamp to be used in the automatic version string. You could overwrite the default behavior by explicitly setting this string. timestampTemplate - Defines the template for the timestamp which will be part of the created version. verbose - Prints some more information for troubleshooting. May reveal security relevant information. Usage is recommanded for troubleshooting only. Productive usage is not recommended. versioningTemplate - Defines the template for the automatic version which will be created.","title":"Parameters"},{"location":"steps/artifactSetVersion/#step-configuration","text":"We recommend to define values of step parameters via config.yml file . In following sections of the config.yml the configuration is possible: parameter general step/stage artifactType X buildTool X commitVersion X dockerVersionSource X filePath X gitCommitId gitDisableSslVerification X gitHttpsCredentialsId X gitHttpsUrl X gitPushMode X gitSshKeyCredentialsId X gitSshUrl X gitUserEMail X gitUserName X script tagPrefix X timestamp X timestampTemplate X verbose X versioningTemplate X","title":"Step configuration"},{"location":"steps/artifactSetVersion/#dependencies","text":"The step depends on the following Jenkins plugins credentials-binding pipeline-utility-steps ssh-agent workflow-basic-steps workflow-cps-global-lib workflow-durable-task-step Transitive dependencies are omitted. The list might be incomplete. Consider using the ppiper/jenkins-master docker image. This images comes with preinstalled plugins.","title":"Dependencies"},{"location":"steps/artifactSetVersion/#example","text":"artifactSetVersion script: this , buildTool: 'maven'","title":"Example"},{"location":"steps/ascAppUpload/","text":"ascAppUpload \u00b6 Upload an app to ASC Description \u00b6 With this step you can upload an app to ASC. It creates a new release note in ASC and uploads the binary to ASC and therewith to Jamf. For more information about ASC, check out Application Support Center . Usage \u00b6 We recommend to define values of step parameters via .pipeline/config.yml file . In this case, calling the step is essentially reduced to defining the step name. Calling the step can be done either in an orchestrator specific way (e.g. via a Jenkins library step) or on the command line. Jenkins Command Line library ( 'piper-lib-os' ) ascAppUpload script: this piper ascAppUpload Prerequisites \u00b6 ASC Instance - have an ASC instance set up ASC App - have an app in ASC Parameters \u00b6 Overview - Step \u00b6 Name Mandatory Additional information appId yes filePath yes jamfTargetSystem yes script (yes) reference to Jenkins main pipeline script serverUrl yes appToken no pass via ENV, Vault or Jenkins credentials ( ascAppTokenCredentialsId ) releaseAppVersion no releaseDate no releaseDescription no releaseVisible no verbose no activates debug output Overview - Execution Environment \u00b6 Orchestrator-specific only These parameters are relevant for orchestrator usage and not considered when using the command line option. Name Mandatory Additional information Details \u00b6 appId \u00b6 The app ID in ASC back to overview Scope Details Aliases - Type string Mandatory yes Default $PIPER_appId (if set) Secret no Configuration scope \u2612 parameter \u2610 general \u2612 steps \u2612 stages Resource references none appToken \u00b6 App token used to authenticate with the ASC backend back to overview Scope Details Aliases ascAppToken Type string Mandatory no Default $PIPER_appToken (if set) Secret yes Configuration scope \u2612 parameter \u2610 general \u2610 steps \u2610 stages Resource references Vault resource: name: ascVaultSecretName default value: asc Vault paths: $(vaultPath)/asc $(vaultBasePath)/$(vaultPipelineName)/asc $(vaultBasePath)/GROUP-SECRETS/asc Jenkins credential id: id: ascAppTokenCredentialsId filePath \u00b6 The path to the app binary back to overview Scope Details Aliases - Type string Mandatory yes Default $PIPER_filePath (if set) Secret no Configuration scope \u2612 parameter \u2610 general \u2612 steps \u2612 stages Resource references none jamfTargetSystem \u00b6 The jamf target system back to overview Scope Details Aliases - Type string Mandatory yes Default $PIPER_jamfTargetSystem (if set) Secret no Configuration scope \u2612 parameter \u2610 general \u2612 steps \u2612 stages Resource references none releaseAppVersion \u00b6 The new app version name to be created in ASC back to overview Scope Details Aliases - Type string Mandatory no Default Pending Release Secret no Configuration scope \u2612 parameter \u2610 general \u2612 steps \u2612 stages Resource references none releaseDate \u00b6 The new release date (Format: MM/DD/YYYY) Default is the current date back to overview Scope Details Aliases - Type string Mandatory no Default $PIPER_releaseDate (if set) Secret no Configuration scope \u2612 parameter \u2610 general \u2612 steps \u2612 stages Resource references none releaseDescription \u00b6 The new release description back to overview Scope Details Aliases - Type string Mandatory no Default <p>TBD</p> Secret no Configuration scope \u2612 parameter \u2610 general \u2612 steps \u2612 stages Resource references none releaseVisible \u00b6 The new release visible flag back to overview Scope Details Aliases - Type bool Mandatory no Default false Possible values - true - false Secret no Configuration scope \u2612 parameter \u2610 general \u2612 steps \u2612 stages Resource references none script \u00b6 The common script environment of the Jenkinsfile running. Typically the reference to the script calling the pipeline step is provided with the this parameter, as in script: this . This allows the function to access the commonPipelineEnvironment for retrieving, e.g. configuration parameters. back to overview Scope Details Aliases - Type Jenkins Script Mandatory yes Default Secret no Configuration scope \u2610 parameter \u2610 general \u2610 steps \u2610 stages Resource references none serverUrl \u00b6 The URL to the ASC backend back to overview Scope Details Aliases ascServerUrl Type string Mandatory yes Default $PIPER_serverUrl (if set) Secret no Configuration scope \u2612 parameter \u2610 general \u2612 steps \u2612 stages Resource references none verbose \u00b6 verbose output back to overview Scope Details Aliases - Type bool Mandatory no Default false Possible values - true - false Secret no Configuration scope \u2612 parameter \u2612 general \u2612 steps \u2612 stages Resource references none ascAppTokenCredentialsId \u00b6 Jenkins secret text credential ID containing the authentication token for the ASC app back to overview Scope Details Aliases - Type string Configuration scope \u2612 parameter \u2612 general \u2612 steps \u2612 stages Exceptions \u00b6 none Examples \u00b6","title":"ascAppUpload"},{"location":"steps/ascAppUpload/#ascappupload","text":"Upload an app to ASC","title":"ascAppUpload"},{"location":"steps/ascAppUpload/#description","text":"With this step you can upload an app to ASC. It creates a new release note in ASC and uploads the binary to ASC and therewith to Jamf. For more information about ASC, check out Application Support Center .","title":"Description"},{"location":"steps/ascAppUpload/#usage","text":"We recommend to define values of step parameters via .pipeline/config.yml file . In this case, calling the step is essentially reduced to defining the step name. Calling the step can be done either in an orchestrator specific way (e.g. via a Jenkins library step) or on the command line. Jenkins Command Line library ( 'piper-lib-os' ) ascAppUpload script: this piper ascAppUpload","title":"Usage"},{"location":"steps/ascAppUpload/#prerequisites","text":"ASC Instance - have an ASC instance set up ASC App - have an app in ASC","title":"Prerequisites"},{"location":"steps/ascAppUpload/#parameters","text":"","title":"Parameters"},{"location":"steps/ascAppUpload/#overview-step","text":"Name Mandatory Additional information appId yes filePath yes jamfTargetSystem yes script (yes) reference to Jenkins main pipeline script serverUrl yes appToken no pass via ENV, Vault or Jenkins credentials ( ascAppTokenCredentialsId ) releaseAppVersion no releaseDate no releaseDescription no releaseVisible no verbose no activates debug output","title":"Overview - Step"},{"location":"steps/ascAppUpload/#overview-execution-environment","text":"Orchestrator-specific only These parameters are relevant for orchestrator usage and not considered when using the command line option. Name Mandatory Additional information","title":"Overview - Execution Environment"},{"location":"steps/ascAppUpload/#details","text":"","title":"Details"},{"location":"steps/ascAppUpload/#appid","text":"The app ID in ASC back to overview Scope Details Aliases - Type string Mandatory yes Default $PIPER_appId (if set) Secret no Configuration scope \u2612 parameter \u2610 general \u2612 steps \u2612 stages Resource references none","title":"appId"},{"location":"steps/ascAppUpload/#apptoken","text":"App token used to authenticate with the ASC backend back to overview Scope Details Aliases ascAppToken Type string Mandatory no Default $PIPER_appToken (if set) Secret yes Configuration scope \u2612 parameter \u2610 general \u2610 steps \u2610 stages Resource references Vault resource: name: ascVaultSecretName default value: asc Vault paths: $(vaultPath)/asc $(vaultBasePath)/$(vaultPipelineName)/asc $(vaultBasePath)/GROUP-SECRETS/asc Jenkins credential id: id: ascAppTokenCredentialsId","title":"appToken"},{"location":"steps/ascAppUpload/#filepath","text":"The path to the app binary back to overview Scope Details Aliases - Type string Mandatory yes Default $PIPER_filePath (if set) Secret no Configuration scope \u2612 parameter \u2610 general \u2612 steps \u2612 stages Resource references none","title":"filePath"},{"location":"steps/ascAppUpload/#jamftargetsystem","text":"The jamf target system back to overview Scope Details Aliases - Type string Mandatory yes Default $PIPER_jamfTargetSystem (if set) Secret no Configuration scope \u2612 parameter \u2610 general \u2612 steps \u2612 stages Resource references none","title":"jamfTargetSystem"},{"location":"steps/ascAppUpload/#releaseappversion","text":"The new app version name to be created in ASC back to overview Scope Details Aliases - Type string Mandatory no Default Pending Release Secret no Configuration scope \u2612 parameter \u2610 general \u2612 steps \u2612 stages Resource references none","title":"releaseAppVersion"},{"location":"steps/ascAppUpload/#releasedate","text":"The new release date (Format: MM/DD/YYYY) Default is the current date back to overview Scope Details Aliases - Type string Mandatory no Default $PIPER_releaseDate (if set) Secret no Configuration scope \u2612 parameter \u2610 general \u2612 steps \u2612 stages Resource references none","title":"releaseDate"},{"location":"steps/ascAppUpload/#releasedescription","text":"The new release description back to overview Scope Details Aliases - Type string Mandatory no Default <p>TBD</p> Secret no Configuration scope \u2612 parameter \u2610 general \u2612 steps \u2612 stages Resource references none","title":"releaseDescription"},{"location":"steps/ascAppUpload/#releasevisible","text":"The new release visible flag back to overview Scope Details Aliases - Type bool Mandatory no Default false Possible values - true - false Secret no Configuration scope \u2612 parameter \u2610 general \u2612 steps \u2612 stages Resource references none","title":"releaseVisible"},{"location":"steps/ascAppUpload/#script","text":"The common script environment of the Jenkinsfile running. Typically the reference to the script calling the pipeline step is provided with the this parameter, as in script: this . This allows the function to access the commonPipelineEnvironment for retrieving, e.g. configuration parameters. back to overview Scope Details Aliases - Type Jenkins Script Mandatory yes Default Secret no Configuration scope \u2610 parameter \u2610 general \u2610 steps \u2610 stages Resource references none","title":"script"},{"location":"steps/ascAppUpload/#serverurl","text":"The URL to the ASC backend back to overview Scope Details Aliases ascServerUrl Type string Mandatory yes Default $PIPER_serverUrl (if set) Secret no Configuration scope \u2612 parameter \u2610 general \u2612 steps \u2612 stages Resource references none","title":"serverUrl"},{"location":"steps/ascAppUpload/#verbose","text":"verbose output back to overview Scope Details Aliases - Type bool Mandatory no Default false Possible values - true - false Secret no Configuration scope \u2612 parameter \u2612 general \u2612 steps \u2612 stages Resource references none","title":"verbose"},{"location":"steps/ascAppUpload/#ascapptokencredentialsid","text":"Jenkins secret text credential ID containing the authentication token for the ASC app back to overview Scope Details Aliases - Type string Configuration scope \u2612 parameter \u2612 general \u2612 steps \u2612 stages","title":"ascAppTokenCredentialsId"},{"location":"steps/ascAppUpload/#exceptions","text":"none","title":"Exceptions"},{"location":"steps/ascAppUpload/#examples","text":"","title":"Examples"},{"location":"steps/awsS3Upload/","text":"awsS3Upload \u00b6 Uploads a specified file or directory into a given AWS S3 Bucket Description \u00b6 Uploads a specified file or directory as S3 Objects into a given AWS S3 Bucket. In case a file is uploaded that is already contained in the S3 bucket, it will be overwritten with the latest version. Usage \u00b6 We recommend to define values of step parameters via .pipeline/config.yml file . In this case, calling the step is essentially reduced to defining the step name. Calling the step can be done either in an orchestrator specific way (e.g. via a Jenkins library step) or on the command line. Jenkins Command Line library ( 'piper-lib-os' ) awsS3Upload script: this piper awsS3Upload Prerequisites \u00b6 Before you can use the step awsS3Upload, you must have an Amazon account. See How do I create and activate a new AWS account? for details. You will need AWS access keys for your S3 Bucket. Access keys consist of an access key ID and secret access key, which are used to sign programmatic requests that you make to AWS. You can create them by using the AWS Management Console. The access keys must allow the action \"s3:PutObject\" for the specified S3 Bucket Set up the AWS Credentials \u00b6 To make your AWS credentials available to the jenkins library, store them as Jenkins credentials of type \"Secret Text\". The \"Secret Text\" must be in JSON format and contain the \"access_key_id\", \"secret_access_key\", \"bucket\" as well as the \"region\". For Example: { \"access_key_id\" : \"FJNAKNCLAVLRNBLAVVBK\" , \"bucket\" : \"vro-artloarj-ltnl-nnbv-ibnh-lbnlsnblltbn\" , \"secret_access_key\" : \"123467895896646438486316436kmdlcvreanvjk\" , \"region\" : \"eu-central-1\" } If the JSON string contains additional information, this is not a problem. These are automatically detected and skipped. About Files/Directories to Upload \u00b6 With the step awsS3Upload you can upload single files as well as whole directories into your S3 bucket. File formats do not matter and directory structures are preserved. Note: File paths must be specified in UNIX format. So the used path separator must be \"/\". Parameters \u00b6 Overview - Step \u00b6 Name Mandatory Additional information filePath yes jsonCredentialsAWS (yes) pass via ENV or Jenkins credentials ( awsCredentialsId ) script (yes) reference to Jenkins main pipeline script verbose no activates debug output Overview - Execution Environment \u00b6 Orchestrator-specific only These parameters are relevant for orchestrator usage and not considered when using the command line option. Name Mandatory Additional information Details \u00b6 filePath \u00b6 Name/Path of the file which should be uploaded back to overview Scope Details Aliases - Type string Mandatory yes Default $PIPER_filePath (if set) Secret no Configuration scope \u2612 parameter \u2610 general \u2612 steps \u2612 stages Resource references commonPipelineEnvironment : reference to: mtarFilePath jsonCredentialsAWS \u00b6 JSON String Credentials to access AWS S3 Bucket back to overview Scope Details Aliases - Type string Mandatory yes Default $PIPER_jsonCredentialsAWS (if set) Secret yes Configuration scope \u2612 parameter \u2610 general \u2610 steps \u2610 stages Resource references Jenkins credential id: id: awsCredentialsId script \u00b6 The common script environment of the Jenkinsfile running. Typically the reference to the script calling the pipeline step is provided with the this parameter, as in script: this . This allows the function to access the commonPipelineEnvironment for retrieving, e.g. configuration parameters. back to overview Scope Details Aliases - Type Jenkins Script Mandatory yes Default Secret no Configuration scope \u2610 parameter \u2610 general \u2610 steps \u2610 stages Resource references none verbose \u00b6 verbose output back to overview Scope Details Aliases - Type bool Mandatory no Default false Possible values - true - false Secret no Configuration scope \u2612 parameter \u2612 general \u2612 steps \u2612 stages Resource references none awsCredentialsId \u00b6 Jenkins 'Secret Text' credentials ID containing the JSON file to authenticate to the AWS S3 Bucket back to overview Scope Details Aliases - Type string Configuration scope \u2612 parameter \u2612 general \u2612 steps \u2612 stages Example \u00b6 awsS3Upload ( script: this , awsCredentialsId: \"AWS_Credentials\" , filePath: \"test.txt\" )","title":"awsS3Upload"},{"location":"steps/awsS3Upload/#awss3upload","text":"Uploads a specified file or directory into a given AWS S3 Bucket","title":"awsS3Upload"},{"location":"steps/awsS3Upload/#description","text":"Uploads a specified file or directory as S3 Objects into a given AWS S3 Bucket. In case a file is uploaded that is already contained in the S3 bucket, it will be overwritten with the latest version.","title":"Description"},{"location":"steps/awsS3Upload/#usage","text":"We recommend to define values of step parameters via .pipeline/config.yml file . In this case, calling the step is essentially reduced to defining the step name. Calling the step can be done either in an orchestrator specific way (e.g. via a Jenkins library step) or on the command line. Jenkins Command Line library ( 'piper-lib-os' ) awsS3Upload script: this piper awsS3Upload","title":"Usage"},{"location":"steps/awsS3Upload/#prerequisites","text":"Before you can use the step awsS3Upload, you must have an Amazon account. See How do I create and activate a new AWS account? for details. You will need AWS access keys for your S3 Bucket. Access keys consist of an access key ID and secret access key, which are used to sign programmatic requests that you make to AWS. You can create them by using the AWS Management Console. The access keys must allow the action \"s3:PutObject\" for the specified S3 Bucket","title":"Prerequisites"},{"location":"steps/awsS3Upload/#set-up-the-aws-credentials","text":"To make your AWS credentials available to the jenkins library, store them as Jenkins credentials of type \"Secret Text\". The \"Secret Text\" must be in JSON format and contain the \"access_key_id\", \"secret_access_key\", \"bucket\" as well as the \"region\". For Example: { \"access_key_id\" : \"FJNAKNCLAVLRNBLAVVBK\" , \"bucket\" : \"vro-artloarj-ltnl-nnbv-ibnh-lbnlsnblltbn\" , \"secret_access_key\" : \"123467895896646438486316436kmdlcvreanvjk\" , \"region\" : \"eu-central-1\" } If the JSON string contains additional information, this is not a problem. These are automatically detected and skipped.","title":"Set up the AWS Credentials"},{"location":"steps/awsS3Upload/#about-filesdirectories-to-upload","text":"With the step awsS3Upload you can upload single files as well as whole directories into your S3 bucket. File formats do not matter and directory structures are preserved. Note: File paths must be specified in UNIX format. So the used path separator must be \"/\".","title":"About Files/Directories to Upload"},{"location":"steps/awsS3Upload/#parameters","text":"","title":"Parameters"},{"location":"steps/awsS3Upload/#overview-step","text":"Name Mandatory Additional information filePath yes jsonCredentialsAWS (yes) pass via ENV or Jenkins credentials ( awsCredentialsId ) script (yes) reference to Jenkins main pipeline script verbose no activates debug output","title":"Overview - Step"},{"location":"steps/awsS3Upload/#overview-execution-environment","text":"Orchestrator-specific only These parameters are relevant for orchestrator usage and not considered when using the command line option. Name Mandatory Additional information","title":"Overview - Execution Environment"},{"location":"steps/awsS3Upload/#details","text":"","title":"Details"},{"location":"steps/awsS3Upload/#filepath","text":"Name/Path of the file which should be uploaded back to overview Scope Details Aliases - Type string Mandatory yes Default $PIPER_filePath (if set) Secret no Configuration scope \u2612 parameter \u2610 general \u2612 steps \u2612 stages Resource references commonPipelineEnvironment : reference to: mtarFilePath","title":"filePath"},{"location":"steps/awsS3Upload/#jsoncredentialsaws","text":"JSON String Credentials to access AWS S3 Bucket back to overview Scope Details Aliases - Type string Mandatory yes Default $PIPER_jsonCredentialsAWS (if set) Secret yes Configuration scope \u2612 parameter \u2610 general \u2610 steps \u2610 stages Resource references Jenkins credential id: id: awsCredentialsId","title":"jsonCredentialsAWS"},{"location":"steps/awsS3Upload/#script","text":"The common script environment of the Jenkinsfile running. Typically the reference to the script calling the pipeline step is provided with the this parameter, as in script: this . This allows the function to access the commonPipelineEnvironment for retrieving, e.g. configuration parameters. back to overview Scope Details Aliases - Type Jenkins Script Mandatory yes Default Secret no Configuration scope \u2610 parameter \u2610 general \u2610 steps \u2610 stages Resource references none","title":"script"},{"location":"steps/awsS3Upload/#verbose","text":"verbose output back to overview Scope Details Aliases - Type bool Mandatory no Default false Possible values - true - false Secret no Configuration scope \u2612 parameter \u2612 general \u2612 steps \u2612 stages Resource references none","title":"verbose"},{"location":"steps/awsS3Upload/#awscredentialsid","text":"Jenkins 'Secret Text' credentials ID containing the JSON file to authenticate to the AWS S3 Bucket back to overview Scope Details Aliases - Type string Configuration scope \u2612 parameter \u2612 general \u2612 steps \u2612 stages","title":"awsCredentialsId"},{"location":"steps/awsS3Upload/#example","text":"awsS3Upload ( script: this , awsCredentialsId: \"AWS_Credentials\" , filePath: \"test.txt\" )","title":"Example"},{"location":"steps/azureBlobUpload/","text":"azureBlobUpload \u00b6 Uploads a specified file or directory into a given Azure Blob Storage. Description \u00b6 Uploads a specified file or directory into a given Azure Blob Storage. In case a file is uploaded that is already contained in the storage, it will be overwritten with the latest version. Usage \u00b6 We recommend to define values of step parameters via .pipeline/config.yml file . In this case, calling the step is essentially reduced to defining the step name. Calling the step can be done either in an orchestrator specific way (e.g. via a Jenkins library step) or on the command line. Jenkins Command Line library ( 'piper-lib-os' ) azureBlobUpload script: this piper azureBlobUpload Prerequisites \u00b6 Before you can access Azure Storage, you will need an Azure subscription. If you do not have a subscription, create an account . This step currently only supports authentication via Shared Access Signature (SAS). You can generate a SAS token from the Azure Portal under Create a service SAS . The SAS token must allow the actions \"Write\" and \"Create\" for the specified Azure Blob Storage. Set up the Azure Credentials \u00b6 To make your Azure credentials available to the jenkins library, store them as Jenkins credentials of type \"Secret Text\". The \"Secret Text\" must be in JSON format and contain the \"account_name\", \"container_name\", as well as the \"sas_token\". For Example: { \"account_name\" : \"asdfg12345jhgfdwertz4et5\" , \"container_name\" : \"abcde-lkjhg-qwertzui-fghj-9876-1234-7594rbnsmncx-xyz\" , \"sas_token\" : \"sig=1234567890wertzuiopaYXCVBNMASDsdfghjkloi1234567890qwedf%1993-12-15opphehttpsqtgcshje1234-aqwe-1234-5678-t57894u875LH2%nv23\" } If the JSON string contains additional information, this is not a problem. These are skipped. About Files/Directories to Upload \u00b6 With this step you can upload single files as well as whole directories into your Azure Storage. File formats do not matter and directory structures are preserved. Note: File paths must be specified in UNIX format. So the used path separator must be \"/\". Parameters \u00b6 Overview - Step \u00b6 Name Mandatory Additional information filePath yes jsonCredentialsAzure (yes) pass via ENV, Vault or Jenkins credentials ( azureCredentialsId ) script (yes) reference to Jenkins main pipeline script verbose no activates debug output Overview - Execution Environment \u00b6 Orchestrator-specific only These parameters are relevant for orchestrator usage and not considered when using the command line option. Name Mandatory Additional information Details \u00b6 filePath \u00b6 Name/Path of the file which should be uploaded back to overview Scope Details Aliases - Type string Mandatory yes Default $PIPER_filePath (if set) Secret no Configuration scope \u2612 parameter \u2610 general \u2612 steps \u2612 stages Resource references commonPipelineEnvironment : reference to: mtarFilePath jsonCredentialsAzure \u00b6 JSON String Credentials to access Azure Blob Storage back to overview Scope Details Aliases - Type string Mandatory yes Default $PIPER_jsonCredentialsAzure (if set) Secret yes Configuration scope \u2612 parameter \u2610 general \u2610 steps \u2610 stages Resource references Vault resource: name: azureDevOpsVaultSecretName default value: azure-dev-ops Vault paths: $(vaultPath)/azure-dev-ops $(vaultBasePath)/$(vaultPipelineName)/azure-dev-ops $(vaultBasePath)/GROUP-SECRETS/azure-dev-ops Jenkins credential id: id: azureCredentialsId script \u00b6 The common script environment of the Jenkinsfile running. Typically the reference to the script calling the pipeline step is provided with the this parameter, as in script: this . This allows the function to access the commonPipelineEnvironment for retrieving, e.g. configuration parameters. back to overview Scope Details Aliases - Type Jenkins Script Mandatory yes Default Secret no Configuration scope \u2610 parameter \u2610 general \u2610 steps \u2610 stages Resource references none verbose \u00b6 verbose output back to overview Scope Details Aliases - Type bool Mandatory no Default false Possible values - true - false Secret no Configuration scope \u2612 parameter \u2612 general \u2612 steps \u2612 stages Resource references none azureCredentialsId \u00b6 Jenkins 'Secret Text' credentials ID containing the JSON file to authenticate to the Azure Blob Storage back to overview Scope Details Aliases - Type string Configuration scope \u2612 parameter \u2612 general \u2612 steps \u2612 stages Example \u00b6 azureBlobUpload ( script: this , azureCredentialsId: \"Azure_Credentials\" , filePath: \"test.txt\" )","title":"azureBlobUpload"},{"location":"steps/azureBlobUpload/#azureblobupload","text":"Uploads a specified file or directory into a given Azure Blob Storage.","title":"azureBlobUpload"},{"location":"steps/azureBlobUpload/#description","text":"Uploads a specified file or directory into a given Azure Blob Storage. In case a file is uploaded that is already contained in the storage, it will be overwritten with the latest version.","title":"Description"},{"location":"steps/azureBlobUpload/#usage","text":"We recommend to define values of step parameters via .pipeline/config.yml file . In this case, calling the step is essentially reduced to defining the step name. Calling the step can be done either in an orchestrator specific way (e.g. via a Jenkins library step) or on the command line. Jenkins Command Line library ( 'piper-lib-os' ) azureBlobUpload script: this piper azureBlobUpload","title":"Usage"},{"location":"steps/azureBlobUpload/#prerequisites","text":"Before you can access Azure Storage, you will need an Azure subscription. If you do not have a subscription, create an account . This step currently only supports authentication via Shared Access Signature (SAS). You can generate a SAS token from the Azure Portal under Create a service SAS . The SAS token must allow the actions \"Write\" and \"Create\" for the specified Azure Blob Storage.","title":"Prerequisites"},{"location":"steps/azureBlobUpload/#set-up-the-azure-credentials","text":"To make your Azure credentials available to the jenkins library, store them as Jenkins credentials of type \"Secret Text\". The \"Secret Text\" must be in JSON format and contain the \"account_name\", \"container_name\", as well as the \"sas_token\". For Example: { \"account_name\" : \"asdfg12345jhgfdwertz4et5\" , \"container_name\" : \"abcde-lkjhg-qwertzui-fghj-9876-1234-7594rbnsmncx-xyz\" , \"sas_token\" : \"sig=1234567890wertzuiopaYXCVBNMASDsdfghjkloi1234567890qwedf%1993-12-15opphehttpsqtgcshje1234-aqwe-1234-5678-t57894u875LH2%nv23\" } If the JSON string contains additional information, this is not a problem. These are skipped.","title":"Set up the Azure Credentials"},{"location":"steps/azureBlobUpload/#about-filesdirectories-to-upload","text":"With this step you can upload single files as well as whole directories into your Azure Storage. File formats do not matter and directory structures are preserved. Note: File paths must be specified in UNIX format. So the used path separator must be \"/\".","title":"About Files/Directories to Upload"},{"location":"steps/azureBlobUpload/#parameters","text":"","title":"Parameters"},{"location":"steps/azureBlobUpload/#overview-step","text":"Name Mandatory Additional information filePath yes jsonCredentialsAzure (yes) pass via ENV, Vault or Jenkins credentials ( azureCredentialsId ) script (yes) reference to Jenkins main pipeline script verbose no activates debug output","title":"Overview - Step"},{"location":"steps/azureBlobUpload/#overview-execution-environment","text":"Orchestrator-specific only These parameters are relevant for orchestrator usage and not considered when using the command line option. Name Mandatory Additional information","title":"Overview - Execution Environment"},{"location":"steps/azureBlobUpload/#details","text":"","title":"Details"},{"location":"steps/azureBlobUpload/#filepath","text":"Name/Path of the file which should be uploaded back to overview Scope Details Aliases - Type string Mandatory yes Default $PIPER_filePath (if set) Secret no Configuration scope \u2612 parameter \u2610 general \u2612 steps \u2612 stages Resource references commonPipelineEnvironment : reference to: mtarFilePath","title":"filePath"},{"location":"steps/azureBlobUpload/#jsoncredentialsazure","text":"JSON String Credentials to access Azure Blob Storage back to overview Scope Details Aliases - Type string Mandatory yes Default $PIPER_jsonCredentialsAzure (if set) Secret yes Configuration scope \u2612 parameter \u2610 general \u2610 steps \u2610 stages Resource references Vault resource: name: azureDevOpsVaultSecretName default value: azure-dev-ops Vault paths: $(vaultPath)/azure-dev-ops $(vaultBasePath)/$(vaultPipelineName)/azure-dev-ops $(vaultBasePath)/GROUP-SECRETS/azure-dev-ops Jenkins credential id: id: azureCredentialsId","title":"jsonCredentialsAzure"},{"location":"steps/azureBlobUpload/#script","text":"The common script environment of the Jenkinsfile running. Typically the reference to the script calling the pipeline step is provided with the this parameter, as in script: this . This allows the function to access the commonPipelineEnvironment for retrieving, e.g. configuration parameters. back to overview Scope Details Aliases - Type Jenkins Script Mandatory yes Default Secret no Configuration scope \u2610 parameter \u2610 general \u2610 steps \u2610 stages Resource references none","title":"script"},{"location":"steps/azureBlobUpload/#verbose","text":"verbose output back to overview Scope Details Aliases - Type bool Mandatory no Default false Possible values - true - false Secret no Configuration scope \u2612 parameter \u2612 general \u2612 steps \u2612 stages Resource references none","title":"verbose"},{"location":"steps/azureBlobUpload/#azurecredentialsid","text":"Jenkins 'Secret Text' credentials ID containing the JSON file to authenticate to the Azure Blob Storage back to overview Scope Details Aliases - Type string Configuration scope \u2612 parameter \u2612 general \u2612 steps \u2612 stages","title":"azureCredentialsId"},{"location":"steps/azureBlobUpload/#example","text":"azureBlobUpload ( script: this , azureCredentialsId: \"Azure_Credentials\" , filePath: \"test.txt\" )","title":"Example"},{"location":"steps/batsExecuteTests/","text":"batsExecuteTests \u00b6 This step executes tests using the Bash Automated Testing System - bats-core . Description \u00b6 Bats is a TAP-compliant testing framework for Bash. It provides a simple way to verify that the UNIX programs you write behave as expected. A Bats test file is a Bash script with special syntax for defining test cases. Under the hood, each test case is just a function with a description. Usage \u00b6 We recommend to define values of step parameters via .pipeline/config.yml file . In this case, calling the step is essentially reduced to defining the step name. Calling the step can be done either in an orchestrator specific way (e.g. via a Jenkins library step) or on the command line. Jenkins Command Line library ( 'piper-lib-os' ) batsExecuteTests script: this piper batsExecuteTests Outputs \u00b6 Output type Details influx measurement step_data bats Prerequisites \u00b6 You need to have a Bats test file. By default you would put this into directory src/test within your source code repository. Parameters \u00b6 Overview - Step \u00b6 Name Mandatory Additional information script (yes) reference to Jenkins main pipeline script envVars no outputFormat no repository no testPackage no testPath no verbose no activates debug output Overview - Execution Environment \u00b6 Orchestrator-specific only These parameters are relevant for orchestrator usage and not considered when using the command line option. Name Mandatory Additional information containerCommand no containerShell no dockerEnvVars no dockerImage no dockerName no dockerOptions no dockerPullImage no dockerVolumeBind no dockerWorkspace no stashContent no Details \u00b6 containerCommand \u00b6 Jenkins-specific: Used for proper environment setup. Kubernetes only: Allows to specify start command for container created with dockerImage parameter to overwrite Piper default (/usr/bin/tail -f /dev/null). back to overview Scope Details Aliases - Type string Mandatory no Default Secret no Configuration scope \u2612 parameter \u2612 general \u2612 steps \u2612 stages Resource references none containerShell \u00b6 Jenkins-specific: Used for proper environment setup. Allows to specify the shell to be executed for container with containerName. back to overview Scope Details Aliases - Type string Mandatory no Default Secret no Configuration scope \u2612 parameter \u2612 general \u2612 steps \u2612 stages Resource references none dockerEnvVars \u00b6 Environment variables to set in the container, e.g. [http_proxy: \"proxy:8080\"]. back to overview Scope Details Aliases - Type map[string]string Mandatory no Default Secret no Configuration scope \u2612 parameter \u2612 general \u2612 steps \u2612 stages Resource references none dockerImage \u00b6 Name of the docker image that should be used. If empty, Docker is not used and the command is executed directly on the Jenkins system. back to overview Scope Details Aliases - Type string Mandatory no Default outputFormat= junit : node:22-bookworm Secret no Configuration scope \u2612 parameter \u2612 general \u2612 steps \u2612 stages Resource references none dockerName \u00b6 Kubernetes only: Name of the container launching dockerImage. SideCar only: Name of the container in local network. back to overview Scope Details Aliases - Type string Mandatory no Default outputFormat= junit : bats Secret no Configuration scope \u2612 parameter \u2612 general \u2612 steps \u2612 stages Resource references none dockerOptions \u00b6 Docker options to be set when starting the container. back to overview Scope Details Aliases - Type []string Mandatory no Default Secret no Configuration scope \u2612 parameter \u2612 general \u2612 steps \u2612 stages Resource references none dockerPullImage \u00b6 Set this to 'false' to bypass a docker image pull. Useful during development process. Allows testing of images which are available in the local registry only. back to overview Scope Details Aliases - Type bool Mandatory no Default outputFormat= junit : true Possible values - true - false Secret no Configuration scope \u2612 parameter \u2612 general \u2612 steps \u2612 stages Resource references none dockerVolumeBind \u00b6 Jenkins-specific: Used for proper environment setup. Volumes that should be mounted into the docker container. back to overview Scope Details Aliases - Type map[string]string Mandatory no Default Secret no Configuration scope \u2612 parameter \u2612 general \u2612 steps \u2612 stages Resource references none dockerWorkspace \u00b6 Jenkins-specific: Used for proper environment setup. Kubernetes only: Specifies a dedicated user home directory for the container which will be passed as value for environment variable HOME . back to overview Scope Details Aliases - Type string Mandatory no Default outputFormat= junit : /home/node Secret no Configuration scope \u2612 parameter \u2612 general \u2612 steps \u2612 stages Resource references none envVars \u00b6 Injects environment variables to step execution. Format of value must be [' = ',' = ']. Example: ['CONTAINER_NAME=piper-jenskins','IMAGE_NAME=my-image'] back to overview Scope Details Aliases - Type []string Mandatory no Default map[] Secret no Configuration scope \u2612 parameter \u2610 general \u2612 steps \u2612 stages Resource references none outputFormat \u00b6 Defines the format of the test result output. junit would be the standard for automated build environments but you could use also the option tap. back to overview Scope Details Aliases - Type string Mandatory no Default junit Possible values - tap - junit Secret no Configuration scope \u2612 parameter \u2610 general \u2612 steps \u2612 stages Resource references none repository \u00b6 Defines the version of bats-core to be used. By default we use the version from the master branch. back to overview Scope Details Aliases - Type string Mandatory no Default https://github.com/bats-core/bats-core.git Secret no Configuration scope \u2612 parameter \u2610 general \u2612 steps \u2612 stages Resource references none script \u00b6 The common script environment of the Jenkinsfile running. Typically the reference to the script calling the pipeline step is provided with the this parameter, as in script: this . This allows the function to access the commonPipelineEnvironment for retrieving, e.g. configuration parameters. back to overview Scope Details Aliases - Type Jenkins Script Mandatory yes Default Secret no Configuration scope \u2610 parameter \u2610 general \u2610 steps \u2610 stages Resource references none stashContent \u00b6 Jenkins-specific: Used for proper environment setup. Specific stashes that should be considered for the step execution. back to overview Scope Details Aliases - Type []string Mandatory no Default - tests Secret no Configuration scope \u2612 parameter \u2612 general \u2612 steps \u2612 stages Resource references none testPackage \u00b6 For the transformation of the test result to xUnit format the node module tap-xunit is used. This parameter defines the name of the test package used in the xUnit result file. back to overview Scope Details Aliases - Type string Mandatory no Default piper-bats Secret no Configuration scope \u2612 parameter \u2610 general \u2612 steps \u2612 stages Resource references none testPath \u00b6 Defines either the directory which contains the test files (*.bats) or a single file. You can find further details in the Bats-core documentation. back to overview Scope Details Aliases - Type string Mandatory no Default src/test Secret no Configuration scope \u2612 parameter \u2610 general \u2612 steps \u2612 stages Resource references none verbose \u00b6 verbose output back to overview Scope Details Aliases - Type bool Mandatory no Default false Possible values - true - false Secret no Configuration scope \u2612 parameter \u2612 general \u2612 steps \u2612 stages Resource references none Example \u00b6 batsExecuteTests script: this testsPublishResults junit: [ pattern: '**/Test-*.xml' , archive: true ] With `envVars` it is possible to pass either fixed values but also templates using [`commonPipelineEnvironment`](commonPipelineEnvironment.md). Example: ```yaml batsExecuteTests script: this, envVars = [ FIX_VALUE: 'my fixed value', CONTAINER_NAME: '\\${commonPipelineEnvironment.configuration.steps.executeBatsTests.dockerContainerName}', IMAGE_NAME: '\\${return commonPipelineEnvironment.getDockerImageNameAndTag()}' ] ``` This means within the test one could refer to environment variables by calling e.g. `run docker run --rm -i --name \\$CONTAINER_NAME --entrypoint /bin/bash \\$IMAGE_NAME echo \"Test\"`","title":"batsExecuteTests"},{"location":"steps/batsExecuteTests/#batsexecutetests","text":"This step executes tests using the Bash Automated Testing System - bats-core .","title":"batsExecuteTests"},{"location":"steps/batsExecuteTests/#description","text":"Bats is a TAP-compliant testing framework for Bash. It provides a simple way to verify that the UNIX programs you write behave as expected. A Bats test file is a Bash script with special syntax for defining test cases. Under the hood, each test case is just a function with a description.","title":"Description"},{"location":"steps/batsExecuteTests/#usage","text":"We recommend to define values of step parameters via .pipeline/config.yml file . In this case, calling the step is essentially reduced to defining the step name. Calling the step can be done either in an orchestrator specific way (e.g. via a Jenkins library step) or on the command line. Jenkins Command Line library ( 'piper-lib-os' ) batsExecuteTests script: this piper batsExecuteTests","title":"Usage"},{"location":"steps/batsExecuteTests/#outputs","text":"Output type Details influx measurement step_data bats","title":"Outputs"},{"location":"steps/batsExecuteTests/#prerequisites","text":"You need to have a Bats test file. By default you would put this into directory src/test within your source code repository.","title":"Prerequisites"},{"location":"steps/batsExecuteTests/#parameters","text":"","title":"Parameters"},{"location":"steps/batsExecuteTests/#overview-step","text":"Name Mandatory Additional information script (yes) reference to Jenkins main pipeline script envVars no outputFormat no repository no testPackage no testPath no verbose no activates debug output","title":"Overview - Step"},{"location":"steps/batsExecuteTests/#overview-execution-environment","text":"Orchestrator-specific only These parameters are relevant for orchestrator usage and not considered when using the command line option. Name Mandatory Additional information containerCommand no containerShell no dockerEnvVars no dockerImage no dockerName no dockerOptions no dockerPullImage no dockerVolumeBind no dockerWorkspace no stashContent no","title":"Overview - Execution Environment"},{"location":"steps/batsExecuteTests/#details","text":"","title":"Details"},{"location":"steps/batsExecuteTests/#containercommand","text":"Jenkins-specific: Used for proper environment setup. Kubernetes only: Allows to specify start command for container created with dockerImage parameter to overwrite Piper default (/usr/bin/tail -f /dev/null). back to overview Scope Details Aliases - Type string Mandatory no Default Secret no Configuration scope \u2612 parameter \u2612 general \u2612 steps \u2612 stages Resource references none","title":"containerCommand"},{"location":"steps/batsExecuteTests/#containershell","text":"Jenkins-specific: Used for proper environment setup. Allows to specify the shell to be executed for container with containerName. back to overview Scope Details Aliases - Type string Mandatory no Default Secret no Configuration scope \u2612 parameter \u2612 general \u2612 steps \u2612 stages Resource references none","title":"containerShell"},{"location":"steps/batsExecuteTests/#dockerenvvars","text":"Environment variables to set in the container, e.g. [http_proxy: \"proxy:8080\"]. back to overview Scope Details Aliases - Type map[string]string Mandatory no Default Secret no Configuration scope \u2612 parameter \u2612 general \u2612 steps \u2612 stages Resource references none","title":"dockerEnvVars"},{"location":"steps/batsExecuteTests/#dockerimage","text":"Name of the docker image that should be used. If empty, Docker is not used and the command is executed directly on the Jenkins system. back to overview Scope Details Aliases - Type string Mandatory no Default outputFormat= junit : node:22-bookworm Secret no Configuration scope \u2612 parameter \u2612 general \u2612 steps \u2612 stages Resource references none","title":"dockerImage"},{"location":"steps/batsExecuteTests/#dockername","text":"Kubernetes only: Name of the container launching dockerImage. SideCar only: Name of the container in local network. back to overview Scope Details Aliases - Type string Mandatory no Default outputFormat= junit : bats Secret no Configuration scope \u2612 parameter \u2612 general \u2612 steps \u2612 stages Resource references none","title":"dockerName"},{"location":"steps/batsExecuteTests/#dockeroptions","text":"Docker options to be set when starting the container. back to overview Scope Details Aliases - Type []string Mandatory no Default Secret no Configuration scope \u2612 parameter \u2612 general \u2612 steps \u2612 stages Resource references none","title":"dockerOptions"},{"location":"steps/batsExecuteTests/#dockerpullimage","text":"Set this to 'false' to bypass a docker image pull. Useful during development process. Allows testing of images which are available in the local registry only. back to overview Scope Details Aliases - Type bool Mandatory no Default outputFormat= junit : true Possible values - true - false Secret no Configuration scope \u2612 parameter \u2612 general \u2612 steps \u2612 stages Resource references none","title":"dockerPullImage"},{"location":"steps/batsExecuteTests/#dockervolumebind","text":"Jenkins-specific: Used for proper environment setup. Volumes that should be mounted into the docker container. back to overview Scope Details Aliases - Type map[string]string Mandatory no Default Secret no Configuration scope \u2612 parameter \u2612 general \u2612 steps \u2612 stages Resource references none","title":"dockerVolumeBind"},{"location":"steps/batsExecuteTests/#dockerworkspace","text":"Jenkins-specific: Used for proper environment setup. Kubernetes only: Specifies a dedicated user home directory for the container which will be passed as value for environment variable HOME . back to overview Scope Details Aliases - Type string Mandatory no Default outputFormat= junit : /home/node Secret no Configuration scope \u2612 parameter \u2612 general \u2612 steps \u2612 stages Resource references none","title":"dockerWorkspace"},{"location":"steps/batsExecuteTests/#envvars","text":"Injects environment variables to step execution. Format of value must be [' = ',' = ']. Example: ['CONTAINER_NAME=piper-jenskins','IMAGE_NAME=my-image'] back to overview Scope Details Aliases - Type []string Mandatory no Default map[] Secret no Configuration scope \u2612 parameter \u2610 general \u2612 steps \u2612 stages Resource references none","title":"envVars"},{"location":"steps/batsExecuteTests/#outputformat","text":"Defines the format of the test result output. junit would be the standard for automated build environments but you could use also the option tap. back to overview Scope Details Aliases - Type string Mandatory no Default junit Possible values - tap - junit Secret no Configuration scope \u2612 parameter \u2610 general \u2612 steps \u2612 stages Resource references none","title":"outputFormat"},{"location":"steps/batsExecuteTests/#repository","text":"Defines the version of bats-core to be used. By default we use the version from the master branch. back to overview Scope Details Aliases - Type string Mandatory no Default https://github.com/bats-core/bats-core.git Secret no Configuration scope \u2612 parameter \u2610 general \u2612 steps \u2612 stages Resource references none","title":"repository"},{"location":"steps/batsExecuteTests/#script","text":"The common script environment of the Jenkinsfile running. Typically the reference to the script calling the pipeline step is provided with the this parameter, as in script: this . This allows the function to access the commonPipelineEnvironment for retrieving, e.g. configuration parameters. back to overview Scope Details Aliases - Type Jenkins Script Mandatory yes Default Secret no Configuration scope \u2610 parameter \u2610 general \u2610 steps \u2610 stages Resource references none","title":"script"},{"location":"steps/batsExecuteTests/#stashcontent","text":"Jenkins-specific: Used for proper environment setup. Specific stashes that should be considered for the step execution. back to overview Scope Details Aliases - Type []string Mandatory no Default - tests Secret no Configuration scope \u2612 parameter \u2612 general \u2612 steps \u2612 stages Resource references none","title":"stashContent"},{"location":"steps/batsExecuteTests/#testpackage","text":"For the transformation of the test result to xUnit format the node module tap-xunit is used. This parameter defines the name of the test package used in the xUnit result file. back to overview Scope Details Aliases - Type string Mandatory no Default piper-bats Secret no Configuration scope \u2612 parameter \u2610 general \u2612 steps \u2612 stages Resource references none","title":"testPackage"},{"location":"steps/batsExecuteTests/#testpath","text":"Defines either the directory which contains the test files (*.bats) or a single file. You can find further details in the Bats-core documentation. back to overview Scope Details Aliases - Type string Mandatory no Default src/test Secret no Configuration scope \u2612 parameter \u2610 general \u2612 steps \u2612 stages Resource references none","title":"testPath"},{"location":"steps/batsExecuteTests/#verbose","text":"verbose output back to overview Scope Details Aliases - Type bool Mandatory no Default false Possible values - true - false Secret no Configuration scope \u2612 parameter \u2612 general \u2612 steps \u2612 stages Resource references none","title":"verbose"},{"location":"steps/batsExecuteTests/#example","text":"batsExecuteTests script: this testsPublishResults junit: [ pattern: '**/Test-*.xml' , archive: true ] With `envVars` it is possible to pass either fixed values but also templates using [`commonPipelineEnvironment`](commonPipelineEnvironment.md). Example: ```yaml batsExecuteTests script: this, envVars = [ FIX_VALUE: 'my fixed value', CONTAINER_NAME: '\\${commonPipelineEnvironment.configuration.steps.executeBatsTests.dockerContainerName}', IMAGE_NAME: '\\${return commonPipelineEnvironment.getDockerImageNameAndTag()}' ] ``` This means within the test one could refer to environment variables by calling e.g. `run docker run --rm -i --name \\$CONTAINER_NAME --entrypoint /bin/bash \\$IMAGE_NAME echo \"Test\"`","title":"Example"},{"location":"steps/buildExecute/","text":"buildExecute \u00b6 Description \u00b6 This step serves as generic entry point in pipelines for building artifacts. You can use pre-defined buildTool s. Alternatively you can define a command via dockerCommand which should be executed in dockerImage . This allows you to trigger any build tool using a defined Docker container which provides the required build infrastructure. When using buildTool: docker or buildTool: kaniko the created container image is uploaded to a container registry. You need to make sure that the required credentials are provided to the step. For all other buildTool s the artifact will just be stored in the workspace and could then be stash ed for later use. Prerequisites \u00b6 When performing a Docker build you need to maintain the respective credentials in your Jenkins credentials store. Further details for builds when a Docker deamon: see step containerPushToRegistry for builds using Kaniko: see step kanikoExecute Example \u00b6 buildExecute script: this , buildTool: 'maven' Parameters \u00b6 name mandatory default possible values buildTool no docker , kaniko , maven , mta , npm cnbBuild no containerBuildOptions no dockerCommand no dockerImage no dockerImageName no dockerImageTag no dockerRegistryUrl no helmExecute no npmInstall no true npmRunScripts no [] script yes buildTool - Defines the tool used for the build. cnbBuild - Defines if a container image(s) should be created with Cloud Native Buildpacks using the artifact produced by the buildTool . containerBuildOptions - Only for Docker builds on the local daemon: Defines the build options for the build. dockerCommand - For custom build types: Defines the command to be executed within the dockerImage in order to execute the build. dockerImage - For custom build types: Image to be used for builds in case they should run inside a custom Docker container dockerImageName - For Docker builds only (mandatory): name of the image to be built. dockerImageTag - For Docker builds only (mandatory): tag of the image to be built. dockerRegistryUrl - For Docker builds only: Defines the registry url where the image should be pushed to, incl. the protocol like https://my.registry.com . If it is not defined, image will not be pushed to a registry. helmExecute - toggles if a helmExecute is triggered at end of the step after invoking the build tool npmInstall - For buildTool npm: Execute npm install (boolean, default 'true') npmRunScripts - For buildTool npm: List of npm run scripts to execute script - The common script environment of the Jenkinsfile running. Typically the reference to the script calling the pipeline step is provided with the this parameter, as in script: this . This allows the function to access the commonPipelineEnvironment for retrieving, e.g. configuration parameters. Step configuration \u00b6 We recommend to define values of step parameters via config.yml file . In following sections of the config.yml the configuration is possible: parameter general step/stage buildTool X X cnbBuild X containerBuildOptions X dockerCommand X dockerImage X dockerImageName X X dockerImageTag X dockerRegistryUrl X X helmExecute X npmInstall X npmRunScripts X script Dependencies \u00b6 The step depends on the following Jenkins plugins docker kubernetes pipeline-utility-steps workflow-basic-steps workflow-cps-global-lib workflow-durable-task-step The kubernetes plugin is only used if running in a kubernetes environment. Transitive dependencies are omitted. The list might be incomplete. Consider using the ppiper/jenkins-master docker image. This images comes with preinstalled plugins.","title":"buildExecute"},{"location":"steps/buildExecute/#buildexecute","text":"","title":"buildExecute"},{"location":"steps/buildExecute/#description","text":"This step serves as generic entry point in pipelines for building artifacts. You can use pre-defined buildTool s. Alternatively you can define a command via dockerCommand which should be executed in dockerImage . This allows you to trigger any build tool using a defined Docker container which provides the required build infrastructure. When using buildTool: docker or buildTool: kaniko the created container image is uploaded to a container registry. You need to make sure that the required credentials are provided to the step. For all other buildTool s the artifact will just be stored in the workspace and could then be stash ed for later use.","title":"Description"},{"location":"steps/buildExecute/#prerequisites","text":"When performing a Docker build you need to maintain the respective credentials in your Jenkins credentials store. Further details for builds when a Docker deamon: see step containerPushToRegistry for builds using Kaniko: see step kanikoExecute","title":"Prerequisites"},{"location":"steps/buildExecute/#example","text":"buildExecute script: this , buildTool: 'maven'","title":"Example"},{"location":"steps/buildExecute/#parameters","text":"name mandatory default possible values buildTool no docker , kaniko , maven , mta , npm cnbBuild no containerBuildOptions no dockerCommand no dockerImage no dockerImageName no dockerImageTag no dockerRegistryUrl no helmExecute no npmInstall no true npmRunScripts no [] script yes buildTool - Defines the tool used for the build. cnbBuild - Defines if a container image(s) should be created with Cloud Native Buildpacks using the artifact produced by the buildTool . containerBuildOptions - Only for Docker builds on the local daemon: Defines the build options for the build. dockerCommand - For custom build types: Defines the command to be executed within the dockerImage in order to execute the build. dockerImage - For custom build types: Image to be used for builds in case they should run inside a custom Docker container dockerImageName - For Docker builds only (mandatory): name of the image to be built. dockerImageTag - For Docker builds only (mandatory): tag of the image to be built. dockerRegistryUrl - For Docker builds only: Defines the registry url where the image should be pushed to, incl. the protocol like https://my.registry.com . If it is not defined, image will not be pushed to a registry. helmExecute - toggles if a helmExecute is triggered at end of the step after invoking the build tool npmInstall - For buildTool npm: Execute npm install (boolean, default 'true') npmRunScripts - For buildTool npm: List of npm run scripts to execute script - The common script environment of the Jenkinsfile running. Typically the reference to the script calling the pipeline step is provided with the this parameter, as in script: this . This allows the function to access the commonPipelineEnvironment for retrieving, e.g. configuration parameters.","title":"Parameters"},{"location":"steps/buildExecute/#step-configuration","text":"We recommend to define values of step parameters via config.yml file . In following sections of the config.yml the configuration is possible: parameter general step/stage buildTool X X cnbBuild X containerBuildOptions X dockerCommand X dockerImage X dockerImageName X X dockerImageTag X dockerRegistryUrl X X helmExecute X npmInstall X npmRunScripts X script","title":"Step configuration"},{"location":"steps/buildExecute/#dependencies","text":"The step depends on the following Jenkins plugins docker kubernetes pipeline-utility-steps workflow-basic-steps workflow-cps-global-lib workflow-durable-task-step The kubernetes plugin is only used if running in a kubernetes environment. Transitive dependencies are omitted. The list might be incomplete. Consider using the ppiper/jenkins-master docker image. This images comes with preinstalled plugins.","title":"Dependencies"},{"location":"steps/cfManifestSubstituteVariables/","text":"cfManifestSubstituteVariables \u00b6 Description \u00b6 Step to substitute variables in a given YAML file with those specified in one or more variables files given by the manifestVariablesFiles parameter. This follows the behavior of cf push --vars-file , and can be used as a pre-deployment step if commands other than cf push are used for deployment (e.g. cf blue-green-deploy ). The format to reference a variable in the manifest YAML file is to use double parentheses (( and )) , e.g. ((variableName)) . You can declare variable assignments as key value-pairs inside a YAML variables file following the Cloud Foundry standards format. Optionally, you can also specify a direct list of key-value mappings for variables using the manifestVariables parameter. Variables given in the manifestVariables list will take precedence over those found in variables files. This follows the behavior of cf push --var , and works in combination with manifestVariablesFiles . The step is activated by the presence of the file specified by the manifestFile parameter and all variables files specified by the manifestVariablesFiles parameter, or if variables are passed in directly via manifestVariables . In case no manifestVariablesFiles were explicitly specified, a default named manifest-variables.yml will be looked for and if present will activate this step also. This is to support convention over configuration. Parameters \u00b6 name mandatory default possible values manifestFile no manifestVariables no manifestVariablesFiles no outputManifestFile no script yes manifestFile - The String path of the Yaml file to replace variables in. Defaults to \"manifest.yml\" if not specified otherwise. manifestVariables - A List of Map entries for key-value pairs used for variable substitution within the file given by manifestFile . Defaults to an empty list, if not specified otherwise. This can be used to set variables like it is provided by cf push --var key=value . The order of the maps of variables given in the list is relevant in case there are conflicting variable names and values between maps contained within the list. In case of conflicts, the last specified map in the list will win. Though each map entry in the list can contain more than one key-value pair for variable substitution, it is recommended to stick to one entry per map, and rather declare more maps within the list. The reason is that if a map in the list contains more than one key-value entry, and the entries are conflicting, the conflict resolution behavior is undefined (since map entries have no sequence). Note: variables defined via manifestVariables always win over conflicting variables defined via any file given by manifestVariablesFiles - no matter what is declared before. This reproduces the same behavior as can be observed when using cf push --var in combination with cf push --vars-file . manifestVariablesFiles - The List of String paths of the Yaml files containing the variable values to use as a replacement in the manifest file. Defaults to [\"manifest-variables.yml\"] if not specified otherwise. The order of the files given in the list is relevant in case there are conflicting variable names and values within variable files. In such a case, the values of the last file win. outputManifestFile - The String path of the Yaml file to produce as output. If not specified this will default to manifestFile and overwrite it. script - The common script environment of the Jenkinsfile running. Typically the reference to the script calling the pipeline step is provided with the this parameter, as in script: this . This allows the function to access the commonPipelineEnvironment for retrieving, e.g. configuration parameters. Step configuration \u00b6 We recommend to define values of step parameters via config.yml file . In following sections of the config.yml the configuration is possible: parameter general step/stage manifestFile X manifestVariables X manifestVariablesFiles X outputManifestFile X script Dependencies \u00b6 The step depends on the following Jenkins plugins pipeline-utility-steps workflow-basic-steps workflow-cps-global-lib workflow-durable-task-step Transitive dependencies are omitted. The list might be incomplete. Consider using the ppiper/jenkins-master docker image. This images comes with preinstalled plugins. Side effects \u00b6 Unless configured otherwise, this step will replace the input manifest.yml with a version that has all variable references replaced. This alters the source tree in your Jenkins workspace. If you prefer to generate a separate output file, use the step's outputManifestFile parameter. Keep in mind, however, that your Cloud Foundry deployment step should then also reference this output file - otherwise CF deployment will fail with unresolved variable reference errors. Exceptions \u00b6 org.yaml.snakeyaml.scanner.ScannerException - in case any of the loaded input files contains malformed Yaml and cannot be parsed. hudson.AbortException - in case of internal errors and when not all variables could be replaced due to missing replacement values. Example \u00b6 Usage of pipeline step: cfManifestSubstituteVariables ( script: this , manifestFile: \"path/to/manifest.yml\" , //optional, default: manifest.yml manifestVariablesFiles: [ \"path/to/manifest-variables.yml\" ] //optional, default: ['manifest-variables.yml'] manifestVariables: [[ key : value ], [ key : value ]] //optional, default: [] ) For example, you can refer to the parameters using relative paths (similar to cf push --vars-file ): cfManifestSubstituteVariables ( script: this , manifestFile: \"manifest.yml\" , manifestVariablesFiles: [ \"manifest-variables.yml\" ] ) Furthermore, you can also specify variables and their values directly (similar to cf push --var ): cfManifestSubstituteVariables ( script: this , manifestFile: \"manifest.yml\" , manifestVariablesFiles: [ \"manifest-variables.yml\" ], manifestVariables: [[ key1 : value1 ], [ key2 : value2 ]] ) If you are using the Cloud Foundry Create-Service-Push CLI plugin you will most likely also have a services-manifest.yml file. Also in this file you can specify variable references, that can be resolved from the same variables file, e.g. like this: // resolve variables in manifest.yml cfManifestSubstituteVariables ( script: this , manifestFile: \"manifest.yml\" , manifestVariablesFiles: [ \"manifest-variables.yml\" ] ) // resolve variables in services-manifest.yml from same file. cfManifestSubstituteVariables ( script: this , manifestFile: \"services-manifest.yml\" , manifestVariablesFiles: [ \"manifest-variables.yml\" ] )","title":"cfManifestSubstituteVariables"},{"location":"steps/cfManifestSubstituteVariables/#cfmanifestsubstitutevariables","text":"","title":"cfManifestSubstituteVariables"},{"location":"steps/cfManifestSubstituteVariables/#description","text":"Step to substitute variables in a given YAML file with those specified in one or more variables files given by the manifestVariablesFiles parameter. This follows the behavior of cf push --vars-file , and can be used as a pre-deployment step if commands other than cf push are used for deployment (e.g. cf blue-green-deploy ). The format to reference a variable in the manifest YAML file is to use double parentheses (( and )) , e.g. ((variableName)) . You can declare variable assignments as key value-pairs inside a YAML variables file following the Cloud Foundry standards format. Optionally, you can also specify a direct list of key-value mappings for variables using the manifestVariables parameter. Variables given in the manifestVariables list will take precedence over those found in variables files. This follows the behavior of cf push --var , and works in combination with manifestVariablesFiles . The step is activated by the presence of the file specified by the manifestFile parameter and all variables files specified by the manifestVariablesFiles parameter, or if variables are passed in directly via manifestVariables . In case no manifestVariablesFiles were explicitly specified, a default named manifest-variables.yml will be looked for and if present will activate this step also. This is to support convention over configuration.","title":"Description"},{"location":"steps/cfManifestSubstituteVariables/#parameters","text":"name mandatory default possible values manifestFile no manifestVariables no manifestVariablesFiles no outputManifestFile no script yes manifestFile - The String path of the Yaml file to replace variables in. Defaults to \"manifest.yml\" if not specified otherwise. manifestVariables - A List of Map entries for key-value pairs used for variable substitution within the file given by manifestFile . Defaults to an empty list, if not specified otherwise. This can be used to set variables like it is provided by cf push --var key=value . The order of the maps of variables given in the list is relevant in case there are conflicting variable names and values between maps contained within the list. In case of conflicts, the last specified map in the list will win. Though each map entry in the list can contain more than one key-value pair for variable substitution, it is recommended to stick to one entry per map, and rather declare more maps within the list. The reason is that if a map in the list contains more than one key-value entry, and the entries are conflicting, the conflict resolution behavior is undefined (since map entries have no sequence). Note: variables defined via manifestVariables always win over conflicting variables defined via any file given by manifestVariablesFiles - no matter what is declared before. This reproduces the same behavior as can be observed when using cf push --var in combination with cf push --vars-file . manifestVariablesFiles - The List of String paths of the Yaml files containing the variable values to use as a replacement in the manifest file. Defaults to [\"manifest-variables.yml\"] if not specified otherwise. The order of the files given in the list is relevant in case there are conflicting variable names and values within variable files. In such a case, the values of the last file win. outputManifestFile - The String path of the Yaml file to produce as output. If not specified this will default to manifestFile and overwrite it. script - The common script environment of the Jenkinsfile running. Typically the reference to the script calling the pipeline step is provided with the this parameter, as in script: this . This allows the function to access the commonPipelineEnvironment for retrieving, e.g. configuration parameters.","title":"Parameters"},{"location":"steps/cfManifestSubstituteVariables/#step-configuration","text":"We recommend to define values of step parameters via config.yml file . In following sections of the config.yml the configuration is possible: parameter general step/stage manifestFile X manifestVariables X manifestVariablesFiles X outputManifestFile X script","title":"Step configuration"},{"location":"steps/cfManifestSubstituteVariables/#dependencies","text":"The step depends on the following Jenkins plugins pipeline-utility-steps workflow-basic-steps workflow-cps-global-lib workflow-durable-task-step Transitive dependencies are omitted. The list might be incomplete. Consider using the ppiper/jenkins-master docker image. This images comes with preinstalled plugins.","title":"Dependencies"},{"location":"steps/cfManifestSubstituteVariables/#side-effects","text":"Unless configured otherwise, this step will replace the input manifest.yml with a version that has all variable references replaced. This alters the source tree in your Jenkins workspace. If you prefer to generate a separate output file, use the step's outputManifestFile parameter. Keep in mind, however, that your Cloud Foundry deployment step should then also reference this output file - otherwise CF deployment will fail with unresolved variable reference errors.","title":"Side effects"},{"location":"steps/cfManifestSubstituteVariables/#exceptions","text":"org.yaml.snakeyaml.scanner.ScannerException - in case any of the loaded input files contains malformed Yaml and cannot be parsed. hudson.AbortException - in case of internal errors and when not all variables could be replaced due to missing replacement values.","title":"Exceptions"},{"location":"steps/cfManifestSubstituteVariables/#example","text":"Usage of pipeline step: cfManifestSubstituteVariables ( script: this , manifestFile: \"path/to/manifest.yml\" , //optional, default: manifest.yml manifestVariablesFiles: [ \"path/to/manifest-variables.yml\" ] //optional, default: ['manifest-variables.yml'] manifestVariables: [[ key : value ], [ key : value ]] //optional, default: [] ) For example, you can refer to the parameters using relative paths (similar to cf push --vars-file ): cfManifestSubstituteVariables ( script: this , manifestFile: \"manifest.yml\" , manifestVariablesFiles: [ \"manifest-variables.yml\" ] ) Furthermore, you can also specify variables and their values directly (similar to cf push --var ): cfManifestSubstituteVariables ( script: this , manifestFile: \"manifest.yml\" , manifestVariablesFiles: [ \"manifest-variables.yml\" ], manifestVariables: [[ key1 : value1 ], [ key2 : value2 ]] ) If you are using the Cloud Foundry Create-Service-Push CLI plugin you will most likely also have a services-manifest.yml file. Also in this file you can specify variable references, that can be resolved from the same variables file, e.g. like this: // resolve variables in manifest.yml cfManifestSubstituteVariables ( script: this , manifestFile: \"manifest.yml\" , manifestVariablesFiles: [ \"manifest-variables.yml\" ] ) // resolve variables in services-manifest.yml from same file. cfManifestSubstituteVariables ( script: this , manifestFile: \"services-manifest.yml\" , manifestVariablesFiles: [ \"manifest-variables.yml\" ] )","title":"Example"},{"location":"steps/checkChangeInDevelopment/","text":"checkChangeInDevelopment \u00b6 Description \u00b6 Checks if a Change Document in SAP Solution Manager is in status 'in development'. The change document id is retrieved from the git commit history. The change document id can also be provided via parameter changeDocumentId . Any value provided as parameter has a higher precedence than a value from the commit history. By default the git commit messages between origin/master and HEAD are scanned for a line like ChangeDocument : <changeDocumentId> . The commit range and the pattern can be configured. For details see 'parameters' table. Migration Guide \u00b6 Note: This step has been deprecated. Use the new step isChangeInDevelopment instead. Adjust your parameters to the naming convention of the new step. Adjust the unsupported parameters as indicated in the table below: Unsupported Parameter New Parameter changeManagement/type This parameter has been removed. SOLMAN is the only backend type supported. changeManagement/ <type> /docker/envVars dockerEnvVars changeManagement/ <type> /docker/image dockerImage changeManagement/ <type> /docker/options dockerOptions changeManagement/ <type> /docker/pullImage dockerPullImage changeManagement/git/format This parameter has been removed. Make sure that the IDS of your change document and transport request are part of the Git commit message body. Your config.yml file should look as follows: general : # new naming convention steps : isChangeInDevelopment : dockerImage : 'ppiper/cm-client:3.0.0.0' Note: The new step does not comprise the retrieval of the change document ID from the Git repository anymore. Use the step transportRequestDocIDFromGit instead. Parameters \u00b6 name mandatory default possible values changeDocumentId yes changeManagement/changeDocumentLabel no ChangeDocument\\s?: regex pattern changeManagement/clientOpts no `` changeManagement/credentialsId no CM changeManagement/endpoint yes changeManagement/git/format no %b see git log --help changeManagement/git/from no origin/master changeManagement/git/to no HEAD failIfStatusIsNotInDevelopment no true true , false script yes changeDocumentId - The id of the change document to transport. If not provided, it is retrieved from the git commit history. changeManagement/changeDocumentLabel - A pattern used for identifying lines holding the change document id. changeManagement/clientOpts - Additional options for cm command line client, e.g. JAVA_OPTS. changeManagement/credentialsId - The id of the credentials to connect to the Solution Manager. The credentials needs to be maintained on Jenkins. changeManagement/endpoint - The service endpoint, e.g. Solution Manager, ABAP System. changeManagement/git/format - Specifies what part of the commit is scanned. By default the body of the commit message is scanned. changeManagement/git/from - The starting point for retrieving the change document id. changeManagement/git/to - The end point for retrieving the change document id. failIfStatusIsNotInDevelopment - When set to false the step will not fail in case the step is not in status 'in development'. script - The common script environment of the Jenkinsfile running. Typically the reference to the script calling the pipeline step is provided with the this parameter, as in script: this . This allows the function to access the commonPipelineEnvironment for retrieving, e.g. configuration parameters. Step configuration \u00b6 We recommend to define values of step parameters via config.yml file . In following sections of the config.yml the configuration is possible: parameter general step/stage changeDocumentId changeManagement/changeDocumentLabel X X changeManagement/clientOpts X X changeManagement/credentialsId X X changeManagement/endpoint X X changeManagement/git/format X X changeManagement/git/from X X changeManagement/git/to X X failIfStatusIsNotInDevelopment X script Dependencies \u00b6 The step depends on the following Jenkins plugins badge credentials-binding docker kubernetes pipeline-utility-steps ssh-agent workflow-basic-steps workflow-cps-global-lib workflow-durable-task-step The kubernetes plugin is only used if running in a kubernetes environment. Transitive dependencies are omitted. The list might be incomplete. Consider using the ppiper/jenkins-master docker image. This images comes with preinstalled plugins. Exceptions \u00b6 AbortException : If the change id is not provided via parameter and if the change document id cannot be retrieved from the commit history. If the change is not in status in development . In this case no exception will be thrown when failIfStatusIsNotInDevelopment is set to false . IllegalArgumentException : If a mandatory property is not provided. Examples \u00b6 The step is configured using a customer configuration file provided as resource in an custom shared library. @Library ( 'piper-lib-os@master' ) _ // the shared lib containing the additional configuration // needs to be configured in Jenkins @Library ( 'foo@master' ) __ // inside the shared lib denoted by 'foo' the additional configuration file // needs to be located under 'resources' ('resoures/myConfig.yml') prepareDefaultValues script: this , customDefaults: 'myConfig.yml' Example content of 'resources/myConfig.yml' in branch 'master' of the repository denoted by 'foo' : general : changeManagement : changeDocumentLabel : 'ChangeDocument\\s?:' cmClientOpts : '-Djavax.net.ssl.trustStore=<path to truststore>' credentialsId : 'CM' endpoint : 'https://example.org/cm' git : from : 'HEAD~1' to : 'HEAD' format : '%b' The properties configured in section 'general/changeManagement' are shared between all change management related steps. The properties can also be configured on a per-step basis: [ ... ] steps : checkChangeInDevelopment : changeManagement : endpoint : 'https://example.org/cm' [ ... ] failIfStatusIsNotInDevelopment : true The parameters can also be provided when the step is invoked: // simple case. All mandatory parameters provided via // configuration, changeDocumentId provided via commit // history checkChangeInDevelopment script: this // explicit endpoint provided, we search for changeDocumentId // starting at the previous commit (HEAD~1) rather than on // 'origin/master' (the default). checkChangeInDevelopment ( script: this changeManagement: [ endpoint: 'https:example.org/cm' git: [ from: 'HEAD~1' ] ] )","title":"checkChangeInDevelopment"},{"location":"steps/checkChangeInDevelopment/#checkchangeindevelopment","text":"","title":"checkChangeInDevelopment"},{"location":"steps/checkChangeInDevelopment/#description","text":"Checks if a Change Document in SAP Solution Manager is in status 'in development'. The change document id is retrieved from the git commit history. The change document id can also be provided via parameter changeDocumentId . Any value provided as parameter has a higher precedence than a value from the commit history. By default the git commit messages between origin/master and HEAD are scanned for a line like ChangeDocument : <changeDocumentId> . The commit range and the pattern can be configured. For details see 'parameters' table.","title":"Description"},{"location":"steps/checkChangeInDevelopment/#migration-guide","text":"Note: This step has been deprecated. Use the new step isChangeInDevelopment instead. Adjust your parameters to the naming convention of the new step. Adjust the unsupported parameters as indicated in the table below: Unsupported Parameter New Parameter changeManagement/type This parameter has been removed. SOLMAN is the only backend type supported. changeManagement/ <type> /docker/envVars dockerEnvVars changeManagement/ <type> /docker/image dockerImage changeManagement/ <type> /docker/options dockerOptions changeManagement/ <type> /docker/pullImage dockerPullImage changeManagement/git/format This parameter has been removed. Make sure that the IDS of your change document and transport request are part of the Git commit message body. Your config.yml file should look as follows: general : # new naming convention steps : isChangeInDevelopment : dockerImage : 'ppiper/cm-client:3.0.0.0' Note: The new step does not comprise the retrieval of the change document ID from the Git repository anymore. Use the step transportRequestDocIDFromGit instead.","title":"Migration Guide"},{"location":"steps/checkChangeInDevelopment/#parameters","text":"name mandatory default possible values changeDocumentId yes changeManagement/changeDocumentLabel no ChangeDocument\\s?: regex pattern changeManagement/clientOpts no `` changeManagement/credentialsId no CM changeManagement/endpoint yes changeManagement/git/format no %b see git log --help changeManagement/git/from no origin/master changeManagement/git/to no HEAD failIfStatusIsNotInDevelopment no true true , false script yes changeDocumentId - The id of the change document to transport. If not provided, it is retrieved from the git commit history. changeManagement/changeDocumentLabel - A pattern used for identifying lines holding the change document id. changeManagement/clientOpts - Additional options for cm command line client, e.g. JAVA_OPTS. changeManagement/credentialsId - The id of the credentials to connect to the Solution Manager. The credentials needs to be maintained on Jenkins. changeManagement/endpoint - The service endpoint, e.g. Solution Manager, ABAP System. changeManagement/git/format - Specifies what part of the commit is scanned. By default the body of the commit message is scanned. changeManagement/git/from - The starting point for retrieving the change document id. changeManagement/git/to - The end point for retrieving the change document id. failIfStatusIsNotInDevelopment - When set to false the step will not fail in case the step is not in status 'in development'. script - The common script environment of the Jenkinsfile running. Typically the reference to the script calling the pipeline step is provided with the this parameter, as in script: this . This allows the function to access the commonPipelineEnvironment for retrieving, e.g. configuration parameters.","title":"Parameters"},{"location":"steps/checkChangeInDevelopment/#step-configuration","text":"We recommend to define values of step parameters via config.yml file . In following sections of the config.yml the configuration is possible: parameter general step/stage changeDocumentId changeManagement/changeDocumentLabel X X changeManagement/clientOpts X X changeManagement/credentialsId X X changeManagement/endpoint X X changeManagement/git/format X X changeManagement/git/from X X changeManagement/git/to X X failIfStatusIsNotInDevelopment X script","title":"Step configuration"},{"location":"steps/checkChangeInDevelopment/#dependencies","text":"The step depends on the following Jenkins plugins badge credentials-binding docker kubernetes pipeline-utility-steps ssh-agent workflow-basic-steps workflow-cps-global-lib workflow-durable-task-step The kubernetes plugin is only used if running in a kubernetes environment. Transitive dependencies are omitted. The list might be incomplete. Consider using the ppiper/jenkins-master docker image. This images comes with preinstalled plugins.","title":"Dependencies"},{"location":"steps/checkChangeInDevelopment/#exceptions","text":"AbortException : If the change id is not provided via parameter and if the change document id cannot be retrieved from the commit history. If the change is not in status in development . In this case no exception will be thrown when failIfStatusIsNotInDevelopment is set to false . IllegalArgumentException : If a mandatory property is not provided.","title":"Exceptions"},{"location":"steps/checkChangeInDevelopment/#examples","text":"The step is configured using a customer configuration file provided as resource in an custom shared library. @Library ( 'piper-lib-os@master' ) _ // the shared lib containing the additional configuration // needs to be configured in Jenkins @Library ( 'foo@master' ) __ // inside the shared lib denoted by 'foo' the additional configuration file // needs to be located under 'resources' ('resoures/myConfig.yml') prepareDefaultValues script: this , customDefaults: 'myConfig.yml' Example content of 'resources/myConfig.yml' in branch 'master' of the repository denoted by 'foo' : general : changeManagement : changeDocumentLabel : 'ChangeDocument\\s?:' cmClientOpts : '-Djavax.net.ssl.trustStore=<path to truststore>' credentialsId : 'CM' endpoint : 'https://example.org/cm' git : from : 'HEAD~1' to : 'HEAD' format : '%b' The properties configured in section 'general/changeManagement' are shared between all change management related steps. The properties can also be configured on a per-step basis: [ ... ] steps : checkChangeInDevelopment : changeManagement : endpoint : 'https://example.org/cm' [ ... ] failIfStatusIsNotInDevelopment : true The parameters can also be provided when the step is invoked: // simple case. All mandatory parameters provided via // configuration, changeDocumentId provided via commit // history checkChangeInDevelopment script: this // explicit endpoint provided, we search for changeDocumentId // starting at the previous commit (HEAD~1) rather than on // 'origin/master' (the default). checkChangeInDevelopment ( script: this changeManagement: [ endpoint: 'https:example.org/cm' git: [ from: 'HEAD~1' ] ] )","title":"Examples"},{"location":"steps/checkmarxExecuteScan/","text":"checkmarxExecuteScan \u00b6 Checkmarx is the recommended tool for security scans of JavaScript, iOS, Swift and Ruby code. Description \u00b6 Checkmarx is a Static Application Security Testing (SAST) tool to analyze i.e. Java- or TypeScript, Swift, Golang, Ruby code, and many other programming languages for security flaws based on a set of provided rules/queries that can be customized and extended. This step by default enforces a specific audit baseline for findings and therefore ensures that: No 'To Verify' High and Medium issues exist in your project Total number of High and Medium 'Confirmed' or 'Urgent' issues is zero 10% of all Low issues are 'Confirmed' or 'Not Exploitable' You can adapt above thresholds specifically using the provided configuration parameters and i.e. check for absolute thresholds instead of percentage whereas we strongly recommend you to stay with the defaults provided. Usage \u00b6 We recommend to define values of step parameters via .pipeline/config.yml file . In this case, calling the step is essentially reduced to defining the step name. Calling the step can be done either in an orchestrator specific way (e.g. via a Jenkins library step) or on the command line. Jenkins Command Line library ( 'piper-lib-os' ) checkmarxExecuteScan script: this piper checkmarxExecuteScan Outputs \u00b6 Output type Details influx measurement step_data checkmarx measurement checkmarx_data high_issues high_not_false_positive high_not_exploitable high_confirmed high_urgent high_proposed_not_exploitable high_to_verify medium_issues medium_not_false_positive medium_not_exploitable medium_confirmed medium_urgent medium_proposed_not_exploitable medium_to_verify low_issues low_not_false_positive low_not_exploitable low_confirmed low_urgent low_proposed_not_exploitable low_to_verify information_issues information_not_false_positive information_not_exploitable information_confirmed information_urgent information_proposed_not_exploitable information_to_verify lines_of_code_scanned files_scanned initiator_name owner scan_id project_id projectName team team_full_path_on_report_date scan_start scan_time checkmarx_version scan_type preset deep_link report_creation_time Parameters \u00b6 Overview - Step \u00b6 Name Mandatory Additional information password (yes) pass via ENV, Vault or Jenkins credentials ( checkmarxCredentialsId ) projectName yes script (yes) reference to Jenkins main pipeline script serverUrl yes username (yes) pass via ENV, Vault or Jenkins credentials ( checkmarxCredentialsId ) assignees no avoidDuplicateProjectScans no convertToSarif no createResultIssue no engineConfigurationID no filterPattern no fullScanCycle no fullScansScheduled no generatePdfReport no githubApiUrl no githubToken no pass via ENV, Vault or Jenkins credentials ( githubTokenCredentialsId ) incremental no isOptimizedAndScheduled no maxRetries no owner no preset no pullRequestName no repository no teamId no teamName no verbose no activates debug output verifyOnly no vulnerabilityThresholdEnabled no vulnerabilityThresholdHigh no vulnerabilityThresholdLow no vulnerabilityThresholdLowPerQuery no vulnerabilityThresholdLowPerQueryMax no vulnerabilityThresholdMedium no vulnerabilityThresholdResult no vulnerabilityThresholdUnit no Overview - Execution Environment \u00b6 Orchestrator-specific only These parameters are relevant for orchestrator usage and not considered when using the command line option. Name Mandatory Additional information stashContent no Details \u00b6 assignees \u00b6 Defines the assignees for the Github Issue created/updated with the results of the scan as a list of login names. back to overview Scope Details Aliases - Type []string Mandatory no Default Secret no Configuration scope \u2612 parameter \u2610 general \u2612 steps \u2612 stages Resource references none avoidDuplicateProjectScans \u00b6 Tell Checkmarx to skip the scan if no code change is detected back to overview Scope Details Aliases notForceScan Type bool Mandatory no Default true Possible values - true - false Secret no Configuration scope \u2612 parameter \u2610 general \u2612 steps \u2612 stages Resource references none convertToSarif \u00b6 Convert the Checkmarx XML scan results to the open SARIF standard. back to overview Scope Details Aliases - Type bool Mandatory no Default true Possible values - true - false Secret no Configuration scope \u2612 parameter \u2610 general \u2612 steps \u2612 stages Resource references none createResultIssue \u00b6 Whether the step creates a GitHub issue containing the scan results in the originating repo. Since optimized pipelines are headless the creation is implicitly activated for scheduled runs. back to overview Scope Details Aliases - Type bool Mandatory no Default false Possible values - true - false Secret no Configuration scope \u2612 parameter \u2612 general \u2612 steps \u2612 stages Resource references commonPipelineEnvironment : reference to: custom/isOptimizedAndScheduled engineConfigurationID \u00b6 The engine configuration ID to be used, if not set explicitly the project's default will be used back to overview Scope Details Aliases sourceEncoding Type string Mandatory no Default $PIPER_engineConfigurationID (if set) Secret no Configuration scope \u2612 parameter \u2610 general \u2612 steps \u2612 stages Resource references none filterPattern \u00b6 The filter pattern used to zip the files relevant for scanning, patterns can be negated by setting an exclamation mark in front i.e. !test/*.js would avoid adding any javascript files located in the test directory back to overview Scope Details Aliases - Type string Mandatory no Default !**/node_modules/**, !**/.xmake/**, !**/*_test.go, !**/vendor/**/*.go, **/*.html, **/*.xml, **/*.go, **/*.py, **/*.js, **/*.scala, **/*.ts Secret no Configuration scope \u2612 parameter \u2610 general \u2612 steps \u2612 stages Resource references none fullScanCycle \u00b6 Indicates how often a full scan should happen between the incremental scans when activated back to overview Scope Details Aliases - Type string Mandatory no Default 5 Secret no Configuration scope \u2612 parameter \u2610 general \u2612 steps \u2612 stages Resource references none fullScansScheduled \u00b6 Whether full scans are to be scheduled or not. Should be used in relation with incremental and fullScanCycle back to overview Scope Details Aliases - Type bool Mandatory no Default true Possible values - true - false Secret no Configuration scope \u2612 parameter \u2610 general \u2612 steps \u2612 stages Resource references none generatePdfReport \u00b6 Whether to generate a PDF report of the analysis results or not back to overview Scope Details Aliases - Type bool Mandatory no Default true Possible values - true - false Secret no Configuration scope \u2612 parameter \u2610 general \u2612 steps \u2612 stages Resource references none githubApiUrl \u00b6 Set the GitHub API URL. back to overview Scope Details Aliases - Type string Mandatory no Default https://api.github.com Secret no Configuration scope \u2612 parameter \u2612 general \u2612 steps \u2612 stages Resource references none githubToken \u00b6 GitHub personal access token as per https://help.github.com/en/github/authenticating-to-github/creating-a-personal-access-token-for-the-command-line back to overview Scope Details Aliases access_token Type string Mandatory no Default $PIPER_githubToken (if set) Secret yes Configuration scope \u2612 parameter \u2612 general \u2612 steps \u2612 stages Resource references Jenkins credential id: id: githubTokenCredentialsId Vault resource: name: githubVaultSecretName default value: github Vault paths: $(vaultPath)/github $(vaultBasePath)/$(vaultPipelineName)/github $(vaultBasePath)/GROUP-SECRETS/github incremental \u00b6 Whether incremental scans are to be applied which optimizes the scan time but might reduce detection capabilities. Therefore full scans are still required from time to time and should be scheduled via fullScansScheduled and fullScanCycle back to overview Scope Details Aliases - Type bool Mandatory no Default true Possible values - true - false Secret no Configuration scope \u2612 parameter \u2610 general \u2612 steps \u2612 stages Resource references none isOptimizedAndScheduled \u00b6 Whether the pipeline runs in optimized mode and the current execution is a scheduled one back to overview Scope Details Aliases - Type bool Mandatory no Default false Possible values - true - false Secret no Configuration scope \u2612 parameter \u2610 general \u2610 steps \u2610 stages Resource references commonPipelineEnvironment : reference to: custom/isOptimizedAndScheduled maxRetries \u00b6 Maximum number of HTTP request retries upon intermittend connetion interrupts back to overview Scope Details Aliases - Type int Mandatory no Default 3 Secret no Configuration scope \u2612 parameter \u2610 general \u2612 steps \u2612 stages Resource references none owner \u00b6 Set the GitHub organization. back to overview Scope Details Aliases githubOrg Type string Mandatory no Default $PIPER_owner (if set) Secret no Configuration scope \u2612 parameter \u2612 general \u2612 steps \u2612 stages Resource references commonPipelineEnvironment : reference to: github/owner password \u00b6 The password to authenticate back to overview Scope Details Aliases - Type string Mandatory yes Default $PIPER_password (if set) Secret yes Configuration scope \u2612 parameter \u2610 general \u2612 steps \u2612 stages Resource references Jenkins credential id: id: checkmarxCredentialsId reference to: password Vault resource: name: checkmarxVaultSecretName default value: checkmarx Vault paths: $(vaultPath)/checkmarx $(vaultBasePath)/$(vaultPipelineName)/checkmarx $(vaultBasePath)/GROUP-SECRETS/checkmarx preset \u00b6 The preset to use for scanning, if not set explicitly the step will attempt to look up the project's setting based on the availability of checkmarxCredentialsId back to overview Scope Details Aliases - Type string Mandatory no Default $PIPER_preset (if set) Secret no Configuration scope \u2612 parameter \u2610 general \u2612 steps \u2612 stages Resource references none projectName \u00b6 The name of the Checkmarx project to scan into back to overview Scope Details Aliases - checkmarxProject - checkMarxProjectName ( deprecated ) Type string Mandatory yes Default $PIPER_projectName (if set) Secret no Configuration scope \u2612 parameter \u2610 general \u2612 steps \u2612 stages Resource references none pullRequestName \u00b6 Used to supply the name for the newly created PR project branch when being used in pull request scenarios back to overview Scope Details Aliases - Type string Mandatory no Default $PIPER_pullRequestName (if set) Secret no Configuration scope \u2612 parameter \u2610 general \u2612 steps \u2612 stages Resource references none repository \u00b6 Set the GitHub repository. back to overview Scope Details Aliases githubRepo Type string Mandatory no Default $PIPER_repository (if set) Secret no Configuration scope \u2612 parameter \u2612 general \u2612 steps \u2612 stages Resource references commonPipelineEnvironment : reference to: github/repository script \u00b6 The common script environment of the Jenkinsfile running. Typically the reference to the script calling the pipeline step is provided with the this parameter, as in script: this . This allows the function to access the commonPipelineEnvironment for retrieving, e.g. configuration parameters. back to overview Scope Details Aliases - Type Jenkins Script Mandatory yes Default Secret no Configuration scope \u2610 parameter \u2610 general \u2610 steps \u2610 stages Resource references none serverUrl \u00b6 The URL pointing to the root of the Checkmarx server to be used back to overview Scope Details Aliases checkmarxServerUrl Type string Mandatory yes Default $PIPER_serverUrl (if set) Secret no Configuration scope \u2612 parameter \u2612 general \u2612 steps \u2612 stages Resource references none stashContent \u00b6 Jenkins-specific: Used for proper environment setup. Specific stashes that should be considered for the step execution. back to overview Scope Details Aliases - Type []string Mandatory no Default - checkmarx Secret no Configuration scope \u2612 parameter \u2612 general \u2612 steps \u2612 stages Resource references none teamId \u00b6 The group ID related to your team which can be obtained via the Pipeline Syntax plugin as described in the Details section back to overview Scope Details Aliases - checkmarxGroupId - groupId ( deprecated ) Type string Mandatory no Default $PIPER_teamId (if set) Secret no Configuration scope \u2612 parameter \u2610 general \u2612 steps \u2612 stages Resource references none teamName \u00b6 The full name of the team to assign newly created projects to which is preferred to teamId back to overview Scope Details Aliases - Type string Mandatory no Default $PIPER_teamName (if set) Secret no Configuration scope \u2612 parameter \u2610 general \u2612 steps \u2612 stages Resource references none username \u00b6 The username to authenticate back to overview Scope Details Aliases - Type string Mandatory yes Default $PIPER_username (if set) Secret yes Configuration scope \u2612 parameter \u2610 general \u2612 steps \u2612 stages Resource references Jenkins credential id: id: checkmarxCredentialsId reference to: username Vault resource: name: checkmarxVaultSecretName default value: checkmarx Vault paths: $(vaultPath)/checkmarx $(vaultBasePath)/$(vaultPipelineName)/checkmarx $(vaultBasePath)/GROUP-SECRETS/checkmarx verbose \u00b6 verbose output back to overview Scope Details Aliases - Type bool Mandatory no Default false Possible values - true - false Secret no Configuration scope \u2612 parameter \u2612 general \u2612 steps \u2612 stages Resource references none verifyOnly \u00b6 Whether the step shall only apply verification checks or whether it does a full scan and check cycle back to overview Scope Details Aliases - Type bool Mandatory no Default false Possible values - true - false Secret no Configuration scope \u2612 parameter \u2610 general \u2612 steps \u2612 stages Resource references none vulnerabilityThresholdEnabled \u00b6 Whether the thresholds are enabled or not. If enabled the build will be set to vulnerabilityThresholdResult in case a specific threshold value is exceeded back to overview Scope Details Aliases - Type bool Mandatory no Default true Possible values - true - false Secret no Configuration scope \u2612 parameter \u2610 general \u2612 steps \u2612 stages Resource references none vulnerabilityThresholdHigh \u00b6 The specific threshold for high severity findings back to overview Scope Details Aliases - Type int Mandatory no Default 100 Secret no Configuration scope \u2612 parameter \u2610 general \u2612 steps \u2612 stages Resource references none vulnerabilityThresholdLow \u00b6 The specific threshold for low severity findings back to overview Scope Details Aliases - Type int Mandatory no Default 10 Secret no Configuration scope \u2612 parameter \u2610 general \u2612 steps \u2612 stages Resource references none vulnerabilityThresholdLowPerQuery \u00b6 Flag to activate/deactivate the threshold of low severity findings per query back to overview Scope Details Aliases - Type bool Mandatory no Default false Possible values - true - false Secret no Configuration scope \u2612 parameter \u2610 general \u2612 steps \u2612 stages Resource references none vulnerabilityThresholdLowPerQueryMax \u00b6 Upper threshold of low severity findings per query (in absolute number) back to overview Scope Details Aliases - Type int Mandatory no Default 10 Secret no Configuration scope \u2612 parameter \u2610 general \u2612 steps \u2612 stages Resource references none vulnerabilityThresholdMedium \u00b6 The specific threshold for medium severity findings back to overview Scope Details Aliases - Type int Mandatory no Default 100 Secret no Configuration scope \u2612 parameter \u2610 general \u2612 steps \u2612 stages Resource references none vulnerabilityThresholdResult \u00b6 The result of the build in case thresholds are enabled and exceeded back to overview Scope Details Aliases - Type string Mandatory no Default FAILURE Possible values - FAILURE Secret no Configuration scope \u2612 parameter \u2610 general \u2612 steps \u2612 stages Resource references none vulnerabilityThresholdUnit \u00b6 The unit for the threshold to apply. back to overview Scope Details Aliases - Type string Mandatory no Default percentage Secret no Configuration scope \u2612 parameter \u2610 general \u2612 steps \u2612 stages Resource references none checkmarxCredentialsId \u00b6 Jenkins 'Username with password' credentials ID containing username and password to communicate with the Checkmarx backend. back to overview Scope Details Aliases - Type string Configuration scope \u2612 parameter \u2612 general \u2612 steps \u2612 stages githubTokenCredentialsId \u00b6 Jenkins 'Secret text' credentials ID containing token to authenticate to GitHub. back to overview Scope Details Aliases - Type string Configuration scope \u2612 parameter \u2612 general \u2612 steps \u2612 stages","title":"checkmarxExecuteScan"},{"location":"steps/checkmarxExecuteScan/#checkmarxexecutescan","text":"Checkmarx is the recommended tool for security scans of JavaScript, iOS, Swift and Ruby code.","title":"checkmarxExecuteScan"},{"location":"steps/checkmarxExecuteScan/#description","text":"Checkmarx is a Static Application Security Testing (SAST) tool to analyze i.e. Java- or TypeScript, Swift, Golang, Ruby code, and many other programming languages for security flaws based on a set of provided rules/queries that can be customized and extended. This step by default enforces a specific audit baseline for findings and therefore ensures that: No 'To Verify' High and Medium issues exist in your project Total number of High and Medium 'Confirmed' or 'Urgent' issues is zero 10% of all Low issues are 'Confirmed' or 'Not Exploitable' You can adapt above thresholds specifically using the provided configuration parameters and i.e. check for absolute thresholds instead of percentage whereas we strongly recommend you to stay with the defaults provided.","title":"Description"},{"location":"steps/checkmarxExecuteScan/#usage","text":"We recommend to define values of step parameters via .pipeline/config.yml file . In this case, calling the step is essentially reduced to defining the step name. Calling the step can be done either in an orchestrator specific way (e.g. via a Jenkins library step) or on the command line. Jenkins Command Line library ( 'piper-lib-os' ) checkmarxExecuteScan script: this piper checkmarxExecuteScan","title":"Usage"},{"location":"steps/checkmarxExecuteScan/#outputs","text":"Output type Details influx measurement step_data checkmarx measurement checkmarx_data high_issues high_not_false_positive high_not_exploitable high_confirmed high_urgent high_proposed_not_exploitable high_to_verify medium_issues medium_not_false_positive medium_not_exploitable medium_confirmed medium_urgent medium_proposed_not_exploitable medium_to_verify low_issues low_not_false_positive low_not_exploitable low_confirmed low_urgent low_proposed_not_exploitable low_to_verify information_issues information_not_false_positive information_not_exploitable information_confirmed information_urgent information_proposed_not_exploitable information_to_verify lines_of_code_scanned files_scanned initiator_name owner scan_id project_id projectName team team_full_path_on_report_date scan_start scan_time checkmarx_version scan_type preset deep_link report_creation_time","title":"Outputs"},{"location":"steps/checkmarxExecuteScan/#parameters","text":"","title":"Parameters"},{"location":"steps/checkmarxExecuteScan/#overview-step","text":"Name Mandatory Additional information password (yes) pass via ENV, Vault or Jenkins credentials ( checkmarxCredentialsId ) projectName yes script (yes) reference to Jenkins main pipeline script serverUrl yes username (yes) pass via ENV, Vault or Jenkins credentials ( checkmarxCredentialsId ) assignees no avoidDuplicateProjectScans no convertToSarif no createResultIssue no engineConfigurationID no filterPattern no fullScanCycle no fullScansScheduled no generatePdfReport no githubApiUrl no githubToken no pass via ENV, Vault or Jenkins credentials ( githubTokenCredentialsId ) incremental no isOptimizedAndScheduled no maxRetries no owner no preset no pullRequestName no repository no teamId no teamName no verbose no activates debug output verifyOnly no vulnerabilityThresholdEnabled no vulnerabilityThresholdHigh no vulnerabilityThresholdLow no vulnerabilityThresholdLowPerQuery no vulnerabilityThresholdLowPerQueryMax no vulnerabilityThresholdMedium no vulnerabilityThresholdResult no vulnerabilityThresholdUnit no","title":"Overview - Step"},{"location":"steps/checkmarxExecuteScan/#overview-execution-environment","text":"Orchestrator-specific only These parameters are relevant for orchestrator usage and not considered when using the command line option. Name Mandatory Additional information stashContent no","title":"Overview - Execution Environment"},{"location":"steps/checkmarxExecuteScan/#details","text":"","title":"Details"},{"location":"steps/checkmarxExecuteScan/#assignees","text":"Defines the assignees for the Github Issue created/updated with the results of the scan as a list of login names. back to overview Scope Details Aliases - Type []string Mandatory no Default Secret no Configuration scope \u2612 parameter \u2610 general \u2612 steps \u2612 stages Resource references none","title":"assignees"},{"location":"steps/checkmarxExecuteScan/#avoidduplicateprojectscans","text":"Tell Checkmarx to skip the scan if no code change is detected back to overview Scope Details Aliases notForceScan Type bool Mandatory no Default true Possible values - true - false Secret no Configuration scope \u2612 parameter \u2610 general \u2612 steps \u2612 stages Resource references none","title":"avoidDuplicateProjectScans"},{"location":"steps/checkmarxExecuteScan/#converttosarif","text":"Convert the Checkmarx XML scan results to the open SARIF standard. back to overview Scope Details Aliases - Type bool Mandatory no Default true Possible values - true - false Secret no Configuration scope \u2612 parameter \u2610 general \u2612 steps \u2612 stages Resource references none","title":"convertToSarif"},{"location":"steps/checkmarxExecuteScan/#createresultissue","text":"Whether the step creates a GitHub issue containing the scan results in the originating repo. Since optimized pipelines are headless the creation is implicitly activated for scheduled runs. back to overview Scope Details Aliases - Type bool Mandatory no Default false Possible values - true - false Secret no Configuration scope \u2612 parameter \u2612 general \u2612 steps \u2612 stages Resource references commonPipelineEnvironment : reference to: custom/isOptimizedAndScheduled","title":"createResultIssue"},{"location":"steps/checkmarxExecuteScan/#engineconfigurationid","text":"The engine configuration ID to be used, if not set explicitly the project's default will be used back to overview Scope Details Aliases sourceEncoding Type string Mandatory no Default $PIPER_engineConfigurationID (if set) Secret no Configuration scope \u2612 parameter \u2610 general \u2612 steps \u2612 stages Resource references none","title":"engineConfigurationID"},{"location":"steps/checkmarxExecuteScan/#filterpattern","text":"The filter pattern used to zip the files relevant for scanning, patterns can be negated by setting an exclamation mark in front i.e. !test/*.js would avoid adding any javascript files located in the test directory back to overview Scope Details Aliases - Type string Mandatory no Default !**/node_modules/**, !**/.xmake/**, !**/*_test.go, !**/vendor/**/*.go, **/*.html, **/*.xml, **/*.go, **/*.py, **/*.js, **/*.scala, **/*.ts Secret no Configuration scope \u2612 parameter \u2610 general \u2612 steps \u2612 stages Resource references none","title":"filterPattern"},{"location":"steps/checkmarxExecuteScan/#fullscancycle","text":"Indicates how often a full scan should happen between the incremental scans when activated back to overview Scope Details Aliases - Type string Mandatory no Default 5 Secret no Configuration scope \u2612 parameter \u2610 general \u2612 steps \u2612 stages Resource references none","title":"fullScanCycle"},{"location":"steps/checkmarxExecuteScan/#fullscansscheduled","text":"Whether full scans are to be scheduled or not. Should be used in relation with incremental and fullScanCycle back to overview Scope Details Aliases - Type bool Mandatory no Default true Possible values - true - false Secret no Configuration scope \u2612 parameter \u2610 general \u2612 steps \u2612 stages Resource references none","title":"fullScansScheduled"},{"location":"steps/checkmarxExecuteScan/#generatepdfreport","text":"Whether to generate a PDF report of the analysis results or not back to overview Scope Details Aliases - Type bool Mandatory no Default true Possible values - true - false Secret no Configuration scope \u2612 parameter \u2610 general \u2612 steps \u2612 stages Resource references none","title":"generatePdfReport"},{"location":"steps/checkmarxExecuteScan/#githubapiurl","text":"Set the GitHub API URL. back to overview Scope Details Aliases - Type string Mandatory no Default https://api.github.com Secret no Configuration scope \u2612 parameter \u2612 general \u2612 steps \u2612 stages Resource references none","title":"githubApiUrl"},{"location":"steps/checkmarxExecuteScan/#githubtoken","text":"GitHub personal access token as per https://help.github.com/en/github/authenticating-to-github/creating-a-personal-access-token-for-the-command-line back to overview Scope Details Aliases access_token Type string Mandatory no Default $PIPER_githubToken (if set) Secret yes Configuration scope \u2612 parameter \u2612 general \u2612 steps \u2612 stages Resource references Jenkins credential id: id: githubTokenCredentialsId Vault resource: name: githubVaultSecretName default value: github Vault paths: $(vaultPath)/github $(vaultBasePath)/$(vaultPipelineName)/github $(vaultBasePath)/GROUP-SECRETS/github","title":"githubToken"},{"location":"steps/checkmarxExecuteScan/#incremental","text":"Whether incremental scans are to be applied which optimizes the scan time but might reduce detection capabilities. Therefore full scans are still required from time to time and should be scheduled via fullScansScheduled and fullScanCycle back to overview Scope Details Aliases - Type bool Mandatory no Default true Possible values - true - false Secret no Configuration scope \u2612 parameter \u2610 general \u2612 steps \u2612 stages Resource references none","title":"incremental"},{"location":"steps/checkmarxExecuteScan/#isoptimizedandscheduled","text":"Whether the pipeline runs in optimized mode and the current execution is a scheduled one back to overview Scope Details Aliases - Type bool Mandatory no Default false Possible values - true - false Secret no Configuration scope \u2612 parameter \u2610 general \u2610 steps \u2610 stages Resource references commonPipelineEnvironment : reference to: custom/isOptimizedAndScheduled","title":"isOptimizedAndScheduled"},{"location":"steps/checkmarxExecuteScan/#maxretries","text":"Maximum number of HTTP request retries upon intermittend connetion interrupts back to overview Scope Details Aliases - Type int Mandatory no Default 3 Secret no Configuration scope \u2612 parameter \u2610 general \u2612 steps \u2612 stages Resource references none","title":"maxRetries"},{"location":"steps/checkmarxExecuteScan/#owner","text":"Set the GitHub organization. back to overview Scope Details Aliases githubOrg Type string Mandatory no Default $PIPER_owner (if set) Secret no Configuration scope \u2612 parameter \u2612 general \u2612 steps \u2612 stages Resource references commonPipelineEnvironment : reference to: github/owner","title":"owner"},{"location":"steps/checkmarxExecuteScan/#password","text":"The password to authenticate back to overview Scope Details Aliases - Type string Mandatory yes Default $PIPER_password (if set) Secret yes Configuration scope \u2612 parameter \u2610 general \u2612 steps \u2612 stages Resource references Jenkins credential id: id: checkmarxCredentialsId reference to: password Vault resource: name: checkmarxVaultSecretName default value: checkmarx Vault paths: $(vaultPath)/checkmarx $(vaultBasePath)/$(vaultPipelineName)/checkmarx $(vaultBasePath)/GROUP-SECRETS/checkmarx","title":"password"},{"location":"steps/checkmarxExecuteScan/#preset","text":"The preset to use for scanning, if not set explicitly the step will attempt to look up the project's setting based on the availability of checkmarxCredentialsId back to overview Scope Details Aliases - Type string Mandatory no Default $PIPER_preset (if set) Secret no Configuration scope \u2612 parameter \u2610 general \u2612 steps \u2612 stages Resource references none","title":"preset"},{"location":"steps/checkmarxExecuteScan/#projectname","text":"The name of the Checkmarx project to scan into back to overview Scope Details Aliases - checkmarxProject - checkMarxProjectName ( deprecated ) Type string Mandatory yes Default $PIPER_projectName (if set) Secret no Configuration scope \u2612 parameter \u2610 general \u2612 steps \u2612 stages Resource references none","title":"projectName"},{"location":"steps/checkmarxExecuteScan/#pullrequestname","text":"Used to supply the name for the newly created PR project branch when being used in pull request scenarios back to overview Scope Details Aliases - Type string Mandatory no Default $PIPER_pullRequestName (if set) Secret no Configuration scope \u2612 parameter \u2610 general \u2612 steps \u2612 stages Resource references none","title":"pullRequestName"},{"location":"steps/checkmarxExecuteScan/#repository","text":"Set the GitHub repository. back to overview Scope Details Aliases githubRepo Type string Mandatory no Default $PIPER_repository (if set) Secret no Configuration scope \u2612 parameter \u2612 general \u2612 steps \u2612 stages Resource references commonPipelineEnvironment : reference to: github/repository","title":"repository"},{"location":"steps/checkmarxExecuteScan/#script","text":"The common script environment of the Jenkinsfile running. Typically the reference to the script calling the pipeline step is provided with the this parameter, as in script: this . This allows the function to access the commonPipelineEnvironment for retrieving, e.g. configuration parameters. back to overview Scope Details Aliases - Type Jenkins Script Mandatory yes Default Secret no Configuration scope \u2610 parameter \u2610 general \u2610 steps \u2610 stages Resource references none","title":"script"},{"location":"steps/checkmarxExecuteScan/#serverurl","text":"The URL pointing to the root of the Checkmarx server to be used back to overview Scope Details Aliases checkmarxServerUrl Type string Mandatory yes Default $PIPER_serverUrl (if set) Secret no Configuration scope \u2612 parameter \u2612 general \u2612 steps \u2612 stages Resource references none","title":"serverUrl"},{"location":"steps/checkmarxExecuteScan/#stashcontent","text":"Jenkins-specific: Used for proper environment setup. Specific stashes that should be considered for the step execution. back to overview Scope Details Aliases - Type []string Mandatory no Default - checkmarx Secret no Configuration scope \u2612 parameter \u2612 general \u2612 steps \u2612 stages Resource references none","title":"stashContent"},{"location":"steps/checkmarxExecuteScan/#teamid","text":"The group ID related to your team which can be obtained via the Pipeline Syntax plugin as described in the Details section back to overview Scope Details Aliases - checkmarxGroupId - groupId ( deprecated ) Type string Mandatory no Default $PIPER_teamId (if set) Secret no Configuration scope \u2612 parameter \u2610 general \u2612 steps \u2612 stages Resource references none","title":"teamId"},{"location":"steps/checkmarxExecuteScan/#teamname","text":"The full name of the team to assign newly created projects to which is preferred to teamId back to overview Scope Details Aliases - Type string Mandatory no Default $PIPER_teamName (if set) Secret no Configuration scope \u2612 parameter \u2610 general \u2612 steps \u2612 stages Resource references none","title":"teamName"},{"location":"steps/checkmarxExecuteScan/#username","text":"The username to authenticate back to overview Scope Details Aliases - Type string Mandatory yes Default $PIPER_username (if set) Secret yes Configuration scope \u2612 parameter \u2610 general \u2612 steps \u2612 stages Resource references Jenkins credential id: id: checkmarxCredentialsId reference to: username Vault resource: name: checkmarxVaultSecretName default value: checkmarx Vault paths: $(vaultPath)/checkmarx $(vaultBasePath)/$(vaultPipelineName)/checkmarx $(vaultBasePath)/GROUP-SECRETS/checkmarx","title":"username"},{"location":"steps/checkmarxExecuteScan/#verbose","text":"verbose output back to overview Scope Details Aliases - Type bool Mandatory no Default false Possible values - true - false Secret no Configuration scope \u2612 parameter \u2612 general \u2612 steps \u2612 stages Resource references none","title":"verbose"},{"location":"steps/checkmarxExecuteScan/#verifyonly","text":"Whether the step shall only apply verification checks or whether it does a full scan and check cycle back to overview Scope Details Aliases - Type bool Mandatory no Default false Possible values - true - false Secret no Configuration scope \u2612 parameter \u2610 general \u2612 steps \u2612 stages Resource references none","title":"verifyOnly"},{"location":"steps/checkmarxExecuteScan/#vulnerabilitythresholdenabled","text":"Whether the thresholds are enabled or not. If enabled the build will be set to vulnerabilityThresholdResult in case a specific threshold value is exceeded back to overview Scope Details Aliases - Type bool Mandatory no Default true Possible values - true - false Secret no Configuration scope \u2612 parameter \u2610 general \u2612 steps \u2612 stages Resource references none","title":"vulnerabilityThresholdEnabled"},{"location":"steps/checkmarxExecuteScan/#vulnerabilitythresholdhigh","text":"The specific threshold for high severity findings back to overview Scope Details Aliases - Type int Mandatory no Default 100 Secret no Configuration scope \u2612 parameter \u2610 general \u2612 steps \u2612 stages Resource references none","title":"vulnerabilityThresholdHigh"},{"location":"steps/checkmarxExecuteScan/#vulnerabilitythresholdlow","text":"The specific threshold for low severity findings back to overview Scope Details Aliases - Type int Mandatory no Default 10 Secret no Configuration scope \u2612 parameter \u2610 general \u2612 steps \u2612 stages Resource references none","title":"vulnerabilityThresholdLow"},{"location":"steps/checkmarxExecuteScan/#vulnerabilitythresholdlowperquery","text":"Flag to activate/deactivate the threshold of low severity findings per query back to overview Scope Details Aliases - Type bool Mandatory no Default false Possible values - true - false Secret no Configuration scope \u2612 parameter \u2610 general \u2612 steps \u2612 stages Resource references none","title":"vulnerabilityThresholdLowPerQuery"},{"location":"steps/checkmarxExecuteScan/#vulnerabilitythresholdlowperquerymax","text":"Upper threshold of low severity findings per query (in absolute number) back to overview Scope Details Aliases - Type int Mandatory no Default 10 Secret no Configuration scope \u2612 parameter \u2610 general \u2612 steps \u2612 stages Resource references none","title":"vulnerabilityThresholdLowPerQueryMax"},{"location":"steps/checkmarxExecuteScan/#vulnerabilitythresholdmedium","text":"The specific threshold for medium severity findings back to overview Scope Details Aliases - Type int Mandatory no Default 100 Secret no Configuration scope \u2612 parameter \u2610 general \u2612 steps \u2612 stages Resource references none","title":"vulnerabilityThresholdMedium"},{"location":"steps/checkmarxExecuteScan/#vulnerabilitythresholdresult","text":"The result of the build in case thresholds are enabled and exceeded back to overview Scope Details Aliases - Type string Mandatory no Default FAILURE Possible values - FAILURE Secret no Configuration scope \u2612 parameter \u2610 general \u2612 steps \u2612 stages Resource references none","title":"vulnerabilityThresholdResult"},{"location":"steps/checkmarxExecuteScan/#vulnerabilitythresholdunit","text":"The unit for the threshold to apply. back to overview Scope Details Aliases - Type string Mandatory no Default percentage Secret no Configuration scope \u2612 parameter \u2610 general \u2612 steps \u2612 stages Resource references none","title":"vulnerabilityThresholdUnit"},{"location":"steps/checkmarxExecuteScan/#checkmarxcredentialsid","text":"Jenkins 'Username with password' credentials ID containing username and password to communicate with the Checkmarx backend. back to overview Scope Details Aliases - Type string Configuration scope \u2612 parameter \u2612 general \u2612 steps \u2612 stages","title":"checkmarxCredentialsId"},{"location":"steps/checkmarxExecuteScan/#githubtokencredentialsid","text":"Jenkins 'Secret text' credentials ID containing token to authenticate to GitHub. back to overview Scope Details Aliases - Type string Configuration scope \u2612 parameter \u2612 general \u2612 steps \u2612 stages","title":"githubTokenCredentialsId"},{"location":"steps/checkmarxOneExecuteScan/","text":"checkmarxOneExecuteScan \u00b6 checkmarxOne is the recommended tool for security scans of JavaScript, iOS, Swift and Ruby code. Description \u00b6 checkmarxOne is a Static Application Security Testing (SAST) platform to analyze i.e. Java or TypeScript, Swift, Golang, Ruby code, and many other programming languages for security flaws based on a set of provided rules/queries that can be customized and extended. This step by default enforces a specific audit baseline for findings and therefore ensures that: No 'To Verify' High and Medium issues exist in your project Total number of High and Medium 'Confirmed' or 'Urgent' issues is zero 10% of all Low issues are 'Confirmed' or 'Not Exploitable' You can adapt above thresholds specifically using the provided configuration parameters and i.e. check for absolute thresholds instead of percentage whereas we strongly recommend you to stay with the defaults provided. Usage \u00b6 We recommend to define values of step parameters via .pipeline/config.yml file . In this case, calling the step is essentially reduced to defining the step name. Calling the step can be done either in an orchestrator specific way (e.g. via a Jenkins library step) or on the command line. Jenkins Command Line library ( 'piper-lib-os' ) checkmarxOneExecuteScan script: this piper checkmarxOneExecuteScan Outputs \u00b6 Output type Details influx measurement step_data checkmarxOne measurement checkmarxOne_data critical_issues critical_not_false_postive critical_not_exploitable critical_confirmed critical_urgent critical_proposed_not_exploitable critical_to_verify high_issues high_not_false_postive high_not_exploitable high_confirmed high_urgent high_proposed_not_exploitable high_to_verify medium_issues medium_not_false_postive medium_not_exploitable medium_confirmed medium_urgent medium_proposed_not_exploitable medium_to_verify low_issues low_not_false_postive low_not_exploitable low_confirmed low_urgent low_proposed_not_exploitable low_to_verify information_issues information_not_false_postive information_not_exploitable information_confirmed information_urgent information_proposed_not_exploitable information_to_verify lines_of_code_scanned files_scanned initiator_name owner scan_id project_id projectName group group_full_path_on_report_date scan_start scan_time tool_version scan_type preset deep_link report_creation_time Parameters \u00b6 Overview - Step \u00b6 Name Mandatory Additional information APIKey (yes) pass via ENV, Vault or Jenkins credentials ( checkmarxOneAPIKey ) branch yes clientId (yes) pass via ENV, Vault or Jenkins credentials ( checkmarxOneCredentialsId ) clientSecret (yes) pass via ENV, Vault or Jenkins credentials ( checkmarxOneCredentialsId ) iamUrl yes projectName yes script (yes) reference to Jenkins main pipeline script serverUrl yes tenant yes applicationId no applicationName no assignees no avoidDuplicateProjectScans no convertToSarif no createResultIssue no filterPattern no fullScanCycle no fullScansScheduled no generatePdfReport no gitBranch no githubApiUrl no githubToken no pass via ENV, Vault or Jenkins credentials ( githubTokenCredentialsId ) groupName no incremental no isOptimizedAndScheduled no languageMode no owner no preset no projectCriticality no projectId no projectTags no pullRequestName no repository no scanSummaryInPullRequest no scanTags no sourceEncoding no verbose no activates debug output verifyOnly no vulnerabilityThresholdCritical no vulnerabilityThresholdEnabled no vulnerabilityThresholdHigh no vulnerabilityThresholdLow no vulnerabilityThresholdLowPerQuery no vulnerabilityThresholdLowPerQueryMax no vulnerabilityThresholdMedium no vulnerabilityThresholdResult no vulnerabilityThresholdUnit no Overview - Execution Environment \u00b6 Orchestrator-specific only These parameters are relevant for orchestrator usage and not considered when using the command line option. Name Mandatory Additional information stashContent no Details \u00b6 APIKey \u00b6 The APIKey to authenticate back to overview Scope Details Aliases - Type string Mandatory yes Default $PIPER_APIKey (if set) Secret yes Configuration scope \u2612 parameter \u2610 general \u2612 steps \u2612 stages Resource references Jenkins credential id: id: checkmarxOneAPIKey reference to: APIKey Vault resource: name: checkmarxOneVaultSecretName default value: checkmarxOne Vault paths: $(vaultPath)/checkmarxOne $(vaultBasePath)/$(vaultPipelineName)/checkmarxOne $(vaultBasePath)/GROUP-SECRETS/checkmarxOne applicationId \u00b6 The ID of the Checkmarx One application to which the newly created projects will be assigned. This parameter will take precedence over applicationName if both are provided. back to overview Scope Details Aliases - Type string Mandatory no Default $PIPER_applicationId (if set) Secret no Configuration scope \u2612 parameter \u2610 general \u2612 steps \u2612 stages Resource references none applicationName \u00b6 The full name of the Checkmarx One application to which the newly created projects will be assigned back to overview Scope Details Aliases - Type string Mandatory no Default $PIPER_applicationName (if set) Secret no Configuration scope \u2612 parameter \u2610 general \u2612 steps \u2612 stages Resource references none assignees \u00b6 Defines the assignees for the Github Issue created/updated with the results of the scan as a list of login names. [Not yet supported] back to overview Scope Details Aliases - Type []string Mandatory no Default Secret no Configuration scope \u2612 parameter \u2610 general \u2612 steps \u2612 stages Resource references none avoidDuplicateProjectScans \u00b6 Whether duplicate scans of the same project state shall be avoided or not [Not yet supported] back to overview Scope Details Aliases - Type bool Mandatory no Default true Possible values - true - false Secret no Configuration scope \u2612 parameter \u2610 general \u2612 steps \u2612 stages Resource references none branch \u00b6 Used to supply the branch scanned in the repository, or a friendly-name set by the user back to overview Scope Details Aliases - Type string Mandatory yes Default $PIPER_branch (if set) Secret no Configuration scope \u2612 parameter \u2610 general \u2612 steps \u2612 stages Resource references none clientId \u00b6 The username to authenticate back to overview Scope Details Aliases - Type string Mandatory yes Default $PIPER_clientId (if set) Secret yes Configuration scope \u2612 parameter \u2610 general \u2612 steps \u2612 stages Resource references Jenkins credential id: id: checkmarxOneCredentialsId reference to: clientId Vault resource: name: checkmarxOneVaultSecretName default value: checkmarxOne Vault paths: $(vaultPath)/checkmarxOne $(vaultBasePath)/$(vaultPipelineName)/checkmarxOne $(vaultBasePath)/GROUP-SECRETS/checkmarxOne clientSecret \u00b6 The clientSecret to authenticate using a service account back to overview Scope Details Aliases - Type string Mandatory yes Default $PIPER_clientSecret (if set) Secret yes Configuration scope \u2612 parameter \u2610 general \u2612 steps \u2612 stages Resource references Jenkins credential id: id: checkmarxOneCredentialsId reference to: clientSecret Vault resource: name: checkmarxOneVaultSecretName default value: checkmarxOne Vault paths: $(vaultPath)/checkmarxOne $(vaultBasePath)/$(vaultPipelineName)/checkmarxOne $(vaultBasePath)/GROUP-SECRETS/checkmarxOne convertToSarif \u00b6 Convert the checkmarxOne XML scan results to the open SARIF standard. back to overview Scope Details Aliases - Type bool Mandatory no Default true Possible values - true - false Secret no Configuration scope \u2612 parameter \u2610 general \u2612 steps \u2612 stages Resource references none createResultIssue \u00b6 Whether the step creates a GitHub issue containing the scan results in the originating repo. Since optimized pipelines are headless the creation is implicitly activated for scheduled runs. back to overview Scope Details Aliases - Type bool Mandatory no Default false Possible values - true - false Secret no Configuration scope \u2612 parameter \u2612 general \u2612 steps \u2612 stages Resource references commonPipelineEnvironment : reference to: custom/isOptimizedAndScheduled filterPattern \u00b6 The filter pattern used to zip the files relevant for scanning, patterns can be negated by setting an exclamation mark in front i.e. !test/*.js would avoid adding any javascript files located in the test directory back to overview Scope Details Aliases - Type string Mandatory no Default !**/node_modules/**, !**/.xmake/**, !**/*_test.go, !**/vendor/**/*.go, **/*.html, **/*.xml, **/*.go, **/*.py, **/*.js, **/*.scala, **/*.ts Secret no Configuration scope \u2612 parameter \u2610 general \u2612 steps \u2612 stages Resource references none fullScanCycle \u00b6 Indicates how often a full scan should happen between the incremental scans when activated back to overview Scope Details Aliases - Type string Mandatory no Default 5 Secret no Configuration scope \u2612 parameter \u2610 general \u2612 steps \u2612 stages Resource references none fullScansScheduled \u00b6 Whether full scans are to be scheduled or not. Should be used in relation with incremental and fullScanCycle back to overview Scope Details Aliases - Type bool Mandatory no Default true Possible values - true - false Secret no Configuration scope \u2612 parameter \u2610 general \u2612 steps \u2612 stages Resource references none generatePdfReport \u00b6 Whether to generate a PDF report of the analysis results or not back to overview Scope Details Aliases - Type bool Mandatory no Default true Possible values - true - false Secret no Configuration scope \u2612 parameter \u2610 general \u2612 steps \u2612 stages Resource references none gitBranch \u00b6 Set the GitHub repository branch. back to overview Scope Details Aliases - Type string Mandatory no Default $PIPER_gitBranch (if set) Secret no Configuration scope \u2612 parameter \u2612 general \u2612 steps \u2612 stages Resource references commonPipelineEnvironment : reference to: git/branch githubApiUrl \u00b6 Set the GitHub API URL. back to overview Scope Details Aliases - Type string Mandatory no Default https://api.github.com Secret no Configuration scope \u2612 parameter \u2612 general \u2612 steps \u2612 stages Resource references none githubToken \u00b6 GitHub personal access token as per https://help.github.com/en/github/authenticating-to-github/creating-a-personal-access-token-for-the-command-line back to overview Scope Details Aliases access_token Type string Mandatory no Default $PIPER_githubToken (if set) Secret yes Configuration scope \u2612 parameter \u2612 general \u2612 steps \u2612 stages Resource references Jenkins credential id: id: githubTokenCredentialsId Vault resource: name: githubVaultSecretName default value: github Vault paths: $(vaultPath)/github $(vaultBasePath)/$(vaultPipelineName)/github $(vaultBasePath)/GROUP-SECRETS/github groupName \u00b6 The full name of the group to which the newly created projects will be assigned back to overview Scope Details Aliases - Type string Mandatory no Default $PIPER_groupName (if set) Secret no Configuration scope \u2612 parameter \u2610 general \u2612 steps \u2612 stages Resource references none iamUrl \u00b6 The URL pointing to the access control root of the checkmarxOne IAM server to be used back to overview Scope Details Aliases - Type string Mandatory yes Default $PIPER_iamUrl (if set) Secret no Configuration scope \u2612 parameter \u2612 general \u2612 steps \u2612 stages Resource references none incremental \u00b6 Whether incremental scans are to be applied which optimizes the scan time but might reduce detection capabilities. Therefore full scans are still required from time to time and should be scheduled via fullScansScheduled and fullScanCycle back to overview Scope Details Aliases - Type bool Mandatory no Default true Possible values - true - false Secret no Configuration scope \u2612 parameter \u2610 general \u2612 steps \u2612 stages Resource references none isOptimizedAndScheduled \u00b6 Whether the pipeline runs in optimized mode and the current execution is a scheduled one back to overview Scope Details Aliases - Type bool Mandatory no Default false Possible values - true - false Secret no Configuration scope \u2612 parameter \u2610 general \u2610 steps \u2610 stages Resource references commonPipelineEnvironment : reference to: custom/isOptimizedAndScheduled languageMode \u00b6 Specifies whether the scan should be run for a 'single' language or 'multi' language, default 'multi' back to overview Scope Details Aliases - Type string Mandatory no Default multi Secret no Configuration scope \u2612 parameter \u2610 general \u2612 steps \u2612 stages Resource references none owner \u00b6 Set the GitHub organization. back to overview Scope Details Aliases githubOrg Type string Mandatory no Default $PIPER_owner (if set) Secret no Configuration scope \u2612 parameter \u2612 general \u2612 steps \u2612 stages Resource references commonPipelineEnvironment : reference to: github/owner preset \u00b6 The preset to use for scanning, if not set explicitly the step will attempt to look up the project's setting based on the availability of checkmarxOneCredentialsId back to overview Scope Details Aliases - Type string Mandatory no Default $PIPER_preset (if set) Secret no Configuration scope \u2612 parameter \u2610 general \u2612 steps \u2612 stages Resource references none projectCriticality \u00b6 The criticality of the checkmarxOne project, used during project creation back to overview Scope Details Aliases - Type string Mandatory no Default 3 Secret no Configuration scope \u2612 parameter \u2610 general \u2612 steps \u2612 stages Resource references none projectId \u00b6 The ID of the checkmarxOne project to scan into. This parameter will take precedence over projectName if both are provided. back to overview Scope Details Aliases - Type string Mandatory no Default $PIPER_projectId (if set) Secret no Configuration scope \u2612 parameter \u2610 general \u2612 steps \u2612 stages Resource references none projectName \u00b6 The name of the checkmarxOne project to scan into back to overview Scope Details Aliases - Type string Mandatory yes Default $PIPER_projectName (if set) Secret no Configuration scope \u2612 parameter \u2610 general \u2612 steps \u2612 stages Resource references none projectTags \u00b6 Used to tag a project with a JSON string, e.g., {\"key\":\"value\", \"keywithoutvalue\":\"\"} back to overview Scope Details Aliases - Type string Mandatory no Default $PIPER_projectTags (if set) Secret no Configuration scope \u2612 parameter \u2610 general \u2612 steps \u2612 stages Resource references none pullRequestName \u00b6 Used to supply the name for the newly created PR project branch when being used in pull request scenarios. This is supplied by the orchestrator. back to overview Scope Details Aliases - Type string Mandatory no Default $PIPER_pullRequestName (if set) Secret no Configuration scope \u2612 parameter \u2610 general \u2612 steps \u2612 stages Resource references none repository \u00b6 Set the GitHub repository. back to overview Scope Details Aliases githubRepo Type string Mandatory no Default $PIPER_repository (if set) Secret no Configuration scope \u2612 parameter \u2612 general \u2612 steps \u2612 stages Resource references commonPipelineEnvironment : reference to: github/repository scanSummaryInPullRequest \u00b6 Whether the scan summary shall be added to the pull request as a comment or not. This is only applied if the step is executed in a pull request context. githubToken and githubApiUrl parameters must be set to allow the step to create the comment. back to overview Scope Details Aliases - Type bool Mandatory no Default false Possible values - true - false Secret no Configuration scope \u2612 parameter \u2610 general \u2612 steps \u2612 stages Resource references none scanTags \u00b6 Used to tag a scan with a JSON string, e.g., {\"key\":\"value\", \"keywithoutvalue\":\"\"} back to overview Scope Details Aliases - Type string Mandatory no Default $PIPER_scanTags (if set) Secret no Configuration scope \u2612 parameter \u2610 general \u2612 steps \u2612 stages Resource references none script \u00b6 The common script environment of the Jenkinsfile running. Typically the reference to the script calling the pipeline step is provided with the this parameter, as in script: this . This allows the function to access the commonPipelineEnvironment for retrieving, e.g. configuration parameters. back to overview Scope Details Aliases - Type Jenkins Script Mandatory yes Default Secret no Configuration scope \u2610 parameter \u2610 general \u2610 steps \u2610 stages Resource references none serverUrl \u00b6 The URL pointing to the root of the checkmarxOne server to be used back to overview Scope Details Aliases - Type string Mandatory yes Default $PIPER_serverUrl (if set) Secret no Configuration scope \u2612 parameter \u2612 general \u2612 steps \u2612 stages Resource references none sourceEncoding \u00b6 The source encoding to be used, if not set explicitly the project's default will be used [Not yet supported] back to overview Scope Details Aliases - Type string Mandatory no Default 1 Secret no Configuration scope \u2612 parameter \u2610 general \u2612 steps \u2612 stages Resource references none stashContent \u00b6 Jenkins-specific: Used for proper environment setup. Specific stashes that should be considered for the step execution. back to overview Scope Details Aliases - Type []string Mandatory no Default - checkmarxOne Secret no Configuration scope \u2612 parameter \u2612 general \u2612 steps \u2612 stages Resource references none tenant \u00b6 The name of the checkmarxOne tenant to be used back to overview Scope Details Aliases - Type string Mandatory yes Default $PIPER_tenant (if set) Secret no Configuration scope \u2612 parameter \u2612 general \u2612 steps \u2612 stages Resource references none verbose \u00b6 verbose output back to overview Scope Details Aliases - Type bool Mandatory no Default false Possible values - true - false Secret no Configuration scope \u2612 parameter \u2612 general \u2612 steps \u2612 stages Resource references none verifyOnly \u00b6 Whether the step shall only apply verification checks or whether it does a full scan and check cycle back to overview Scope Details Aliases - Type bool Mandatory no Default false Possible values - true - false Secret no Configuration scope \u2612 parameter \u2610 general \u2612 steps \u2612 stages Resource references none vulnerabilityThresholdCritical \u00b6 The specific threshold for Critical severity findings back to overview Scope Details Aliases - Type int Mandatory no Default 100 Secret no Configuration scope \u2612 parameter \u2610 general \u2612 steps \u2612 stages Resource references none vulnerabilityThresholdEnabled \u00b6 Whether the thresholds are enabled or not. If enabled the build will be set to vulnerabilityThresholdResult in case a specific threshold value is exceeded back to overview Scope Details Aliases - Type bool Mandatory no Default true Possible values - true - false Secret no Configuration scope \u2612 parameter \u2610 general \u2612 steps \u2612 stages Resource references none vulnerabilityThresholdHigh \u00b6 The specific threshold for High severity findings back to overview Scope Details Aliases - Type int Mandatory no Default 100 Secret no Configuration scope \u2612 parameter \u2610 general \u2612 steps \u2612 stages Resource references none vulnerabilityThresholdLow \u00b6 The specific threshold for Low severity findings back to overview Scope Details Aliases - Type int Mandatory no Default 10 Secret no Configuration scope \u2612 parameter \u2610 general \u2612 steps \u2612 stages Resource references none vulnerabilityThresholdLowPerQuery \u00b6 Flag to activate/deactivate the threshold of Low severity findings per query back to overview Scope Details Aliases - Type bool Mandatory no Default false Possible values - true - false Secret no Configuration scope \u2612 parameter \u2610 general \u2612 steps \u2612 stages Resource references none vulnerabilityThresholdLowPerQueryMax \u00b6 Upper threshold of Low severity findings per query (in absolute number) back to overview Scope Details Aliases - Type int Mandatory no Default 10 Secret no Configuration scope \u2612 parameter \u2610 general \u2612 steps \u2612 stages Resource references none vulnerabilityThresholdMedium \u00b6 The specific threshold for Medium severity findings back to overview Scope Details Aliases - Type int Mandatory no Default 100 Secret no Configuration scope \u2612 parameter \u2610 general \u2612 steps \u2612 stages Resource references none vulnerabilityThresholdResult \u00b6 The result of the build in case thresholds are enabled and exceeded back to overview Scope Details Aliases - Type string Mandatory no Default FAILURE Possible values - FAILURE Secret no Configuration scope \u2612 parameter \u2610 general \u2612 steps \u2612 stages Resource references none vulnerabilityThresholdUnit \u00b6 The unit for the threshold to apply. back to overview Scope Details Aliases - Type string Mandatory no Default percentage Secret no Configuration scope \u2612 parameter \u2610 general \u2612 steps \u2612 stages Resource references none checkmarxOneCredentialsId \u00b6 Jenkins 'Username with password' credentials ID containing ClientID and ClientSecret to communicate with the checkmarxOne backend. back to overview Scope Details Aliases - Type string Configuration scope \u2612 parameter \u2612 general \u2612 steps \u2612 stages checkmarxOneAPIKey \u00b6 Jenkins 'Secret Text' containing the APIKey to communicate with the checkmarxOne backend. back to overview Scope Details Aliases - Type string Configuration scope \u2612 parameter \u2612 general \u2612 steps \u2612 stages githubTokenCredentialsId \u00b6 Jenkins 'Secret text' credentials ID containing token to authenticate to GitHub. back to overview Scope Details Aliases - Type string Configuration scope \u2612 parameter \u2612 general \u2612 steps \u2612 stages","title":"checkmarxOneExecuteScan"},{"location":"steps/checkmarxOneExecuteScan/#checkmarxoneexecutescan","text":"checkmarxOne is the recommended tool for security scans of JavaScript, iOS, Swift and Ruby code.","title":"checkmarxOneExecuteScan"},{"location":"steps/checkmarxOneExecuteScan/#description","text":"checkmarxOne is a Static Application Security Testing (SAST) platform to analyze i.e. Java or TypeScript, Swift, Golang, Ruby code, and many other programming languages for security flaws based on a set of provided rules/queries that can be customized and extended. This step by default enforces a specific audit baseline for findings and therefore ensures that: No 'To Verify' High and Medium issues exist in your project Total number of High and Medium 'Confirmed' or 'Urgent' issues is zero 10% of all Low issues are 'Confirmed' or 'Not Exploitable' You can adapt above thresholds specifically using the provided configuration parameters and i.e. check for absolute thresholds instead of percentage whereas we strongly recommend you to stay with the defaults provided.","title":"Description"},{"location":"steps/checkmarxOneExecuteScan/#usage","text":"We recommend to define values of step parameters via .pipeline/config.yml file . In this case, calling the step is essentially reduced to defining the step name. Calling the step can be done either in an orchestrator specific way (e.g. via a Jenkins library step) or on the command line. Jenkins Command Line library ( 'piper-lib-os' ) checkmarxOneExecuteScan script: this piper checkmarxOneExecuteScan","title":"Usage"},{"location":"steps/checkmarxOneExecuteScan/#outputs","text":"Output type Details influx measurement step_data checkmarxOne measurement checkmarxOne_data critical_issues critical_not_false_postive critical_not_exploitable critical_confirmed critical_urgent critical_proposed_not_exploitable critical_to_verify high_issues high_not_false_postive high_not_exploitable high_confirmed high_urgent high_proposed_not_exploitable high_to_verify medium_issues medium_not_false_postive medium_not_exploitable medium_confirmed medium_urgent medium_proposed_not_exploitable medium_to_verify low_issues low_not_false_postive low_not_exploitable low_confirmed low_urgent low_proposed_not_exploitable low_to_verify information_issues information_not_false_postive information_not_exploitable information_confirmed information_urgent information_proposed_not_exploitable information_to_verify lines_of_code_scanned files_scanned initiator_name owner scan_id project_id projectName group group_full_path_on_report_date scan_start scan_time tool_version scan_type preset deep_link report_creation_time","title":"Outputs"},{"location":"steps/checkmarxOneExecuteScan/#parameters","text":"","title":"Parameters"},{"location":"steps/checkmarxOneExecuteScan/#overview-step","text":"Name Mandatory Additional information APIKey (yes) pass via ENV, Vault or Jenkins credentials ( checkmarxOneAPIKey ) branch yes clientId (yes) pass via ENV, Vault or Jenkins credentials ( checkmarxOneCredentialsId ) clientSecret (yes) pass via ENV, Vault or Jenkins credentials ( checkmarxOneCredentialsId ) iamUrl yes projectName yes script (yes) reference to Jenkins main pipeline script serverUrl yes tenant yes applicationId no applicationName no assignees no avoidDuplicateProjectScans no convertToSarif no createResultIssue no filterPattern no fullScanCycle no fullScansScheduled no generatePdfReport no gitBranch no githubApiUrl no githubToken no pass via ENV, Vault or Jenkins credentials ( githubTokenCredentialsId ) groupName no incremental no isOptimizedAndScheduled no languageMode no owner no preset no projectCriticality no projectId no projectTags no pullRequestName no repository no scanSummaryInPullRequest no scanTags no sourceEncoding no verbose no activates debug output verifyOnly no vulnerabilityThresholdCritical no vulnerabilityThresholdEnabled no vulnerabilityThresholdHigh no vulnerabilityThresholdLow no vulnerabilityThresholdLowPerQuery no vulnerabilityThresholdLowPerQueryMax no vulnerabilityThresholdMedium no vulnerabilityThresholdResult no vulnerabilityThresholdUnit no","title":"Overview - Step"},{"location":"steps/checkmarxOneExecuteScan/#overview-execution-environment","text":"Orchestrator-specific only These parameters are relevant for orchestrator usage and not considered when using the command line option. Name Mandatory Additional information stashContent no","title":"Overview - Execution Environment"},{"location":"steps/checkmarxOneExecuteScan/#details","text":"","title":"Details"},{"location":"steps/checkmarxOneExecuteScan/#apikey","text":"The APIKey to authenticate back to overview Scope Details Aliases - Type string Mandatory yes Default $PIPER_APIKey (if set) Secret yes Configuration scope \u2612 parameter \u2610 general \u2612 steps \u2612 stages Resource references Jenkins credential id: id: checkmarxOneAPIKey reference to: APIKey Vault resource: name: checkmarxOneVaultSecretName default value: checkmarxOne Vault paths: $(vaultPath)/checkmarxOne $(vaultBasePath)/$(vaultPipelineName)/checkmarxOne $(vaultBasePath)/GROUP-SECRETS/checkmarxOne","title":"APIKey"},{"location":"steps/checkmarxOneExecuteScan/#applicationid","text":"The ID of the Checkmarx One application to which the newly created projects will be assigned. This parameter will take precedence over applicationName if both are provided. back to overview Scope Details Aliases - Type string Mandatory no Default $PIPER_applicationId (if set) Secret no Configuration scope \u2612 parameter \u2610 general \u2612 steps \u2612 stages Resource references none","title":"applicationId"},{"location":"steps/checkmarxOneExecuteScan/#applicationname","text":"The full name of the Checkmarx One application to which the newly created projects will be assigned back to overview Scope Details Aliases - Type string Mandatory no Default $PIPER_applicationName (if set) Secret no Configuration scope \u2612 parameter \u2610 general \u2612 steps \u2612 stages Resource references none","title":"applicationName"},{"location":"steps/checkmarxOneExecuteScan/#assignees","text":"Defines the assignees for the Github Issue created/updated with the results of the scan as a list of login names. [Not yet supported] back to overview Scope Details Aliases - Type []string Mandatory no Default Secret no Configuration scope \u2612 parameter \u2610 general \u2612 steps \u2612 stages Resource references none","title":"assignees"},{"location":"steps/checkmarxOneExecuteScan/#avoidduplicateprojectscans","text":"Whether duplicate scans of the same project state shall be avoided or not [Not yet supported] back to overview Scope Details Aliases - Type bool Mandatory no Default true Possible values - true - false Secret no Configuration scope \u2612 parameter \u2610 general \u2612 steps \u2612 stages Resource references none","title":"avoidDuplicateProjectScans"},{"location":"steps/checkmarxOneExecuteScan/#branch","text":"Used to supply the branch scanned in the repository, or a friendly-name set by the user back to overview Scope Details Aliases - Type string Mandatory yes Default $PIPER_branch (if set) Secret no Configuration scope \u2612 parameter \u2610 general \u2612 steps \u2612 stages Resource references none","title":"branch"},{"location":"steps/checkmarxOneExecuteScan/#clientid","text":"The username to authenticate back to overview Scope Details Aliases - Type string Mandatory yes Default $PIPER_clientId (if set) Secret yes Configuration scope \u2612 parameter \u2610 general \u2612 steps \u2612 stages Resource references Jenkins credential id: id: checkmarxOneCredentialsId reference to: clientId Vault resource: name: checkmarxOneVaultSecretName default value: checkmarxOne Vault paths: $(vaultPath)/checkmarxOne $(vaultBasePath)/$(vaultPipelineName)/checkmarxOne $(vaultBasePath)/GROUP-SECRETS/checkmarxOne","title":"clientId"},{"location":"steps/checkmarxOneExecuteScan/#clientsecret","text":"The clientSecret to authenticate using a service account back to overview Scope Details Aliases - Type string Mandatory yes Default $PIPER_clientSecret (if set) Secret yes Configuration scope \u2612 parameter \u2610 general \u2612 steps \u2612 stages Resource references Jenkins credential id: id: checkmarxOneCredentialsId reference to: clientSecret Vault resource: name: checkmarxOneVaultSecretName default value: checkmarxOne Vault paths: $(vaultPath)/checkmarxOne $(vaultBasePath)/$(vaultPipelineName)/checkmarxOne $(vaultBasePath)/GROUP-SECRETS/checkmarxOne","title":"clientSecret"},{"location":"steps/checkmarxOneExecuteScan/#converttosarif","text":"Convert the checkmarxOne XML scan results to the open SARIF standard. back to overview Scope Details Aliases - Type bool Mandatory no Default true Possible values - true - false Secret no Configuration scope \u2612 parameter \u2610 general \u2612 steps \u2612 stages Resource references none","title":"convertToSarif"},{"location":"steps/checkmarxOneExecuteScan/#createresultissue","text":"Whether the step creates a GitHub issue containing the scan results in the originating repo. Since optimized pipelines are headless the creation is implicitly activated for scheduled runs. back to overview Scope Details Aliases - Type bool Mandatory no Default false Possible values - true - false Secret no Configuration scope \u2612 parameter \u2612 general \u2612 steps \u2612 stages Resource references commonPipelineEnvironment : reference to: custom/isOptimizedAndScheduled","title":"createResultIssue"},{"location":"steps/checkmarxOneExecuteScan/#filterpattern","text":"The filter pattern used to zip the files relevant for scanning, patterns can be negated by setting an exclamation mark in front i.e. !test/*.js would avoid adding any javascript files located in the test directory back to overview Scope Details Aliases - Type string Mandatory no Default !**/node_modules/**, !**/.xmake/**, !**/*_test.go, !**/vendor/**/*.go, **/*.html, **/*.xml, **/*.go, **/*.py, **/*.js, **/*.scala, **/*.ts Secret no Configuration scope \u2612 parameter \u2610 general \u2612 steps \u2612 stages Resource references none","title":"filterPattern"},{"location":"steps/checkmarxOneExecuteScan/#fullscancycle","text":"Indicates how often a full scan should happen between the incremental scans when activated back to overview Scope Details Aliases - Type string Mandatory no Default 5 Secret no Configuration scope \u2612 parameter \u2610 general \u2612 steps \u2612 stages Resource references none","title":"fullScanCycle"},{"location":"steps/checkmarxOneExecuteScan/#fullscansscheduled","text":"Whether full scans are to be scheduled or not. Should be used in relation with incremental and fullScanCycle back to overview Scope Details Aliases - Type bool Mandatory no Default true Possible values - true - false Secret no Configuration scope \u2612 parameter \u2610 general \u2612 steps \u2612 stages Resource references none","title":"fullScansScheduled"},{"location":"steps/checkmarxOneExecuteScan/#generatepdfreport","text":"Whether to generate a PDF report of the analysis results or not back to overview Scope Details Aliases - Type bool Mandatory no Default true Possible values - true - false Secret no Configuration scope \u2612 parameter \u2610 general \u2612 steps \u2612 stages Resource references none","title":"generatePdfReport"},{"location":"steps/checkmarxOneExecuteScan/#gitbranch","text":"Set the GitHub repository branch. back to overview Scope Details Aliases - Type string Mandatory no Default $PIPER_gitBranch (if set) Secret no Configuration scope \u2612 parameter \u2612 general \u2612 steps \u2612 stages Resource references commonPipelineEnvironment : reference to: git/branch","title":"gitBranch"},{"location":"steps/checkmarxOneExecuteScan/#githubapiurl","text":"Set the GitHub API URL. back to overview Scope Details Aliases - Type string Mandatory no Default https://api.github.com Secret no Configuration scope \u2612 parameter \u2612 general \u2612 steps \u2612 stages Resource references none","title":"githubApiUrl"},{"location":"steps/checkmarxOneExecuteScan/#githubtoken","text":"GitHub personal access token as per https://help.github.com/en/github/authenticating-to-github/creating-a-personal-access-token-for-the-command-line back to overview Scope Details Aliases access_token Type string Mandatory no Default $PIPER_githubToken (if set) Secret yes Configuration scope \u2612 parameter \u2612 general \u2612 steps \u2612 stages Resource references Jenkins credential id: id: githubTokenCredentialsId Vault resource: name: githubVaultSecretName default value: github Vault paths: $(vaultPath)/github $(vaultBasePath)/$(vaultPipelineName)/github $(vaultBasePath)/GROUP-SECRETS/github","title":"githubToken"},{"location":"steps/checkmarxOneExecuteScan/#groupname","text":"The full name of the group to which the newly created projects will be assigned back to overview Scope Details Aliases - Type string Mandatory no Default $PIPER_groupName (if set) Secret no Configuration scope \u2612 parameter \u2610 general \u2612 steps \u2612 stages Resource references none","title":"groupName"},{"location":"steps/checkmarxOneExecuteScan/#iamurl","text":"The URL pointing to the access control root of the checkmarxOne IAM server to be used back to overview Scope Details Aliases - Type string Mandatory yes Default $PIPER_iamUrl (if set) Secret no Configuration scope \u2612 parameter \u2612 general \u2612 steps \u2612 stages Resource references none","title":"iamUrl"},{"location":"steps/checkmarxOneExecuteScan/#incremental","text":"Whether incremental scans are to be applied which optimizes the scan time but might reduce detection capabilities. Therefore full scans are still required from time to time and should be scheduled via fullScansScheduled and fullScanCycle back to overview Scope Details Aliases - Type bool Mandatory no Default true Possible values - true - false Secret no Configuration scope \u2612 parameter \u2610 general \u2612 steps \u2612 stages Resource references none","title":"incremental"},{"location":"steps/checkmarxOneExecuteScan/#isoptimizedandscheduled","text":"Whether the pipeline runs in optimized mode and the current execution is a scheduled one back to overview Scope Details Aliases - Type bool Mandatory no Default false Possible values - true - false Secret no Configuration scope \u2612 parameter \u2610 general \u2610 steps \u2610 stages Resource references commonPipelineEnvironment : reference to: custom/isOptimizedAndScheduled","title":"isOptimizedAndScheduled"},{"location":"steps/checkmarxOneExecuteScan/#languagemode","text":"Specifies whether the scan should be run for a 'single' language or 'multi' language, default 'multi' back to overview Scope Details Aliases - Type string Mandatory no Default multi Secret no Configuration scope \u2612 parameter \u2610 general \u2612 steps \u2612 stages Resource references none","title":"languageMode"},{"location":"steps/checkmarxOneExecuteScan/#owner","text":"Set the GitHub organization. back to overview Scope Details Aliases githubOrg Type string Mandatory no Default $PIPER_owner (if set) Secret no Configuration scope \u2612 parameter \u2612 general \u2612 steps \u2612 stages Resource references commonPipelineEnvironment : reference to: github/owner","title":"owner"},{"location":"steps/checkmarxOneExecuteScan/#preset","text":"The preset to use for scanning, if not set explicitly the step will attempt to look up the project's setting based on the availability of checkmarxOneCredentialsId back to overview Scope Details Aliases - Type string Mandatory no Default $PIPER_preset (if set) Secret no Configuration scope \u2612 parameter \u2610 general \u2612 steps \u2612 stages Resource references none","title":"preset"},{"location":"steps/checkmarxOneExecuteScan/#projectcriticality","text":"The criticality of the checkmarxOne project, used during project creation back to overview Scope Details Aliases - Type string Mandatory no Default 3 Secret no Configuration scope \u2612 parameter \u2610 general \u2612 steps \u2612 stages Resource references none","title":"projectCriticality"},{"location":"steps/checkmarxOneExecuteScan/#projectid","text":"The ID of the checkmarxOne project to scan into. This parameter will take precedence over projectName if both are provided. back to overview Scope Details Aliases - Type string Mandatory no Default $PIPER_projectId (if set) Secret no Configuration scope \u2612 parameter \u2610 general \u2612 steps \u2612 stages Resource references none","title":"projectId"},{"location":"steps/checkmarxOneExecuteScan/#projectname","text":"The name of the checkmarxOne project to scan into back to overview Scope Details Aliases - Type string Mandatory yes Default $PIPER_projectName (if set) Secret no Configuration scope \u2612 parameter \u2610 general \u2612 steps \u2612 stages Resource references none","title":"projectName"},{"location":"steps/checkmarxOneExecuteScan/#projecttags","text":"Used to tag a project with a JSON string, e.g., {\"key\":\"value\", \"keywithoutvalue\":\"\"} back to overview Scope Details Aliases - Type string Mandatory no Default $PIPER_projectTags (if set) Secret no Configuration scope \u2612 parameter \u2610 general \u2612 steps \u2612 stages Resource references none","title":"projectTags"},{"location":"steps/checkmarxOneExecuteScan/#pullrequestname","text":"Used to supply the name for the newly created PR project branch when being used in pull request scenarios. This is supplied by the orchestrator. back to overview Scope Details Aliases - Type string Mandatory no Default $PIPER_pullRequestName (if set) Secret no Configuration scope \u2612 parameter \u2610 general \u2612 steps \u2612 stages Resource references none","title":"pullRequestName"},{"location":"steps/checkmarxOneExecuteScan/#repository","text":"Set the GitHub repository. back to overview Scope Details Aliases githubRepo Type string Mandatory no Default $PIPER_repository (if set) Secret no Configuration scope \u2612 parameter \u2612 general \u2612 steps \u2612 stages Resource references commonPipelineEnvironment : reference to: github/repository","title":"repository"},{"location":"steps/checkmarxOneExecuteScan/#scansummaryinpullrequest","text":"Whether the scan summary shall be added to the pull request as a comment or not. This is only applied if the step is executed in a pull request context. githubToken and githubApiUrl parameters must be set to allow the step to create the comment. back to overview Scope Details Aliases - Type bool Mandatory no Default false Possible values - true - false Secret no Configuration scope \u2612 parameter \u2610 general \u2612 steps \u2612 stages Resource references none","title":"scanSummaryInPullRequest"},{"location":"steps/checkmarxOneExecuteScan/#scantags","text":"Used to tag a scan with a JSON string, e.g., {\"key\":\"value\", \"keywithoutvalue\":\"\"} back to overview Scope Details Aliases - Type string Mandatory no Default $PIPER_scanTags (if set) Secret no Configuration scope \u2612 parameter \u2610 general \u2612 steps \u2612 stages Resource references none","title":"scanTags"},{"location":"steps/checkmarxOneExecuteScan/#script","text":"The common script environment of the Jenkinsfile running. Typically the reference to the script calling the pipeline step is provided with the this parameter, as in script: this . This allows the function to access the commonPipelineEnvironment for retrieving, e.g. configuration parameters. back to overview Scope Details Aliases - Type Jenkins Script Mandatory yes Default Secret no Configuration scope \u2610 parameter \u2610 general \u2610 steps \u2610 stages Resource references none","title":"script"},{"location":"steps/checkmarxOneExecuteScan/#serverurl","text":"The URL pointing to the root of the checkmarxOne server to be used back to overview Scope Details Aliases - Type string Mandatory yes Default $PIPER_serverUrl (if set) Secret no Configuration scope \u2612 parameter \u2612 general \u2612 steps \u2612 stages Resource references none","title":"serverUrl"},{"location":"steps/checkmarxOneExecuteScan/#sourceencoding","text":"The source encoding to be used, if not set explicitly the project's default will be used [Not yet supported] back to overview Scope Details Aliases - Type string Mandatory no Default 1 Secret no Configuration scope \u2612 parameter \u2610 general \u2612 steps \u2612 stages Resource references none","title":"sourceEncoding"},{"location":"steps/checkmarxOneExecuteScan/#stashcontent","text":"Jenkins-specific: Used for proper environment setup. Specific stashes that should be considered for the step execution. back to overview Scope Details Aliases - Type []string Mandatory no Default - checkmarxOne Secret no Configuration scope \u2612 parameter \u2612 general \u2612 steps \u2612 stages Resource references none","title":"stashContent"},{"location":"steps/checkmarxOneExecuteScan/#tenant","text":"The name of the checkmarxOne tenant to be used back to overview Scope Details Aliases - Type string Mandatory yes Default $PIPER_tenant (if set) Secret no Configuration scope \u2612 parameter \u2612 general \u2612 steps \u2612 stages Resource references none","title":"tenant"},{"location":"steps/checkmarxOneExecuteScan/#verbose","text":"verbose output back to overview Scope Details Aliases - Type bool Mandatory no Default false Possible values - true - false Secret no Configuration scope \u2612 parameter \u2612 general \u2612 steps \u2612 stages Resource references none","title":"verbose"},{"location":"steps/checkmarxOneExecuteScan/#verifyonly","text":"Whether the step shall only apply verification checks or whether it does a full scan and check cycle back to overview Scope Details Aliases - Type bool Mandatory no Default false Possible values - true - false Secret no Configuration scope \u2612 parameter \u2610 general \u2612 steps \u2612 stages Resource references none","title":"verifyOnly"},{"location":"steps/checkmarxOneExecuteScan/#vulnerabilitythresholdcritical","text":"The specific threshold for Critical severity findings back to overview Scope Details Aliases - Type int Mandatory no Default 100 Secret no Configuration scope \u2612 parameter \u2610 general \u2612 steps \u2612 stages Resource references none","title":"vulnerabilityThresholdCritical"},{"location":"steps/checkmarxOneExecuteScan/#vulnerabilitythresholdenabled","text":"Whether the thresholds are enabled or not. If enabled the build will be set to vulnerabilityThresholdResult in case a specific threshold value is exceeded back to overview Scope Details Aliases - Type bool Mandatory no Default true Possible values - true - false Secret no Configuration scope \u2612 parameter \u2610 general \u2612 steps \u2612 stages Resource references none","title":"vulnerabilityThresholdEnabled"},{"location":"steps/checkmarxOneExecuteScan/#vulnerabilitythresholdhigh","text":"The specific threshold for High severity findings back to overview Scope Details Aliases - Type int Mandatory no Default 100 Secret no Configuration scope \u2612 parameter \u2610 general \u2612 steps \u2612 stages Resource references none","title":"vulnerabilityThresholdHigh"},{"location":"steps/checkmarxOneExecuteScan/#vulnerabilitythresholdlow","text":"The specific threshold for Low severity findings back to overview Scope Details Aliases - Type int Mandatory no Default 10 Secret no Configuration scope \u2612 parameter \u2610 general \u2612 steps \u2612 stages Resource references none","title":"vulnerabilityThresholdLow"},{"location":"steps/checkmarxOneExecuteScan/#vulnerabilitythresholdlowperquery","text":"Flag to activate/deactivate the threshold of Low severity findings per query back to overview Scope Details Aliases - Type bool Mandatory no Default false Possible values - true - false Secret no Configuration scope \u2612 parameter \u2610 general \u2612 steps \u2612 stages Resource references none","title":"vulnerabilityThresholdLowPerQuery"},{"location":"steps/checkmarxOneExecuteScan/#vulnerabilitythresholdlowperquerymax","text":"Upper threshold of Low severity findings per query (in absolute number) back to overview Scope Details Aliases - Type int Mandatory no Default 10 Secret no Configuration scope \u2612 parameter \u2610 general \u2612 steps \u2612 stages Resource references none","title":"vulnerabilityThresholdLowPerQueryMax"},{"location":"steps/checkmarxOneExecuteScan/#vulnerabilitythresholdmedium","text":"The specific threshold for Medium severity findings back to overview Scope Details Aliases - Type int Mandatory no Default 100 Secret no Configuration scope \u2612 parameter \u2610 general \u2612 steps \u2612 stages Resource references none","title":"vulnerabilityThresholdMedium"},{"location":"steps/checkmarxOneExecuteScan/#vulnerabilitythresholdresult","text":"The result of the build in case thresholds are enabled and exceeded back to overview Scope Details Aliases - Type string Mandatory no Default FAILURE Possible values - FAILURE Secret no Configuration scope \u2612 parameter \u2610 general \u2612 steps \u2612 stages Resource references none","title":"vulnerabilityThresholdResult"},{"location":"steps/checkmarxOneExecuteScan/#vulnerabilitythresholdunit","text":"The unit for the threshold to apply. back to overview Scope Details Aliases - Type string Mandatory no Default percentage Secret no Configuration scope \u2612 parameter \u2610 general \u2612 steps \u2612 stages Resource references none","title":"vulnerabilityThresholdUnit"},{"location":"steps/checkmarxOneExecuteScan/#checkmarxonecredentialsid","text":"Jenkins 'Username with password' credentials ID containing ClientID and ClientSecret to communicate with the checkmarxOne backend. back to overview Scope Details Aliases - Type string Configuration scope \u2612 parameter \u2612 general \u2612 steps \u2612 stages","title":"checkmarxOneCredentialsId"},{"location":"steps/checkmarxOneExecuteScan/#checkmarxoneapikey","text":"Jenkins 'Secret Text' containing the APIKey to communicate with the checkmarxOne backend. back to overview Scope Details Aliases - Type string Configuration scope \u2612 parameter \u2612 general \u2612 steps \u2612 stages","title":"checkmarxOneAPIKey"},{"location":"steps/checkmarxOneExecuteScan/#githubtokencredentialsid","text":"Jenkins 'Secret text' credentials ID containing token to authenticate to GitHub. back to overview Scope Details Aliases - Type string Configuration scope \u2612 parameter \u2612 general \u2612 steps \u2612 stages","title":"githubTokenCredentialsId"},{"location":"steps/checksPublishResults/","text":"checksPublishResults \u00b6 Description \u00b6 This step can publish static check results from various sources. Prerequisites \u00b6 static check result files - To use this step, there must be static check result files available. installed warnings-ng plugin Parameters \u00b6 name mandatory default possible values aggregation no true , false , Map archive no false true , false checkstyle no [pattern:**/target/checkstyle-result.xml, archive:true, active:false, qualityGates:[[threshold:1, type:TOTAL_HIGH, unstable:false], [threshold:1, type:TOTAL_ERROR, unstable:false]]] true , false , Map cpd no [pattern:**/target/cpd.xml, archive:true, active:false, qualityGates:[[threshold:1, type:TOTAL_HIGH, unstable:false], [threshold:1, type:TOTAL_ERROR, unstable:false]]] true , false , Map eslint no [pattern:**/eslint.xml, archive:true, active:false, qualityGates:[[threshold:1, type:TOTAL_HIGH, unstable:false], [threshold:1, type:TOTAL_ERROR, unstable:false]]] true , false , Map failOnError no false true , false findbugs no [pattern:**/target/findbugsXml.xml, **/target/findbugs.xml, archive:true, active:false, qualityGates:[[threshold:1, type:TOTAL_HIGH, unstable:false], [threshold:1, type:TOTAL_ERROR, unstable:false]]] true , false , Map pmd no [pattern:**/target/pmd.xml, archive:true, active:false, qualityGates:[[threshold:1, type:TOTAL_HIGH, unstable:false], [threshold:1, type:TOTAL_ERROR, unstable:false]]] true , false , Map pylint no [pattern:**/pylint.log, archive:true, active:false, qualityGates:[[threshold:1, type:TOTAL_HIGH, unstable:false], [threshold:1, type:TOTAL_ERROR, unstable:false]]] true , false , Map script yes tasks no [pattern:**/*.java, low:, normal:TODO,REVISE,XXX, high:FIXME, archive:true, active:false, qualityGates:[[threshold:1, type:TOTAL_HIGH, unstable:false], [threshold:1, type:TOTAL_ERROR, unstable:false]]] true , false , Map aggregation - Allows to publish the check results. archive - If it is set to true the step will archive reports matching the tool specific pattern. checkstyle - Publishes Checkstyle findings with the Checkstyle plugin . cpd - Publishes CPD findings with the DRY plugin . eslint - Publishes ESLint findings (in JSLint format ) with the Warnings plugin . failOnError - If it is set to true the step will fail the build if JUnit detected any failing tests. findbugs - Publishes Findbugs findings with the Findbugs plugin . pmd - Publishes PMD findings with the PMD plugin . pylint - Publishes PyLint findings with the Warnings plugin , pylint needs to run with --output-format=parseable option. script - The common script environment of the Jenkinsfile running. Typically the reference to the script calling the pipeline step is provided with the this parameter, as in script: this . This allows the function to access the commonPipelineEnvironment for retrieving, e.g. configuration parameters. tasks - Searches and publishes TODOs in files with the Task Scanner Plugin . aggregation \u00b6 deprecated, do not use tasks \u00b6 parameter mandatory default possible values pattern no '**/*.java' archive no true true , false high no 'FIXME' normal no 'TODO,REVISE,XXX' low no qualityGates no [[threshold: 1, type: 'TOTAL_HIGH', unstable: false], [threshold: 1, type: 'TOTAL_ERROR', unstable: false]] see QualityGates pmd \u00b6 parameter mandatory default possible values pattern no '**/target/pmd.xml' archive no true true , false qualityGates no [[threshold: 1, type: 'TOTAL_HIGH', unstable: false], [threshold: 1, type: 'TOTAL_ERROR', unstable: false]] see QualityGates cpd \u00b6 parameter mandatory default possible values pattern no '**/target/cpd.xml' archive no true true , false qualityGates no [[threshold: 1, type: 'TOTAL_HIGH', unstable: false], [threshold: 1, type: 'TOTAL_ERROR', unstable: false]] see QualityGates findbugs \u00b6 parameter mandatory default possible values pattern no '**/target/findbugsXml.xml, **/target/findbugs.xml' archive no true true, false qualityGates no [[threshold: 1, type: 'TOTAL_HIGH', unstable: false], [threshold: 1, type: 'TOTAL_ERROR', unstable: false]] see QualityGates checkstyle \u00b6 parameter mandatory default possible values pattern no '**/target/checkstyle-result.xml' archive no true true , false qualityGates no [[threshold: 1, type: 'TOTAL_HIGH', unstable: false], [threshold: 1, type: 'TOTAL_ERROR', unstable: false]] see QualityGates eslint \u00b6 parameter mandatory default possible values pattern no '**/eslint.jslint.xml' archive no true true , false qualityGates no [[threshold: 1, type: 'TOTAL_HIGH', unstable: false], [threshold: 1, type: 'TOTAL_ERROR', unstable: false]] see QualityGates pylint \u00b6 parameter mandatory default possible values pattern no '**/pylint.log' archive no true true , false qualityGates no [[threshold: 1, type: 'TOTAL_HIGH', unstable: false], [threshold: 1, type: 'TOTAL_ERROR', unstable: false]] see QualityGates Step configuration \u00b6 We recommend to define values of step parameters via config.yml file . In following sections of the config.yml the configuration is possible: parameter general step/stage aggregation X archive X checkstyle X cpd X eslint X failOnError X findbugs X pmd X pylint X script tasks X Dependencies \u00b6 The step depends on the following Jenkins plugins pipeline-utility-steps warnings-ng workflow-basic-steps workflow-cps-global-lib Transitive dependencies are omitted. The list might be incomplete. Consider using the ppiper/jenkins-master docker image. This images comes with preinstalled plugins. QualityGates \u00b6 It is possible to define quality gates to set the build result to FAILURE (not stop the build) on a certain count of findings. To achieve this, just define your quality gates as followed for the specific check tool: qualityGates: [ [ threshold: 1 , type: 'TOTAL_HIGH' , unstable: false ], [ threshold: 10 , type: 'TOTAL_NORMAL' , unstable: false ], [ threshold: 100 , type: 'TOTAL_LOW' , unstable: false ], [ threshold: 1000 , type: 'TOTAL' , unstable: false ], ] This way, the quality gate will fail on 1 high issue, 10 normal issues, 100 low issues or a total issue count of 1000. The qualityGates parameter can be set for tasks , pmd , cpd , findbugs , checkstyle , eslint and pylint . checksPublishResults ( tasks: true , pmd: [ pattern: '**/target/pmd-results.xml' , qualityGates: [[ threshold: 101 , type: 'TOTAL_LOW' , unstable: true ]]], cpd: [ archive: false ], archive: true ) See also the official plugin documentation for further information. Side effects \u00b6 none Exceptions \u00b6 none Example \u00b6 // publish java results from pmd, cpd, checkstyle & findbugs checksPublishResults archive: true , pmd: true , cpd: true , findbugs: true , checkstyle: true // publish javascript results from ESLint checksPublishResults archive: true , eslint: [ pattern: '**/result-file-with-fancy-name.xml' ] // publish scala results from scalastyle checksPublishResults archive: true , checkstyle: [ pattern: '**/target/scalastyle-result.xml' ] // publish python results from pylint checksPublishResults archive: true , pylint: [ pattern: '**/target/pylint.log' ]","title":"checksPublishResults"},{"location":"steps/checksPublishResults/#checkspublishresults","text":"","title":"checksPublishResults"},{"location":"steps/checksPublishResults/#description","text":"This step can publish static check results from various sources.","title":"Description"},{"location":"steps/checksPublishResults/#prerequisites","text":"static check result files - To use this step, there must be static check result files available. installed warnings-ng plugin","title":"Prerequisites"},{"location":"steps/checksPublishResults/#parameters","text":"name mandatory default possible values aggregation no true , false , Map archive no false true , false checkstyle no [pattern:**/target/checkstyle-result.xml, archive:true, active:false, qualityGates:[[threshold:1, type:TOTAL_HIGH, unstable:false], [threshold:1, type:TOTAL_ERROR, unstable:false]]] true , false , Map cpd no [pattern:**/target/cpd.xml, archive:true, active:false, qualityGates:[[threshold:1, type:TOTAL_HIGH, unstable:false], [threshold:1, type:TOTAL_ERROR, unstable:false]]] true , false , Map eslint no [pattern:**/eslint.xml, archive:true, active:false, qualityGates:[[threshold:1, type:TOTAL_HIGH, unstable:false], [threshold:1, type:TOTAL_ERROR, unstable:false]]] true , false , Map failOnError no false true , false findbugs no [pattern:**/target/findbugsXml.xml, **/target/findbugs.xml, archive:true, active:false, qualityGates:[[threshold:1, type:TOTAL_HIGH, unstable:false], [threshold:1, type:TOTAL_ERROR, unstable:false]]] true , false , Map pmd no [pattern:**/target/pmd.xml, archive:true, active:false, qualityGates:[[threshold:1, type:TOTAL_HIGH, unstable:false], [threshold:1, type:TOTAL_ERROR, unstable:false]]] true , false , Map pylint no [pattern:**/pylint.log, archive:true, active:false, qualityGates:[[threshold:1, type:TOTAL_HIGH, unstable:false], [threshold:1, type:TOTAL_ERROR, unstable:false]]] true , false , Map script yes tasks no [pattern:**/*.java, low:, normal:TODO,REVISE,XXX, high:FIXME, archive:true, active:false, qualityGates:[[threshold:1, type:TOTAL_HIGH, unstable:false], [threshold:1, type:TOTAL_ERROR, unstable:false]]] true , false , Map aggregation - Allows to publish the check results. archive - If it is set to true the step will archive reports matching the tool specific pattern. checkstyle - Publishes Checkstyle findings with the Checkstyle plugin . cpd - Publishes CPD findings with the DRY plugin . eslint - Publishes ESLint findings (in JSLint format ) with the Warnings plugin . failOnError - If it is set to true the step will fail the build if JUnit detected any failing tests. findbugs - Publishes Findbugs findings with the Findbugs plugin . pmd - Publishes PMD findings with the PMD plugin . pylint - Publishes PyLint findings with the Warnings plugin , pylint needs to run with --output-format=parseable option. script - The common script environment of the Jenkinsfile running. Typically the reference to the script calling the pipeline step is provided with the this parameter, as in script: this . This allows the function to access the commonPipelineEnvironment for retrieving, e.g. configuration parameters. tasks - Searches and publishes TODOs in files with the Task Scanner Plugin .","title":"Parameters"},{"location":"steps/checksPublishResults/#aggregation","text":"deprecated, do not use","title":"aggregation"},{"location":"steps/checksPublishResults/#tasks","text":"parameter mandatory default possible values pattern no '**/*.java' archive no true true , false high no 'FIXME' normal no 'TODO,REVISE,XXX' low no qualityGates no [[threshold: 1, type: 'TOTAL_HIGH', unstable: false], [threshold: 1, type: 'TOTAL_ERROR', unstable: false]] see QualityGates","title":"tasks"},{"location":"steps/checksPublishResults/#pmd","text":"parameter mandatory default possible values pattern no '**/target/pmd.xml' archive no true true , false qualityGates no [[threshold: 1, type: 'TOTAL_HIGH', unstable: false], [threshold: 1, type: 'TOTAL_ERROR', unstable: false]] see QualityGates","title":"pmd"},{"location":"steps/checksPublishResults/#cpd","text":"parameter mandatory default possible values pattern no '**/target/cpd.xml' archive no true true , false qualityGates no [[threshold: 1, type: 'TOTAL_HIGH', unstable: false], [threshold: 1, type: 'TOTAL_ERROR', unstable: false]] see QualityGates","title":"cpd"},{"location":"steps/checksPublishResults/#findbugs","text":"parameter mandatory default possible values pattern no '**/target/findbugsXml.xml, **/target/findbugs.xml' archive no true true, false qualityGates no [[threshold: 1, type: 'TOTAL_HIGH', unstable: false], [threshold: 1, type: 'TOTAL_ERROR', unstable: false]] see QualityGates","title":"findbugs"},{"location":"steps/checksPublishResults/#checkstyle","text":"parameter mandatory default possible values pattern no '**/target/checkstyle-result.xml' archive no true true , false qualityGates no [[threshold: 1, type: 'TOTAL_HIGH', unstable: false], [threshold: 1, type: 'TOTAL_ERROR', unstable: false]] see QualityGates","title":"checkstyle"},{"location":"steps/checksPublishResults/#eslint","text":"parameter mandatory default possible values pattern no '**/eslint.jslint.xml' archive no true true , false qualityGates no [[threshold: 1, type: 'TOTAL_HIGH', unstable: false], [threshold: 1, type: 'TOTAL_ERROR', unstable: false]] see QualityGates","title":"eslint"},{"location":"steps/checksPublishResults/#pylint","text":"parameter mandatory default possible values pattern no '**/pylint.log' archive no true true , false qualityGates no [[threshold: 1, type: 'TOTAL_HIGH', unstable: false], [threshold: 1, type: 'TOTAL_ERROR', unstable: false]] see QualityGates","title":"pylint"},{"location":"steps/checksPublishResults/#step-configuration","text":"We recommend to define values of step parameters via config.yml file . In following sections of the config.yml the configuration is possible: parameter general step/stage aggregation X archive X checkstyle X cpd X eslint X failOnError X findbugs X pmd X pylint X script tasks X","title":"Step configuration"},{"location":"steps/checksPublishResults/#dependencies","text":"The step depends on the following Jenkins plugins pipeline-utility-steps warnings-ng workflow-basic-steps workflow-cps-global-lib Transitive dependencies are omitted. The list might be incomplete. Consider using the ppiper/jenkins-master docker image. This images comes with preinstalled plugins.","title":"Dependencies"},{"location":"steps/checksPublishResults/#qualitygates","text":"It is possible to define quality gates to set the build result to FAILURE (not stop the build) on a certain count of findings. To achieve this, just define your quality gates as followed for the specific check tool: qualityGates: [ [ threshold: 1 , type: 'TOTAL_HIGH' , unstable: false ], [ threshold: 10 , type: 'TOTAL_NORMAL' , unstable: false ], [ threshold: 100 , type: 'TOTAL_LOW' , unstable: false ], [ threshold: 1000 , type: 'TOTAL' , unstable: false ], ] This way, the quality gate will fail on 1 high issue, 10 normal issues, 100 low issues or a total issue count of 1000. The qualityGates parameter can be set for tasks , pmd , cpd , findbugs , checkstyle , eslint and pylint . checksPublishResults ( tasks: true , pmd: [ pattern: '**/target/pmd-results.xml' , qualityGates: [[ threshold: 101 , type: 'TOTAL_LOW' , unstable: true ]]], cpd: [ archive: false ], archive: true ) See also the official plugin documentation for further information.","title":"QualityGates"},{"location":"steps/checksPublishResults/#side-effects","text":"none","title":"Side effects"},{"location":"steps/checksPublishResults/#exceptions","text":"none","title":"Exceptions"},{"location":"steps/checksPublishResults/#example","text":"// publish java results from pmd, cpd, checkstyle & findbugs checksPublishResults archive: true , pmd: true , cpd: true , findbugs: true , checkstyle: true // publish javascript results from ESLint checksPublishResults archive: true , eslint: [ pattern: '**/result-file-with-fancy-name.xml' ] // publish scala results from scalastyle checksPublishResults archive: true , checkstyle: [ pattern: '**/target/scalastyle-result.xml' ] // publish python results from pylint checksPublishResults archive: true , pylint: [ pattern: '**/target/pylint.log' ]","title":"Example"},{"location":"steps/cloudFoundryCreateService/","text":"cloudFoundryCreateService \u00b6 Creates one or multiple Services in Cloud Foundry Description \u00b6 Creates one or multiple Cloud Foundry Services in Cloud Foundry Mandatory: * Cloud Foundry API endpoint, Organization, Space and user are available Please provide either of the following options: * If you chose to create a single Service the Service Instance Name, Service Plan and Service Broker of the Service to be created have to be available. You can set the optional cfCreateServiceConfig flag to configure the Service creation with your respective JSON configuration. The JSON configuration can either be an in-line JSON string or the path a dedicated JSON configuration file containing the JSON configuration. If you chose a dedicated config file, you must store the file in the same folder as your Jenkinsfile that starts the Pipeline in order for the Pipeline to be able to find the file. Most favourable SCM is Git. If you want the service to be created from a particular broker you can set the optional cfServiceBroker flag. You can set user provided tags for the Service creation using a flat list as the value for the optional cfServiceTags flag. The optional cfServiceBroker flag can be used when the service name is ambiguous. * For creating one or multiple Cloud Foundry Services at once with the Cloud Foundry Create-Service-Push Plugin using the optional serviceManifest flag. If you chose to set this flag, the Create-Service-Push Plugin will be used for all Service creations in this step and you will need to provide a serviceManifest.yml file. In that case, above described flags and options will not be used for the Service creations, since you chose to use the Create-Service-Push Plugin. Please see below examples for more information on how to make use of the plugin with the appropriate step configuation. Additionally the Plugin provides the option to make use of variable substitution for the Service creations. You can find further information regarding the functionality of the Cloud Foundry Create-Service-Push Plugin in the respective documentation: Cloud Foundry Create-Service-Push Plugin Usage \u00b6 We recommend to define values of step parameters via .pipeline/config.yml file . In this case, calling the step is essentially reduced to defining the step name. Calling the step can be done either in an orchestrator specific way (e.g. via a Jenkins library step) or on the command line. Jenkins Command Line library ( 'piper-lib-os' ) cloudFoundryCreateService script: this piper cloudFoundryCreateService Prerequisites \u00b6 You have a user for the SAP BTP Cloud Foundry environment Credentials have been configured in Jenkins with a dedicated Id Parameters \u00b6 Overview - Step \u00b6 Name Mandatory Additional information cfOrg yes cfSpace yes password (yes) pass via ENV, Vault or Jenkins credentials ( cfCredentialsId ) script (yes) reference to Jenkins main pipeline script username (yes) pass via ENV, Vault or Jenkins credentials ( cfCredentialsId ) cfApiEndpoint no cfAsync no cfCreateServiceConfig no cfService no cfServiceBroker no cfServiceInstanceName no cfServicePlan no cfServiceTags no manifestVariables no manifestVariablesFiles no serviceManifest no verbose no activates debug output Overview - Execution Environment \u00b6 Orchestrator-specific only These parameters are relevant for orchestrator usage and not considered when using the command line option. Name Mandatory Additional information containerCommand no containerShell no dockerEnvVars no dockerImage no dockerName no dockerOptions no dockerPullImage no dockerVolumeBind no dockerWorkspace no stashContent no Details \u00b6 cfApiEndpoint \u00b6 Cloud Foundry API endpoint back to overview Scope Details Aliases cloudFoundry/apiEndpoint Type string Mandatory no Default https://api.cf.eu10.hana.ondemand.com Secret no Configuration scope \u2612 parameter \u2612 general \u2612 steps \u2612 stages Resource references none cfAsync \u00b6 Decides if the service creation runs asynchronously back to overview Scope Details Aliases - Type bool Mandatory no Default true Possible values - true - false Secret no Configuration scope \u2612 parameter \u2612 general \u2612 steps \u2612 stages Resource references none cfCreateServiceConfig \u00b6 Path to JSON file or JSON in-line string for a Cloud Foundry Service creation back to overview Scope Details Aliases cloudFoundry/createServiceConfig Type string Mandatory no Default $PIPER_cfCreateServiceConfig (if set) Secret no Configuration scope \u2612 parameter \u2612 general \u2612 steps \u2612 stages Resource references none cfOrg \u00b6 Cloud Foundry org back to overview Scope Details Aliases cloudFoundry/org Type string Mandatory yes Default $PIPER_cfOrg (if set) Secret no Configuration scope \u2612 parameter \u2612 general \u2612 steps \u2612 stages Resource references none cfService \u00b6 Parameter for Cloud Foundry Service to be used for creating Cloud Foundry Service back to overview Scope Details Aliases cloudFoundry/service Type string Mandatory no Default $PIPER_cfService (if set) Secret no Configuration scope \u2612 parameter \u2612 general \u2612 steps \u2612 stages Resource references none cfServiceBroker \u00b6 Parameter for Service Broker to be used when creating a Cloud Foundry Service back to overview Scope Details Aliases cloudFoundry/serviceBroker Type string Mandatory no Default $PIPER_cfServiceBroker (if set) Secret no Configuration scope \u2612 parameter \u2612 general \u2612 steps \u2612 stages Resource references none cfServiceInstanceName \u00b6 Parameter for naming the Service Instance when creating a Cloud Foundry Service back to overview Scope Details Aliases cloudFoundry/serviceInstanceName Type string Mandatory no Default $PIPER_cfServiceInstanceName (if set) Secret no Configuration scope \u2612 parameter \u2612 general \u2612 steps \u2612 stages Resource references none cfServicePlan \u00b6 Parameter for Cloud Foundry Service Plan to be used when creating a Cloud Foundry Service back to overview Scope Details Aliases cloudFoundry/servicePlan Type string Mandatory no Default $PIPER_cfServicePlan (if set) Secret no Configuration scope \u2612 parameter \u2612 general \u2612 steps \u2612 stages Resource references none cfServiceTags \u00b6 Flat list of Tags to be used when creating a Cloud Foundry Service in a single string back to overview Scope Details Aliases cloudFoundry/serviceTags Type string Mandatory no Default $PIPER_cfServiceTags (if set) Secret no Configuration scope \u2612 parameter \u2612 general \u2612 steps \u2612 stages Resource references none cfSpace \u00b6 Cloud Foundry Space back to overview Scope Details Aliases cloudFoundry/space Type string Mandatory yes Default $PIPER_cfSpace (if set) Secret no Configuration scope \u2612 parameter \u2612 general \u2612 steps \u2612 stages Resource references none containerCommand \u00b6 Jenkins-specific: Used for proper environment setup. Kubernetes only: Allows to specify start command for container created with dockerImage parameter to overwrite Piper default (/usr/bin/tail -f /dev/null). back to overview Scope Details Aliases - Type string Mandatory no Default Secret no Configuration scope \u2612 parameter \u2612 general \u2612 steps \u2612 stages Resource references none containerShell \u00b6 Jenkins-specific: Used for proper environment setup. Allows to specify the shell to be executed for container with containerName. back to overview Scope Details Aliases - Type string Mandatory no Default Secret no Configuration scope \u2612 parameter \u2612 general \u2612 steps \u2612 stages Resource references none dockerEnvVars \u00b6 Environment variables to set in the container, e.g. [http_proxy: \"proxy:8080\"]. back to overview Scope Details Aliases - Type map[string]string Mandatory no Default Secret no Configuration scope \u2612 parameter \u2612 general \u2612 steps \u2612 stages Resource references none dockerImage \u00b6 Name of the docker image that should be used. If empty, Docker is not used and the command is executed directly on the Jenkins system. back to overview Scope Details Aliases - Type string Mandatory no Default ppiper/cf-cli:latest Secret no Configuration scope \u2612 parameter \u2612 general \u2612 steps \u2612 stages Resource references none dockerName \u00b6 Kubernetes only: Name of the container launching dockerImage. SideCar only: Name of the container in local network. back to overview Scope Details Aliases - Type string Mandatory no Default cf Secret no Configuration scope \u2612 parameter \u2612 general \u2612 steps \u2612 stages Resource references none dockerOptions \u00b6 Docker options to be set when starting the container. back to overview Scope Details Aliases - Type []string Mandatory no Default Secret no Configuration scope \u2612 parameter \u2612 general \u2612 steps \u2612 stages Resource references none dockerPullImage \u00b6 Set this to 'false' to bypass a docker image pull. Useful during development process. Allows testing of images which are available in the local registry only. back to overview Scope Details Aliases - Type bool Mandatory no Default true Possible values - true - false Secret no Configuration scope \u2612 parameter \u2612 general \u2612 steps \u2612 stages Resource references none dockerVolumeBind \u00b6 Jenkins-specific: Used for proper environment setup. Volumes that should be mounted into the docker container. back to overview Scope Details Aliases - Type map[string]string Mandatory no Default Secret no Configuration scope \u2612 parameter \u2612 general \u2612 steps \u2612 stages Resource references none dockerWorkspace \u00b6 Jenkins-specific: Used for proper environment setup. Kubernetes only: Specifies a dedicated user home directory for the container which will be passed as value for environment variable HOME . back to overview Scope Details Aliases - Type string Mandatory no Default Secret no Configuration scope \u2612 parameter \u2612 general \u2612 steps \u2612 stages Resource references none manifestVariables \u00b6 Defines a List of variables as key-value Map objects used for variable substitution within the file given by the Manifest. Defaults to an empty list, if not specified otherwise. This can be used to set variables like it is provided by cf push --var key=value . The order of the maps of variables given in the list is relevant in case there are conflicting variable names and values between maps contained within the list. In case of conflicts, the last specified map in the list will win. Though each map entry in the list can contain more than one key-value pair for variable substitution, it is recommended to stick to one entry per map, and rather declare more maps within the list. The reason is that if a map in the list contains more than one key-value entry, and the entries are conflicting, the conflict resolution behavior is undefined (since map entries have no sequence). Variables defined via manifestVariables always win over conflicting variables defined via any file given by manifestVariablesFiles - no matter what is declared before. This is the same behavior as can be observed when using cf push --var in combination with cf push --vars-file back to overview Scope Details Aliases - cloudFoundry/manifestVariables - cfManifestVariables Type []string Mandatory no Default $PIPER_manifestVariables (if set) Secret no Configuration scope \u2612 parameter \u2612 general \u2612 steps \u2612 stages Resource references none manifestVariablesFiles \u00b6 Defines the manifest variables Yaml files to be used to replace variable references in manifest. This parameter is optional and will default to manifest-variables.yml . This can be used to set variable files like it is provided by cf push --vars-file <file> . If the manifest is present and so are all variable files, a variable substitution will be triggered that uses the cfManifestSubstituteVariables step before deployment. The format of variable references follows the Cloud Foundry standard in https://docs.cloudfoundry.org/devguide/deploy-apps/manifest-attributes.html#variable-substitution back to overview Scope Details Aliases - cloudFoundry/manifestVariablesFiles - cfManifestVariablesFiles Type []string Mandatory no Default $PIPER_manifestVariablesFiles (if set) Secret no Configuration scope \u2612 parameter \u2612 general \u2612 steps \u2612 stages Resource references none password \u00b6 Password for Cloud Foundry User back to overview Scope Details Aliases - Type string Mandatory yes Default $PIPER_password (if set) Secret yes Configuration scope \u2612 parameter \u2610 general \u2612 steps \u2612 stages Resource references Jenkins credential id: id: cfCredentialsId reference to: password Vault resource: name: cloudfoundryVaultSecretName default value: cloudfoundry-$(org)-$(space) Vault paths: $(vaultPath)/cloudfoundry-$(org)-$(space) $(vaultBasePath)/$(vaultPipelineName)/cloudfoundry-$(org)-$(space) $(vaultBasePath)/GROUP-SECRETS/cloudfoundry-$(org)-$(space) script \u00b6 The common script environment of the Jenkinsfile running. Typically the reference to the script calling the pipeline step is provided with the this parameter, as in script: this . This allows the function to access the commonPipelineEnvironment for retrieving, e.g. configuration parameters. back to overview Scope Details Aliases - Type Jenkins Script Mandatory yes Default Secret no Configuration scope \u2610 parameter \u2610 general \u2610 steps \u2610 stages Resource references none serviceManifest \u00b6 Path to Cloud Foundry Service Manifest in YAML format for multiple service creations that are being passed to a Create-Service-Push Cloud Foundry cli plugin back to overview Scope Details Aliases - cloudFoundry/serviceManifest - cfServiceManifest Type string Mandatory no Default service-manifest.yml Secret no Configuration scope \u2612 parameter \u2612 general \u2612 steps \u2612 stages Resource references none stashContent \u00b6 Jenkins-specific: Used for proper environment setup. Specific stashes that should be considered for the step execution. back to overview Scope Details Aliases - Type []string Mandatory no Default - deployDescriptor Secret no Configuration scope \u2612 parameter \u2612 general \u2612 steps \u2612 stages Resource references none username \u00b6 User or E-Mail for CF back to overview Scope Details Aliases - Type string Mandatory yes Default $PIPER_username (if set) Secret yes Configuration scope \u2612 parameter \u2610 general \u2612 steps \u2612 stages Resource references Jenkins credential id: id: cfCredentialsId reference to: username Vault resource: name: cloudfoundryVaultSecretName default value: cloudfoundry-$(org)-$(space) Vault paths: $(vaultPath)/cloudfoundry-$(org)-$(space) $(vaultBasePath)/$(vaultPipelineName)/cloudfoundry-$(org)-$(space) $(vaultBasePath)/GROUP-SECRETS/cloudfoundry-$(org)-$(space) verbose \u00b6 verbose output back to overview Scope Details Aliases - Type bool Mandatory no Default false Possible values - true - false Secret no Configuration scope \u2612 parameter \u2612 general \u2612 steps \u2612 stages Resource references none cfCredentialsId \u00b6 Jenkins 'Username with password' credentials ID containing user and password to authenticate to the Cloud Foundry API. back to overview Scope Details Aliases cloudFoundry/credentialsId Type string Configuration scope \u2612 parameter \u2612 general \u2612 steps \u2612 stages Example \u00b6 Single Service Creation in Cloud Foundry example with JSON-configuration in Jenkinsfile \u00b6 The following example creates a single Service in Cloud Foundry. It makes use of the cfCreateServiceConfig flag for passing a JSON configuration as an in-line parameter string as well as the cfServiceTags for providing user tags. You can store the credentials in Jenkins and use the cfCredentialsId parameter to authenticate to Cloud Foundry. This can be done accordingly: cloudFoundryCreateService ( cfApiEndpoint : 'https://test.server.com' , cfOrg : 'cfOrg' , cfSpace: 'cfSpace' , cfCredentialsId: 'cfCredentialsId' , cfService: 'myService' , cfServiceInstanceName: 'myServiceInstanceName' , cfServicePlan: 'myPlan' , cfCreateServiceConfig: '{\\\"example\\\":\\\"value\\\",\\\"example\\\":\\\"value\\\"}' , cfServiceTags: 'list, of, tags' , script: this , ) If you chose to having a dedicated JSON file for the JSON configuration for the cfCreateServiceConfig flag you can do so by referencing the file path accordingly. This file should be stored in the same folder as your Jenkinsfile that starts the Pipeline in order for the Pipeline to be able to find the file. Most favourable SCM is Git. Such a JSON file with the appropriate step configuration could look as follows: The JSON config file, e.g. createServiceConfig.json can look like this: { \"example\" : \"value\" , \"example\" : \"value\" } The step configuration needs to contain the path to the JSON file: cloudFoundryCreateService ( cfApiEndpoint : 'https://test.server.com' , cfOrg : 'cfOrg' , cfSpace: 'cfSpace' , cfCredentialsId: 'cfCredentialsId' , cfService: 'myService' , cfServiceInstanceName: 'myServiceInstanceName' , cfServicePlan: 'myPlan' , cfCreateServiceConfig: 'createServiceConfig.json' , cfServiceTags: 'list, of, tags' , script: this , ) Multiple Service Creation in Cloud Foundry example with manifest file in Jenkinsfile \u00b6 The following example shows the option to create multiple Services in Cloud Foundry. It makes use of the Cloud Foundry Create-Service-Push Plugin. This is described in above Prerequisites, please check this section for further information regarding its usage. This plugin enables this step to create multiple Cloud Foundry Services in one step. It requires a dedicated YAML file, e.g. manifest.yml , that contains all the information for creating the services, including their names, service plan and the service broker. Such a manifest.yml file needs to have the following structure, e.g. for creating three mongoDB Services with the Service Plan v4.0-dev: --- create-services : - name : \"testDatabase1\" broker : \"mongodb\" plan : \"v4.0-dev\" - name : \"testDatabase2\" broker : \"mongodb\" plan : \"v4.0-dev\" - name : \"testDatabase3\" broker : \"mongodb\" plan : \"v4.0-dev\" The path of the manifest.yml config file needs to be passed as a parameter in the serviceManifest flag. You can store the credentials in Jenkins and use the cfCredentialsId parameter to authenticate to Cloud Foundry. This can be done accordingly: cloudFoundryCreateService ( cfApiEndpoint : 'https://test.server.com' , cfOrg : 'cfOrg' , cfSpace: 'cfSpace' , cfCredentialsId: 'cfCredentialsId' , serviceManifest: 'manifest.yml' , script: this , ) Multiple Service Creation in Cloud Foundry example with manifest file and variable substitution in Jenkinsfile \u00b6 Additionally the Cloud Foundry Create-Service-Push Plugin offers the option to make use of variable substitution. This enables you to rename variables in the manifest.yml dynamically. It can be done either via providing the file path to a dedicated YAML file containing the information regarding the variable substitution values in the manifestVariablesFiles flag or via providing a String List in the manifestVariables flag. Either ways can be achieved as seen in below examples for creating MongoDB instances. For both ways you need to adapt the manifest.yml file to be relevant for variable substitution. This can be done according to below example: --- create-services : - name : ((name1)) broker : \"mongodb\" plan : \"v4.0-dev\" - name : ((name2)) broker : \"mongodb\" plan : \"v4.0-dev\" - name : ((name3)) broker : \"mongodb\" plan : \"v4.0-dev\" If you chose to have a dedicated file for the variable substitution values, it needs to have the following structure of the vars.yml file: name1 : test1 name2 : test2 name3 : test3 The path of the manifest.yml config file needs to be passed as a parameter in the serviceManifest flag as well as the path to the vars.yml file in the manifestVariablesFiles flag. You can store the credentials in Jenkins and use the cfCredentialsId parameter to authenticate to Cloud Foundry. This can be done accordingly: cloudFoundryCreateService ( cfApiEndpoint : 'https://test.server.com' , cfOrg : 'cfOrg' , cfSpace: 'cfSpace' , cfCredentialsId: 'cfCredentialsId' , serviceManifest: 'manifest.yml' , manifestVariablesFiles: 'vars.yml' , script: this , ) You can also pass the values for the variable substition as a string list for the manifestVariables flag. This needs to follow the pattern key=value. This can be done accordingly: cloudFoundryCreateService ( cfApiEndpoint : 'https://test.server.com' , cfOrg : 'cfOrg' , cfSpace: 'cfSpace' , cfCredentialsId: 'cfCredentialsId' , serviceManifest: 'manifest.yml' , manifestVariables: [ \"name1=test1\" , \"name2=test2\" , \"name3=test3\" ], script: this , )","title":"cloudFoundryCreateService"},{"location":"steps/cloudFoundryCreateService/#cloudfoundrycreateservice","text":"Creates one or multiple Services in Cloud Foundry","title":"cloudFoundryCreateService"},{"location":"steps/cloudFoundryCreateService/#description","text":"Creates one or multiple Cloud Foundry Services in Cloud Foundry Mandatory: * Cloud Foundry API endpoint, Organization, Space and user are available Please provide either of the following options: * If you chose to create a single Service the Service Instance Name, Service Plan and Service Broker of the Service to be created have to be available. You can set the optional cfCreateServiceConfig flag to configure the Service creation with your respective JSON configuration. The JSON configuration can either be an in-line JSON string or the path a dedicated JSON configuration file containing the JSON configuration. If you chose a dedicated config file, you must store the file in the same folder as your Jenkinsfile that starts the Pipeline in order for the Pipeline to be able to find the file. Most favourable SCM is Git. If you want the service to be created from a particular broker you can set the optional cfServiceBroker flag. You can set user provided tags for the Service creation using a flat list as the value for the optional cfServiceTags flag. The optional cfServiceBroker flag can be used when the service name is ambiguous. * For creating one or multiple Cloud Foundry Services at once with the Cloud Foundry Create-Service-Push Plugin using the optional serviceManifest flag. If you chose to set this flag, the Create-Service-Push Plugin will be used for all Service creations in this step and you will need to provide a serviceManifest.yml file. In that case, above described flags and options will not be used for the Service creations, since you chose to use the Create-Service-Push Plugin. Please see below examples for more information on how to make use of the plugin with the appropriate step configuation. Additionally the Plugin provides the option to make use of variable substitution for the Service creations. You can find further information regarding the functionality of the Cloud Foundry Create-Service-Push Plugin in the respective documentation: Cloud Foundry Create-Service-Push Plugin","title":"Description"},{"location":"steps/cloudFoundryCreateService/#usage","text":"We recommend to define values of step parameters via .pipeline/config.yml file . In this case, calling the step is essentially reduced to defining the step name. Calling the step can be done either in an orchestrator specific way (e.g. via a Jenkins library step) or on the command line. Jenkins Command Line library ( 'piper-lib-os' ) cloudFoundryCreateService script: this piper cloudFoundryCreateService","title":"Usage"},{"location":"steps/cloudFoundryCreateService/#prerequisites","text":"You have a user for the SAP BTP Cloud Foundry environment Credentials have been configured in Jenkins with a dedicated Id","title":"Prerequisites"},{"location":"steps/cloudFoundryCreateService/#parameters","text":"","title":"Parameters"},{"location":"steps/cloudFoundryCreateService/#overview-step","text":"Name Mandatory Additional information cfOrg yes cfSpace yes password (yes) pass via ENV, Vault or Jenkins credentials ( cfCredentialsId ) script (yes) reference to Jenkins main pipeline script username (yes) pass via ENV, Vault or Jenkins credentials ( cfCredentialsId ) cfApiEndpoint no cfAsync no cfCreateServiceConfig no cfService no cfServiceBroker no cfServiceInstanceName no cfServicePlan no cfServiceTags no manifestVariables no manifestVariablesFiles no serviceManifest no verbose no activates debug output","title":"Overview - Step"},{"location":"steps/cloudFoundryCreateService/#overview-execution-environment","text":"Orchestrator-specific only These parameters are relevant for orchestrator usage and not considered when using the command line option. Name Mandatory Additional information containerCommand no containerShell no dockerEnvVars no dockerImage no dockerName no dockerOptions no dockerPullImage no dockerVolumeBind no dockerWorkspace no stashContent no","title":"Overview - Execution Environment"},{"location":"steps/cloudFoundryCreateService/#details","text":"","title":"Details"},{"location":"steps/cloudFoundryCreateService/#cfapiendpoint","text":"Cloud Foundry API endpoint back to overview Scope Details Aliases cloudFoundry/apiEndpoint Type string Mandatory no Default https://api.cf.eu10.hana.ondemand.com Secret no Configuration scope \u2612 parameter \u2612 general \u2612 steps \u2612 stages Resource references none","title":"cfApiEndpoint"},{"location":"steps/cloudFoundryCreateService/#cfasync","text":"Decides if the service creation runs asynchronously back to overview Scope Details Aliases - Type bool Mandatory no Default true Possible values - true - false Secret no Configuration scope \u2612 parameter \u2612 general \u2612 steps \u2612 stages Resource references none","title":"cfAsync"},{"location":"steps/cloudFoundryCreateService/#cfcreateserviceconfig","text":"Path to JSON file or JSON in-line string for a Cloud Foundry Service creation back to overview Scope Details Aliases cloudFoundry/createServiceConfig Type string Mandatory no Default $PIPER_cfCreateServiceConfig (if set) Secret no Configuration scope \u2612 parameter \u2612 general \u2612 steps \u2612 stages Resource references none","title":"cfCreateServiceConfig"},{"location":"steps/cloudFoundryCreateService/#cforg","text":"Cloud Foundry org back to overview Scope Details Aliases cloudFoundry/org Type string Mandatory yes Default $PIPER_cfOrg (if set) Secret no Configuration scope \u2612 parameter \u2612 general \u2612 steps \u2612 stages Resource references none","title":"cfOrg"},{"location":"steps/cloudFoundryCreateService/#cfservice","text":"Parameter for Cloud Foundry Service to be used for creating Cloud Foundry Service back to overview Scope Details Aliases cloudFoundry/service Type string Mandatory no Default $PIPER_cfService (if set) Secret no Configuration scope \u2612 parameter \u2612 general \u2612 steps \u2612 stages Resource references none","title":"cfService"},{"location":"steps/cloudFoundryCreateService/#cfservicebroker","text":"Parameter for Service Broker to be used when creating a Cloud Foundry Service back to overview Scope Details Aliases cloudFoundry/serviceBroker Type string Mandatory no Default $PIPER_cfServiceBroker (if set) Secret no Configuration scope \u2612 parameter \u2612 general \u2612 steps \u2612 stages Resource references none","title":"cfServiceBroker"},{"location":"steps/cloudFoundryCreateService/#cfserviceinstancename","text":"Parameter for naming the Service Instance when creating a Cloud Foundry Service back to overview Scope Details Aliases cloudFoundry/serviceInstanceName Type string Mandatory no Default $PIPER_cfServiceInstanceName (if set) Secret no Configuration scope \u2612 parameter \u2612 general \u2612 steps \u2612 stages Resource references none","title":"cfServiceInstanceName"},{"location":"steps/cloudFoundryCreateService/#cfserviceplan","text":"Parameter for Cloud Foundry Service Plan to be used when creating a Cloud Foundry Service back to overview Scope Details Aliases cloudFoundry/servicePlan Type string Mandatory no Default $PIPER_cfServicePlan (if set) Secret no Configuration scope \u2612 parameter \u2612 general \u2612 steps \u2612 stages Resource references none","title":"cfServicePlan"},{"location":"steps/cloudFoundryCreateService/#cfservicetags","text":"Flat list of Tags to be used when creating a Cloud Foundry Service in a single string back to overview Scope Details Aliases cloudFoundry/serviceTags Type string Mandatory no Default $PIPER_cfServiceTags (if set) Secret no Configuration scope \u2612 parameter \u2612 general \u2612 steps \u2612 stages Resource references none","title":"cfServiceTags"},{"location":"steps/cloudFoundryCreateService/#cfspace","text":"Cloud Foundry Space back to overview Scope Details Aliases cloudFoundry/space Type string Mandatory yes Default $PIPER_cfSpace (if set) Secret no Configuration scope \u2612 parameter \u2612 general \u2612 steps \u2612 stages Resource references none","title":"cfSpace"},{"location":"steps/cloudFoundryCreateService/#containercommand","text":"Jenkins-specific: Used for proper environment setup. Kubernetes only: Allows to specify start command for container created with dockerImage parameter to overwrite Piper default (/usr/bin/tail -f /dev/null). back to overview Scope Details Aliases - Type string Mandatory no Default Secret no Configuration scope \u2612 parameter \u2612 general \u2612 steps \u2612 stages Resource references none","title":"containerCommand"},{"location":"steps/cloudFoundryCreateService/#containershell","text":"Jenkins-specific: Used for proper environment setup. Allows to specify the shell to be executed for container with containerName. back to overview Scope Details Aliases - Type string Mandatory no Default Secret no Configuration scope \u2612 parameter \u2612 general \u2612 steps \u2612 stages Resource references none","title":"containerShell"},{"location":"steps/cloudFoundryCreateService/#dockerenvvars","text":"Environment variables to set in the container, e.g. [http_proxy: \"proxy:8080\"]. back to overview Scope Details Aliases - Type map[string]string Mandatory no Default Secret no Configuration scope \u2612 parameter \u2612 general \u2612 steps \u2612 stages Resource references none","title":"dockerEnvVars"},{"location":"steps/cloudFoundryCreateService/#dockerimage","text":"Name of the docker image that should be used. If empty, Docker is not used and the command is executed directly on the Jenkins system. back to overview Scope Details Aliases - Type string Mandatory no Default ppiper/cf-cli:latest Secret no Configuration scope \u2612 parameter \u2612 general \u2612 steps \u2612 stages Resource references none","title":"dockerImage"},{"location":"steps/cloudFoundryCreateService/#dockername","text":"Kubernetes only: Name of the container launching dockerImage. SideCar only: Name of the container in local network. back to overview Scope Details Aliases - Type string Mandatory no Default cf Secret no Configuration scope \u2612 parameter \u2612 general \u2612 steps \u2612 stages Resource references none","title":"dockerName"},{"location":"steps/cloudFoundryCreateService/#dockeroptions","text":"Docker options to be set when starting the container. back to overview Scope Details Aliases - Type []string Mandatory no Default Secret no Configuration scope \u2612 parameter \u2612 general \u2612 steps \u2612 stages Resource references none","title":"dockerOptions"},{"location":"steps/cloudFoundryCreateService/#dockerpullimage","text":"Set this to 'false' to bypass a docker image pull. Useful during development process. Allows testing of images which are available in the local registry only. back to overview Scope Details Aliases - Type bool Mandatory no Default true Possible values - true - false Secret no Configuration scope \u2612 parameter \u2612 general \u2612 steps \u2612 stages Resource references none","title":"dockerPullImage"},{"location":"steps/cloudFoundryCreateService/#dockervolumebind","text":"Jenkins-specific: Used for proper environment setup. Volumes that should be mounted into the docker container. back to overview Scope Details Aliases - Type map[string]string Mandatory no Default Secret no Configuration scope \u2612 parameter \u2612 general \u2612 steps \u2612 stages Resource references none","title":"dockerVolumeBind"},{"location":"steps/cloudFoundryCreateService/#dockerworkspace","text":"Jenkins-specific: Used for proper environment setup. Kubernetes only: Specifies a dedicated user home directory for the container which will be passed as value for environment variable HOME . back to overview Scope Details Aliases - Type string Mandatory no Default Secret no Configuration scope \u2612 parameter \u2612 general \u2612 steps \u2612 stages Resource references none","title":"dockerWorkspace"},{"location":"steps/cloudFoundryCreateService/#manifestvariables","text":"Defines a List of variables as key-value Map objects used for variable substitution within the file given by the Manifest. Defaults to an empty list, if not specified otherwise. This can be used to set variables like it is provided by cf push --var key=value . The order of the maps of variables given in the list is relevant in case there are conflicting variable names and values between maps contained within the list. In case of conflicts, the last specified map in the list will win. Though each map entry in the list can contain more than one key-value pair for variable substitution, it is recommended to stick to one entry per map, and rather declare more maps within the list. The reason is that if a map in the list contains more than one key-value entry, and the entries are conflicting, the conflict resolution behavior is undefined (since map entries have no sequence). Variables defined via manifestVariables always win over conflicting variables defined via any file given by manifestVariablesFiles - no matter what is declared before. This is the same behavior as can be observed when using cf push --var in combination with cf push --vars-file back to overview Scope Details Aliases - cloudFoundry/manifestVariables - cfManifestVariables Type []string Mandatory no Default $PIPER_manifestVariables (if set) Secret no Configuration scope \u2612 parameter \u2612 general \u2612 steps \u2612 stages Resource references none","title":"manifestVariables"},{"location":"steps/cloudFoundryCreateService/#manifestvariablesfiles","text":"Defines the manifest variables Yaml files to be used to replace variable references in manifest. This parameter is optional and will default to manifest-variables.yml . This can be used to set variable files like it is provided by cf push --vars-file <file> . If the manifest is present and so are all variable files, a variable substitution will be triggered that uses the cfManifestSubstituteVariables step before deployment. The format of variable references follows the Cloud Foundry standard in https://docs.cloudfoundry.org/devguide/deploy-apps/manifest-attributes.html#variable-substitution back to overview Scope Details Aliases - cloudFoundry/manifestVariablesFiles - cfManifestVariablesFiles Type []string Mandatory no Default $PIPER_manifestVariablesFiles (if set) Secret no Configuration scope \u2612 parameter \u2612 general \u2612 steps \u2612 stages Resource references none","title":"manifestVariablesFiles"},{"location":"steps/cloudFoundryCreateService/#password","text":"Password for Cloud Foundry User back to overview Scope Details Aliases - Type string Mandatory yes Default $PIPER_password (if set) Secret yes Configuration scope \u2612 parameter \u2610 general \u2612 steps \u2612 stages Resource references Jenkins credential id: id: cfCredentialsId reference to: password Vault resource: name: cloudfoundryVaultSecretName default value: cloudfoundry-$(org)-$(space) Vault paths: $(vaultPath)/cloudfoundry-$(org)-$(space) $(vaultBasePath)/$(vaultPipelineName)/cloudfoundry-$(org)-$(space) $(vaultBasePath)/GROUP-SECRETS/cloudfoundry-$(org)-$(space)","title":"password"},{"location":"steps/cloudFoundryCreateService/#script","text":"The common script environment of the Jenkinsfile running. Typically the reference to the script calling the pipeline step is provided with the this parameter, as in script: this . This allows the function to access the commonPipelineEnvironment for retrieving, e.g. configuration parameters. back to overview Scope Details Aliases - Type Jenkins Script Mandatory yes Default Secret no Configuration scope \u2610 parameter \u2610 general \u2610 steps \u2610 stages Resource references none","title":"script"},{"location":"steps/cloudFoundryCreateService/#servicemanifest","text":"Path to Cloud Foundry Service Manifest in YAML format for multiple service creations that are being passed to a Create-Service-Push Cloud Foundry cli plugin back to overview Scope Details Aliases - cloudFoundry/serviceManifest - cfServiceManifest Type string Mandatory no Default service-manifest.yml Secret no Configuration scope \u2612 parameter \u2612 general \u2612 steps \u2612 stages Resource references none","title":"serviceManifest"},{"location":"steps/cloudFoundryCreateService/#stashcontent","text":"Jenkins-specific: Used for proper environment setup. Specific stashes that should be considered for the step execution. back to overview Scope Details Aliases - Type []string Mandatory no Default - deployDescriptor Secret no Configuration scope \u2612 parameter \u2612 general \u2612 steps \u2612 stages Resource references none","title":"stashContent"},{"location":"steps/cloudFoundryCreateService/#username","text":"User or E-Mail for CF back to overview Scope Details Aliases - Type string Mandatory yes Default $PIPER_username (if set) Secret yes Configuration scope \u2612 parameter \u2610 general \u2612 steps \u2612 stages Resource references Jenkins credential id: id: cfCredentialsId reference to: username Vault resource: name: cloudfoundryVaultSecretName default value: cloudfoundry-$(org)-$(space) Vault paths: $(vaultPath)/cloudfoundry-$(org)-$(space) $(vaultBasePath)/$(vaultPipelineName)/cloudfoundry-$(org)-$(space) $(vaultBasePath)/GROUP-SECRETS/cloudfoundry-$(org)-$(space)","title":"username"},{"location":"steps/cloudFoundryCreateService/#verbose","text":"verbose output back to overview Scope Details Aliases - Type bool Mandatory no Default false Possible values - true - false Secret no Configuration scope \u2612 parameter \u2612 general \u2612 steps \u2612 stages Resource references none","title":"verbose"},{"location":"steps/cloudFoundryCreateService/#cfcredentialsid","text":"Jenkins 'Username with password' credentials ID containing user and password to authenticate to the Cloud Foundry API. back to overview Scope Details Aliases cloudFoundry/credentialsId Type string Configuration scope \u2612 parameter \u2612 general \u2612 steps \u2612 stages","title":"cfCredentialsId"},{"location":"steps/cloudFoundryCreateService/#example","text":"","title":"Example"},{"location":"steps/cloudFoundryCreateService/#single-service-creation-in-cloud-foundry-example-with-json-configuration-in-jenkinsfile","text":"The following example creates a single Service in Cloud Foundry. It makes use of the cfCreateServiceConfig flag for passing a JSON configuration as an in-line parameter string as well as the cfServiceTags for providing user tags. You can store the credentials in Jenkins and use the cfCredentialsId parameter to authenticate to Cloud Foundry. This can be done accordingly: cloudFoundryCreateService ( cfApiEndpoint : 'https://test.server.com' , cfOrg : 'cfOrg' , cfSpace: 'cfSpace' , cfCredentialsId: 'cfCredentialsId' , cfService: 'myService' , cfServiceInstanceName: 'myServiceInstanceName' , cfServicePlan: 'myPlan' , cfCreateServiceConfig: '{\\\"example\\\":\\\"value\\\",\\\"example\\\":\\\"value\\\"}' , cfServiceTags: 'list, of, tags' , script: this , ) If you chose to having a dedicated JSON file for the JSON configuration for the cfCreateServiceConfig flag you can do so by referencing the file path accordingly. This file should be stored in the same folder as your Jenkinsfile that starts the Pipeline in order for the Pipeline to be able to find the file. Most favourable SCM is Git. Such a JSON file with the appropriate step configuration could look as follows: The JSON config file, e.g. createServiceConfig.json can look like this: { \"example\" : \"value\" , \"example\" : \"value\" } The step configuration needs to contain the path to the JSON file: cloudFoundryCreateService ( cfApiEndpoint : 'https://test.server.com' , cfOrg : 'cfOrg' , cfSpace: 'cfSpace' , cfCredentialsId: 'cfCredentialsId' , cfService: 'myService' , cfServiceInstanceName: 'myServiceInstanceName' , cfServicePlan: 'myPlan' , cfCreateServiceConfig: 'createServiceConfig.json' , cfServiceTags: 'list, of, tags' , script: this , )","title":"Single Service Creation in Cloud Foundry example with JSON-configuration in Jenkinsfile"},{"location":"steps/cloudFoundryCreateService/#multiple-service-creation-in-cloud-foundry-example-with-manifest-file-in-jenkinsfile","text":"The following example shows the option to create multiple Services in Cloud Foundry. It makes use of the Cloud Foundry Create-Service-Push Plugin. This is described in above Prerequisites, please check this section for further information regarding its usage. This plugin enables this step to create multiple Cloud Foundry Services in one step. It requires a dedicated YAML file, e.g. manifest.yml , that contains all the information for creating the services, including their names, service plan and the service broker. Such a manifest.yml file needs to have the following structure, e.g. for creating three mongoDB Services with the Service Plan v4.0-dev: --- create-services : - name : \"testDatabase1\" broker : \"mongodb\" plan : \"v4.0-dev\" - name : \"testDatabase2\" broker : \"mongodb\" plan : \"v4.0-dev\" - name : \"testDatabase3\" broker : \"mongodb\" plan : \"v4.0-dev\" The path of the manifest.yml config file needs to be passed as a parameter in the serviceManifest flag. You can store the credentials in Jenkins and use the cfCredentialsId parameter to authenticate to Cloud Foundry. This can be done accordingly: cloudFoundryCreateService ( cfApiEndpoint : 'https://test.server.com' , cfOrg : 'cfOrg' , cfSpace: 'cfSpace' , cfCredentialsId: 'cfCredentialsId' , serviceManifest: 'manifest.yml' , script: this , )","title":"Multiple Service Creation in Cloud Foundry example with manifest file in Jenkinsfile"},{"location":"steps/cloudFoundryCreateService/#multiple-service-creation-in-cloud-foundry-example-with-manifest-file-and-variable-substitution-in-jenkinsfile","text":"Additionally the Cloud Foundry Create-Service-Push Plugin offers the option to make use of variable substitution. This enables you to rename variables in the manifest.yml dynamically. It can be done either via providing the file path to a dedicated YAML file containing the information regarding the variable substitution values in the manifestVariablesFiles flag or via providing a String List in the manifestVariables flag. Either ways can be achieved as seen in below examples for creating MongoDB instances. For both ways you need to adapt the manifest.yml file to be relevant for variable substitution. This can be done according to below example: --- create-services : - name : ((name1)) broker : \"mongodb\" plan : \"v4.0-dev\" - name : ((name2)) broker : \"mongodb\" plan : \"v4.0-dev\" - name : ((name3)) broker : \"mongodb\" plan : \"v4.0-dev\" If you chose to have a dedicated file for the variable substitution values, it needs to have the following structure of the vars.yml file: name1 : test1 name2 : test2 name3 : test3 The path of the manifest.yml config file needs to be passed as a parameter in the serviceManifest flag as well as the path to the vars.yml file in the manifestVariablesFiles flag. You can store the credentials in Jenkins and use the cfCredentialsId parameter to authenticate to Cloud Foundry. This can be done accordingly: cloudFoundryCreateService ( cfApiEndpoint : 'https://test.server.com' , cfOrg : 'cfOrg' , cfSpace: 'cfSpace' , cfCredentialsId: 'cfCredentialsId' , serviceManifest: 'manifest.yml' , manifestVariablesFiles: 'vars.yml' , script: this , ) You can also pass the values for the variable substition as a string list for the manifestVariables flag. This needs to follow the pattern key=value. This can be done accordingly: cloudFoundryCreateService ( cfApiEndpoint : 'https://test.server.com' , cfOrg : 'cfOrg' , cfSpace: 'cfSpace' , cfCredentialsId: 'cfCredentialsId' , serviceManifest: 'manifest.yml' , manifestVariables: [ \"name1=test1\" , \"name2=test2\" , \"name3=test3\" ], script: this , )","title":"Multiple Service Creation in Cloud Foundry example with manifest file and variable substitution in Jenkinsfile"},{"location":"steps/cloudFoundryCreateServiceKey/","text":"cloudFoundryCreateServiceKey \u00b6 cloudFoundryCreateServiceKey Description \u00b6 Create CloudFoundryServiceKey Usage \u00b6 We recommend to define values of step parameters via .pipeline/config.yml file . In this case, calling the step is essentially reduced to defining the step name. Calling the step can be done either in an orchestrator specific way (e.g. via a Jenkins library step) or on the command line. Jenkins Command Line library ( 'piper-lib-os' ) cloudFoundryCreateServiceKey script: this piper cloudFoundryCreateServiceKey Prerequisites \u00b6 This step is for creating a Service Key for an existing Service in Cloud Foundry. Cloud Foundry API endpoint, Organization, Space, user and Service Instance are available Credentials have been configured in Jenkins with a dedicated Id Additionally you can set the optional serviceKeyConfig flag to configure the Service Key creation with your respective JSON configuration. The JSON configuration can either be a JSON or the path a dedicated JSON configuration file containing the JSON configuration. If you chose a dedicated config file, it must be stored in a file that must be referenced in the serviceKeyConfigFile flag. You must store the file in the same folder as your Jenkinsfile that starts the Pipeline in order for the Pipeline to be able to find the file. Most favourable SCM is Git. Parameters \u00b6 Overview - Step \u00b6 Name Mandatory Additional information cfApiEndpoint yes cfOrg yes cfServiceInstance yes cfServiceKeyName yes cfSpace yes password (yes) pass via ENV, Vault or Jenkins credentials ( cfCredentialsId ) script (yes) reference to Jenkins main pipeline script username (yes) pass via ENV, Vault or Jenkins credentials ( cfCredentialsId ) cfAsync no cfServiceKeyConfig no verbose no activates debug output Overview - Execution Environment \u00b6 Orchestrator-specific only These parameters are relevant for orchestrator usage and not considered when using the command line option. Name Mandatory Additional information containerCommand no containerShell no dockerEnvVars no dockerImage no dockerName no dockerOptions no dockerPullImage no dockerVolumeBind no dockerWorkspace no Details \u00b6 cfApiEndpoint \u00b6 Cloud Foundry API endpoint back to overview Scope Details Aliases cloudFoundry/apiEndpoint Type string Mandatory yes Default $PIPER_cfApiEndpoint (if set) Secret no Configuration scope \u2612 parameter \u2612 general \u2612 steps \u2612 stages Resource references none cfAsync \u00b6 Decides if the service key creation runs asynchronously back to overview Scope Details Aliases - Type bool Mandatory no Default true Possible values - true - false Secret no Configuration scope \u2612 parameter \u2612 general \u2612 steps \u2612 stages Resource references none cfOrg \u00b6 CF org back to overview Scope Details Aliases cloudFoundry/org Type string Mandatory yes Default $PIPER_cfOrg (if set) Secret no Configuration scope \u2612 parameter \u2612 general \u2612 steps \u2612 stages Resource references none cfServiceInstance \u00b6 Parameter for CloudFoundry Service Instance Name back to overview Scope Details Aliases cloudFoundry/serviceInstance Type string Mandatory yes Default $PIPER_cfServiceInstance (if set) Secret no Configuration scope \u2612 parameter \u2612 general \u2612 steps \u2612 stages Resource references none cfServiceKeyConfig \u00b6 Path to JSON config file path or JSON in-line string for Cloud Foundry Service Key creation back to overview Scope Details Aliases cloudFoundry/serviceKeyConfig Type string Mandatory no Default $PIPER_cfServiceKeyConfig (if set) Secret no Configuration scope \u2612 parameter \u2610 general \u2612 steps \u2612 stages Resource references none cfServiceKeyName \u00b6 Parameter for Service Key name for CloudFoundry Service Key to be created back to overview Scope Details Aliases - cloudFoundry/serviceKey - cloudFoundry/serviceKeyName - cfServiceKey Type string Mandatory yes Default $PIPER_cfServiceKeyName (if set) Secret no Configuration scope \u2612 parameter \u2612 general \u2612 steps \u2612 stages Resource references none cfSpace \u00b6 CF Space back to overview Scope Details Aliases cloudFoundry/space Type string Mandatory yes Default $PIPER_cfSpace (if set) Secret no Configuration scope \u2612 parameter \u2612 general \u2612 steps \u2612 stages Resource references none containerCommand \u00b6 Jenkins-specific: Used for proper environment setup. Kubernetes only: Allows to specify start command for container created with dockerImage parameter to overwrite Piper default (/usr/bin/tail -f /dev/null). back to overview Scope Details Aliases - Type string Mandatory no Default Secret no Configuration scope \u2612 parameter \u2612 general \u2612 steps \u2612 stages Resource references none containerShell \u00b6 Jenkins-specific: Used for proper environment setup. Allows to specify the shell to be executed for container with containerName. back to overview Scope Details Aliases - Type string Mandatory no Default Secret no Configuration scope \u2612 parameter \u2612 general \u2612 steps \u2612 stages Resource references none dockerEnvVars \u00b6 Environment variables to set in the container, e.g. [http_proxy: \"proxy:8080\"]. back to overview Scope Details Aliases - Type map[string]string Mandatory no Default Secret no Configuration scope \u2612 parameter \u2612 general \u2612 steps \u2612 stages Resource references none dockerImage \u00b6 Name of the docker image that should be used. If empty, Docker is not used and the command is executed directly on the Jenkins system. back to overview Scope Details Aliases - Type string Mandatory no Default ppiper/cf-cli:latest Secret no Configuration scope \u2612 parameter \u2612 general \u2612 steps \u2612 stages Resource references none dockerName \u00b6 Kubernetes only: Name of the container launching dockerImage. SideCar only: Name of the container in local network. back to overview Scope Details Aliases - Type string Mandatory no Default cf Secret no Configuration scope \u2612 parameter \u2612 general \u2612 steps \u2612 stages Resource references none dockerOptions \u00b6 Docker options to be set when starting the container. back to overview Scope Details Aliases - Type []string Mandatory no Default Secret no Configuration scope \u2612 parameter \u2612 general \u2612 steps \u2612 stages Resource references none dockerPullImage \u00b6 Set this to 'false' to bypass a docker image pull. Useful during development process. Allows testing of images which are available in the local registry only. back to overview Scope Details Aliases - Type bool Mandatory no Default true Possible values - true - false Secret no Configuration scope \u2612 parameter \u2612 general \u2612 steps \u2612 stages Resource references none dockerVolumeBind \u00b6 Jenkins-specific: Used for proper environment setup. Volumes that should be mounted into the docker container. back to overview Scope Details Aliases - Type map[string]string Mandatory no Default Secret no Configuration scope \u2612 parameter \u2612 general \u2612 steps \u2612 stages Resource references none dockerWorkspace \u00b6 Jenkins-specific: Used for proper environment setup. Kubernetes only: Specifies a dedicated user home directory for the container which will be passed as value for environment variable HOME . back to overview Scope Details Aliases - Type string Mandatory no Default Secret no Configuration scope \u2612 parameter \u2612 general \u2612 steps \u2612 stages Resource references none password \u00b6 User Password for CF User back to overview Scope Details Aliases - Type string Mandatory yes Default $PIPER_password (if set) Secret yes Configuration scope \u2612 parameter \u2610 general \u2612 steps \u2612 stages Resource references Jenkins credential id: id: cfCredentialsId reference to: password Vault resource: name: cloudfoundryVaultSecretName default value: cloudfoundry-$(org)-$(space) Vault paths: $(vaultPath)/cloudfoundry-$(org)-$(space) $(vaultBasePath)/$(vaultPipelineName)/cloudfoundry-$(org)-$(space) $(vaultBasePath)/GROUP-SECRETS/cloudfoundry-$(org)-$(space) script \u00b6 The common script environment of the Jenkinsfile running. Typically the reference to the script calling the pipeline step is provided with the this parameter, as in script: this . This allows the function to access the commonPipelineEnvironment for retrieving, e.g. configuration parameters. back to overview Scope Details Aliases - Type Jenkins Script Mandatory yes Default Secret no Configuration scope \u2610 parameter \u2610 general \u2610 steps \u2610 stages Resource references none username \u00b6 User or E-Mail for CF back to overview Scope Details Aliases - Type string Mandatory yes Default $PIPER_username (if set) Secret yes Configuration scope \u2612 parameter \u2610 general \u2612 steps \u2612 stages Resource references Jenkins credential id: id: cfCredentialsId reference to: username Vault resource: name: cloudfoundryVaultSecretName default value: cloudfoundry-$(org)-$(space) Vault paths: $(vaultPath)/cloudfoundry-$(org)-$(space) $(vaultBasePath)/$(vaultPipelineName)/cloudfoundry-$(org)-$(space) $(vaultBasePath)/GROUP-SECRETS/cloudfoundry-$(org)-$(space) verbose \u00b6 verbose output back to overview Scope Details Aliases - Type bool Mandatory no Default false Possible values - true - false Secret no Configuration scope \u2612 parameter \u2612 general \u2612 steps \u2612 stages Resource references none cfCredentialsId \u00b6 Jenkins 'Username with password' credentials ID containing user and password to authenticate to the Cloud Foundry API. back to overview Scope Details Aliases - Type string Configuration scope \u2612 parameter \u2612 general \u2612 steps \u2612 stages Examples \u00b6 The following examples will create a Service Key named \"myServiceKey\" for the Service Instance \"myServiceInstance\" in the provided Cloud Foundry Organization and Space. For the Service Key creation in these example, the serviceKeyConfig parameter is used. It will show the different ways of passing the JSON configuration, either via a string or the path to a file containing the JSON configuration. If you dont want to use a special configuration simply remove the parameter since it is optional. Create Service Key with JSON config file in Jenkinsfile \u00b6 This example covers the parameters for a Jenkinsfile when using the cloudFoundryCreateServiceKey step. It uses a serviceKeaConfig.json file with valid JSON objects for creating a Cloud Foundry Service Key. cloudFoundryCreateServiceKey ( cfApiEndpoint: 'https://test.server.com' , cfCredentialsId: 'cfCredentialsId' , cfOrg: 'cfOrg' , cfSpace: 'cfSpace' , cfServiceInstance: 'myServiceInstance' , cfServiceKeyName: 'myServiceKey' , cfServiceKeyConfig: 'serviceKeyConfig.json' , script: this , ) The JSON config file, e.g. serviceKeyConfig.json can look like this: { \"example\" : \"value\" , \"example\" : \"value\" } Create Service Key with JSON string in Jenkinsfile \u00b6 The following example covers the creation of a Cloud Foundry Service Key in a Jenkinsfile with using a JSON string as a config for the Service Key creation. If you use a Jenkinsfile for passing the parameter values you need to escape the double quotes in the JSON config string. cloudFoundryCreateServiceKey ( cfApiEndpoint: 'https://test.server.com' , cfCredentialsId: 'cfCredentialsId' , cfOrg: 'cfOrg' , cfSpace: 'cfSpace' , cfServiceInstance: 'myServiceInstance' , cfServiceKeyName: 'myServiceKey' , cfServiceKeyConfig: '{\\\"example\\\":\\\"value\\\",\\\"example\\\":\\\"value\\\"}' , script: this , ) Create Service Key with JSON string as parameter in .pipeline/config.yml file \u00b6 If you chose to provide a config.yml file you can provide the parameters including the values in this file. You only need to set the script parameter when calling the step: cloudFoundryCreateServiceKey ( script: this , ) The .pipeline/config.yml has to contain the following parameters accordingly: steps : cloudFoundryCreateServiceKey : cfApiEndpoint : 'https://test.server.com' cfOrg : 'testOrg' cfSpace : 'testSpace' cfServiceInstance : 'testInstance' cfServiceKeyName : 'myServiceKey' cfServiceKeyConfig : '{\"example\":\"value\",\"example\":\"value\"}' cfCredentialsId : 'cfCredentialsId' When using a .pipeline/config.yml file you don't need to escape the double quotes in the JSON config string. You can also pass the path to a JSON config file in the cfServiceKeyConfig parameter. Example: cfServiceKeyConfig: 'serviceKeyconfig.json'","title":"cloudFoundryCreateServiceKey"},{"location":"steps/cloudFoundryCreateServiceKey/#cloudfoundrycreateservicekey","text":"cloudFoundryCreateServiceKey","title":"cloudFoundryCreateServiceKey"},{"location":"steps/cloudFoundryCreateServiceKey/#description","text":"Create CloudFoundryServiceKey","title":"Description"},{"location":"steps/cloudFoundryCreateServiceKey/#usage","text":"We recommend to define values of step parameters via .pipeline/config.yml file . In this case, calling the step is essentially reduced to defining the step name. Calling the step can be done either in an orchestrator specific way (e.g. via a Jenkins library step) or on the command line. Jenkins Command Line library ( 'piper-lib-os' ) cloudFoundryCreateServiceKey script: this piper cloudFoundryCreateServiceKey","title":"Usage"},{"location":"steps/cloudFoundryCreateServiceKey/#prerequisites","text":"This step is for creating a Service Key for an existing Service in Cloud Foundry. Cloud Foundry API endpoint, Organization, Space, user and Service Instance are available Credentials have been configured in Jenkins with a dedicated Id Additionally you can set the optional serviceKeyConfig flag to configure the Service Key creation with your respective JSON configuration. The JSON configuration can either be a JSON or the path a dedicated JSON configuration file containing the JSON configuration. If you chose a dedicated config file, it must be stored in a file that must be referenced in the serviceKeyConfigFile flag. You must store the file in the same folder as your Jenkinsfile that starts the Pipeline in order for the Pipeline to be able to find the file. Most favourable SCM is Git.","title":"Prerequisites"},{"location":"steps/cloudFoundryCreateServiceKey/#parameters","text":"","title":"Parameters"},{"location":"steps/cloudFoundryCreateServiceKey/#overview-step","text":"Name Mandatory Additional information cfApiEndpoint yes cfOrg yes cfServiceInstance yes cfServiceKeyName yes cfSpace yes password (yes) pass via ENV, Vault or Jenkins credentials ( cfCredentialsId ) script (yes) reference to Jenkins main pipeline script username (yes) pass via ENV, Vault or Jenkins credentials ( cfCredentialsId ) cfAsync no cfServiceKeyConfig no verbose no activates debug output","title":"Overview - Step"},{"location":"steps/cloudFoundryCreateServiceKey/#overview-execution-environment","text":"Orchestrator-specific only These parameters are relevant for orchestrator usage and not considered when using the command line option. Name Mandatory Additional information containerCommand no containerShell no dockerEnvVars no dockerImage no dockerName no dockerOptions no dockerPullImage no dockerVolumeBind no dockerWorkspace no","title":"Overview - Execution Environment"},{"location":"steps/cloudFoundryCreateServiceKey/#details","text":"","title":"Details"},{"location":"steps/cloudFoundryCreateServiceKey/#cfapiendpoint","text":"Cloud Foundry API endpoint back to overview Scope Details Aliases cloudFoundry/apiEndpoint Type string Mandatory yes Default $PIPER_cfApiEndpoint (if set) Secret no Configuration scope \u2612 parameter \u2612 general \u2612 steps \u2612 stages Resource references none","title":"cfApiEndpoint"},{"location":"steps/cloudFoundryCreateServiceKey/#cfasync","text":"Decides if the service key creation runs asynchronously back to overview Scope Details Aliases - Type bool Mandatory no Default true Possible values - true - false Secret no Configuration scope \u2612 parameter \u2612 general \u2612 steps \u2612 stages Resource references none","title":"cfAsync"},{"location":"steps/cloudFoundryCreateServiceKey/#cforg","text":"CF org back to overview Scope Details Aliases cloudFoundry/org Type string Mandatory yes Default $PIPER_cfOrg (if set) Secret no Configuration scope \u2612 parameter \u2612 general \u2612 steps \u2612 stages Resource references none","title":"cfOrg"},{"location":"steps/cloudFoundryCreateServiceKey/#cfserviceinstance","text":"Parameter for CloudFoundry Service Instance Name back to overview Scope Details Aliases cloudFoundry/serviceInstance Type string Mandatory yes Default $PIPER_cfServiceInstance (if set) Secret no Configuration scope \u2612 parameter \u2612 general \u2612 steps \u2612 stages Resource references none","title":"cfServiceInstance"},{"location":"steps/cloudFoundryCreateServiceKey/#cfservicekeyconfig","text":"Path to JSON config file path or JSON in-line string for Cloud Foundry Service Key creation back to overview Scope Details Aliases cloudFoundry/serviceKeyConfig Type string Mandatory no Default $PIPER_cfServiceKeyConfig (if set) Secret no Configuration scope \u2612 parameter \u2610 general \u2612 steps \u2612 stages Resource references none","title":"cfServiceKeyConfig"},{"location":"steps/cloudFoundryCreateServiceKey/#cfservicekeyname","text":"Parameter for Service Key name for CloudFoundry Service Key to be created back to overview Scope Details Aliases - cloudFoundry/serviceKey - cloudFoundry/serviceKeyName - cfServiceKey Type string Mandatory yes Default $PIPER_cfServiceKeyName (if set) Secret no Configuration scope \u2612 parameter \u2612 general \u2612 steps \u2612 stages Resource references none","title":"cfServiceKeyName"},{"location":"steps/cloudFoundryCreateServiceKey/#cfspace","text":"CF Space back to overview Scope Details Aliases cloudFoundry/space Type string Mandatory yes Default $PIPER_cfSpace (if set) Secret no Configuration scope \u2612 parameter \u2612 general \u2612 steps \u2612 stages Resource references none","title":"cfSpace"},{"location":"steps/cloudFoundryCreateServiceKey/#containercommand","text":"Jenkins-specific: Used for proper environment setup. Kubernetes only: Allows to specify start command for container created with dockerImage parameter to overwrite Piper default (/usr/bin/tail -f /dev/null). back to overview Scope Details Aliases - Type string Mandatory no Default Secret no Configuration scope \u2612 parameter \u2612 general \u2612 steps \u2612 stages Resource references none","title":"containerCommand"},{"location":"steps/cloudFoundryCreateServiceKey/#containershell","text":"Jenkins-specific: Used for proper environment setup. Allows to specify the shell to be executed for container with containerName. back to overview Scope Details Aliases - Type string Mandatory no Default Secret no Configuration scope \u2612 parameter \u2612 general \u2612 steps \u2612 stages Resource references none","title":"containerShell"},{"location":"steps/cloudFoundryCreateServiceKey/#dockerenvvars","text":"Environment variables to set in the container, e.g. [http_proxy: \"proxy:8080\"]. back to overview Scope Details Aliases - Type map[string]string Mandatory no Default Secret no Configuration scope \u2612 parameter \u2612 general \u2612 steps \u2612 stages Resource references none","title":"dockerEnvVars"},{"location":"steps/cloudFoundryCreateServiceKey/#dockerimage","text":"Name of the docker image that should be used. If empty, Docker is not used and the command is executed directly on the Jenkins system. back to overview Scope Details Aliases - Type string Mandatory no Default ppiper/cf-cli:latest Secret no Configuration scope \u2612 parameter \u2612 general \u2612 steps \u2612 stages Resource references none","title":"dockerImage"},{"location":"steps/cloudFoundryCreateServiceKey/#dockername","text":"Kubernetes only: Name of the container launching dockerImage. SideCar only: Name of the container in local network. back to overview Scope Details Aliases - Type string Mandatory no Default cf Secret no Configuration scope \u2612 parameter \u2612 general \u2612 steps \u2612 stages Resource references none","title":"dockerName"},{"location":"steps/cloudFoundryCreateServiceKey/#dockeroptions","text":"Docker options to be set when starting the container. back to overview Scope Details Aliases - Type []string Mandatory no Default Secret no Configuration scope \u2612 parameter \u2612 general \u2612 steps \u2612 stages Resource references none","title":"dockerOptions"},{"location":"steps/cloudFoundryCreateServiceKey/#dockerpullimage","text":"Set this to 'false' to bypass a docker image pull. Useful during development process. Allows testing of images which are available in the local registry only. back to overview Scope Details Aliases - Type bool Mandatory no Default true Possible values - true - false Secret no Configuration scope \u2612 parameter \u2612 general \u2612 steps \u2612 stages Resource references none","title":"dockerPullImage"},{"location":"steps/cloudFoundryCreateServiceKey/#dockervolumebind","text":"Jenkins-specific: Used for proper environment setup. Volumes that should be mounted into the docker container. back to overview Scope Details Aliases - Type map[string]string Mandatory no Default Secret no Configuration scope \u2612 parameter \u2612 general \u2612 steps \u2612 stages Resource references none","title":"dockerVolumeBind"},{"location":"steps/cloudFoundryCreateServiceKey/#dockerworkspace","text":"Jenkins-specific: Used for proper environment setup. Kubernetes only: Specifies a dedicated user home directory for the container which will be passed as value for environment variable HOME . back to overview Scope Details Aliases - Type string Mandatory no Default Secret no Configuration scope \u2612 parameter \u2612 general \u2612 steps \u2612 stages Resource references none","title":"dockerWorkspace"},{"location":"steps/cloudFoundryCreateServiceKey/#password","text":"User Password for CF User back to overview Scope Details Aliases - Type string Mandatory yes Default $PIPER_password (if set) Secret yes Configuration scope \u2612 parameter \u2610 general \u2612 steps \u2612 stages Resource references Jenkins credential id: id: cfCredentialsId reference to: password Vault resource: name: cloudfoundryVaultSecretName default value: cloudfoundry-$(org)-$(space) Vault paths: $(vaultPath)/cloudfoundry-$(org)-$(space) $(vaultBasePath)/$(vaultPipelineName)/cloudfoundry-$(org)-$(space) $(vaultBasePath)/GROUP-SECRETS/cloudfoundry-$(org)-$(space)","title":"password"},{"location":"steps/cloudFoundryCreateServiceKey/#script","text":"The common script environment of the Jenkinsfile running. Typically the reference to the script calling the pipeline step is provided with the this parameter, as in script: this . This allows the function to access the commonPipelineEnvironment for retrieving, e.g. configuration parameters. back to overview Scope Details Aliases - Type Jenkins Script Mandatory yes Default Secret no Configuration scope \u2610 parameter \u2610 general \u2610 steps \u2610 stages Resource references none","title":"script"},{"location":"steps/cloudFoundryCreateServiceKey/#username","text":"User or E-Mail for CF back to overview Scope Details Aliases - Type string Mandatory yes Default $PIPER_username (if set) Secret yes Configuration scope \u2612 parameter \u2610 general \u2612 steps \u2612 stages Resource references Jenkins credential id: id: cfCredentialsId reference to: username Vault resource: name: cloudfoundryVaultSecretName default value: cloudfoundry-$(org)-$(space) Vault paths: $(vaultPath)/cloudfoundry-$(org)-$(space) $(vaultBasePath)/$(vaultPipelineName)/cloudfoundry-$(org)-$(space) $(vaultBasePath)/GROUP-SECRETS/cloudfoundry-$(org)-$(space)","title":"username"},{"location":"steps/cloudFoundryCreateServiceKey/#verbose","text":"verbose output back to overview Scope Details Aliases - Type bool Mandatory no Default false Possible values - true - false Secret no Configuration scope \u2612 parameter \u2612 general \u2612 steps \u2612 stages Resource references none","title":"verbose"},{"location":"steps/cloudFoundryCreateServiceKey/#cfcredentialsid","text":"Jenkins 'Username with password' credentials ID containing user and password to authenticate to the Cloud Foundry API. back to overview Scope Details Aliases - Type string Configuration scope \u2612 parameter \u2612 general \u2612 steps \u2612 stages","title":"cfCredentialsId"},{"location":"steps/cloudFoundryCreateServiceKey/#examples","text":"The following examples will create a Service Key named \"myServiceKey\" for the Service Instance \"myServiceInstance\" in the provided Cloud Foundry Organization and Space. For the Service Key creation in these example, the serviceKeyConfig parameter is used. It will show the different ways of passing the JSON configuration, either via a string or the path to a file containing the JSON configuration. If you dont want to use a special configuration simply remove the parameter since it is optional.","title":"Examples"},{"location":"steps/cloudFoundryCreateServiceKey/#create-service-key-with-json-config-file-in-jenkinsfile","text":"This example covers the parameters for a Jenkinsfile when using the cloudFoundryCreateServiceKey step. It uses a serviceKeaConfig.json file with valid JSON objects for creating a Cloud Foundry Service Key. cloudFoundryCreateServiceKey ( cfApiEndpoint: 'https://test.server.com' , cfCredentialsId: 'cfCredentialsId' , cfOrg: 'cfOrg' , cfSpace: 'cfSpace' , cfServiceInstance: 'myServiceInstance' , cfServiceKeyName: 'myServiceKey' , cfServiceKeyConfig: 'serviceKeyConfig.json' , script: this , ) The JSON config file, e.g. serviceKeyConfig.json can look like this: { \"example\" : \"value\" , \"example\" : \"value\" }","title":"Create Service Key with JSON config file in Jenkinsfile"},{"location":"steps/cloudFoundryCreateServiceKey/#create-service-key-with-json-string-in-jenkinsfile","text":"The following example covers the creation of a Cloud Foundry Service Key in a Jenkinsfile with using a JSON string as a config for the Service Key creation. If you use a Jenkinsfile for passing the parameter values you need to escape the double quotes in the JSON config string. cloudFoundryCreateServiceKey ( cfApiEndpoint: 'https://test.server.com' , cfCredentialsId: 'cfCredentialsId' , cfOrg: 'cfOrg' , cfSpace: 'cfSpace' , cfServiceInstance: 'myServiceInstance' , cfServiceKeyName: 'myServiceKey' , cfServiceKeyConfig: '{\\\"example\\\":\\\"value\\\",\\\"example\\\":\\\"value\\\"}' , script: this , )","title":"Create Service Key with JSON string in Jenkinsfile"},{"location":"steps/cloudFoundryCreateServiceKey/#create-service-key-with-json-string-as-parameter-in-pipelineconfigyml-file","text":"If you chose to provide a config.yml file you can provide the parameters including the values in this file. You only need to set the script parameter when calling the step: cloudFoundryCreateServiceKey ( script: this , ) The .pipeline/config.yml has to contain the following parameters accordingly: steps : cloudFoundryCreateServiceKey : cfApiEndpoint : 'https://test.server.com' cfOrg : 'testOrg' cfSpace : 'testSpace' cfServiceInstance : 'testInstance' cfServiceKeyName : 'myServiceKey' cfServiceKeyConfig : '{\"example\":\"value\",\"example\":\"value\"}' cfCredentialsId : 'cfCredentialsId' When using a .pipeline/config.yml file you don't need to escape the double quotes in the JSON config string. You can also pass the path to a JSON config file in the cfServiceKeyConfig parameter. Example: cfServiceKeyConfig: 'serviceKeyconfig.json'","title":"Create Service Key with JSON string as parameter in .pipeline/config.yml file"},{"location":"steps/cloudFoundryCreateSpace/","text":"cloudFoundryCreateSpace \u00b6 Creates a user defined space in Cloud Foundry Description \u00b6 Creates a cf space in Cloud Foundry Mandatory: * Cloud Foundry API endpoint, Organization, name of the Cf space to be created Usage \u00b6 We recommend to define values of step parameters via .pipeline/config.yml file . In this case, calling the step is essentially reduced to defining the step name. Calling the step can be done either in an orchestrator specific way (e.g. via a Jenkins library step) or on the command line. Jenkins Command Line library ( 'piper-lib-os' ) cloudFoundryCreateSpace script: this piper cloudFoundryCreateSpace Prerequisites \u00b6 You have a user for the SAP BTP Cloud Foundry environment Credentials have been configured in Jenkins with a dedicated Id Parameters \u00b6 Overview - Step \u00b6 Name Mandatory Additional information cfOrg yes cfSpace yes password (yes) pass via ENV or Jenkins credentials ( cfCredentialsId ) script (yes) reference to Jenkins main pipeline script username (yes) pass via ENV or Jenkins credentials ( cfCredentialsId ) cfApiEndpoint no verbose no activates debug output Overview - Execution Environment \u00b6 Orchestrator-specific only These parameters are relevant for orchestrator usage and not considered when using the command line option. Name Mandatory Additional information containerCommand no containerShell no dockerEnvVars no dockerImage no dockerName no dockerOptions no dockerPullImage no dockerVolumeBind no dockerWorkspace no stashContent no Details \u00b6 cfApiEndpoint \u00b6 Cloud Foundry API endpoint back to overview Scope Details Aliases cloudFoundry/apiEndpoint Type string Mandatory no Default https://api.cf.eu10.hana.ondemand.com Secret no Configuration scope \u2612 parameter \u2612 general \u2612 steps \u2612 stages Resource references none cfOrg \u00b6 Cloud Foundry org back to overview Scope Details Aliases cloudFoundry/org Type string Mandatory yes Default $PIPER_cfOrg (if set) Secret no Configuration scope \u2612 parameter \u2612 general \u2612 steps \u2612 stages Resource references none cfSpace \u00b6 The name of the Cloud Foundry Space to be created back to overview Scope Details Aliases cloudFoundry/space Type string Mandatory yes Default $PIPER_cfSpace (if set) Secret no Configuration scope \u2612 parameter \u2612 general \u2612 steps \u2612 stages Resource references none containerCommand \u00b6 Jenkins-specific: Used for proper environment setup. Kubernetes only: Allows to specify start command for container created with dockerImage parameter to overwrite Piper default (/usr/bin/tail -f /dev/null). back to overview Scope Details Aliases - Type string Mandatory no Default Secret no Configuration scope \u2612 parameter \u2612 general \u2612 steps \u2612 stages Resource references none containerShell \u00b6 Jenkins-specific: Used for proper environment setup. Allows to specify the shell to be executed for container with containerName. back to overview Scope Details Aliases - Type string Mandatory no Default Secret no Configuration scope \u2612 parameter \u2612 general \u2612 steps \u2612 stages Resource references none dockerEnvVars \u00b6 Environment variables to set in the container, e.g. [http_proxy: \"proxy:8080\"]. back to overview Scope Details Aliases - Type map[string]string Mandatory no Default Secret no Configuration scope \u2612 parameter \u2612 general \u2612 steps \u2612 stages Resource references none dockerImage \u00b6 Name of the docker image that should be used. If empty, Docker is not used and the command is executed directly on the Jenkins system. back to overview Scope Details Aliases - Type string Mandatory no Default ppiper/cf-cli:latest Secret no Configuration scope \u2612 parameter \u2612 general \u2612 steps \u2612 stages Resource references none dockerName \u00b6 Kubernetes only: Name of the container launching dockerImage. SideCar only: Name of the container in local network. back to overview Scope Details Aliases - Type string Mandatory no Default cf Secret no Configuration scope \u2612 parameter \u2612 general \u2612 steps \u2612 stages Resource references none dockerOptions \u00b6 Docker options to be set when starting the container. back to overview Scope Details Aliases - Type []string Mandatory no Default Secret no Configuration scope \u2612 parameter \u2612 general \u2612 steps \u2612 stages Resource references none dockerPullImage \u00b6 Set this to 'false' to bypass a docker image pull. Useful during development process. Allows testing of images which are available in the local registry only. back to overview Scope Details Aliases - Type bool Mandatory no Default true Possible values - true - false Secret no Configuration scope \u2612 parameter \u2612 general \u2612 steps \u2612 stages Resource references none dockerVolumeBind \u00b6 Jenkins-specific: Used for proper environment setup. Volumes that should be mounted into the docker container. back to overview Scope Details Aliases - Type map[string]string Mandatory no Default Secret no Configuration scope \u2612 parameter \u2612 general \u2612 steps \u2612 stages Resource references none dockerWorkspace \u00b6 Jenkins-specific: Used for proper environment setup. Kubernetes only: Specifies a dedicated user home directory for the container which will be passed as value for environment variable HOME . back to overview Scope Details Aliases - Type string Mandatory no Default Secret no Configuration scope \u2612 parameter \u2612 general \u2612 steps \u2612 stages Resource references none password \u00b6 Password for Cloud Foundry User back to overview Scope Details Aliases - Type string Mandatory yes Default $PIPER_password (if set) Secret yes Configuration scope \u2612 parameter \u2610 general \u2612 steps \u2612 stages Resource references Jenkins credential id: id: cfCredentialsId reference to: password script \u00b6 The common script environment of the Jenkinsfile running. Typically the reference to the script calling the pipeline step is provided with the this parameter, as in script: this . This allows the function to access the commonPipelineEnvironment for retrieving, e.g. configuration parameters. back to overview Scope Details Aliases - Type Jenkins Script Mandatory yes Default Secret no Configuration scope \u2610 parameter \u2610 general \u2610 steps \u2610 stages Resource references none stashContent \u00b6 Jenkins-specific: Used for proper environment setup. Specific stashes that should be considered for the step execution. back to overview Scope Details Aliases - Type []string Mandatory no Default - deployDescriptor Secret no Configuration scope \u2612 parameter \u2612 general \u2612 steps \u2612 stages Resource references none username \u00b6 User or E-Mail for CF back to overview Scope Details Aliases - Type string Mandatory yes Default $PIPER_username (if set) Secret yes Configuration scope \u2612 parameter \u2610 general \u2612 steps \u2612 stages Resource references Jenkins credential id: id: cfCredentialsId reference to: username verbose \u00b6 verbose output back to overview Scope Details Aliases - Type bool Mandatory no Default false Possible values - true - false Secret no Configuration scope \u2612 parameter \u2612 general \u2612 steps \u2612 stages Resource references none cfCredentialsId \u00b6 Jenkins credentials ID containing user and password to authenticate to the Cloud Foundry API back to overview Scope Details Aliases cloudFoundry/credentialsId Type string Configuration scope \u2612 parameter \u2612 general \u2612 steps \u2612 stages Example \u00b6 Space Creation in Cloud Foundry with a simple example \u00b6 The following example creates an user defined space in a Cloud Foundry. You can store the credentials in Jenkins and use the cfCredentialsId parameter to authenticate to Cloud Foundry. This can be done accordingly: cloudFoundryCreateSpace ( cfApiEndpoint : 'https://test.server.com' , cfOrg : 'cfOrg' , cfSpace: 'cfSpace' , //Name of the cf space to be created cfCredentialsId: 'cfCredentialsId' , script: this , )","title":"cloudFoundryCreateSpace"},{"location":"steps/cloudFoundryCreateSpace/#cloudfoundrycreatespace","text":"Creates a user defined space in Cloud Foundry","title":"cloudFoundryCreateSpace"},{"location":"steps/cloudFoundryCreateSpace/#description","text":"Creates a cf space in Cloud Foundry Mandatory: * Cloud Foundry API endpoint, Organization, name of the Cf space to be created","title":"Description"},{"location":"steps/cloudFoundryCreateSpace/#usage","text":"We recommend to define values of step parameters via .pipeline/config.yml file . In this case, calling the step is essentially reduced to defining the step name. Calling the step can be done either in an orchestrator specific way (e.g. via a Jenkins library step) or on the command line. Jenkins Command Line library ( 'piper-lib-os' ) cloudFoundryCreateSpace script: this piper cloudFoundryCreateSpace","title":"Usage"},{"location":"steps/cloudFoundryCreateSpace/#prerequisites","text":"You have a user for the SAP BTP Cloud Foundry environment Credentials have been configured in Jenkins with a dedicated Id","title":"Prerequisites"},{"location":"steps/cloudFoundryCreateSpace/#parameters","text":"","title":"Parameters"},{"location":"steps/cloudFoundryCreateSpace/#overview-step","text":"Name Mandatory Additional information cfOrg yes cfSpace yes password (yes) pass via ENV or Jenkins credentials ( cfCredentialsId ) script (yes) reference to Jenkins main pipeline script username (yes) pass via ENV or Jenkins credentials ( cfCredentialsId ) cfApiEndpoint no verbose no activates debug output","title":"Overview - Step"},{"location":"steps/cloudFoundryCreateSpace/#overview-execution-environment","text":"Orchestrator-specific only These parameters are relevant for orchestrator usage and not considered when using the command line option. Name Mandatory Additional information containerCommand no containerShell no dockerEnvVars no dockerImage no dockerName no dockerOptions no dockerPullImage no dockerVolumeBind no dockerWorkspace no stashContent no","title":"Overview - Execution Environment"},{"location":"steps/cloudFoundryCreateSpace/#details","text":"","title":"Details"},{"location":"steps/cloudFoundryCreateSpace/#cfapiendpoint","text":"Cloud Foundry API endpoint back to overview Scope Details Aliases cloudFoundry/apiEndpoint Type string Mandatory no Default https://api.cf.eu10.hana.ondemand.com Secret no Configuration scope \u2612 parameter \u2612 general \u2612 steps \u2612 stages Resource references none","title":"cfApiEndpoint"},{"location":"steps/cloudFoundryCreateSpace/#cforg","text":"Cloud Foundry org back to overview Scope Details Aliases cloudFoundry/org Type string Mandatory yes Default $PIPER_cfOrg (if set) Secret no Configuration scope \u2612 parameter \u2612 general \u2612 steps \u2612 stages Resource references none","title":"cfOrg"},{"location":"steps/cloudFoundryCreateSpace/#cfspace","text":"The name of the Cloud Foundry Space to be created back to overview Scope Details Aliases cloudFoundry/space Type string Mandatory yes Default $PIPER_cfSpace (if set) Secret no Configuration scope \u2612 parameter \u2612 general \u2612 steps \u2612 stages Resource references none","title":"cfSpace"},{"location":"steps/cloudFoundryCreateSpace/#containercommand","text":"Jenkins-specific: Used for proper environment setup. Kubernetes only: Allows to specify start command for container created with dockerImage parameter to overwrite Piper default (/usr/bin/tail -f /dev/null). back to overview Scope Details Aliases - Type string Mandatory no Default Secret no Configuration scope \u2612 parameter \u2612 general \u2612 steps \u2612 stages Resource references none","title":"containerCommand"},{"location":"steps/cloudFoundryCreateSpace/#containershell","text":"Jenkins-specific: Used for proper environment setup. Allows to specify the shell to be executed for container with containerName. back to overview Scope Details Aliases - Type string Mandatory no Default Secret no Configuration scope \u2612 parameter \u2612 general \u2612 steps \u2612 stages Resource references none","title":"containerShell"},{"location":"steps/cloudFoundryCreateSpace/#dockerenvvars","text":"Environment variables to set in the container, e.g. [http_proxy: \"proxy:8080\"]. back to overview Scope Details Aliases - Type map[string]string Mandatory no Default Secret no Configuration scope \u2612 parameter \u2612 general \u2612 steps \u2612 stages Resource references none","title":"dockerEnvVars"},{"location":"steps/cloudFoundryCreateSpace/#dockerimage","text":"Name of the docker image that should be used. If empty, Docker is not used and the command is executed directly on the Jenkins system. back to overview Scope Details Aliases - Type string Mandatory no Default ppiper/cf-cli:latest Secret no Configuration scope \u2612 parameter \u2612 general \u2612 steps \u2612 stages Resource references none","title":"dockerImage"},{"location":"steps/cloudFoundryCreateSpace/#dockername","text":"Kubernetes only: Name of the container launching dockerImage. SideCar only: Name of the container in local network. back to overview Scope Details Aliases - Type string Mandatory no Default cf Secret no Configuration scope \u2612 parameter \u2612 general \u2612 steps \u2612 stages Resource references none","title":"dockerName"},{"location":"steps/cloudFoundryCreateSpace/#dockeroptions","text":"Docker options to be set when starting the container. back to overview Scope Details Aliases - Type []string Mandatory no Default Secret no Configuration scope \u2612 parameter \u2612 general \u2612 steps \u2612 stages Resource references none","title":"dockerOptions"},{"location":"steps/cloudFoundryCreateSpace/#dockerpullimage","text":"Set this to 'false' to bypass a docker image pull. Useful during development process. Allows testing of images which are available in the local registry only. back to overview Scope Details Aliases - Type bool Mandatory no Default true Possible values - true - false Secret no Configuration scope \u2612 parameter \u2612 general \u2612 steps \u2612 stages Resource references none","title":"dockerPullImage"},{"location":"steps/cloudFoundryCreateSpace/#dockervolumebind","text":"Jenkins-specific: Used for proper environment setup. Volumes that should be mounted into the docker container. back to overview Scope Details Aliases - Type map[string]string Mandatory no Default Secret no Configuration scope \u2612 parameter \u2612 general \u2612 steps \u2612 stages Resource references none","title":"dockerVolumeBind"},{"location":"steps/cloudFoundryCreateSpace/#dockerworkspace","text":"Jenkins-specific: Used for proper environment setup. Kubernetes only: Specifies a dedicated user home directory for the container which will be passed as value for environment variable HOME . back to overview Scope Details Aliases - Type string Mandatory no Default Secret no Configuration scope \u2612 parameter \u2612 general \u2612 steps \u2612 stages Resource references none","title":"dockerWorkspace"},{"location":"steps/cloudFoundryCreateSpace/#password","text":"Password for Cloud Foundry User back to overview Scope Details Aliases - Type string Mandatory yes Default $PIPER_password (if set) Secret yes Configuration scope \u2612 parameter \u2610 general \u2612 steps \u2612 stages Resource references Jenkins credential id: id: cfCredentialsId reference to: password","title":"password"},{"location":"steps/cloudFoundryCreateSpace/#script","text":"The common script environment of the Jenkinsfile running. Typically the reference to the script calling the pipeline step is provided with the this parameter, as in script: this . This allows the function to access the commonPipelineEnvironment for retrieving, e.g. configuration parameters. back to overview Scope Details Aliases - Type Jenkins Script Mandatory yes Default Secret no Configuration scope \u2610 parameter \u2610 general \u2610 steps \u2610 stages Resource references none","title":"script"},{"location":"steps/cloudFoundryCreateSpace/#stashcontent","text":"Jenkins-specific: Used for proper environment setup. Specific stashes that should be considered for the step execution. back to overview Scope Details Aliases - Type []string Mandatory no Default - deployDescriptor Secret no Configuration scope \u2612 parameter \u2612 general \u2612 steps \u2612 stages Resource references none","title":"stashContent"},{"location":"steps/cloudFoundryCreateSpace/#username","text":"User or E-Mail for CF back to overview Scope Details Aliases - Type string Mandatory yes Default $PIPER_username (if set) Secret yes Configuration scope \u2612 parameter \u2610 general \u2612 steps \u2612 stages Resource references Jenkins credential id: id: cfCredentialsId reference to: username","title":"username"},{"location":"steps/cloudFoundryCreateSpace/#verbose","text":"verbose output back to overview Scope Details Aliases - Type bool Mandatory no Default false Possible values - true - false Secret no Configuration scope \u2612 parameter \u2612 general \u2612 steps \u2612 stages Resource references none","title":"verbose"},{"location":"steps/cloudFoundryCreateSpace/#cfcredentialsid","text":"Jenkins credentials ID containing user and password to authenticate to the Cloud Foundry API back to overview Scope Details Aliases cloudFoundry/credentialsId Type string Configuration scope \u2612 parameter \u2612 general \u2612 steps \u2612 stages","title":"cfCredentialsId"},{"location":"steps/cloudFoundryCreateSpace/#example","text":"","title":"Example"},{"location":"steps/cloudFoundryCreateSpace/#space-creation-in-cloud-foundry-with-a-simple-example","text":"The following example creates an user defined space in a Cloud Foundry. You can store the credentials in Jenkins and use the cfCredentialsId parameter to authenticate to Cloud Foundry. This can be done accordingly: cloudFoundryCreateSpace ( cfApiEndpoint : 'https://test.server.com' , cfOrg : 'cfOrg' , cfSpace: 'cfSpace' , //Name of the cf space to be created cfCredentialsId: 'cfCredentialsId' , script: this , )","title":"Space Creation in Cloud Foundry with a simple example"},{"location":"steps/cloudFoundryDeleteService/","text":"cloudFoundryDeleteService \u00b6 DeleteCloudFoundryService Description \u00b6 Delete CloudFoundryService Usage \u00b6 We recommend to define values of step parameters via .pipeline/config.yml file . In this case, calling the step is essentially reduced to defining the step name. Calling the step can be done either in an orchestrator specific way (e.g. via a Jenkins library step) or on the command line. Jenkins Command Line library ( 'piper-lib-os' ) cloudFoundryDeleteService script: this piper cloudFoundryDeleteService Prerequisites \u00b6 This step is for deleting an existing service on Cloud Foundry. You need to provide the Cloud Foundry API Endpoint, the Organisation as well as the Space and the respective Service Instance Name you want to delete. Furthermore you will need to provide the Cloud Foundry Login Credentials, which must be stored in the Jenkins Configuration. Additionally you can set the cfDeleteServiceKeys flag for deleting all Service Keys that belong to the respective Service. Parameters \u00b6 Overview - Step \u00b6 Name Mandatory Additional information cfApiEndpoint yes cfOrg yes cfServiceInstance yes cfSpace yes password (yes) pass via ENV, Vault or Jenkins credentials ( cfCredentialsId ) script (yes) reference to Jenkins main pipeline script username (yes) pass via ENV, Vault or Jenkins credentials ( cfCredentialsId ) cfDeleteServiceKeys no verbose no activates debug output Overview - Execution Environment \u00b6 Orchestrator-specific only These parameters are relevant for orchestrator usage and not considered when using the command line option. Name Mandatory Additional information containerCommand no containerShell no dockerEnvVars no dockerImage no dockerName no dockerOptions no dockerPullImage no dockerVolumeBind no dockerWorkspace no Details \u00b6 cfApiEndpoint \u00b6 Cloud Foundry API endpoint back to overview Scope Details Aliases cloudFoundry/apiEndpoint Type string Mandatory yes Default $PIPER_cfApiEndpoint (if set) Secret no Configuration scope \u2612 parameter \u2612 general \u2612 steps \u2612 stages Resource references none cfDeleteServiceKeys \u00b6 Parameter to force deletion of Cloud Foundry Service Keys back to overview Scope Details Aliases cloudFoundry/cfDeleteServiceKeys Type bool Mandatory no Default false Possible values - true - false Secret no Configuration scope \u2612 parameter \u2610 general \u2612 steps \u2612 stages Resource references none cfOrg \u00b6 CF org back to overview Scope Details Aliases cloudFoundry/org Type string Mandatory yes Default $PIPER_cfOrg (if set) Secret no Configuration scope \u2612 parameter \u2612 general \u2612 steps \u2612 stages Resource references none cfServiceInstance \u00b6 Parameter of ServiceInstance Name to delete CloudFoundry Service back to overview Scope Details Aliases cloudFoundry/serviceInstance Type string Mandatory yes Default $PIPER_cfServiceInstance (if set) Secret no Configuration scope \u2612 parameter \u2612 general \u2612 steps \u2612 stages Resource references none cfSpace \u00b6 CF Space back to overview Scope Details Aliases cloudFoundry/space Type string Mandatory yes Default $PIPER_cfSpace (if set) Secret no Configuration scope \u2612 parameter \u2612 general \u2612 steps \u2612 stages Resource references none containerCommand \u00b6 Jenkins-specific: Used for proper environment setup. Kubernetes only: Allows to specify start command for container created with dockerImage parameter to overwrite Piper default (/usr/bin/tail -f /dev/null). back to overview Scope Details Aliases - Type string Mandatory no Default Secret no Configuration scope \u2612 parameter \u2612 general \u2612 steps \u2612 stages Resource references none containerShell \u00b6 Jenkins-specific: Used for proper environment setup. Allows to specify the shell to be executed for container with containerName. back to overview Scope Details Aliases - Type string Mandatory no Default Secret no Configuration scope \u2612 parameter \u2612 general \u2612 steps \u2612 stages Resource references none dockerEnvVars \u00b6 Environment variables to set in the container, e.g. [http_proxy: \"proxy:8080\"]. back to overview Scope Details Aliases - Type map[string]string Mandatory no Default Secret no Configuration scope \u2612 parameter \u2612 general \u2612 steps \u2612 stages Resource references none dockerImage \u00b6 Name of the docker image that should be used. If empty, Docker is not used and the command is executed directly on the Jenkins system. back to overview Scope Details Aliases - Type string Mandatory no Default ppiper/cf-cli:latest Secret no Configuration scope \u2612 parameter \u2612 general \u2612 steps \u2612 stages Resource references none dockerName \u00b6 Kubernetes only: Name of the container launching dockerImage. SideCar only: Name of the container in local network. back to overview Scope Details Aliases - Type string Mandatory no Default cf Secret no Configuration scope \u2612 parameter \u2612 general \u2612 steps \u2612 stages Resource references none dockerOptions \u00b6 Docker options to be set when starting the container. back to overview Scope Details Aliases - Type []string Mandatory no Default Secret no Configuration scope \u2612 parameter \u2612 general \u2612 steps \u2612 stages Resource references none dockerPullImage \u00b6 Set this to 'false' to bypass a docker image pull. Useful during development process. Allows testing of images which are available in the local registry only. back to overview Scope Details Aliases - Type bool Mandatory no Default true Possible values - true - false Secret no Configuration scope \u2612 parameter \u2612 general \u2612 steps \u2612 stages Resource references none dockerVolumeBind \u00b6 Jenkins-specific: Used for proper environment setup. Volumes that should be mounted into the docker container. back to overview Scope Details Aliases - Type map[string]string Mandatory no Default Secret no Configuration scope \u2612 parameter \u2612 general \u2612 steps \u2612 stages Resource references none dockerWorkspace \u00b6 Jenkins-specific: Used for proper environment setup. Kubernetes only: Specifies a dedicated user home directory for the container which will be passed as value for environment variable HOME . back to overview Scope Details Aliases - Type string Mandatory no Default /home/piper Secret no Configuration scope \u2612 parameter \u2612 general \u2612 steps \u2612 stages Resource references none password \u00b6 User Password for CF User back to overview Scope Details Aliases - Type string Mandatory yes Default $PIPER_password (if set) Secret yes Configuration scope \u2612 parameter \u2610 general \u2612 steps \u2612 stages Resource references Jenkins credential id: id: cfCredentialsId reference to: password Vault resource: name: cloudfoundryVaultSecretName default value: cloudfoundry-$(org)-$(space) Vault paths: $(vaultPath)/cloudfoundry-$(org)-$(space) $(vaultBasePath)/$(vaultPipelineName)/cloudfoundry-$(org)-$(space) $(vaultBasePath)/GROUP-SECRETS/cloudfoundry-$(org)-$(space) script \u00b6 The common script environment of the Jenkinsfile running. Typically the reference to the script calling the pipeline step is provided with the this parameter, as in script: this . This allows the function to access the commonPipelineEnvironment for retrieving, e.g. configuration parameters. back to overview Scope Details Aliases - Type Jenkins Script Mandatory yes Default Secret no Configuration scope \u2610 parameter \u2610 general \u2610 steps \u2610 stages Resource references none username \u00b6 User or E-Mail for CF back to overview Scope Details Aliases - Type string Mandatory yes Default $PIPER_username (if set) Secret yes Configuration scope \u2612 parameter \u2610 general \u2612 steps \u2612 stages Resource references Jenkins credential id: id: cfCredentialsId reference to: username Vault resource: name: cloudfoundryVaultSecretName default value: cloudfoundry-$(org)-$(space) Vault paths: $(vaultPath)/cloudfoundry-$(org)-$(space) $(vaultBasePath)/$(vaultPipelineName)/cloudfoundry-$(org)-$(space) $(vaultBasePath)/GROUP-SECRETS/cloudfoundry-$(org)-$(space) verbose \u00b6 verbose output back to overview Scope Details Aliases - Type bool Mandatory no Default false Possible values - true - false Secret no Configuration scope \u2612 parameter \u2612 general \u2612 steps \u2612 stages Resource references none cfCredentialsId \u00b6 Jenkins 'Username with password' credentials ID containing user and password to authenticate to the Cloud Foundry API. back to overview Scope Details Aliases - Type string Configuration scope \u2612 parameter \u2612 general \u2612 steps \u2612 stages Example \u00b6 In this example, the Cloud Foundry Configuration is directly provided with the respective Credentials for the used User/Account. cloudFoundryDeleteService ( cfApiEndpoint: 'https://test.server.com' , cfOrg: 'cforg' , cfSpace: 'cfspace' , cfServiceInstance: 'cfserviceInstance' , cfCredentialsId: 'cfcredentialsId' , cfDeleteServiceKeys: true , )","title":"cloudFoundryDeleteService"},{"location":"steps/cloudFoundryDeleteService/#cloudfoundrydeleteservice","text":"DeleteCloudFoundryService","title":"cloudFoundryDeleteService"},{"location":"steps/cloudFoundryDeleteService/#description","text":"Delete CloudFoundryService","title":"Description"},{"location":"steps/cloudFoundryDeleteService/#usage","text":"We recommend to define values of step parameters via .pipeline/config.yml file . In this case, calling the step is essentially reduced to defining the step name. Calling the step can be done either in an orchestrator specific way (e.g. via a Jenkins library step) or on the command line. Jenkins Command Line library ( 'piper-lib-os' ) cloudFoundryDeleteService script: this piper cloudFoundryDeleteService","title":"Usage"},{"location":"steps/cloudFoundryDeleteService/#prerequisites","text":"This step is for deleting an existing service on Cloud Foundry. You need to provide the Cloud Foundry API Endpoint, the Organisation as well as the Space and the respective Service Instance Name you want to delete. Furthermore you will need to provide the Cloud Foundry Login Credentials, which must be stored in the Jenkins Configuration. Additionally you can set the cfDeleteServiceKeys flag for deleting all Service Keys that belong to the respective Service.","title":"Prerequisites"},{"location":"steps/cloudFoundryDeleteService/#parameters","text":"","title":"Parameters"},{"location":"steps/cloudFoundryDeleteService/#overview-step","text":"Name Mandatory Additional information cfApiEndpoint yes cfOrg yes cfServiceInstance yes cfSpace yes password (yes) pass via ENV, Vault or Jenkins credentials ( cfCredentialsId ) script (yes) reference to Jenkins main pipeline script username (yes) pass via ENV, Vault or Jenkins credentials ( cfCredentialsId ) cfDeleteServiceKeys no verbose no activates debug output","title":"Overview - Step"},{"location":"steps/cloudFoundryDeleteService/#overview-execution-environment","text":"Orchestrator-specific only These parameters are relevant for orchestrator usage and not considered when using the command line option. Name Mandatory Additional information containerCommand no containerShell no dockerEnvVars no dockerImage no dockerName no dockerOptions no dockerPullImage no dockerVolumeBind no dockerWorkspace no","title":"Overview - Execution Environment"},{"location":"steps/cloudFoundryDeleteService/#details","text":"","title":"Details"},{"location":"steps/cloudFoundryDeleteService/#cfapiendpoint","text":"Cloud Foundry API endpoint back to overview Scope Details Aliases cloudFoundry/apiEndpoint Type string Mandatory yes Default $PIPER_cfApiEndpoint (if set) Secret no Configuration scope \u2612 parameter \u2612 general \u2612 steps \u2612 stages Resource references none","title":"cfApiEndpoint"},{"location":"steps/cloudFoundryDeleteService/#cfdeleteservicekeys","text":"Parameter to force deletion of Cloud Foundry Service Keys back to overview Scope Details Aliases cloudFoundry/cfDeleteServiceKeys Type bool Mandatory no Default false Possible values - true - false Secret no Configuration scope \u2612 parameter \u2610 general \u2612 steps \u2612 stages Resource references none","title":"cfDeleteServiceKeys"},{"location":"steps/cloudFoundryDeleteService/#cforg","text":"CF org back to overview Scope Details Aliases cloudFoundry/org Type string Mandatory yes Default $PIPER_cfOrg (if set) Secret no Configuration scope \u2612 parameter \u2612 general \u2612 steps \u2612 stages Resource references none","title":"cfOrg"},{"location":"steps/cloudFoundryDeleteService/#cfserviceinstance","text":"Parameter of ServiceInstance Name to delete CloudFoundry Service back to overview Scope Details Aliases cloudFoundry/serviceInstance Type string Mandatory yes Default $PIPER_cfServiceInstance (if set) Secret no Configuration scope \u2612 parameter \u2612 general \u2612 steps \u2612 stages Resource references none","title":"cfServiceInstance"},{"location":"steps/cloudFoundryDeleteService/#cfspace","text":"CF Space back to overview Scope Details Aliases cloudFoundry/space Type string Mandatory yes Default $PIPER_cfSpace (if set) Secret no Configuration scope \u2612 parameter \u2612 general \u2612 steps \u2612 stages Resource references none","title":"cfSpace"},{"location":"steps/cloudFoundryDeleteService/#containercommand","text":"Jenkins-specific: Used for proper environment setup. Kubernetes only: Allows to specify start command for container created with dockerImage parameter to overwrite Piper default (/usr/bin/tail -f /dev/null). back to overview Scope Details Aliases - Type string Mandatory no Default Secret no Configuration scope \u2612 parameter \u2612 general \u2612 steps \u2612 stages Resource references none","title":"containerCommand"},{"location":"steps/cloudFoundryDeleteService/#containershell","text":"Jenkins-specific: Used for proper environment setup. Allows to specify the shell to be executed for container with containerName. back to overview Scope Details Aliases - Type string Mandatory no Default Secret no Configuration scope \u2612 parameter \u2612 general \u2612 steps \u2612 stages Resource references none","title":"containerShell"},{"location":"steps/cloudFoundryDeleteService/#dockerenvvars","text":"Environment variables to set in the container, e.g. [http_proxy: \"proxy:8080\"]. back to overview Scope Details Aliases - Type map[string]string Mandatory no Default Secret no Configuration scope \u2612 parameter \u2612 general \u2612 steps \u2612 stages Resource references none","title":"dockerEnvVars"},{"location":"steps/cloudFoundryDeleteService/#dockerimage","text":"Name of the docker image that should be used. If empty, Docker is not used and the command is executed directly on the Jenkins system. back to overview Scope Details Aliases - Type string Mandatory no Default ppiper/cf-cli:latest Secret no Configuration scope \u2612 parameter \u2612 general \u2612 steps \u2612 stages Resource references none","title":"dockerImage"},{"location":"steps/cloudFoundryDeleteService/#dockername","text":"Kubernetes only: Name of the container launching dockerImage. SideCar only: Name of the container in local network. back to overview Scope Details Aliases - Type string Mandatory no Default cf Secret no Configuration scope \u2612 parameter \u2612 general \u2612 steps \u2612 stages Resource references none","title":"dockerName"},{"location":"steps/cloudFoundryDeleteService/#dockeroptions","text":"Docker options to be set when starting the container. back to overview Scope Details Aliases - Type []string Mandatory no Default Secret no Configuration scope \u2612 parameter \u2612 general \u2612 steps \u2612 stages Resource references none","title":"dockerOptions"},{"location":"steps/cloudFoundryDeleteService/#dockerpullimage","text":"Set this to 'false' to bypass a docker image pull. Useful during development process. Allows testing of images which are available in the local registry only. back to overview Scope Details Aliases - Type bool Mandatory no Default true Possible values - true - false Secret no Configuration scope \u2612 parameter \u2612 general \u2612 steps \u2612 stages Resource references none","title":"dockerPullImage"},{"location":"steps/cloudFoundryDeleteService/#dockervolumebind","text":"Jenkins-specific: Used for proper environment setup. Volumes that should be mounted into the docker container. back to overview Scope Details Aliases - Type map[string]string Mandatory no Default Secret no Configuration scope \u2612 parameter \u2612 general \u2612 steps \u2612 stages Resource references none","title":"dockerVolumeBind"},{"location":"steps/cloudFoundryDeleteService/#dockerworkspace","text":"Jenkins-specific: Used for proper environment setup. Kubernetes only: Specifies a dedicated user home directory for the container which will be passed as value for environment variable HOME . back to overview Scope Details Aliases - Type string Mandatory no Default /home/piper Secret no Configuration scope \u2612 parameter \u2612 general \u2612 steps \u2612 stages Resource references none","title":"dockerWorkspace"},{"location":"steps/cloudFoundryDeleteService/#password","text":"User Password for CF User back to overview Scope Details Aliases - Type string Mandatory yes Default $PIPER_password (if set) Secret yes Configuration scope \u2612 parameter \u2610 general \u2612 steps \u2612 stages Resource references Jenkins credential id: id: cfCredentialsId reference to: password Vault resource: name: cloudfoundryVaultSecretName default value: cloudfoundry-$(org)-$(space) Vault paths: $(vaultPath)/cloudfoundry-$(org)-$(space) $(vaultBasePath)/$(vaultPipelineName)/cloudfoundry-$(org)-$(space) $(vaultBasePath)/GROUP-SECRETS/cloudfoundry-$(org)-$(space)","title":"password"},{"location":"steps/cloudFoundryDeleteService/#script","text":"The common script environment of the Jenkinsfile running. Typically the reference to the script calling the pipeline step is provided with the this parameter, as in script: this . This allows the function to access the commonPipelineEnvironment for retrieving, e.g. configuration parameters. back to overview Scope Details Aliases - Type Jenkins Script Mandatory yes Default Secret no Configuration scope \u2610 parameter \u2610 general \u2610 steps \u2610 stages Resource references none","title":"script"},{"location":"steps/cloudFoundryDeleteService/#username","text":"User or E-Mail for CF back to overview Scope Details Aliases - Type string Mandatory yes Default $PIPER_username (if set) Secret yes Configuration scope \u2612 parameter \u2610 general \u2612 steps \u2612 stages Resource references Jenkins credential id: id: cfCredentialsId reference to: username Vault resource: name: cloudfoundryVaultSecretName default value: cloudfoundry-$(org)-$(space) Vault paths: $(vaultPath)/cloudfoundry-$(org)-$(space) $(vaultBasePath)/$(vaultPipelineName)/cloudfoundry-$(org)-$(space) $(vaultBasePath)/GROUP-SECRETS/cloudfoundry-$(org)-$(space)","title":"username"},{"location":"steps/cloudFoundryDeleteService/#verbose","text":"verbose output back to overview Scope Details Aliases - Type bool Mandatory no Default false Possible values - true - false Secret no Configuration scope \u2612 parameter \u2612 general \u2612 steps \u2612 stages Resource references none","title":"verbose"},{"location":"steps/cloudFoundryDeleteService/#cfcredentialsid","text":"Jenkins 'Username with password' credentials ID containing user and password to authenticate to the Cloud Foundry API. back to overview Scope Details Aliases - Type string Configuration scope \u2612 parameter \u2612 general \u2612 steps \u2612 stages","title":"cfCredentialsId"},{"location":"steps/cloudFoundryDeleteService/#example","text":"In this example, the Cloud Foundry Configuration is directly provided with the respective Credentials for the used User/Account. cloudFoundryDeleteService ( cfApiEndpoint: 'https://test.server.com' , cfOrg: 'cforg' , cfSpace: 'cfspace' , cfServiceInstance: 'cfserviceInstance' , cfCredentialsId: 'cfcredentialsId' , cfDeleteServiceKeys: true , )","title":"Example"},{"location":"steps/cloudFoundryDeleteSpace/","text":"cloudFoundryDeleteSpace \u00b6 Deletes a space in Cloud Foundry Description \u00b6 Deletes a space in Cloud Foundry Mandatory: * Cloud Foundry API endpoint, Organization, Space name Usage \u00b6 We recommend to define values of step parameters via .pipeline/config.yml file . In this case, calling the step is essentially reduced to defining the step name. Calling the step can be done either in an orchestrator specific way (e.g. via a Jenkins library step) or on the command line. Jenkins Command Line library ( 'piper-lib-os' ) cloudFoundryDeleteSpace script: this piper cloudFoundryDeleteSpace Prerequisites \u00b6 You have a user for the SAP BTP Cloud Foundry environment Credentials have been configured in Jenkins with a dedicated Id Parameters \u00b6 Overview - Step \u00b6 Name Mandatory Additional information cfOrg yes cfSpace yes password (yes) pass via ENV or Jenkins credentials ( cfCredentialsId ) script (yes) reference to Jenkins main pipeline script username (yes) pass via ENV or Jenkins credentials ( cfCredentialsId ) cfApiEndpoint no verbose no activates debug output Overview - Execution Environment \u00b6 Orchestrator-specific only These parameters are relevant for orchestrator usage and not considered when using the command line option. Name Mandatory Additional information containerCommand no containerShell no dockerEnvVars no dockerImage no dockerName no dockerOptions no dockerPullImage no dockerVolumeBind no dockerWorkspace no stashContent no Details \u00b6 cfApiEndpoint \u00b6 Cloud Foundry API endpoint back to overview Scope Details Aliases cloudFoundry/apiEndpoint Type string Mandatory no Default https://api.cf.eu10.hana.ondemand.com Secret no Configuration scope \u2612 parameter \u2612 general \u2612 steps \u2612 stages Resource references none cfOrg \u00b6 Cloud Foundry org back to overview Scope Details Aliases cloudFoundry/org Type string Mandatory yes Default $PIPER_cfOrg (if set) Secret no Configuration scope \u2612 parameter \u2612 general \u2612 steps \u2612 stages Resource references none cfSpace \u00b6 The name of the Cloud Foundry Space to be deleted back to overview Scope Details Aliases cloudFoundry/space Type string Mandatory yes Default $PIPER_cfSpace (if set) Secret no Configuration scope \u2612 parameter \u2612 general \u2612 steps \u2612 stages Resource references none containerCommand \u00b6 Jenkins-specific: Used for proper environment setup. Kubernetes only: Allows to specify start command for container created with dockerImage parameter to overwrite Piper default (/usr/bin/tail -f /dev/null). back to overview Scope Details Aliases - Type string Mandatory no Default Secret no Configuration scope \u2612 parameter \u2612 general \u2612 steps \u2612 stages Resource references none containerShell \u00b6 Jenkins-specific: Used for proper environment setup. Allows to specify the shell to be executed for container with containerName. back to overview Scope Details Aliases - Type string Mandatory no Default Secret no Configuration scope \u2612 parameter \u2612 general \u2612 steps \u2612 stages Resource references none dockerEnvVars \u00b6 Environment variables to set in the container, e.g. [http_proxy: \"proxy:8080\"]. back to overview Scope Details Aliases - Type map[string]string Mandatory no Default Secret no Configuration scope \u2612 parameter \u2612 general \u2612 steps \u2612 stages Resource references none dockerImage \u00b6 Name of the docker image that should be used. If empty, Docker is not used and the command is executed directly on the Jenkins system. back to overview Scope Details Aliases - Type string Mandatory no Default ppiper/cf-cli:latest Secret no Configuration scope \u2612 parameter \u2612 general \u2612 steps \u2612 stages Resource references none dockerName \u00b6 Kubernetes only: Name of the container launching dockerImage. SideCar only: Name of the container in local network. back to overview Scope Details Aliases - Type string Mandatory no Default cf Secret no Configuration scope \u2612 parameter \u2612 general \u2612 steps \u2612 stages Resource references none dockerOptions \u00b6 Docker options to be set when starting the container. back to overview Scope Details Aliases - Type []string Mandatory no Default Secret no Configuration scope \u2612 parameter \u2612 general \u2612 steps \u2612 stages Resource references none dockerPullImage \u00b6 Set this to 'false' to bypass a docker image pull. Useful during development process. Allows testing of images which are available in the local registry only. back to overview Scope Details Aliases - Type bool Mandatory no Default true Possible values - true - false Secret no Configuration scope \u2612 parameter \u2612 general \u2612 steps \u2612 stages Resource references none dockerVolumeBind \u00b6 Jenkins-specific: Used for proper environment setup. Volumes that should be mounted into the docker container. back to overview Scope Details Aliases - Type map[string]string Mandatory no Default Secret no Configuration scope \u2612 parameter \u2612 general \u2612 steps \u2612 stages Resource references none dockerWorkspace \u00b6 Jenkins-specific: Used for proper environment setup. Kubernetes only: Specifies a dedicated user home directory for the container which will be passed as value for environment variable HOME . back to overview Scope Details Aliases - Type string Mandatory no Default Secret no Configuration scope \u2612 parameter \u2612 general \u2612 steps \u2612 stages Resource references none password \u00b6 Password for Cloud Foundry User back to overview Scope Details Aliases - Type string Mandatory yes Default $PIPER_password (if set) Secret yes Configuration scope \u2612 parameter \u2610 general \u2612 steps \u2612 stages Resource references Jenkins credential id: id: cfCredentialsId reference to: password script \u00b6 The common script environment of the Jenkinsfile running. Typically the reference to the script calling the pipeline step is provided with the this parameter, as in script: this . This allows the function to access the commonPipelineEnvironment for retrieving, e.g. configuration parameters. back to overview Scope Details Aliases - Type Jenkins Script Mandatory yes Default Secret no Configuration scope \u2610 parameter \u2610 general \u2610 steps \u2610 stages Resource references none stashContent \u00b6 Jenkins-specific: Used for proper environment setup. Specific stashes that should be considered for the step execution. back to overview Scope Details Aliases - Type []string Mandatory no Default - deployDescriptor Secret no Configuration scope \u2612 parameter \u2612 general \u2612 steps \u2612 stages Resource references none username \u00b6 User or E-Mail for CF back to overview Scope Details Aliases - Type string Mandatory yes Default $PIPER_username (if set) Secret yes Configuration scope \u2612 parameter \u2610 general \u2612 steps \u2612 stages Resource references Jenkins credential id: id: cfCredentialsId reference to: username verbose \u00b6 verbose output back to overview Scope Details Aliases - Type bool Mandatory no Default false Possible values - true - false Secret no Configuration scope \u2612 parameter \u2612 general \u2612 steps \u2612 stages Resource references none cfCredentialsId \u00b6 Jenkins credentials ID containing user and password to authenticate to the Cloud Foundry API back to overview Scope Details Aliases cloudFoundry/credentialsId Type string Configuration scope \u2612 parameter \u2612 general \u2612 steps \u2612 stages Example \u00b6 Space deletion in Cloud Foundry with a simple example \u00b6 The following example deletes an existing space in a Cloud Foundry. You can store the credentials in Jenkins and use the cfCredentialsId parameter to authenticate to Cloud Foundry. This can be done accordingly: cloudFoundryDeleteSpace ( cfApiEndpoint : 'https://test.server.com' , cfOrg : 'cfOrg' , cfSpace: 'cfSpace' , //Name of the cf space to be deleted cfCredentialsId: 'cfCredentialsId' , script: this , )","title":"cloudFoundryDeleteSpace"},{"location":"steps/cloudFoundryDeleteSpace/#cloudfoundrydeletespace","text":"Deletes a space in Cloud Foundry","title":"cloudFoundryDeleteSpace"},{"location":"steps/cloudFoundryDeleteSpace/#description","text":"Deletes a space in Cloud Foundry Mandatory: * Cloud Foundry API endpoint, Organization, Space name","title":"Description"},{"location":"steps/cloudFoundryDeleteSpace/#usage","text":"We recommend to define values of step parameters via .pipeline/config.yml file . In this case, calling the step is essentially reduced to defining the step name. Calling the step can be done either in an orchestrator specific way (e.g. via a Jenkins library step) or on the command line. Jenkins Command Line library ( 'piper-lib-os' ) cloudFoundryDeleteSpace script: this piper cloudFoundryDeleteSpace","title":"Usage"},{"location":"steps/cloudFoundryDeleteSpace/#prerequisites","text":"You have a user for the SAP BTP Cloud Foundry environment Credentials have been configured in Jenkins with a dedicated Id","title":"Prerequisites"},{"location":"steps/cloudFoundryDeleteSpace/#parameters","text":"","title":"Parameters"},{"location":"steps/cloudFoundryDeleteSpace/#overview-step","text":"Name Mandatory Additional information cfOrg yes cfSpace yes password (yes) pass via ENV or Jenkins credentials ( cfCredentialsId ) script (yes) reference to Jenkins main pipeline script username (yes) pass via ENV or Jenkins credentials ( cfCredentialsId ) cfApiEndpoint no verbose no activates debug output","title":"Overview - Step"},{"location":"steps/cloudFoundryDeleteSpace/#overview-execution-environment","text":"Orchestrator-specific only These parameters are relevant for orchestrator usage and not considered when using the command line option. Name Mandatory Additional information containerCommand no containerShell no dockerEnvVars no dockerImage no dockerName no dockerOptions no dockerPullImage no dockerVolumeBind no dockerWorkspace no stashContent no","title":"Overview - Execution Environment"},{"location":"steps/cloudFoundryDeleteSpace/#details","text":"","title":"Details"},{"location":"steps/cloudFoundryDeleteSpace/#cfapiendpoint","text":"Cloud Foundry API endpoint back to overview Scope Details Aliases cloudFoundry/apiEndpoint Type string Mandatory no Default https://api.cf.eu10.hana.ondemand.com Secret no Configuration scope \u2612 parameter \u2612 general \u2612 steps \u2612 stages Resource references none","title":"cfApiEndpoint"},{"location":"steps/cloudFoundryDeleteSpace/#cforg","text":"Cloud Foundry org back to overview Scope Details Aliases cloudFoundry/org Type string Mandatory yes Default $PIPER_cfOrg (if set) Secret no Configuration scope \u2612 parameter \u2612 general \u2612 steps \u2612 stages Resource references none","title":"cfOrg"},{"location":"steps/cloudFoundryDeleteSpace/#cfspace","text":"The name of the Cloud Foundry Space to be deleted back to overview Scope Details Aliases cloudFoundry/space Type string Mandatory yes Default $PIPER_cfSpace (if set) Secret no Configuration scope \u2612 parameter \u2612 general \u2612 steps \u2612 stages Resource references none","title":"cfSpace"},{"location":"steps/cloudFoundryDeleteSpace/#containercommand","text":"Jenkins-specific: Used for proper environment setup. Kubernetes only: Allows to specify start command for container created with dockerImage parameter to overwrite Piper default (/usr/bin/tail -f /dev/null). back to overview Scope Details Aliases - Type string Mandatory no Default Secret no Configuration scope \u2612 parameter \u2612 general \u2612 steps \u2612 stages Resource references none","title":"containerCommand"},{"location":"steps/cloudFoundryDeleteSpace/#containershell","text":"Jenkins-specific: Used for proper environment setup. Allows to specify the shell to be executed for container with containerName. back to overview Scope Details Aliases - Type string Mandatory no Default Secret no Configuration scope \u2612 parameter \u2612 general \u2612 steps \u2612 stages Resource references none","title":"containerShell"},{"location":"steps/cloudFoundryDeleteSpace/#dockerenvvars","text":"Environment variables to set in the container, e.g. [http_proxy: \"proxy:8080\"]. back to overview Scope Details Aliases - Type map[string]string Mandatory no Default Secret no Configuration scope \u2612 parameter \u2612 general \u2612 steps \u2612 stages Resource references none","title":"dockerEnvVars"},{"location":"steps/cloudFoundryDeleteSpace/#dockerimage","text":"Name of the docker image that should be used. If empty, Docker is not used and the command is executed directly on the Jenkins system. back to overview Scope Details Aliases - Type string Mandatory no Default ppiper/cf-cli:latest Secret no Configuration scope \u2612 parameter \u2612 general \u2612 steps \u2612 stages Resource references none","title":"dockerImage"},{"location":"steps/cloudFoundryDeleteSpace/#dockername","text":"Kubernetes only: Name of the container launching dockerImage. SideCar only: Name of the container in local network. back to overview Scope Details Aliases - Type string Mandatory no Default cf Secret no Configuration scope \u2612 parameter \u2612 general \u2612 steps \u2612 stages Resource references none","title":"dockerName"},{"location":"steps/cloudFoundryDeleteSpace/#dockeroptions","text":"Docker options to be set when starting the container. back to overview Scope Details Aliases - Type []string Mandatory no Default Secret no Configuration scope \u2612 parameter \u2612 general \u2612 steps \u2612 stages Resource references none","title":"dockerOptions"},{"location":"steps/cloudFoundryDeleteSpace/#dockerpullimage","text":"Set this to 'false' to bypass a docker image pull. Useful during development process. Allows testing of images which are available in the local registry only. back to overview Scope Details Aliases - Type bool Mandatory no Default true Possible values - true - false Secret no Configuration scope \u2612 parameter \u2612 general \u2612 steps \u2612 stages Resource references none","title":"dockerPullImage"},{"location":"steps/cloudFoundryDeleteSpace/#dockervolumebind","text":"Jenkins-specific: Used for proper environment setup. Volumes that should be mounted into the docker container. back to overview Scope Details Aliases - Type map[string]string Mandatory no Default Secret no Configuration scope \u2612 parameter \u2612 general \u2612 steps \u2612 stages Resource references none","title":"dockerVolumeBind"},{"location":"steps/cloudFoundryDeleteSpace/#dockerworkspace","text":"Jenkins-specific: Used for proper environment setup. Kubernetes only: Specifies a dedicated user home directory for the container which will be passed as value for environment variable HOME . back to overview Scope Details Aliases - Type string Mandatory no Default Secret no Configuration scope \u2612 parameter \u2612 general \u2612 steps \u2612 stages Resource references none","title":"dockerWorkspace"},{"location":"steps/cloudFoundryDeleteSpace/#password","text":"Password for Cloud Foundry User back to overview Scope Details Aliases - Type string Mandatory yes Default $PIPER_password (if set) Secret yes Configuration scope \u2612 parameter \u2610 general \u2612 steps \u2612 stages Resource references Jenkins credential id: id: cfCredentialsId reference to: password","title":"password"},{"location":"steps/cloudFoundryDeleteSpace/#script","text":"The common script environment of the Jenkinsfile running. Typically the reference to the script calling the pipeline step is provided with the this parameter, as in script: this . This allows the function to access the commonPipelineEnvironment for retrieving, e.g. configuration parameters. back to overview Scope Details Aliases - Type Jenkins Script Mandatory yes Default Secret no Configuration scope \u2610 parameter \u2610 general \u2610 steps \u2610 stages Resource references none","title":"script"},{"location":"steps/cloudFoundryDeleteSpace/#stashcontent","text":"Jenkins-specific: Used for proper environment setup. Specific stashes that should be considered for the step execution. back to overview Scope Details Aliases - Type []string Mandatory no Default - deployDescriptor Secret no Configuration scope \u2612 parameter \u2612 general \u2612 steps \u2612 stages Resource references none","title":"stashContent"},{"location":"steps/cloudFoundryDeleteSpace/#username","text":"User or E-Mail for CF back to overview Scope Details Aliases - Type string Mandatory yes Default $PIPER_username (if set) Secret yes Configuration scope \u2612 parameter \u2610 general \u2612 steps \u2612 stages Resource references Jenkins credential id: id: cfCredentialsId reference to: username","title":"username"},{"location":"steps/cloudFoundryDeleteSpace/#verbose","text":"verbose output back to overview Scope Details Aliases - Type bool Mandatory no Default false Possible values - true - false Secret no Configuration scope \u2612 parameter \u2612 general \u2612 steps \u2612 stages Resource references none","title":"verbose"},{"location":"steps/cloudFoundryDeleteSpace/#cfcredentialsid","text":"Jenkins credentials ID containing user and password to authenticate to the Cloud Foundry API back to overview Scope Details Aliases cloudFoundry/credentialsId Type string Configuration scope \u2612 parameter \u2612 general \u2612 steps \u2612 stages","title":"cfCredentialsId"},{"location":"steps/cloudFoundryDeleteSpace/#example","text":"","title":"Example"},{"location":"steps/cloudFoundryDeleteSpace/#space-deletion-in-cloud-foundry-with-a-simple-example","text":"The following example deletes an existing space in a Cloud Foundry. You can store the credentials in Jenkins and use the cfCredentialsId parameter to authenticate to Cloud Foundry. This can be done accordingly: cloudFoundryDeleteSpace ( cfApiEndpoint : 'https://test.server.com' , cfOrg : 'cfOrg' , cfSpace: 'cfSpace' , //Name of the cf space to be deleted cfCredentialsId: 'cfCredentialsId' , script: this , )","title":"Space deletion in Cloud Foundry with a simple example"},{"location":"steps/cloudFoundryDeploy/","text":"cloudFoundryDeploy \u00b6 Deploys an application to Cloud Foundry Description \u00b6 Deploys an application to a test or production space within Cloud Foundry. This step supports two deployment types: in a standard way in a zero-downtime manner using a blue-green deployment approach The step achieves this via following deploy tools * cf CLI - used as default for Non MTA apps * MTA CF CLI Plugin - used as default for MTA apps Usage \u00b6 We recommend to define values of step parameters via .pipeline/config.yml file . In this case, calling the step is essentially reduced to defining the step name. Calling the step can be done either in an orchestrator specific way (e.g. via a Jenkins library step) or on the command line. Jenkins Command Line library ( 'piper-lib-os' ) cloudFoundryDeploy script: this piper cloudFoundryDeploy Outputs \u00b6 Output type Details influx measurement deployment_data artifactUrl deployTime commitHash jobTrigger Additional Hints \u00b6 Standard CF deployments \u00b6 deployType parameter defaults to value standard . This means that CF CLI is called by piper and command cf push is run by piper Blue green deployments \u00b6 With CF CLI Blue green deployments are deprecated, but rolling deployment strategy is supported. For rolling deployment strategy , set parameter cfNativeDeployParameters:'--strategy rolling' With MTA CF CLI Plugin for MTA applications The Multiapps Plugin offers 2 different strategies: Blue-Green Deployment Strategy - where the production environments are called \u201clive\u201d and \u201cidle\u201d during deployment. This strategy is activated with mtaDeployParameters: --strategy blue-green --skip-testing-phase and deployType=standard . After deployment, appnames are not appeneded by any suffix like -live or -idle . Legacy Blue-Green Deployment - where the productive environments are called \u201cblue\u201d and \u201cgreen. Activated by deployType=blue-green . After deployment, appnames are appeneded by suffix like -blue or -green Following table summarizes the different combinations of the step parameters deployType and deployTool and their impact. Parameter buildTool is used to differentiate between MTA and Non MTA applications. If buildTool is not available in the environment, user will have to provide deployTool explicitly. Deployment Strategy Comparison \u00b6 This table compares deployment strategies for MTA and Non-MTA applications. deployType MTA Applications Non MTA Applications standard deployTool = mtaDeployPlugin Uses MTA plugin, Command run cf deploy deployTool = cf_native cf CLI used Command cf push Requires Manifest file and app name appname can be provided via config or manifest file. blue-green deployTool = mtaDeployPlugin, Uses MTA plugin Command run cf deploy bgdeploy Deprecated. Alternative: Rolling deployment strategy by setting cfNativeDeployParameters = '--strategy rolling' deployDockerImage not supported deployDockerImage supported Docker credentials can only be provided as Jenkins environment variable. !!! note Due to an incompatible change in the Cloud Foundry CLI, multiple buildpacks are not supported by this step. If your application contains a list of buildpacks instead of a single buildpack , this will be automatically re-written by the step when blue-green deployment is used. Cloud Foundry supports the deployment of multiple applications using a single manifest file. This option is supported with project \"Piper\". In this case, define appName: '' since the app name for the individual applications has to be defined via the manifest. You can find details in the Cloud Foundry Documentation Recommended way to do docker image deployments is via kubernetesDeploy Piper step.This step is not capable of deploying docker images built in the same pipeline using other piper steps[i.e., kanikoExecute]. Prerequisites \u00b6 Cloud Foundry organization, space and deployment users are available Credentials for deployment have been configured in Jenkins or Vault. Parameters \u00b6 Overview - Step \u00b6 Name Mandatory Additional information org yes password (yes) pass via ENV, Vault or Jenkins credentials ( cfCredentialsId ) script (yes) reference to Jenkins main pipeline script space yes username (yes) pass via ENV, Vault or Jenkins credentials ( cfCredentialsId ) apiEndpoint no appName no artifactVersion no buildTool no cfHome no cfNativeDeployParameters no cfPluginHome no commitHash no deployDockerImage no deployTool no deployType no dockerPassword no pass via ENV or Jenkins credentials ( dockerCredentialsId ) dockerUsername no pass via ENV or Jenkins credentials ( dockerCredentialsId ) keepOldInstance no loginParameters no manifest no manifestVariables no manifestVariablesFiles no mtaDeployParameters no mtaExtensionCredentials no mtaExtensionDescriptor no mtaPath no verbose no activates debug output Overview - Execution Environment \u00b6 Orchestrator-specific only These parameters are relevant for orchestrator usage and not considered when using the command line option. Name Mandatory Additional information containerCommand no containerShell no dockerEnvVars no dockerImage no dockerName no dockerOptions no dockerPullImage no dockerVolumeBind no dockerWorkspace no Details \u00b6 apiEndpoint \u00b6 Cloud Foundry API endpoint back to overview Scope Details Aliases - cfApiEndpoint - cloudFoundry/apiEndpoint ( deprecated ) Type string Mandatory no Default https://api.cf.eu10.hana.ondemand.com Secret no Configuration scope \u2612 parameter \u2612 general \u2612 steps \u2612 stages Resource references none appName \u00b6 Defines the name of the application to be deployed to the Cloud Foundry space back to overview Scope Details Aliases - cfAppName - cloudFoundry/appName ( deprecated ) Type string Mandatory no Default $PIPER_appName (if set) Secret no Configuration scope \u2612 parameter \u2612 general \u2612 steps \u2612 stages Resource references none artifactVersion \u00b6 The artifact version, used for influx reporting back to overview Scope Details Aliases - Type string Mandatory no Default $PIPER_artifactVersion (if set) Secret no Configuration scope \u2612 parameter \u2612 general \u2612 steps \u2612 stages Resource references commonPipelineEnvironment : reference to: artifactVersion buildTool \u00b6 Defines the tool which is used for building the artifact. If provided, deployTool is automatically derived from it. For MTA projects, deployTool defaults to mtaDeployPlugin . For other projects cf_native will be used. back to overview Scope Details Aliases - Type string Mandatory no Default $PIPER_buildTool (if set) Secret no Configuration scope \u2612 parameter \u2612 general \u2612 steps \u2612 stages Resource references commonPipelineEnvironment : reference to: buildTool cfHome \u00b6 The cf home folder used by the cf cli. If not provided the default assumed by the cf cli is used. back to overview Scope Details Aliases - Type string Mandatory no Default $PIPER_cfHome (if set) Secret no Configuration scope \u2612 parameter \u2612 general \u2612 steps \u2612 stages Resource references none cfNativeDeployParameters \u00b6 Additional parameters passed to cf native deployment command back to overview Scope Details Aliases - Type string Mandatory no Default $PIPER_cfNativeDeployParameters (if set) Secret no Configuration scope \u2612 parameter \u2612 general \u2612 steps \u2612 stages Resource references none cfPluginHome \u00b6 The cf plugin home folder used by the cf cli. If not provided the default assumed by the cf cli is used. back to overview Scope Details Aliases - Type string Mandatory no Default $PIPER_cfPluginHome (if set) Secret no Configuration scope \u2612 parameter \u2612 general \u2612 steps \u2612 stages Resource references none commitHash \u00b6 The commit hash, used for influx reporting back to overview Scope Details Aliases - Type string Mandatory no Default $PIPER_commitHash (if set) Secret no Configuration scope \u2612 parameter \u2612 general \u2612 steps \u2612 stages Resource references commonPipelineEnvironment : reference to: git/headCommitId containerCommand \u00b6 Jenkins-specific: Used for proper environment setup. Kubernetes only: Allows to specify start command for container created with dockerImage parameter to overwrite Piper default (/usr/bin/tail -f /dev/null). back to overview Scope Details Aliases - Type string Mandatory no Default Secret no Configuration scope \u2612 parameter \u2612 general \u2612 steps \u2612 stages Resource references none containerShell \u00b6 Jenkins-specific: Used for proper environment setup. Allows to specify the shell to be executed for container with containerName. back to overview Scope Details Aliases - Type string Mandatory no Default Secret no Configuration scope \u2612 parameter \u2612 general \u2612 steps \u2612 stages Resource references none deployDockerImage \u00b6 Docker image deployments are supported via manifest file in general . If no manifest is used, this parameter defines the image to be deployed. The specified name of the image is passed to the --docker-image parameter of the cf CLI and must adhere it's naming pattern (e.g. REPO/IMAGE:TAG). See cf CLI documentation x x for details. Note: The used Docker registry must be visible for the targeted Cloud Foundry instance. back to overview Scope Details Aliases - Type string Mandatory no Default $PIPER_deployDockerImage (if set) Secret no Configuration scope \u2612 parameter \u2612 general \u2612 steps \u2612 stages Resource references none deployTool \u00b6 Defines the tool which should be used for deployment. Mandatory if buildTool is not found in pipeline environment back to overview Scope Details Aliases - Type string Mandatory no Default $PIPER_deployTool (if set) Secret no Configuration scope \u2612 parameter \u2612 general \u2612 steps \u2612 stages Resource references none deployType \u00b6 Defines the type of deployment - standard or blue-green deployment. For mta build tool, possible values are standard , blue-green or bg-deploy . For cf native build tools, possible value is standard . To eliminate system downtime, an alternative is to pass '--strategy rolling' to the parameter cfNativeDeployParameters . back to overview Scope Details Aliases - Type string Mandatory no Default standard Secret no Configuration scope \u2612 parameter \u2612 general \u2612 steps \u2612 stages Resource references none dockerEnvVars \u00b6 Environment variables to set in the container, e.g. [http_proxy: \"proxy:8080\"]. back to overview Scope Details Aliases - Type map[string]string Mandatory no Default Secret no Configuration scope \u2612 parameter \u2612 general \u2612 steps \u2612 stages Resource references none dockerImage \u00b6 Name of the docker image that should be used. If empty, Docker is not used and the command is executed directly on the Jenkins system. back to overview Scope Details Aliases - Type string Mandatory no Default ppiper/cf-cli:latest Secret no Configuration scope \u2612 parameter \u2612 general \u2612 steps \u2612 stages Resource references none dockerName \u00b6 Kubernetes only: Name of the container launching dockerImage. SideCar only: Name of the container in local network. back to overview Scope Details Aliases - Type string Mandatory no Default cfDeploy Secret no Configuration scope \u2612 parameter \u2612 general \u2612 steps \u2612 stages Resource references none dockerOptions \u00b6 Docker options to be set when starting the container. back to overview Scope Details Aliases - Type []string Mandatory no Default [{--ulimit stack=67108864:67108864} {--ulimit nofile=65536:65536}] Secret no Configuration scope \u2612 parameter \u2612 general \u2612 steps \u2612 stages Resource references none dockerPassword \u00b6 If the specified image in deployDockerImage is contained in a Docker registry, which requires authorization, this defines the password to be used. back to overview Scope Details Aliases - Type string Mandatory no Default $PIPER_dockerPassword (if set) Secret yes Configuration scope \u2612 parameter \u2610 general \u2612 steps \u2612 stages Resource references Jenkins credential id: id: dockerCredentialsId reference to: password dockerPullImage \u00b6 Set this to 'false' to bypass a docker image pull. Useful during development process. Allows testing of images which are available in the local registry only. back to overview Scope Details Aliases - Type bool Mandatory no Default true Possible values - true - false Secret no Configuration scope \u2612 parameter \u2612 general \u2612 steps \u2612 stages Resource references none dockerUsername \u00b6 If the specified image in deployDockerImage is contained in a Docker registry, which requires authorization, this defines the username to be used. back to overview Scope Details Aliases - Type string Mandatory no Default $PIPER_dockerUsername (if set) Secret yes Configuration scope \u2612 parameter \u2610 general \u2612 steps \u2612 stages Resource references Jenkins credential id: id: dockerCredentialsId reference to: username dockerVolumeBind \u00b6 Jenkins-specific: Used for proper environment setup. Volumes that should be mounted into the docker container. back to overview Scope Details Aliases - Type map[string]string Mandatory no Default Secret no Configuration scope \u2612 parameter \u2612 general \u2612 steps \u2612 stages Resource references none dockerWorkspace \u00b6 Jenkins-specific: Used for proper environment setup. Kubernetes only: Specifies a dedicated user home directory for the container which will be passed as value for environment variable HOME . back to overview Scope Details Aliases - Type string Mandatory no Default Secret no Configuration scope \u2612 parameter \u2612 general \u2612 steps \u2612 stages Resource references none keepOldInstance \u00b6 If this option is set to true the old instance will remain stopped in the Cloud Foundry space.\" back to overview Scope Details Aliases - Type bool Mandatory no Default false Possible values - true - false Secret no Configuration scope \u2612 parameter \u2610 general \u2612 steps \u2612 stages Resource references none loginParameters \u00b6 Addition command line options for cf login command. No escaping/quoting is performed. Not recommended for productive environments. back to overview Scope Details Aliases - Type string Mandatory no Default $PIPER_loginParameters (if set) Secret no Configuration scope \u2612 parameter \u2612 general \u2612 steps \u2612 stages Resource references none manifest \u00b6 Defines the manifest file name to be used for deployment to Cloud Foundry. Defaults to manifest.yml back to overview Scope Details Aliases - cfManifest - cloudFoundry/manifest ( deprecated ) Type string Mandatory no Default $PIPER_manifest (if set) Secret no Configuration scope \u2612 parameter \u2612 general \u2612 steps \u2612 stages Resource references none manifestVariables \u00b6 Defines a list of variables in the form key=value which are used for variable substitution within the file given by manifest. This can be used to set variables like it is provided by 'cf push --var key=value'. Note: variables defined via 'manifestVariables' always win over conflicting variables defined via any file given by 'manifestVariablesFiles' - no matter what is declared before. This is the same behavior as can be observed when using 'cf push --var' in combination with 'cf push --vars-file'.\" Example: ... cloudFoundryDeploy: manifestVariables: - 'key1=value1' - 'key2=value2' ... back to overview Scope Details Aliases - cfManifestVariables - cloudFoundry/manifestVariables ( deprecated ) Type []string Mandatory no Default $PIPER_manifestVariables (if set) Secret no Configuration scope \u2612 parameter \u2612 general \u2612 steps \u2612 stages Resource references none manifestVariablesFiles \u00b6 path(s) of the Yaml file(s) containing the variable values to use as a replacement in the manifest file. The order of the files is relevant in case there are conflicting variable names and values within variable files. In such a case, the values of the last file win. back to overview Scope Details Aliases - cfManifestVariablesFiles - cloudFoundry/manifestVariablesFiles ( deprecated ) Type []string Mandatory no Default - manifest-variables.yml Secret no Configuration scope \u2612 parameter \u2612 general \u2612 steps \u2612 stages Resource references none mtaDeployParameters \u00b6 Additional parameters passed to mta deployment command back to overview Scope Details Aliases - Type string Mandatory no Default -f Secret no Configuration scope \u2612 parameter \u2612 general \u2612 steps \u2612 stages Resource references none mtaExtensionCredentials \u00b6 Defines a map of credentials that need to be replaced in the mtaExtensionDescriptor . This map needs to be created as value-to-be-replaced : id-of-a-credential-in-jenkins . The placeholders in the extension descriptor file(s) looks like: <%= value-to-be-replaced %> . When used outside Jenkins the secret which corresponds to id-of-a-credential-in-jenkins needs to be provided as environment variable in screaming snake case, e.g.: export ID_OF_A_CREDENTIAL_IN_JENKINS=<secret> . id-of-a-credential-in-jenkins needs to be provided in a way so that it can be translated into a valid environment variable name (e.g. don't start with a number). value-to-be-replaced must match this regex: ^[-_A-Za-z0-9]+$ . back to overview Scope Details Aliases cloudFoundry/mtaExtensionCredentials ( deprecated ) Type map[string]interface{} Mandatory no Default $PIPER_mtaExtensionCredentials (if set) Secret no Configuration scope \u2612 parameter \u2612 general \u2612 steps \u2612 stages Resource references none mtaExtensionDescriptor \u00b6 Defines additional extension descriptor file for deployment with the mtaDeployPlugin back to overview Scope Details Aliases cloudFoundry/mtaExtensionDescriptor ( deprecated ) Type string Mandatory no Default $PIPER_mtaExtensionDescriptor (if set) Secret no Configuration scope \u2612 parameter \u2612 general \u2612 steps \u2612 stages Resource references none mtaPath \u00b6 Defines the path to *.mtar for deployment with the mtaDeployPlugin back to overview Scope Details Aliases - Type string Mandatory no Default $PIPER_mtaPath (if set) Secret no Configuration scope \u2612 parameter \u2612 general \u2612 steps \u2612 stages Resource references commonPipelineEnvironment : reference to: mtarFilePath org \u00b6 Cloud Foundry target organization. back to overview Scope Details Aliases - cfOrg - cloudFoundry/org ( deprecated ) Type string Mandatory yes Default $PIPER_org (if set) Secret no Configuration scope \u2612 parameter \u2612 general \u2612 steps \u2612 stages Resource references none password \u00b6 Password back to overview Scope Details Aliases - Type string Mandatory yes Default $PIPER_password (if set) Secret yes Configuration scope \u2612 parameter \u2610 general \u2612 steps \u2612 stages Resource references Jenkins credential id: id: cfCredentialsId reference to: password Vault resource: name: cloudfoundryVaultSecretName default value: cloudfoundry-$(org)-$(space) Vault paths: $(vaultPath)/cloudfoundry-$(org)-$(space) $(vaultBasePath)/$(vaultPipelineName)/cloudfoundry-$(org)-$(space) $(vaultBasePath)/GROUP-SECRETS/cloudfoundry-$(org)-$(space) script \u00b6 The common script environment of the Jenkinsfile running. Typically the reference to the script calling the pipeline step is provided with the this parameter, as in script: this . This allows the function to access the commonPipelineEnvironment for retrieving, e.g. configuration parameters. back to overview Scope Details Aliases - Type Jenkins Script Mandatory yes Default Secret no Configuration scope \u2610 parameter \u2610 general \u2610 steps \u2610 stages Resource references none space \u00b6 Cloud Foundry target space back to overview Scope Details Aliases - cfSpace - cloudFoundry/space ( deprecated ) Type string Mandatory yes Default $PIPER_space (if set) Secret no Configuration scope \u2612 parameter \u2612 general \u2612 steps \u2612 stages Resource references none username \u00b6 User name used for deployment back to overview Scope Details Aliases - Type string Mandatory yes Default $PIPER_username (if set) Secret yes Configuration scope \u2612 parameter \u2610 general \u2612 steps \u2612 stages Resource references Jenkins credential id: id: cfCredentialsId reference to: username Vault resource: name: cloudfoundryVaultSecretName default value: cloudfoundry-$(org)-$(space) Vault paths: $(vaultPath)/cloudfoundry-$(org)-$(space) $(vaultBasePath)/$(vaultPipelineName)/cloudfoundry-$(org)-$(space) $(vaultBasePath)/GROUP-SECRETS/cloudfoundry-$(org)-$(space) verbose \u00b6 verbose output back to overview Scope Details Aliases - Type bool Mandatory no Default false Possible values - true - false Secret no Configuration scope \u2612 parameter \u2612 general \u2612 steps \u2612 stages Resource references none cfCredentialsId \u00b6 Jenkins 'Username with password' credentials ID containing user and password to authenticate to the Cloud Foundry API. back to overview Scope Details Aliases cloudFoundry/credentialsId ( deprecated ) Type string Configuration scope \u2612 parameter \u2612 general \u2612 steps \u2612 stages dockerCredentialsId \u00b6 Jenkins 'Username with password' credentials ID containing user and password to authenticate to the Docker registry. back to overview Scope Details Aliases - Type string Configuration scope \u2612 parameter \u2612 general \u2612 steps \u2612 stages","title":"cloudFoundryDeploy"},{"location":"steps/cloudFoundryDeploy/#cloudfoundrydeploy","text":"Deploys an application to Cloud Foundry","title":"cloudFoundryDeploy"},{"location":"steps/cloudFoundryDeploy/#description","text":"Deploys an application to a test or production space within Cloud Foundry. This step supports two deployment types: in a standard way in a zero-downtime manner using a blue-green deployment approach The step achieves this via following deploy tools * cf CLI - used as default for Non MTA apps * MTA CF CLI Plugin - used as default for MTA apps","title":"Description"},{"location":"steps/cloudFoundryDeploy/#usage","text":"We recommend to define values of step parameters via .pipeline/config.yml file . In this case, calling the step is essentially reduced to defining the step name. Calling the step can be done either in an orchestrator specific way (e.g. via a Jenkins library step) or on the command line. Jenkins Command Line library ( 'piper-lib-os' ) cloudFoundryDeploy script: this piper cloudFoundryDeploy","title":"Usage"},{"location":"steps/cloudFoundryDeploy/#outputs","text":"Output type Details influx measurement deployment_data artifactUrl deployTime commitHash jobTrigger","title":"Outputs"},{"location":"steps/cloudFoundryDeploy/#additional-hints","text":"","title":"Additional Hints"},{"location":"steps/cloudFoundryDeploy/#standard-cf-deployments","text":"deployType parameter defaults to value standard . This means that CF CLI is called by piper and command cf push is run by piper","title":"Standard CF deployments"},{"location":"steps/cloudFoundryDeploy/#blue-green-deployments","text":"With CF CLI Blue green deployments are deprecated, but rolling deployment strategy is supported. For rolling deployment strategy , set parameter cfNativeDeployParameters:'--strategy rolling' With MTA CF CLI Plugin for MTA applications The Multiapps Plugin offers 2 different strategies: Blue-Green Deployment Strategy - where the production environments are called \u201clive\u201d and \u201cidle\u201d during deployment. This strategy is activated with mtaDeployParameters: --strategy blue-green --skip-testing-phase and deployType=standard . After deployment, appnames are not appeneded by any suffix like -live or -idle . Legacy Blue-Green Deployment - where the productive environments are called \u201cblue\u201d and \u201cgreen. Activated by deployType=blue-green . After deployment, appnames are appeneded by suffix like -blue or -green Following table summarizes the different combinations of the step parameters deployType and deployTool and their impact. Parameter buildTool is used to differentiate between MTA and Non MTA applications. If buildTool is not available in the environment, user will have to provide deployTool explicitly.","title":"Blue green deployments"},{"location":"steps/cloudFoundryDeploy/#deployment-strategy-comparison","text":"This table compares deployment strategies for MTA and Non-MTA applications. deployType MTA Applications Non MTA Applications standard deployTool = mtaDeployPlugin Uses MTA plugin, Command run cf deploy deployTool = cf_native cf CLI used Command cf push Requires Manifest file and app name appname can be provided via config or manifest file. blue-green deployTool = mtaDeployPlugin, Uses MTA plugin Command run cf deploy bgdeploy Deprecated. Alternative: Rolling deployment strategy by setting cfNativeDeployParameters = '--strategy rolling' deployDockerImage not supported deployDockerImage supported Docker credentials can only be provided as Jenkins environment variable. !!! note Due to an incompatible change in the Cloud Foundry CLI, multiple buildpacks are not supported by this step. If your application contains a list of buildpacks instead of a single buildpack , this will be automatically re-written by the step when blue-green deployment is used. Cloud Foundry supports the deployment of multiple applications using a single manifest file. This option is supported with project \"Piper\". In this case, define appName: '' since the app name for the individual applications has to be defined via the manifest. You can find details in the Cloud Foundry Documentation Recommended way to do docker image deployments is via kubernetesDeploy Piper step.This step is not capable of deploying docker images built in the same pipeline using other piper steps[i.e., kanikoExecute].","title":"Deployment Strategy Comparison"},{"location":"steps/cloudFoundryDeploy/#prerequisites","text":"Cloud Foundry organization, space and deployment users are available Credentials for deployment have been configured in Jenkins or Vault.","title":"Prerequisites"},{"location":"steps/cloudFoundryDeploy/#parameters","text":"","title":"Parameters"},{"location":"steps/cloudFoundryDeploy/#overview-step","text":"Name Mandatory Additional information org yes password (yes) pass via ENV, Vault or Jenkins credentials ( cfCredentialsId ) script (yes) reference to Jenkins main pipeline script space yes username (yes) pass via ENV, Vault or Jenkins credentials ( cfCredentialsId ) apiEndpoint no appName no artifactVersion no buildTool no cfHome no cfNativeDeployParameters no cfPluginHome no commitHash no deployDockerImage no deployTool no deployType no dockerPassword no pass via ENV or Jenkins credentials ( dockerCredentialsId ) dockerUsername no pass via ENV or Jenkins credentials ( dockerCredentialsId ) keepOldInstance no loginParameters no manifest no manifestVariables no manifestVariablesFiles no mtaDeployParameters no mtaExtensionCredentials no mtaExtensionDescriptor no mtaPath no verbose no activates debug output","title":"Overview - Step"},{"location":"steps/cloudFoundryDeploy/#overview-execution-environment","text":"Orchestrator-specific only These parameters are relevant for orchestrator usage and not considered when using the command line option. Name Mandatory Additional information containerCommand no containerShell no dockerEnvVars no dockerImage no dockerName no dockerOptions no dockerPullImage no dockerVolumeBind no dockerWorkspace no","title":"Overview - Execution Environment"},{"location":"steps/cloudFoundryDeploy/#details","text":"","title":"Details"},{"location":"steps/cloudFoundryDeploy/#apiendpoint","text":"Cloud Foundry API endpoint back to overview Scope Details Aliases - cfApiEndpoint - cloudFoundry/apiEndpoint ( deprecated ) Type string Mandatory no Default https://api.cf.eu10.hana.ondemand.com Secret no Configuration scope \u2612 parameter \u2612 general \u2612 steps \u2612 stages Resource references none","title":"apiEndpoint"},{"location":"steps/cloudFoundryDeploy/#appname","text":"Defines the name of the application to be deployed to the Cloud Foundry space back to overview Scope Details Aliases - cfAppName - cloudFoundry/appName ( deprecated ) Type string Mandatory no Default $PIPER_appName (if set) Secret no Configuration scope \u2612 parameter \u2612 general \u2612 steps \u2612 stages Resource references none","title":"appName"},{"location":"steps/cloudFoundryDeploy/#artifactversion","text":"The artifact version, used for influx reporting back to overview Scope Details Aliases - Type string Mandatory no Default $PIPER_artifactVersion (if set) Secret no Configuration scope \u2612 parameter \u2612 general \u2612 steps \u2612 stages Resource references commonPipelineEnvironment : reference to: artifactVersion","title":"artifactVersion"},{"location":"steps/cloudFoundryDeploy/#buildtool","text":"Defines the tool which is used for building the artifact. If provided, deployTool is automatically derived from it. For MTA projects, deployTool defaults to mtaDeployPlugin . For other projects cf_native will be used. back to overview Scope Details Aliases - Type string Mandatory no Default $PIPER_buildTool (if set) Secret no Configuration scope \u2612 parameter \u2612 general \u2612 steps \u2612 stages Resource references commonPipelineEnvironment : reference to: buildTool","title":"buildTool"},{"location":"steps/cloudFoundryDeploy/#cfhome","text":"The cf home folder used by the cf cli. If not provided the default assumed by the cf cli is used. back to overview Scope Details Aliases - Type string Mandatory no Default $PIPER_cfHome (if set) Secret no Configuration scope \u2612 parameter \u2612 general \u2612 steps \u2612 stages Resource references none","title":"cfHome"},{"location":"steps/cloudFoundryDeploy/#cfnativedeployparameters","text":"Additional parameters passed to cf native deployment command back to overview Scope Details Aliases - Type string Mandatory no Default $PIPER_cfNativeDeployParameters (if set) Secret no Configuration scope \u2612 parameter \u2612 general \u2612 steps \u2612 stages Resource references none","title":"cfNativeDeployParameters"},{"location":"steps/cloudFoundryDeploy/#cfpluginhome","text":"The cf plugin home folder used by the cf cli. If not provided the default assumed by the cf cli is used. back to overview Scope Details Aliases - Type string Mandatory no Default $PIPER_cfPluginHome (if set) Secret no Configuration scope \u2612 parameter \u2612 general \u2612 steps \u2612 stages Resource references none","title":"cfPluginHome"},{"location":"steps/cloudFoundryDeploy/#commithash","text":"The commit hash, used for influx reporting back to overview Scope Details Aliases - Type string Mandatory no Default $PIPER_commitHash (if set) Secret no Configuration scope \u2612 parameter \u2612 general \u2612 steps \u2612 stages Resource references commonPipelineEnvironment : reference to: git/headCommitId","title":"commitHash"},{"location":"steps/cloudFoundryDeploy/#containercommand","text":"Jenkins-specific: Used for proper environment setup. Kubernetes only: Allows to specify start command for container created with dockerImage parameter to overwrite Piper default (/usr/bin/tail -f /dev/null). back to overview Scope Details Aliases - Type string Mandatory no Default Secret no Configuration scope \u2612 parameter \u2612 general \u2612 steps \u2612 stages Resource references none","title":"containerCommand"},{"location":"steps/cloudFoundryDeploy/#containershell","text":"Jenkins-specific: Used for proper environment setup. Allows to specify the shell to be executed for container with containerName. back to overview Scope Details Aliases - Type string Mandatory no Default Secret no Configuration scope \u2612 parameter \u2612 general \u2612 steps \u2612 stages Resource references none","title":"containerShell"},{"location":"steps/cloudFoundryDeploy/#deploydockerimage","text":"Docker image deployments are supported via manifest file in general . If no manifest is used, this parameter defines the image to be deployed. The specified name of the image is passed to the --docker-image parameter of the cf CLI and must adhere it's naming pattern (e.g. REPO/IMAGE:TAG). See cf CLI documentation x x for details. Note: The used Docker registry must be visible for the targeted Cloud Foundry instance. back to overview Scope Details Aliases - Type string Mandatory no Default $PIPER_deployDockerImage (if set) Secret no Configuration scope \u2612 parameter \u2612 general \u2612 steps \u2612 stages Resource references none","title":"deployDockerImage"},{"location":"steps/cloudFoundryDeploy/#deploytool","text":"Defines the tool which should be used for deployment. Mandatory if buildTool is not found in pipeline environment back to overview Scope Details Aliases - Type string Mandatory no Default $PIPER_deployTool (if set) Secret no Configuration scope \u2612 parameter \u2612 general \u2612 steps \u2612 stages Resource references none","title":"deployTool"},{"location":"steps/cloudFoundryDeploy/#deploytype","text":"Defines the type of deployment - standard or blue-green deployment. For mta build tool, possible values are standard , blue-green or bg-deploy . For cf native build tools, possible value is standard . To eliminate system downtime, an alternative is to pass '--strategy rolling' to the parameter cfNativeDeployParameters . back to overview Scope Details Aliases - Type string Mandatory no Default standard Secret no Configuration scope \u2612 parameter \u2612 general \u2612 steps \u2612 stages Resource references none","title":"deployType"},{"location":"steps/cloudFoundryDeploy/#dockerenvvars","text":"Environment variables to set in the container, e.g. [http_proxy: \"proxy:8080\"]. back to overview Scope Details Aliases - Type map[string]string Mandatory no Default Secret no Configuration scope \u2612 parameter \u2612 general \u2612 steps \u2612 stages Resource references none","title":"dockerEnvVars"},{"location":"steps/cloudFoundryDeploy/#dockerimage","text":"Name of the docker image that should be used. If empty, Docker is not used and the command is executed directly on the Jenkins system. back to overview Scope Details Aliases - Type string Mandatory no Default ppiper/cf-cli:latest Secret no Configuration scope \u2612 parameter \u2612 general \u2612 steps \u2612 stages Resource references none","title":"dockerImage"},{"location":"steps/cloudFoundryDeploy/#dockername","text":"Kubernetes only: Name of the container launching dockerImage. SideCar only: Name of the container in local network. back to overview Scope Details Aliases - Type string Mandatory no Default cfDeploy Secret no Configuration scope \u2612 parameter \u2612 general \u2612 steps \u2612 stages Resource references none","title":"dockerName"},{"location":"steps/cloudFoundryDeploy/#dockeroptions","text":"Docker options to be set when starting the container. back to overview Scope Details Aliases - Type []string Mandatory no Default [{--ulimit stack=67108864:67108864} {--ulimit nofile=65536:65536}] Secret no Configuration scope \u2612 parameter \u2612 general \u2612 steps \u2612 stages Resource references none","title":"dockerOptions"},{"location":"steps/cloudFoundryDeploy/#dockerpassword","text":"If the specified image in deployDockerImage is contained in a Docker registry, which requires authorization, this defines the password to be used. back to overview Scope Details Aliases - Type string Mandatory no Default $PIPER_dockerPassword (if set) Secret yes Configuration scope \u2612 parameter \u2610 general \u2612 steps \u2612 stages Resource references Jenkins credential id: id: dockerCredentialsId reference to: password","title":"dockerPassword"},{"location":"steps/cloudFoundryDeploy/#dockerpullimage","text":"Set this to 'false' to bypass a docker image pull. Useful during development process. Allows testing of images which are available in the local registry only. back to overview Scope Details Aliases - Type bool Mandatory no Default true Possible values - true - false Secret no Configuration scope \u2612 parameter \u2612 general \u2612 steps \u2612 stages Resource references none","title":"dockerPullImage"},{"location":"steps/cloudFoundryDeploy/#dockerusername","text":"If the specified image in deployDockerImage is contained in a Docker registry, which requires authorization, this defines the username to be used. back to overview Scope Details Aliases - Type string Mandatory no Default $PIPER_dockerUsername (if set) Secret yes Configuration scope \u2612 parameter \u2610 general \u2612 steps \u2612 stages Resource references Jenkins credential id: id: dockerCredentialsId reference to: username","title":"dockerUsername"},{"location":"steps/cloudFoundryDeploy/#dockervolumebind","text":"Jenkins-specific: Used for proper environment setup. Volumes that should be mounted into the docker container. back to overview Scope Details Aliases - Type map[string]string Mandatory no Default Secret no Configuration scope \u2612 parameter \u2612 general \u2612 steps \u2612 stages Resource references none","title":"dockerVolumeBind"},{"location":"steps/cloudFoundryDeploy/#dockerworkspace","text":"Jenkins-specific: Used for proper environment setup. Kubernetes only: Specifies a dedicated user home directory for the container which will be passed as value for environment variable HOME . back to overview Scope Details Aliases - Type string Mandatory no Default Secret no Configuration scope \u2612 parameter \u2612 general \u2612 steps \u2612 stages Resource references none","title":"dockerWorkspace"},{"location":"steps/cloudFoundryDeploy/#keepoldinstance","text":"If this option is set to true the old instance will remain stopped in the Cloud Foundry space.\" back to overview Scope Details Aliases - Type bool Mandatory no Default false Possible values - true - false Secret no Configuration scope \u2612 parameter \u2610 general \u2612 steps \u2612 stages Resource references none","title":"keepOldInstance"},{"location":"steps/cloudFoundryDeploy/#loginparameters","text":"Addition command line options for cf login command. No escaping/quoting is performed. Not recommended for productive environments. back to overview Scope Details Aliases - Type string Mandatory no Default $PIPER_loginParameters (if set) Secret no Configuration scope \u2612 parameter \u2612 general \u2612 steps \u2612 stages Resource references none","title":"loginParameters"},{"location":"steps/cloudFoundryDeploy/#manifest","text":"Defines the manifest file name to be used for deployment to Cloud Foundry. Defaults to manifest.yml back to overview Scope Details Aliases - cfManifest - cloudFoundry/manifest ( deprecated ) Type string Mandatory no Default $PIPER_manifest (if set) Secret no Configuration scope \u2612 parameter \u2612 general \u2612 steps \u2612 stages Resource references none","title":"manifest"},{"location":"steps/cloudFoundryDeploy/#manifestvariables","text":"Defines a list of variables in the form key=value which are used for variable substitution within the file given by manifest. This can be used to set variables like it is provided by 'cf push --var key=value'. Note: variables defined via 'manifestVariables' always win over conflicting variables defined via any file given by 'manifestVariablesFiles' - no matter what is declared before. This is the same behavior as can be observed when using 'cf push --var' in combination with 'cf push --vars-file'.\" Example: ... cloudFoundryDeploy: manifestVariables: - 'key1=value1' - 'key2=value2' ... back to overview Scope Details Aliases - cfManifestVariables - cloudFoundry/manifestVariables ( deprecated ) Type []string Mandatory no Default $PIPER_manifestVariables (if set) Secret no Configuration scope \u2612 parameter \u2612 general \u2612 steps \u2612 stages Resource references none","title":"manifestVariables"},{"location":"steps/cloudFoundryDeploy/#manifestvariablesfiles","text":"path(s) of the Yaml file(s) containing the variable values to use as a replacement in the manifest file. The order of the files is relevant in case there are conflicting variable names and values within variable files. In such a case, the values of the last file win. back to overview Scope Details Aliases - cfManifestVariablesFiles - cloudFoundry/manifestVariablesFiles ( deprecated ) Type []string Mandatory no Default - manifest-variables.yml Secret no Configuration scope \u2612 parameter \u2612 general \u2612 steps \u2612 stages Resource references none","title":"manifestVariablesFiles"},{"location":"steps/cloudFoundryDeploy/#mtadeployparameters","text":"Additional parameters passed to mta deployment command back to overview Scope Details Aliases - Type string Mandatory no Default -f Secret no Configuration scope \u2612 parameter \u2612 general \u2612 steps \u2612 stages Resource references none","title":"mtaDeployParameters"},{"location":"steps/cloudFoundryDeploy/#mtaextensioncredentials","text":"Defines a map of credentials that need to be replaced in the mtaExtensionDescriptor . This map needs to be created as value-to-be-replaced : id-of-a-credential-in-jenkins . The placeholders in the extension descriptor file(s) looks like: <%= value-to-be-replaced %> . When used outside Jenkins the secret which corresponds to id-of-a-credential-in-jenkins needs to be provided as environment variable in screaming snake case, e.g.: export ID_OF_A_CREDENTIAL_IN_JENKINS=<secret> . id-of-a-credential-in-jenkins needs to be provided in a way so that it can be translated into a valid environment variable name (e.g. don't start with a number). value-to-be-replaced must match this regex: ^[-_A-Za-z0-9]+$ . back to overview Scope Details Aliases cloudFoundry/mtaExtensionCredentials ( deprecated ) Type map[string]interface{} Mandatory no Default $PIPER_mtaExtensionCredentials (if set) Secret no Configuration scope \u2612 parameter \u2612 general \u2612 steps \u2612 stages Resource references none","title":"mtaExtensionCredentials"},{"location":"steps/cloudFoundryDeploy/#mtaextensiondescriptor","text":"Defines additional extension descriptor file for deployment with the mtaDeployPlugin back to overview Scope Details Aliases cloudFoundry/mtaExtensionDescriptor ( deprecated ) Type string Mandatory no Default $PIPER_mtaExtensionDescriptor (if set) Secret no Configuration scope \u2612 parameter \u2612 general \u2612 steps \u2612 stages Resource references none","title":"mtaExtensionDescriptor"},{"location":"steps/cloudFoundryDeploy/#mtapath","text":"Defines the path to *.mtar for deployment with the mtaDeployPlugin back to overview Scope Details Aliases - Type string Mandatory no Default $PIPER_mtaPath (if set) Secret no Configuration scope \u2612 parameter \u2612 general \u2612 steps \u2612 stages Resource references commonPipelineEnvironment : reference to: mtarFilePath","title":"mtaPath"},{"location":"steps/cloudFoundryDeploy/#org","text":"Cloud Foundry target organization. back to overview Scope Details Aliases - cfOrg - cloudFoundry/org ( deprecated ) Type string Mandatory yes Default $PIPER_org (if set) Secret no Configuration scope \u2612 parameter \u2612 general \u2612 steps \u2612 stages Resource references none","title":"org"},{"location":"steps/cloudFoundryDeploy/#password","text":"Password back to overview Scope Details Aliases - Type string Mandatory yes Default $PIPER_password (if set) Secret yes Configuration scope \u2612 parameter \u2610 general \u2612 steps \u2612 stages Resource references Jenkins credential id: id: cfCredentialsId reference to: password Vault resource: name: cloudfoundryVaultSecretName default value: cloudfoundry-$(org)-$(space) Vault paths: $(vaultPath)/cloudfoundry-$(org)-$(space) $(vaultBasePath)/$(vaultPipelineName)/cloudfoundry-$(org)-$(space) $(vaultBasePath)/GROUP-SECRETS/cloudfoundry-$(org)-$(space)","title":"password"},{"location":"steps/cloudFoundryDeploy/#script","text":"The common script environment of the Jenkinsfile running. Typically the reference to the script calling the pipeline step is provided with the this parameter, as in script: this . This allows the function to access the commonPipelineEnvironment for retrieving, e.g. configuration parameters. back to overview Scope Details Aliases - Type Jenkins Script Mandatory yes Default Secret no Configuration scope \u2610 parameter \u2610 general \u2610 steps \u2610 stages Resource references none","title":"script"},{"location":"steps/cloudFoundryDeploy/#space","text":"Cloud Foundry target space back to overview Scope Details Aliases - cfSpace - cloudFoundry/space ( deprecated ) Type string Mandatory yes Default $PIPER_space (if set) Secret no Configuration scope \u2612 parameter \u2612 general \u2612 steps \u2612 stages Resource references none","title":"space"},{"location":"steps/cloudFoundryDeploy/#username","text":"User name used for deployment back to overview Scope Details Aliases - Type string Mandatory yes Default $PIPER_username (if set) Secret yes Configuration scope \u2612 parameter \u2610 general \u2612 steps \u2612 stages Resource references Jenkins credential id: id: cfCredentialsId reference to: username Vault resource: name: cloudfoundryVaultSecretName default value: cloudfoundry-$(org)-$(space) Vault paths: $(vaultPath)/cloudfoundry-$(org)-$(space) $(vaultBasePath)/$(vaultPipelineName)/cloudfoundry-$(org)-$(space) $(vaultBasePath)/GROUP-SECRETS/cloudfoundry-$(org)-$(space)","title":"username"},{"location":"steps/cloudFoundryDeploy/#verbose","text":"verbose output back to overview Scope Details Aliases - Type bool Mandatory no Default false Possible values - true - false Secret no Configuration scope \u2612 parameter \u2612 general \u2612 steps \u2612 stages Resource references none","title":"verbose"},{"location":"steps/cloudFoundryDeploy/#cfcredentialsid","text":"Jenkins 'Username with password' credentials ID containing user and password to authenticate to the Cloud Foundry API. back to overview Scope Details Aliases cloudFoundry/credentialsId ( deprecated ) Type string Configuration scope \u2612 parameter \u2612 general \u2612 steps \u2612 stages","title":"cfCredentialsId"},{"location":"steps/cloudFoundryDeploy/#dockercredentialsid","text":"Jenkins 'Username with password' credentials ID containing user and password to authenticate to the Docker registry. back to overview Scope Details Aliases - Type string Configuration scope \u2612 parameter \u2612 general \u2612 steps \u2612 stages","title":"dockerCredentialsId"},{"location":"steps/cnbBuild/","text":"cnbBuild \u00b6 Executes Cloud Native Buildpacks. Description \u00b6 Executes a Cloud Native Buildpacks build for creating Docker image(s). Important: Please note, that the cnbBuild step is in beta state, and there could be breaking changes before we remove the beta notice. Usage \u00b6 We recommend to define values of step parameters via .pipeline/config.yml file . In this case, calling the step is essentially reduced to defining the step name. Calling the step can be done either in an orchestrator specific way (e.g. via a Jenkins library step) or on the command line. Jenkins Command Line library ( 'piper-lib-os' ) cnbBuild script: this piper cnbBuild Outputs \u00b6 Output type Details commonPipelineEnvironment container/registryUrl container/imageDigest container/imageNameTag container/imageNames container/imageNameTags container/imageDigests custom/buildSettingsInfo see Examples Prerequisites \u00b6 When pushing to a container registry, you need to maintain the respective credentials in your Jenkins credentials store: cnbBuild expects a Docker config.json file containing the credential information for registries. You can create it like explained in the protocodeExecuteScan Prerequisites section . Please copy this file and upload it to your Jenkins for example via Jenkins -> Credentials -> System -> Global credentials (unrestricted) -> Add Credentials -> Kind: Secret file File: upload your config.json file ID: specify id which you then use for the configuration of dockerConfigJsonCredentialsId (see below) Parameters \u00b6 Overview - Step \u00b6 Name Mandatory Additional information containerImageTag yes containerRegistryUrl yes script (yes) reference to Jenkins main pipeline script additionalTags no bindings no buildEnvVars no buildSettingsInfo no buildpacks no containerImageAlias no containerImageName no createBOM no customTlsCertificateLinks no defaultProcess no dockerConfigJSON no pass via ENV, Vault or Jenkins credentials ( dockerConfigJsonCredentialsId ) dockerConfigJSONCPE no pass via ENV or Jenkins credentials expandBuildEnvVars no multipleImages no path no postBuildpacks no preBuildpacks no preserveFiles no projectDescriptor no runImage no syftDownloadUrl no verbose no activates debug output Overview - Execution Environment \u00b6 Orchestrator-specific only These parameters are relevant for orchestrator usage and not considered when using the command line option. Name Mandatory Additional information containerCommand no containerShell no dockerEnvVars no dockerImage no dockerName no dockerOptions no dockerPullImage no dockerVolumeBind no dockerWorkspace no Details \u00b6 additionalTags \u00b6 List of tags which will be pushed to the registry (additionally to the provided containerImageTag ), e.g. \"latest\". back to overview Scope Details Aliases - Type []string Mandatory no Default $PIPER_additionalTags (if set) Secret no Configuration scope \u2612 parameter \u2610 general \u2612 steps \u2612 stages Resource references none bindings \u00b6 Map of bindings that should be offered to the buildpack. The type of bindings depend on the buildpack. For documentation about bindings in general see the paketo documentation . Example: Custom maven settings.xml for the Java Buildpack bindings : maven-settings : type : maven data : - key : settings.xml file : path/to/settings.xml inline: bindings : maven-settings : type : maven data : - key : settings.xml content : \"inline settings.xml\" from url: bindings : maven-settings : type : maven data : - key : settings.xml fromUrl : https://url-to/setting.xml using Vault general purpose credentials : bindings : dynatrace : type : Dynatrace data : - key : api-token vaultCredentialKey : dynatrace-api-token vaultCredentialPath : cnb-bindings vaultCredentialKeys : [ 'dynatrace-api-token' ] Deprecated: A binding with a single key, could be written like this: bindings : maven-settings : type : maven key : settings.xml file : path/to/settings.xml back to overview Scope Details Aliases - Type map[string]interface{} Mandatory no Default $PIPER_bindings (if set) Secret no Configuration scope \u2612 parameter \u2610 general \u2612 steps \u2612 stages Resource references none buildEnvVars \u00b6 Map of custom environment variables used during a build. Example: buildEnvVars : foo : bar back to overview Scope Details Aliases - Type map[string]interface{} Mandatory no Default $PIPER_buildEnvVars (if set) Secret no Configuration scope \u2612 parameter \u2610 general \u2612 steps \u2612 stages Resource references none buildSettingsInfo \u00b6 Build settings info is typically filled by the step automatically to create information about the build settings that were used during the mta build. This information is typically used for compliance related processes. back to overview Scope Details Aliases - Type string Mandatory no Default $PIPER_buildSettingsInfo (if set) Secret no Configuration scope \u2612 parameter \u2610 general \u2612 steps \u2612 stages Resource references commonPipelineEnvironment : reference to: custom/buildSettingsInfo buildpacks \u00b6 List of custom buildpacks to use in the form of $HOSTNAME/$REPO[:$TAG] . When this property is specified, buildpacks which are part of the builder will be ignored. back to overview Scope Details Aliases - Type []string Mandatory no Default $PIPER_buildpacks (if set) Secret no Configuration scope \u2612 parameter \u2610 general \u2612 steps \u2612 stages Resource references commonPipelineEnvironment : reference to: container/buildpacks containerCommand \u00b6 Jenkins-specific: Used for proper environment setup. Kubernetes only: Allows to specify start command for container created with dockerImage parameter to overwrite Piper default (/usr/bin/tail -f /dev/null). back to overview Scope Details Aliases - Type string Mandatory no Default Secret no Configuration scope \u2612 parameter \u2612 general \u2612 steps \u2612 stages Resource references none containerImageAlias \u00b6 Logical name used for this image. back to overview Scope Details Aliases - Type string Mandatory no Default $PIPER_containerImageAlias (if set) Secret no Configuration scope \u2612 parameter \u2612 general \u2612 steps \u2612 stages Resource references none containerImageName \u00b6 Name of the container which will be built cnbBuild step will try to identify a containerImageName using the following precedence: containerImageName parameter. project.id field of a project.toml file. git/repository parameter of the commonPipelineEnvironment . github/repository parameter of the commonPipelineEnvironment . If none of the above was found - an error will be raised. back to overview Scope Details Aliases dockerImageName Type string Mandatory no Default $PIPER_containerImageName (if set) Secret no Configuration scope \u2612 parameter \u2612 general \u2612 steps \u2612 stages Resource references none containerImageTag \u00b6 Tag of the container which will be built back to overview Scope Details Aliases artifactVersion Type string Mandatory yes Default $PIPER_containerImageTag (if set) Secret no Configuration scope \u2612 parameter \u2612 general \u2612 steps \u2612 stages Resource references commonPipelineEnvironment : reference to: artifactVersion commonPipelineEnvironment : reference to: git/commitId containerRegistryUrl \u00b6 Container registry where the image should be pushed to. Note : containerRegistryUrl should include only the domain. If you want to publish an image under docker.io/example/my-image , you must set containerRegistryUrl: \"docker.io\" and containerImageName: \"example/my-image\" . back to overview Scope Details Aliases dockerRegistryUrl Type string Mandatory yes Default $PIPER_containerRegistryUrl (if set) Secret no Configuration scope \u2612 parameter \u2612 general \u2612 steps \u2612 stages Resource references commonPipelineEnvironment : reference to: container/registryUrl containerShell \u00b6 Jenkins-specific: Used for proper environment setup. Allows to specify the shell to be executed for container with containerName. back to overview Scope Details Aliases - Type string Mandatory no Default Secret no Configuration scope \u2612 parameter \u2612 general \u2612 steps \u2612 stages Resource references none createBOM \u00b6 Creates the bill of materials (BOM) using Syft and stores it in a file in CycloneDX 1.4 format. back to overview Scope Details Aliases - Type bool Mandatory no Default false Possible values - true - false Secret no Configuration scope \u2612 parameter \u2612 general \u2612 steps \u2612 stages Resource references none customTlsCertificateLinks \u00b6 List containing download links of custom TLS certificates. This is required to ensure trusted connections to registries with custom certificates. back to overview Scope Details Aliases - Type []string Mandatory no Default $PIPER_customTlsCertificateLinks (if set) Secret no Configuration scope \u2612 parameter \u2610 general \u2612 steps \u2612 stages Resource references none defaultProcess \u00b6 Process that should be started by default. See https://buildpacks.io/docs/app-developer-guide/run-an-app/ back to overview Scope Details Aliases - Type string Mandatory no Default $PIPER_defaultProcess (if set) Secret no Configuration scope \u2612 parameter \u2612 general \u2612 steps \u2612 stages Resource references none dockerConfigJSON \u00b6 Path to the file .docker/config.json - this is typically provided by your CI/CD system. You can find more details about the Docker credentials in the Docker documentation . back to overview Scope Details Aliases - Type string Mandatory no Default $PIPER_dockerConfigJSON (if set) Secret yes Configuration scope \u2612 parameter \u2610 general \u2610 steps \u2610 stages Resource references Jenkins credential id: id: dockerConfigJsonCredentialsId Vault resource: name: dockerConfigFileVaultSecretName default value: docker-config Vault paths: $(vaultPath)/docker-config $(vaultBasePath)/$(vaultPipelineName)/docker-config $(vaultBasePath)/GROUP-SECRETS/docker-config dockerConfigJSONCPE \u00b6 This property is intended only for reading the dockerConfigJSON from the Common Pipeline Environment. If you want to provide your own credentials, please refer to the dockerConfigJSON property. If both properties are set, the config files will be merged, with the dockerConfigJSON having higher priority. back to overview Scope Details Aliases - Type string Mandatory no Default $PIPER_dockerConfigJSONCPE (if set) Secret yes Configuration scope \u2610 parameter \u2610 general \u2610 steps \u2610 stages Resource references commonPipelineEnvironment : reference to: custom/dockerConfigJSON dockerEnvVars \u00b6 Environment variables to set in the container, e.g. [http_proxy: \"proxy:8080\"]. back to overview Scope Details Aliases - Type map[string]string Mandatory no Default Secret no Configuration scope \u2612 parameter \u2612 general \u2612 steps \u2612 stages Resource references none dockerImage \u00b6 Name of the docker image that should be used. If empty, Docker is not used and the command is executed directly on the Jenkins system. back to overview Scope Details Aliases - Type string Mandatory no Default paketobuildpacks/builder-jammy-base:latest Secret no Configuration scope \u2612 parameter \u2612 general \u2612 steps \u2612 stages Resource references none dockerName \u00b6 Kubernetes only: Name of the container launching dockerImage. SideCar only: Name of the container in local network. back to overview Scope Details Aliases - Type string Mandatory no Default Secret no Configuration scope \u2612 parameter \u2612 general \u2612 steps \u2612 stages Resource references none dockerOptions \u00b6 Docker options to be set when starting the container. back to overview Scope Details Aliases - Type []string Mandatory no Default [{-u 0}] Secret no Configuration scope \u2612 parameter \u2612 general \u2612 steps \u2612 stages Resource references none dockerPullImage \u00b6 Set this to 'false' to bypass a docker image pull. Useful during development process. Allows testing of images which are available in the local registry only. back to overview Scope Details Aliases - Type bool Mandatory no Default true Possible values - true - false Secret no Configuration scope \u2612 parameter \u2612 general \u2612 steps \u2612 stages Resource references none dockerVolumeBind \u00b6 Jenkins-specific: Used for proper environment setup. Volumes that should be mounted into the docker container. back to overview Scope Details Aliases - Type map[string]string Mandatory no Default Secret no Configuration scope \u2612 parameter \u2612 general \u2612 steps \u2612 stages Resource references none dockerWorkspace \u00b6 Jenkins-specific: Used for proper environment setup. Kubernetes only: Specifies a dedicated user home directory for the container which will be passed as value for environment variable HOME . back to overview Scope Details Aliases - Type string Mandatory no Default Secret no Configuration scope \u2612 parameter \u2612 general \u2612 steps \u2612 stages Resource references none expandBuildEnvVars \u00b6 Expand environment variables used in buildEnvVars . Example: expandBuildEnvVars : true buildEnvVars : foo : ${BAR} back to overview Scope Details Aliases - Type bool Mandatory no Default false Possible values - true - false Secret no Configuration scope \u2612 parameter \u2610 general \u2612 steps \u2612 stages Resource references none multipleImages \u00b6 This parameter is only needed if cnbBuild should create multiple images. Otherwise it can be ignored!!! In case of multiple images, this array contains one entry for each image. That entry can override any parameter from the main section, e.g. containerImageTag : latest containerRegistryUrl : docker.io dockerConfigJsonCredentialsId : CREDENTIALS multipleImages : - containerImageName : example/java-app containerImageAlias : java buildpacks : - \"docker.io/paketobuildpacks/java\" path : \"source/java\" - containerImageName : example/nodejs-app containerImageAlias : nodejs containerImageTag : v1.0.0 buildpacks : - \"docker.io/paketobuildpacks/nodejs\" path : \"source/nodejs\" back to overview Scope Details Aliases images Type []map[string]interface{} Mandatory no Default $PIPER_multipleImages (if set) Secret no Configuration scope \u2612 parameter \u2610 general \u2612 steps \u2612 stages Resource references none path \u00b6 Glob that should either point to a directory with your sources or one artifact in zip format. This property determines the input to the buildpack. back to overview Scope Details Aliases - Type string Mandatory no Default $PIPER_path (if set) Secret no Configuration scope \u2612 parameter \u2610 general \u2612 steps \u2612 stages Resource references none postBuildpacks \u00b6 Buildpacks to append to the groups in the builder's order. back to overview Scope Details Aliases - Type []string Mandatory no Default $PIPER_postBuildpacks (if set) Secret no Configuration scope \u2612 parameter \u2610 general \u2612 steps \u2612 stages Resource references commonPipelineEnvironment : reference to: container/postBuildpacks preBuildpacks \u00b6 Buildpacks to prepend to the groups in the builder's order. back to overview Scope Details Aliases - Type []string Mandatory no Default $PIPER_preBuildpacks (if set) Secret no Configuration scope \u2612 parameter \u2610 general \u2612 steps \u2612 stages Resource references commonPipelineEnvironment : reference to: container/preBuildpacks preserveFiles \u00b6 List of globs, for keeping build results in the Jenkins workspace. Note : globs will be calculated relative to the path property. back to overview Scope Details Aliases - Type []string Mandatory no Default $PIPER_preserveFiles (if set) Secret no Configuration scope \u2612 parameter \u2610 general \u2612 steps \u2612 stages Resource references none projectDescriptor \u00b6 Relative path to the project.toml file. See buildpacks.io for the reference. Parameters passed to the cnbBuild step will take precedence over the parameters set in the project.toml file, except the env block. Environment variables declared in a project descriptor file, will be merged with the buildEnvVars property, with the buildEnvVars having a precedence. Note : The project descriptor path should be relative to what is set in the path property. If the path property is pointing to a zip archive (e.g. jar file), project descriptor path will be relative to the root of the workspace. Note : Inline buildpacks (see specification ) are not supported yet. back to overview Scope Details Aliases - Type string Mandatory no Default project.toml Secret no Configuration scope \u2612 parameter \u2610 general \u2612 steps \u2612 stages Resource references none runImage \u00b6 Base image from which application images are built. Will be defaulted to the image provided by the builder. See also https://buildpacks.io/docs/for-app-developers/concepts/base-images/. back to overview Scope Details Aliases - Type string Mandatory no Default $PIPER_runImage (if set) Secret no Configuration scope \u2612 parameter \u2612 general \u2612 steps \u2612 stages Resource references none script \u00b6 The common script environment of the Jenkinsfile running. Typically the reference to the script calling the pipeline step is provided with the this parameter, as in script: this . This allows the function to access the commonPipelineEnvironment for retrieving, e.g. configuration parameters. back to overview Scope Details Aliases - Type Jenkins Script Mandatory yes Default Secret no Configuration scope \u2610 parameter \u2610 general \u2610 steps \u2610 stages Resource references none syftDownloadUrl \u00b6 Specifies the download url of the Syft Linux amd64 tar binary file. This can be found at https://github.com/anchore/syft/releases/. back to overview Scope Details Aliases - Type string Mandatory no Default https://github.com/anchore/syft/releases/download/v1.22.0/syft_1.22.0_linux_amd64.tar.gz Secret no Configuration scope \u2612 parameter \u2610 general \u2612 steps \u2610 stages Resource references none verbose \u00b6 verbose output back to overview Scope Details Aliases - Type bool Mandatory no Default false Possible values - true - false Secret no Configuration scope \u2612 parameter \u2612 general \u2612 steps \u2612 stages Resource references none dockerConfigJsonCredentialsId \u00b6 Jenkins 'Secret file' credentials ID containing Docker config.json (with registry credential(s)) in the following format: { \"auths\" : { \"$server\" : { \"auth\" : \"base64($username + ':' + $password)\" } } } Example: { \"auths\" : { \"example.com\" : { \"auth\" : \"dXNlcm5hbWU6cGFzc3dvcmQ=\" } } } back to overview Scope Details Aliases - Type string Configuration scope \u2612 parameter \u2612 general \u2612 steps \u2612 stages Additional hints \u00b6 To run the cnbBuild with a different builder, you can specify the dockerImage parameter. Without specifying it, the step will run with the paketobuildpacks/builder:base builder. Default Excludes \u00b6 When building images, these files/folders are excluded from the build by default: Piper binary: piper Piper configuration folder: .pipeline Git folder: .git This behavior can be overwritten by using the respective sections in project.toml . Keep in mind that by doing so, no default excludes will be applied by the cnbBuild step at all. Examples \u00b6 Example 1: simple usage \u00b6 cnbBuild ( script: this , dockerConfigJsonCredentialsId: 'DOCKER_REGISTRY_CREDS' , containerImageName: 'images/example' , containerImageTag: 'v0.0.1' , containerRegistryUrl: 'gcr.io' ) Example 2: User provided builder \u00b6 cnbBuild ( script: this , dockerConfigJsonCredentialsId: 'DOCKER_REGISTRY_CREDS' , dockerImage: 'paketobuildpacks/builder:base' , containerImageName: 'images/example' , containerImageTag: 'v0.0.1' , containerRegistryUrl: 'gcr.io' ) Example 3: User provided buildpacks \u00b6 cnbBuild ( script: this , dockerConfigJsonCredentialsId: 'DOCKER_REGISTRY_CREDS' , containerImageName: 'images/example' , containerImageTag: 'v0.0.1' , containerRegistryUrl: 'gcr.io' , buildpacks: [ 'docker.io/paketobuildpacks/nodejs' , 'paketo-community/build-plan' ] ) Example 4: Build environment variables \u00b6 cnbBuild ( script: this , dockerConfigJsonCredentialsId: 'DOCKER_REGISTRY_CREDS' , containerImageName: 'images/example' , containerImageTag: 'v0.0.1' , containerRegistryUrl: 'gcr.io' , buildEnvVars: [ \"FOO\" : \"BAR\" ] )","title":"cnbBuild"},{"location":"steps/cnbBuild/#cnbbuild","text":"Executes Cloud Native Buildpacks.","title":"cnbBuild"},{"location":"steps/cnbBuild/#description","text":"Executes a Cloud Native Buildpacks build for creating Docker image(s). Important: Please note, that the cnbBuild step is in beta state, and there could be breaking changes before we remove the beta notice.","title":"Description"},{"location":"steps/cnbBuild/#usage","text":"We recommend to define values of step parameters via .pipeline/config.yml file . In this case, calling the step is essentially reduced to defining the step name. Calling the step can be done either in an orchestrator specific way (e.g. via a Jenkins library step) or on the command line. Jenkins Command Line library ( 'piper-lib-os' ) cnbBuild script: this piper cnbBuild","title":"Usage"},{"location":"steps/cnbBuild/#outputs","text":"Output type Details commonPipelineEnvironment container/registryUrl container/imageDigest container/imageNameTag container/imageNames container/imageNameTags container/imageDigests custom/buildSettingsInfo see Examples","title":"Outputs"},{"location":"steps/cnbBuild/#prerequisites","text":"When pushing to a container registry, you need to maintain the respective credentials in your Jenkins credentials store: cnbBuild expects a Docker config.json file containing the credential information for registries. You can create it like explained in the protocodeExecuteScan Prerequisites section . Please copy this file and upload it to your Jenkins for example via Jenkins -> Credentials -> System -> Global credentials (unrestricted) -> Add Credentials -> Kind: Secret file File: upload your config.json file ID: specify id which you then use for the configuration of dockerConfigJsonCredentialsId (see below)","title":"Prerequisites"},{"location":"steps/cnbBuild/#parameters","text":"","title":"Parameters"},{"location":"steps/cnbBuild/#overview-step","text":"Name Mandatory Additional information containerImageTag yes containerRegistryUrl yes script (yes) reference to Jenkins main pipeline script additionalTags no bindings no buildEnvVars no buildSettingsInfo no buildpacks no containerImageAlias no containerImageName no createBOM no customTlsCertificateLinks no defaultProcess no dockerConfigJSON no pass via ENV, Vault or Jenkins credentials ( dockerConfigJsonCredentialsId ) dockerConfigJSONCPE no pass via ENV or Jenkins credentials expandBuildEnvVars no multipleImages no path no postBuildpacks no preBuildpacks no preserveFiles no projectDescriptor no runImage no syftDownloadUrl no verbose no activates debug output","title":"Overview - Step"},{"location":"steps/cnbBuild/#overview-execution-environment","text":"Orchestrator-specific only These parameters are relevant for orchestrator usage and not considered when using the command line option. Name Mandatory Additional information containerCommand no containerShell no dockerEnvVars no dockerImage no dockerName no dockerOptions no dockerPullImage no dockerVolumeBind no dockerWorkspace no","title":"Overview - Execution Environment"},{"location":"steps/cnbBuild/#details","text":"","title":"Details"},{"location":"steps/cnbBuild/#additionaltags","text":"List of tags which will be pushed to the registry (additionally to the provided containerImageTag ), e.g. \"latest\". back to overview Scope Details Aliases - Type []string Mandatory no Default $PIPER_additionalTags (if set) Secret no Configuration scope \u2612 parameter \u2610 general \u2612 steps \u2612 stages Resource references none","title":"additionalTags"},{"location":"steps/cnbBuild/#bindings","text":"Map of bindings that should be offered to the buildpack. The type of bindings depend on the buildpack. For documentation about bindings in general see the paketo documentation . Example: Custom maven settings.xml for the Java Buildpack bindings : maven-settings : type : maven data : - key : settings.xml file : path/to/settings.xml inline: bindings : maven-settings : type : maven data : - key : settings.xml content : \"inline settings.xml\" from url: bindings : maven-settings : type : maven data : - key : settings.xml fromUrl : https://url-to/setting.xml using Vault general purpose credentials : bindings : dynatrace : type : Dynatrace data : - key : api-token vaultCredentialKey : dynatrace-api-token vaultCredentialPath : cnb-bindings vaultCredentialKeys : [ 'dynatrace-api-token' ] Deprecated: A binding with a single key, could be written like this: bindings : maven-settings : type : maven key : settings.xml file : path/to/settings.xml back to overview Scope Details Aliases - Type map[string]interface{} Mandatory no Default $PIPER_bindings (if set) Secret no Configuration scope \u2612 parameter \u2610 general \u2612 steps \u2612 stages Resource references none","title":"bindings"},{"location":"steps/cnbBuild/#buildenvvars","text":"Map of custom environment variables used during a build. Example: buildEnvVars : foo : bar back to overview Scope Details Aliases - Type map[string]interface{} Mandatory no Default $PIPER_buildEnvVars (if set) Secret no Configuration scope \u2612 parameter \u2610 general \u2612 steps \u2612 stages Resource references none","title":"buildEnvVars"},{"location":"steps/cnbBuild/#buildsettingsinfo","text":"Build settings info is typically filled by the step automatically to create information about the build settings that were used during the mta build. This information is typically used for compliance related processes. back to overview Scope Details Aliases - Type string Mandatory no Default $PIPER_buildSettingsInfo (if set) Secret no Configuration scope \u2612 parameter \u2610 general \u2612 steps \u2612 stages Resource references commonPipelineEnvironment : reference to: custom/buildSettingsInfo","title":"buildSettingsInfo"},{"location":"steps/cnbBuild/#buildpacks","text":"List of custom buildpacks to use in the form of $HOSTNAME/$REPO[:$TAG] . When this property is specified, buildpacks which are part of the builder will be ignored. back to overview Scope Details Aliases - Type []string Mandatory no Default $PIPER_buildpacks (if set) Secret no Configuration scope \u2612 parameter \u2610 general \u2612 steps \u2612 stages Resource references commonPipelineEnvironment : reference to: container/buildpacks","title":"buildpacks"},{"location":"steps/cnbBuild/#containercommand","text":"Jenkins-specific: Used for proper environment setup. Kubernetes only: Allows to specify start command for container created with dockerImage parameter to overwrite Piper default (/usr/bin/tail -f /dev/null). back to overview Scope Details Aliases - Type string Mandatory no Default Secret no Configuration scope \u2612 parameter \u2612 general \u2612 steps \u2612 stages Resource references none","title":"containerCommand"},{"location":"steps/cnbBuild/#containerimagealias","text":"Logical name used for this image. back to overview Scope Details Aliases - Type string Mandatory no Default $PIPER_containerImageAlias (if set) Secret no Configuration scope \u2612 parameter \u2612 general \u2612 steps \u2612 stages Resource references none","title":"containerImageAlias"},{"location":"steps/cnbBuild/#containerimagename","text":"Name of the container which will be built cnbBuild step will try to identify a containerImageName using the following precedence: containerImageName parameter. project.id field of a project.toml file. git/repository parameter of the commonPipelineEnvironment . github/repository parameter of the commonPipelineEnvironment . If none of the above was found - an error will be raised. back to overview Scope Details Aliases dockerImageName Type string Mandatory no Default $PIPER_containerImageName (if set) Secret no Configuration scope \u2612 parameter \u2612 general \u2612 steps \u2612 stages Resource references none","title":"containerImageName"},{"location":"steps/cnbBuild/#containerimagetag","text":"Tag of the container which will be built back to overview Scope Details Aliases artifactVersion Type string Mandatory yes Default $PIPER_containerImageTag (if set) Secret no Configuration scope \u2612 parameter \u2612 general \u2612 steps \u2612 stages Resource references commonPipelineEnvironment : reference to: artifactVersion commonPipelineEnvironment : reference to: git/commitId","title":"containerImageTag"},{"location":"steps/cnbBuild/#containerregistryurl","text":"Container registry where the image should be pushed to. Note : containerRegistryUrl should include only the domain. If you want to publish an image under docker.io/example/my-image , you must set containerRegistryUrl: \"docker.io\" and containerImageName: \"example/my-image\" . back to overview Scope Details Aliases dockerRegistryUrl Type string Mandatory yes Default $PIPER_containerRegistryUrl (if set) Secret no Configuration scope \u2612 parameter \u2612 general \u2612 steps \u2612 stages Resource references commonPipelineEnvironment : reference to: container/registryUrl","title":"containerRegistryUrl"},{"location":"steps/cnbBuild/#containershell","text":"Jenkins-specific: Used for proper environment setup. Allows to specify the shell to be executed for container with containerName. back to overview Scope Details Aliases - Type string Mandatory no Default Secret no Configuration scope \u2612 parameter \u2612 general \u2612 steps \u2612 stages Resource references none","title":"containerShell"},{"location":"steps/cnbBuild/#createbom","text":"Creates the bill of materials (BOM) using Syft and stores it in a file in CycloneDX 1.4 format. back to overview Scope Details Aliases - Type bool Mandatory no Default false Possible values - true - false Secret no Configuration scope \u2612 parameter \u2612 general \u2612 steps \u2612 stages Resource references none","title":"createBOM"},{"location":"steps/cnbBuild/#customtlscertificatelinks","text":"List containing download links of custom TLS certificates. This is required to ensure trusted connections to registries with custom certificates. back to overview Scope Details Aliases - Type []string Mandatory no Default $PIPER_customTlsCertificateLinks (if set) Secret no Configuration scope \u2612 parameter \u2610 general \u2612 steps \u2612 stages Resource references none","title":"customTlsCertificateLinks"},{"location":"steps/cnbBuild/#defaultprocess","text":"Process that should be started by default. See https://buildpacks.io/docs/app-developer-guide/run-an-app/ back to overview Scope Details Aliases - Type string Mandatory no Default $PIPER_defaultProcess (if set) Secret no Configuration scope \u2612 parameter \u2612 general \u2612 steps \u2612 stages Resource references none","title":"defaultProcess"},{"location":"steps/cnbBuild/#dockerconfigjson","text":"Path to the file .docker/config.json - this is typically provided by your CI/CD system. You can find more details about the Docker credentials in the Docker documentation . back to overview Scope Details Aliases - Type string Mandatory no Default $PIPER_dockerConfigJSON (if set) Secret yes Configuration scope \u2612 parameter \u2610 general \u2610 steps \u2610 stages Resource references Jenkins credential id: id: dockerConfigJsonCredentialsId Vault resource: name: dockerConfigFileVaultSecretName default value: docker-config Vault paths: $(vaultPath)/docker-config $(vaultBasePath)/$(vaultPipelineName)/docker-config $(vaultBasePath)/GROUP-SECRETS/docker-config","title":"dockerConfigJSON"},{"location":"steps/cnbBuild/#dockerconfigjsoncpe","text":"This property is intended only for reading the dockerConfigJSON from the Common Pipeline Environment. If you want to provide your own credentials, please refer to the dockerConfigJSON property. If both properties are set, the config files will be merged, with the dockerConfigJSON having higher priority. back to overview Scope Details Aliases - Type string Mandatory no Default $PIPER_dockerConfigJSONCPE (if set) Secret yes Configuration scope \u2610 parameter \u2610 general \u2610 steps \u2610 stages Resource references commonPipelineEnvironment : reference to: custom/dockerConfigJSON","title":"dockerConfigJSONCPE"},{"location":"steps/cnbBuild/#dockerenvvars","text":"Environment variables to set in the container, e.g. [http_proxy: \"proxy:8080\"]. back to overview Scope Details Aliases - Type map[string]string Mandatory no Default Secret no Configuration scope \u2612 parameter \u2612 general \u2612 steps \u2612 stages Resource references none","title":"dockerEnvVars"},{"location":"steps/cnbBuild/#dockerimage","text":"Name of the docker image that should be used. If empty, Docker is not used and the command is executed directly on the Jenkins system. back to overview Scope Details Aliases - Type string Mandatory no Default paketobuildpacks/builder-jammy-base:latest Secret no Configuration scope \u2612 parameter \u2612 general \u2612 steps \u2612 stages Resource references none","title":"dockerImage"},{"location":"steps/cnbBuild/#dockername","text":"Kubernetes only: Name of the container launching dockerImage. SideCar only: Name of the container in local network. back to overview Scope Details Aliases - Type string Mandatory no Default Secret no Configuration scope \u2612 parameter \u2612 general \u2612 steps \u2612 stages Resource references none","title":"dockerName"},{"location":"steps/cnbBuild/#dockeroptions","text":"Docker options to be set when starting the container. back to overview Scope Details Aliases - Type []string Mandatory no Default [{-u 0}] Secret no Configuration scope \u2612 parameter \u2612 general \u2612 steps \u2612 stages Resource references none","title":"dockerOptions"},{"location":"steps/cnbBuild/#dockerpullimage","text":"Set this to 'false' to bypass a docker image pull. Useful during development process. Allows testing of images which are available in the local registry only. back to overview Scope Details Aliases - Type bool Mandatory no Default true Possible values - true - false Secret no Configuration scope \u2612 parameter \u2612 general \u2612 steps \u2612 stages Resource references none","title":"dockerPullImage"},{"location":"steps/cnbBuild/#dockervolumebind","text":"Jenkins-specific: Used for proper environment setup. Volumes that should be mounted into the docker container. back to overview Scope Details Aliases - Type map[string]string Mandatory no Default Secret no Configuration scope \u2612 parameter \u2612 general \u2612 steps \u2612 stages Resource references none","title":"dockerVolumeBind"},{"location":"steps/cnbBuild/#dockerworkspace","text":"Jenkins-specific: Used for proper environment setup. Kubernetes only: Specifies a dedicated user home directory for the container which will be passed as value for environment variable HOME . back to overview Scope Details Aliases - Type string Mandatory no Default Secret no Configuration scope \u2612 parameter \u2612 general \u2612 steps \u2612 stages Resource references none","title":"dockerWorkspace"},{"location":"steps/cnbBuild/#expandbuildenvvars","text":"Expand environment variables used in buildEnvVars . Example: expandBuildEnvVars : true buildEnvVars : foo : ${BAR} back to overview Scope Details Aliases - Type bool Mandatory no Default false Possible values - true - false Secret no Configuration scope \u2612 parameter \u2610 general \u2612 steps \u2612 stages Resource references none","title":"expandBuildEnvVars"},{"location":"steps/cnbBuild/#multipleimages","text":"This parameter is only needed if cnbBuild should create multiple images. Otherwise it can be ignored!!! In case of multiple images, this array contains one entry for each image. That entry can override any parameter from the main section, e.g. containerImageTag : latest containerRegistryUrl : docker.io dockerConfigJsonCredentialsId : CREDENTIALS multipleImages : - containerImageName : example/java-app containerImageAlias : java buildpacks : - \"docker.io/paketobuildpacks/java\" path : \"source/java\" - containerImageName : example/nodejs-app containerImageAlias : nodejs containerImageTag : v1.0.0 buildpacks : - \"docker.io/paketobuildpacks/nodejs\" path : \"source/nodejs\" back to overview Scope Details Aliases images Type []map[string]interface{} Mandatory no Default $PIPER_multipleImages (if set) Secret no Configuration scope \u2612 parameter \u2610 general \u2612 steps \u2612 stages Resource references none","title":"multipleImages"},{"location":"steps/cnbBuild/#path","text":"Glob that should either point to a directory with your sources or one artifact in zip format. This property determines the input to the buildpack. back to overview Scope Details Aliases - Type string Mandatory no Default $PIPER_path (if set) Secret no Configuration scope \u2612 parameter \u2610 general \u2612 steps \u2612 stages Resource references none","title":"path"},{"location":"steps/cnbBuild/#postbuildpacks","text":"Buildpacks to append to the groups in the builder's order. back to overview Scope Details Aliases - Type []string Mandatory no Default $PIPER_postBuildpacks (if set) Secret no Configuration scope \u2612 parameter \u2610 general \u2612 steps \u2612 stages Resource references commonPipelineEnvironment : reference to: container/postBuildpacks","title":"postBuildpacks"},{"location":"steps/cnbBuild/#prebuildpacks","text":"Buildpacks to prepend to the groups in the builder's order. back to overview Scope Details Aliases - Type []string Mandatory no Default $PIPER_preBuildpacks (if set) Secret no Configuration scope \u2612 parameter \u2610 general \u2612 steps \u2612 stages Resource references commonPipelineEnvironment : reference to: container/preBuildpacks","title":"preBuildpacks"},{"location":"steps/cnbBuild/#preservefiles","text":"List of globs, for keeping build results in the Jenkins workspace. Note : globs will be calculated relative to the path property. back to overview Scope Details Aliases - Type []string Mandatory no Default $PIPER_preserveFiles (if set) Secret no Configuration scope \u2612 parameter \u2610 general \u2612 steps \u2612 stages Resource references none","title":"preserveFiles"},{"location":"steps/cnbBuild/#projectdescriptor","text":"Relative path to the project.toml file. See buildpacks.io for the reference. Parameters passed to the cnbBuild step will take precedence over the parameters set in the project.toml file, except the env block. Environment variables declared in a project descriptor file, will be merged with the buildEnvVars property, with the buildEnvVars having a precedence. Note : The project descriptor path should be relative to what is set in the path property. If the path property is pointing to a zip archive (e.g. jar file), project descriptor path will be relative to the root of the workspace. Note : Inline buildpacks (see specification ) are not supported yet. back to overview Scope Details Aliases - Type string Mandatory no Default project.toml Secret no Configuration scope \u2612 parameter \u2610 general \u2612 steps \u2612 stages Resource references none","title":"projectDescriptor"},{"location":"steps/cnbBuild/#runimage","text":"Base image from which application images are built. Will be defaulted to the image provided by the builder. See also https://buildpacks.io/docs/for-app-developers/concepts/base-images/. back to overview Scope Details Aliases - Type string Mandatory no Default $PIPER_runImage (if set) Secret no Configuration scope \u2612 parameter \u2612 general \u2612 steps \u2612 stages Resource references none","title":"runImage"},{"location":"steps/cnbBuild/#script","text":"The common script environment of the Jenkinsfile running. Typically the reference to the script calling the pipeline step is provided with the this parameter, as in script: this . This allows the function to access the commonPipelineEnvironment for retrieving, e.g. configuration parameters. back to overview Scope Details Aliases - Type Jenkins Script Mandatory yes Default Secret no Configuration scope \u2610 parameter \u2610 general \u2610 steps \u2610 stages Resource references none","title":"script"},{"location":"steps/cnbBuild/#syftdownloadurl","text":"Specifies the download url of the Syft Linux amd64 tar binary file. This can be found at https://github.com/anchore/syft/releases/. back to overview Scope Details Aliases - Type string Mandatory no Default https://github.com/anchore/syft/releases/download/v1.22.0/syft_1.22.0_linux_amd64.tar.gz Secret no Configuration scope \u2612 parameter \u2610 general \u2612 steps \u2610 stages Resource references none","title":"syftDownloadUrl"},{"location":"steps/cnbBuild/#verbose","text":"verbose output back to overview Scope Details Aliases - Type bool Mandatory no Default false Possible values - true - false Secret no Configuration scope \u2612 parameter \u2612 general \u2612 steps \u2612 stages Resource references none","title":"verbose"},{"location":"steps/cnbBuild/#dockerconfigjsoncredentialsid","text":"Jenkins 'Secret file' credentials ID containing Docker config.json (with registry credential(s)) in the following format: { \"auths\" : { \"$server\" : { \"auth\" : \"base64($username + ':' + $password)\" } } } Example: { \"auths\" : { \"example.com\" : { \"auth\" : \"dXNlcm5hbWU6cGFzc3dvcmQ=\" } } } back to overview Scope Details Aliases - Type string Configuration scope \u2612 parameter \u2612 general \u2612 steps \u2612 stages","title":"dockerConfigJsonCredentialsId"},{"location":"steps/cnbBuild/#additional-hints","text":"To run the cnbBuild with a different builder, you can specify the dockerImage parameter. Without specifying it, the step will run with the paketobuildpacks/builder:base builder.","title":"Additional hints"},{"location":"steps/cnbBuild/#default-excludes","text":"When building images, these files/folders are excluded from the build by default: Piper binary: piper Piper configuration folder: .pipeline Git folder: .git This behavior can be overwritten by using the respective sections in project.toml . Keep in mind that by doing so, no default excludes will be applied by the cnbBuild step at all.","title":"Default Excludes"},{"location":"steps/cnbBuild/#examples","text":"","title":"Examples"},{"location":"steps/cnbBuild/#example-1-simple-usage","text":"cnbBuild ( script: this , dockerConfigJsonCredentialsId: 'DOCKER_REGISTRY_CREDS' , containerImageName: 'images/example' , containerImageTag: 'v0.0.1' , containerRegistryUrl: 'gcr.io' )","title":"Example 1: simple usage"},{"location":"steps/cnbBuild/#example-2-user-provided-builder","text":"cnbBuild ( script: this , dockerConfigJsonCredentialsId: 'DOCKER_REGISTRY_CREDS' , dockerImage: 'paketobuildpacks/builder:base' , containerImageName: 'images/example' , containerImageTag: 'v0.0.1' , containerRegistryUrl: 'gcr.io' )","title":"Example 2: User provided builder"},{"location":"steps/cnbBuild/#example-3-user-provided-buildpacks","text":"cnbBuild ( script: this , dockerConfigJsonCredentialsId: 'DOCKER_REGISTRY_CREDS' , containerImageName: 'images/example' , containerImageTag: 'v0.0.1' , containerRegistryUrl: 'gcr.io' , buildpacks: [ 'docker.io/paketobuildpacks/nodejs' , 'paketo-community/build-plan' ] )","title":"Example 3: User provided buildpacks"},{"location":"steps/cnbBuild/#example-4-build-environment-variables","text":"cnbBuild ( script: this , dockerConfigJsonCredentialsId: 'DOCKER_REGISTRY_CREDS' , containerImageName: 'images/example' , containerImageTag: 'v0.0.1' , containerRegistryUrl: 'gcr.io' , buildEnvVars: [ \"FOO\" : \"BAR\" ] )","title":"Example 4: Build environment variables"},{"location":"steps/codeqlExecuteScan/","text":"codeqlExecuteScan \u00b6 This step executes a codeql scan on the specified project to perform static code analysis and check the source code for security flaws. Description \u00b6 This step executes a codeql scan on the specified project to perform static code analysis and check the source code for security flaws. The codeql step triggers a scan locally on your orchestrator (e.g. Jenkins) within a docker container so finally you have to supply a docker image with codeql and Java plus Maven. Usage \u00b6 We recommend to define values of step parameters via .pipeline/config.yml file . In this case, calling the step is essentially reduced to defining the step name. Calling the step can be done either in an orchestrator specific way (e.g. via a Jenkins library step) or on the command line. Jenkins Command Line library ( 'piper-lib-os' ) codeqlExecuteScan script: this piper codeqlExecuteScan Outputs \u00b6 Output type Details influx measurement step_data codeql measurement codeql_data repositoryUrl repositoryReferenceUrl codeScanningLink querySuite optionalTotal optionalAudited auditAllTotal auditAllAudited Parameters \u00b6 Overview - Step \u00b6 Name Mandatory Additional information script (yes) reference to Jenkins main pipeline script analyzedRef no buildCommand no buildTool no checkForCompliance no commitId no customCommand no database no databaseAnalyzeFlags no databaseCreateFlags no githubToken no pass via ENV, Vault or Jenkins credentials ( githubTokenCredentialsId ) globalSettingsFile no language no modulePath no paths no pathsIgnore no projectSettingsFile no querySuite no ram no repository no sarifCheckMaxRetries no sarifCheckRetryInterval no targetGithubBranchName no targetGithubRepoURL no threads no transformQuerySuite no uploadResults no verbose no activates debug output vulnerabilityThresholdTotal no Overview - Execution Environment \u00b6 Orchestrator-specific only These parameters are relevant for orchestrator usage and not considered when using the command line option. Name Mandatory Additional information containerCommand no containerShell no dockerEnvVars no dockerImage no dockerName no dockerOptions no dockerPullImage no dockerVolumeBind no dockerWorkspace no stashContent no Details \u00b6 analyzedRef \u00b6 If this ref is a pull request merge commit, then use refs/pulls/1234/merge or refs/pulls/1234/head (depending on whether or not this commit corresponds to the HEAD or MERGE commit of the PR). Otherwise, this should be a branch: refs/heads/branch-name. If omitted, the CLI will attempt to automatically populate this from the current branch of the checkout path, if this exists. back to overview Scope Details Aliases - Type string Mandatory no Default $PIPER_analyzedRef (if set) Secret no Configuration scope \u2610 parameter \u2610 general \u2610 steps \u2610 stages Resource references commonPipelineEnvironment : reference to: git/ref buildCommand \u00b6 Command to build the project back to overview Scope Details Aliases - Type string Mandatory no Default $PIPER_buildCommand (if set) Secret no Configuration scope \u2612 parameter \u2610 general \u2612 steps \u2612 stages Resource references none buildTool \u00b6 Based on the build tool the step will try to auto build the project. The step will try to auto select the language and the build command. back to overview Scope Details Aliases - Type string Mandatory no Default maven Possible values - custom - maven - golang - npm - pip - yarn Secret no Configuration scope \u2612 parameter \u2612 general \u2612 steps \u2612 stages Resource references none checkForCompliance \u00b6 If set to true, the piper step checks for compliance based on vulnerability threadholds. Example - If total vulnerabilites are 10 and vulnerabilityThresholdTotal is set as 0, then the steps throws an compliance error. back to overview Scope Details Aliases - Type bool Mandatory no Default false Possible values - true - false Secret no Configuration scope \u2612 parameter \u2610 general \u2612 steps \u2612 stages Resource references none commitId \u00b6 SHA of commit that was analyzed. back to overview Scope Details Aliases - Type string Mandatory no Default $PIPER_commitId (if set) Secret no Configuration scope \u2610 parameter \u2610 general \u2610 steps \u2610 stages Resource references commonPipelineEnvironment : reference to: git/remoteCommitId containerCommand \u00b6 Jenkins-specific: Used for proper environment setup. Kubernetes only: Allows to specify start command for container created with dockerImage parameter to overwrite Piper default (/usr/bin/tail -f /dev/null). back to overview Scope Details Aliases - Type string Mandatory no Default Secret no Configuration scope \u2612 parameter \u2612 general \u2612 steps \u2612 stages Resource references none containerShell \u00b6 Jenkins-specific: Used for proper environment setup. Allows to specify the shell to be executed for container with containerName. back to overview Scope Details Aliases - Type string Mandatory no Default Secret no Configuration scope \u2612 parameter \u2612 general \u2612 steps \u2612 stages Resource references none customCommand \u00b6 A custom user-defined command to run between codeql analysis and results upload. back to overview Scope Details Aliases - Type string Mandatory no Default $PIPER_customCommand (if set) Secret no Configuration scope \u2612 parameter \u2610 general \u2612 steps \u2612 stages Resource references none database \u00b6 Path to the CodeQL database to create. This directory will be created, and must not already exist. back to overview Scope Details Aliases - Type string Mandatory no Default codeqlDB Secret no Configuration scope \u2612 parameter \u2610 general \u2612 steps \u2612 stages Resource references none databaseAnalyzeFlags \u00b6 A space-separated string of flags for the 'codeql database analyze' command. If both long and short forms of the same flag are provided, the long form takes precedence. Example input: \"--threads=1 --ram=2000\" back to overview Scope Details Aliases - Type string Mandatory no Default $PIPER_databaseAnalyzeFlags (if set) Secret no Configuration scope \u2612 parameter \u2610 general \u2612 steps \u2612 stages Resource references none databaseCreateFlags \u00b6 A space-separated string of flags for the 'codeql database create' command. If both long and short forms of the same flag are provided, the long form takes precedence. Example input: \"--threads=1 --ram=2000\" back to overview Scope Details Aliases - Type string Mandatory no Default $PIPER_databaseCreateFlags (if set) Secret no Configuration scope \u2612 parameter \u2610 general \u2612 steps \u2612 stages Resource references none dockerEnvVars \u00b6 Environment variables to set in the container, e.g. [http_proxy: \"proxy:8080\"]. back to overview Scope Details Aliases - Type map[string]string Mandatory no Default Secret no Configuration scope \u2612 parameter \u2612 general \u2612 steps \u2612 stages Resource references none dockerImage \u00b6 Name of the docker image that should be used. If empty, Docker is not used and the command is executed directly on the Jenkins system. back to overview Scope Details Aliases - Type string Mandatory no Default `` Secret no Configuration scope \u2612 parameter \u2612 general \u2612 steps \u2612 stages Resource references none dockerName \u00b6 Kubernetes only: Name of the container launching dockerImage. SideCar only: Name of the container in local network. back to overview Scope Details Aliases - Type string Mandatory no Default Secret no Configuration scope \u2612 parameter \u2612 general \u2612 steps \u2612 stages Resource references none dockerOptions \u00b6 Docker options to be set when starting the container. back to overview Scope Details Aliases - Type []string Mandatory no Default Secret no Configuration scope \u2612 parameter \u2612 general \u2612 steps \u2612 stages Resource references none dockerPullImage \u00b6 Set this to 'false' to bypass a docker image pull. Useful during development process. Allows testing of images which are available in the local registry only. back to overview Scope Details Aliases - Type bool Mandatory no Default true Possible values - true - false Secret no Configuration scope \u2612 parameter \u2612 general \u2612 steps \u2612 stages Resource references none dockerVolumeBind \u00b6 Jenkins-specific: Used for proper environment setup. Volumes that should be mounted into the docker container. back to overview Scope Details Aliases - Type map[string]string Mandatory no Default Secret no Configuration scope \u2612 parameter \u2612 general \u2612 steps \u2612 stages Resource references none dockerWorkspace \u00b6 Jenkins-specific: Used for proper environment setup. Kubernetes only: Specifies a dedicated user home directory for the container which will be passed as value for environment variable HOME . back to overview Scope Details Aliases - Type string Mandatory no Default Secret no Configuration scope \u2612 parameter \u2612 general \u2612 steps \u2612 stages Resource references none githubToken \u00b6 GitHub personal access token in plain text. NEVER set this parameter in a file commited to a source code repository. This parameter is intended to be used from the command line or set securely via the environment variable listed below. In most pipeline use-cases, you should instead either store the token in Vault (where it can be automatically retrieved by the step from one of the paths listed below) or store it as a Jenkins secret and configure the secret's id via the githubTokenCredentialsId parameter. back to overview Scope Details Aliases access_token Type string Mandatory no Default $PIPER_githubToken (if set) Secret yes Configuration scope \u2612 parameter \u2612 general \u2612 steps \u2612 stages Resource references Jenkins credential id: id: githubTokenCredentialsId Vault resource: name: githubVaultSecretName default value: github Vault paths: $(vaultPath)/github $(vaultBasePath)/$(vaultPipelineName)/github $(vaultBasePath)/GROUP-SECRETS/github globalSettingsFile \u00b6 Path to the mvn settings file that should be used as global settings file. back to overview Scope Details Aliases maven/globalSettingsFile Type string Mandatory no Default $PIPER_globalSettingsFile (if set) Secret no Configuration scope \u2612 parameter \u2612 general \u2612 steps \u2612 stages Resource references none language \u00b6 The programming language used to analyze. Use coma separation and select custom build tool to analyze multiple languages back to overview Scope Details Aliases - Type string Mandatory no Default $PIPER_language (if set) Secret no Configuration scope \u2612 parameter \u2610 general \u2612 steps \u2612 stages Resource references none modulePath \u00b6 Allows providing the path for the module to scan back to overview Scope Details Aliases - Type string Mandatory no Default ./ Secret no Configuration scope \u2612 parameter \u2610 general \u2612 steps \u2612 stages Resource references none paths \u00b6 List of file or directory patterns to include. Each entry must be on its own line, e.g.: src/ lib/ Note: This parameter is only applicable for interpreted languages. back to overview Scope Details Aliases - Type string Mandatory no Default $PIPER_paths (if set) Secret no Configuration scope \u2612 parameter \u2610 general \u2612 steps \u2612 stages Resource references none pathsIgnore \u00b6 List of file or directory patterns to ignore. Each entry must be on its own line, e.g.: /*.md docs/ Note: This parameter is only applicable for interpreted languages. back to overview Scope Details Aliases - Type string Mandatory no Default $PIPER_pathsIgnore (if set) Secret no Configuration scope \u2612 parameter \u2610 general \u2612 steps \u2612 stages Resource references none projectSettingsFile \u00b6 Path to the mvn settings file that should be used as project settings file. back to overview Scope Details Aliases maven/projectSettingsFile Type string Mandatory no Default $PIPER_projectSettingsFile (if set) Secret no Configuration scope \u2612 parameter \u2612 general \u2612 steps \u2612 stages Resource references none querySuite \u00b6 The name of a CodeQL query suite. If omitted, the default query suite for the language of the database being analyzed will be used. back to overview Scope Details Aliases - Type string Mandatory no Default $PIPER_querySuite (if set) Secret no Configuration scope \u2612 parameter \u2610 general \u2612 steps \u2612 stages Resource references none ram \u00b6 Use this much ram (MB) for the codeql operations. back to overview Scope Details Aliases - Type string Mandatory no Default 4000 Secret no Configuration scope \u2612 parameter \u2610 general \u2612 steps \u2612 stages Resource references none repository \u00b6 URL of the GitHub instance back to overview Scope Details Aliases githubRepo Type string Mandatory no Default $PIPER_repository (if set) Secret no Configuration scope \u2610 parameter \u2610 general \u2610 steps \u2610 stages Resource references commonPipelineEnvironment : reference to: git/httpsUrl sarifCheckMaxRetries \u00b6 Maximum number of retries when waiting for the server to finish processing the SARIF upload. back to overview Scope Details Aliases - Type int Mandatory no Default 10 Secret no Configuration scope \u2612 parameter \u2610 general \u2612 steps \u2612 stages Resource references none sarifCheckRetryInterval \u00b6 Interval in seconds between retries when waiting for the server to finish processing the SARIF upload. back to overview Scope Details Aliases - Type int Mandatory no Default 30 Secret no Configuration scope \u2612 parameter \u2610 general \u2612 steps \u2612 stages Resource references none script \u00b6 The common script environment of the Jenkinsfile running. Typically the reference to the script calling the pipeline step is provided with the this parameter, as in script: this . This allows the function to access the commonPipelineEnvironment for retrieving, e.g. configuration parameters. back to overview Scope Details Aliases - Type Jenkins Script Mandatory yes Default Secret no Configuration scope \u2610 parameter \u2610 general \u2610 steps \u2610 stages Resource references none stashContent \u00b6 Jenkins-specific: Used for proper environment setup. Specific stashes that should be considered for the step execution. back to overview Scope Details Aliases - Type []string Mandatory no Default - buildDescriptor - tests Secret no Configuration scope \u2612 parameter \u2612 general \u2612 steps \u2612 stages Resource references none targetGithubBranchName \u00b6 Target github branch name. Only relevant, if project uses a combination of Piper and non-GitHub SCM. back to overview Scope Details Aliases - Type string Mandatory no Default $PIPER_targetGithubBranchName (if set) Secret no Configuration scope \u2612 parameter \u2610 general \u2612 steps \u2612 stages Resource references none targetGithubRepoURL \u00b6 Target github repo url. Only relevant, if project uses a combination of Piper and non-GitHub SCM. back to overview Scope Details Aliases - Type string Mandatory no Default $PIPER_targetGithubRepoURL (if set) Secret no Configuration scope \u2612 parameter \u2610 general \u2612 steps \u2612 stages Resource references none threads \u00b6 Use this many threads for the codeql operations. back to overview Scope Details Aliases - Type string Mandatory no Default 0 Secret no Configuration scope \u2612 parameter \u2610 general \u2612 steps \u2612 stages Resource references none transformQuerySuite \u00b6 A transform string that will be applied to the querySuite using the sed command. back to overview Scope Details Aliases - Type string Mandatory no Default $PIPER_transformQuerySuite (if set) Secret no Configuration scope \u2612 parameter \u2610 general \u2612 steps \u2612 stages Resource references none uploadResults \u00b6 Allows you to upload codeql SARIF results to your github project. You will need to set githubToken for this. back to overview Scope Details Aliases - Type bool Mandatory no Default false Possible values - true - false Secret no Configuration scope \u2612 parameter \u2610 general \u2612 steps \u2612 stages Resource references none verbose \u00b6 verbose output back to overview Scope Details Aliases - Type bool Mandatory no Default false Possible values - true - false Secret no Configuration scope \u2612 parameter \u2612 general \u2612 steps \u2612 stages Resource references none vulnerabilityThresholdTotal \u00b6 Threashold for maximum number of allowed vulnerabilities. back to overview Scope Details Aliases - Type int Mandatory no Default 0 Secret no Configuration scope \u2612 parameter \u2610 general \u2612 steps \u2612 stages Resource references none githubTokenCredentialsId \u00b6 Jenkins 'Secret text' credentials ID containing token to authenticate to GitHub. back to overview Scope Details Aliases - Type string Configuration scope \u2612 parameter \u2612 general \u2612 steps \u2612 stages","title":"codeqlExecuteScan"},{"location":"steps/codeqlExecuteScan/#codeqlexecutescan","text":"This step executes a codeql scan on the specified project to perform static code analysis and check the source code for security flaws.","title":"codeqlExecuteScan"},{"location":"steps/codeqlExecuteScan/#description","text":"This step executes a codeql scan on the specified project to perform static code analysis and check the source code for security flaws. The codeql step triggers a scan locally on your orchestrator (e.g. Jenkins) within a docker container so finally you have to supply a docker image with codeql and Java plus Maven.","title":"Description"},{"location":"steps/codeqlExecuteScan/#usage","text":"We recommend to define values of step parameters via .pipeline/config.yml file . In this case, calling the step is essentially reduced to defining the step name. Calling the step can be done either in an orchestrator specific way (e.g. via a Jenkins library step) or on the command line. Jenkins Command Line library ( 'piper-lib-os' ) codeqlExecuteScan script: this piper codeqlExecuteScan","title":"Usage"},{"location":"steps/codeqlExecuteScan/#outputs","text":"Output type Details influx measurement step_data codeql measurement codeql_data repositoryUrl repositoryReferenceUrl codeScanningLink querySuite optionalTotal optionalAudited auditAllTotal auditAllAudited","title":"Outputs"},{"location":"steps/codeqlExecuteScan/#parameters","text":"","title":"Parameters"},{"location":"steps/codeqlExecuteScan/#overview-step","text":"Name Mandatory Additional information script (yes) reference to Jenkins main pipeline script analyzedRef no buildCommand no buildTool no checkForCompliance no commitId no customCommand no database no databaseAnalyzeFlags no databaseCreateFlags no githubToken no pass via ENV, Vault or Jenkins credentials ( githubTokenCredentialsId ) globalSettingsFile no language no modulePath no paths no pathsIgnore no projectSettingsFile no querySuite no ram no repository no sarifCheckMaxRetries no sarifCheckRetryInterval no targetGithubBranchName no targetGithubRepoURL no threads no transformQuerySuite no uploadResults no verbose no activates debug output vulnerabilityThresholdTotal no","title":"Overview - Step"},{"location":"steps/codeqlExecuteScan/#overview-execution-environment","text":"Orchestrator-specific only These parameters are relevant for orchestrator usage and not considered when using the command line option. Name Mandatory Additional information containerCommand no containerShell no dockerEnvVars no dockerImage no dockerName no dockerOptions no dockerPullImage no dockerVolumeBind no dockerWorkspace no stashContent no","title":"Overview - Execution Environment"},{"location":"steps/codeqlExecuteScan/#details","text":"","title":"Details"},{"location":"steps/codeqlExecuteScan/#analyzedref","text":"If this ref is a pull request merge commit, then use refs/pulls/1234/merge or refs/pulls/1234/head (depending on whether or not this commit corresponds to the HEAD or MERGE commit of the PR). Otherwise, this should be a branch: refs/heads/branch-name. If omitted, the CLI will attempt to automatically populate this from the current branch of the checkout path, if this exists. back to overview Scope Details Aliases - Type string Mandatory no Default $PIPER_analyzedRef (if set) Secret no Configuration scope \u2610 parameter \u2610 general \u2610 steps \u2610 stages Resource references commonPipelineEnvironment : reference to: git/ref","title":"analyzedRef"},{"location":"steps/codeqlExecuteScan/#buildcommand","text":"Command to build the project back to overview Scope Details Aliases - Type string Mandatory no Default $PIPER_buildCommand (if set) Secret no Configuration scope \u2612 parameter \u2610 general \u2612 steps \u2612 stages Resource references none","title":"buildCommand"},{"location":"steps/codeqlExecuteScan/#buildtool","text":"Based on the build tool the step will try to auto build the project. The step will try to auto select the language and the build command. back to overview Scope Details Aliases - Type string Mandatory no Default maven Possible values - custom - maven - golang - npm - pip - yarn Secret no Configuration scope \u2612 parameter \u2612 general \u2612 steps \u2612 stages Resource references none","title":"buildTool"},{"location":"steps/codeqlExecuteScan/#checkforcompliance","text":"If set to true, the piper step checks for compliance based on vulnerability threadholds. Example - If total vulnerabilites are 10 and vulnerabilityThresholdTotal is set as 0, then the steps throws an compliance error. back to overview Scope Details Aliases - Type bool Mandatory no Default false Possible values - true - false Secret no Configuration scope \u2612 parameter \u2610 general \u2612 steps \u2612 stages Resource references none","title":"checkForCompliance"},{"location":"steps/codeqlExecuteScan/#commitid","text":"SHA of commit that was analyzed. back to overview Scope Details Aliases - Type string Mandatory no Default $PIPER_commitId (if set) Secret no Configuration scope \u2610 parameter \u2610 general \u2610 steps \u2610 stages Resource references commonPipelineEnvironment : reference to: git/remoteCommitId","title":"commitId"},{"location":"steps/codeqlExecuteScan/#containercommand","text":"Jenkins-specific: Used for proper environment setup. Kubernetes only: Allows to specify start command for container created with dockerImage parameter to overwrite Piper default (/usr/bin/tail -f /dev/null). back to overview Scope Details Aliases - Type string Mandatory no Default Secret no Configuration scope \u2612 parameter \u2612 general \u2612 steps \u2612 stages Resource references none","title":"containerCommand"},{"location":"steps/codeqlExecuteScan/#containershell","text":"Jenkins-specific: Used for proper environment setup. Allows to specify the shell to be executed for container with containerName. back to overview Scope Details Aliases - Type string Mandatory no Default Secret no Configuration scope \u2612 parameter \u2612 general \u2612 steps \u2612 stages Resource references none","title":"containerShell"},{"location":"steps/codeqlExecuteScan/#customcommand","text":"A custom user-defined command to run between codeql analysis and results upload. back to overview Scope Details Aliases - Type string Mandatory no Default $PIPER_customCommand (if set) Secret no Configuration scope \u2612 parameter \u2610 general \u2612 steps \u2612 stages Resource references none","title":"customCommand"},{"location":"steps/codeqlExecuteScan/#database","text":"Path to the CodeQL database to create. This directory will be created, and must not already exist. back to overview Scope Details Aliases - Type string Mandatory no Default codeqlDB Secret no Configuration scope \u2612 parameter \u2610 general \u2612 steps \u2612 stages Resource references none","title":"database"},{"location":"steps/codeqlExecuteScan/#databaseanalyzeflags","text":"A space-separated string of flags for the 'codeql database analyze' command. If both long and short forms of the same flag are provided, the long form takes precedence. Example input: \"--threads=1 --ram=2000\" back to overview Scope Details Aliases - Type string Mandatory no Default $PIPER_databaseAnalyzeFlags (if set) Secret no Configuration scope \u2612 parameter \u2610 general \u2612 steps \u2612 stages Resource references none","title":"databaseAnalyzeFlags"},{"location":"steps/codeqlExecuteScan/#databasecreateflags","text":"A space-separated string of flags for the 'codeql database create' command. If both long and short forms of the same flag are provided, the long form takes precedence. Example input: \"--threads=1 --ram=2000\" back to overview Scope Details Aliases - Type string Mandatory no Default $PIPER_databaseCreateFlags (if set) Secret no Configuration scope \u2612 parameter \u2610 general \u2612 steps \u2612 stages Resource references none","title":"databaseCreateFlags"},{"location":"steps/codeqlExecuteScan/#dockerenvvars","text":"Environment variables to set in the container, e.g. [http_proxy: \"proxy:8080\"]. back to overview Scope Details Aliases - Type map[string]string Mandatory no Default Secret no Configuration scope \u2612 parameter \u2612 general \u2612 steps \u2612 stages Resource references none","title":"dockerEnvVars"},{"location":"steps/codeqlExecuteScan/#dockerimage","text":"Name of the docker image that should be used. If empty, Docker is not used and the command is executed directly on the Jenkins system. back to overview Scope Details Aliases - Type string Mandatory no Default `` Secret no Configuration scope \u2612 parameter \u2612 general \u2612 steps \u2612 stages Resource references none","title":"dockerImage"},{"location":"steps/codeqlExecuteScan/#dockername","text":"Kubernetes only: Name of the container launching dockerImage. SideCar only: Name of the container in local network. back to overview Scope Details Aliases - Type string Mandatory no Default Secret no Configuration scope \u2612 parameter \u2612 general \u2612 steps \u2612 stages Resource references none","title":"dockerName"},{"location":"steps/codeqlExecuteScan/#dockeroptions","text":"Docker options to be set when starting the container. back to overview Scope Details Aliases - Type []string Mandatory no Default Secret no Configuration scope \u2612 parameter \u2612 general \u2612 steps \u2612 stages Resource references none","title":"dockerOptions"},{"location":"steps/codeqlExecuteScan/#dockerpullimage","text":"Set this to 'false' to bypass a docker image pull. Useful during development process. Allows testing of images which are available in the local registry only. back to overview Scope Details Aliases - Type bool Mandatory no Default true Possible values - true - false Secret no Configuration scope \u2612 parameter \u2612 general \u2612 steps \u2612 stages Resource references none","title":"dockerPullImage"},{"location":"steps/codeqlExecuteScan/#dockervolumebind","text":"Jenkins-specific: Used for proper environment setup. Volumes that should be mounted into the docker container. back to overview Scope Details Aliases - Type map[string]string Mandatory no Default Secret no Configuration scope \u2612 parameter \u2612 general \u2612 steps \u2612 stages Resource references none","title":"dockerVolumeBind"},{"location":"steps/codeqlExecuteScan/#dockerworkspace","text":"Jenkins-specific: Used for proper environment setup. Kubernetes only: Specifies a dedicated user home directory for the container which will be passed as value for environment variable HOME . back to overview Scope Details Aliases - Type string Mandatory no Default Secret no Configuration scope \u2612 parameter \u2612 general \u2612 steps \u2612 stages Resource references none","title":"dockerWorkspace"},{"location":"steps/codeqlExecuteScan/#githubtoken","text":"GitHub personal access token in plain text. NEVER set this parameter in a file commited to a source code repository. This parameter is intended to be used from the command line or set securely via the environment variable listed below. In most pipeline use-cases, you should instead either store the token in Vault (where it can be automatically retrieved by the step from one of the paths listed below) or store it as a Jenkins secret and configure the secret's id via the githubTokenCredentialsId parameter. back to overview Scope Details Aliases access_token Type string Mandatory no Default $PIPER_githubToken (if set) Secret yes Configuration scope \u2612 parameter \u2612 general \u2612 steps \u2612 stages Resource references Jenkins credential id: id: githubTokenCredentialsId Vault resource: name: githubVaultSecretName default value: github Vault paths: $(vaultPath)/github $(vaultBasePath)/$(vaultPipelineName)/github $(vaultBasePath)/GROUP-SECRETS/github","title":"githubToken"},{"location":"steps/codeqlExecuteScan/#globalsettingsfile","text":"Path to the mvn settings file that should be used as global settings file. back to overview Scope Details Aliases maven/globalSettingsFile Type string Mandatory no Default $PIPER_globalSettingsFile (if set) Secret no Configuration scope \u2612 parameter \u2612 general \u2612 steps \u2612 stages Resource references none","title":"globalSettingsFile"},{"location":"steps/codeqlExecuteScan/#language","text":"The programming language used to analyze. Use coma separation and select custom build tool to analyze multiple languages back to overview Scope Details Aliases - Type string Mandatory no Default $PIPER_language (if set) Secret no Configuration scope \u2612 parameter \u2610 general \u2612 steps \u2612 stages Resource references none","title":"language"},{"location":"steps/codeqlExecuteScan/#modulepath","text":"Allows providing the path for the module to scan back to overview Scope Details Aliases - Type string Mandatory no Default ./ Secret no Configuration scope \u2612 parameter \u2610 general \u2612 steps \u2612 stages Resource references none","title":"modulePath"},{"location":"steps/codeqlExecuteScan/#paths","text":"List of file or directory patterns to include. Each entry must be on its own line, e.g.: src/ lib/ Note: This parameter is only applicable for interpreted languages. back to overview Scope Details Aliases - Type string Mandatory no Default $PIPER_paths (if set) Secret no Configuration scope \u2612 parameter \u2610 general \u2612 steps \u2612 stages Resource references none","title":"paths"},{"location":"steps/codeqlExecuteScan/#pathsignore","text":"List of file or directory patterns to ignore. Each entry must be on its own line, e.g.: /*.md docs/ Note: This parameter is only applicable for interpreted languages. back to overview Scope Details Aliases - Type string Mandatory no Default $PIPER_pathsIgnore (if set) Secret no Configuration scope \u2612 parameter \u2610 general \u2612 steps \u2612 stages Resource references none","title":"pathsIgnore"},{"location":"steps/codeqlExecuteScan/#projectsettingsfile","text":"Path to the mvn settings file that should be used as project settings file. back to overview Scope Details Aliases maven/projectSettingsFile Type string Mandatory no Default $PIPER_projectSettingsFile (if set) Secret no Configuration scope \u2612 parameter \u2612 general \u2612 steps \u2612 stages Resource references none","title":"projectSettingsFile"},{"location":"steps/codeqlExecuteScan/#querysuite","text":"The name of a CodeQL query suite. If omitted, the default query suite for the language of the database being analyzed will be used. back to overview Scope Details Aliases - Type string Mandatory no Default $PIPER_querySuite (if set) Secret no Configuration scope \u2612 parameter \u2610 general \u2612 steps \u2612 stages Resource references none","title":"querySuite"},{"location":"steps/codeqlExecuteScan/#ram","text":"Use this much ram (MB) for the codeql operations. back to overview Scope Details Aliases - Type string Mandatory no Default 4000 Secret no Configuration scope \u2612 parameter \u2610 general \u2612 steps \u2612 stages Resource references none","title":"ram"},{"location":"steps/codeqlExecuteScan/#repository","text":"URL of the GitHub instance back to overview Scope Details Aliases githubRepo Type string Mandatory no Default $PIPER_repository (if set) Secret no Configuration scope \u2610 parameter \u2610 general \u2610 steps \u2610 stages Resource references commonPipelineEnvironment : reference to: git/httpsUrl","title":"repository"},{"location":"steps/codeqlExecuteScan/#sarifcheckmaxretries","text":"Maximum number of retries when waiting for the server to finish processing the SARIF upload. back to overview Scope Details Aliases - Type int Mandatory no Default 10 Secret no Configuration scope \u2612 parameter \u2610 general \u2612 steps \u2612 stages Resource references none","title":"sarifCheckMaxRetries"},{"location":"steps/codeqlExecuteScan/#sarifcheckretryinterval","text":"Interval in seconds between retries when waiting for the server to finish processing the SARIF upload. back to overview Scope Details Aliases - Type int Mandatory no Default 30 Secret no Configuration scope \u2612 parameter \u2610 general \u2612 steps \u2612 stages Resource references none","title":"sarifCheckRetryInterval"},{"location":"steps/codeqlExecuteScan/#script","text":"The common script environment of the Jenkinsfile running. Typically the reference to the script calling the pipeline step is provided with the this parameter, as in script: this . This allows the function to access the commonPipelineEnvironment for retrieving, e.g. configuration parameters. back to overview Scope Details Aliases - Type Jenkins Script Mandatory yes Default Secret no Configuration scope \u2610 parameter \u2610 general \u2610 steps \u2610 stages Resource references none","title":"script"},{"location":"steps/codeqlExecuteScan/#stashcontent","text":"Jenkins-specific: Used for proper environment setup. Specific stashes that should be considered for the step execution. back to overview Scope Details Aliases - Type []string Mandatory no Default - buildDescriptor - tests Secret no Configuration scope \u2612 parameter \u2612 general \u2612 steps \u2612 stages Resource references none","title":"stashContent"},{"location":"steps/codeqlExecuteScan/#targetgithubbranchname","text":"Target github branch name. Only relevant, if project uses a combination of Piper and non-GitHub SCM. back to overview Scope Details Aliases - Type string Mandatory no Default $PIPER_targetGithubBranchName (if set) Secret no Configuration scope \u2612 parameter \u2610 general \u2612 steps \u2612 stages Resource references none","title":"targetGithubBranchName"},{"location":"steps/codeqlExecuteScan/#targetgithubrepourl","text":"Target github repo url. Only relevant, if project uses a combination of Piper and non-GitHub SCM. back to overview Scope Details Aliases - Type string Mandatory no Default $PIPER_targetGithubRepoURL (if set) Secret no Configuration scope \u2612 parameter \u2610 general \u2612 steps \u2612 stages Resource references none","title":"targetGithubRepoURL"},{"location":"steps/codeqlExecuteScan/#threads","text":"Use this many threads for the codeql operations. back to overview Scope Details Aliases - Type string Mandatory no Default 0 Secret no Configuration scope \u2612 parameter \u2610 general \u2612 steps \u2612 stages Resource references none","title":"threads"},{"location":"steps/codeqlExecuteScan/#transformquerysuite","text":"A transform string that will be applied to the querySuite using the sed command. back to overview Scope Details Aliases - Type string Mandatory no Default $PIPER_transformQuerySuite (if set) Secret no Configuration scope \u2612 parameter \u2610 general \u2612 steps \u2612 stages Resource references none","title":"transformQuerySuite"},{"location":"steps/codeqlExecuteScan/#uploadresults","text":"Allows you to upload codeql SARIF results to your github project. You will need to set githubToken for this. back to overview Scope Details Aliases - Type bool Mandatory no Default false Possible values - true - false Secret no Configuration scope \u2612 parameter \u2610 general \u2612 steps \u2612 stages Resource references none","title":"uploadResults"},{"location":"steps/codeqlExecuteScan/#verbose","text":"verbose output back to overview Scope Details Aliases - Type bool Mandatory no Default false Possible values - true - false Secret no Configuration scope \u2612 parameter \u2612 general \u2612 steps \u2612 stages Resource references none","title":"verbose"},{"location":"steps/codeqlExecuteScan/#vulnerabilitythresholdtotal","text":"Threashold for maximum number of allowed vulnerabilities. back to overview Scope Details Aliases - Type int Mandatory no Default 0 Secret no Configuration scope \u2612 parameter \u2610 general \u2612 steps \u2612 stages Resource references none","title":"vulnerabilityThresholdTotal"},{"location":"steps/codeqlExecuteScan/#githubtokencredentialsid","text":"Jenkins 'Secret text' credentials ID containing token to authenticate to GitHub. back to overview Scope Details Aliases - Type string Configuration scope \u2612 parameter \u2612 general \u2612 steps \u2612 stages","title":"githubTokenCredentialsId"},{"location":"steps/commonPipelineEnvironment/","text":"commonPipelineEnvironment \u00b6 Description \u00b6 Provides project specific settings. Prerequisites \u00b6 none Method details \u00b6 getInfluxCustomData() \u00b6 Description \u00b6 Returns the Influx custom data which can be collected during pipeline run. Parameters \u00b6 none Return value \u00b6 A Map containing the data collected. Side effects \u00b6 none Exceptions \u00b6 none Example \u00b6 def myInfluxData = commonPipelineEnvironment . getInfluxCustomData () getInfluxCustomDataMap() \u00b6 Description \u00b6 Returns the Influx custom data map which can be collected during pipeline run. It is used for example by step influxWriteData . The data map is a map of maps, like [pipeline_data: [:], my_measurement: [:]] Each map inside the map represents a dedicated measurement in the InfluxDB. Parameters \u00b6 none Return value \u00b6 A Map containing a Map s with data collected. Side effects \u00b6 none Exceptions \u00b6 none Example \u00b6 def myInfluxDataMap = commonPipelineEnvironment . getInfluxCustomDataMap () getPipelineMeasurement(measurementName) \u00b6 Description \u00b6 Returns the value of a specific pipeline measurement. The measurements are collected with step durationMeasure Parameters \u00b6 Name of the measurement Return value \u00b6 Value of the measurement Side effects \u00b6 none Exceptions \u00b6 none Example \u00b6 def myMeasurementValue = commonPipelineEnvironment . getPipelineMeasurement ( 'build_stage_duration' ) setPipelineMeasurement(measurementName, value) \u00b6 Description \u00b6 This is an internal function! Sets the value of a specific pipeline measurement. Please use the step durationMeasure in a pipeline, instead. Parameters \u00b6 Name of the measurement and its value. Return value \u00b6 none Side effects \u00b6 none Exceptions \u00b6 none Example \u00b6 commonPipelineEnvironment . setPipelineMeasurement ( 'build_stage_duration' , 2345 )","title":"commonPipelineEnvironment"},{"location":"steps/commonPipelineEnvironment/#commonpipelineenvironment","text":"","title":"commonPipelineEnvironment"},{"location":"steps/commonPipelineEnvironment/#description","text":"Provides project specific settings.","title":"Description"},{"location":"steps/commonPipelineEnvironment/#prerequisites","text":"none","title":"Prerequisites"},{"location":"steps/commonPipelineEnvironment/#method-details","text":"","title":"Method details"},{"location":"steps/commonPipelineEnvironment/#getinfluxcustomdata","text":"","title":"getInfluxCustomData()"},{"location":"steps/commonPipelineEnvironment/#description_1","text":"Returns the Influx custom data which can be collected during pipeline run.","title":"Description"},{"location":"steps/commonPipelineEnvironment/#parameters","text":"none","title":"Parameters"},{"location":"steps/commonPipelineEnvironment/#return-value","text":"A Map containing the data collected.","title":"Return value"},{"location":"steps/commonPipelineEnvironment/#side-effects","text":"none","title":"Side effects"},{"location":"steps/commonPipelineEnvironment/#exceptions","text":"none","title":"Exceptions"},{"location":"steps/commonPipelineEnvironment/#example","text":"def myInfluxData = commonPipelineEnvironment . getInfluxCustomData ()","title":"Example"},{"location":"steps/commonPipelineEnvironment/#getinfluxcustomdatamap","text":"","title":"getInfluxCustomDataMap()"},{"location":"steps/commonPipelineEnvironment/#description_2","text":"Returns the Influx custom data map which can be collected during pipeline run. It is used for example by step influxWriteData . The data map is a map of maps, like [pipeline_data: [:], my_measurement: [:]] Each map inside the map represents a dedicated measurement in the InfluxDB.","title":"Description"},{"location":"steps/commonPipelineEnvironment/#parameters_1","text":"none","title":"Parameters"},{"location":"steps/commonPipelineEnvironment/#return-value_1","text":"A Map containing a Map s with data collected.","title":"Return value"},{"location":"steps/commonPipelineEnvironment/#side-effects_1","text":"none","title":"Side effects"},{"location":"steps/commonPipelineEnvironment/#exceptions_1","text":"none","title":"Exceptions"},{"location":"steps/commonPipelineEnvironment/#example_1","text":"def myInfluxDataMap = commonPipelineEnvironment . getInfluxCustomDataMap ()","title":"Example"},{"location":"steps/commonPipelineEnvironment/#getpipelinemeasurementmeasurementname","text":"","title":"getPipelineMeasurement(measurementName)"},{"location":"steps/commonPipelineEnvironment/#description_3","text":"Returns the value of a specific pipeline measurement. The measurements are collected with step durationMeasure","title":"Description"},{"location":"steps/commonPipelineEnvironment/#parameters_2","text":"Name of the measurement","title":"Parameters"},{"location":"steps/commonPipelineEnvironment/#return-value_2","text":"Value of the measurement","title":"Return value"},{"location":"steps/commonPipelineEnvironment/#side-effects_2","text":"none","title":"Side effects"},{"location":"steps/commonPipelineEnvironment/#exceptions_2","text":"none","title":"Exceptions"},{"location":"steps/commonPipelineEnvironment/#example_2","text":"def myMeasurementValue = commonPipelineEnvironment . getPipelineMeasurement ( 'build_stage_duration' )","title":"Example"},{"location":"steps/commonPipelineEnvironment/#setpipelinemeasurementmeasurementname-value","text":"","title":"setPipelineMeasurement(measurementName, value)"},{"location":"steps/commonPipelineEnvironment/#description_4","text":"This is an internal function! Sets the value of a specific pipeline measurement. Please use the step durationMeasure in a pipeline, instead.","title":"Description"},{"location":"steps/commonPipelineEnvironment/#parameters_3","text":"Name of the measurement and its value.","title":"Parameters"},{"location":"steps/commonPipelineEnvironment/#return-value_3","text":"none","title":"Return value"},{"location":"steps/commonPipelineEnvironment/#side-effects_3","text":"none","title":"Side effects"},{"location":"steps/commonPipelineEnvironment/#exceptions_3","text":"none","title":"Exceptions"},{"location":"steps/commonPipelineEnvironment/#example_3","text":"commonPipelineEnvironment . setPipelineMeasurement ( 'build_stage_duration' , 2345 )","title":"Example"},{"location":"steps/containerExecuteStructureTests/","text":"containerExecuteStructureTests \u00b6 In this step Container Structure Tests are executed. Description \u00b6 This testing framework allows you to execute different test types against a Docker container, for example: - Command tests (only if a Docker Deamon is available) - File existence tests - File content tests - Metadata test Usage \u00b6 We recommend to define values of step parameters via .pipeline/config.yml file . In this case, calling the step is essentially reduced to defining the step name. Calling the step can be done either in an orchestrator specific way (e.g. via a Jenkins library step) or on the command line. Jenkins Command Line library ( 'piper-lib-os' ) containerExecuteStructureTests script: this piper containerExecuteStructureTests Prerequisites \u00b6 Test configuration is available. Parameters \u00b6 Overview - Step \u00b6 Name Mandatory Additional information script (yes) reference to Jenkins main pipeline script testConfiguration yes testImage yes pullImage no testDriver no testReportFilePath no verbose no activates debug output Overview - Execution Environment \u00b6 Orchestrator-specific only These parameters are relevant for orchestrator usage and not considered when using the command line option. Name Mandatory Additional information containerCommand no containerShell no dockerEnvVars no dockerImage no dockerName no dockerOptions no dockerPullImage no dockerVolumeBind no dockerWorkspace no Details \u00b6 containerCommand \u00b6 Jenkins-specific: Used for proper environment setup. Kubernetes only: Allows to specify start command for container created with dockerImage parameter to overwrite Piper default (/usr/bin/tail -f /dev/null). back to overview Scope Details Aliases - Type string Mandatory no Default /busybox/tail -f /dev/null Secret no Configuration scope \u2612 parameter \u2612 general \u2612 steps \u2612 stages Resource references none containerShell \u00b6 Jenkins-specific: Used for proper environment setup. Allows to specify the shell to be executed for container with containerName. back to overview Scope Details Aliases - Type string Mandatory no Default /busybox/sh Secret no Configuration scope \u2612 parameter \u2612 general \u2612 steps \u2612 stages Resource references none dockerEnvVars \u00b6 Environment variables to set in the container, e.g. [http_proxy: \"proxy:8080\"]. back to overview Scope Details Aliases - Type map[string]string Mandatory no Default Secret no Configuration scope \u2612 parameter \u2612 general \u2612 steps \u2612 stages Resource references none dockerImage \u00b6 Name of the docker image that should be used. If empty, Docker is not used and the command is executed directly on the Jenkins system. back to overview Scope Details Aliases - Type string Mandatory no Default gcr.io/gcp-runtimes/container-structure-test:debug Secret no Configuration scope \u2612 parameter \u2612 general \u2612 steps \u2612 stages Resource references none dockerName \u00b6 Kubernetes only: Name of the container launching dockerImage. SideCar only: Name of the container in local network. back to overview Scope Details Aliases - Type string Mandatory no Default Secret no Configuration scope \u2612 parameter \u2612 general \u2612 steps \u2612 stages Resource references none dockerOptions \u00b6 Docker options to be set when starting the container. back to overview Scope Details Aliases - Type []string Mandatory no Default [{-u 0} {--entrypoint }] Secret no Configuration scope \u2612 parameter \u2612 general \u2612 steps \u2612 stages Resource references none dockerPullImage \u00b6 Set this to 'false' to bypass a docker image pull. Useful during development process. Allows testing of images which are available in the local registry only. back to overview Scope Details Aliases - Type bool Mandatory no Default true Possible values - true - false Secret no Configuration scope \u2612 parameter \u2612 general \u2612 steps \u2612 stages Resource references none dockerVolumeBind \u00b6 Jenkins-specific: Used for proper environment setup. Volumes that should be mounted into the docker container. back to overview Scope Details Aliases - Type map[string]string Mandatory no Default Secret no Configuration scope \u2612 parameter \u2612 general \u2612 steps \u2612 stages Resource references none dockerWorkspace \u00b6 Jenkins-specific: Used for proper environment setup. Kubernetes only: Specifies a dedicated user home directory for the container which will be passed as value for environment variable HOME . back to overview Scope Details Aliases - Type string Mandatory no Default Secret no Configuration scope \u2612 parameter \u2612 general \u2612 steps \u2612 stages Resource references none pullImage \u00b6 Force a pull of the tested image before running tests. Only relevant for testDriver 'docker'. back to overview Scope Details Aliases - Type bool Mandatory no Default false Possible values - true - false Secret no Configuration scope \u2612 parameter \u2610 general \u2612 steps \u2612 stages Resource references none script \u00b6 The common script environment of the Jenkinsfile running. Typically the reference to the script calling the pipeline step is provided with the this parameter, as in script: this . This allows the function to access the commonPipelineEnvironment for retrieving, e.g. configuration parameters. back to overview Scope Details Aliases - Type Jenkins Script Mandatory yes Default Secret no Configuration scope \u2610 parameter \u2610 general \u2610 steps \u2610 stages Resource references none testConfiguration \u00b6 Container structure test configuration in yml or json format. You can pass a pattern in order to execute multiple tests. back to overview Scope Details Aliases - Type string Mandatory yes Default $PIPER_testConfiguration (if set) Secret no Configuration scope \u2612 parameter \u2610 general \u2612 steps \u2612 stages Resource references none testDriver \u00b6 Container structure test driver to be used for testing, please see https://github.com/GoogleContainerTools/container-structure-test for details. back to overview Scope Details Aliases - Type string Mandatory no Default $PIPER_testDriver (if set) Secret no Configuration scope \u2612 parameter \u2610 general \u2612 steps \u2612 stages Resource references none testImage \u00b6 Image to be tested back to overview Scope Details Aliases - Type string Mandatory yes Default $PIPER_testImage (if set) Secret no Configuration scope \u2612 parameter \u2610 general \u2612 steps \u2612 stages Resource references none testReportFilePath \u00b6 Path and name of the test report which will be generated back to overview Scope Details Aliases - Type string Mandatory no Default cst-report.json Secret no Configuration scope \u2612 parameter \u2610 general \u2612 steps \u2612 stages Resource references none verbose \u00b6 verbose output back to overview Scope Details Aliases - Type bool Mandatory no Default false Possible values - true - false Secret no Configuration scope \u2612 parameter \u2612 general \u2612 steps \u2612 stages Resource references none Example \u00b6 containerExecuteStructureTests( script: this, testConfiguration: 'config.yml', testImage: 'node:latest' )","title":"containerExecuteStructureTests"},{"location":"steps/containerExecuteStructureTests/#containerexecutestructuretests","text":"In this step Container Structure Tests are executed.","title":"containerExecuteStructureTests"},{"location":"steps/containerExecuteStructureTests/#description","text":"This testing framework allows you to execute different test types against a Docker container, for example: - Command tests (only if a Docker Deamon is available) - File existence tests - File content tests - Metadata test","title":"Description"},{"location":"steps/containerExecuteStructureTests/#usage","text":"We recommend to define values of step parameters via .pipeline/config.yml file . In this case, calling the step is essentially reduced to defining the step name. Calling the step can be done either in an orchestrator specific way (e.g. via a Jenkins library step) or on the command line. Jenkins Command Line library ( 'piper-lib-os' ) containerExecuteStructureTests script: this piper containerExecuteStructureTests","title":"Usage"},{"location":"steps/containerExecuteStructureTests/#prerequisites","text":"Test configuration is available.","title":"Prerequisites"},{"location":"steps/containerExecuteStructureTests/#parameters","text":"","title":"Parameters"},{"location":"steps/containerExecuteStructureTests/#overview-step","text":"Name Mandatory Additional information script (yes) reference to Jenkins main pipeline script testConfiguration yes testImage yes pullImage no testDriver no testReportFilePath no verbose no activates debug output","title":"Overview - Step"},{"location":"steps/containerExecuteStructureTests/#overview-execution-environment","text":"Orchestrator-specific only These parameters are relevant for orchestrator usage and not considered when using the command line option. Name Mandatory Additional information containerCommand no containerShell no dockerEnvVars no dockerImage no dockerName no dockerOptions no dockerPullImage no dockerVolumeBind no dockerWorkspace no","title":"Overview - Execution Environment"},{"location":"steps/containerExecuteStructureTests/#details","text":"","title":"Details"},{"location":"steps/containerExecuteStructureTests/#containercommand","text":"Jenkins-specific: Used for proper environment setup. Kubernetes only: Allows to specify start command for container created with dockerImage parameter to overwrite Piper default (/usr/bin/tail -f /dev/null). back to overview Scope Details Aliases - Type string Mandatory no Default /busybox/tail -f /dev/null Secret no Configuration scope \u2612 parameter \u2612 general \u2612 steps \u2612 stages Resource references none","title":"containerCommand"},{"location":"steps/containerExecuteStructureTests/#containershell","text":"Jenkins-specific: Used for proper environment setup. Allows to specify the shell to be executed for container with containerName. back to overview Scope Details Aliases - Type string Mandatory no Default /busybox/sh Secret no Configuration scope \u2612 parameter \u2612 general \u2612 steps \u2612 stages Resource references none","title":"containerShell"},{"location":"steps/containerExecuteStructureTests/#dockerenvvars","text":"Environment variables to set in the container, e.g. [http_proxy: \"proxy:8080\"]. back to overview Scope Details Aliases - Type map[string]string Mandatory no Default Secret no Configuration scope \u2612 parameter \u2612 general \u2612 steps \u2612 stages Resource references none","title":"dockerEnvVars"},{"location":"steps/containerExecuteStructureTests/#dockerimage","text":"Name of the docker image that should be used. If empty, Docker is not used and the command is executed directly on the Jenkins system. back to overview Scope Details Aliases - Type string Mandatory no Default gcr.io/gcp-runtimes/container-structure-test:debug Secret no Configuration scope \u2612 parameter \u2612 general \u2612 steps \u2612 stages Resource references none","title":"dockerImage"},{"location":"steps/containerExecuteStructureTests/#dockername","text":"Kubernetes only: Name of the container launching dockerImage. SideCar only: Name of the container in local network. back to overview Scope Details Aliases - Type string Mandatory no Default Secret no Configuration scope \u2612 parameter \u2612 general \u2612 steps \u2612 stages Resource references none","title":"dockerName"},{"location":"steps/containerExecuteStructureTests/#dockeroptions","text":"Docker options to be set when starting the container. back to overview Scope Details Aliases - Type []string Mandatory no Default [{-u 0} {--entrypoint }] Secret no Configuration scope \u2612 parameter \u2612 general \u2612 steps \u2612 stages Resource references none","title":"dockerOptions"},{"location":"steps/containerExecuteStructureTests/#dockerpullimage","text":"Set this to 'false' to bypass a docker image pull. Useful during development process. Allows testing of images which are available in the local registry only. back to overview Scope Details Aliases - Type bool Mandatory no Default true Possible values - true - false Secret no Configuration scope \u2612 parameter \u2612 general \u2612 steps \u2612 stages Resource references none","title":"dockerPullImage"},{"location":"steps/containerExecuteStructureTests/#dockervolumebind","text":"Jenkins-specific: Used for proper environment setup. Volumes that should be mounted into the docker container. back to overview Scope Details Aliases - Type map[string]string Mandatory no Default Secret no Configuration scope \u2612 parameter \u2612 general \u2612 steps \u2612 stages Resource references none","title":"dockerVolumeBind"},{"location":"steps/containerExecuteStructureTests/#dockerworkspace","text":"Jenkins-specific: Used for proper environment setup. Kubernetes only: Specifies a dedicated user home directory for the container which will be passed as value for environment variable HOME . back to overview Scope Details Aliases - Type string Mandatory no Default Secret no Configuration scope \u2612 parameter \u2612 general \u2612 steps \u2612 stages Resource references none","title":"dockerWorkspace"},{"location":"steps/containerExecuteStructureTests/#pullimage","text":"Force a pull of the tested image before running tests. Only relevant for testDriver 'docker'. back to overview Scope Details Aliases - Type bool Mandatory no Default false Possible values - true - false Secret no Configuration scope \u2612 parameter \u2610 general \u2612 steps \u2612 stages Resource references none","title":"pullImage"},{"location":"steps/containerExecuteStructureTests/#script","text":"The common script environment of the Jenkinsfile running. Typically the reference to the script calling the pipeline step is provided with the this parameter, as in script: this . This allows the function to access the commonPipelineEnvironment for retrieving, e.g. configuration parameters. back to overview Scope Details Aliases - Type Jenkins Script Mandatory yes Default Secret no Configuration scope \u2610 parameter \u2610 general \u2610 steps \u2610 stages Resource references none","title":"script"},{"location":"steps/containerExecuteStructureTests/#testconfiguration","text":"Container structure test configuration in yml or json format. You can pass a pattern in order to execute multiple tests. back to overview Scope Details Aliases - Type string Mandatory yes Default $PIPER_testConfiguration (if set) Secret no Configuration scope \u2612 parameter \u2610 general \u2612 steps \u2612 stages Resource references none","title":"testConfiguration"},{"location":"steps/containerExecuteStructureTests/#testdriver","text":"Container structure test driver to be used for testing, please see https://github.com/GoogleContainerTools/container-structure-test for details. back to overview Scope Details Aliases - Type string Mandatory no Default $PIPER_testDriver (if set) Secret no Configuration scope \u2612 parameter \u2610 general \u2612 steps \u2612 stages Resource references none","title":"testDriver"},{"location":"steps/containerExecuteStructureTests/#testimage","text":"Image to be tested back to overview Scope Details Aliases - Type string Mandatory yes Default $PIPER_testImage (if set) Secret no Configuration scope \u2612 parameter \u2610 general \u2612 steps \u2612 stages Resource references none","title":"testImage"},{"location":"steps/containerExecuteStructureTests/#testreportfilepath","text":"Path and name of the test report which will be generated back to overview Scope Details Aliases - Type string Mandatory no Default cst-report.json Secret no Configuration scope \u2612 parameter \u2610 general \u2612 steps \u2612 stages Resource references none","title":"testReportFilePath"},{"location":"steps/containerExecuteStructureTests/#verbose","text":"verbose output back to overview Scope Details Aliases - Type bool Mandatory no Default false Possible values - true - false Secret no Configuration scope \u2612 parameter \u2612 general \u2612 steps \u2612 stages Resource references none","title":"verbose"},{"location":"steps/containerExecuteStructureTests/#example","text":"containerExecuteStructureTests( script: this, testConfiguration: 'config.yml', testImage: 'node:latest' )","title":"Example"},{"location":"steps/containerPushToRegistry/","text":"containerPushToRegistry \u00b6 Description \u00b6 This step allows you to push a Docker image into a dedicated Container registry. By default an image available via the local Docker daemon will be pushed. In case you want to pull an existing image from a remote container registry, a source image and source registry needs to be specified. This makes it possible to move an image from one registry to another. Prerequisites \u00b6 You need to have a valid user with write permissions in the target docker registry. Credentials for the target docker registry have been configured in Jenkins with a dedicated Id. You can create the credentials in your Jenkins via Jenkins -> Credentials -> System -> Global credentials (unrestricted) -> Add Credentials -> Kind: Username with Password ID: specify id which you then use for the configuration of dockerCredentialsId (see below) Example \u00b6 Usage of pipeline step: OPTION A: To pull a Docker image from an existing docker registry and push to a different docker registry: containerPushToRegistry script: this , dockerCredentialsId: 'myTargetRegistryCredentials' , sourceRegistryUrl: 'https://mysourceRegistry.url' , sourceImage: 'path/to/mySourceImageWith:tag' , dockerRegistryUrl: 'https://my.target.docker.registry:50000' OPTION B: To push a locally built docker image into the target registry (only possible when a Docker daemon is available on your Jenkins node): containerPushToRegistry script: this , dockerCredentialsId: 'myTargetRegistryCredentials' , dockerImage: 'path/to/myImageWith:tag' , dockerRegistryUrl: 'https://my.target.docker.registry:50000' Parameters \u00b6 name mandatory default possible values dockerArchive no dockerBuildImage no dockerCredentialsId yes dockerImage no dockerRegistryUrl yes script yes skopeoImage no sourceCredentialsId no sourceImage no sourceRegistryUrl no tagArtifactVersion no tagLatest no dockerArchive - Not supported yet - Docker archive to be pushed to registry dockerBuildImage - For images built locally on the Docker Deamon, reference to the image object resulting from docker.build execution dockerCredentialsId - Defines the id of the Jenkins username/password credentials containing the credentials for the target Docker registry. dockerImage - Defines the name (incl. tag) of the target image dockerRegistryUrl - Defines the registry url where the image should be pushed to, incl. the protocol like https://my.registry.com script - The common script environment of the Jenkinsfile running. Typically the reference to the script calling the pipeline step is provided with the this parameter, as in script: this . This allows the function to access the commonPipelineEnvironment for retrieving, e.g. configuration parameters. skopeoImage - Only if no Docker daemon available on your Jenkins image: Docker image to be used for Skopeo calls Unfortunately no proper image known to be available. Simple custom Dockerfile could look as follows: FROM fedora:29 RUN dnf install -y skopeo sourceCredentialsId - Defines the id of the Jenkins username/password credentials containing the credentials for the source Docker registry. sourceImage - Defines the name (incl. tag) of the source image to be pushed to a new image defined in dockerImage . This is helpful for moving images from one location to another. sourceRegistryUrl - Defines a registry url from where the image should optionally be pulled from, incl. the protocol like https://my.registry.com tagArtifactVersion - Defines if the image should be tagged with the artifact version tagLatest - Defines if the image should be tagged as latest Step configuration \u00b6 We recommend to define values of step parameters via config.yml file . In following sections of the config.yml the configuration is possible: parameter general step/stage dockerArchive X dockerBuildImage X dockerCredentialsId X X dockerImage X dockerRegistryUrl X X script skopeoImage X sourceCredentialsId X sourceImage X sourceRegistryUrl X tagArtifactVersion X tagLatest X Dependencies \u00b6 The step depends on the following Jenkins plugins credentials-binding docker kubernetes pipeline-utility-steps workflow-basic-steps workflow-cps-global-lib workflow-durable-task-step The kubernetes plugin is only used if running in a kubernetes environment. Transitive dependencies are omitted. The list might be incomplete. Consider using the ppiper/jenkins-master docker image. This images comes with preinstalled plugins.","title":"containerPushToRegistry"},{"location":"steps/containerPushToRegistry/#containerpushtoregistry","text":"","title":"containerPushToRegistry"},{"location":"steps/containerPushToRegistry/#description","text":"This step allows you to push a Docker image into a dedicated Container registry. By default an image available via the local Docker daemon will be pushed. In case you want to pull an existing image from a remote container registry, a source image and source registry needs to be specified. This makes it possible to move an image from one registry to another.","title":"Description"},{"location":"steps/containerPushToRegistry/#prerequisites","text":"You need to have a valid user with write permissions in the target docker registry. Credentials for the target docker registry have been configured in Jenkins with a dedicated Id. You can create the credentials in your Jenkins via Jenkins -> Credentials -> System -> Global credentials (unrestricted) -> Add Credentials -> Kind: Username with Password ID: specify id which you then use for the configuration of dockerCredentialsId (see below)","title":"Prerequisites"},{"location":"steps/containerPushToRegistry/#example","text":"Usage of pipeline step: OPTION A: To pull a Docker image from an existing docker registry and push to a different docker registry: containerPushToRegistry script: this , dockerCredentialsId: 'myTargetRegistryCredentials' , sourceRegistryUrl: 'https://mysourceRegistry.url' , sourceImage: 'path/to/mySourceImageWith:tag' , dockerRegistryUrl: 'https://my.target.docker.registry:50000' OPTION B: To push a locally built docker image into the target registry (only possible when a Docker daemon is available on your Jenkins node): containerPushToRegistry script: this , dockerCredentialsId: 'myTargetRegistryCredentials' , dockerImage: 'path/to/myImageWith:tag' , dockerRegistryUrl: 'https://my.target.docker.registry:50000'","title":"Example"},{"location":"steps/containerPushToRegistry/#parameters","text":"name mandatory default possible values dockerArchive no dockerBuildImage no dockerCredentialsId yes dockerImage no dockerRegistryUrl yes script yes skopeoImage no sourceCredentialsId no sourceImage no sourceRegistryUrl no tagArtifactVersion no tagLatest no dockerArchive - Not supported yet - Docker archive to be pushed to registry dockerBuildImage - For images built locally on the Docker Deamon, reference to the image object resulting from docker.build execution dockerCredentialsId - Defines the id of the Jenkins username/password credentials containing the credentials for the target Docker registry. dockerImage - Defines the name (incl. tag) of the target image dockerRegistryUrl - Defines the registry url where the image should be pushed to, incl. the protocol like https://my.registry.com script - The common script environment of the Jenkinsfile running. Typically the reference to the script calling the pipeline step is provided with the this parameter, as in script: this . This allows the function to access the commonPipelineEnvironment for retrieving, e.g. configuration parameters. skopeoImage - Only if no Docker daemon available on your Jenkins image: Docker image to be used for Skopeo calls Unfortunately no proper image known to be available. Simple custom Dockerfile could look as follows: FROM fedora:29 RUN dnf install -y skopeo sourceCredentialsId - Defines the id of the Jenkins username/password credentials containing the credentials for the source Docker registry. sourceImage - Defines the name (incl. tag) of the source image to be pushed to a new image defined in dockerImage . This is helpful for moving images from one location to another. sourceRegistryUrl - Defines a registry url from where the image should optionally be pulled from, incl. the protocol like https://my.registry.com tagArtifactVersion - Defines if the image should be tagged with the artifact version tagLatest - Defines if the image should be tagged as latest","title":"Parameters"},{"location":"steps/containerPushToRegistry/#step-configuration","text":"We recommend to define values of step parameters via config.yml file . In following sections of the config.yml the configuration is possible: parameter general step/stage dockerArchive X dockerBuildImage X dockerCredentialsId X X dockerImage X dockerRegistryUrl X X script skopeoImage X sourceCredentialsId X sourceImage X sourceRegistryUrl X tagArtifactVersion X tagLatest X","title":"Step configuration"},{"location":"steps/containerPushToRegistry/#dependencies","text":"The step depends on the following Jenkins plugins credentials-binding docker kubernetes pipeline-utility-steps workflow-basic-steps workflow-cps-global-lib workflow-durable-task-step The kubernetes plugin is only used if running in a kubernetes environment. Transitive dependencies are omitted. The list might be incomplete. Consider using the ppiper/jenkins-master docker image. This images comes with preinstalled plugins.","title":"Dependencies"},{"location":"steps/containerSaveImage/","text":"containerSaveImage \u00b6 Saves a container image as a tar file Description \u00b6 This step allows you to save a container image, for example a Docker image into a tar file. It can be used no matter if a Docker daemon is available or not. It will also work inside a Kubernetes cluster without access to a daemon. Usage \u00b6 We recommend to define values of step parameters via .pipeline/config.yml file . In this case, calling the step is essentially reduced to defining the step name. Calling the step can be done either in an orchestrator specific way (e.g. via a Jenkins library step) or on the command line. Jenkins Command Line library ( 'piper-lib-os' ) containerSaveImage script: this piper containerSaveImage Parameters \u00b6 Overview - Step \u00b6 Name Mandatory Additional information containerImage yes containerRegistryUrl yes script (yes) reference to Jenkins main pipeline script containerRegistryPassword no pass via ENV or Jenkins credentials containerRegistryUser no pass via ENV or Jenkins credentials dockerConfigJSON no pass via ENV, Vault or Jenkins credentials ( dockerConfigJsonCredentialsId ) filePath no imageFormat no verbose no activates debug output Overview - Execution Environment \u00b6 Orchestrator-specific only These parameters are relevant for orchestrator usage and not considered when using the command line option. Name Mandatory Additional information Details \u00b6 containerImage \u00b6 Container image to be saved. back to overview Scope Details Aliases - dockerImage - scanImage Type string Mandatory yes Default $PIPER_containerImage (if set) Secret no Configuration scope \u2612 parameter \u2612 general \u2612 steps \u2612 stages Resource references commonPipelineEnvironment : reference to: container/imageNameTag containerRegistryPassword \u00b6 For buildTool: docker : Password for container registry access - typically provided by the CI/CD environment. back to overview Scope Details Aliases - Type string Mandatory no Default $PIPER_containerRegistryPassword (if set) Secret yes Configuration scope \u2612 parameter \u2610 general \u2612 steps \u2612 stages Resource references commonPipelineEnvironment : reference to: container/repositoryPassword commonPipelineEnvironment : reference to: custom/repositoryPassword containerRegistryUrl \u00b6 For buildTool: docker : Url of the container registry - typically provided by the CI/CD environment. back to overview Scope Details Aliases dockerRegistryUrl Type string Mandatory yes Default $PIPER_containerRegistryUrl (if set) Secret no Configuration scope \u2612 parameter \u2612 general \u2612 steps \u2612 stages Resource references commonPipelineEnvironment : reference to: container/registryUrl containerRegistryUser \u00b6 For buildTool: docker : Username for container registry access - typically provided by the CI/CD environment. back to overview Scope Details Aliases - Type string Mandatory no Default $PIPER_containerRegistryUser (if set) Secret yes Configuration scope \u2612 parameter \u2610 general \u2612 steps \u2612 stages Resource references commonPipelineEnvironment : reference to: container/repositoryUsername commonPipelineEnvironment : reference to: custom/repositoryUsername dockerConfigJSON \u00b6 Path to the file .docker/config.json - this is typically provided by your CI/CD system. You can find more details about the Docker credentials in the Docker documentation . back to overview Scope Details Aliases - Type string Mandatory no Default $PIPER_dockerConfigJSON (if set) Secret yes Configuration scope \u2612 parameter \u2610 general \u2612 steps \u2612 stages Resource references commonPipelineEnvironment : reference to: custom/dockerConfigJSON Jenkins credential id: id: dockerConfigJsonCredentialsId Vault resource: name: dockerConfigFileVaultSecretName default value: docker-config Vault paths: $(vaultPath)/docker-config $(vaultBasePath)/$(vaultPipelineName)/docker-config $(vaultBasePath)/GROUP-SECRETS/docker-config filePath \u00b6 The path to the file to which the image should be saved. back to overview Scope Details Aliases - Type string Mandatory no Default $PIPER_filePath (if set) Secret no Configuration scope \u2612 parameter \u2610 general \u2612 steps \u2612 stages Resource references none imageFormat \u00b6 Format of the image when saving the docker image locally. back to overview Scope Details Aliases - Type string Mandatory no Default legacy Possible values - tarball - oci - legacy Secret no Configuration scope \u2612 parameter \u2610 general \u2612 steps \u2612 stages Resource references none script \u00b6 The common script environment of the Jenkinsfile running. Typically the reference to the script calling the pipeline step is provided with the this parameter, as in script: this . This allows the function to access the commonPipelineEnvironment for retrieving, e.g. configuration parameters. back to overview Scope Details Aliases - Type Jenkins Script Mandatory yes Default Secret no Configuration scope \u2610 parameter \u2610 general \u2610 steps \u2610 stages Resource references none verbose \u00b6 verbose output back to overview Scope Details Aliases - Type bool Mandatory no Default false Possible values - true - false Secret no Configuration scope \u2612 parameter \u2612 general \u2612 steps \u2612 stages Resource references none dockerConfigJsonCredentialsId \u00b6 Jenkins 'Secret file' credentials ID containing Docker config.json (with registry credential(s)). You can find more details about the Docker credentials in the Docker documentation . back to overview Scope Details Aliases dockerCredentialsId ( deprecated ) Type string Configuration scope \u2612 parameter \u2612 general \u2612 steps \u2612 stages","title":"containerSaveImage"},{"location":"steps/containerSaveImage/#containersaveimage","text":"Saves a container image as a tar file","title":"containerSaveImage"},{"location":"steps/containerSaveImage/#description","text":"This step allows you to save a container image, for example a Docker image into a tar file. It can be used no matter if a Docker daemon is available or not. It will also work inside a Kubernetes cluster without access to a daemon.","title":"Description"},{"location":"steps/containerSaveImage/#usage","text":"We recommend to define values of step parameters via .pipeline/config.yml file . In this case, calling the step is essentially reduced to defining the step name. Calling the step can be done either in an orchestrator specific way (e.g. via a Jenkins library step) or on the command line. Jenkins Command Line library ( 'piper-lib-os' ) containerSaveImage script: this piper containerSaveImage","title":"Usage"},{"location":"steps/containerSaveImage/#parameters","text":"","title":"Parameters"},{"location":"steps/containerSaveImage/#overview-step","text":"Name Mandatory Additional information containerImage yes containerRegistryUrl yes script (yes) reference to Jenkins main pipeline script containerRegistryPassword no pass via ENV or Jenkins credentials containerRegistryUser no pass via ENV or Jenkins credentials dockerConfigJSON no pass via ENV, Vault or Jenkins credentials ( dockerConfigJsonCredentialsId ) filePath no imageFormat no verbose no activates debug output","title":"Overview - Step"},{"location":"steps/containerSaveImage/#overview-execution-environment","text":"Orchestrator-specific only These parameters are relevant for orchestrator usage and not considered when using the command line option. Name Mandatory Additional information","title":"Overview - Execution Environment"},{"location":"steps/containerSaveImage/#details","text":"","title":"Details"},{"location":"steps/containerSaveImage/#containerimage","text":"Container image to be saved. back to overview Scope Details Aliases - dockerImage - scanImage Type string Mandatory yes Default $PIPER_containerImage (if set) Secret no Configuration scope \u2612 parameter \u2612 general \u2612 steps \u2612 stages Resource references commonPipelineEnvironment : reference to: container/imageNameTag","title":"containerImage"},{"location":"steps/containerSaveImage/#containerregistrypassword","text":"For buildTool: docker : Password for container registry access - typically provided by the CI/CD environment. back to overview Scope Details Aliases - Type string Mandatory no Default $PIPER_containerRegistryPassword (if set) Secret yes Configuration scope \u2612 parameter \u2610 general \u2612 steps \u2612 stages Resource references commonPipelineEnvironment : reference to: container/repositoryPassword commonPipelineEnvironment : reference to: custom/repositoryPassword","title":"containerRegistryPassword"},{"location":"steps/containerSaveImage/#containerregistryurl","text":"For buildTool: docker : Url of the container registry - typically provided by the CI/CD environment. back to overview Scope Details Aliases dockerRegistryUrl Type string Mandatory yes Default $PIPER_containerRegistryUrl (if set) Secret no Configuration scope \u2612 parameter \u2612 general \u2612 steps \u2612 stages Resource references commonPipelineEnvironment : reference to: container/registryUrl","title":"containerRegistryUrl"},{"location":"steps/containerSaveImage/#containerregistryuser","text":"For buildTool: docker : Username for container registry access - typically provided by the CI/CD environment. back to overview Scope Details Aliases - Type string Mandatory no Default $PIPER_containerRegistryUser (if set) Secret yes Configuration scope \u2612 parameter \u2610 general \u2612 steps \u2612 stages Resource references commonPipelineEnvironment : reference to: container/repositoryUsername commonPipelineEnvironment : reference to: custom/repositoryUsername","title":"containerRegistryUser"},{"location":"steps/containerSaveImage/#dockerconfigjson","text":"Path to the file .docker/config.json - this is typically provided by your CI/CD system. You can find more details about the Docker credentials in the Docker documentation . back to overview Scope Details Aliases - Type string Mandatory no Default $PIPER_dockerConfigJSON (if set) Secret yes Configuration scope \u2612 parameter \u2610 general \u2612 steps \u2612 stages Resource references commonPipelineEnvironment : reference to: custom/dockerConfigJSON Jenkins credential id: id: dockerConfigJsonCredentialsId Vault resource: name: dockerConfigFileVaultSecretName default value: docker-config Vault paths: $(vaultPath)/docker-config $(vaultBasePath)/$(vaultPipelineName)/docker-config $(vaultBasePath)/GROUP-SECRETS/docker-config","title":"dockerConfigJSON"},{"location":"steps/containerSaveImage/#filepath","text":"The path to the file to which the image should be saved. back to overview Scope Details Aliases - Type string Mandatory no Default $PIPER_filePath (if set) Secret no Configuration scope \u2612 parameter \u2610 general \u2612 steps \u2612 stages Resource references none","title":"filePath"},{"location":"steps/containerSaveImage/#imageformat","text":"Format of the image when saving the docker image locally. back to overview Scope Details Aliases - Type string Mandatory no Default legacy Possible values - tarball - oci - legacy Secret no Configuration scope \u2612 parameter \u2610 general \u2612 steps \u2612 stages Resource references none","title":"imageFormat"},{"location":"steps/containerSaveImage/#script","text":"The common script environment of the Jenkinsfile running. Typically the reference to the script calling the pipeline step is provided with the this parameter, as in script: this . This allows the function to access the commonPipelineEnvironment for retrieving, e.g. configuration parameters. back to overview Scope Details Aliases - Type Jenkins Script Mandatory yes Default Secret no Configuration scope \u2610 parameter \u2610 general \u2610 steps \u2610 stages Resource references none","title":"script"},{"location":"steps/containerSaveImage/#verbose","text":"verbose output back to overview Scope Details Aliases - Type bool Mandatory no Default false Possible values - true - false Secret no Configuration scope \u2612 parameter \u2612 general \u2612 steps \u2612 stages Resource references none","title":"verbose"},{"location":"steps/containerSaveImage/#dockerconfigjsoncredentialsid","text":"Jenkins 'Secret file' credentials ID containing Docker config.json (with registry credential(s)). You can find more details about the Docker credentials in the Docker documentation . back to overview Scope Details Aliases dockerCredentialsId ( deprecated ) Type string Configuration scope \u2612 parameter \u2612 general \u2612 steps \u2612 stages","title":"dockerConfigJsonCredentialsId"},{"location":"steps/contrastExecuteScan/","text":"contrastExecuteScan \u00b6 This step evaluates if the audit requirements for Contrast Assess have been fulfilled. Description \u00b6 This step evaluates if the audit requirements for Contrast Assess have been fulfilled after the execution of security tests by Contrast Assess. Usage \u00b6 We recommend to define values of step parameters via .pipeline/config.yml file . In this case, calling the step is essentially reduced to defining the step name. Calling the step can be done either in an orchestrator specific way (e.g. via a Jenkins library step) or on the command line. Jenkins Command Line library ( 'piper-lib-os' ) contrastExecuteScan script: this piper contrastExecuteScan Outputs \u00b6 Output type Details Parameters \u00b6 Overview - Step \u00b6 Name Mandatory Additional information applicationId yes organizationId yes script (yes) reference to Jenkins main pipeline script server yes serviceKey (yes) pass via ENV, Vault or Jenkins credentials ( userCredentialsId ) userApiKey (yes) pass via ENV, Vault or Jenkins credentials ( apiKeyCredentialsId ) username (yes) pass via ENV, Vault or Jenkins credentials ( userCredentialsId ) checkForCompliance no verbose no activates debug output vulnerabilityThresholdTotal no Overview - Execution Environment \u00b6 Orchestrator-specific only These parameters are relevant for orchestrator usage and not considered when using the command line option. Name Mandatory Additional information stashContent no Details \u00b6 applicationId \u00b6 Application UUID. It's the Last UUID of application View URL back to overview Scope Details Aliases - Type string Mandatory yes Default $PIPER_applicationId (if set) Secret no Configuration scope \u2612 parameter \u2610 general \u2612 steps \u2612 stages Resource references none checkForCompliance \u00b6 If set to true, the piper step checks for compliance based on vulnerability thresholds. Example - If total vulnerabilities are 10 and vulnerabilityThresholdTotal is set as 0, then the steps throws an compliance error. back to overview Scope Details Aliases - Type bool Mandatory no Default true Possible values - true - false Secret no Configuration scope \u2612 parameter \u2610 general \u2612 steps \u2612 stages Resource references none organizationId \u00b6 Organization UUID. It's the first UUID in most navigation URLs. back to overview Scope Details Aliases - Type string Mandatory yes Default $PIPER_organizationId (if set) Secret no Configuration scope \u2612 parameter \u2610 general \u2612 steps \u2612 stages Resource references none script \u00b6 The common script environment of the Jenkinsfile running. Typically the reference to the script calling the pipeline step is provided with the this parameter, as in script: this . This allows the function to access the commonPipelineEnvironment for retrieving, e.g. configuration parameters. back to overview Scope Details Aliases - Type Jenkins Script Mandatory yes Default Secret no Configuration scope \u2610 parameter \u2610 general \u2610 steps \u2610 stages Resource references none server \u00b6 The URL of the Contrast Assess Team server. back to overview Scope Details Aliases - Type string Mandatory yes Default $PIPER_server (if set) Secret no Configuration scope \u2612 parameter \u2610 general \u2612 steps \u2612 stages Resource references none serviceKey \u00b6 User Service Key for authorization access to Contrast Assess. back to overview Scope Details Aliases service_key Type string Mandatory yes Default $PIPER_serviceKey (if set) Secret yes Configuration scope \u2612 parameter \u2612 general \u2612 steps \u2612 stages Resource references Jenkins credential id: id: userCredentialsId reference to: serviceKey Vault resource: name: contrastVaultSecretName default value: contrast Vault paths: $(vaultPath)/contrast $(vaultBasePath)/$(vaultPipelineName)/contrast $(vaultBasePath)/GROUP-SECRETS/contrast stashContent \u00b6 Jenkins-specific: Used for proper environment setup. Specific stashes that should be considered for the step execution. back to overview Scope Details Aliases - Type []string Mandatory no Default - buildDescriptor - tests Secret no Configuration scope \u2612 parameter \u2612 general \u2612 steps \u2612 stages Resource references none userApiKey \u00b6 User API key for authorization access to Contrast Assess. back to overview Scope Details Aliases - Type string Mandatory yes Default $PIPER_userApiKey (if set) Secret yes Configuration scope \u2612 parameter \u2612 general \u2612 steps \u2612 stages Resource references Jenkins credential id: id: apiKeyCredentialsId Vault resource: name: contrastVaultSecretName default value: contrast Vault paths: $(vaultPath)/contrast $(vaultBasePath)/$(vaultPipelineName)/contrast $(vaultBasePath)/GROUP-SECRETS/contrast username \u00b6 Email to use for authorization access to Contrast Assess. back to overview Scope Details Aliases - Type string Mandatory yes Default $PIPER_username (if set) Secret yes Configuration scope \u2612 parameter \u2612 general \u2612 steps \u2612 stages Resource references Jenkins credential id: id: userCredentialsId reference to: username Vault resource: name: contrastVaultSecretName default value: contrast Vault paths: $(vaultPath)/contrast $(vaultBasePath)/$(vaultPipelineName)/contrast $(vaultBasePath)/GROUP-SECRETS/contrast verbose \u00b6 verbose output back to overview Scope Details Aliases - Type bool Mandatory no Default false Possible values - true - false Secret no Configuration scope \u2612 parameter \u2612 general \u2612 steps \u2612 stages Resource references none vulnerabilityThresholdTotal \u00b6 Threshold for maximum number of allowed vulnerabilities. back to overview Scope Details Aliases - Type int Mandatory no Default 0 Secret no Configuration scope \u2612 parameter \u2610 general \u2612 steps \u2612 stages Resource references none userCredentialsId \u00b6 Jenkins 'Username with password' credentials ID containing username (email) and service key to communicate with the Contrast server. back to overview Scope Details Aliases - Type string Configuration scope \u2612 parameter \u2612 general \u2612 steps \u2612 stages apiKeyCredentialsId \u00b6 Jenkins 'Secret text' credentials ID containing user API key to communicate with the Contrast server. back to overview Scope Details Aliases - Type string Configuration scope \u2612 parameter \u2612 general \u2612 steps \u2612 stages","title":"contrastExecuteScan"},{"location":"steps/contrastExecuteScan/#contrastexecutescan","text":"This step evaluates if the audit requirements for Contrast Assess have been fulfilled.","title":"contrastExecuteScan"},{"location":"steps/contrastExecuteScan/#description","text":"This step evaluates if the audit requirements for Contrast Assess have been fulfilled after the execution of security tests by Contrast Assess.","title":"Description"},{"location":"steps/contrastExecuteScan/#usage","text":"We recommend to define values of step parameters via .pipeline/config.yml file . In this case, calling the step is essentially reduced to defining the step name. Calling the step can be done either in an orchestrator specific way (e.g. via a Jenkins library step) or on the command line. Jenkins Command Line library ( 'piper-lib-os' ) contrastExecuteScan script: this piper contrastExecuteScan","title":"Usage"},{"location":"steps/contrastExecuteScan/#outputs","text":"Output type Details","title":"Outputs"},{"location":"steps/contrastExecuteScan/#parameters","text":"","title":"Parameters"},{"location":"steps/contrastExecuteScan/#overview-step","text":"Name Mandatory Additional information applicationId yes organizationId yes script (yes) reference to Jenkins main pipeline script server yes serviceKey (yes) pass via ENV, Vault or Jenkins credentials ( userCredentialsId ) userApiKey (yes) pass via ENV, Vault or Jenkins credentials ( apiKeyCredentialsId ) username (yes) pass via ENV, Vault or Jenkins credentials ( userCredentialsId ) checkForCompliance no verbose no activates debug output vulnerabilityThresholdTotal no","title":"Overview - Step"},{"location":"steps/contrastExecuteScan/#overview-execution-environment","text":"Orchestrator-specific only These parameters are relevant for orchestrator usage and not considered when using the command line option. Name Mandatory Additional information stashContent no","title":"Overview - Execution Environment"},{"location":"steps/contrastExecuteScan/#details","text":"","title":"Details"},{"location":"steps/contrastExecuteScan/#applicationid","text":"Application UUID. It's the Last UUID of application View URL back to overview Scope Details Aliases - Type string Mandatory yes Default $PIPER_applicationId (if set) Secret no Configuration scope \u2612 parameter \u2610 general \u2612 steps \u2612 stages Resource references none","title":"applicationId"},{"location":"steps/contrastExecuteScan/#checkforcompliance","text":"If set to true, the piper step checks for compliance based on vulnerability thresholds. Example - If total vulnerabilities are 10 and vulnerabilityThresholdTotal is set as 0, then the steps throws an compliance error. back to overview Scope Details Aliases - Type bool Mandatory no Default true Possible values - true - false Secret no Configuration scope \u2612 parameter \u2610 general \u2612 steps \u2612 stages Resource references none","title":"checkForCompliance"},{"location":"steps/contrastExecuteScan/#organizationid","text":"Organization UUID. It's the first UUID in most navigation URLs. back to overview Scope Details Aliases - Type string Mandatory yes Default $PIPER_organizationId (if set) Secret no Configuration scope \u2612 parameter \u2610 general \u2612 steps \u2612 stages Resource references none","title":"organizationId"},{"location":"steps/contrastExecuteScan/#script","text":"The common script environment of the Jenkinsfile running. Typically the reference to the script calling the pipeline step is provided with the this parameter, as in script: this . This allows the function to access the commonPipelineEnvironment for retrieving, e.g. configuration parameters. back to overview Scope Details Aliases - Type Jenkins Script Mandatory yes Default Secret no Configuration scope \u2610 parameter \u2610 general \u2610 steps \u2610 stages Resource references none","title":"script"},{"location":"steps/contrastExecuteScan/#server","text":"The URL of the Contrast Assess Team server. back to overview Scope Details Aliases - Type string Mandatory yes Default $PIPER_server (if set) Secret no Configuration scope \u2612 parameter \u2610 general \u2612 steps \u2612 stages Resource references none","title":"server"},{"location":"steps/contrastExecuteScan/#servicekey","text":"User Service Key for authorization access to Contrast Assess. back to overview Scope Details Aliases service_key Type string Mandatory yes Default $PIPER_serviceKey (if set) Secret yes Configuration scope \u2612 parameter \u2612 general \u2612 steps \u2612 stages Resource references Jenkins credential id: id: userCredentialsId reference to: serviceKey Vault resource: name: contrastVaultSecretName default value: contrast Vault paths: $(vaultPath)/contrast $(vaultBasePath)/$(vaultPipelineName)/contrast $(vaultBasePath)/GROUP-SECRETS/contrast","title":"serviceKey"},{"location":"steps/contrastExecuteScan/#stashcontent","text":"Jenkins-specific: Used for proper environment setup. Specific stashes that should be considered for the step execution. back to overview Scope Details Aliases - Type []string Mandatory no Default - buildDescriptor - tests Secret no Configuration scope \u2612 parameter \u2612 general \u2612 steps \u2612 stages Resource references none","title":"stashContent"},{"location":"steps/contrastExecuteScan/#userapikey","text":"User API key for authorization access to Contrast Assess. back to overview Scope Details Aliases - Type string Mandatory yes Default $PIPER_userApiKey (if set) Secret yes Configuration scope \u2612 parameter \u2612 general \u2612 steps \u2612 stages Resource references Jenkins credential id: id: apiKeyCredentialsId Vault resource: name: contrastVaultSecretName default value: contrast Vault paths: $(vaultPath)/contrast $(vaultBasePath)/$(vaultPipelineName)/contrast $(vaultBasePath)/GROUP-SECRETS/contrast","title":"userApiKey"},{"location":"steps/contrastExecuteScan/#username","text":"Email to use for authorization access to Contrast Assess. back to overview Scope Details Aliases - Type string Mandatory yes Default $PIPER_username (if set) Secret yes Configuration scope \u2612 parameter \u2612 general \u2612 steps \u2612 stages Resource references Jenkins credential id: id: userCredentialsId reference to: username Vault resource: name: contrastVaultSecretName default value: contrast Vault paths: $(vaultPath)/contrast $(vaultBasePath)/$(vaultPipelineName)/contrast $(vaultBasePath)/GROUP-SECRETS/contrast","title":"username"},{"location":"steps/contrastExecuteScan/#verbose","text":"verbose output back to overview Scope Details Aliases - Type bool Mandatory no Default false Possible values - true - false Secret no Configuration scope \u2612 parameter \u2612 general \u2612 steps \u2612 stages Resource references none","title":"verbose"},{"location":"steps/contrastExecuteScan/#vulnerabilitythresholdtotal","text":"Threshold for maximum number of allowed vulnerabilities. back to overview Scope Details Aliases - Type int Mandatory no Default 0 Secret no Configuration scope \u2612 parameter \u2610 general \u2612 steps \u2612 stages Resource references none","title":"vulnerabilityThresholdTotal"},{"location":"steps/contrastExecuteScan/#usercredentialsid","text":"Jenkins 'Username with password' credentials ID containing username (email) and service key to communicate with the Contrast server. back to overview Scope Details Aliases - Type string Configuration scope \u2612 parameter \u2612 general \u2612 steps \u2612 stages","title":"userCredentialsId"},{"location":"steps/contrastExecuteScan/#apikeycredentialsid","text":"Jenkins 'Secret text' credentials ID containing user API key to communicate with the Contrast server. back to overview Scope Details Aliases - Type string Configuration scope \u2612 parameter \u2612 general \u2612 steps \u2612 stages","title":"apiKeyCredentialsId"},{"location":"steps/credentialdiggerScan/","text":"credentialdiggerScan \u00b6 Scan a repository on GitHub with Credential Digger Description \u00b6 This step allows you to scan a repository on Github using Credential Digger. It can for example be used for DevSecOps scenarios to verify the source code does not contain hard-coded credentials before being merged or released for production. It supports several scan flavors, i.e., full scans of a repo, scan of a snapshot, or scan of a pull request. Usage \u00b6 We recommend to define values of step parameters via .pipeline/config.yml file . In this case, calling the step is essentially reduced to defining the step name. Calling the step can be done either in an orchestrator specific way (e.g. via a Jenkins library step) or on the command line. Jenkins Command Line library ( 'piper-lib-os' ) credentialdiggerScan script: this piper credentialdiggerScan Outputs \u00b6 Output type Details Parameters \u00b6 Overview - Step \u00b6 Name Mandatory Additional information script (yes) reference to Jenkins main pipeline script token (yes) pass via ENV, Vault or Jenkins credentials ( githubTokenCredentialsId ) apiUrl no debug no exportAll no models no prNumber no repository no rulesDownloadUrl no rulesFile no snapshot no verbose no activates debug output Overview - Execution Environment \u00b6 Orchestrator-specific only These parameters are relevant for orchestrator usage and not considered when using the command line option. Name Mandatory Additional information containerCommand no containerShell no dockerEnvVars no dockerImage no dockerName no dockerOptions no dockerPullImage no dockerVolumeBind no dockerWorkspace no Details \u00b6 apiUrl \u00b6 Set the GitHub API url. Needed for scanning a pull request. back to overview Scope Details Aliases githubApiUrl Type string Mandatory no Default https://api.github.com Secret no Configuration scope \u2612 parameter \u2612 general \u2612 steps \u2612 stages Resource references none containerCommand \u00b6 Jenkins-specific: Used for proper environment setup. Kubernetes only: Allows to specify start command for container created with dockerImage parameter to overwrite Piper default (/usr/bin/tail -f /dev/null). back to overview Scope Details Aliases - Type string Mandatory no Default Secret no Configuration scope \u2612 parameter \u2612 general \u2612 steps \u2612 stages Resource references none containerShell \u00b6 Jenkins-specific: Used for proper environment setup. Allows to specify the shell to be executed for container with containerName. back to overview Scope Details Aliases - Type string Mandatory no Default Secret no Configuration scope \u2612 parameter \u2612 general \u2612 steps \u2612 stages Resource references none debug \u00b6 Execute the scans in debug mode (i.e., print logs). back to overview Scope Details Aliases verbose Type bool Mandatory no Default false Possible values - true - false Secret no Configuration scope \u2612 parameter \u2612 general \u2612 steps \u2612 stages Resource references none dockerEnvVars \u00b6 Environment variables to set in the container, e.g. [http_proxy: \"proxy:8080\"]. back to overview Scope Details Aliases - Type map[string]string Mandatory no Default Secret no Configuration scope \u2612 parameter \u2612 general \u2612 steps \u2612 stages Resource references none dockerImage \u00b6 Name of the docker image that should be used. If empty, Docker is not used and the command is executed directly on the Jenkins system. back to overview Scope Details Aliases - Type string Mandatory no Default saposs/credentialdigger:4.14.0 Secret no Configuration scope \u2612 parameter \u2612 general \u2612 steps \u2612 stages Resource references none dockerName \u00b6 Kubernetes only: Name of the container launching dockerImage. SideCar only: Name of the container in local network. back to overview Scope Details Aliases - Type string Mandatory no Default Secret no Configuration scope \u2612 parameter \u2612 general \u2612 steps \u2612 stages Resource references none dockerOptions \u00b6 Docker options to be set when starting the container. back to overview Scope Details Aliases - Type []string Mandatory no Default Secret no Configuration scope \u2612 parameter \u2612 general \u2612 steps \u2612 stages Resource references none dockerPullImage \u00b6 Set this to 'false' to bypass a docker image pull. Useful during development process. Allows testing of images which are available in the local registry only. back to overview Scope Details Aliases - Type bool Mandatory no Default true Possible values - true - false Secret no Configuration scope \u2612 parameter \u2612 general \u2612 steps \u2612 stages Resource references none dockerVolumeBind \u00b6 Jenkins-specific: Used for proper environment setup. Volumes that should be mounted into the docker container. back to overview Scope Details Aliases - Type map[string]string Mandatory no Default Secret no Configuration scope \u2612 parameter \u2612 general \u2612 steps \u2612 stages Resource references none dockerWorkspace \u00b6 Jenkins-specific: Used for proper environment setup. Kubernetes only: Specifies a dedicated user home directory for the container which will be passed as value for environment variable HOME . back to overview Scope Details Aliases - Type string Mandatory no Default Secret no Configuration scope \u2612 parameter \u2612 general \u2612 steps \u2612 stages Resource references none exportAll \u00b6 Export all the findings, i.e., including non-leaks. back to overview Scope Details Aliases - Type bool Mandatory no Default false Possible values - true - false Secret no Configuration scope \u2612 parameter \u2610 general \u2612 steps \u2612 stages Resource references none models \u00b6 Machine learning models to automatically verify the findings. back to overview Scope Details Aliases - Type []string Mandatory no Default $PIPER_models (if set) Secret no Configuration scope \u2612 parameter \u2610 general \u2612 steps \u2612 stages Resource references none prNumber \u00b6 If set, scan the pull request open with this number. back to overview Scope Details Aliases - Type int Mandatory no Default 0 Secret no Configuration scope \u2612 parameter \u2610 general \u2612 steps \u2612 stages Resource references none repository \u00b6 URL of the GitHub repository (was name, but we need the url). In case it's missing, use the URL of the current repository. back to overview Scope Details Aliases githubRepo Type string Mandatory no Default $PIPER_repository (if set) Secret no Configuration scope \u2612 parameter \u2610 general \u2612 steps \u2612 stages Resource references none rulesDownloadUrl \u00b6 URL where to download custom rules. The file published at this URL must be formatted as the default ruleset https://raw.githubusercontent.com/SAP/credential-digger/main/ui/backend/rules.yml back to overview Scope Details Aliases - Type string Mandatory no Default $PIPER_rulesDownloadUrl (if set) Secret no Configuration scope \u2612 parameter \u2610 general \u2612 steps \u2612 stages Resource references none rulesFile \u00b6 Name of the rules file used locally within the step. If a remote files for rules is declared as rulesDownloadUrl , the stashed file is ignored. If you change the file's name make sure your stashing configuration also reflects this. back to overview Scope Details Aliases - Type string Mandatory no Default inputs/rules.yml Secret no Configuration scope \u2612 parameter \u2610 general \u2612 steps \u2612 stages Resource references none script \u00b6 The common script environment of the Jenkinsfile running. Typically the reference to the script calling the pipeline step is provided with the this parameter, as in script: this . This allows the function to access the commonPipelineEnvironment for retrieving, e.g. configuration parameters. back to overview Scope Details Aliases - Type Jenkins Script Mandatory yes Default Secret no Configuration scope \u2610 parameter \u2610 general \u2610 steps \u2610 stages Resource references none snapshot \u00b6 If set, scan the snapshot of the repository at this commit_id/branch. back to overview Scope Details Aliases - Type string Mandatory no Default $PIPER_snapshot (if set) Secret no Configuration scope \u2612 parameter \u2610 general \u2612 steps \u2612 stages Resource references none token \u00b6 GitHub personal access token as per https://help.github.com/en/github/authenticating-to-github/creating-a-personal-access-token-for-the-command-line back to overview Scope Details Aliases - githubToken - access_token Type string Mandatory yes Default $PIPER_token (if set) Secret yes Configuration scope \u2612 parameter \u2612 general \u2612 steps \u2612 stages Resource references Jenkins credential id: id: githubTokenCredentialsId Vault resource: name: githubVaultSecretName default value: github Vault paths: $(vaultPath)/github $(vaultBasePath)/$(vaultPipelineName)/github $(vaultBasePath)/GROUP-SECRETS/github verbose \u00b6 verbose output back to overview Scope Details Aliases - Type bool Mandatory no Default false Possible values - true - false Secret no Configuration scope \u2612 parameter \u2612 general \u2612 steps \u2612 stages Resource references none githubTokenCredentialsId \u00b6 Jenkins 'Secret text' credentials ID containing token to authenticate to GitHub. back to overview Scope Details Aliases - Type string Configuration scope \u2612 parameter \u2612 general \u2612 steps \u2612 stages","title":"credentialdiggerScan"},{"location":"steps/credentialdiggerScan/#credentialdiggerscan","text":"Scan a repository on GitHub with Credential Digger","title":"credentialdiggerScan"},{"location":"steps/credentialdiggerScan/#description","text":"This step allows you to scan a repository on Github using Credential Digger. It can for example be used for DevSecOps scenarios to verify the source code does not contain hard-coded credentials before being merged or released for production. It supports several scan flavors, i.e., full scans of a repo, scan of a snapshot, or scan of a pull request.","title":"Description"},{"location":"steps/credentialdiggerScan/#usage","text":"We recommend to define values of step parameters via .pipeline/config.yml file . In this case, calling the step is essentially reduced to defining the step name. Calling the step can be done either in an orchestrator specific way (e.g. via a Jenkins library step) or on the command line. Jenkins Command Line library ( 'piper-lib-os' ) credentialdiggerScan script: this piper credentialdiggerScan","title":"Usage"},{"location":"steps/credentialdiggerScan/#outputs","text":"Output type Details","title":"Outputs"},{"location":"steps/credentialdiggerScan/#parameters","text":"","title":"Parameters"},{"location":"steps/credentialdiggerScan/#overview-step","text":"Name Mandatory Additional information script (yes) reference to Jenkins main pipeline script token (yes) pass via ENV, Vault or Jenkins credentials ( githubTokenCredentialsId ) apiUrl no debug no exportAll no models no prNumber no repository no rulesDownloadUrl no rulesFile no snapshot no verbose no activates debug output","title":"Overview - Step"},{"location":"steps/credentialdiggerScan/#overview-execution-environment","text":"Orchestrator-specific only These parameters are relevant for orchestrator usage and not considered when using the command line option. Name Mandatory Additional information containerCommand no containerShell no dockerEnvVars no dockerImage no dockerName no dockerOptions no dockerPullImage no dockerVolumeBind no dockerWorkspace no","title":"Overview - Execution Environment"},{"location":"steps/credentialdiggerScan/#details","text":"","title":"Details"},{"location":"steps/credentialdiggerScan/#apiurl","text":"Set the GitHub API url. Needed for scanning a pull request. back to overview Scope Details Aliases githubApiUrl Type string Mandatory no Default https://api.github.com Secret no Configuration scope \u2612 parameter \u2612 general \u2612 steps \u2612 stages Resource references none","title":"apiUrl"},{"location":"steps/credentialdiggerScan/#containercommand","text":"Jenkins-specific: Used for proper environment setup. Kubernetes only: Allows to specify start command for container created with dockerImage parameter to overwrite Piper default (/usr/bin/tail -f /dev/null). back to overview Scope Details Aliases - Type string Mandatory no Default Secret no Configuration scope \u2612 parameter \u2612 general \u2612 steps \u2612 stages Resource references none","title":"containerCommand"},{"location":"steps/credentialdiggerScan/#containershell","text":"Jenkins-specific: Used for proper environment setup. Allows to specify the shell to be executed for container with containerName. back to overview Scope Details Aliases - Type string Mandatory no Default Secret no Configuration scope \u2612 parameter \u2612 general \u2612 steps \u2612 stages Resource references none","title":"containerShell"},{"location":"steps/credentialdiggerScan/#debug","text":"Execute the scans in debug mode (i.e., print logs). back to overview Scope Details Aliases verbose Type bool Mandatory no Default false Possible values - true - false Secret no Configuration scope \u2612 parameter \u2612 general \u2612 steps \u2612 stages Resource references none","title":"debug"},{"location":"steps/credentialdiggerScan/#dockerenvvars","text":"Environment variables to set in the container, e.g. [http_proxy: \"proxy:8080\"]. back to overview Scope Details Aliases - Type map[string]string Mandatory no Default Secret no Configuration scope \u2612 parameter \u2612 general \u2612 steps \u2612 stages Resource references none","title":"dockerEnvVars"},{"location":"steps/credentialdiggerScan/#dockerimage","text":"Name of the docker image that should be used. If empty, Docker is not used and the command is executed directly on the Jenkins system. back to overview Scope Details Aliases - Type string Mandatory no Default saposs/credentialdigger:4.14.0 Secret no Configuration scope \u2612 parameter \u2612 general \u2612 steps \u2612 stages Resource references none","title":"dockerImage"},{"location":"steps/credentialdiggerScan/#dockername","text":"Kubernetes only: Name of the container launching dockerImage. SideCar only: Name of the container in local network. back to overview Scope Details Aliases - Type string Mandatory no Default Secret no Configuration scope \u2612 parameter \u2612 general \u2612 steps \u2612 stages Resource references none","title":"dockerName"},{"location":"steps/credentialdiggerScan/#dockeroptions","text":"Docker options to be set when starting the container. back to overview Scope Details Aliases - Type []string Mandatory no Default Secret no Configuration scope \u2612 parameter \u2612 general \u2612 steps \u2612 stages Resource references none","title":"dockerOptions"},{"location":"steps/credentialdiggerScan/#dockerpullimage","text":"Set this to 'false' to bypass a docker image pull. Useful during development process. Allows testing of images which are available in the local registry only. back to overview Scope Details Aliases - Type bool Mandatory no Default true Possible values - true - false Secret no Configuration scope \u2612 parameter \u2612 general \u2612 steps \u2612 stages Resource references none","title":"dockerPullImage"},{"location":"steps/credentialdiggerScan/#dockervolumebind","text":"Jenkins-specific: Used for proper environment setup. Volumes that should be mounted into the docker container. back to overview Scope Details Aliases - Type map[string]string Mandatory no Default Secret no Configuration scope \u2612 parameter \u2612 general \u2612 steps \u2612 stages Resource references none","title":"dockerVolumeBind"},{"location":"steps/credentialdiggerScan/#dockerworkspace","text":"Jenkins-specific: Used for proper environment setup. Kubernetes only: Specifies a dedicated user home directory for the container which will be passed as value for environment variable HOME . back to overview Scope Details Aliases - Type string Mandatory no Default Secret no Configuration scope \u2612 parameter \u2612 general \u2612 steps \u2612 stages Resource references none","title":"dockerWorkspace"},{"location":"steps/credentialdiggerScan/#exportall","text":"Export all the findings, i.e., including non-leaks. back to overview Scope Details Aliases - Type bool Mandatory no Default false Possible values - true - false Secret no Configuration scope \u2612 parameter \u2610 general \u2612 steps \u2612 stages Resource references none","title":"exportAll"},{"location":"steps/credentialdiggerScan/#models","text":"Machine learning models to automatically verify the findings. back to overview Scope Details Aliases - Type []string Mandatory no Default $PIPER_models (if set) Secret no Configuration scope \u2612 parameter \u2610 general \u2612 steps \u2612 stages Resource references none","title":"models"},{"location":"steps/credentialdiggerScan/#prnumber","text":"If set, scan the pull request open with this number. back to overview Scope Details Aliases - Type int Mandatory no Default 0 Secret no Configuration scope \u2612 parameter \u2610 general \u2612 steps \u2612 stages Resource references none","title":"prNumber"},{"location":"steps/credentialdiggerScan/#repository","text":"URL of the GitHub repository (was name, but we need the url). In case it's missing, use the URL of the current repository. back to overview Scope Details Aliases githubRepo Type string Mandatory no Default $PIPER_repository (if set) Secret no Configuration scope \u2612 parameter \u2610 general \u2612 steps \u2612 stages Resource references none","title":"repository"},{"location":"steps/credentialdiggerScan/#rulesdownloadurl","text":"URL where to download custom rules. The file published at this URL must be formatted as the default ruleset https://raw.githubusercontent.com/SAP/credential-digger/main/ui/backend/rules.yml back to overview Scope Details Aliases - Type string Mandatory no Default $PIPER_rulesDownloadUrl (if set) Secret no Configuration scope \u2612 parameter \u2610 general \u2612 steps \u2612 stages Resource references none","title":"rulesDownloadUrl"},{"location":"steps/credentialdiggerScan/#rulesfile","text":"Name of the rules file used locally within the step. If a remote files for rules is declared as rulesDownloadUrl , the stashed file is ignored. If you change the file's name make sure your stashing configuration also reflects this. back to overview Scope Details Aliases - Type string Mandatory no Default inputs/rules.yml Secret no Configuration scope \u2612 parameter \u2610 general \u2612 steps \u2612 stages Resource references none","title":"rulesFile"},{"location":"steps/credentialdiggerScan/#script","text":"The common script environment of the Jenkinsfile running. Typically the reference to the script calling the pipeline step is provided with the this parameter, as in script: this . This allows the function to access the commonPipelineEnvironment for retrieving, e.g. configuration parameters. back to overview Scope Details Aliases - Type Jenkins Script Mandatory yes Default Secret no Configuration scope \u2610 parameter \u2610 general \u2610 steps \u2610 stages Resource references none","title":"script"},{"location":"steps/credentialdiggerScan/#snapshot","text":"If set, scan the snapshot of the repository at this commit_id/branch. back to overview Scope Details Aliases - Type string Mandatory no Default $PIPER_snapshot (if set) Secret no Configuration scope \u2612 parameter \u2610 general \u2612 steps \u2612 stages Resource references none","title":"snapshot"},{"location":"steps/credentialdiggerScan/#token","text":"GitHub personal access token as per https://help.github.com/en/github/authenticating-to-github/creating-a-personal-access-token-for-the-command-line back to overview Scope Details Aliases - githubToken - access_token Type string Mandatory yes Default $PIPER_token (if set) Secret yes Configuration scope \u2612 parameter \u2612 general \u2612 steps \u2612 stages Resource references Jenkins credential id: id: githubTokenCredentialsId Vault resource: name: githubVaultSecretName default value: github Vault paths: $(vaultPath)/github $(vaultBasePath)/$(vaultPipelineName)/github $(vaultBasePath)/GROUP-SECRETS/github","title":"token"},{"location":"steps/credentialdiggerScan/#verbose","text":"verbose output back to overview Scope Details Aliases - Type bool Mandatory no Default false Possible values - true - false Secret no Configuration scope \u2612 parameter \u2612 general \u2612 steps \u2612 stages Resource references none","title":"verbose"},{"location":"steps/credentialdiggerScan/#githubtokencredentialsid","text":"Jenkins 'Secret text' credentials ID containing token to authenticate to GitHub. back to overview Scope Details Aliases - Type string Configuration scope \u2612 parameter \u2612 general \u2612 steps \u2612 stages","title":"githubTokenCredentialsId"},{"location":"steps/debugReportArchive/","text":"debugReportArchive \u00b6 Description \u00b6 Archives the debug_report.txt artifact which facilitates analyzing pipeline errors by collecting information about the Jenkins environment in which the pipeline was run. There is a single config option 'shareConfidentialInformation' to enable including (possibly) confidential information in the debug report, which could be helpful depending on the specific error. By default this information is not included. Parameters \u00b6 name mandatory default possible values printToConsole no script yes shareConfidentialInformation no false true , false printToConsole - Flag to enable printing the generated debug_report.txt also to the console. script - The common script environment of the Jenkinsfile running. Typically the reference to the script calling the pipeline step is provided with the this parameter, as in script: this . This allows the function to access the commonPipelineEnvironment for retrieving, e.g. configuration parameters. shareConfidentialInformation - Flag to control whether potentially confidential information will be included in the debug_report.txt. Default value is false . Additional information written to the log when this flag is true includes MTA modules, NPM modules, the GitHub repository and branch, the global extension repository if used, a shared config file path, and all used global and local shared libraries. Step configuration \u00b6 We recommend to define values of step parameters via config.yml file . In following sections of the config.yml the configuration is possible: parameter general step/stage printToConsole script shareConfidentialInformation X","title":"debugReportArchive"},{"location":"steps/debugReportArchive/#debugreportarchive","text":"","title":"debugReportArchive"},{"location":"steps/debugReportArchive/#description","text":"Archives the debug_report.txt artifact which facilitates analyzing pipeline errors by collecting information about the Jenkins environment in which the pipeline was run. There is a single config option 'shareConfidentialInformation' to enable including (possibly) confidential information in the debug report, which could be helpful depending on the specific error. By default this information is not included.","title":"Description"},{"location":"steps/debugReportArchive/#parameters","text":"name mandatory default possible values printToConsole no script yes shareConfidentialInformation no false true , false printToConsole - Flag to enable printing the generated debug_report.txt also to the console. script - The common script environment of the Jenkinsfile running. Typically the reference to the script calling the pipeline step is provided with the this parameter, as in script: this . This allows the function to access the commonPipelineEnvironment for retrieving, e.g. configuration parameters. shareConfidentialInformation - Flag to control whether potentially confidential information will be included in the debug_report.txt. Default value is false . Additional information written to the log when this flag is true includes MTA modules, NPM modules, the GitHub repository and branch, the global extension repository if used, a shared config file path, and all used global and local shared libraries.","title":"Parameters"},{"location":"steps/debugReportArchive/#step-configuration","text":"We recommend to define values of step parameters via config.yml file . In following sections of the config.yml the configuration is possible: parameter general step/stage printToConsole script shareConfidentialInformation X","title":"Step configuration"},{"location":"steps/detectExecuteScan/","text":"detectExecuteScan \u00b6 Executes BlackDuck Detect scan Description \u00b6 This step executes BlackDuck Detect scans. BlackDuck Detect command line utlity can be used to run various scans including BlackDuck scans. This step allows users to run BlackDuck scans by default. Please configure your BlackDuck server Url using the serverUrl parameter and the API token of your user using the apiToken parameter for this step. Usage \u00b6 We recommend to define values of step parameters via .pipeline/config.yml file . In this case, calling the step is essentially reduced to defining the step name. Calling the step can be done either in an orchestrator specific way (e.g. via a Jenkins library step) or on the command line. Jenkins Command Line library ( 'piper-lib-os' ) detectExecuteScan script: this piper detectExecuteScan Outputs \u00b6 Output type Details influx measurement step_data detect measurement detect_data vulnerabilities major_vulnerabilities minor_vulnerabilities components policy_violations Prerequisites \u00b6 You need to store the API token for the Detect service as 'Secret text' credential in your Jenkins system. Parameters \u00b6 Overview - Step \u00b6 Name Mandatory Additional information imageNameTags (yes) mandatory in case of: - scanContainerDistro = ubuntu - scanContainerDistro = centos - scanContainerDistro = alpine projectName yes registryUrl (yes) mandatory in case of: - scanContainerDistro = ubuntu - scanContainerDistro = centos - scanContainerDistro = alpine repositoryPassword (yes) mandatory in case of: - scanContainerDistro = ubuntu - scanContainerDistro = centos - scanContainerDistro = alpine repositoryUsername (yes) mandatory in case of: - scanContainerDistro = ubuntu - scanContainerDistro = centos - scanContainerDistro = alpine script (yes) reference to Jenkins main pipeline script serverUrl yes token (yes) pass via ENV, Vault or Jenkins credentials ( detectTokenCredentialsId ) assignees no buildDescriptorList no buildMTA no buildMaven no buildTool no codeLocation no containerScan no createResultIssue no customEnvironmentVariables no customScanVersion no customTlsCertificateLinks no defaultNpmRegistry no dependencyPath no detectTools no enableDiagnostics no excludedDirectories no excludedPackageManagers no failOn no failOnSevereVulnerabilities no generateReportsForEmptyProjects no githubApiUrl no githubToken no pass via ENV, Vault or Jenkins credentials ( githubTokenCredentialsId ) globalSettingsFile no groups no includedPackageManagers no installArtifacts no installNPM no m2Path no mavenExcludedScopes no mtaPlatform no npmArguments no npmDependencyTypesExcluded no owner no pomPath no privateModules no privateModulesGitToken no pass via ENV, Vault or Jenkins credentials ( golangPrivateModulesGitTokenCredentialsId ) projectSettingsFile no repository no scanContainerDistro no scanOnChanges no scanPaths no scanProperties no scanners no successOnSkip no unmap no useDetect8 no useDetect9 no verbose no activates debug output version no versioningModel no Overview - Execution Environment \u00b6 Orchestrator-specific only These parameters are relevant for orchestrator usage and not considered when using the command line option. Name Mandatory Additional information containerCommand no containerName no containerShell no dockerEnvVars no dockerImage no dockerName no dockerOptions no dockerPullImage no dockerVolumeBind no dockerWorkspace no sidecarEnvVars no sidecarImage no sidecarName no sidecarOptions no sidecarPullImage no sidecarReadyCommand no sidecarVolumeBind no sidecarWorkspace no stashContent no Details \u00b6 assignees \u00b6 Defines the assignees for the Github Issue created/updated with the results of the scan as a list of login names. back to overview Scope Details Aliases - Type []string Mandatory no Default Secret no Configuration scope \u2612 parameter \u2610 general \u2612 steps \u2612 stages Resource references none buildDescriptorList \u00b6 List of build descriptors and therefore modules for execution of the npm scripts. The elements have to be paths to the build descriptors. back to overview Scope Details Aliases - Type []string Mandatory no Default $PIPER_buildDescriptorList (if set) Secret no Configuration scope \u2612 parameter \u2610 general \u2612 steps \u2612 stages Resource references none buildMTA \u00b6 Experiment parameter for MTA projects building back to overview Scope Details Aliases - Type bool Mandatory no Default false Possible values - true - false Secret no Configuration scope \u2612 parameter \u2610 general \u2612 steps \u2612 stages Resource references none buildMaven \u00b6 Experiment parameter for maven multi-modules projects building back to overview Scope Details Aliases - Type bool Mandatory no Default false Possible values - true - false Secret no Configuration scope \u2612 parameter \u2610 general \u2612 steps \u2612 stages Resource references none buildTool \u00b6 Defines the tool which is used for building the artifact. back to overview Scope Details Aliases - Type string Mandatory no Default $PIPER_buildTool (if set) Secret no Configuration scope \u2612 parameter \u2612 general \u2612 steps \u2612 stages Resource references commonPipelineEnvironment : reference to: buildTool codeLocation \u00b6 An override for the name Detect will use for the scan file it creates. back to overview Scope Details Aliases - Type string Mandatory no Default $PIPER_codeLocation (if set) Secret no Configuration scope \u2612 parameter \u2610 general \u2612 steps \u2612 stages Resource references none containerCommand \u00b6 Jenkins-specific: Used for proper environment setup. Kubernetes only: Allows to specify start command for container created with dockerImage parameter to overwrite Piper default (/usr/bin/tail -f /dev/null). back to overview Scope Details Aliases - Type string Mandatory no Default Secret no Configuration scope \u2612 parameter \u2612 general \u2612 steps \u2612 stages Resource references none containerName \u00b6 Jenkins-specific: Used for proper environment setup. Optional configuration in combination with containerMap to define the container where the commands should be executed in. back to overview Scope Details Aliases - Type string Mandatory no Default openjdk Secret no Configuration scope \u2612 parameter \u2612 general \u2612 steps \u2612 stages Resource references none containerScan \u00b6 When set to true, Container Scanning will be used instead of Docker Inspector as the Detect tool for scanning images, and all other detect tools will be ignored in the scan back to overview Scope Details Aliases detect/containerScan Type bool Mandatory no Default false Possible values - true - false Secret no Configuration scope \u2612 parameter \u2610 general \u2612 steps \u2612 stages Resource references none containerShell \u00b6 Jenkins-specific: Used for proper environment setup. Allows to specify the shell to be executed for container with containerName. back to overview Scope Details Aliases - Type string Mandatory no Default Secret no Configuration scope \u2612 parameter \u2612 general \u2612 steps \u2612 stages Resource references none createResultIssue \u00b6 Whether the step creates a GitHub issues containing the scan results in the originating repo. For each vulnerability a separate issue will be created. Since optimized pipelines are headless the creation is implicitly activated for scheduled runs. back to overview Scope Details Aliases - Type bool Mandatory no Default false Possible values - true - false Secret no Configuration scope \u2612 parameter \u2612 general \u2612 steps \u2612 stages Resource references commonPipelineEnvironment : reference to: custom/isOptimizedAndScheduled customEnvironmentVariables \u00b6 A list of environment variables which can be set to prepare the environment to run a BlackDuck scan. This includes a list of environment variables defined by BlackDuck. The full list can be found here This list affects the detect script downloaded while running the scan. Right now only detect7.sh is available for downloading back to overview Scope Details Aliases - Type []string Mandatory no Default $PIPER_customEnvironmentVariables (if set) Secret no Configuration scope \u2612 parameter \u2610 general \u2612 steps \u2612 stages Resource references none customScanVersion \u00b6 Defines a custom version for the Detect scan which deviates from the typical versioning pattern using version and versioningModel . It allows to set non-numeric versions as well and supersedes the value of version which is calculated automatically. The parameter is also used by other scan steps (e.g. Fortify, Sonar, WhiteSource) and thus allows a common custom version across scan tools. back to overview Scope Details Aliases - Type string Mandatory no Default $PIPER_customScanVersion (if set) Secret no Configuration scope \u2612 parameter \u2612 general \u2612 steps \u2612 stages Resource references none customTlsCertificateLinks \u00b6 List of download links to custom TLS certificates. This is required to ensure trusted connections to instances with repositories (like nexus) when publish flag is set to true. back to overview Scope Details Aliases - Type []string Mandatory no Default $PIPER_customTlsCertificateLinks (if set) Secret no Configuration scope \u2612 parameter \u2612 general \u2612 steps \u2612 stages Resource references none defaultNpmRegistry \u00b6 URL of the npm registry to use. Defaults to https://registry.npmjs.org/ back to overview Scope Details Aliases npm/defaultNpmRegistry Type string Mandatory no Default $PIPER_defaultNpmRegistry (if set) Secret no Configuration scope \u2612 parameter \u2612 general \u2612 steps \u2612 stages Resource references none dependencyPath \u00b6 Absolute Path of the dependency management file of the project. This path represents the folder which contains the pom file, package.json etc. If the project contains multiple pom files, provide the path to the parent pom file or the base folder of the project back to overview Scope Details Aliases detect/dependencyPath Type string Mandatory no Default . Secret no Configuration scope \u2612 parameter \u2610 general \u2612 steps \u2612 stages Resource references none detectTools \u00b6 The type of BlackDuck scanners to include while running the BlackDuck scan. By default All scanners are included. For the complete list of possible values, Please refer BlackDuck detect documentation back to overview Scope Details Aliases detect/detectTools Type []string Mandatory no Default $PIPER_detectTools (if set) Secret no Configuration scope \u2612 parameter \u2610 general \u2612 steps \u2612 stages Resource references none dockerEnvVars \u00b6 Environment variables to set in the container, e.g. [http_proxy: \"proxy:8080\"]. back to overview Scope Details Aliases - Type map[string]string Mandatory no Default Secret no Configuration scope \u2612 parameter \u2612 general \u2612 steps \u2612 stages Resource references none dockerImage \u00b6 Name of the docker image that should be used. If empty, Docker is not used and the command is executed directly on the Jenkins system. back to overview Scope Details Aliases - Type string Mandatory no Default openjdk:11 Secret no Configuration scope \u2612 parameter \u2612 general \u2612 steps \u2612 stages Resource references none dockerName \u00b6 Kubernetes only: Name of the container launching dockerImage. SideCar only: Name of the container in local network. back to overview Scope Details Aliases - Type string Mandatory no Default openjdk Secret no Configuration scope \u2612 parameter \u2612 general \u2612 steps \u2612 stages Resource references none dockerOptions \u00b6 Docker options to be set when starting the container. back to overview Scope Details Aliases - Type []string Mandatory no Default [{-u 0}] Secret no Configuration scope \u2612 parameter \u2612 general \u2612 steps \u2612 stages Resource references none dockerPullImage \u00b6 Set this to 'false' to bypass a docker image pull. Useful during development process. Allows testing of images which are available in the local registry only. back to overview Scope Details Aliases - Type bool Mandatory no Default true Possible values - true - false Secret no Configuration scope \u2612 parameter \u2612 general \u2612 steps \u2612 stages Resource references none dockerVolumeBind \u00b6 Jenkins-specific: Used for proper environment setup. Volumes that should be mounted into the docker container. back to overview Scope Details Aliases - Type map[string]string Mandatory no Default Secret no Configuration scope \u2612 parameter \u2612 general \u2612 steps \u2612 stages Resource references none dockerWorkspace \u00b6 Jenkins-specific: Used for proper environment setup. Kubernetes only: Specifies a dedicated user home directory for the container which will be passed as value for environment variable HOME . back to overview Scope Details Aliases - Type string Mandatory no Default /root Secret no Configuration scope \u2612 parameter \u2612 general \u2612 steps \u2612 stages Resource references none enableDiagnostics \u00b6 Parameter to enable diagnostics file generation by detect script back to overview Scope Details Aliases - Type bool Mandatory no Default false Possible values - true - false Secret no Configuration scope \u2612 parameter \u2610 general \u2612 steps \u2612 stages Resource references none excludedDirectories \u00b6 List of directories which should be excluded from the scan. back to overview Scope Details Aliases detect/excludedDirectories Type []string Mandatory no Default $PIPER_excludedDirectories (if set) Secret no Configuration scope \u2612 parameter \u2610 general \u2612 steps \u2612 stages Resource references none excludedPackageManagers \u00b6 The package managers that need to be excluded for this scan. Providing the package manager names with this parameter will ensure that the build descriptor file of that package manager will be ignored in the scan folder For the complete list of possible values for this parameter, please refer BlackDuck detect documentation back to overview Scope Details Aliases detect/excludedPackageManagers Type []string Mandatory no Default $PIPER_excludedPackageManagers (if set) Secret no Configuration scope \u2612 parameter \u2610 general \u2612 steps \u2612 stages Resource references none failOn \u00b6 A list of policies can be provided which will be applied after the scan is completed. These policies if violated will mark the build/scan result as failed. The list of accepted values can be found at BlackDuck detect documentation back to overview Scope Details Aliases detect/failOn Type []string Mandatory no Default - BLOCKER Possible values - ALL - BLOCKER - CRITICAL - MAJOR - MINOR - NONE Secret no Configuration scope \u2612 parameter \u2610 general \u2612 steps \u2612 stages Resource references none failOnSevereVulnerabilities \u00b6 Whether to fail the step on severe vulnerabilties or not back to overview Scope Details Aliases - Type bool Mandatory no Default true Possible values - true - false Secret no Configuration scope \u2612 parameter \u2610 general \u2610 steps \u2610 stages Resource references none generateReportsForEmptyProjects \u00b6 If enabled, it will generate reports for empty projects. This could be useful to see the compliance reports in Sirius back to overview Scope Details Aliases - Type bool Mandatory no Default false Possible values - true - false Secret no Configuration scope \u2612 parameter \u2610 general \u2612 steps \u2612 stages Resource references none githubApiUrl \u00b6 Set the GitHub API URL. back to overview Scope Details Aliases - Type string Mandatory no Default https://api.github.com Secret no Configuration scope \u2612 parameter \u2612 general \u2612 steps \u2612 stages Resource references none githubToken \u00b6 GitHub personal access token as per https://help.github.com/en/github/authenticating-to-github/creating-a-personal-access-token-for-the-command-line back to overview Scope Details Aliases access_token Type string Mandatory no Default $PIPER_githubToken (if set) Secret yes Configuration scope \u2612 parameter \u2612 general \u2612 steps \u2612 stages Resource references Jenkins credential id: id: githubTokenCredentialsId Vault resource: name: githubVaultSecretName default value: github Vault paths: $(vaultPath)/github $(vaultBasePath)/$(vaultPipelineName)/github $(vaultBasePath)/GROUP-SECRETS/github globalSettingsFile \u00b6 Path or url to the mvn settings file that should be used as global settings file back to overview Scope Details Aliases maven/globalSettingsFile Type string Mandatory no Default $PIPER_globalSettingsFile (if set) Secret no Configuration scope \u2612 parameter \u2612 general \u2612 steps \u2612 stages Resource references none groups \u00b6 Users groups to be assigned for the Project back to overview Scope Details Aliases detect/groups Type []string Mandatory no Default $PIPER_groups (if set) Secret no Configuration scope \u2612 parameter \u2610 general \u2612 steps \u2612 stages Resource references none imageNameTags \u00b6 Images to be scanned (typically filled by CPE) back to overview Scope Details Aliases - Type []string Mandatory mandatory in case of: - scanContainerDistro = ubuntu - scanContainerDistro = centos - scanContainerDistro = alpine Default $PIPER_imageNameTags (if set) Secret no Configuration scope \u2612 parameter \u2610 general \u2612 steps \u2612 stages Resource references commonPipelineEnvironment : reference to: container/imageNameTags includedPackageManagers \u00b6 The package managers that need to be included for this scan. Providing the package manager names with this parameter will ensure that the build descriptor file of that package manager will be searched in the scan folder For the complete list of possible values for this parameter, please refer BlackDuck detect documentation back to overview Scope Details Aliases detect/includedPackageManagers Type []string Mandatory no Default $PIPER_includedPackageManagers (if set) Secret no Configuration scope \u2612 parameter \u2610 general \u2612 steps \u2612 stages Resource references none installArtifacts \u00b6 If enabled, it will install all artifacts to the local maven repository to make them available before running detect. This is required if any maven module has dependencies to other modules in the repository and they were not installed before. back to overview Scope Details Aliases - Type bool Mandatory no Default false Possible values - true - false Secret no Configuration scope \u2612 parameter \u2612 general \u2612 steps \u2612 stages Resource references none installNPM \u00b6 Experiment parameter for downloading npm dependencies back to overview Scope Details Aliases - Type bool Mandatory no Default false Possible values - true - false Secret no Configuration scope \u2612 parameter \u2610 general \u2612 steps \u2612 stages Resource references none m2Path \u00b6 Path to the location of the local repository that should be used. back to overview Scope Details Aliases maven/m2Path Type string Mandatory no Default $PIPER_m2Path (if set) Secret no Configuration scope \u2612 parameter \u2612 general \u2612 steps \u2612 stages Resource references none mavenExcludedScopes \u00b6 The maven scopes that need to be excluded from the scan. For example, setting the value 'test' will exclude all components which are defined with a test scope in maven back to overview Scope Details Aliases detect/mavenExcludedScopes Type []string Mandatory no Default $PIPER_mavenExcludedScopes (if set) Secret no Configuration scope \u2612 parameter \u2610 general \u2612 steps \u2612 stages Resource references none mtaPlatform \u00b6 The platform of the MTA project back to overview Scope Details Aliases - Type string Mandatory no Default CF Secret no Configuration scope \u2612 parameter \u2610 general \u2612 steps \u2612 stages Resource references none npmArguments \u00b6 List of additional arguments that Detect will add at then end of the npm ls command line when Detect executes the NPM CLI Detector on an NPM project. back to overview Scope Details Aliases detect/npmArguments Type []string Mandatory no Default $PIPER_npmArguments (if set) Secret no Configuration scope \u2612 parameter \u2610 general \u2612 steps \u2612 stages Resource references none npmDependencyTypesExcluded \u00b6 List of npm dependency types which Detect should exclude from the BOM. back to overview Scope Details Aliases detect/npmDependencyTypesExcluded Type []string Mandatory no Default $PIPER_npmDependencyTypesExcluded (if set) Possible values - NONE - DEV - PEER Secret no Configuration scope \u2612 parameter \u2610 general \u2612 steps \u2612 stages Resource references none owner \u00b6 Set the GitHub organization. back to overview Scope Details Aliases githubOrg Type string Mandatory no Default $PIPER_owner (if set) Secret no Configuration scope \u2612 parameter \u2612 general \u2612 steps \u2612 stages Resource references commonPipelineEnvironment : reference to: github/owner pomPath \u00b6 Path to the pom file which should be installed including all children. back to overview Scope Details Aliases - Type string Mandatory no Default pom.xml Secret no Configuration scope \u2610 parameter \u2610 general \u2612 steps \u2610 stages Resource references none privateModules \u00b6 Tells go which modules shall be considered to be private (by setting GOPRIVATE ). back to overview Scope Details Aliases - Type string Mandatory no Default $PIPER_privateModules (if set) Secret no Configuration scope \u2612 parameter \u2612 general \u2612 steps \u2612 stages Resource references none privateModulesGitToken \u00b6 GitHub personal access token as per https://help.github.com/en/github/authenticating-to-github/creating-a-personal-access-token-for-the-command-line. back to overview Scope Details Aliases - Type string Mandatory no Default $PIPER_privateModulesGitToken (if set) Secret yes Configuration scope \u2612 parameter \u2612 general \u2612 steps \u2612 stages Resource references Jenkins credential id: id: golangPrivateModulesGitTokenCredentialsId reference to: password Vault resource: name: golangPrivateModulesGitTokenVaultSecret default value: golang Vault paths: $(vaultPath)/golang $(vaultBasePath)/$(vaultPipelineName)/golang $(vaultBasePath)/GROUP-SECRETS/golang projectName \u00b6 Name of the BlackDuck Detect project. back to overview Scope Details Aliases detect/projectName Type string Mandatory yes Default $PIPER_projectName (if set) Secret no Configuration scope \u2612 parameter \u2610 general \u2612 steps \u2612 stages Resource references none projectSettingsFile \u00b6 Path or url to the mvn settings file that should be used as project settings file. back to overview Scope Details Aliases maven/projectSettingsFile Type string Mandatory no Default $PIPER_projectSettingsFile (if set) Secret no Configuration scope \u2612 parameter \u2612 general \u2612 steps \u2612 stages Resource references none registryUrl \u00b6 Used accessing for the images to be scanned (typically filled by CPE) back to overview Scope Details Aliases - Type string Mandatory mandatory in case of: - scanContainerDistro = ubuntu - scanContainerDistro = centos - scanContainerDistro = alpine Default $PIPER_registryUrl (if set) Secret no Configuration scope \u2612 parameter \u2610 general \u2612 steps \u2612 stages Resource references commonPipelineEnvironment : reference to: container/registryUrl repository \u00b6 Set the GitHub repository. back to overview Scope Details Aliases githubRepo Type string Mandatory no Default $PIPER_repository (if set) Secret no Configuration scope \u2612 parameter \u2612 general \u2612 steps \u2612 stages Resource references commonPipelineEnvironment : reference to: github/repository repositoryPassword \u00b6 Used accessing for the images to be scanned (typically filled by CPE) back to overview Scope Details Aliases - Type string Mandatory mandatory in case of: - scanContainerDistro = ubuntu - scanContainerDistro = centos - scanContainerDistro = alpine Default $PIPER_repositoryPassword (if set) Secret no Configuration scope \u2612 parameter \u2610 general \u2612 steps \u2612 stages Resource references commonPipelineEnvironment : reference to: container/repositoryPassword repositoryUsername \u00b6 Used accessing for the images to be scanned (typically filled by CPE) back to overview Scope Details Aliases - Type string Mandatory mandatory in case of: - scanContainerDistro = ubuntu - scanContainerDistro = centos - scanContainerDistro = alpine Default $PIPER_repositoryUsername (if set) Secret no Configuration scope \u2612 parameter \u2610 general \u2612 steps \u2612 stages Resource references commonPipelineEnvironment : reference to: container/repositoryUsername scanContainerDistro \u00b6 To also scan your images in the CPE, choose the distro back to overview Scope Details Aliases - Type string Mandatory no Default $PIPER_scanContainerDistro (if set) Possible values - ubuntu - centos - alpine Secret no Configuration scope \u2612 parameter \u2610 general \u2612 steps \u2612 stages Resource references none scanOnChanges \u00b6 This flag determines if the scan is submitted to the server. If set to true, then the scan request is submitted to the server only when changes are detected in the Open Source Bill of Materials If the flag is set to false, then the scan request is submitted to server regardless of any changes. For more details please refer to the documentation back to overview Scope Details Aliases - Type bool Mandatory no Default false Possible values - true - false Secret no Configuration scope \u2612 parameter \u2610 general \u2612 steps \u2612 stages Resource references none scanPaths \u00b6 List of paths which should be scanned by the BlackDuck Detect scan. back to overview Scope Details Aliases detect/scanPaths Type []string Mandatory no Default - . Secret no Configuration scope \u2612 parameter \u2610 general \u2612 steps \u2612 stages Resource references none scanProperties \u00b6 Properties passed to the BlackDuck Detect scan. You can find details in the BlackDuck Detect documentation back to overview Scope Details Aliases detect/scanProperties Type []string Mandatory no Default - --blackduck.signature.scanner.memory=4096 - --detect.timeout=6000 - --blackduck.trust.cert=true - --logging.level.detect=DEBUG - --detect.maven.excluded.scopes=test Secret no Configuration scope \u2612 parameter \u2610 general \u2612 steps \u2612 stages Resource references none scanners \u00b6 List of scanners to be used for BlackDuck Detect scan. back to overview Scope Details Aliases detect/scanners Type []string Mandatory no Default - signature Possible values - signature - source Secret no Configuration scope \u2612 parameter \u2610 general \u2612 steps \u2612 stages Resource references none script \u00b6 The common script environment of the Jenkinsfile running. Typically the reference to the script calling the pipeline step is provided with the this parameter, as in script: this . This allows the function to access the commonPipelineEnvironment for retrieving, e.g. configuration parameters. back to overview Scope Details Aliases - Type Jenkins Script Mandatory yes Default Secret no Configuration scope \u2610 parameter \u2610 general \u2610 steps \u2610 stages Resource references none serverUrl \u00b6 Server URL to the BlackDuck Detect Server. back to overview Scope Details Aliases - detect/serverUrl - detectServerUrl Type string Mandatory yes Default $PIPER_serverUrl (if set) Secret no Configuration scope \u2612 parameter \u2610 general \u2612 steps \u2612 stages Resource references none sidecarEnvVars \u00b6 A map of environment variables to set in the sidecar container, similar to dockerEnvVars . back to overview Scope Details Aliases - Type map[string]string Mandatory no Default Secret no Configuration scope \u2612 parameter \u2612 general \u2612 steps \u2612 stages Resource references none sidecarImage \u00b6 The name of the docker image of the sidecar container. If empty, no sidecar container is started. Similar to dockerImage . back to overview Scope Details Aliases - Type string Mandatory no Default Secret no Configuration scope \u2612 parameter \u2612 general \u2612 steps \u2612 stages Resource references none sidecarName \u00b6 Name of the sidecar container. Similar to dockerName . back to overview Scope Details Aliases - Type string Mandatory no Default Secret no Configuration scope \u2612 parameter \u2612 general \u2612 steps \u2612 stages Resource references none sidecarOptions \u00b6 Options to be set when starting the sidecar container. Similar to dockerOptions . back to overview Scope Details Aliases - Type []string Mandatory no Default Secret no Configuration scope \u2612 parameter \u2612 general \u2612 steps \u2612 stages Resource references none sidecarPullImage \u00b6 Set this to 'false' to bypass a docker image pull. Useful during development process. Allows testing of images which are available in the local registry only. back to overview Scope Details Aliases - Type bool Mandatory no Default false Possible values - true - false Secret no Configuration scope \u2612 parameter \u2612 general \u2612 steps \u2612 stages Resource references none sidecarReadyCommand \u00b6 Jenkins-specific: Used for proper environment setup. Command executed inside the container which returns exit code 0 when the container is ready to be used. back to overview Scope Details Aliases - Type string Mandatory no Default Secret no Configuration scope \u2612 parameter \u2612 general \u2612 steps \u2612 stages Resource references none sidecarVolumeBind \u00b6 Volumes that should be mounted into the sidecar container. Similar to dockerVolumeBind . back to overview Scope Details Aliases - Type map[string]string Mandatory no Default Secret no Configuration scope \u2612 parameter \u2612 general \u2612 steps \u2612 stages Resource references none sidecarWorkspace \u00b6 Jenkins-specific: Used for proper environment setup. back to overview Scope Details Aliases - Type string Mandatory no Default Secret no Configuration scope \u2612 parameter \u2612 general \u2612 steps \u2612 stages Resource references none stashContent \u00b6 Jenkins-specific: Used for proper environment setup. Specific stashes that should be considered for the step execution. back to overview Scope Details Aliases - Type []string Mandatory no Default - buildDescriptor - checkmarx Secret no Configuration scope \u2612 parameter \u2612 general \u2612 steps \u2612 stages Resource references none successOnSkip \u00b6 This flag allows forces Black Duck to exit with 0 error code if any step is skipped back to overview Scope Details Aliases detect/successOnSkip ( deprecated ) Type bool Mandatory no Default true Possible values - true - false Secret no Configuration scope \u2612 parameter \u2610 general \u2612 steps \u2612 stages Resource references none token \u00b6 Api token to be used for connectivity with BlackDuck Detect server. back to overview Scope Details Aliases - blackduckToken - detectToken - apiToken ( deprecated ) - detect/apiToken ( deprecated ) Type string Mandatory yes Default $PIPER_token (if set) Secret yes Configuration scope \u2612 parameter \u2610 general \u2612 steps \u2612 stages Resource references Jenkins credential id: id: detectTokenCredentialsId Vault resource: name: detectVaultSecretName default value: detect Vault paths: $(vaultPath)/detect $(vaultBasePath)/$(vaultPipelineName)/detect $(vaultBasePath)/GROUP-SECRETS/detect unmap \u00b6 Unmap flag will unmap all previous code locations and keep only the current scan results in the specified project version. Set this parameter to true, when the project version needs to store only the latest scan results. back to overview Scope Details Aliases detect/unmap Type bool Mandatory no Default false Possible values - true - false Secret no Configuration scope \u2612 parameter \u2610 general \u2612 steps \u2612 stages Resource references none useDetect8 \u00b6 DEPRECATED: This flag enables the use of the supported version 8 of the Detect script instead of default version 10 back to overview Scope Details Aliases detect/useDetect8 ( deprecated ) Type bool Mandatory no Default false Possible values - true - false Secret no Configuration scope \u2612 parameter \u2610 general \u2612 steps \u2612 stages Resource references none useDetect9 \u00b6 This flag enables the use of the supported version 9 of the Detect script instead of default version 10 back to overview Scope Details Aliases detect/useDetect9 Type bool Mandatory no Default false Possible values - true - false Secret no Configuration scope \u2612 parameter \u2610 general \u2612 steps \u2612 stages Resource references none verbose \u00b6 verbose output back to overview Scope Details Aliases - Type bool Mandatory no Default false Possible values - true - false Secret no Configuration scope \u2612 parameter \u2612 general \u2612 steps \u2612 stages Resource references none version \u00b6 Defines the version number of the artifact being build in the pipeline. It is used for build version creation and as source for the Detect version. Typically it is available through the pipeline run. The project version of the Detect project is calculated using the versioningModel . back to overview Scope Details Aliases - projectVersion - detect/projectVersion Type string Mandatory no Default $PIPER_version (if set) Secret no Configuration scope \u2612 parameter \u2610 general \u2612 steps \u2612 stages Resource references commonPipelineEnvironment : reference to: artifactVersion versioningModel \u00b6 The versioning model used for result reporting (based on the artifact version). For example: the version 1.2.3 of the artifact will result in a version 1 to report into, when versioningModel: major is used and will result in a version 1.2 when versioningModel: major-minor is used. Recommendation for a Continuous Delivery process is to use versioningModel: major . back to overview Scope Details Aliases - Type string Mandatory no Default major Possible values - major - major-minor - semantic - full Secret no Configuration scope \u2612 parameter \u2612 general \u2612 steps \u2612 stages Resource references none detectTokenCredentialsId \u00b6 Jenkins 'Secret text' credentials ID containing the API token used to authenticate with the BlackDuck Detect Server. back to overview Scope Details Aliases apiTokenCredentialsId Type string Configuration scope \u2612 parameter \u2612 general \u2612 steps \u2612 stages githubTokenCredentialsId \u00b6 Jenkins 'Secret text' credentials ID containing token to authenticate to GitHub. back to overview Scope Details Aliases - Type string Configuration scope \u2612 parameter \u2612 general \u2612 steps \u2612 stages golangPrivateModulesGitTokenCredentialsId \u00b6 Jenkins 'Username with password' credentials ID containing username/password for http access to your git repos where your go private modules are stored. back to overview Scope Details Aliases - Type string Configuration scope \u2612 parameter \u2612 general \u2612 steps \u2612 stages Rapid scan \u00b6 In addition to the full scan, Black Duck also offers a faster and easier scan option, called Rapid Scan . Its main advantage is speed. In most cases, the scan is completed in less than 30 seconds. It doesn't save any information on the Black Duck side. The result can be found in the pipeline console. Note By default, Black Duck scans run in 'FULL' mode. Although rapid scans do appropriate security checks for early detection of issues during daily developments, they are not sufficient for production deployment and releases: Only use 'FULL' scans for production deployment and releases. Running rapid scans on pull requests \u00b6 If you have configured your orchestrator to detect pull requests, then the detecExecuationScan step in the Piper pipeline can recognize this and change the Black Duck scan mode from 'FULL' to 'RAPID'. This does not affect the usual branch scans. Note This functionality is not applicable to the GPP (General Purpose Pipeline) This can only be used for custom pipelines based on the Jenkins piper library How to run rapid scans \u00b6 Specify all the required parameters for the detectExecution step in .pipeline/config.yml Optionally you can specify githubApi and githubToken in the detectExecution step to get the result in the pull request comment. For example: ... steps: ... detectExecuteScan: serverUrl: 'https://sap-staging.app.blackduck.com/' detectTokenCredentialsId: 'JenkinsCredentialsIdForBlackDuckToken' projectName: 'projectNameInBlackDuckUI' version: 'v1.0' githubApiUrl: 'https://github.wdf.sap.corp/api/v3' githubToken: 'JenkinsCredentialsIdForGithub' ... ... Enable detecExecuationScan in the orchestrator. For example: @Library('piper-lib') _ @Library('piper-lib-os') __ node { stage('Init') { checkout scm setupPipelineEnvironment script: this } stage('detectExecuteScan') { detectExecuteScan script: this } ... } To run the rapid scan, open a pull request with your changes to the main branch. Result of the rapid scan \u00b6 If you provide githubApi and githubToken , then the pipeline adds the scan result to the comment of the opened pull request.","title":"detectExecuteScan"},{"location":"steps/detectExecuteScan/#detectexecutescan","text":"Executes BlackDuck Detect scan","title":"detectExecuteScan"},{"location":"steps/detectExecuteScan/#description","text":"This step executes BlackDuck Detect scans. BlackDuck Detect command line utlity can be used to run various scans including BlackDuck scans. This step allows users to run BlackDuck scans by default. Please configure your BlackDuck server Url using the serverUrl parameter and the API token of your user using the apiToken parameter for this step.","title":"Description"},{"location":"steps/detectExecuteScan/#usage","text":"We recommend to define values of step parameters via .pipeline/config.yml file . In this case, calling the step is essentially reduced to defining the step name. Calling the step can be done either in an orchestrator specific way (e.g. via a Jenkins library step) or on the command line. Jenkins Command Line library ( 'piper-lib-os' ) detectExecuteScan script: this piper detectExecuteScan","title":"Usage"},{"location":"steps/detectExecuteScan/#outputs","text":"Output type Details influx measurement step_data detect measurement detect_data vulnerabilities major_vulnerabilities minor_vulnerabilities components policy_violations","title":"Outputs"},{"location":"steps/detectExecuteScan/#prerequisites","text":"You need to store the API token for the Detect service as 'Secret text' credential in your Jenkins system.","title":"Prerequisites"},{"location":"steps/detectExecuteScan/#parameters","text":"","title":"Parameters"},{"location":"steps/detectExecuteScan/#overview-step","text":"Name Mandatory Additional information imageNameTags (yes) mandatory in case of: - scanContainerDistro = ubuntu - scanContainerDistro = centos - scanContainerDistro = alpine projectName yes registryUrl (yes) mandatory in case of: - scanContainerDistro = ubuntu - scanContainerDistro = centos - scanContainerDistro = alpine repositoryPassword (yes) mandatory in case of: - scanContainerDistro = ubuntu - scanContainerDistro = centos - scanContainerDistro = alpine repositoryUsername (yes) mandatory in case of: - scanContainerDistro = ubuntu - scanContainerDistro = centos - scanContainerDistro = alpine script (yes) reference to Jenkins main pipeline script serverUrl yes token (yes) pass via ENV, Vault or Jenkins credentials ( detectTokenCredentialsId ) assignees no buildDescriptorList no buildMTA no buildMaven no buildTool no codeLocation no containerScan no createResultIssue no customEnvironmentVariables no customScanVersion no customTlsCertificateLinks no defaultNpmRegistry no dependencyPath no detectTools no enableDiagnostics no excludedDirectories no excludedPackageManagers no failOn no failOnSevereVulnerabilities no generateReportsForEmptyProjects no githubApiUrl no githubToken no pass via ENV, Vault or Jenkins credentials ( githubTokenCredentialsId ) globalSettingsFile no groups no includedPackageManagers no installArtifacts no installNPM no m2Path no mavenExcludedScopes no mtaPlatform no npmArguments no npmDependencyTypesExcluded no owner no pomPath no privateModules no privateModulesGitToken no pass via ENV, Vault or Jenkins credentials ( golangPrivateModulesGitTokenCredentialsId ) projectSettingsFile no repository no scanContainerDistro no scanOnChanges no scanPaths no scanProperties no scanners no successOnSkip no unmap no useDetect8 no useDetect9 no verbose no activates debug output version no versioningModel no","title":"Overview - Step"},{"location":"steps/detectExecuteScan/#overview-execution-environment","text":"Orchestrator-specific only These parameters are relevant for orchestrator usage and not considered when using the command line option. Name Mandatory Additional information containerCommand no containerName no containerShell no dockerEnvVars no dockerImage no dockerName no dockerOptions no dockerPullImage no dockerVolumeBind no dockerWorkspace no sidecarEnvVars no sidecarImage no sidecarName no sidecarOptions no sidecarPullImage no sidecarReadyCommand no sidecarVolumeBind no sidecarWorkspace no stashContent no","title":"Overview - Execution Environment"},{"location":"steps/detectExecuteScan/#details","text":"","title":"Details"},{"location":"steps/detectExecuteScan/#assignees","text":"Defines the assignees for the Github Issue created/updated with the results of the scan as a list of login names. back to overview Scope Details Aliases - Type []string Mandatory no Default Secret no Configuration scope \u2612 parameter \u2610 general \u2612 steps \u2612 stages Resource references none","title":"assignees"},{"location":"steps/detectExecuteScan/#builddescriptorlist","text":"List of build descriptors and therefore modules for execution of the npm scripts. The elements have to be paths to the build descriptors. back to overview Scope Details Aliases - Type []string Mandatory no Default $PIPER_buildDescriptorList (if set) Secret no Configuration scope \u2612 parameter \u2610 general \u2612 steps \u2612 stages Resource references none","title":"buildDescriptorList"},{"location":"steps/detectExecuteScan/#buildmta","text":"Experiment parameter for MTA projects building back to overview Scope Details Aliases - Type bool Mandatory no Default false Possible values - true - false Secret no Configuration scope \u2612 parameter \u2610 general \u2612 steps \u2612 stages Resource references none","title":"buildMTA"},{"location":"steps/detectExecuteScan/#buildmaven","text":"Experiment parameter for maven multi-modules projects building back to overview Scope Details Aliases - Type bool Mandatory no Default false Possible values - true - false Secret no Configuration scope \u2612 parameter \u2610 general \u2612 steps \u2612 stages Resource references none","title":"buildMaven"},{"location":"steps/detectExecuteScan/#buildtool","text":"Defines the tool which is used for building the artifact. back to overview Scope Details Aliases - Type string Mandatory no Default $PIPER_buildTool (if set) Secret no Configuration scope \u2612 parameter \u2612 general \u2612 steps \u2612 stages Resource references commonPipelineEnvironment : reference to: buildTool","title":"buildTool"},{"location":"steps/detectExecuteScan/#codelocation","text":"An override for the name Detect will use for the scan file it creates. back to overview Scope Details Aliases - Type string Mandatory no Default $PIPER_codeLocation (if set) Secret no Configuration scope \u2612 parameter \u2610 general \u2612 steps \u2612 stages Resource references none","title":"codeLocation"},{"location":"steps/detectExecuteScan/#containercommand","text":"Jenkins-specific: Used for proper environment setup. Kubernetes only: Allows to specify start command for container created with dockerImage parameter to overwrite Piper default (/usr/bin/tail -f /dev/null). back to overview Scope Details Aliases - Type string Mandatory no Default Secret no Configuration scope \u2612 parameter \u2612 general \u2612 steps \u2612 stages Resource references none","title":"containerCommand"},{"location":"steps/detectExecuteScan/#containername","text":"Jenkins-specific: Used for proper environment setup. Optional configuration in combination with containerMap to define the container where the commands should be executed in. back to overview Scope Details Aliases - Type string Mandatory no Default openjdk Secret no Configuration scope \u2612 parameter \u2612 general \u2612 steps \u2612 stages Resource references none","title":"containerName"},{"location":"steps/detectExecuteScan/#containerscan","text":"When set to true, Container Scanning will be used instead of Docker Inspector as the Detect tool for scanning images, and all other detect tools will be ignored in the scan back to overview Scope Details Aliases detect/containerScan Type bool Mandatory no Default false Possible values - true - false Secret no Configuration scope \u2612 parameter \u2610 general \u2612 steps \u2612 stages Resource references none","title":"containerScan"},{"location":"steps/detectExecuteScan/#containershell","text":"Jenkins-specific: Used for proper environment setup. Allows to specify the shell to be executed for container with containerName. back to overview Scope Details Aliases - Type string Mandatory no Default Secret no Configuration scope \u2612 parameter \u2612 general \u2612 steps \u2612 stages Resource references none","title":"containerShell"},{"location":"steps/detectExecuteScan/#createresultissue","text":"Whether the step creates a GitHub issues containing the scan results in the originating repo. For each vulnerability a separate issue will be created. Since optimized pipelines are headless the creation is implicitly activated for scheduled runs. back to overview Scope Details Aliases - Type bool Mandatory no Default false Possible values - true - false Secret no Configuration scope \u2612 parameter \u2612 general \u2612 steps \u2612 stages Resource references commonPipelineEnvironment : reference to: custom/isOptimizedAndScheduled","title":"createResultIssue"},{"location":"steps/detectExecuteScan/#customenvironmentvariables","text":"A list of environment variables which can be set to prepare the environment to run a BlackDuck scan. This includes a list of environment variables defined by BlackDuck. The full list can be found here This list affects the detect script downloaded while running the scan. Right now only detect7.sh is available for downloading back to overview Scope Details Aliases - Type []string Mandatory no Default $PIPER_customEnvironmentVariables (if set) Secret no Configuration scope \u2612 parameter \u2610 general \u2612 steps \u2612 stages Resource references none","title":"customEnvironmentVariables"},{"location":"steps/detectExecuteScan/#customscanversion","text":"Defines a custom version for the Detect scan which deviates from the typical versioning pattern using version and versioningModel . It allows to set non-numeric versions as well and supersedes the value of version which is calculated automatically. The parameter is also used by other scan steps (e.g. Fortify, Sonar, WhiteSource) and thus allows a common custom version across scan tools. back to overview Scope Details Aliases - Type string Mandatory no Default $PIPER_customScanVersion (if set) Secret no Configuration scope \u2612 parameter \u2612 general \u2612 steps \u2612 stages Resource references none","title":"customScanVersion"},{"location":"steps/detectExecuteScan/#customtlscertificatelinks","text":"List of download links to custom TLS certificates. This is required to ensure trusted connections to instances with repositories (like nexus) when publish flag is set to true. back to overview Scope Details Aliases - Type []string Mandatory no Default $PIPER_customTlsCertificateLinks (if set) Secret no Configuration scope \u2612 parameter \u2612 general \u2612 steps \u2612 stages Resource references none","title":"customTlsCertificateLinks"},{"location":"steps/detectExecuteScan/#defaultnpmregistry","text":"URL of the npm registry to use. Defaults to https://registry.npmjs.org/ back to overview Scope Details Aliases npm/defaultNpmRegistry Type string Mandatory no Default $PIPER_defaultNpmRegistry (if set) Secret no Configuration scope \u2612 parameter \u2612 general \u2612 steps \u2612 stages Resource references none","title":"defaultNpmRegistry"},{"location":"steps/detectExecuteScan/#dependencypath","text":"Absolute Path of the dependency management file of the project. This path represents the folder which contains the pom file, package.json etc. If the project contains multiple pom files, provide the path to the parent pom file or the base folder of the project back to overview Scope Details Aliases detect/dependencyPath Type string Mandatory no Default . Secret no Configuration scope \u2612 parameter \u2610 general \u2612 steps \u2612 stages Resource references none","title":"dependencyPath"},{"location":"steps/detectExecuteScan/#detecttools","text":"The type of BlackDuck scanners to include while running the BlackDuck scan. By default All scanners are included. For the complete list of possible values, Please refer BlackDuck detect documentation back to overview Scope Details Aliases detect/detectTools Type []string Mandatory no Default $PIPER_detectTools (if set) Secret no Configuration scope \u2612 parameter \u2610 general \u2612 steps \u2612 stages Resource references none","title":"detectTools"},{"location":"steps/detectExecuteScan/#dockerenvvars","text":"Environment variables to set in the container, e.g. [http_proxy: \"proxy:8080\"]. back to overview Scope Details Aliases - Type map[string]string Mandatory no Default Secret no Configuration scope \u2612 parameter \u2612 general \u2612 steps \u2612 stages Resource references none","title":"dockerEnvVars"},{"location":"steps/detectExecuteScan/#dockerimage","text":"Name of the docker image that should be used. If empty, Docker is not used and the command is executed directly on the Jenkins system. back to overview Scope Details Aliases - Type string Mandatory no Default openjdk:11 Secret no Configuration scope \u2612 parameter \u2612 general \u2612 steps \u2612 stages Resource references none","title":"dockerImage"},{"location":"steps/detectExecuteScan/#dockername","text":"Kubernetes only: Name of the container launching dockerImage. SideCar only: Name of the container in local network. back to overview Scope Details Aliases - Type string Mandatory no Default openjdk Secret no Configuration scope \u2612 parameter \u2612 general \u2612 steps \u2612 stages Resource references none","title":"dockerName"},{"location":"steps/detectExecuteScan/#dockeroptions","text":"Docker options to be set when starting the container. back to overview Scope Details Aliases - Type []string Mandatory no Default [{-u 0}] Secret no Configuration scope \u2612 parameter \u2612 general \u2612 steps \u2612 stages Resource references none","title":"dockerOptions"},{"location":"steps/detectExecuteScan/#dockerpullimage","text":"Set this to 'false' to bypass a docker image pull. Useful during development process. Allows testing of images which are available in the local registry only. back to overview Scope Details Aliases - Type bool Mandatory no Default true Possible values - true - false Secret no Configuration scope \u2612 parameter \u2612 general \u2612 steps \u2612 stages Resource references none","title":"dockerPullImage"},{"location":"steps/detectExecuteScan/#dockervolumebind","text":"Jenkins-specific: Used for proper environment setup. Volumes that should be mounted into the docker container. back to overview Scope Details Aliases - Type map[string]string Mandatory no Default Secret no Configuration scope \u2612 parameter \u2612 general \u2612 steps \u2612 stages Resource references none","title":"dockerVolumeBind"},{"location":"steps/detectExecuteScan/#dockerworkspace","text":"Jenkins-specific: Used for proper environment setup. Kubernetes only: Specifies a dedicated user home directory for the container which will be passed as value for environment variable HOME . back to overview Scope Details Aliases - Type string Mandatory no Default /root Secret no Configuration scope \u2612 parameter \u2612 general \u2612 steps \u2612 stages Resource references none","title":"dockerWorkspace"},{"location":"steps/detectExecuteScan/#enablediagnostics","text":"Parameter to enable diagnostics file generation by detect script back to overview Scope Details Aliases - Type bool Mandatory no Default false Possible values - true - false Secret no Configuration scope \u2612 parameter \u2610 general \u2612 steps \u2612 stages Resource references none","title":"enableDiagnostics"},{"location":"steps/detectExecuteScan/#excludeddirectories","text":"List of directories which should be excluded from the scan. back to overview Scope Details Aliases detect/excludedDirectories Type []string Mandatory no Default $PIPER_excludedDirectories (if set) Secret no Configuration scope \u2612 parameter \u2610 general \u2612 steps \u2612 stages Resource references none","title":"excludedDirectories"},{"location":"steps/detectExecuteScan/#excludedpackagemanagers","text":"The package managers that need to be excluded for this scan. Providing the package manager names with this parameter will ensure that the build descriptor file of that package manager will be ignored in the scan folder For the complete list of possible values for this parameter, please refer BlackDuck detect documentation back to overview Scope Details Aliases detect/excludedPackageManagers Type []string Mandatory no Default $PIPER_excludedPackageManagers (if set) Secret no Configuration scope \u2612 parameter \u2610 general \u2612 steps \u2612 stages Resource references none","title":"excludedPackageManagers"},{"location":"steps/detectExecuteScan/#failon","text":"A list of policies can be provided which will be applied after the scan is completed. These policies if violated will mark the build/scan result as failed. The list of accepted values can be found at BlackDuck detect documentation back to overview Scope Details Aliases detect/failOn Type []string Mandatory no Default - BLOCKER Possible values - ALL - BLOCKER - CRITICAL - MAJOR - MINOR - NONE Secret no Configuration scope \u2612 parameter \u2610 general \u2612 steps \u2612 stages Resource references none","title":"failOn"},{"location":"steps/detectExecuteScan/#failonseverevulnerabilities","text":"Whether to fail the step on severe vulnerabilties or not back to overview Scope Details Aliases - Type bool Mandatory no Default true Possible values - true - false Secret no Configuration scope \u2612 parameter \u2610 general \u2610 steps \u2610 stages Resource references none","title":"failOnSevereVulnerabilities"},{"location":"steps/detectExecuteScan/#generatereportsforemptyprojects","text":"If enabled, it will generate reports for empty projects. This could be useful to see the compliance reports in Sirius back to overview Scope Details Aliases - Type bool Mandatory no Default false Possible values - true - false Secret no Configuration scope \u2612 parameter \u2610 general \u2612 steps \u2612 stages Resource references none","title":"generateReportsForEmptyProjects"},{"location":"steps/detectExecuteScan/#githubapiurl","text":"Set the GitHub API URL. back to overview Scope Details Aliases - Type string Mandatory no Default https://api.github.com Secret no Configuration scope \u2612 parameter \u2612 general \u2612 steps \u2612 stages Resource references none","title":"githubApiUrl"},{"location":"steps/detectExecuteScan/#githubtoken","text":"GitHub personal access token as per https://help.github.com/en/github/authenticating-to-github/creating-a-personal-access-token-for-the-command-line back to overview Scope Details Aliases access_token Type string Mandatory no Default $PIPER_githubToken (if set) Secret yes Configuration scope \u2612 parameter \u2612 general \u2612 steps \u2612 stages Resource references Jenkins credential id: id: githubTokenCredentialsId Vault resource: name: githubVaultSecretName default value: github Vault paths: $(vaultPath)/github $(vaultBasePath)/$(vaultPipelineName)/github $(vaultBasePath)/GROUP-SECRETS/github","title":"githubToken"},{"location":"steps/detectExecuteScan/#globalsettingsfile","text":"Path or url to the mvn settings file that should be used as global settings file back to overview Scope Details Aliases maven/globalSettingsFile Type string Mandatory no Default $PIPER_globalSettingsFile (if set) Secret no Configuration scope \u2612 parameter \u2612 general \u2612 steps \u2612 stages Resource references none","title":"globalSettingsFile"},{"location":"steps/detectExecuteScan/#groups","text":"Users groups to be assigned for the Project back to overview Scope Details Aliases detect/groups Type []string Mandatory no Default $PIPER_groups (if set) Secret no Configuration scope \u2612 parameter \u2610 general \u2612 steps \u2612 stages Resource references none","title":"groups"},{"location":"steps/detectExecuteScan/#imagenametags","text":"Images to be scanned (typically filled by CPE) back to overview Scope Details Aliases - Type []string Mandatory mandatory in case of: - scanContainerDistro = ubuntu - scanContainerDistro = centos - scanContainerDistro = alpine Default $PIPER_imageNameTags (if set) Secret no Configuration scope \u2612 parameter \u2610 general \u2612 steps \u2612 stages Resource references commonPipelineEnvironment : reference to: container/imageNameTags","title":"imageNameTags"},{"location":"steps/detectExecuteScan/#includedpackagemanagers","text":"The package managers that need to be included for this scan. Providing the package manager names with this parameter will ensure that the build descriptor file of that package manager will be searched in the scan folder For the complete list of possible values for this parameter, please refer BlackDuck detect documentation back to overview Scope Details Aliases detect/includedPackageManagers Type []string Mandatory no Default $PIPER_includedPackageManagers (if set) Secret no Configuration scope \u2612 parameter \u2610 general \u2612 steps \u2612 stages Resource references none","title":"includedPackageManagers"},{"location":"steps/detectExecuteScan/#installartifacts","text":"If enabled, it will install all artifacts to the local maven repository to make them available before running detect. This is required if any maven module has dependencies to other modules in the repository and they were not installed before. back to overview Scope Details Aliases - Type bool Mandatory no Default false Possible values - true - false Secret no Configuration scope \u2612 parameter \u2612 general \u2612 steps \u2612 stages Resource references none","title":"installArtifacts"},{"location":"steps/detectExecuteScan/#installnpm","text":"Experiment parameter for downloading npm dependencies back to overview Scope Details Aliases - Type bool Mandatory no Default false Possible values - true - false Secret no Configuration scope \u2612 parameter \u2610 general \u2612 steps \u2612 stages Resource references none","title":"installNPM"},{"location":"steps/detectExecuteScan/#m2path","text":"Path to the location of the local repository that should be used. back to overview Scope Details Aliases maven/m2Path Type string Mandatory no Default $PIPER_m2Path (if set) Secret no Configuration scope \u2612 parameter \u2612 general \u2612 steps \u2612 stages Resource references none","title":"m2Path"},{"location":"steps/detectExecuteScan/#mavenexcludedscopes","text":"The maven scopes that need to be excluded from the scan. For example, setting the value 'test' will exclude all components which are defined with a test scope in maven back to overview Scope Details Aliases detect/mavenExcludedScopes Type []string Mandatory no Default $PIPER_mavenExcludedScopes (if set) Secret no Configuration scope \u2612 parameter \u2610 general \u2612 steps \u2612 stages Resource references none","title":"mavenExcludedScopes"},{"location":"steps/detectExecuteScan/#mtaplatform","text":"The platform of the MTA project back to overview Scope Details Aliases - Type string Mandatory no Default CF Secret no Configuration scope \u2612 parameter \u2610 general \u2612 steps \u2612 stages Resource references none","title":"mtaPlatform"},{"location":"steps/detectExecuteScan/#npmarguments","text":"List of additional arguments that Detect will add at then end of the npm ls command line when Detect executes the NPM CLI Detector on an NPM project. back to overview Scope Details Aliases detect/npmArguments Type []string Mandatory no Default $PIPER_npmArguments (if set) Secret no Configuration scope \u2612 parameter \u2610 general \u2612 steps \u2612 stages Resource references none","title":"npmArguments"},{"location":"steps/detectExecuteScan/#npmdependencytypesexcluded","text":"List of npm dependency types which Detect should exclude from the BOM. back to overview Scope Details Aliases detect/npmDependencyTypesExcluded Type []string Mandatory no Default $PIPER_npmDependencyTypesExcluded (if set) Possible values - NONE - DEV - PEER Secret no Configuration scope \u2612 parameter \u2610 general \u2612 steps \u2612 stages Resource references none","title":"npmDependencyTypesExcluded"},{"location":"steps/detectExecuteScan/#owner","text":"Set the GitHub organization. back to overview Scope Details Aliases githubOrg Type string Mandatory no Default $PIPER_owner (if set) Secret no Configuration scope \u2612 parameter \u2612 general \u2612 steps \u2612 stages Resource references commonPipelineEnvironment : reference to: github/owner","title":"owner"},{"location":"steps/detectExecuteScan/#pompath","text":"Path to the pom file which should be installed including all children. back to overview Scope Details Aliases - Type string Mandatory no Default pom.xml Secret no Configuration scope \u2610 parameter \u2610 general \u2612 steps \u2610 stages Resource references none","title":"pomPath"},{"location":"steps/detectExecuteScan/#privatemodules","text":"Tells go which modules shall be considered to be private (by setting GOPRIVATE ). back to overview Scope Details Aliases - Type string Mandatory no Default $PIPER_privateModules (if set) Secret no Configuration scope \u2612 parameter \u2612 general \u2612 steps \u2612 stages Resource references none","title":"privateModules"},{"location":"steps/detectExecuteScan/#privatemodulesgittoken","text":"GitHub personal access token as per https://help.github.com/en/github/authenticating-to-github/creating-a-personal-access-token-for-the-command-line. back to overview Scope Details Aliases - Type string Mandatory no Default $PIPER_privateModulesGitToken (if set) Secret yes Configuration scope \u2612 parameter \u2612 general \u2612 steps \u2612 stages Resource references Jenkins credential id: id: golangPrivateModulesGitTokenCredentialsId reference to: password Vault resource: name: golangPrivateModulesGitTokenVaultSecret default value: golang Vault paths: $(vaultPath)/golang $(vaultBasePath)/$(vaultPipelineName)/golang $(vaultBasePath)/GROUP-SECRETS/golang","title":"privateModulesGitToken"},{"location":"steps/detectExecuteScan/#projectname","text":"Name of the BlackDuck Detect project. back to overview Scope Details Aliases detect/projectName Type string Mandatory yes Default $PIPER_projectName (if set) Secret no Configuration scope \u2612 parameter \u2610 general \u2612 steps \u2612 stages Resource references none","title":"projectName"},{"location":"steps/detectExecuteScan/#projectsettingsfile","text":"Path or url to the mvn settings file that should be used as project settings file. back to overview Scope Details Aliases maven/projectSettingsFile Type string Mandatory no Default $PIPER_projectSettingsFile (if set) Secret no Configuration scope \u2612 parameter \u2612 general \u2612 steps \u2612 stages Resource references none","title":"projectSettingsFile"},{"location":"steps/detectExecuteScan/#registryurl","text":"Used accessing for the images to be scanned (typically filled by CPE) back to overview Scope Details Aliases - Type string Mandatory mandatory in case of: - scanContainerDistro = ubuntu - scanContainerDistro = centos - scanContainerDistro = alpine Default $PIPER_registryUrl (if set) Secret no Configuration scope \u2612 parameter \u2610 general \u2612 steps \u2612 stages Resource references commonPipelineEnvironment : reference to: container/registryUrl","title":"registryUrl"},{"location":"steps/detectExecuteScan/#repository","text":"Set the GitHub repository. back to overview Scope Details Aliases githubRepo Type string Mandatory no Default $PIPER_repository (if set) Secret no Configuration scope \u2612 parameter \u2612 general \u2612 steps \u2612 stages Resource references commonPipelineEnvironment : reference to: github/repository","title":"repository"},{"location":"steps/detectExecuteScan/#repositorypassword","text":"Used accessing for the images to be scanned (typically filled by CPE) back to overview Scope Details Aliases - Type string Mandatory mandatory in case of: - scanContainerDistro = ubuntu - scanContainerDistro = centos - scanContainerDistro = alpine Default $PIPER_repositoryPassword (if set) Secret no Configuration scope \u2612 parameter \u2610 general \u2612 steps \u2612 stages Resource references commonPipelineEnvironment : reference to: container/repositoryPassword","title":"repositoryPassword"},{"location":"steps/detectExecuteScan/#repositoryusername","text":"Used accessing for the images to be scanned (typically filled by CPE) back to overview Scope Details Aliases - Type string Mandatory mandatory in case of: - scanContainerDistro = ubuntu - scanContainerDistro = centos - scanContainerDistro = alpine Default $PIPER_repositoryUsername (if set) Secret no Configuration scope \u2612 parameter \u2610 general \u2612 steps \u2612 stages Resource references commonPipelineEnvironment : reference to: container/repositoryUsername","title":"repositoryUsername"},{"location":"steps/detectExecuteScan/#scancontainerdistro","text":"To also scan your images in the CPE, choose the distro back to overview Scope Details Aliases - Type string Mandatory no Default $PIPER_scanContainerDistro (if set) Possible values - ubuntu - centos - alpine Secret no Configuration scope \u2612 parameter \u2610 general \u2612 steps \u2612 stages Resource references none","title":"scanContainerDistro"},{"location":"steps/detectExecuteScan/#scanonchanges","text":"This flag determines if the scan is submitted to the server. If set to true, then the scan request is submitted to the server only when changes are detected in the Open Source Bill of Materials If the flag is set to false, then the scan request is submitted to server regardless of any changes. For more details please refer to the documentation back to overview Scope Details Aliases - Type bool Mandatory no Default false Possible values - true - false Secret no Configuration scope \u2612 parameter \u2610 general \u2612 steps \u2612 stages Resource references none","title":"scanOnChanges"},{"location":"steps/detectExecuteScan/#scanpaths","text":"List of paths which should be scanned by the BlackDuck Detect scan. back to overview Scope Details Aliases detect/scanPaths Type []string Mandatory no Default - . Secret no Configuration scope \u2612 parameter \u2610 general \u2612 steps \u2612 stages Resource references none","title":"scanPaths"},{"location":"steps/detectExecuteScan/#scanproperties","text":"Properties passed to the BlackDuck Detect scan. You can find details in the BlackDuck Detect documentation back to overview Scope Details Aliases detect/scanProperties Type []string Mandatory no Default - --blackduck.signature.scanner.memory=4096 - --detect.timeout=6000 - --blackduck.trust.cert=true - --logging.level.detect=DEBUG - --detect.maven.excluded.scopes=test Secret no Configuration scope \u2612 parameter \u2610 general \u2612 steps \u2612 stages Resource references none","title":"scanProperties"},{"location":"steps/detectExecuteScan/#scanners","text":"List of scanners to be used for BlackDuck Detect scan. back to overview Scope Details Aliases detect/scanners Type []string Mandatory no Default - signature Possible values - signature - source Secret no Configuration scope \u2612 parameter \u2610 general \u2612 steps \u2612 stages Resource references none","title":"scanners"},{"location":"steps/detectExecuteScan/#script","text":"The common script environment of the Jenkinsfile running. Typically the reference to the script calling the pipeline step is provided with the this parameter, as in script: this . This allows the function to access the commonPipelineEnvironment for retrieving, e.g. configuration parameters. back to overview Scope Details Aliases - Type Jenkins Script Mandatory yes Default Secret no Configuration scope \u2610 parameter \u2610 general \u2610 steps \u2610 stages Resource references none","title":"script"},{"location":"steps/detectExecuteScan/#serverurl","text":"Server URL to the BlackDuck Detect Server. back to overview Scope Details Aliases - detect/serverUrl - detectServerUrl Type string Mandatory yes Default $PIPER_serverUrl (if set) Secret no Configuration scope \u2612 parameter \u2610 general \u2612 steps \u2612 stages Resource references none","title":"serverUrl"},{"location":"steps/detectExecuteScan/#sidecarenvvars","text":"A map of environment variables to set in the sidecar container, similar to dockerEnvVars . back to overview Scope Details Aliases - Type map[string]string Mandatory no Default Secret no Configuration scope \u2612 parameter \u2612 general \u2612 steps \u2612 stages Resource references none","title":"sidecarEnvVars"},{"location":"steps/detectExecuteScan/#sidecarimage","text":"The name of the docker image of the sidecar container. If empty, no sidecar container is started. Similar to dockerImage . back to overview Scope Details Aliases - Type string Mandatory no Default Secret no Configuration scope \u2612 parameter \u2612 general \u2612 steps \u2612 stages Resource references none","title":"sidecarImage"},{"location":"steps/detectExecuteScan/#sidecarname","text":"Name of the sidecar container. Similar to dockerName . back to overview Scope Details Aliases - Type string Mandatory no Default Secret no Configuration scope \u2612 parameter \u2612 general \u2612 steps \u2612 stages Resource references none","title":"sidecarName"},{"location":"steps/detectExecuteScan/#sidecaroptions","text":"Options to be set when starting the sidecar container. Similar to dockerOptions . back to overview Scope Details Aliases - Type []string Mandatory no Default Secret no Configuration scope \u2612 parameter \u2612 general \u2612 steps \u2612 stages Resource references none","title":"sidecarOptions"},{"location":"steps/detectExecuteScan/#sidecarpullimage","text":"Set this to 'false' to bypass a docker image pull. Useful during development process. Allows testing of images which are available in the local registry only. back to overview Scope Details Aliases - Type bool Mandatory no Default false Possible values - true - false Secret no Configuration scope \u2612 parameter \u2612 general \u2612 steps \u2612 stages Resource references none","title":"sidecarPullImage"},{"location":"steps/detectExecuteScan/#sidecarreadycommand","text":"Jenkins-specific: Used for proper environment setup. Command executed inside the container which returns exit code 0 when the container is ready to be used. back to overview Scope Details Aliases - Type string Mandatory no Default Secret no Configuration scope \u2612 parameter \u2612 general \u2612 steps \u2612 stages Resource references none","title":"sidecarReadyCommand"},{"location":"steps/detectExecuteScan/#sidecarvolumebind","text":"Volumes that should be mounted into the sidecar container. Similar to dockerVolumeBind . back to overview Scope Details Aliases - Type map[string]string Mandatory no Default Secret no Configuration scope \u2612 parameter \u2612 general \u2612 steps \u2612 stages Resource references none","title":"sidecarVolumeBind"},{"location":"steps/detectExecuteScan/#sidecarworkspace","text":"Jenkins-specific: Used for proper environment setup. back to overview Scope Details Aliases - Type string Mandatory no Default Secret no Configuration scope \u2612 parameter \u2612 general \u2612 steps \u2612 stages Resource references none","title":"sidecarWorkspace"},{"location":"steps/detectExecuteScan/#stashcontent","text":"Jenkins-specific: Used for proper environment setup. Specific stashes that should be considered for the step execution. back to overview Scope Details Aliases - Type []string Mandatory no Default - buildDescriptor - checkmarx Secret no Configuration scope \u2612 parameter \u2612 general \u2612 steps \u2612 stages Resource references none","title":"stashContent"},{"location":"steps/detectExecuteScan/#successonskip","text":"This flag allows forces Black Duck to exit with 0 error code if any step is skipped back to overview Scope Details Aliases detect/successOnSkip ( deprecated ) Type bool Mandatory no Default true Possible values - true - false Secret no Configuration scope \u2612 parameter \u2610 general \u2612 steps \u2612 stages Resource references none","title":"successOnSkip"},{"location":"steps/detectExecuteScan/#token","text":"Api token to be used for connectivity with BlackDuck Detect server. back to overview Scope Details Aliases - blackduckToken - detectToken - apiToken ( deprecated ) - detect/apiToken ( deprecated ) Type string Mandatory yes Default $PIPER_token (if set) Secret yes Configuration scope \u2612 parameter \u2610 general \u2612 steps \u2612 stages Resource references Jenkins credential id: id: detectTokenCredentialsId Vault resource: name: detectVaultSecretName default value: detect Vault paths: $(vaultPath)/detect $(vaultBasePath)/$(vaultPipelineName)/detect $(vaultBasePath)/GROUP-SECRETS/detect","title":"token"},{"location":"steps/detectExecuteScan/#unmap","text":"Unmap flag will unmap all previous code locations and keep only the current scan results in the specified project version. Set this parameter to true, when the project version needs to store only the latest scan results. back to overview Scope Details Aliases detect/unmap Type bool Mandatory no Default false Possible values - true - false Secret no Configuration scope \u2612 parameter \u2610 general \u2612 steps \u2612 stages Resource references none","title":"unmap"},{"location":"steps/detectExecuteScan/#usedetect8","text":"DEPRECATED: This flag enables the use of the supported version 8 of the Detect script instead of default version 10 back to overview Scope Details Aliases detect/useDetect8 ( deprecated ) Type bool Mandatory no Default false Possible values - true - false Secret no Configuration scope \u2612 parameter \u2610 general \u2612 steps \u2612 stages Resource references none","title":"useDetect8"},{"location":"steps/detectExecuteScan/#usedetect9","text":"This flag enables the use of the supported version 9 of the Detect script instead of default version 10 back to overview Scope Details Aliases detect/useDetect9 Type bool Mandatory no Default false Possible values - true - false Secret no Configuration scope \u2612 parameter \u2610 general \u2612 steps \u2612 stages Resource references none","title":"useDetect9"},{"location":"steps/detectExecuteScan/#verbose","text":"verbose output back to overview Scope Details Aliases - Type bool Mandatory no Default false Possible values - true - false Secret no Configuration scope \u2612 parameter \u2612 general \u2612 steps \u2612 stages Resource references none","title":"verbose"},{"location":"steps/detectExecuteScan/#version","text":"Defines the version number of the artifact being build in the pipeline. It is used for build version creation and as source for the Detect version. Typically it is available through the pipeline run. The project version of the Detect project is calculated using the versioningModel . back to overview Scope Details Aliases - projectVersion - detect/projectVersion Type string Mandatory no Default $PIPER_version (if set) Secret no Configuration scope \u2612 parameter \u2610 general \u2612 steps \u2612 stages Resource references commonPipelineEnvironment : reference to: artifactVersion","title":"version"},{"location":"steps/detectExecuteScan/#versioningmodel","text":"The versioning model used for result reporting (based on the artifact version). For example: the version 1.2.3 of the artifact will result in a version 1 to report into, when versioningModel: major is used and will result in a version 1.2 when versioningModel: major-minor is used. Recommendation for a Continuous Delivery process is to use versioningModel: major . back to overview Scope Details Aliases - Type string Mandatory no Default major Possible values - major - major-minor - semantic - full Secret no Configuration scope \u2612 parameter \u2612 general \u2612 steps \u2612 stages Resource references none","title":"versioningModel"},{"location":"steps/detectExecuteScan/#detecttokencredentialsid","text":"Jenkins 'Secret text' credentials ID containing the API token used to authenticate with the BlackDuck Detect Server. back to overview Scope Details Aliases apiTokenCredentialsId Type string Configuration scope \u2612 parameter \u2612 general \u2612 steps \u2612 stages","title":"detectTokenCredentialsId"},{"location":"steps/detectExecuteScan/#githubtokencredentialsid","text":"Jenkins 'Secret text' credentials ID containing token to authenticate to GitHub. back to overview Scope Details Aliases - Type string Configuration scope \u2612 parameter \u2612 general \u2612 steps \u2612 stages","title":"githubTokenCredentialsId"},{"location":"steps/detectExecuteScan/#golangprivatemodulesgittokencredentialsid","text":"Jenkins 'Username with password' credentials ID containing username/password for http access to your git repos where your go private modules are stored. back to overview Scope Details Aliases - Type string Configuration scope \u2612 parameter \u2612 general \u2612 steps \u2612 stages","title":"golangPrivateModulesGitTokenCredentialsId"},{"location":"steps/detectExecuteScan/#rapid-scan","text":"In addition to the full scan, Black Duck also offers a faster and easier scan option, called Rapid Scan . Its main advantage is speed. In most cases, the scan is completed in less than 30 seconds. It doesn't save any information on the Black Duck side. The result can be found in the pipeline console. Note By default, Black Duck scans run in 'FULL' mode. Although rapid scans do appropriate security checks for early detection of issues during daily developments, they are not sufficient for production deployment and releases: Only use 'FULL' scans for production deployment and releases.","title":"Rapid scan"},{"location":"steps/detectExecuteScan/#running-rapid-scans-on-pull-requests","text":"If you have configured your orchestrator to detect pull requests, then the detecExecuationScan step in the Piper pipeline can recognize this and change the Black Duck scan mode from 'FULL' to 'RAPID'. This does not affect the usual branch scans. Note This functionality is not applicable to the GPP (General Purpose Pipeline) This can only be used for custom pipelines based on the Jenkins piper library","title":"Running rapid scans on pull requests"},{"location":"steps/detectExecuteScan/#how-to-run-rapid-scans","text":"Specify all the required parameters for the detectExecution step in .pipeline/config.yml Optionally you can specify githubApi and githubToken in the detectExecution step to get the result in the pull request comment. For example: ... steps: ... detectExecuteScan: serverUrl: 'https://sap-staging.app.blackduck.com/' detectTokenCredentialsId: 'JenkinsCredentialsIdForBlackDuckToken' projectName: 'projectNameInBlackDuckUI' version: 'v1.0' githubApiUrl: 'https://github.wdf.sap.corp/api/v3' githubToken: 'JenkinsCredentialsIdForGithub' ... ... Enable detecExecuationScan in the orchestrator. For example: @Library('piper-lib') _ @Library('piper-lib-os') __ node { stage('Init') { checkout scm setupPipelineEnvironment script: this } stage('detectExecuteScan') { detectExecuteScan script: this } ... } To run the rapid scan, open a pull request with your changes to the main branch.","title":"How to run rapid scans"},{"location":"steps/detectExecuteScan/#result-of-the-rapid-scan","text":"If you provide githubApi and githubToken , then the pipeline adds the scan result to the comment of the opened pull request.","title":"Result of the rapid scan"},{"location":"steps/dockerExecute/","text":"dockerExecute \u00b6 Description \u00b6 Executes a closure inside a docker container with the specified docker image. The workspace is mounted into the docker image. Proxy environment variables defined on the Jenkins machine are also available in the Docker container. Parameters \u00b6 name mandatory default possible values additionalPodProperties no containerCommand no containerPortMappings no containerShell no dockerEnvVars no dockerImage no dockerName no dockerOptions no dockerPullImage no true dockerRegistryCredentialsId no dockerRegistryUrl no dockerVolumeBind no dockerWorkspace no script yes sidecarEnvVars no sidecarImage no sidecarName no sidecarOptions no sidecarPullImage no true sidecarReadyCommand no sidecarRegistryCredentialsId no sidecarRegistryUrl no sidecarVolumeBind no sidecarWorkspace no stashContent no [] stashNoDefaultExcludes no true , false additionalPodProperties - Kubernetes only: Allows to specify additional pod properties. For more details see step dockerExecuteOnKubernetes containerCommand - Kubernetes only: Allows to specify start command for container created with dockerImage parameter to overwrite Piper default ( /usr/bin/tail -f /dev/null ). containerPortMappings - Map which defines per docker image the port mappings, e.g. containerPortMappings: ['selenium/standalone-chrome': [[name: 'selPort', containerPort: 4444, hostPort: 4444]]] . containerShell - Kubernetes only: Allows to specify the shell to be used for execution of commands. dockerEnvVars - Environment variables to set in the container, e.g. [http_proxy: 'proxy:8080']. dockerImage - Name of the docker image that should be used. Configure with empty value to execute the command directly on the Jenkins system (not using a container). Omit to use the default image (cf. default_pipeline_environment.yml ) Overwrite to use custom Docker image. dockerName - Kubernetes only: Name of the container launching dockerImage . SideCar only: Name of the container in local network. dockerOptions - Docker only: Docker options to be set when starting the container (List or String). dockerPullImage - Set this to 'false' to bypass a docker image pull. Useful during development process. Allows testing of images which are available in the local registry only. dockerRegistryCredentialsId - Non Kubernetes only: The credentials for the docker registry of type username/password as we rely on docker jenkins plugin. If left empty, images are pulled anonymously. For Kubernetes cases, pass secret name of type kubernetes.io/dockerconfigjson via additionalPodProperties parameter (The secret should already be created and present in the environment) dockerRegistryUrl - The registry used for pulling the docker image, if left empty the default registry as defined by the docker-commons-plugin will be used. dockerVolumeBind - Docker only: Volumes that should be mounted into the container. dockerWorkspace - Kubernetes only: Specifies a dedicated user home directory for the container which will be passed as value for environment variable HOME . script - The common script environment of the Jenkinsfile running. Typically the reference to the script calling the pipeline step is provided with the this parameter, as in script: this . This allows the function to access the commonPipelineEnvironment for retrieving, e.g. configuration parameters. sidecarEnvVars - as dockerEnvVars for the sidecar container sidecarImage - as dockerImage for the sidecar container sidecarName - as dockerName for the sidecar container sidecarOptions - as dockerOptions for the sidecar container sidecarPullImage - Set this to 'false' to bypass a docker image pull. Useful during development process. Allows testing of images which are available in the local registry only. sidecarReadyCommand - Command executed inside the container which returns exit code 0 when the container is ready to be used. sidecarRegistryCredentialsId - Same as dockerRegistryCredentialsId , but for the sidecar. If left empty dockerRegistryCredentialsId is used instead. sidecarRegistryUrl - Same as dockerRegistryUrl , but for the sidecar. If left empty, dockerRegistryUrl is used instead. sidecarVolumeBind - as dockerVolumeBind for the sidecar container sidecarWorkspace - as dockerWorkspace for the sidecar container stashContent - Specific stashes that should be considered for the step execution. stashNoDefaultExcludes - In the Kubernetes case the workspace is only available to the respective Jenkins slave but not to the containers running inside the pod. This flag controls whether the stashing does not use the default exclude patterns in addition to the patterns provided in stashExcludes . Kubernetes support \u00b6 If the Jenkins is setup on a Kubernetes cluster, then you can execute the closure inside a container of a pod by setting an environment variable ON_K8S to true . However, it will ignore containerPortMappings , dockerOptions and dockerVolumeBind values. dockerExecute step will internally invoke dockerExecuteOnKubernetes step and execute the closure inside a pod. Step configuration \u00b6 We recommend to define values of step parameters via config.yml file . In following sections of the config.yml the configuration is possible: parameter general step/stage additionalPodProperties X containerCommand X containerPortMappings X containerShell X dockerEnvVars X dockerImage X dockerName X dockerOptions X dockerPullImage X X dockerRegistryCredentialsId X dockerRegistryUrl X dockerVolumeBind X dockerWorkspace X script sidecarEnvVars X sidecarImage X sidecarName X sidecarOptions X sidecarPullImage X X sidecarReadyCommand X sidecarRegistryCredentialsId X sidecarRegistryUrl X sidecarVolumeBind X sidecarWorkspace X stashContent X stashNoDefaultExcludes Dependencies \u00b6 The step depends on the following Jenkins plugins docker kubernetes pipeline-utility-steps workflow-basic-steps workflow-cps-global-lib workflow-durable-task-step The kubernetes plugin is only used if running in a kubernetes environment. Transitive dependencies are omitted. The list might be incomplete. Consider using the ppiper/jenkins-master docker image. This images comes with preinstalled plugins. Side effects \u00b6 none Exceptions \u00b6 none Pulling images in an non-anonymous way \u00b6 Credentials are stored by default unencrypted on disk When accessing a docker registry with credentials for pulling images your credentials for access the docker registry are stored in plain text on disk for a short amount of time. There will be a corresponding log message with level \"warning\" in the job log. In order to avoid having the credentials written to disk, you should configure a password helper. The log message mentioned previously contains a link to a page explaining how a password helper can be configured. Having the credentials written to disk is not recommended. In addition, we don't recommend using personalised accounts for CI but rather dedicated \"technical\" users. Example 1: Run closure inside a docker container \u00b6 dockerExecute ( dockerImage: 'maven:3.5-jdk-7' ){ sh \"mvn clean install\" } Example 2: Run closure inside a container in a kubernetes pod \u00b6 # set environment variable export ON_K8S = true \" dockerExecute ( script: this , dockerImage: 'maven:3.5-jdk-7' ){ sh \"mvn clean install\" } In the above example, the dockerExecute step will internally invoke dockerExecuteOnKubernetes step and execute the closure inside a pod. Example 3: Run closure inside a container which is attached to a sidecar container (as for example used in seleniumExecuteTests \u00b6 dockerExecute ( script: script , containerPortMappings: [ containerPortMappings: 'selenium/standalone-chrome' :[ containerPort: 4444 , hostPort: 4444 ]], dockerImage: 'node:8-stretch' , dockerName: 'node' , dockerWorkspace: '/home/node' , sidecarImage: 'selenium/standalone-chrome' , sidecarName: 'selenium' , ) { git url: 'https://github.com/XXXXX/WebDriverIOTest.git' sh '''npm install node index.js ''' }","title":"dockerExecute"},{"location":"steps/dockerExecute/#dockerexecute","text":"","title":"dockerExecute"},{"location":"steps/dockerExecute/#description","text":"Executes a closure inside a docker container with the specified docker image. The workspace is mounted into the docker image. Proxy environment variables defined on the Jenkins machine are also available in the Docker container.","title":"Description"},{"location":"steps/dockerExecute/#parameters","text":"name mandatory default possible values additionalPodProperties no containerCommand no containerPortMappings no containerShell no dockerEnvVars no dockerImage no dockerName no dockerOptions no dockerPullImage no true dockerRegistryCredentialsId no dockerRegistryUrl no dockerVolumeBind no dockerWorkspace no script yes sidecarEnvVars no sidecarImage no sidecarName no sidecarOptions no sidecarPullImage no true sidecarReadyCommand no sidecarRegistryCredentialsId no sidecarRegistryUrl no sidecarVolumeBind no sidecarWorkspace no stashContent no [] stashNoDefaultExcludes no true , false additionalPodProperties - Kubernetes only: Allows to specify additional pod properties. For more details see step dockerExecuteOnKubernetes containerCommand - Kubernetes only: Allows to specify start command for container created with dockerImage parameter to overwrite Piper default ( /usr/bin/tail -f /dev/null ). containerPortMappings - Map which defines per docker image the port mappings, e.g. containerPortMappings: ['selenium/standalone-chrome': [[name: 'selPort', containerPort: 4444, hostPort: 4444]]] . containerShell - Kubernetes only: Allows to specify the shell to be used for execution of commands. dockerEnvVars - Environment variables to set in the container, e.g. [http_proxy: 'proxy:8080']. dockerImage - Name of the docker image that should be used. Configure with empty value to execute the command directly on the Jenkins system (not using a container). Omit to use the default image (cf. default_pipeline_environment.yml ) Overwrite to use custom Docker image. dockerName - Kubernetes only: Name of the container launching dockerImage . SideCar only: Name of the container in local network. dockerOptions - Docker only: Docker options to be set when starting the container (List or String). dockerPullImage - Set this to 'false' to bypass a docker image pull. Useful during development process. Allows testing of images which are available in the local registry only. dockerRegistryCredentialsId - Non Kubernetes only: The credentials for the docker registry of type username/password as we rely on docker jenkins plugin. If left empty, images are pulled anonymously. For Kubernetes cases, pass secret name of type kubernetes.io/dockerconfigjson via additionalPodProperties parameter (The secret should already be created and present in the environment) dockerRegistryUrl - The registry used for pulling the docker image, if left empty the default registry as defined by the docker-commons-plugin will be used. dockerVolumeBind - Docker only: Volumes that should be mounted into the container. dockerWorkspace - Kubernetes only: Specifies a dedicated user home directory for the container which will be passed as value for environment variable HOME . script - The common script environment of the Jenkinsfile running. Typically the reference to the script calling the pipeline step is provided with the this parameter, as in script: this . This allows the function to access the commonPipelineEnvironment for retrieving, e.g. configuration parameters. sidecarEnvVars - as dockerEnvVars for the sidecar container sidecarImage - as dockerImage for the sidecar container sidecarName - as dockerName for the sidecar container sidecarOptions - as dockerOptions for the sidecar container sidecarPullImage - Set this to 'false' to bypass a docker image pull. Useful during development process. Allows testing of images which are available in the local registry only. sidecarReadyCommand - Command executed inside the container which returns exit code 0 when the container is ready to be used. sidecarRegistryCredentialsId - Same as dockerRegistryCredentialsId , but for the sidecar. If left empty dockerRegistryCredentialsId is used instead. sidecarRegistryUrl - Same as dockerRegistryUrl , but for the sidecar. If left empty, dockerRegistryUrl is used instead. sidecarVolumeBind - as dockerVolumeBind for the sidecar container sidecarWorkspace - as dockerWorkspace for the sidecar container stashContent - Specific stashes that should be considered for the step execution. stashNoDefaultExcludes - In the Kubernetes case the workspace is only available to the respective Jenkins slave but not to the containers running inside the pod. This flag controls whether the stashing does not use the default exclude patterns in addition to the patterns provided in stashExcludes .","title":"Parameters"},{"location":"steps/dockerExecute/#kubernetes-support","text":"If the Jenkins is setup on a Kubernetes cluster, then you can execute the closure inside a container of a pod by setting an environment variable ON_K8S to true . However, it will ignore containerPortMappings , dockerOptions and dockerVolumeBind values. dockerExecute step will internally invoke dockerExecuteOnKubernetes step and execute the closure inside a pod.","title":"Kubernetes support"},{"location":"steps/dockerExecute/#step-configuration","text":"We recommend to define values of step parameters via config.yml file . In following sections of the config.yml the configuration is possible: parameter general step/stage additionalPodProperties X containerCommand X containerPortMappings X containerShell X dockerEnvVars X dockerImage X dockerName X dockerOptions X dockerPullImage X X dockerRegistryCredentialsId X dockerRegistryUrl X dockerVolumeBind X dockerWorkspace X script sidecarEnvVars X sidecarImage X sidecarName X sidecarOptions X sidecarPullImage X X sidecarReadyCommand X sidecarRegistryCredentialsId X sidecarRegistryUrl X sidecarVolumeBind X sidecarWorkspace X stashContent X stashNoDefaultExcludes","title":"Step configuration"},{"location":"steps/dockerExecute/#dependencies","text":"The step depends on the following Jenkins plugins docker kubernetes pipeline-utility-steps workflow-basic-steps workflow-cps-global-lib workflow-durable-task-step The kubernetes plugin is only used if running in a kubernetes environment. Transitive dependencies are omitted. The list might be incomplete. Consider using the ppiper/jenkins-master docker image. This images comes with preinstalled plugins.","title":"Dependencies"},{"location":"steps/dockerExecute/#side-effects","text":"none","title":"Side effects"},{"location":"steps/dockerExecute/#exceptions","text":"none","title":"Exceptions"},{"location":"steps/dockerExecute/#pulling-images-in-an-non-anonymous-way","text":"Credentials are stored by default unencrypted on disk When accessing a docker registry with credentials for pulling images your credentials for access the docker registry are stored in plain text on disk for a short amount of time. There will be a corresponding log message with level \"warning\" in the job log. In order to avoid having the credentials written to disk, you should configure a password helper. The log message mentioned previously contains a link to a page explaining how a password helper can be configured. Having the credentials written to disk is not recommended. In addition, we don't recommend using personalised accounts for CI but rather dedicated \"technical\" users.","title":"Pulling images in an non-anonymous way"},{"location":"steps/dockerExecute/#example-1-run-closure-inside-a-docker-container","text":"dockerExecute ( dockerImage: 'maven:3.5-jdk-7' ){ sh \"mvn clean install\" }","title":"Example 1: Run closure inside a docker container"},{"location":"steps/dockerExecute/#example-2-run-closure-inside-a-container-in-a-kubernetes-pod","text":"# set environment variable export ON_K8S = true \" dockerExecute ( script: this , dockerImage: 'maven:3.5-jdk-7' ){ sh \"mvn clean install\" } In the above example, the dockerExecute step will internally invoke dockerExecuteOnKubernetes step and execute the closure inside a pod.","title":"Example 2: Run closure inside a container in a kubernetes pod"},{"location":"steps/dockerExecute/#example-3-run-closure-inside-a-container-which-is-attached-to-a-sidecar-container-as-for-example-used-in-seleniumexecutetests","text":"dockerExecute ( script: script , containerPortMappings: [ containerPortMappings: 'selenium/standalone-chrome' :[ containerPort: 4444 , hostPort: 4444 ]], dockerImage: 'node:8-stretch' , dockerName: 'node' , dockerWorkspace: '/home/node' , sidecarImage: 'selenium/standalone-chrome' , sidecarName: 'selenium' , ) { git url: 'https://github.com/XXXXX/WebDriverIOTest.git' sh '''npm install node index.js ''' }","title":"Example 3: Run closure inside a container which is attached to a sidecar container (as for example used in seleniumExecuteTests"},{"location":"steps/dockerExecuteOnKubernetes/","text":"dockerExecuteOnKubernetes \u00b6 Description \u00b6 Executes a closure inside a container in a kubernetes pod. Proxy environment variables defined on the Jenkins machine are also available in the container. By default jnlp agent defined for kubernetes-plugin will be used (see https://github.com/jenkinsci/kubernetes-plugin#pipeline-support ). It is possible to define a custom jnlp agent image by Defining the jnlp image via environment variable JENKINS_JNLP_IMAGE in the Kubernetes landscape Defining the image via config ( jenkinsKubernetes.jnlpAgent ) Option 1 will take precedence over option 2. Prerequisites \u00b6 The Jenkins should be running on kubernetes. An environment variable ON_K8S should be created on Jenkins and initialized to true . This could for example be done via Jenkins - Manage Jenkins - Configure System - Global properties - Environment variables Parameters \u00b6 name mandatory default possible values additionalPodProperties no annotations no containerCommand no containerCommands no containerEnvVars no containerMap no containerMountPath no containerName no containerPortMappings no containerPullImageFlags no containerShell no containerWorkspaces no dockerEnvVars no dockerImage no dockerPullImage no true dockerWorkspace no initContainerCommand no initContainerImage no jenkinsKubernetes/inheritFrom no jenkinsKubernetes/jnlpAgent no jenkins/inbound-agent:jdk17 jenkinsKubernetes/namespace no nodeSelector no resources no script yes securityContext no sidecarEnvVars no sidecarImage no sidecarName no sidecarPullImage no true sidecarReadyCommand no sidecarWorkspace no stashContent no [] stashExcludes no [workspace:nohup.out, stashBack:**/node_modules/**,nohup.out,.git/**] stashIncludes no [workspace:**/*] stashNoDefaultExcludes no true , false verbose no true , false additionalPodProperties - Additional pod specific configuration. Map with the properties names as key and the corresponding value as value. The value can also be a nested structure. The properties will be added to the pod spec inside node spec at the same level like e.g. containers for eg., additionalPodProperties: [ imagePullSecrets: ['secret-name'] ] This property provides some kind of an expert mode. Any property which is not handled otherwise by the step can be set. It is not possible to overwrite e.g. the containers property or to overwrite the securityContext property. Alternate way for providing additionalPodProperties is via general/jenkinsKubernetes/additionalPodProperties in the project configuration. Providing the resources map as parameter to the step call takes precedence. This freedom comes with great responsibility. The property additionalPodProperties should only be used in case you really know what you are doing. annotations - Adds annotations in the metadata section of the PodSpec containerCommand - Allows to specify start command for container created with dockerImage parameter to overwrite Piper default ( /usr/bin/tail -f /dev/null ). containerCommands - Specifies start command for containers to overwrite Piper default ( /usr/bin/tail -f /dev/null ). If container's defaultstart command should be used provide empty string like: ['selenium/standalone-chrome': ''] . containerEnvVars - Specifies environment variables per container. If not provided dockerEnvVars will be used. containerMap - A map of docker image to the name of the container. The pod will be created with all the images from this map and they are labelled based on the value field of each map entry. Example: ['maven:3.5-jdk-8-alpine': 'mavenExecute', 'selenium/standalone-chrome': 'selenium', 'famiko/jmeter-base': 'checkJMeter', 'ppiper/cf-cli:6': 'cloudfoundry'] containerMountPath - The path to which a volume should be mounted to. This volume will be available at the same mount path in each container of the provided containerMap. The volume is of type emptyDir and has the name 'volume'. With the additionalPodProperties parameter one can for example use this volume in an initContainer. containerName - Optional configuration in combination with containerMap to define the container where the commands should be executed in. containerPortMappings - Map which defines per docker image the port mappings, e.g. containerPortMappings: ['selenium/standalone-chrome': [[name: 'selPort', containerPort: 4444, hostPort: 4444]]] . containerPullImageFlags - Specifies the pullImage flag per container. containerShell - Allows to specify the shell to be executed for container with containerName. containerWorkspaces - Specifies a dedicated user home directory per container which will be passed as value for environment variable HOME . If not provided dockerWorkspace will be used. dockerEnvVars - Environment variables to set in the container, e.g. [http_proxy:'proxy:8080']. dockerImage - Optional name of the docker image that should be used. If no docker image is provided, the closure will be executed in the jnlp agent container. dockerPullImage - Set this to 'false' to bypass a docker image pull. Useful during development process. Allows testing of images which are available in the local registry only. dockerWorkspace - Specifies a dedicated user home directory for the container which will be passed as value for environment variable HOME . initContainerCommand - Command executed inside the init container shell. Please enter command without providing any \"sh -c\" prefix. For example for an echo message, simply enter: echo HelloWorld initContainerImage - The docker image to run as initContainer. jenkinsKubernetes/inheritFrom - Name of the pod template that should be inherited from. The pod template can be defined in the Jenkins UI jenkinsKubernetes/jnlpAgent - Jnlp agent Docker images which should be used to create new pods. jenkinsKubernetes/namespace - Namespace that should be used to create a new pod nodeSelector - Defines the Kubernetes nodeSelector as per https://github.com/jenkinsci/kubernetes-plugin . resources - A map containing the resources per container. The key is the container name. The value is a map defining valid resources. An entry with key DEFAULT can be used for defining resources for all containers which does not have resources specified otherwise. Alternate way for providing resources is via general/jenkinsKubernetes/resources in the project configuration. Providing the resources map as parameter to the step call takes precedence. script - The common script environment of the Jenkinsfile running. Typically the reference to the script calling the pipeline step is provided with the this parameter, as in script: this . This allows the function to access the commonPipelineEnvironment for retrieving, e.g. configuration parameters. securityContext - Kubernetes Security Context used for the pod. Can be used to specify uid and fsGroup. See: https://kubernetes.io/docs/tasks/configure-pod-container/security-context/ sidecarEnvVars - as dockerEnvVars for the sidecar container sidecarImage - as dockerImage for the sidecar container sidecarName - SideCar only: Name of the container in local network. sidecarPullImage - Set this to 'false' to bypass a docker image pull. Useful during development process. Allows testing of images which are available in the local registry only. sidecarReadyCommand - Command executed inside the container which returns exit code 0 when the container is ready to be used. sidecarWorkspace - as dockerWorkspace for the sidecar container stashContent - Specific stashes that should be considered for the step execution. stashExcludes - In the Kubernetes case the workspace is only available to the respective Jenkins slave but not to the containers running inside the pod. This configuration defines exclude pattern for stashing from Jenkins workspace to working directory in container and back. Following excludes can be set: * workspace : Pattern for stashing towards container * stashBack : Pattern for bringing data from container back to Jenkins workspace. If not set: defaults to setting for workspace . stashIncludes - In the Kubernetes case the workspace is only available to the respective Jenkins slave but not to the containers running inside the pod. This configuration defines include pattern for stashing from Jenkins workspace to working directory in container and back. Following includes can be set: * workspace : Pattern for stashing towards container * stashBack : Pattern for bringing data from container back to Jenkins workspace. If not set: defaults to setting for workspace . stashNoDefaultExcludes - In the Kubernetes case the workspace is only available to the respective Jenkins slave but not to the containers running inside the pod. This configuration defines include pattern for stashing from Jenkins workspace to working directory in container and back. This flag controls whether the stashing does not use the default exclude patterns in addition to the patterns provided in stashExcludes . verbose - Print more detailed information into the log. Step configuration \u00b6 We recommend to define values of step parameters via config.yml file . In following sections of the config.yml the configuration is possible: parameter general step/stage additionalPodProperties X X annotations X X containerCommand X containerCommands X containerEnvVars X containerMap X containerMountPath X containerName X containerPortMappings X containerPullImageFlags X containerShell X containerWorkspaces X dockerEnvVars X dockerImage X dockerPullImage X X dockerWorkspace X initContainerCommand X initContainerImage X jenkinsKubernetes/inheritFrom X X jenkinsKubernetes/jnlpAgent X X jenkinsKubernetes/namespace X X nodeSelector X resources X X script securityContext X sidecarEnvVars X sidecarImage X sidecarName X sidecarPullImage X X sidecarReadyCommand X sidecarWorkspace X stashContent X stashExcludes X stashIncludes X stashNoDefaultExcludes X verbose X X Dependencies \u00b6 The step depends on the following Jenkins plugins docker kubernetes pipeline-utility-steps workflow-basic-steps workflow-cps-global-lib workflow-durable-task-step The kubernetes plugin is only used if running in a kubernetes environment. Transitive dependencies are omitted. The list might be incomplete. Consider using the ppiper/jenkins-master docker image. This images comes with preinstalled plugins. Side effects \u00b6 none Exceptions \u00b6 none Example 1: Run a closure in a single container pod \u00b6 # set environment variable export ON_K8S = true \" dockerExecuteOnKubernetes ( script: script , dockerImage: 'maven:3.5-jdk-7' ){ sh \"mvn clean install\" } In the above example, a pod will be created with a docker container of image maven:3.5-jdk-7 . The closure will be then executed inside the container. Example 2: Run a closure in a multi-container pod \u00b6 # set environment variable export ON_K8S = true \" dockerExecuteOnKubernetes ( script: script , containerMap: [ 'maven:3.5-jdk-8-alpine' : 'maven' , 'ppiper/cf-cli:6' : 'cfcli' ]){ container ( 'maven' ){ sh \"mvn clean install\" } container ( 'cfcli' ){ sh \"cf plugins\" } } In the above example, a pod will be created with multiple Docker containers that are passed as a containerMap . The containers can be chosen for executing by referring their labels as shown in the example. Example 3: Running a closure in a dedicated container of a multi-container pod \u00b6 # set environment variable export ON_K8S = true \" dockerExecuteOnKubernetes ( script: script , containerCommands: [ 'selenium/standalone-chrome' : '' ], containerMap: [ 'maven:3.5-jdk-8-alpine' : 'maven' , 'selenium/standalone-chrome' : 'selenium' ], containerName: 'maven' , containerPortMappings: [ 'selenium/standalone-chrome' : [[ containerPort: 4444 , hostPort: 4444 ]]], containerWorkspaces: [ 'selenium/standalone-chrome' : '' ] ){ echo \"Executing inside a Kubernetes Pod inside 'maven' container to run Selenium tests\" sh \"mvn clean install\" }","title":"dockerExecuteOnKubernetes"},{"location":"steps/dockerExecuteOnKubernetes/#dockerexecuteonkubernetes","text":"","title":"dockerExecuteOnKubernetes"},{"location":"steps/dockerExecuteOnKubernetes/#description","text":"Executes a closure inside a container in a kubernetes pod. Proxy environment variables defined on the Jenkins machine are also available in the container. By default jnlp agent defined for kubernetes-plugin will be used (see https://github.com/jenkinsci/kubernetes-plugin#pipeline-support ). It is possible to define a custom jnlp agent image by Defining the jnlp image via environment variable JENKINS_JNLP_IMAGE in the Kubernetes landscape Defining the image via config ( jenkinsKubernetes.jnlpAgent ) Option 1 will take precedence over option 2.","title":"Description"},{"location":"steps/dockerExecuteOnKubernetes/#prerequisites","text":"The Jenkins should be running on kubernetes. An environment variable ON_K8S should be created on Jenkins and initialized to true . This could for example be done via Jenkins - Manage Jenkins - Configure System - Global properties - Environment variables","title":"Prerequisites"},{"location":"steps/dockerExecuteOnKubernetes/#parameters","text":"name mandatory default possible values additionalPodProperties no annotations no containerCommand no containerCommands no containerEnvVars no containerMap no containerMountPath no containerName no containerPortMappings no containerPullImageFlags no containerShell no containerWorkspaces no dockerEnvVars no dockerImage no dockerPullImage no true dockerWorkspace no initContainerCommand no initContainerImage no jenkinsKubernetes/inheritFrom no jenkinsKubernetes/jnlpAgent no jenkins/inbound-agent:jdk17 jenkinsKubernetes/namespace no nodeSelector no resources no script yes securityContext no sidecarEnvVars no sidecarImage no sidecarName no sidecarPullImage no true sidecarReadyCommand no sidecarWorkspace no stashContent no [] stashExcludes no [workspace:nohup.out, stashBack:**/node_modules/**,nohup.out,.git/**] stashIncludes no [workspace:**/*] stashNoDefaultExcludes no true , false verbose no true , false additionalPodProperties - Additional pod specific configuration. Map with the properties names as key and the corresponding value as value. The value can also be a nested structure. The properties will be added to the pod spec inside node spec at the same level like e.g. containers for eg., additionalPodProperties: [ imagePullSecrets: ['secret-name'] ] This property provides some kind of an expert mode. Any property which is not handled otherwise by the step can be set. It is not possible to overwrite e.g. the containers property or to overwrite the securityContext property. Alternate way for providing additionalPodProperties is via general/jenkinsKubernetes/additionalPodProperties in the project configuration. Providing the resources map as parameter to the step call takes precedence. This freedom comes with great responsibility. The property additionalPodProperties should only be used in case you really know what you are doing. annotations - Adds annotations in the metadata section of the PodSpec containerCommand - Allows to specify start command for container created with dockerImage parameter to overwrite Piper default ( /usr/bin/tail -f /dev/null ). containerCommands - Specifies start command for containers to overwrite Piper default ( /usr/bin/tail -f /dev/null ). If container's defaultstart command should be used provide empty string like: ['selenium/standalone-chrome': ''] . containerEnvVars - Specifies environment variables per container. If not provided dockerEnvVars will be used. containerMap - A map of docker image to the name of the container. The pod will be created with all the images from this map and they are labelled based on the value field of each map entry. Example: ['maven:3.5-jdk-8-alpine': 'mavenExecute', 'selenium/standalone-chrome': 'selenium', 'famiko/jmeter-base': 'checkJMeter', 'ppiper/cf-cli:6': 'cloudfoundry'] containerMountPath - The path to which a volume should be mounted to. This volume will be available at the same mount path in each container of the provided containerMap. The volume is of type emptyDir and has the name 'volume'. With the additionalPodProperties parameter one can for example use this volume in an initContainer. containerName - Optional configuration in combination with containerMap to define the container where the commands should be executed in. containerPortMappings - Map which defines per docker image the port mappings, e.g. containerPortMappings: ['selenium/standalone-chrome': [[name: 'selPort', containerPort: 4444, hostPort: 4444]]] . containerPullImageFlags - Specifies the pullImage flag per container. containerShell - Allows to specify the shell to be executed for container with containerName. containerWorkspaces - Specifies a dedicated user home directory per container which will be passed as value for environment variable HOME . If not provided dockerWorkspace will be used. dockerEnvVars - Environment variables to set in the container, e.g. [http_proxy:'proxy:8080']. dockerImage - Optional name of the docker image that should be used. If no docker image is provided, the closure will be executed in the jnlp agent container. dockerPullImage - Set this to 'false' to bypass a docker image pull. Useful during development process. Allows testing of images which are available in the local registry only. dockerWorkspace - Specifies a dedicated user home directory for the container which will be passed as value for environment variable HOME . initContainerCommand - Command executed inside the init container shell. Please enter command without providing any \"sh -c\" prefix. For example for an echo message, simply enter: echo HelloWorld initContainerImage - The docker image to run as initContainer. jenkinsKubernetes/inheritFrom - Name of the pod template that should be inherited from. The pod template can be defined in the Jenkins UI jenkinsKubernetes/jnlpAgent - Jnlp agent Docker images which should be used to create new pods. jenkinsKubernetes/namespace - Namespace that should be used to create a new pod nodeSelector - Defines the Kubernetes nodeSelector as per https://github.com/jenkinsci/kubernetes-plugin . resources - A map containing the resources per container. The key is the container name. The value is a map defining valid resources. An entry with key DEFAULT can be used for defining resources for all containers which does not have resources specified otherwise. Alternate way for providing resources is via general/jenkinsKubernetes/resources in the project configuration. Providing the resources map as parameter to the step call takes precedence. script - The common script environment of the Jenkinsfile running. Typically the reference to the script calling the pipeline step is provided with the this parameter, as in script: this . This allows the function to access the commonPipelineEnvironment for retrieving, e.g. configuration parameters. securityContext - Kubernetes Security Context used for the pod. Can be used to specify uid and fsGroup. See: https://kubernetes.io/docs/tasks/configure-pod-container/security-context/ sidecarEnvVars - as dockerEnvVars for the sidecar container sidecarImage - as dockerImage for the sidecar container sidecarName - SideCar only: Name of the container in local network. sidecarPullImage - Set this to 'false' to bypass a docker image pull. Useful during development process. Allows testing of images which are available in the local registry only. sidecarReadyCommand - Command executed inside the container which returns exit code 0 when the container is ready to be used. sidecarWorkspace - as dockerWorkspace for the sidecar container stashContent - Specific stashes that should be considered for the step execution. stashExcludes - In the Kubernetes case the workspace is only available to the respective Jenkins slave but not to the containers running inside the pod. This configuration defines exclude pattern for stashing from Jenkins workspace to working directory in container and back. Following excludes can be set: * workspace : Pattern for stashing towards container * stashBack : Pattern for bringing data from container back to Jenkins workspace. If not set: defaults to setting for workspace . stashIncludes - In the Kubernetes case the workspace is only available to the respective Jenkins slave but not to the containers running inside the pod. This configuration defines include pattern for stashing from Jenkins workspace to working directory in container and back. Following includes can be set: * workspace : Pattern for stashing towards container * stashBack : Pattern for bringing data from container back to Jenkins workspace. If not set: defaults to setting for workspace . stashNoDefaultExcludes - In the Kubernetes case the workspace is only available to the respective Jenkins slave but not to the containers running inside the pod. This configuration defines include pattern for stashing from Jenkins workspace to working directory in container and back. This flag controls whether the stashing does not use the default exclude patterns in addition to the patterns provided in stashExcludes . verbose - Print more detailed information into the log.","title":"Parameters"},{"location":"steps/dockerExecuteOnKubernetes/#step-configuration","text":"We recommend to define values of step parameters via config.yml file . In following sections of the config.yml the configuration is possible: parameter general step/stage additionalPodProperties X X annotations X X containerCommand X containerCommands X containerEnvVars X containerMap X containerMountPath X containerName X containerPortMappings X containerPullImageFlags X containerShell X containerWorkspaces X dockerEnvVars X dockerImage X dockerPullImage X X dockerWorkspace X initContainerCommand X initContainerImage X jenkinsKubernetes/inheritFrom X X jenkinsKubernetes/jnlpAgent X X jenkinsKubernetes/namespace X X nodeSelector X resources X X script securityContext X sidecarEnvVars X sidecarImage X sidecarName X sidecarPullImage X X sidecarReadyCommand X sidecarWorkspace X stashContent X stashExcludes X stashIncludes X stashNoDefaultExcludes X verbose X X","title":"Step configuration"},{"location":"steps/dockerExecuteOnKubernetes/#dependencies","text":"The step depends on the following Jenkins plugins docker kubernetes pipeline-utility-steps workflow-basic-steps workflow-cps-global-lib workflow-durable-task-step The kubernetes plugin is only used if running in a kubernetes environment. Transitive dependencies are omitted. The list might be incomplete. Consider using the ppiper/jenkins-master docker image. This images comes with preinstalled plugins.","title":"Dependencies"},{"location":"steps/dockerExecuteOnKubernetes/#side-effects","text":"none","title":"Side effects"},{"location":"steps/dockerExecuteOnKubernetes/#exceptions","text":"none","title":"Exceptions"},{"location":"steps/dockerExecuteOnKubernetes/#example-1-run-a-closure-in-a-single-container-pod","text":"# set environment variable export ON_K8S = true \" dockerExecuteOnKubernetes ( script: script , dockerImage: 'maven:3.5-jdk-7' ){ sh \"mvn clean install\" } In the above example, a pod will be created with a docker container of image maven:3.5-jdk-7 . The closure will be then executed inside the container.","title":"Example 1: Run a closure in a single container pod"},{"location":"steps/dockerExecuteOnKubernetes/#example-2-run-a-closure-in-a-multi-container-pod","text":"# set environment variable export ON_K8S = true \" dockerExecuteOnKubernetes ( script: script , containerMap: [ 'maven:3.5-jdk-8-alpine' : 'maven' , 'ppiper/cf-cli:6' : 'cfcli' ]){ container ( 'maven' ){ sh \"mvn clean install\" } container ( 'cfcli' ){ sh \"cf plugins\" } } In the above example, a pod will be created with multiple Docker containers that are passed as a containerMap . The containers can be chosen for executing by referring their labels as shown in the example.","title":"Example 2: Run a closure in a multi-container pod"},{"location":"steps/dockerExecuteOnKubernetes/#example-3-running-a-closure-in-a-dedicated-container-of-a-multi-container-pod","text":"# set environment variable export ON_K8S = true \" dockerExecuteOnKubernetes ( script: script , containerCommands: [ 'selenium/standalone-chrome' : '' ], containerMap: [ 'maven:3.5-jdk-8-alpine' : 'maven' , 'selenium/standalone-chrome' : 'selenium' ], containerName: 'maven' , containerPortMappings: [ 'selenium/standalone-chrome' : [[ containerPort: 4444 , hostPort: 4444 ]]], containerWorkspaces: [ 'selenium/standalone-chrome' : '' ] ){ echo \"Executing inside a Kubernetes Pod inside 'maven' container to run Selenium tests\" sh \"mvn clean install\" }","title":"Example 3: Running a closure in a dedicated container of a multi-container pod"},{"location":"steps/dubExecute/","text":"dubExecute \u00b6 Parameters \u00b6 name mandatory default possible values defaultDubRegistry no dockerEnvVars no dockerImage no dlang2/dmd-ubuntu:latest dockerOptions no dockerWorkspace no dubCommand no script yes defaultDubRegistry - URL of default DUB registry dockerEnvVars - Environment variables to set in the container, e.g. [http_proxy: 'proxy:8080']. dockerImage - Name of the docker image that should be used, in which node should be installed and configured. Default value is 'dlang2/dmd-ubuntu:latest'. dockerOptions - Docker options to be set when starting the container. dockerWorkspace - Kubernetes only: Specifies a dedicated user home directory for the container which will be passed as value for environment variable HOME . dubCommand - Which DUB command should be executed. script - The common script environment of the Jenkinsfile running. Typically the reference to the script calling the pipeline step is provided with the this parameter, as in script: this . This allows the function to access the commonPipelineEnvironment for retrieving, e.g. configuration parameters. Step configuration \u00b6 We recommend to define values of step parameters via config.yml file . In following sections of the config.yml the configuration is possible: parameter general step/stage defaultDubRegistry X dockerEnvVars X dockerImage X dockerOptions X dockerWorkspace X dubCommand X script Dependencies \u00b6 The step depends on the following Jenkins plugins docker kubernetes pipeline-utility-steps workflow-basic-steps workflow-cps-global-lib workflow-durable-task-step The kubernetes plugin is only used if running in a kubernetes environment. Transitive dependencies are omitted. The list might be incomplete. Consider using the ppiper/jenkins-master docker image. This images comes with preinstalled plugins. Exceptions \u00b6 None Examples \u00b6 dubExecute script: this , dockerImage: 'dlang2/dmd-ubuntu:latest' , dubCommand: 'build'","title":"dubExecute"},{"location":"steps/dubExecute/#dubexecute","text":"","title":"dubExecute"},{"location":"steps/dubExecute/#parameters","text":"name mandatory default possible values defaultDubRegistry no dockerEnvVars no dockerImage no dlang2/dmd-ubuntu:latest dockerOptions no dockerWorkspace no dubCommand no script yes defaultDubRegistry - URL of default DUB registry dockerEnvVars - Environment variables to set in the container, e.g. [http_proxy: 'proxy:8080']. dockerImage - Name of the docker image that should be used, in which node should be installed and configured. Default value is 'dlang2/dmd-ubuntu:latest'. dockerOptions - Docker options to be set when starting the container. dockerWorkspace - Kubernetes only: Specifies a dedicated user home directory for the container which will be passed as value for environment variable HOME . dubCommand - Which DUB command should be executed. script - The common script environment of the Jenkinsfile running. Typically the reference to the script calling the pipeline step is provided with the this parameter, as in script: this . This allows the function to access the commonPipelineEnvironment for retrieving, e.g. configuration parameters.","title":"Parameters"},{"location":"steps/dubExecute/#step-configuration","text":"We recommend to define values of step parameters via config.yml file . In following sections of the config.yml the configuration is possible: parameter general step/stage defaultDubRegistry X dockerEnvVars X dockerImage X dockerOptions X dockerWorkspace X dubCommand X script","title":"Step configuration"},{"location":"steps/dubExecute/#dependencies","text":"The step depends on the following Jenkins plugins docker kubernetes pipeline-utility-steps workflow-basic-steps workflow-cps-global-lib workflow-durable-task-step The kubernetes plugin is only used if running in a kubernetes environment. Transitive dependencies are omitted. The list might be incomplete. Consider using the ppiper/jenkins-master docker image. This images comes with preinstalled plugins.","title":"Dependencies"},{"location":"steps/dubExecute/#exceptions","text":"None","title":"Exceptions"},{"location":"steps/dubExecute/#examples","text":"dubExecute script: this , dockerImage: 'dlang2/dmd-ubuntu:latest' , dubCommand: 'build'","title":"Examples"},{"location":"steps/durationMeasure/","text":"durationMeasure \u00b6 Description \u00b6 This step is used to measure the duration of a set of steps, e.g. a certain stage. The duration is stored in a Map. The measurement data can then be written to an Influx database using step influxWriteData . Tip Measuring for example the duration of pipeline stages helps to identify potential bottlenecks within the deployment pipeline. This then helps to counter identified issues with respective optimization measures, e.g parallelization of tests. Parameters \u00b6 name mandatory default possible values measurementName no script yes measurementName - Defines the name of the measurement which is written to the Influx database. script - The common script environment of the Jenkinsfile running. Typically the reference to the script calling the pipeline step is provided with the this parameter, as in script: this . This allows the function to access the commonPipelineEnvironment for retrieving, e.g. configuration parameters. Step configuration \u00b6 We recommend to define values of step parameters via config.yml file . In following sections of the config.yml the configuration is possible: parameter general step/stage measurementName script Dependencies \u00b6 The step depends on the following Jenkins plugins <none> Transitive dependencies are omitted. The list might be incomplete. Consider using the ppiper/jenkins-master docker image. This images comes with preinstalled plugins. Example \u00b6 durationMeasure ( script: this , measurementName: 'build_duration' ) { //execute your build }","title":"durationMeasure"},{"location":"steps/durationMeasure/#durationmeasure","text":"","title":"durationMeasure"},{"location":"steps/durationMeasure/#description","text":"This step is used to measure the duration of a set of steps, e.g. a certain stage. The duration is stored in a Map. The measurement data can then be written to an Influx database using step influxWriteData . Tip Measuring for example the duration of pipeline stages helps to identify potential bottlenecks within the deployment pipeline. This then helps to counter identified issues with respective optimization measures, e.g parallelization of tests.","title":"Description"},{"location":"steps/durationMeasure/#parameters","text":"name mandatory default possible values measurementName no script yes measurementName - Defines the name of the measurement which is written to the Influx database. script - The common script environment of the Jenkinsfile running. Typically the reference to the script calling the pipeline step is provided with the this parameter, as in script: this . This allows the function to access the commonPipelineEnvironment for retrieving, e.g. configuration parameters.","title":"Parameters"},{"location":"steps/durationMeasure/#step-configuration","text":"We recommend to define values of step parameters via config.yml file . In following sections of the config.yml the configuration is possible: parameter general step/stage measurementName script","title":"Step configuration"},{"location":"steps/durationMeasure/#dependencies","text":"The step depends on the following Jenkins plugins <none> Transitive dependencies are omitted. The list might be incomplete. Consider using the ppiper/jenkins-master docker image. This images comes with preinstalled plugins.","title":"Dependencies"},{"location":"steps/durationMeasure/#example","text":"durationMeasure ( script: this , measurementName: 'build_duration' ) { //execute your build }","title":"Example"},{"location":"steps/fortifyExecuteScan/","text":"fortifyExecuteScan \u00b6 This step executes a Fortify scan on the specified project to perform static code analysis and check the source code for security flaws. Description \u00b6 This step executes a Fortify scan on the specified project to perform static code analysis and check the source code for security flaws. The Fortify step triggers a scan locally on your Jenkins within a docker container so finally you have to supply a docker image with a Fortify SCA and Java plus Maven / Gradle or alternatively Python installed into it for being able to perform any scans. Scanning MTA projects Build type maven requires a so called aggregator pom which includes all modules to be scanned. If used in a mta-project which includes non-java submodules as maven dependency (e.g. node via frontend-maven-plugin), exclude those by specifying java path explicitly, e.g. java/**/src/main/java/**/* . Besides triggering a scan the step verifies the results after they have been uploaded and processed by the Fortify SSC. By default the following KPIs are enforced: * All issues must be audited from the Corporate Security Requirements folder. * All issues must be audited from the Audit All folder. * At least one issue per category must be audited from the Spot Checks of Each Category folder. * Nothing needs to be audited from the Optional folder. Usage \u00b6 We recommend to define values of step parameters via .pipeline/config.yml file . In this case, calling the step is essentially reduced to defining the step name. Calling the step can be done either in an orchestrator specific way (e.g. via a Jenkins library step) or on the command line. Jenkins Command Line library ( 'piper-lib-os' ) fortifyExecuteScan script: this piper fortifyExecuteScan Outputs \u00b6 Output type Details influx measurement step_data fortify measurement fortify_data projectID projectName projectVersion projectVersionId violations corporateTotal corporateAudited auditAllTotal auditAllAudited spotChecksTotal spotChecksAudited spotChecksGap suspicious exploitable suppressed Parameters \u00b6 Overview - Step \u00b6 Name Mandatory Additional information authToken (yes) pass via ENV, Vault or Jenkins credentials ( fortifyCredentialsId ) script (yes) reference to Jenkins main pipeline script serverUrl yes additionalMvnParameters no additionalScanParameters no apiEndpoint no artifactUrl no assignees no autoCreate no autodetectClasspath no buildDescriptorExcludeList no buildDescriptorFile no buildTool no commitId no commitMessage no considerSuspicious no convertToSarif no createResultIssue no customScanVersion no deltaMinutes no exclude no filterSetTitle no fprDownloadEndpoint no fprUploadEndpoint no githubApiUrl no githubToken no pass via ENV, Vault or Jenkins credentials ( githubTokenCredentialsId ) globalSettingsFile no installArtifacts no m2Path no memory no modulePath no mustAuditIssueGroups no owner no pollingMinutes no projectName no projectSettingsFile no proxy no pullRequestMessageRegex no pullRequestMessageRegexGroup no pullRequestName no pythonAdditionalPath no pythonInstallCommand no pythonRequirementsFile no pythonRequirementsInstallSuffix no pythonVersion no quickScan no reportDownloadEndpoint no reportTemplateId no reportType no reporting no repository no spotAuditIssueGroups no spotCheckMaximum no spotCheckMinimum no spotCheckMinimumUnit no src no translate no updateRulePack no uploadResults no verbose no activates debug output verifyOnly no version no versioningModel no Overview - Execution Environment \u00b6 Orchestrator-specific only These parameters are relevant for orchestrator usage and not considered when using the command line option. Name Mandatory Additional information containerCommand no containerShell no dockerEnvVars no dockerImage no dockerName no dockerOptions no dockerPullImage no dockerVolumeBind no dockerWorkspace no stashContent no Details \u00b6 additionalMvnParameters \u00b6 List of additional maven parameters to be used for Fortify mvn command execution. back to overview Scope Details Aliases - Type []string Mandatory no Default $PIPER_additionalMvnParameters (if set) Secret no Configuration scope \u2612 parameter \u2610 general \u2612 steps \u2612 stages Resource references none additionalScanParameters \u00b6 List of additional scan parameters to be used for Fortify sourceanalyzer command execution. back to overview Scope Details Aliases - Type []string Mandatory no Default $PIPER_additionalScanParameters (if set) Secret no Configuration scope \u2612 parameter \u2610 general \u2612 steps \u2612 stages Resource references none apiEndpoint \u00b6 Fortify SSC endpoint used for uploading the scan results and checking the audit state back to overview Scope Details Aliases fortifyApiEndpoint Type string Mandatory no Default /api/v1 Secret no Configuration scope \u2612 parameter \u2612 general \u2612 steps \u2612 stages Resource references none artifactUrl \u00b6 Path/URL pointing to an additional artifact repository for resolution of additional artifacts during the build back to overview Scope Details Aliases - Type string Mandatory no Default $PIPER_artifactUrl (if set) Secret no Configuration scope \u2612 parameter \u2610 general \u2612 steps \u2612 stages Resource references none assignees \u00b6 Defines the assignees for the Github Issue created/updated with the results of the scan as a list of login names. back to overview Scope Details Aliases - Type []string Mandatory no Default Secret no Configuration scope \u2612 parameter \u2610 general \u2612 steps \u2612 stages Resource references none authToken \u00b6 The FortifyToken to use for authentication back to overview Scope Details Aliases - Type string Mandatory yes Default $PIPER_authToken (if set) Secret yes Configuration scope \u2612 parameter \u2610 general \u2612 steps \u2612 stages Resource references Jenkins credential id: id: fortifyCredentialsId Vault resource: name: fortifyVaultSecretName default value: fortify Vault paths: $(vaultPath)/fortify $(vaultBasePath)/$(vaultPipelineName)/fortify $(vaultBasePath)/GROUP-SECRETS/fortify autoCreate \u00b6 Whether Fortify project and project version shall be implicitly auto created in case they cannot be found in the backend back to overview Scope Details Aliases - Type bool Mandatory no Default false Possible values - true - false Secret no Configuration scope \u2612 parameter \u2610 general \u2612 steps \u2612 stages Resource references none autodetectClasspath \u00b6 Whether the classpath is automatically determined via build tool i.e. maven or pip or not at all back to overview Scope Details Aliases - Type bool Mandatory no Default true Possible values - true - false Secret no Configuration scope \u2612 parameter \u2610 general \u2612 steps \u2612 stages Resource references none buildDescriptorExcludeList \u00b6 List of build descriptors and therefore modules to exclude from the scan and assessment activities. back to overview Scope Details Aliases - Type []string Mandatory no Default - unit-tests/pom.xml - integration-tests/pom.xml Secret no Configuration scope \u2612 parameter \u2610 general \u2612 steps \u2612 stages Resource references none buildDescriptorFile \u00b6 Path to the build descriptor file addressing the module/folder to be scanned. back to overview Scope Details Aliases - Type string Mandatory no Default buildTool= maven : ./pom.xml buildTool= pip : ./setup.py buildTool= gradle : ./build.gradle Secret no Configuration scope \u2612 parameter \u2610 general \u2612 steps \u2612 stages Resource references none buildTool \u00b6 Scan type used for the step which can be 'maven' , 'pip' or 'gradle' back to overview Scope Details Aliases - Type string Mandatory no Default maven Secret no Configuration scope \u2612 parameter \u2612 general \u2612 steps \u2612 stages Resource references none commitId \u00b6 Set the Git commit ID for identifying artifacts throughout the scan. back to overview Scope Details Aliases - Type string Mandatory no Default $PIPER_commitId (if set) Secret no Configuration scope \u2612 parameter \u2610 general \u2612 steps \u2612 stages Resource references commonPipelineEnvironment : reference to: git/commitId commitMessage \u00b6 Set the Git commit message for identifying pull request merges throughout the scan. back to overview Scope Details Aliases - Type string Mandatory no Default $PIPER_commitMessage (if set) Secret no Configuration scope \u2612 parameter \u2610 general \u2612 steps \u2612 stages Resource references commonPipelineEnvironment : reference to: git/commitMessage considerSuspicious \u00b6 Whether suspicious issues should trigger the check to fail or not back to overview Scope Details Aliases - Type bool Mandatory no Default true Possible values - true - false Secret no Configuration scope \u2612 parameter \u2610 general \u2612 steps \u2612 stages Resource references none containerCommand \u00b6 Jenkins-specific: Used for proper environment setup. Kubernetes only: Allows to specify start command for container created with dockerImage parameter to overwrite Piper default (/usr/bin/tail -f /dev/null). back to overview Scope Details Aliases - Type string Mandatory no Default Secret no Configuration scope \u2612 parameter \u2612 general \u2612 steps \u2612 stages Resource references none containerShell \u00b6 Jenkins-specific: Used for proper environment setup. Allows to specify the shell to be executed for container with containerName. back to overview Scope Details Aliases - Type string Mandatory no Default Secret no Configuration scope \u2612 parameter \u2612 general \u2612 steps \u2612 stages Resource references none convertToSarif \u00b6 Convert the proprietary format of Fortify scan results to the open SARIF standard. back to overview Scope Details Aliases - Type bool Mandatory no Default true Possible values - true - false Secret no Configuration scope \u2612 parameter \u2610 general \u2612 steps \u2612 stages Resource references none createResultIssue \u00b6 Whether the step creates a GitHub issue containing the scan results in the originating repo. Since optimized pipelines are headless the creation is implicitly activated for scheduled runs. back to overview Scope Details Aliases - Type bool Mandatory no Default false Possible values - true - false Secret no Configuration scope \u2612 parameter \u2612 general \u2612 steps \u2612 stages Resource references commonPipelineEnvironment : reference to: custom/isOptimizedAndScheduled customScanVersion \u00b6 Defines a custom version for the Fortify scan which deviates from the typical versioning pattern using version and versioningModel . It allows to set non-numeric versions as well and supersedes the value of version which is calculated automatically. The parameter is also used by other scan steps (e.g. Detect, Sonar, WhiteSource) and thus allows a common custom version across scan tools. back to overview Scope Details Aliases - Type string Mandatory no Default $PIPER_customScanVersion (if set) Secret no Configuration scope \u2612 parameter \u2612 general \u2612 steps \u2612 stages Resource references none deltaMinutes \u00b6 The number of minutes for which an uploaded FPR artifact is considered to be recent and healthy, if exceeded an error will be thrown back to overview Scope Details Aliases - Type int Mandatory no Default 5 Secret no Configuration scope \u2612 parameter \u2610 general \u2612 steps \u2612 stages Resource references none dockerEnvVars \u00b6 Environment variables to set in the container, e.g. [http_proxy: \"proxy:8080\"]. back to overview Scope Details Aliases - Type map[string]string Mandatory no Default Secret no Configuration scope \u2612 parameter \u2612 general \u2612 steps \u2612 stages Resource references none dockerImage \u00b6 Name of the docker image that should be used. If empty, Docker is not used and the command is executed directly on the Jenkins system. back to overview Scope Details Aliases - Type string Mandatory no Default `` Secret no Configuration scope \u2612 parameter \u2612 general \u2612 steps \u2612 stages Resource references none dockerName \u00b6 Kubernetes only: Name of the container launching dockerImage. SideCar only: Name of the container in local network. back to overview Scope Details Aliases - Type string Mandatory no Default Secret no Configuration scope \u2612 parameter \u2612 general \u2612 steps \u2612 stages Resource references none dockerOptions \u00b6 Docker options to be set when starting the container. back to overview Scope Details Aliases - Type []string Mandatory no Default Secret no Configuration scope \u2612 parameter \u2612 general \u2612 steps \u2612 stages Resource references none dockerPullImage \u00b6 Set this to 'false' to bypass a docker image pull. Useful during development process. Allows testing of images which are available in the local registry only. back to overview Scope Details Aliases - Type bool Mandatory no Default true Possible values - true - false Secret no Configuration scope \u2612 parameter \u2612 general \u2612 steps \u2612 stages Resource references none dockerVolumeBind \u00b6 Jenkins-specific: Used for proper environment setup. Volumes that should be mounted into the docker container. back to overview Scope Details Aliases - Type map[string]string Mandatory no Default Secret no Configuration scope \u2612 parameter \u2612 general \u2612 steps \u2612 stages Resource references none dockerWorkspace \u00b6 Jenkins-specific: Used for proper environment setup. Kubernetes only: Specifies a dedicated user home directory for the container which will be passed as value for environment variable HOME . back to overview Scope Details Aliases - Type string Mandatory no Default Secret no Configuration scope \u2612 parameter \u2612 general \u2612 steps \u2612 stages Resource references none exclude \u00b6 A list of directories/files to be excluded from the scan. Wildcards can be used, e.g., '**/Test.java' . If translate is set, this will ignored. The default value for buildTool: 'maven' is ['**/src/test/**/*'] , for buildTool: 'pip' it is ['./**/tests/**/*', './**/setup.py'] . back to overview Scope Details Aliases - Type []string Mandatory no Default $PIPER_exclude (if set) Secret no Configuration scope \u2612 parameter \u2610 general \u2612 steps \u2612 stages Resource references none filterSetTitle \u00b6 Title of the filter set to use for analysing the results back to overview Scope Details Aliases - Type string Mandatory no Default SAP Secret no Configuration scope \u2612 parameter \u2610 general \u2612 steps \u2612 stages Resource references none fprDownloadEndpoint \u00b6 Fortify SSC endpoint for FPR downloads back to overview Scope Details Aliases fortifyFprDownloadEndpoint Type string Mandatory no Default /download/currentStateFprDownload.html Secret no Configuration scope \u2612 parameter \u2612 general \u2612 steps \u2612 stages Resource references none fprUploadEndpoint \u00b6 Fortify SSC endpoint for FPR uploads back to overview Scope Details Aliases fortifyFprUploadEndpoint Type string Mandatory no Default /upload/resultFileUpload.html Secret no Configuration scope \u2612 parameter \u2612 general \u2612 steps \u2612 stages Resource references none githubApiUrl \u00b6 Set the GitHub API URL. back to overview Scope Details Aliases - Type string Mandatory no Default https://api.github.com Secret no Configuration scope \u2612 parameter \u2612 general \u2612 steps \u2612 stages Resource references none githubToken \u00b6 GitHub personal access token as per https://help.github.com/en/github/authenticating-to-github/creating-a-personal-access-token-for-the-command-line back to overview Scope Details Aliases access_token Type string Mandatory no Default $PIPER_githubToken (if set) Secret yes Configuration scope \u2612 parameter \u2612 general \u2612 steps \u2612 stages Resource references Jenkins credential id: id: githubTokenCredentialsId Vault resource: name: githubVaultSecretName default value: github Vault paths: $(vaultPath)/github $(vaultBasePath)/$(vaultPipelineName)/github $(vaultBasePath)/GROUP-SECRETS/github globalSettingsFile \u00b6 Path to the mvn settings file that should be used as global settings file. back to overview Scope Details Aliases maven/globalSettingsFile Type string Mandatory no Default $PIPER_globalSettingsFile (if set) Secret no Configuration scope \u2612 parameter \u2612 general \u2612 steps \u2612 stages Resource references none installArtifacts \u00b6 If enabled, it will install all artifacts to the local maven repository to make them available before running Fortify. This is required if any maven module has dependencies to other modules in the repository and they were not installed before. back to overview Scope Details Aliases - Type bool Mandatory no Default false Possible values - true - false Secret no Configuration scope \u2612 parameter \u2612 general \u2612 steps \u2612 stages Resource references none m2Path \u00b6 Path to the location of the local repository that should be used. back to overview Scope Details Aliases maven/m2Path Type string Mandatory no Default $PIPER_m2Path (if set) Secret no Configuration scope \u2612 parameter \u2612 general \u2612 steps \u2612 stages Resource references none memory \u00b6 The amount of memory granted to the translate/scan executions back to overview Scope Details Aliases - Type string Mandatory no Default -Xmx4G -Xms512M Secret no Configuration scope \u2612 parameter \u2610 general \u2612 steps \u2612 stages Resource references none modulePath \u00b6 Allows providing the path for the module to scan back to overview Scope Details Aliases - Type string Mandatory no Default ./ Secret no Configuration scope \u2612 parameter \u2610 general \u2612 steps \u2612 stages Resource references none mustAuditIssueGroups \u00b6 Comma separated list of issue groups that must be audited completely back to overview Scope Details Aliases - Type string Mandatory no Default Corporate Security Requirements, Audit All Secret no Configuration scope \u2612 parameter \u2610 general \u2612 steps \u2612 stages Resource references none owner \u00b6 Set the GitHub organization. back to overview Scope Details Aliases githubOrg Type string Mandatory no Default $PIPER_owner (if set) Secret no Configuration scope \u2612 parameter \u2612 general \u2612 steps \u2612 stages Resource references commonPipelineEnvironment : reference to: github/owner pollingMinutes \u00b6 The number of minutes for which an uploaded FPR artifact''s status is being polled to finish queuing/processing, if exceeded polling will be stopped and an error will be thrown back to overview Scope Details Aliases - Type int Mandatory no Default 30 Secret no Configuration scope \u2612 parameter \u2610 general \u2612 steps \u2612 stages Resource references none projectName \u00b6 The project used for reporting results in SSC back to overview Scope Details Aliases fortifyProjectName Type string Mandatory no Default {{list .GroupID .ArtifactID | join \"-\" | trimAll \"-\"}} Secret no Configuration scope \u2612 parameter \u2610 general \u2612 steps \u2612 stages Resource references none projectSettingsFile \u00b6 Path to the mvn settings file that should be used as project settings file. back to overview Scope Details Aliases maven/projectSettingsFile Type string Mandatory no Default $PIPER_projectSettingsFile (if set) Secret no Configuration scope \u2612 parameter \u2612 general \u2612 steps \u2612 stages Resource references none proxy \u00b6 Proxy URL to be used for communication with the Fortify instance. back to overview Scope Details Aliases - Type string Mandatory no Default $PIPER_proxy (if set) Secret no Configuration scope \u2612 parameter \u2610 general \u2612 steps \u2612 stages Resource references none pullRequestMessageRegex \u00b6 Regex used to identify the PR-XXX reference within the merge commit message back to overview Scope Details Aliases - Type string Mandatory no Default .*Merge pull request #(\\\\d+) from.* Secret no Configuration scope \u2612 parameter \u2610 general \u2612 steps \u2612 stages Resource references none pullRequestMessageRegexGroup \u00b6 The group number for extracting the pull request id in 'pullRequestMessageRegex' back to overview Scope Details Aliases - Type int Mandatory no Default 1 Secret no Configuration scope \u2612 parameter \u2610 general \u2612 steps \u2612 stages Resource references none pullRequestName \u00b6 The name of the pull request branch which will trigger creation of a new version in Fortify SSC based on the master branch version back to overview Scope Details Aliases - Type string Mandatory no Default $PIPER_pullRequestName (if set) Secret no Configuration scope \u2612 parameter \u2610 general \u2612 steps \u2612 stages Resource references none pythonAdditionalPath \u00b6 A list of additional paths which can be used in buildTool: 'pip' for customization purposes back to overview Scope Details Deprecated this is deprecated Aliases - Type []string Mandatory no Default - ./lib - . Secret no Configuration scope \u2612 parameter \u2610 general \u2612 steps \u2612 stages Resource references none pythonInstallCommand \u00b6 Additional install command that can be run when buildTool: 'pip' is used which allows further customizing the execution environment of the scan back to overview Scope Details Aliases - Type string Mandatory no Default {{.Pip}} install --user . Secret no Configuration scope \u2612 parameter \u2610 general \u2612 steps \u2612 stages Resource references none pythonRequirementsFile \u00b6 The requirements file used in buildTool: 'pip' to populate the build environment with the necessary dependencies back to overview Scope Details Aliases - Type string Mandatory no Default $PIPER_pythonRequirementsFile (if set) Secret no Configuration scope \u2612 parameter \u2610 general \u2612 steps \u2612 stages Resource references none pythonRequirementsInstallSuffix \u00b6 The suffix for the command used to install the requirements file in buildTool: 'pip' to populate the build environment with the necessary dependencies back to overview Scope Details Aliases - Type string Mandatory no Default $PIPER_pythonRequirementsInstallSuffix (if set) Secret no Configuration scope \u2612 parameter \u2610 general \u2612 steps \u2612 stages Resource references none pythonVersion \u00b6 Python version to be used in buildTool: 'pip' back to overview Scope Details Aliases - Type string Mandatory no Default python3 Possible values - python3 - python2 Secret no Configuration scope \u2612 parameter \u2612 general \u2612 steps \u2612 stages Resource references none quickScan \u00b6 Whether a quick scan should be performed, please consult the related Fortify documentation on JAM on the impact of this setting back to overview Scope Details Aliases - Type bool Mandatory no Default false Possible values - true - false Secret no Configuration scope \u2612 parameter \u2610 general \u2612 steps \u2612 stages Resource references none reportDownloadEndpoint \u00b6 Fortify SSC endpoint for Report downloads back to overview Scope Details Aliases fortifyReportDownloadEndpoint Type string Mandatory no Default /transfer/reportDownload.html Secret no Configuration scope \u2612 parameter \u2612 general \u2612 steps \u2612 stages Resource references none reportTemplateId \u00b6 Report template ID to be used for generating the Fortify report back to overview Scope Details Aliases - Type int Mandatory no Default 18 Secret no Configuration scope \u2612 parameter \u2610 general \u2612 steps \u2612 stages Resource references none reportType \u00b6 The type of report to be generated back to overview Scope Details Aliases - Type string Mandatory no Default PDF Secret no Configuration scope \u2612 parameter \u2610 general \u2612 steps \u2612 stages Resource references none reporting \u00b6 Influences whether a report is generated or not back to overview Scope Details Aliases - Type bool Mandatory no Default false Possible values - true - false Secret no Configuration scope \u2612 parameter \u2610 general \u2612 steps \u2612 stages Resource references none repository \u00b6 Set the GitHub repository. back to overview Scope Details Aliases githubRepo Type string Mandatory no Default $PIPER_repository (if set) Secret no Configuration scope \u2612 parameter \u2612 general \u2612 steps \u2612 stages Resource references commonPipelineEnvironment : reference to: github/repository script \u00b6 The common script environment of the Jenkinsfile running. Typically the reference to the script calling the pipeline step is provided with the this parameter, as in script: this . This allows the function to access the commonPipelineEnvironment for retrieving, e.g. configuration parameters. back to overview Scope Details Aliases - Type Jenkins Script Mandatory yes Default Secret no Configuration scope \u2610 parameter \u2610 general \u2610 steps \u2610 stages Resource references none serverUrl \u00b6 Fortify SSC Url to be used for accessing the APIs back to overview Scope Details Aliases - fortifyServerUrl - sscUrl ( deprecated ) Type string Mandatory yes Default $PIPER_serverUrl (if set) Secret no Configuration scope \u2612 parameter \u2612 general \u2612 steps \u2612 stages Resource references none spotAuditIssueGroups \u00b6 Comma separated list of issue groups that are spot checked and for which spotCheckMinimum audited issues are enforced back to overview Scope Details Aliases - Type string Mandatory no Default Spot Checks of Each Category Secret no Configuration scope \u2612 parameter \u2610 general \u2612 steps \u2612 stages Resource references none spotCheckMaximum \u00b6 The maximum number of issues that must be audited per category in the Spot Checks of each Category folder to avoid an error being thrown. Note that this flag depends on the result of spotCheckMinimum. For example if spotCheckMinimum percentage value exceeds spotCheckMaximum then spotCheckMaximum will be considerd else spotCheckMinimum is considered. If value is less than one, this flag will be ignored. back to overview Scope Details Aliases - Type int Mandatory no Default 0 Secret no Configuration scope \u2612 parameter \u2610 general \u2612 steps \u2612 stages Resource references none spotCheckMinimum \u00b6 The minimum number/percentage of issues that must be audited per category in the Spot Checks of each Category folder to avoid an error being thrown back to overview Scope Details Aliases - Type int Mandatory no Default 1 Secret no Configuration scope \u2612 parameter \u2610 general \u2612 steps \u2612 stages Resource references none spotCheckMinimumUnit \u00b6 The unit for the spotCheckMinimum to apply. back to overview Scope Details Aliases - Type string Mandatory no Default number Possible values - number - percentage Secret no Configuration scope \u2612 parameter \u2610 general \u2612 steps \u2612 stages Resource references none src \u00b6 A list of source directories to scan. Wildcards can be used, e.g., 'src/main/java/**/*' . If 'translate' is set, this will ignored. The default value for buildTool: 'maven' is ['**/*.xml', '**/*.html', '**/*.jsp', '**/*.js', '**/src/main/resources/**/*', '**/src/main/java/**/*', '**/src/gen/java/cds/**/*', '**/target/main/java/**/*', '**/target/main/resources/**/*', '**/target/generated-sources/**/*'] , for buildTool: 'pip' it is ['./**/*'] . back to overview Scope Details Aliases - Type []string Mandatory no Default $PIPER_src (if set) Secret no Configuration scope \u2612 parameter \u2610 general \u2612 steps \u2612 stages Resource references none stashContent \u00b6 Jenkins-specific: Used for proper environment setup. Specific stashes that should be considered for the step execution. back to overview Scope Details Aliases - Type []string Mandatory no Default - buildDescriptor - deployDescriptor - tests - opensourceConfiguration Secret no Configuration scope \u2612 parameter \u2612 general \u2612 steps \u2612 stages Resource references none translate \u00b6 Options for translate phase of Fortify. Most likely, you do not need to set this parameter. See src, exclude. If 'src' and 'exclude' are set they are automatically used. Technical details: It has to be a JSON string of list of maps with required key 'src' , and optional keys 'exclude' , 'libDirs' , 'aspnetcore' , and 'dotNetCoreVersion' back to overview Scope Details Aliases - Type string Mandatory no Default $PIPER_translate (if set) Secret no Configuration scope \u2612 parameter \u2610 general \u2612 steps \u2612 stages Resource references none updateRulePack \u00b6 Whether the rule pack shall be updated and pulled from Fortify SSC before scanning or not back to overview Scope Details Aliases - Type bool Mandatory no Default true Possible values - true - false Secret no Configuration scope \u2612 parameter \u2610 general \u2612 steps \u2612 stages Resource references none uploadResults \u00b6 Whether results shall be uploaded or not back to overview Scope Details Aliases - Type bool Mandatory no Default true Possible values - true - false Secret no Configuration scope \u2612 parameter \u2610 general \u2612 steps \u2612 stages Resource references none verbose \u00b6 verbose output back to overview Scope Details Aliases - Type bool Mandatory no Default false Possible values - true - false Secret no Configuration scope \u2612 parameter \u2612 general \u2612 steps \u2612 stages Resource references none verifyOnly \u00b6 Whether the step shall only apply verification checks or whether it does a full scan and check cycle back to overview Scope Details Aliases - Type bool Mandatory no Default false Possible values - true - false Secret no Configuration scope \u2612 parameter \u2610 general \u2612 steps \u2612 stages Resource references none version \u00b6 Version used in conjunction with versioningModel to identify the Fortify project to be created and used for results aggregation. This is usually determined automatically based on the information in the buildTool specific build descriptor file. back to overview Scope Details Aliases fortifyProjectVersion ( deprecated ) Type string Mandatory no Default $PIPER_version (if set) Secret no Configuration scope \u2612 parameter \u2612 general \u2612 steps \u2612 stages Resource references commonPipelineEnvironment : reference to: artifactVersion versioningModel \u00b6 The default project versioning model used for creating the version based on the build descriptor version to report results in SSC, can be one of 'major' , 'major-minor' , 'semantic' , 'full' back to overview Scope Details Aliases defaultVersioningModel ( deprecated ) Type string Mandatory no Default major Possible values - major - major-minor - semantic - full Secret no Configuration scope \u2612 parameter \u2612 general \u2612 steps \u2612 stages Resource references none fortifyCredentialsId \u00b6 Jenkins 'Secret text' credentials ID containing token to authenticate to Fortify SSC. back to overview Scope Details Aliases - Type string Configuration scope \u2612 parameter \u2612 general \u2612 steps \u2612 stages githubTokenCredentialsId \u00b6 Jenkins 'Secret text' credentials ID containing token to authenticate to GitHub. back to overview Scope Details Aliases - Type string Configuration scope \u2612 parameter \u2612 general \u2612 steps \u2612 stages","title":"fortifyExecuteScan"},{"location":"steps/fortifyExecuteScan/#fortifyexecutescan","text":"This step executes a Fortify scan on the specified project to perform static code analysis and check the source code for security flaws.","title":"fortifyExecuteScan"},{"location":"steps/fortifyExecuteScan/#description","text":"This step executes a Fortify scan on the specified project to perform static code analysis and check the source code for security flaws. The Fortify step triggers a scan locally on your Jenkins within a docker container so finally you have to supply a docker image with a Fortify SCA and Java plus Maven / Gradle or alternatively Python installed into it for being able to perform any scans. Scanning MTA projects Build type maven requires a so called aggregator pom which includes all modules to be scanned. If used in a mta-project which includes non-java submodules as maven dependency (e.g. node via frontend-maven-plugin), exclude those by specifying java path explicitly, e.g. java/**/src/main/java/**/* . Besides triggering a scan the step verifies the results after they have been uploaded and processed by the Fortify SSC. By default the following KPIs are enforced: * All issues must be audited from the Corporate Security Requirements folder. * All issues must be audited from the Audit All folder. * At least one issue per category must be audited from the Spot Checks of Each Category folder. * Nothing needs to be audited from the Optional folder.","title":"Description"},{"location":"steps/fortifyExecuteScan/#usage","text":"We recommend to define values of step parameters via .pipeline/config.yml file . In this case, calling the step is essentially reduced to defining the step name. Calling the step can be done either in an orchestrator specific way (e.g. via a Jenkins library step) or on the command line. Jenkins Command Line library ( 'piper-lib-os' ) fortifyExecuteScan script: this piper fortifyExecuteScan","title":"Usage"},{"location":"steps/fortifyExecuteScan/#outputs","text":"Output type Details influx measurement step_data fortify measurement fortify_data projectID projectName projectVersion projectVersionId violations corporateTotal corporateAudited auditAllTotal auditAllAudited spotChecksTotal spotChecksAudited spotChecksGap suspicious exploitable suppressed","title":"Outputs"},{"location":"steps/fortifyExecuteScan/#parameters","text":"","title":"Parameters"},{"location":"steps/fortifyExecuteScan/#overview-step","text":"Name Mandatory Additional information authToken (yes) pass via ENV, Vault or Jenkins credentials ( fortifyCredentialsId ) script (yes) reference to Jenkins main pipeline script serverUrl yes additionalMvnParameters no additionalScanParameters no apiEndpoint no artifactUrl no assignees no autoCreate no autodetectClasspath no buildDescriptorExcludeList no buildDescriptorFile no buildTool no commitId no commitMessage no considerSuspicious no convertToSarif no createResultIssue no customScanVersion no deltaMinutes no exclude no filterSetTitle no fprDownloadEndpoint no fprUploadEndpoint no githubApiUrl no githubToken no pass via ENV, Vault or Jenkins credentials ( githubTokenCredentialsId ) globalSettingsFile no installArtifacts no m2Path no memory no modulePath no mustAuditIssueGroups no owner no pollingMinutes no projectName no projectSettingsFile no proxy no pullRequestMessageRegex no pullRequestMessageRegexGroup no pullRequestName no pythonAdditionalPath no pythonInstallCommand no pythonRequirementsFile no pythonRequirementsInstallSuffix no pythonVersion no quickScan no reportDownloadEndpoint no reportTemplateId no reportType no reporting no repository no spotAuditIssueGroups no spotCheckMaximum no spotCheckMinimum no spotCheckMinimumUnit no src no translate no updateRulePack no uploadResults no verbose no activates debug output verifyOnly no version no versioningModel no","title":"Overview - Step"},{"location":"steps/fortifyExecuteScan/#overview-execution-environment","text":"Orchestrator-specific only These parameters are relevant for orchestrator usage and not considered when using the command line option. Name Mandatory Additional information containerCommand no containerShell no dockerEnvVars no dockerImage no dockerName no dockerOptions no dockerPullImage no dockerVolumeBind no dockerWorkspace no stashContent no","title":"Overview - Execution Environment"},{"location":"steps/fortifyExecuteScan/#details","text":"","title":"Details"},{"location":"steps/fortifyExecuteScan/#additionalmvnparameters","text":"List of additional maven parameters to be used for Fortify mvn command execution. back to overview Scope Details Aliases - Type []string Mandatory no Default $PIPER_additionalMvnParameters (if set) Secret no Configuration scope \u2612 parameter \u2610 general \u2612 steps \u2612 stages Resource references none","title":"additionalMvnParameters"},{"location":"steps/fortifyExecuteScan/#additionalscanparameters","text":"List of additional scan parameters to be used for Fortify sourceanalyzer command execution. back to overview Scope Details Aliases - Type []string Mandatory no Default $PIPER_additionalScanParameters (if set) Secret no Configuration scope \u2612 parameter \u2610 general \u2612 steps \u2612 stages Resource references none","title":"additionalScanParameters"},{"location":"steps/fortifyExecuteScan/#apiendpoint","text":"Fortify SSC endpoint used for uploading the scan results and checking the audit state back to overview Scope Details Aliases fortifyApiEndpoint Type string Mandatory no Default /api/v1 Secret no Configuration scope \u2612 parameter \u2612 general \u2612 steps \u2612 stages Resource references none","title":"apiEndpoint"},{"location":"steps/fortifyExecuteScan/#artifacturl","text":"Path/URL pointing to an additional artifact repository for resolution of additional artifacts during the build back to overview Scope Details Aliases - Type string Mandatory no Default $PIPER_artifactUrl (if set) Secret no Configuration scope \u2612 parameter \u2610 general \u2612 steps \u2612 stages Resource references none","title":"artifactUrl"},{"location":"steps/fortifyExecuteScan/#assignees","text":"Defines the assignees for the Github Issue created/updated with the results of the scan as a list of login names. back to overview Scope Details Aliases - Type []string Mandatory no Default Secret no Configuration scope \u2612 parameter \u2610 general \u2612 steps \u2612 stages Resource references none","title":"assignees"},{"location":"steps/fortifyExecuteScan/#authtoken","text":"The FortifyToken to use for authentication back to overview Scope Details Aliases - Type string Mandatory yes Default $PIPER_authToken (if set) Secret yes Configuration scope \u2612 parameter \u2610 general \u2612 steps \u2612 stages Resource references Jenkins credential id: id: fortifyCredentialsId Vault resource: name: fortifyVaultSecretName default value: fortify Vault paths: $(vaultPath)/fortify $(vaultBasePath)/$(vaultPipelineName)/fortify $(vaultBasePath)/GROUP-SECRETS/fortify","title":"authToken"},{"location":"steps/fortifyExecuteScan/#autocreate","text":"Whether Fortify project and project version shall be implicitly auto created in case they cannot be found in the backend back to overview Scope Details Aliases - Type bool Mandatory no Default false Possible values - true - false Secret no Configuration scope \u2612 parameter \u2610 general \u2612 steps \u2612 stages Resource references none","title":"autoCreate"},{"location":"steps/fortifyExecuteScan/#autodetectclasspath","text":"Whether the classpath is automatically determined via build tool i.e. maven or pip or not at all back to overview Scope Details Aliases - Type bool Mandatory no Default true Possible values - true - false Secret no Configuration scope \u2612 parameter \u2610 general \u2612 steps \u2612 stages Resource references none","title":"autodetectClasspath"},{"location":"steps/fortifyExecuteScan/#builddescriptorexcludelist","text":"List of build descriptors and therefore modules to exclude from the scan and assessment activities. back to overview Scope Details Aliases - Type []string Mandatory no Default - unit-tests/pom.xml - integration-tests/pom.xml Secret no Configuration scope \u2612 parameter \u2610 general \u2612 steps \u2612 stages Resource references none","title":"buildDescriptorExcludeList"},{"location":"steps/fortifyExecuteScan/#builddescriptorfile","text":"Path to the build descriptor file addressing the module/folder to be scanned. back to overview Scope Details Aliases - Type string Mandatory no Default buildTool= maven : ./pom.xml buildTool= pip : ./setup.py buildTool= gradle : ./build.gradle Secret no Configuration scope \u2612 parameter \u2610 general \u2612 steps \u2612 stages Resource references none","title":"buildDescriptorFile"},{"location":"steps/fortifyExecuteScan/#buildtool","text":"Scan type used for the step which can be 'maven' , 'pip' or 'gradle' back to overview Scope Details Aliases - Type string Mandatory no Default maven Secret no Configuration scope \u2612 parameter \u2612 general \u2612 steps \u2612 stages Resource references none","title":"buildTool"},{"location":"steps/fortifyExecuteScan/#commitid","text":"Set the Git commit ID for identifying artifacts throughout the scan. back to overview Scope Details Aliases - Type string Mandatory no Default $PIPER_commitId (if set) Secret no Configuration scope \u2612 parameter \u2610 general \u2612 steps \u2612 stages Resource references commonPipelineEnvironment : reference to: git/commitId","title":"commitId"},{"location":"steps/fortifyExecuteScan/#commitmessage","text":"Set the Git commit message for identifying pull request merges throughout the scan. back to overview Scope Details Aliases - Type string Mandatory no Default $PIPER_commitMessage (if set) Secret no Configuration scope \u2612 parameter \u2610 general \u2612 steps \u2612 stages Resource references commonPipelineEnvironment : reference to: git/commitMessage","title":"commitMessage"},{"location":"steps/fortifyExecuteScan/#considersuspicious","text":"Whether suspicious issues should trigger the check to fail or not back to overview Scope Details Aliases - Type bool Mandatory no Default true Possible values - true - false Secret no Configuration scope \u2612 parameter \u2610 general \u2612 steps \u2612 stages Resource references none","title":"considerSuspicious"},{"location":"steps/fortifyExecuteScan/#containercommand","text":"Jenkins-specific: Used for proper environment setup. Kubernetes only: Allows to specify start command for container created with dockerImage parameter to overwrite Piper default (/usr/bin/tail -f /dev/null). back to overview Scope Details Aliases - Type string Mandatory no Default Secret no Configuration scope \u2612 parameter \u2612 general \u2612 steps \u2612 stages Resource references none","title":"containerCommand"},{"location":"steps/fortifyExecuteScan/#containershell","text":"Jenkins-specific: Used for proper environment setup. Allows to specify the shell to be executed for container with containerName. back to overview Scope Details Aliases - Type string Mandatory no Default Secret no Configuration scope \u2612 parameter \u2612 general \u2612 steps \u2612 stages Resource references none","title":"containerShell"},{"location":"steps/fortifyExecuteScan/#converttosarif","text":"Convert the proprietary format of Fortify scan results to the open SARIF standard. back to overview Scope Details Aliases - Type bool Mandatory no Default true Possible values - true - false Secret no Configuration scope \u2612 parameter \u2610 general \u2612 steps \u2612 stages Resource references none","title":"convertToSarif"},{"location":"steps/fortifyExecuteScan/#createresultissue","text":"Whether the step creates a GitHub issue containing the scan results in the originating repo. Since optimized pipelines are headless the creation is implicitly activated for scheduled runs. back to overview Scope Details Aliases - Type bool Mandatory no Default false Possible values - true - false Secret no Configuration scope \u2612 parameter \u2612 general \u2612 steps \u2612 stages Resource references commonPipelineEnvironment : reference to: custom/isOptimizedAndScheduled","title":"createResultIssue"},{"location":"steps/fortifyExecuteScan/#customscanversion","text":"Defines a custom version for the Fortify scan which deviates from the typical versioning pattern using version and versioningModel . It allows to set non-numeric versions as well and supersedes the value of version which is calculated automatically. The parameter is also used by other scan steps (e.g. Detect, Sonar, WhiteSource) and thus allows a common custom version across scan tools. back to overview Scope Details Aliases - Type string Mandatory no Default $PIPER_customScanVersion (if set) Secret no Configuration scope \u2612 parameter \u2612 general \u2612 steps \u2612 stages Resource references none","title":"customScanVersion"},{"location":"steps/fortifyExecuteScan/#deltaminutes","text":"The number of minutes for which an uploaded FPR artifact is considered to be recent and healthy, if exceeded an error will be thrown back to overview Scope Details Aliases - Type int Mandatory no Default 5 Secret no Configuration scope \u2612 parameter \u2610 general \u2612 steps \u2612 stages Resource references none","title":"deltaMinutes"},{"location":"steps/fortifyExecuteScan/#dockerenvvars","text":"Environment variables to set in the container, e.g. [http_proxy: \"proxy:8080\"]. back to overview Scope Details Aliases - Type map[string]string Mandatory no Default Secret no Configuration scope \u2612 parameter \u2612 general \u2612 steps \u2612 stages Resource references none","title":"dockerEnvVars"},{"location":"steps/fortifyExecuteScan/#dockerimage","text":"Name of the docker image that should be used. If empty, Docker is not used and the command is executed directly on the Jenkins system. back to overview Scope Details Aliases - Type string Mandatory no Default `` Secret no Configuration scope \u2612 parameter \u2612 general \u2612 steps \u2612 stages Resource references none","title":"dockerImage"},{"location":"steps/fortifyExecuteScan/#dockername","text":"Kubernetes only: Name of the container launching dockerImage. SideCar only: Name of the container in local network. back to overview Scope Details Aliases - Type string Mandatory no Default Secret no Configuration scope \u2612 parameter \u2612 general \u2612 steps \u2612 stages Resource references none","title":"dockerName"},{"location":"steps/fortifyExecuteScan/#dockeroptions","text":"Docker options to be set when starting the container. back to overview Scope Details Aliases - Type []string Mandatory no Default Secret no Configuration scope \u2612 parameter \u2612 general \u2612 steps \u2612 stages Resource references none","title":"dockerOptions"},{"location":"steps/fortifyExecuteScan/#dockerpullimage","text":"Set this to 'false' to bypass a docker image pull. Useful during development process. Allows testing of images which are available in the local registry only. back to overview Scope Details Aliases - Type bool Mandatory no Default true Possible values - true - false Secret no Configuration scope \u2612 parameter \u2612 general \u2612 steps \u2612 stages Resource references none","title":"dockerPullImage"},{"location":"steps/fortifyExecuteScan/#dockervolumebind","text":"Jenkins-specific: Used for proper environment setup. Volumes that should be mounted into the docker container. back to overview Scope Details Aliases - Type map[string]string Mandatory no Default Secret no Configuration scope \u2612 parameter \u2612 general \u2612 steps \u2612 stages Resource references none","title":"dockerVolumeBind"},{"location":"steps/fortifyExecuteScan/#dockerworkspace","text":"Jenkins-specific: Used for proper environment setup. Kubernetes only: Specifies a dedicated user home directory for the container which will be passed as value for environment variable HOME . back to overview Scope Details Aliases - Type string Mandatory no Default Secret no Configuration scope \u2612 parameter \u2612 general \u2612 steps \u2612 stages Resource references none","title":"dockerWorkspace"},{"location":"steps/fortifyExecuteScan/#exclude","text":"A list of directories/files to be excluded from the scan. Wildcards can be used, e.g., '**/Test.java' . If translate is set, this will ignored. The default value for buildTool: 'maven' is ['**/src/test/**/*'] , for buildTool: 'pip' it is ['./**/tests/**/*', './**/setup.py'] . back to overview Scope Details Aliases - Type []string Mandatory no Default $PIPER_exclude (if set) Secret no Configuration scope \u2612 parameter \u2610 general \u2612 steps \u2612 stages Resource references none","title":"exclude"},{"location":"steps/fortifyExecuteScan/#filtersettitle","text":"Title of the filter set to use for analysing the results back to overview Scope Details Aliases - Type string Mandatory no Default SAP Secret no Configuration scope \u2612 parameter \u2610 general \u2612 steps \u2612 stages Resource references none","title":"filterSetTitle"},{"location":"steps/fortifyExecuteScan/#fprdownloadendpoint","text":"Fortify SSC endpoint for FPR downloads back to overview Scope Details Aliases fortifyFprDownloadEndpoint Type string Mandatory no Default /download/currentStateFprDownload.html Secret no Configuration scope \u2612 parameter \u2612 general \u2612 steps \u2612 stages Resource references none","title":"fprDownloadEndpoint"},{"location":"steps/fortifyExecuteScan/#fpruploadendpoint","text":"Fortify SSC endpoint for FPR uploads back to overview Scope Details Aliases fortifyFprUploadEndpoint Type string Mandatory no Default /upload/resultFileUpload.html Secret no Configuration scope \u2612 parameter \u2612 general \u2612 steps \u2612 stages Resource references none","title":"fprUploadEndpoint"},{"location":"steps/fortifyExecuteScan/#githubapiurl","text":"Set the GitHub API URL. back to overview Scope Details Aliases - Type string Mandatory no Default https://api.github.com Secret no Configuration scope \u2612 parameter \u2612 general \u2612 steps \u2612 stages Resource references none","title":"githubApiUrl"},{"location":"steps/fortifyExecuteScan/#githubtoken","text":"GitHub personal access token as per https://help.github.com/en/github/authenticating-to-github/creating-a-personal-access-token-for-the-command-line back to overview Scope Details Aliases access_token Type string Mandatory no Default $PIPER_githubToken (if set) Secret yes Configuration scope \u2612 parameter \u2612 general \u2612 steps \u2612 stages Resource references Jenkins credential id: id: githubTokenCredentialsId Vault resource: name: githubVaultSecretName default value: github Vault paths: $(vaultPath)/github $(vaultBasePath)/$(vaultPipelineName)/github $(vaultBasePath)/GROUP-SECRETS/github","title":"githubToken"},{"location":"steps/fortifyExecuteScan/#globalsettingsfile","text":"Path to the mvn settings file that should be used as global settings file. back to overview Scope Details Aliases maven/globalSettingsFile Type string Mandatory no Default $PIPER_globalSettingsFile (if set) Secret no Configuration scope \u2612 parameter \u2612 general \u2612 steps \u2612 stages Resource references none","title":"globalSettingsFile"},{"location":"steps/fortifyExecuteScan/#installartifacts","text":"If enabled, it will install all artifacts to the local maven repository to make them available before running Fortify. This is required if any maven module has dependencies to other modules in the repository and they were not installed before. back to overview Scope Details Aliases - Type bool Mandatory no Default false Possible values - true - false Secret no Configuration scope \u2612 parameter \u2612 general \u2612 steps \u2612 stages Resource references none","title":"installArtifacts"},{"location":"steps/fortifyExecuteScan/#m2path","text":"Path to the location of the local repository that should be used. back to overview Scope Details Aliases maven/m2Path Type string Mandatory no Default $PIPER_m2Path (if set) Secret no Configuration scope \u2612 parameter \u2612 general \u2612 steps \u2612 stages Resource references none","title":"m2Path"},{"location":"steps/fortifyExecuteScan/#memory","text":"The amount of memory granted to the translate/scan executions back to overview Scope Details Aliases - Type string Mandatory no Default -Xmx4G -Xms512M Secret no Configuration scope \u2612 parameter \u2610 general \u2612 steps \u2612 stages Resource references none","title":"memory"},{"location":"steps/fortifyExecuteScan/#modulepath","text":"Allows providing the path for the module to scan back to overview Scope Details Aliases - Type string Mandatory no Default ./ Secret no Configuration scope \u2612 parameter \u2610 general \u2612 steps \u2612 stages Resource references none","title":"modulePath"},{"location":"steps/fortifyExecuteScan/#mustauditissuegroups","text":"Comma separated list of issue groups that must be audited completely back to overview Scope Details Aliases - Type string Mandatory no Default Corporate Security Requirements, Audit All Secret no Configuration scope \u2612 parameter \u2610 general \u2612 steps \u2612 stages Resource references none","title":"mustAuditIssueGroups"},{"location":"steps/fortifyExecuteScan/#owner","text":"Set the GitHub organization. back to overview Scope Details Aliases githubOrg Type string Mandatory no Default $PIPER_owner (if set) Secret no Configuration scope \u2612 parameter \u2612 general \u2612 steps \u2612 stages Resource references commonPipelineEnvironment : reference to: github/owner","title":"owner"},{"location":"steps/fortifyExecuteScan/#pollingminutes","text":"The number of minutes for which an uploaded FPR artifact''s status is being polled to finish queuing/processing, if exceeded polling will be stopped and an error will be thrown back to overview Scope Details Aliases - Type int Mandatory no Default 30 Secret no Configuration scope \u2612 parameter \u2610 general \u2612 steps \u2612 stages Resource references none","title":"pollingMinutes"},{"location":"steps/fortifyExecuteScan/#projectname","text":"The project used for reporting results in SSC back to overview Scope Details Aliases fortifyProjectName Type string Mandatory no Default {{list .GroupID .ArtifactID | join \"-\" | trimAll \"-\"}} Secret no Configuration scope \u2612 parameter \u2610 general \u2612 steps \u2612 stages Resource references none","title":"projectName"},{"location":"steps/fortifyExecuteScan/#projectsettingsfile","text":"Path to the mvn settings file that should be used as project settings file. back to overview Scope Details Aliases maven/projectSettingsFile Type string Mandatory no Default $PIPER_projectSettingsFile (if set) Secret no Configuration scope \u2612 parameter \u2612 general \u2612 steps \u2612 stages Resource references none","title":"projectSettingsFile"},{"location":"steps/fortifyExecuteScan/#proxy","text":"Proxy URL to be used for communication with the Fortify instance. back to overview Scope Details Aliases - Type string Mandatory no Default $PIPER_proxy (if set) Secret no Configuration scope \u2612 parameter \u2610 general \u2612 steps \u2612 stages Resource references none","title":"proxy"},{"location":"steps/fortifyExecuteScan/#pullrequestmessageregex","text":"Regex used to identify the PR-XXX reference within the merge commit message back to overview Scope Details Aliases - Type string Mandatory no Default .*Merge pull request #(\\\\d+) from.* Secret no Configuration scope \u2612 parameter \u2610 general \u2612 steps \u2612 stages Resource references none","title":"pullRequestMessageRegex"},{"location":"steps/fortifyExecuteScan/#pullrequestmessageregexgroup","text":"The group number for extracting the pull request id in 'pullRequestMessageRegex' back to overview Scope Details Aliases - Type int Mandatory no Default 1 Secret no Configuration scope \u2612 parameter \u2610 general \u2612 steps \u2612 stages Resource references none","title":"pullRequestMessageRegexGroup"},{"location":"steps/fortifyExecuteScan/#pullrequestname","text":"The name of the pull request branch which will trigger creation of a new version in Fortify SSC based on the master branch version back to overview Scope Details Aliases - Type string Mandatory no Default $PIPER_pullRequestName (if set) Secret no Configuration scope \u2612 parameter \u2610 general \u2612 steps \u2612 stages Resource references none","title":"pullRequestName"},{"location":"steps/fortifyExecuteScan/#pythonadditionalpath","text":"A list of additional paths which can be used in buildTool: 'pip' for customization purposes back to overview Scope Details Deprecated this is deprecated Aliases - Type []string Mandatory no Default - ./lib - . Secret no Configuration scope \u2612 parameter \u2610 general \u2612 steps \u2612 stages Resource references none","title":"pythonAdditionalPath"},{"location":"steps/fortifyExecuteScan/#pythoninstallcommand","text":"Additional install command that can be run when buildTool: 'pip' is used which allows further customizing the execution environment of the scan back to overview Scope Details Aliases - Type string Mandatory no Default {{.Pip}} install --user . Secret no Configuration scope \u2612 parameter \u2610 general \u2612 steps \u2612 stages Resource references none","title":"pythonInstallCommand"},{"location":"steps/fortifyExecuteScan/#pythonrequirementsfile","text":"The requirements file used in buildTool: 'pip' to populate the build environment with the necessary dependencies back to overview Scope Details Aliases - Type string Mandatory no Default $PIPER_pythonRequirementsFile (if set) Secret no Configuration scope \u2612 parameter \u2610 general \u2612 steps \u2612 stages Resource references none","title":"pythonRequirementsFile"},{"location":"steps/fortifyExecuteScan/#pythonrequirementsinstallsuffix","text":"The suffix for the command used to install the requirements file in buildTool: 'pip' to populate the build environment with the necessary dependencies back to overview Scope Details Aliases - Type string Mandatory no Default $PIPER_pythonRequirementsInstallSuffix (if set) Secret no Configuration scope \u2612 parameter \u2610 general \u2612 steps \u2612 stages Resource references none","title":"pythonRequirementsInstallSuffix"},{"location":"steps/fortifyExecuteScan/#pythonversion","text":"Python version to be used in buildTool: 'pip' back to overview Scope Details Aliases - Type string Mandatory no Default python3 Possible values - python3 - python2 Secret no Configuration scope \u2612 parameter \u2612 general \u2612 steps \u2612 stages Resource references none","title":"pythonVersion"},{"location":"steps/fortifyExecuteScan/#quickscan","text":"Whether a quick scan should be performed, please consult the related Fortify documentation on JAM on the impact of this setting back to overview Scope Details Aliases - Type bool Mandatory no Default false Possible values - true - false Secret no Configuration scope \u2612 parameter \u2610 general \u2612 steps \u2612 stages Resource references none","title":"quickScan"},{"location":"steps/fortifyExecuteScan/#reportdownloadendpoint","text":"Fortify SSC endpoint for Report downloads back to overview Scope Details Aliases fortifyReportDownloadEndpoint Type string Mandatory no Default /transfer/reportDownload.html Secret no Configuration scope \u2612 parameter \u2612 general \u2612 steps \u2612 stages Resource references none","title":"reportDownloadEndpoint"},{"location":"steps/fortifyExecuteScan/#reporttemplateid","text":"Report template ID to be used for generating the Fortify report back to overview Scope Details Aliases - Type int Mandatory no Default 18 Secret no Configuration scope \u2612 parameter \u2610 general \u2612 steps \u2612 stages Resource references none","title":"reportTemplateId"},{"location":"steps/fortifyExecuteScan/#reporttype","text":"The type of report to be generated back to overview Scope Details Aliases - Type string Mandatory no Default PDF Secret no Configuration scope \u2612 parameter \u2610 general \u2612 steps \u2612 stages Resource references none","title":"reportType"},{"location":"steps/fortifyExecuteScan/#reporting","text":"Influences whether a report is generated or not back to overview Scope Details Aliases - Type bool Mandatory no Default false Possible values - true - false Secret no Configuration scope \u2612 parameter \u2610 general \u2612 steps \u2612 stages Resource references none","title":"reporting"},{"location":"steps/fortifyExecuteScan/#repository","text":"Set the GitHub repository. back to overview Scope Details Aliases githubRepo Type string Mandatory no Default $PIPER_repository (if set) Secret no Configuration scope \u2612 parameter \u2612 general \u2612 steps \u2612 stages Resource references commonPipelineEnvironment : reference to: github/repository","title":"repository"},{"location":"steps/fortifyExecuteScan/#script","text":"The common script environment of the Jenkinsfile running. Typically the reference to the script calling the pipeline step is provided with the this parameter, as in script: this . This allows the function to access the commonPipelineEnvironment for retrieving, e.g. configuration parameters. back to overview Scope Details Aliases - Type Jenkins Script Mandatory yes Default Secret no Configuration scope \u2610 parameter \u2610 general \u2610 steps \u2610 stages Resource references none","title":"script"},{"location":"steps/fortifyExecuteScan/#serverurl","text":"Fortify SSC Url to be used for accessing the APIs back to overview Scope Details Aliases - fortifyServerUrl - sscUrl ( deprecated ) Type string Mandatory yes Default $PIPER_serverUrl (if set) Secret no Configuration scope \u2612 parameter \u2612 general \u2612 steps \u2612 stages Resource references none","title":"serverUrl"},{"location":"steps/fortifyExecuteScan/#spotauditissuegroups","text":"Comma separated list of issue groups that are spot checked and for which spotCheckMinimum audited issues are enforced back to overview Scope Details Aliases - Type string Mandatory no Default Spot Checks of Each Category Secret no Configuration scope \u2612 parameter \u2610 general \u2612 steps \u2612 stages Resource references none","title":"spotAuditIssueGroups"},{"location":"steps/fortifyExecuteScan/#spotcheckmaximum","text":"The maximum number of issues that must be audited per category in the Spot Checks of each Category folder to avoid an error being thrown. Note that this flag depends on the result of spotCheckMinimum. For example if spotCheckMinimum percentage value exceeds spotCheckMaximum then spotCheckMaximum will be considerd else spotCheckMinimum is considered. If value is less than one, this flag will be ignored. back to overview Scope Details Aliases - Type int Mandatory no Default 0 Secret no Configuration scope \u2612 parameter \u2610 general \u2612 steps \u2612 stages Resource references none","title":"spotCheckMaximum"},{"location":"steps/fortifyExecuteScan/#spotcheckminimum","text":"The minimum number/percentage of issues that must be audited per category in the Spot Checks of each Category folder to avoid an error being thrown back to overview Scope Details Aliases - Type int Mandatory no Default 1 Secret no Configuration scope \u2612 parameter \u2610 general \u2612 steps \u2612 stages Resource references none","title":"spotCheckMinimum"},{"location":"steps/fortifyExecuteScan/#spotcheckminimumunit","text":"The unit for the spotCheckMinimum to apply. back to overview Scope Details Aliases - Type string Mandatory no Default number Possible values - number - percentage Secret no Configuration scope \u2612 parameter \u2610 general \u2612 steps \u2612 stages Resource references none","title":"spotCheckMinimumUnit"},{"location":"steps/fortifyExecuteScan/#src","text":"A list of source directories to scan. Wildcards can be used, e.g., 'src/main/java/**/*' . If 'translate' is set, this will ignored. The default value for buildTool: 'maven' is ['**/*.xml', '**/*.html', '**/*.jsp', '**/*.js', '**/src/main/resources/**/*', '**/src/main/java/**/*', '**/src/gen/java/cds/**/*', '**/target/main/java/**/*', '**/target/main/resources/**/*', '**/target/generated-sources/**/*'] , for buildTool: 'pip' it is ['./**/*'] . back to overview Scope Details Aliases - Type []string Mandatory no Default $PIPER_src (if set) Secret no Configuration scope \u2612 parameter \u2610 general \u2612 steps \u2612 stages Resource references none","title":"src"},{"location":"steps/fortifyExecuteScan/#stashcontent","text":"Jenkins-specific: Used for proper environment setup. Specific stashes that should be considered for the step execution. back to overview Scope Details Aliases - Type []string Mandatory no Default - buildDescriptor - deployDescriptor - tests - opensourceConfiguration Secret no Configuration scope \u2612 parameter \u2612 general \u2612 steps \u2612 stages Resource references none","title":"stashContent"},{"location":"steps/fortifyExecuteScan/#translate","text":"Options for translate phase of Fortify. Most likely, you do not need to set this parameter. See src, exclude. If 'src' and 'exclude' are set they are automatically used. Technical details: It has to be a JSON string of list of maps with required key 'src' , and optional keys 'exclude' , 'libDirs' , 'aspnetcore' , and 'dotNetCoreVersion' back to overview Scope Details Aliases - Type string Mandatory no Default $PIPER_translate (if set) Secret no Configuration scope \u2612 parameter \u2610 general \u2612 steps \u2612 stages Resource references none","title":"translate"},{"location":"steps/fortifyExecuteScan/#updaterulepack","text":"Whether the rule pack shall be updated and pulled from Fortify SSC before scanning or not back to overview Scope Details Aliases - Type bool Mandatory no Default true Possible values - true - false Secret no Configuration scope \u2612 parameter \u2610 general \u2612 steps \u2612 stages Resource references none","title":"updateRulePack"},{"location":"steps/fortifyExecuteScan/#uploadresults","text":"Whether results shall be uploaded or not back to overview Scope Details Aliases - Type bool Mandatory no Default true Possible values - true - false Secret no Configuration scope \u2612 parameter \u2610 general \u2612 steps \u2612 stages Resource references none","title":"uploadResults"},{"location":"steps/fortifyExecuteScan/#verbose","text":"verbose output back to overview Scope Details Aliases - Type bool Mandatory no Default false Possible values - true - false Secret no Configuration scope \u2612 parameter \u2612 general \u2612 steps \u2612 stages Resource references none","title":"verbose"},{"location":"steps/fortifyExecuteScan/#verifyonly","text":"Whether the step shall only apply verification checks or whether it does a full scan and check cycle back to overview Scope Details Aliases - Type bool Mandatory no Default false Possible values - true - false Secret no Configuration scope \u2612 parameter \u2610 general \u2612 steps \u2612 stages Resource references none","title":"verifyOnly"},{"location":"steps/fortifyExecuteScan/#version","text":"Version used in conjunction with versioningModel to identify the Fortify project to be created and used for results aggregation. This is usually determined automatically based on the information in the buildTool specific build descriptor file. back to overview Scope Details Aliases fortifyProjectVersion ( deprecated ) Type string Mandatory no Default $PIPER_version (if set) Secret no Configuration scope \u2612 parameter \u2612 general \u2612 steps \u2612 stages Resource references commonPipelineEnvironment : reference to: artifactVersion","title":"version"},{"location":"steps/fortifyExecuteScan/#versioningmodel","text":"The default project versioning model used for creating the version based on the build descriptor version to report results in SSC, can be one of 'major' , 'major-minor' , 'semantic' , 'full' back to overview Scope Details Aliases defaultVersioningModel ( deprecated ) Type string Mandatory no Default major Possible values - major - major-minor - semantic - full Secret no Configuration scope \u2612 parameter \u2612 general \u2612 steps \u2612 stages Resource references none","title":"versioningModel"},{"location":"steps/fortifyExecuteScan/#fortifycredentialsid","text":"Jenkins 'Secret text' credentials ID containing token to authenticate to Fortify SSC. back to overview Scope Details Aliases - Type string Configuration scope \u2612 parameter \u2612 general \u2612 steps \u2612 stages","title":"fortifyCredentialsId"},{"location":"steps/fortifyExecuteScan/#githubtokencredentialsid","text":"Jenkins 'Secret text' credentials ID containing token to authenticate to GitHub. back to overview Scope Details Aliases - Type string Configuration scope \u2612 parameter \u2612 general \u2612 steps \u2612 stages","title":"githubTokenCredentialsId"},{"location":"steps/gatlingExecuteTests/","text":"gatlingExecuteTests \u00b6 Description \u00b6 In this step Gatling performance tests are executed. Requires the Jenkins Gatling plugin to be installed. Prerequisites \u00b6 The Gatling Jenkins plugin needs to be installed. Parameters \u00b6 name mandatory default possible values appUrls no failOnError no true , false pomPath yes script yes appUrls - Optional List of app URLs and corresponding Jenkins credential IDs. failOnError - Defines the behavior in case tests fail. When this is set to true test results cannot be recorded using the publishTestResults step afterwards. pomPath - Path to the pom.xml file containing the performance test Maven module, for example performance-tests/pom.xml . script - The common script environment of the Jenkinsfile running. Typically the reference to the script calling the pipeline step is provided with the this parameter, as in script: this . This allows the function to access the commonPipelineEnvironment for retrieving, e.g. configuration parameters. Step configuration \u00b6 We recommend to define values of step parameters via config.yml file . In following sections of the config.yml the configuration is possible: parameter general step/stage appUrls X failOnError X pomPath X script We recommend to define values of step parameters via config.yml file . Dependencies \u00b6 The step depends on the following Jenkins plugins credentials-binding gatling pipeline-utility-steps workflow-basic-steps workflow-cps-global-lib workflow-durable-task-step Transitive dependencies are omitted. The list might be incomplete. Consider using the ppiper/jenkins-master docker image. This images comes with preinstalled plugins. Example \u00b6 Pipeline step: gatlingExecuteTests script: this , pomPath: 'performance-tests/pom.xml'","title":"gatlingExecuteTests"},{"location":"steps/gatlingExecuteTests/#gatlingexecutetests","text":"","title":"gatlingExecuteTests"},{"location":"steps/gatlingExecuteTests/#description","text":"In this step Gatling performance tests are executed. Requires the Jenkins Gatling plugin to be installed.","title":"Description"},{"location":"steps/gatlingExecuteTests/#prerequisites","text":"The Gatling Jenkins plugin needs to be installed.","title":"Prerequisites"},{"location":"steps/gatlingExecuteTests/#parameters","text":"name mandatory default possible values appUrls no failOnError no true , false pomPath yes script yes appUrls - Optional List of app URLs and corresponding Jenkins credential IDs. failOnError - Defines the behavior in case tests fail. When this is set to true test results cannot be recorded using the publishTestResults step afterwards. pomPath - Path to the pom.xml file containing the performance test Maven module, for example performance-tests/pom.xml . script - The common script environment of the Jenkinsfile running. Typically the reference to the script calling the pipeline step is provided with the this parameter, as in script: this . This allows the function to access the commonPipelineEnvironment for retrieving, e.g. configuration parameters.","title":"Parameters"},{"location":"steps/gatlingExecuteTests/#step-configuration","text":"We recommend to define values of step parameters via config.yml file . In following sections of the config.yml the configuration is possible: parameter general step/stage appUrls X failOnError X pomPath X script We recommend to define values of step parameters via config.yml file .","title":"Step configuration"},{"location":"steps/gatlingExecuteTests/#dependencies","text":"The step depends on the following Jenkins plugins credentials-binding gatling pipeline-utility-steps workflow-basic-steps workflow-cps-global-lib workflow-durable-task-step Transitive dependencies are omitted. The list might be incomplete. Consider using the ppiper/jenkins-master docker image. This images comes with preinstalled plugins.","title":"Dependencies"},{"location":"steps/gatlingExecuteTests/#example","text":"Pipeline step: gatlingExecuteTests script: this , pomPath: 'performance-tests/pom.xml'","title":"Example"},{"location":"steps/gaugeExecuteTests/","text":"gaugeExecuteTests \u00b6 Installs gauge and executes specified gauge tests. Description \u00b6 In this step Gauge ( gauge.org ) acceptance tests are executed. Using Gauge it will be possible to have a three-tier test layout: Acceptance Criteria Test implemenation layer Application driver layer This layout is propagated by Jez Humble and Dave Farley in their book \"Continuous Delivery\" as a way to create maintainable acceptance test suites (see \"Continuous Delivery\", p. 190ff). Using Gauge it is possible to write test specifications in Markdown syntax and therefore allow e.g. product owners to write the relevant acceptance test specifications. At the same time it allows the developer to implement the steps described in the specification in her development environment. You can use the sample projects of Gauge. Usage \u00b6 We recommend to define values of step parameters via .pipeline/config.yml file . In this case, calling the step is essentially reduced to defining the step name. Calling the step can be done either in an orchestrator specific way (e.g. via a Jenkins library step) or on the command line. Jenkins Command Line library ( 'piper-lib-os' ) gaugeExecuteTests script: this piper gaugeExecuteTests Outputs \u00b6 Output type Details influx measurement step_data gauge Prerequisites \u00b6 none Parameters \u00b6 Overview - Step \u00b6 Name Mandatory Additional information runCommand yes script (yes) reference to Jenkins main pipeline script installCommand no languageRunner no testOptions no verbose no activates debug output Overview - Execution Environment \u00b6 Orchestrator-specific only These parameters are relevant for orchestrator usage and not considered when using the command line option. Name Mandatory Additional information containerCommand no containerName no containerShell no dockerEnvVars no dockerImage no dockerName no dockerOptions no dockerPullImage no dockerVolumeBind no dockerWorkspace no sidecarEnvVars no sidecarImage no sidecarName no sidecarOptions no sidecarPullImage no sidecarReadyCommand no sidecarVolumeBind no sidecarWorkspace no stashContent no Details \u00b6 containerCommand \u00b6 Jenkins-specific: Used for proper environment setup. Kubernetes only: Allows to specify start command for container created with dockerImage parameter to overwrite Piper default (/usr/bin/tail -f /dev/null). back to overview Scope Details Aliases - Type string Mandatory no Default Secret no Configuration scope \u2612 parameter \u2612 general \u2612 steps \u2612 stages Resource references none containerName \u00b6 Jenkins-specific: Used for proper environment setup. Optional configuration in combination with containerMap to define the container where the commands should be executed in. back to overview Scope Details Aliases - Type string Mandatory no Default gauge Secret no Configuration scope \u2612 parameter \u2612 general \u2612 steps \u2612 stages Resource references none containerShell \u00b6 Jenkins-specific: Used for proper environment setup. Allows to specify the shell to be executed for container with containerName. back to overview Scope Details Aliases - Type string Mandatory no Default Secret no Configuration scope \u2612 parameter \u2612 general \u2612 steps \u2612 stages Resource references none dockerEnvVars \u00b6 Environment variables to set in the container, e.g. [http_proxy: \"proxy:8080\"]. back to overview Scope Details Aliases - Type map[string]string Mandatory no Default map[NO_PROXY:localhost,selenium,$NO_PROXY no_proxy:localhost,selenium,$no_proxy] Secret no Configuration scope \u2612 parameter \u2612 general \u2612 steps \u2612 stages Resource references none dockerImage \u00b6 Name of the docker image that should be used. If empty, Docker is not used and the command is executed directly on the Jenkins system. back to overview Scope Details Aliases - Type string Mandatory no Default node:22-bookworm Secret no Configuration scope \u2612 parameter \u2612 general \u2612 steps \u2612 stages Resource references none dockerName \u00b6 Kubernetes only: Name of the container launching dockerImage. SideCar only: Name of the container in local network. back to overview Scope Details Aliases - Type string Mandatory no Default gauge Secret no Configuration scope \u2612 parameter \u2612 general \u2612 steps \u2612 stages Resource references none dockerOptions \u00b6 Docker options to be set when starting the container. back to overview Scope Details Aliases - Type []string Mandatory no Default Secret no Configuration scope \u2612 parameter \u2612 general \u2612 steps \u2612 stages Resource references none dockerPullImage \u00b6 Set this to 'false' to bypass a docker image pull. Useful during development process. Allows testing of images which are available in the local registry only. back to overview Scope Details Aliases - Type bool Mandatory no Default true Possible values - true - false Secret no Configuration scope \u2612 parameter \u2612 general \u2612 steps \u2612 stages Resource references none dockerVolumeBind \u00b6 Jenkins-specific: Used for proper environment setup. Volumes that should be mounted into the docker container. back to overview Scope Details Aliases - Type map[string]string Mandatory no Default Secret no Configuration scope \u2612 parameter \u2612 general \u2612 steps \u2612 stages Resource references none dockerWorkspace \u00b6 Jenkins-specific: Used for proper environment setup. Kubernetes only: Specifies a dedicated user home directory for the container which will be passed as value for environment variable HOME . back to overview Scope Details Aliases - Type string Mandatory no Default /home/node Secret no Configuration scope \u2612 parameter \u2612 general \u2612 steps \u2612 stages Resource references none installCommand \u00b6 Defines the command for installing Gauge. Gauge should be installed using npm. Example: npm install -g @getgauge/cli@1.2.1 back to overview Scope Details Aliases - Type string Mandatory no Default curl -SsL https://downloads.gauge.org/stable | sh -s -- --location=$HOME/bin/gauge Secret no Configuration scope \u2612 parameter \u2610 general \u2612 steps \u2612 stages Resource references none languageRunner \u00b6 Defines the Gauge language runner to be used. Example: java back to overview Scope Details Aliases - Type string Mandatory no Default $PIPER_languageRunner (if set) Secret no Configuration scope \u2612 parameter \u2610 general \u2612 steps \u2612 stages Resource references none runCommand \u00b6 Defines the command which is used for executing Gauge. Example: run -s -p specs/ back to overview Scope Details Aliases - Type string Mandatory yes Default $PIPER_runCommand (if set) Secret no Configuration scope \u2612 parameter \u2610 general \u2612 steps \u2612 stages Resource references none script \u00b6 The common script environment of the Jenkinsfile running. Typically the reference to the script calling the pipeline step is provided with the this parameter, as in script: this . This allows the function to access the commonPipelineEnvironment for retrieving, e.g. configuration parameters. back to overview Scope Details Aliases - Type Jenkins Script Mandatory yes Default Secret no Configuration scope \u2610 parameter \u2610 general \u2610 steps \u2610 stages Resource references none sidecarEnvVars \u00b6 A map of environment variables to set in the sidecar container, similar to dockerEnvVars . back to overview Scope Details Aliases - Type map[string]string Mandatory no Default Secret no Configuration scope \u2612 parameter \u2612 general \u2612 steps \u2612 stages Resource references none sidecarImage \u00b6 The name of the docker image of the sidecar container. If empty, no sidecar container is started. Similar to dockerImage . back to overview Scope Details Aliases - Type string Mandatory no Default Secret no Configuration scope \u2612 parameter \u2612 general \u2612 steps \u2612 stages Resource references none sidecarName \u00b6 Name of the sidecar container. Similar to dockerName . back to overview Scope Details Aliases - Type string Mandatory no Default Secret no Configuration scope \u2612 parameter \u2612 general \u2612 steps \u2612 stages Resource references none sidecarOptions \u00b6 Options to be set when starting the sidecar container. Similar to dockerOptions . back to overview Scope Details Aliases - Type []string Mandatory no Default Secret no Configuration scope \u2612 parameter \u2612 general \u2612 steps \u2612 stages Resource references none sidecarPullImage \u00b6 Set this to 'false' to bypass a docker image pull. Useful during development process. Allows testing of images which are available in the local registry only. back to overview Scope Details Aliases - Type bool Mandatory no Default false Possible values - true - false Secret no Configuration scope \u2612 parameter \u2612 general \u2612 steps \u2612 stages Resource references none sidecarReadyCommand \u00b6 Jenkins-specific: Used for proper environment setup. Command executed inside the container which returns exit code 0 when the container is ready to be used. back to overview Scope Details Aliases - Type string Mandatory no Default Secret no Configuration scope \u2612 parameter \u2612 general \u2612 steps \u2612 stages Resource references none sidecarVolumeBind \u00b6 Volumes that should be mounted into the sidecar container. Similar to dockerVolumeBind . back to overview Scope Details Aliases - Type map[string]string Mandatory no Default Secret no Configuration scope \u2612 parameter \u2612 general \u2612 steps \u2612 stages Resource references none sidecarWorkspace \u00b6 Jenkins-specific: Used for proper environment setup. back to overview Scope Details Aliases - Type string Mandatory no Default Secret no Configuration scope \u2612 parameter \u2612 general \u2612 steps \u2612 stages Resource references none stashContent \u00b6 Jenkins-specific: Used for proper environment setup. Specific stashes that should be considered for the step execution. back to overview Scope Details Aliases - Type []string Mandatory no Default - buildDescriptor - tests Secret no Configuration scope \u2612 parameter \u2612 general \u2612 steps \u2612 stages Resource references none testOptions \u00b6 Allows to set specific options for the Gauge execution. Details can be found for example in the Gauge Maven plugin documentation back to overview Scope Details Aliases - Type string Mandatory no Default $PIPER_testOptions (if set) Secret no Configuration scope \u2612 parameter \u2610 general \u2612 steps \u2612 stages Resource references none verbose \u00b6 verbose output back to overview Scope Details Aliases - Type bool Mandatory no Default false Possible values - true - false Secret no Configuration scope \u2612 parameter \u2612 general \u2612 steps \u2612 stages Resource references none seleniumHubCredentialsId \u00b6 Defines the id of the user/password credentials to be used to connect to a Selenium Hub. The credentials are provided in the environment variables PIPER_SELENIUM_HUB_USER and PIPER_SELENIUM_HUB_PASSWORD . back to overview Scope Details Aliases - Type string Configuration scope \u2612 parameter \u2612 general \u2612 steps \u2612 stages We recommend to define values of step parameters via config.yml file . Example \u00b6 Pipeline step: gaugeExecuteTests script: this , testServerUrl: 'http://test.url'","title":"gaugeExecuteTests"},{"location":"steps/gaugeExecuteTests/#gaugeexecutetests","text":"Installs gauge and executes specified gauge tests.","title":"gaugeExecuteTests"},{"location":"steps/gaugeExecuteTests/#description","text":"In this step Gauge ( gauge.org ) acceptance tests are executed. Using Gauge it will be possible to have a three-tier test layout: Acceptance Criteria Test implemenation layer Application driver layer This layout is propagated by Jez Humble and Dave Farley in their book \"Continuous Delivery\" as a way to create maintainable acceptance test suites (see \"Continuous Delivery\", p. 190ff). Using Gauge it is possible to write test specifications in Markdown syntax and therefore allow e.g. product owners to write the relevant acceptance test specifications. At the same time it allows the developer to implement the steps described in the specification in her development environment. You can use the sample projects of Gauge.","title":"Description"},{"location":"steps/gaugeExecuteTests/#usage","text":"We recommend to define values of step parameters via .pipeline/config.yml file . In this case, calling the step is essentially reduced to defining the step name. Calling the step can be done either in an orchestrator specific way (e.g. via a Jenkins library step) or on the command line. Jenkins Command Line library ( 'piper-lib-os' ) gaugeExecuteTests script: this piper gaugeExecuteTests","title":"Usage"},{"location":"steps/gaugeExecuteTests/#outputs","text":"Output type Details influx measurement step_data gauge","title":"Outputs"},{"location":"steps/gaugeExecuteTests/#prerequisites","text":"none","title":"Prerequisites"},{"location":"steps/gaugeExecuteTests/#parameters","text":"","title":"Parameters"},{"location":"steps/gaugeExecuteTests/#overview-step","text":"Name Mandatory Additional information runCommand yes script (yes) reference to Jenkins main pipeline script installCommand no languageRunner no testOptions no verbose no activates debug output","title":"Overview - Step"},{"location":"steps/gaugeExecuteTests/#overview-execution-environment","text":"Orchestrator-specific only These parameters are relevant for orchestrator usage and not considered when using the command line option. Name Mandatory Additional information containerCommand no containerName no containerShell no dockerEnvVars no dockerImage no dockerName no dockerOptions no dockerPullImage no dockerVolumeBind no dockerWorkspace no sidecarEnvVars no sidecarImage no sidecarName no sidecarOptions no sidecarPullImage no sidecarReadyCommand no sidecarVolumeBind no sidecarWorkspace no stashContent no","title":"Overview - Execution Environment"},{"location":"steps/gaugeExecuteTests/#details","text":"","title":"Details"},{"location":"steps/gaugeExecuteTests/#containercommand","text":"Jenkins-specific: Used for proper environment setup. Kubernetes only: Allows to specify start command for container created with dockerImage parameter to overwrite Piper default (/usr/bin/tail -f /dev/null). back to overview Scope Details Aliases - Type string Mandatory no Default Secret no Configuration scope \u2612 parameter \u2612 general \u2612 steps \u2612 stages Resource references none","title":"containerCommand"},{"location":"steps/gaugeExecuteTests/#containername","text":"Jenkins-specific: Used for proper environment setup. Optional configuration in combination with containerMap to define the container where the commands should be executed in. back to overview Scope Details Aliases - Type string Mandatory no Default gauge Secret no Configuration scope \u2612 parameter \u2612 general \u2612 steps \u2612 stages Resource references none","title":"containerName"},{"location":"steps/gaugeExecuteTests/#containershell","text":"Jenkins-specific: Used for proper environment setup. Allows to specify the shell to be executed for container with containerName. back to overview Scope Details Aliases - Type string Mandatory no Default Secret no Configuration scope \u2612 parameter \u2612 general \u2612 steps \u2612 stages Resource references none","title":"containerShell"},{"location":"steps/gaugeExecuteTests/#dockerenvvars","text":"Environment variables to set in the container, e.g. [http_proxy: \"proxy:8080\"]. back to overview Scope Details Aliases - Type map[string]string Mandatory no Default map[NO_PROXY:localhost,selenium,$NO_PROXY no_proxy:localhost,selenium,$no_proxy] Secret no Configuration scope \u2612 parameter \u2612 general \u2612 steps \u2612 stages Resource references none","title":"dockerEnvVars"},{"location":"steps/gaugeExecuteTests/#dockerimage","text":"Name of the docker image that should be used. If empty, Docker is not used and the command is executed directly on the Jenkins system. back to overview Scope Details Aliases - Type string Mandatory no Default node:22-bookworm Secret no Configuration scope \u2612 parameter \u2612 general \u2612 steps \u2612 stages Resource references none","title":"dockerImage"},{"location":"steps/gaugeExecuteTests/#dockername","text":"Kubernetes only: Name of the container launching dockerImage. SideCar only: Name of the container in local network. back to overview Scope Details Aliases - Type string Mandatory no Default gauge Secret no Configuration scope \u2612 parameter \u2612 general \u2612 steps \u2612 stages Resource references none","title":"dockerName"},{"location":"steps/gaugeExecuteTests/#dockeroptions","text":"Docker options to be set when starting the container. back to overview Scope Details Aliases - Type []string Mandatory no Default Secret no Configuration scope \u2612 parameter \u2612 general \u2612 steps \u2612 stages Resource references none","title":"dockerOptions"},{"location":"steps/gaugeExecuteTests/#dockerpullimage","text":"Set this to 'false' to bypass a docker image pull. Useful during development process. Allows testing of images which are available in the local registry only. back to overview Scope Details Aliases - Type bool Mandatory no Default true Possible values - true - false Secret no Configuration scope \u2612 parameter \u2612 general \u2612 steps \u2612 stages Resource references none","title":"dockerPullImage"},{"location":"steps/gaugeExecuteTests/#dockervolumebind","text":"Jenkins-specific: Used for proper environment setup. Volumes that should be mounted into the docker container. back to overview Scope Details Aliases - Type map[string]string Mandatory no Default Secret no Configuration scope \u2612 parameter \u2612 general \u2612 steps \u2612 stages Resource references none","title":"dockerVolumeBind"},{"location":"steps/gaugeExecuteTests/#dockerworkspace","text":"Jenkins-specific: Used for proper environment setup. Kubernetes only: Specifies a dedicated user home directory for the container which will be passed as value for environment variable HOME . back to overview Scope Details Aliases - Type string Mandatory no Default /home/node Secret no Configuration scope \u2612 parameter \u2612 general \u2612 steps \u2612 stages Resource references none","title":"dockerWorkspace"},{"location":"steps/gaugeExecuteTests/#installcommand","text":"Defines the command for installing Gauge. Gauge should be installed using npm. Example: npm install -g @getgauge/cli@1.2.1 back to overview Scope Details Aliases - Type string Mandatory no Default curl -SsL https://downloads.gauge.org/stable | sh -s -- --location=$HOME/bin/gauge Secret no Configuration scope \u2612 parameter \u2610 general \u2612 steps \u2612 stages Resource references none","title":"installCommand"},{"location":"steps/gaugeExecuteTests/#languagerunner","text":"Defines the Gauge language runner to be used. Example: java back to overview Scope Details Aliases - Type string Mandatory no Default $PIPER_languageRunner (if set) Secret no Configuration scope \u2612 parameter \u2610 general \u2612 steps \u2612 stages Resource references none","title":"languageRunner"},{"location":"steps/gaugeExecuteTests/#runcommand","text":"Defines the command which is used for executing Gauge. Example: run -s -p specs/ back to overview Scope Details Aliases - Type string Mandatory yes Default $PIPER_runCommand (if set) Secret no Configuration scope \u2612 parameter \u2610 general \u2612 steps \u2612 stages Resource references none","title":"runCommand"},{"location":"steps/gaugeExecuteTests/#script","text":"The common script environment of the Jenkinsfile running. Typically the reference to the script calling the pipeline step is provided with the this parameter, as in script: this . This allows the function to access the commonPipelineEnvironment for retrieving, e.g. configuration parameters. back to overview Scope Details Aliases - Type Jenkins Script Mandatory yes Default Secret no Configuration scope \u2610 parameter \u2610 general \u2610 steps \u2610 stages Resource references none","title":"script"},{"location":"steps/gaugeExecuteTests/#sidecarenvvars","text":"A map of environment variables to set in the sidecar container, similar to dockerEnvVars . back to overview Scope Details Aliases - Type map[string]string Mandatory no Default Secret no Configuration scope \u2612 parameter \u2612 general \u2612 steps \u2612 stages Resource references none","title":"sidecarEnvVars"},{"location":"steps/gaugeExecuteTests/#sidecarimage","text":"The name of the docker image of the sidecar container. If empty, no sidecar container is started. Similar to dockerImage . back to overview Scope Details Aliases - Type string Mandatory no Default Secret no Configuration scope \u2612 parameter \u2612 general \u2612 steps \u2612 stages Resource references none","title":"sidecarImage"},{"location":"steps/gaugeExecuteTests/#sidecarname","text":"Name of the sidecar container. Similar to dockerName . back to overview Scope Details Aliases - Type string Mandatory no Default Secret no Configuration scope \u2612 parameter \u2612 general \u2612 steps \u2612 stages Resource references none","title":"sidecarName"},{"location":"steps/gaugeExecuteTests/#sidecaroptions","text":"Options to be set when starting the sidecar container. Similar to dockerOptions . back to overview Scope Details Aliases - Type []string Mandatory no Default Secret no Configuration scope \u2612 parameter \u2612 general \u2612 steps \u2612 stages Resource references none","title":"sidecarOptions"},{"location":"steps/gaugeExecuteTests/#sidecarpullimage","text":"Set this to 'false' to bypass a docker image pull. Useful during development process. Allows testing of images which are available in the local registry only. back to overview Scope Details Aliases - Type bool Mandatory no Default false Possible values - true - false Secret no Configuration scope \u2612 parameter \u2612 general \u2612 steps \u2612 stages Resource references none","title":"sidecarPullImage"},{"location":"steps/gaugeExecuteTests/#sidecarreadycommand","text":"Jenkins-specific: Used for proper environment setup. Command executed inside the container which returns exit code 0 when the container is ready to be used. back to overview Scope Details Aliases - Type string Mandatory no Default Secret no Configuration scope \u2612 parameter \u2612 general \u2612 steps \u2612 stages Resource references none","title":"sidecarReadyCommand"},{"location":"steps/gaugeExecuteTests/#sidecarvolumebind","text":"Volumes that should be mounted into the sidecar container. Similar to dockerVolumeBind . back to overview Scope Details Aliases - Type map[string]string Mandatory no Default Secret no Configuration scope \u2612 parameter \u2612 general \u2612 steps \u2612 stages Resource references none","title":"sidecarVolumeBind"},{"location":"steps/gaugeExecuteTests/#sidecarworkspace","text":"Jenkins-specific: Used for proper environment setup. back to overview Scope Details Aliases - Type string Mandatory no Default Secret no Configuration scope \u2612 parameter \u2612 general \u2612 steps \u2612 stages Resource references none","title":"sidecarWorkspace"},{"location":"steps/gaugeExecuteTests/#stashcontent","text":"Jenkins-specific: Used for proper environment setup. Specific stashes that should be considered for the step execution. back to overview Scope Details Aliases - Type []string Mandatory no Default - buildDescriptor - tests Secret no Configuration scope \u2612 parameter \u2612 general \u2612 steps \u2612 stages Resource references none","title":"stashContent"},{"location":"steps/gaugeExecuteTests/#testoptions","text":"Allows to set specific options for the Gauge execution. Details can be found for example in the Gauge Maven plugin documentation back to overview Scope Details Aliases - Type string Mandatory no Default $PIPER_testOptions (if set) Secret no Configuration scope \u2612 parameter \u2610 general \u2612 steps \u2612 stages Resource references none","title":"testOptions"},{"location":"steps/gaugeExecuteTests/#verbose","text":"verbose output back to overview Scope Details Aliases - Type bool Mandatory no Default false Possible values - true - false Secret no Configuration scope \u2612 parameter \u2612 general \u2612 steps \u2612 stages Resource references none","title":"verbose"},{"location":"steps/gaugeExecuteTests/#seleniumhubcredentialsid","text":"Defines the id of the user/password credentials to be used to connect to a Selenium Hub. The credentials are provided in the environment variables PIPER_SELENIUM_HUB_USER and PIPER_SELENIUM_HUB_PASSWORD . back to overview Scope Details Aliases - Type string Configuration scope \u2612 parameter \u2612 general \u2612 steps \u2612 stages We recommend to define values of step parameters via config.yml file .","title":"seleniumHubCredentialsId"},{"location":"steps/gaugeExecuteTests/#example","text":"Pipeline step: gaugeExecuteTests script: this , testServerUrl: 'http://test.url'","title":"Example"},{"location":"steps/gcpPublishEvent/","text":"gcpPublishEvent \u00b6 Publishes an event to GCP using OIDC authentication (beta) Description \u00b6 This step is in beta. Authentication to GCP is handled by an OIDC token received from, for example, Vault. Usage \u00b6 We recommend to define values of step parameters via .pipeline/config.yml file . In this case, calling the step is essentially reduced to defining the step name. Calling the step can be done either in an orchestrator specific way (e.g. via a Jenkins library step) or on the command line. Jenkins Command Line library ( 'piper-lib-os' ) gcpPublishEvent script: this piper gcpPublishEvent Parameters \u00b6 Overview - Step \u00b6 Name Mandatory Additional information script (yes) reference to Jenkins main pipeline script OIDCToken no additionalEventData no eventData no eventSource no eventType no gcpProjectNumber no gcpWorkloadIdentityPool no gcpWorkloadIdentityPoolProvider no topic no vaultNamespace no vaultServerUrl no verbose no activates debug output Overview - Execution Environment \u00b6 Orchestrator-specific only These parameters are relevant for orchestrator usage and not considered when using the command line option. Name Mandatory Additional information Details \u00b6 OIDCToken \u00b6 back to overview Scope Details Aliases - Type string Mandatory no Default $PIPER_OIDCToken (if set) Secret no Configuration scope \u2612 parameter \u2610 general \u2612 steps \u2612 stages Resource references none additionalEventData \u00b6 Data (formatted as JSON string) to add to eventData. This can be used to enrich eventData that comes from the pipeline environment. back to overview Scope Details Aliases - Type string Mandatory no Default $PIPER_additionalEventData (if set) Secret no Configuration scope \u2612 parameter \u2610 general \u2610 steps \u2610 stages Resource references none eventData \u00b6 Data to be merged with the generated data for the cloud event data field (JSON) back to overview Scope Details Aliases - Type string Mandatory no Default $PIPER_eventData (if set) Secret no Configuration scope \u2610 parameter \u2610 general \u2610 steps \u2610 stages Resource references commonPipelineEnvironment : reference to: custom/eventData eventSource \u00b6 The events source as defined by CDEvents. back to overview Scope Details Aliases - Type string Mandatory no Default $PIPER_eventSource (if set) Secret no Configuration scope \u2612 parameter \u2612 general \u2612 steps \u2612 stages Resource references none eventType \u00b6 back to overview Scope Details Aliases - Type string Mandatory no Default $PIPER_eventType (if set) Secret no Configuration scope \u2612 parameter \u2610 general \u2610 steps \u2610 stages Resource references none gcpProjectNumber \u00b6 back to overview Scope Details Aliases - Type string Mandatory no Default $PIPER_gcpProjectNumber (if set) Secret no Configuration scope \u2612 parameter \u2612 general \u2612 steps \u2612 stages Resource references none gcpWorkloadIdentityPool \u00b6 A workload identity pool is an entity that lets you manage external identities. back to overview Scope Details Aliases - Type string Mandatory no Default $PIPER_gcpWorkloadIdentityPool (if set) Secret no Configuration scope \u2612 parameter \u2612 general \u2612 steps \u2612 stages Resource references none gcpWorkloadIdentityPoolProvider \u00b6 A workload identity pool provider is an entity that describes a relationship between Google Cloud and your IdP. back to overview Scope Details Aliases - Type string Mandatory no Default $PIPER_gcpWorkloadIdentityPoolProvider (if set) Secret no Configuration scope \u2612 parameter \u2612 general \u2612 steps \u2612 stages Resource references none script \u00b6 The common script environment of the Jenkinsfile running. Typically the reference to the script calling the pipeline step is provided with the this parameter, as in script: this . This allows the function to access the commonPipelineEnvironment for retrieving, e.g. configuration parameters. back to overview Scope Details Aliases - Type Jenkins Script Mandatory yes Default Secret no Configuration scope \u2610 parameter \u2610 general \u2610 steps \u2610 stages Resource references none topic \u00b6 The pubsub topic to which the message is published. back to overview Scope Details Aliases - Type string Mandatory no Default $PIPER_topic (if set) Secret no Configuration scope \u2612 parameter \u2612 general \u2612 steps \u2612 stages Resource references none vaultNamespace \u00b6 back to overview Scope Details Aliases - Type string Mandatory no Default $PIPER_vaultNamespace (if set) Secret no Configuration scope \u2612 parameter \u2612 general \u2612 steps \u2612 stages Resource references none vaultServerUrl \u00b6 back to overview Scope Details Aliases - Type string Mandatory no Default $PIPER_vaultServerUrl (if set) Secret no Configuration scope \u2612 parameter \u2612 general \u2612 steps \u2612 stages Resource references none verbose \u00b6 verbose output back to overview Scope Details Aliases - Type bool Mandatory no Default false Possible values - true - false Secret no Configuration scope \u2612 parameter \u2612 general \u2612 steps \u2612 stages Resource references none","title":"gcpPublishEvent"},{"location":"steps/gcpPublishEvent/#gcppublishevent","text":"Publishes an event to GCP using OIDC authentication (beta)","title":"gcpPublishEvent"},{"location":"steps/gcpPublishEvent/#description","text":"This step is in beta. Authentication to GCP is handled by an OIDC token received from, for example, Vault.","title":"Description"},{"location":"steps/gcpPublishEvent/#usage","text":"We recommend to define values of step parameters via .pipeline/config.yml file . In this case, calling the step is essentially reduced to defining the step name. Calling the step can be done either in an orchestrator specific way (e.g. via a Jenkins library step) or on the command line. Jenkins Command Line library ( 'piper-lib-os' ) gcpPublishEvent script: this piper gcpPublishEvent","title":"Usage"},{"location":"steps/gcpPublishEvent/#parameters","text":"","title":"Parameters"},{"location":"steps/gcpPublishEvent/#overview-step","text":"Name Mandatory Additional information script (yes) reference to Jenkins main pipeline script OIDCToken no additionalEventData no eventData no eventSource no eventType no gcpProjectNumber no gcpWorkloadIdentityPool no gcpWorkloadIdentityPoolProvider no topic no vaultNamespace no vaultServerUrl no verbose no activates debug output","title":"Overview - Step"},{"location":"steps/gcpPublishEvent/#overview-execution-environment","text":"Orchestrator-specific only These parameters are relevant for orchestrator usage and not considered when using the command line option. Name Mandatory Additional information","title":"Overview - Execution Environment"},{"location":"steps/gcpPublishEvent/#details","text":"","title":"Details"},{"location":"steps/gcpPublishEvent/#oidctoken","text":"back to overview Scope Details Aliases - Type string Mandatory no Default $PIPER_OIDCToken (if set) Secret no Configuration scope \u2612 parameter \u2610 general \u2612 steps \u2612 stages Resource references none","title":"OIDCToken"},{"location":"steps/gcpPublishEvent/#additionaleventdata","text":"Data (formatted as JSON string) to add to eventData. This can be used to enrich eventData that comes from the pipeline environment. back to overview Scope Details Aliases - Type string Mandatory no Default $PIPER_additionalEventData (if set) Secret no Configuration scope \u2612 parameter \u2610 general \u2610 steps \u2610 stages Resource references none","title":"additionalEventData"},{"location":"steps/gcpPublishEvent/#eventdata","text":"Data to be merged with the generated data for the cloud event data field (JSON) back to overview Scope Details Aliases - Type string Mandatory no Default $PIPER_eventData (if set) Secret no Configuration scope \u2610 parameter \u2610 general \u2610 steps \u2610 stages Resource references commonPipelineEnvironment : reference to: custom/eventData","title":"eventData"},{"location":"steps/gcpPublishEvent/#eventsource","text":"The events source as defined by CDEvents. back to overview Scope Details Aliases - Type string Mandatory no Default $PIPER_eventSource (if set) Secret no Configuration scope \u2612 parameter \u2612 general \u2612 steps \u2612 stages Resource references none","title":"eventSource"},{"location":"steps/gcpPublishEvent/#eventtype","text":"back to overview Scope Details Aliases - Type string Mandatory no Default $PIPER_eventType (if set) Secret no Configuration scope \u2612 parameter \u2610 general \u2610 steps \u2610 stages Resource references none","title":"eventType"},{"location":"steps/gcpPublishEvent/#gcpprojectnumber","text":"back to overview Scope Details Aliases - Type string Mandatory no Default $PIPER_gcpProjectNumber (if set) Secret no Configuration scope \u2612 parameter \u2612 general \u2612 steps \u2612 stages Resource references none","title":"gcpProjectNumber"},{"location":"steps/gcpPublishEvent/#gcpworkloadidentitypool","text":"A workload identity pool is an entity that lets you manage external identities. back to overview Scope Details Aliases - Type string Mandatory no Default $PIPER_gcpWorkloadIdentityPool (if set) Secret no Configuration scope \u2612 parameter \u2612 general \u2612 steps \u2612 stages Resource references none","title":"gcpWorkloadIdentityPool"},{"location":"steps/gcpPublishEvent/#gcpworkloadidentitypoolprovider","text":"A workload identity pool provider is an entity that describes a relationship between Google Cloud and your IdP. back to overview Scope Details Aliases - Type string Mandatory no Default $PIPER_gcpWorkloadIdentityPoolProvider (if set) Secret no Configuration scope \u2612 parameter \u2612 general \u2612 steps \u2612 stages Resource references none","title":"gcpWorkloadIdentityPoolProvider"},{"location":"steps/gcpPublishEvent/#script","text":"The common script environment of the Jenkinsfile running. Typically the reference to the script calling the pipeline step is provided with the this parameter, as in script: this . This allows the function to access the commonPipelineEnvironment for retrieving, e.g. configuration parameters. back to overview Scope Details Aliases - Type Jenkins Script Mandatory yes Default Secret no Configuration scope \u2610 parameter \u2610 general \u2610 steps \u2610 stages Resource references none","title":"script"},{"location":"steps/gcpPublishEvent/#topic","text":"The pubsub topic to which the message is published. back to overview Scope Details Aliases - Type string Mandatory no Default $PIPER_topic (if set) Secret no Configuration scope \u2612 parameter \u2612 general \u2612 steps \u2612 stages Resource references none","title":"topic"},{"location":"steps/gcpPublishEvent/#vaultnamespace","text":"back to overview Scope Details Aliases - Type string Mandatory no Default $PIPER_vaultNamespace (if set) Secret no Configuration scope \u2612 parameter \u2612 general \u2612 steps \u2612 stages Resource references none","title":"vaultNamespace"},{"location":"steps/gcpPublishEvent/#vaultserverurl","text":"back to overview Scope Details Aliases - Type string Mandatory no Default $PIPER_vaultServerUrl (if set) Secret no Configuration scope \u2612 parameter \u2612 general \u2612 steps \u2612 stages Resource references none","title":"vaultServerUrl"},{"location":"steps/gcpPublishEvent/#verbose","text":"verbose output back to overview Scope Details Aliases - Type bool Mandatory no Default false Possible values - true - false Secret no Configuration scope \u2612 parameter \u2612 general \u2612 steps \u2612 stages Resource references none","title":"verbose"},{"location":"steps/gctsCloneRepository/","text":"gctsCloneRepository \u00b6 Clones a Git repository Description \u00b6 Clones a Git repository from a remote repository to a local repository on an ABAP system. To be able to execute this step, the corresponding local repository has to exist on the local ABAP system. Usage \u00b6 We recommend to define values of step parameters via .pipeline/config.yml file . In this case, calling the step is essentially reduced to defining the step name. Calling the step can be done either in an orchestrator specific way (e.g. via a Jenkins library step) or on the command line. Jenkins Command Line library ( 'piper-lib-os' ) gctsCloneRepository script: this piper gctsCloneRepository Prerequisites \u00b6 This step clones a remote Git repository to a local repository on an ABAP server. To execute this step, the corresponding local repository must exist on the local ABAP system. More information about the Git-enabled Change and Transport System (gCTS) . Parameters \u00b6 Overview - Step \u00b6 Name Mandatory Additional information client yes host yes password (yes) pass via ENV or Jenkins credentials ( abapCredentialsId ) repository yes script (yes) reference to Jenkins main pipeline script username (yes) pass via ENV or Jenkins credentials ( abapCredentialsId ) queryParameters no skipSSLVerification no verbose no activates debug output Overview - Execution Environment \u00b6 Orchestrator-specific only These parameters are relevant for orchestrator usage and not considered when using the command line option. Name Mandatory Additional information Details \u00b6 client \u00b6 Specifies the client of the ABAP system to be addressed back to overview Scope Details Aliases - Type string Mandatory yes Default $PIPER_client (if set) Secret no Configuration scope \u2612 parameter \u2610 general \u2612 steps \u2612 stages Resource references none host \u00b6 Specifies the protocol and host address, including the port. Please provide in the format <protocol>://<host>:<port> . Supported protocols are http and https . back to overview Scope Details Aliases - Type string Mandatory yes Default $PIPER_host (if set) Secret no Configuration scope \u2612 parameter \u2610 general \u2612 steps \u2612 stages Resource references none password \u00b6 Password to authenticate to the ABAP system back to overview Scope Details Aliases - Type string Mandatory yes Default $PIPER_password (if set) Secret yes Configuration scope \u2612 parameter \u2610 general \u2612 steps \u2612 stages Resource references Jenkins credential id: id: abapCredentialsId reference to: password queryParameters \u00b6 Add query parameters (for API requests) that apply to all endpoints of the step. Provide the parameters as key-value pair map in the format <query parameter>:<value> . back to overview Scope Details Aliases - Type map[string]interface{} Mandatory no Default $PIPER_queryParameters (if set) Secret no Configuration scope \u2612 parameter \u2610 general \u2612 steps \u2612 stages Resource references none repository \u00b6 Specifies the name (ID) of the local repsitory on the ABAP system back to overview Scope Details Aliases - Type string Mandatory yes Default $PIPER_repository (if set) Secret no Configuration scope \u2612 parameter \u2610 general \u2612 steps \u2612 stages Resource references none script \u00b6 The common script environment of the Jenkinsfile running. Typically the reference to the script calling the pipeline step is provided with the this parameter, as in script: this . This allows the function to access the commonPipelineEnvironment for retrieving, e.g. configuration parameters. back to overview Scope Details Aliases - Type Jenkins Script Mandatory yes Default Secret no Configuration scope \u2610 parameter \u2610 general \u2610 steps \u2610 stages Resource references none skipSSLVerification \u00b6 Skip the verification of SSL (Secure Socket Layer) certificates when using HTTPS. This parameter is not recommended for productive environments. back to overview Scope Details Aliases - Type bool Mandatory no Default false Possible values - true - false Secret no Configuration scope \u2612 parameter \u2610 general \u2612 steps \u2612 stages Resource references none username \u00b6 User to authenticate to the ABAP system back to overview Scope Details Aliases - Type string Mandatory yes Default $PIPER_username (if set) Secret yes Configuration scope \u2612 parameter \u2610 general \u2612 steps \u2612 stages Resource references Jenkins credential id: id: abapCredentialsId reference to: username verbose \u00b6 verbose output back to overview Scope Details Aliases - Type bool Mandatory no Default false Possible values - true - false Secret no Configuration scope \u2612 parameter \u2612 general \u2612 steps \u2612 stages Resource references none abapCredentialsId \u00b6 Jenkins credentials ID containing username and password for authentication to the ABAP system on which you want to clone the repository back to overview Scope Details Aliases - Type string Configuration scope \u2612 parameter \u2612 general \u2612 steps \u2612 stages Example \u00b6 Example configuration for the use in a Jenkinsfile . gctsCloneRepository ( script: this , host: 'https://abap.server.com:port' , client: '000' , abapCredentialsId: 'ABAPUserPasswordCredentialsId' , repository: 'myrepo' ) Example for the use in a YAML configuration file (such as .pipeline/config.yaml ). steps : <...> gctsCloneRepository : host : 'https://abap.server.com:port' client : '000' abapCredentialsId : 'ABAPUserPasswordCredentialsId' repository : 'myrepo'","title":"gctsCloneRepository"},{"location":"steps/gctsCloneRepository/#gctsclonerepository","text":"Clones a Git repository","title":"gctsCloneRepository"},{"location":"steps/gctsCloneRepository/#description","text":"Clones a Git repository from a remote repository to a local repository on an ABAP system. To be able to execute this step, the corresponding local repository has to exist on the local ABAP system.","title":"Description"},{"location":"steps/gctsCloneRepository/#usage","text":"We recommend to define values of step parameters via .pipeline/config.yml file . In this case, calling the step is essentially reduced to defining the step name. Calling the step can be done either in an orchestrator specific way (e.g. via a Jenkins library step) or on the command line. Jenkins Command Line library ( 'piper-lib-os' ) gctsCloneRepository script: this piper gctsCloneRepository","title":"Usage"},{"location":"steps/gctsCloneRepository/#prerequisites","text":"This step clones a remote Git repository to a local repository on an ABAP server. To execute this step, the corresponding local repository must exist on the local ABAP system. More information about the Git-enabled Change and Transport System (gCTS) .","title":"Prerequisites"},{"location":"steps/gctsCloneRepository/#parameters","text":"","title":"Parameters"},{"location":"steps/gctsCloneRepository/#overview-step","text":"Name Mandatory Additional information client yes host yes password (yes) pass via ENV or Jenkins credentials ( abapCredentialsId ) repository yes script (yes) reference to Jenkins main pipeline script username (yes) pass via ENV or Jenkins credentials ( abapCredentialsId ) queryParameters no skipSSLVerification no verbose no activates debug output","title":"Overview - Step"},{"location":"steps/gctsCloneRepository/#overview-execution-environment","text":"Orchestrator-specific only These parameters are relevant for orchestrator usage and not considered when using the command line option. Name Mandatory Additional information","title":"Overview - Execution Environment"},{"location":"steps/gctsCloneRepository/#details","text":"","title":"Details"},{"location":"steps/gctsCloneRepository/#client","text":"Specifies the client of the ABAP system to be addressed back to overview Scope Details Aliases - Type string Mandatory yes Default $PIPER_client (if set) Secret no Configuration scope \u2612 parameter \u2610 general \u2612 steps \u2612 stages Resource references none","title":"client"},{"location":"steps/gctsCloneRepository/#host","text":"Specifies the protocol and host address, including the port. Please provide in the format <protocol>://<host>:<port> . Supported protocols are http and https . back to overview Scope Details Aliases - Type string Mandatory yes Default $PIPER_host (if set) Secret no Configuration scope \u2612 parameter \u2610 general \u2612 steps \u2612 stages Resource references none","title":"host"},{"location":"steps/gctsCloneRepository/#password","text":"Password to authenticate to the ABAP system back to overview Scope Details Aliases - Type string Mandatory yes Default $PIPER_password (if set) Secret yes Configuration scope \u2612 parameter \u2610 general \u2612 steps \u2612 stages Resource references Jenkins credential id: id: abapCredentialsId reference to: password","title":"password"},{"location":"steps/gctsCloneRepository/#queryparameters","text":"Add query parameters (for API requests) that apply to all endpoints of the step. Provide the parameters as key-value pair map in the format <query parameter>:<value> . back to overview Scope Details Aliases - Type map[string]interface{} Mandatory no Default $PIPER_queryParameters (if set) Secret no Configuration scope \u2612 parameter \u2610 general \u2612 steps \u2612 stages Resource references none","title":"queryParameters"},{"location":"steps/gctsCloneRepository/#repository","text":"Specifies the name (ID) of the local repsitory on the ABAP system back to overview Scope Details Aliases - Type string Mandatory yes Default $PIPER_repository (if set) Secret no Configuration scope \u2612 parameter \u2610 general \u2612 steps \u2612 stages Resource references none","title":"repository"},{"location":"steps/gctsCloneRepository/#script","text":"The common script environment of the Jenkinsfile running. Typically the reference to the script calling the pipeline step is provided with the this parameter, as in script: this . This allows the function to access the commonPipelineEnvironment for retrieving, e.g. configuration parameters. back to overview Scope Details Aliases - Type Jenkins Script Mandatory yes Default Secret no Configuration scope \u2610 parameter \u2610 general \u2610 steps \u2610 stages Resource references none","title":"script"},{"location":"steps/gctsCloneRepository/#skipsslverification","text":"Skip the verification of SSL (Secure Socket Layer) certificates when using HTTPS. This parameter is not recommended for productive environments. back to overview Scope Details Aliases - Type bool Mandatory no Default false Possible values - true - false Secret no Configuration scope \u2612 parameter \u2610 general \u2612 steps \u2612 stages Resource references none","title":"skipSSLVerification"},{"location":"steps/gctsCloneRepository/#username","text":"User to authenticate to the ABAP system back to overview Scope Details Aliases - Type string Mandatory yes Default $PIPER_username (if set) Secret yes Configuration scope \u2612 parameter \u2610 general \u2612 steps \u2612 stages Resource references Jenkins credential id: id: abapCredentialsId reference to: username","title":"username"},{"location":"steps/gctsCloneRepository/#verbose","text":"verbose output back to overview Scope Details Aliases - Type bool Mandatory no Default false Possible values - true - false Secret no Configuration scope \u2612 parameter \u2612 general \u2612 steps \u2612 stages Resource references none","title":"verbose"},{"location":"steps/gctsCloneRepository/#abapcredentialsid","text":"Jenkins credentials ID containing username and password for authentication to the ABAP system on which you want to clone the repository back to overview Scope Details Aliases - Type string Configuration scope \u2612 parameter \u2612 general \u2612 steps \u2612 stages","title":"abapCredentialsId"},{"location":"steps/gctsCloneRepository/#example","text":"Example configuration for the use in a Jenkinsfile . gctsCloneRepository ( script: this , host: 'https://abap.server.com:port' , client: '000' , abapCredentialsId: 'ABAPUserPasswordCredentialsId' , repository: 'myrepo' ) Example for the use in a YAML configuration file (such as .pipeline/config.yaml ). steps : <...> gctsCloneRepository : host : 'https://abap.server.com:port' client : '000' abapCredentialsId : 'ABAPUserPasswordCredentialsId' repository : 'myrepo'","title":"Example"},{"location":"steps/gctsCreateRepository/","text":"gctsCreateRepository \u00b6 Creates a Git repository on an ABAP system Description \u00b6 Creates a local Git repository on an ABAP system if it does not already exist. Usage \u00b6 We recommend to define values of step parameters via .pipeline/config.yml file . In this case, calling the step is essentially reduced to defining the step name. Calling the step can be done either in an orchestrator specific way (e.g. via a Jenkins library step) or on the command line. Jenkins Command Line library ( 'piper-lib-os' ) gctsCreateRepository script: this piper gctsCreateRepository Prerequisites \u00b6 This step creates a local Git repository on an ABAP server. More information about the Git-enabled Change and Transport System (gCTS) . Parameters \u00b6 Overview - Step \u00b6 Name Mandatory Additional information client yes host yes password (yes) pass via ENV or Jenkins credentials ( abapCredentialsId ) repository yes script (yes) reference to Jenkins main pipeline script username (yes) pass via ENV or Jenkins credentials ( abapCredentialsId ) queryParameters no remoteRepositoryURL no role no skipSSLVerification no type no vSID no verbose no activates debug output Overview - Execution Environment \u00b6 Orchestrator-specific only These parameters are relevant for orchestrator usage and not considered when using the command line option. Name Mandatory Additional information Details \u00b6 client \u00b6 Specifies the client of the ABAP system to be addressed back to overview Scope Details Aliases - Type string Mandatory yes Default $PIPER_client (if set) Secret no Configuration scope \u2612 parameter \u2610 general \u2612 steps \u2612 stages Resource references none host \u00b6 Specifies the protocol and host address, including the port. Please provide in the format <protocol>://<host>:<port> . Supported protocols are http and https . back to overview Scope Details Aliases - Type string Mandatory yes Default $PIPER_host (if set) Secret no Configuration scope \u2612 parameter \u2610 general \u2612 steps \u2612 stages Resource references none password \u00b6 Password to authenticate to the ABAP system back to overview Scope Details Aliases - Type string Mandatory yes Default $PIPER_password (if set) Secret yes Configuration scope \u2612 parameter \u2610 general \u2612 steps \u2612 stages Resource references Jenkins credential id: id: abapCredentialsId reference to: password queryParameters \u00b6 Add query parameters (for API requests) that apply to all endpoints of the step. Provide the parameters as key-value pair map in the format <query parameter>:<value> . back to overview Scope Details Aliases - Type map[string]interface{} Mandatory no Default $PIPER_queryParameters (if set) Secret no Configuration scope \u2612 parameter \u2610 general \u2612 steps \u2612 stages Resource references none remoteRepositoryURL \u00b6 URL of the corresponding remote repository back to overview Scope Details Aliases - Type string Mandatory no Default $PIPER_remoteRepositoryURL (if set) Secret no Configuration scope \u2612 parameter \u2610 general \u2612 steps \u2612 stages Resource references none repository \u00b6 Specifies the name (ID) of the local repository on the ABAP system back to overview Scope Details Aliases - Type string Mandatory yes Default $PIPER_repository (if set) Secret no Configuration scope \u2612 parameter \u2610 general \u2612 steps \u2612 stages Resource references none role \u00b6 Role of the local repository. Choose between 'TARGET' and 'SOURCE'. Local repositories with a TARGET role will NOT be able to be the source of code changes back to overview Scope Details Aliases - Type string Mandatory no Default SOURCE Possible values - SOURCE - TARGET Secret no Configuration scope \u2612 parameter \u2610 general \u2612 steps \u2612 stages Resource references none script \u00b6 The common script environment of the Jenkinsfile running. Typically the reference to the script calling the pipeline step is provided with the this parameter, as in script: this . This allows the function to access the commonPipelineEnvironment for retrieving, e.g. configuration parameters. back to overview Scope Details Aliases - Type Jenkins Script Mandatory yes Default Secret no Configuration scope \u2610 parameter \u2610 general \u2610 steps \u2610 stages Resource references none skipSSLVerification \u00b6 Skip the verification of SSL (Secure Socket Layer) certificates when using HTTPS. This parameter is not recommended for productive environments. back to overview Scope Details Aliases - Type bool Mandatory no Default false Possible values - true - false Secret no Configuration scope \u2612 parameter \u2610 general \u2612 steps \u2612 stages Resource references none type \u00b6 Type of the used source code management tool back to overview Scope Details Aliases - Type string Mandatory no Default GIT Possible values - GIT Secret no Configuration scope \u2612 parameter \u2610 general \u2612 steps \u2612 stages Resource references none username \u00b6 Username to authenticate to the ABAP system back to overview Scope Details Aliases - Type string Mandatory yes Default $PIPER_username (if set) Secret yes Configuration scope \u2612 parameter \u2610 general \u2612 steps \u2612 stages Resource references Jenkins credential id: id: abapCredentialsId reference to: username vSID \u00b6 Virtual SID of the local repository. The vSID corresponds to the transport route that delivers content to the remote Git repository back to overview Scope Details Aliases - Type string Mandatory no Default $PIPER_vSID (if set) Secret no Configuration scope \u2612 parameter \u2610 general \u2612 steps \u2612 stages Resource references none verbose \u00b6 verbose output back to overview Scope Details Aliases - Type bool Mandatory no Default false Possible values - true - false Secret no Configuration scope \u2612 parameter \u2612 general \u2612 steps \u2612 stages Resource references none abapCredentialsId \u00b6 Jenkins credentials ID containing username and password for authentication to the ABAP system on which you want to create the repository back to overview Scope Details Aliases - Type string Configuration scope \u2612 parameter \u2612 general \u2612 steps \u2612 stages Example \u00b6 Example configuration for the use in a Jenkinsfile . gctsCreateRepository ( script: this , host: 'https://abap.server.com:port' , client: '000' , abapCredentialsId: 'ABAPUserPasswordCredentialsId' , repository: 'myrepo' , remoteRepositoryURL: 'https://github.com/user/myrepo' , role: 'SOURCE' , vSID: 'ABC' ) Example for the use in a YAML configuration file (such as .pipeline/config.yaml ). steps : <...> gctsCreateRepository : host : 'https://abap.server.com:port' client : '000' abapCredentialsId : 'ABAPUserPasswordCredentialsId' repository : 'myrepo' remoteRepositoryURL : 'https://github.com/user/myrepo' role : 'SOURCE' vSID : 'ABC'","title":"gctsCreateRepository"},{"location":"steps/gctsCreateRepository/#gctscreaterepository","text":"Creates a Git repository on an ABAP system","title":"gctsCreateRepository"},{"location":"steps/gctsCreateRepository/#description","text":"Creates a local Git repository on an ABAP system if it does not already exist.","title":"Description"},{"location":"steps/gctsCreateRepository/#usage","text":"We recommend to define values of step parameters via .pipeline/config.yml file . In this case, calling the step is essentially reduced to defining the step name. Calling the step can be done either in an orchestrator specific way (e.g. via a Jenkins library step) or on the command line. Jenkins Command Line library ( 'piper-lib-os' ) gctsCreateRepository script: this piper gctsCreateRepository","title":"Usage"},{"location":"steps/gctsCreateRepository/#prerequisites","text":"This step creates a local Git repository on an ABAP server. More information about the Git-enabled Change and Transport System (gCTS) .","title":"Prerequisites"},{"location":"steps/gctsCreateRepository/#parameters","text":"","title":"Parameters"},{"location":"steps/gctsCreateRepository/#overview-step","text":"Name Mandatory Additional information client yes host yes password (yes) pass via ENV or Jenkins credentials ( abapCredentialsId ) repository yes script (yes) reference to Jenkins main pipeline script username (yes) pass via ENV or Jenkins credentials ( abapCredentialsId ) queryParameters no remoteRepositoryURL no role no skipSSLVerification no type no vSID no verbose no activates debug output","title":"Overview - Step"},{"location":"steps/gctsCreateRepository/#overview-execution-environment","text":"Orchestrator-specific only These parameters are relevant for orchestrator usage and not considered when using the command line option. Name Mandatory Additional information","title":"Overview - Execution Environment"},{"location":"steps/gctsCreateRepository/#details","text":"","title":"Details"},{"location":"steps/gctsCreateRepository/#client","text":"Specifies the client of the ABAP system to be addressed back to overview Scope Details Aliases - Type string Mandatory yes Default $PIPER_client (if set) Secret no Configuration scope \u2612 parameter \u2610 general \u2612 steps \u2612 stages Resource references none","title":"client"},{"location":"steps/gctsCreateRepository/#host","text":"Specifies the protocol and host address, including the port. Please provide in the format <protocol>://<host>:<port> . Supported protocols are http and https . back to overview Scope Details Aliases - Type string Mandatory yes Default $PIPER_host (if set) Secret no Configuration scope \u2612 parameter \u2610 general \u2612 steps \u2612 stages Resource references none","title":"host"},{"location":"steps/gctsCreateRepository/#password","text":"Password to authenticate to the ABAP system back to overview Scope Details Aliases - Type string Mandatory yes Default $PIPER_password (if set) Secret yes Configuration scope \u2612 parameter \u2610 general \u2612 steps \u2612 stages Resource references Jenkins credential id: id: abapCredentialsId reference to: password","title":"password"},{"location":"steps/gctsCreateRepository/#queryparameters","text":"Add query parameters (for API requests) that apply to all endpoints of the step. Provide the parameters as key-value pair map in the format <query parameter>:<value> . back to overview Scope Details Aliases - Type map[string]interface{} Mandatory no Default $PIPER_queryParameters (if set) Secret no Configuration scope \u2612 parameter \u2610 general \u2612 steps \u2612 stages Resource references none","title":"queryParameters"},{"location":"steps/gctsCreateRepository/#remoterepositoryurl","text":"URL of the corresponding remote repository back to overview Scope Details Aliases - Type string Mandatory no Default $PIPER_remoteRepositoryURL (if set) Secret no Configuration scope \u2612 parameter \u2610 general \u2612 steps \u2612 stages Resource references none","title":"remoteRepositoryURL"},{"location":"steps/gctsCreateRepository/#repository","text":"Specifies the name (ID) of the local repository on the ABAP system back to overview Scope Details Aliases - Type string Mandatory yes Default $PIPER_repository (if set) Secret no Configuration scope \u2612 parameter \u2610 general \u2612 steps \u2612 stages Resource references none","title":"repository"},{"location":"steps/gctsCreateRepository/#role","text":"Role of the local repository. Choose between 'TARGET' and 'SOURCE'. Local repositories with a TARGET role will NOT be able to be the source of code changes back to overview Scope Details Aliases - Type string Mandatory no Default SOURCE Possible values - SOURCE - TARGET Secret no Configuration scope \u2612 parameter \u2610 general \u2612 steps \u2612 stages Resource references none","title":"role"},{"location":"steps/gctsCreateRepository/#script","text":"The common script environment of the Jenkinsfile running. Typically the reference to the script calling the pipeline step is provided with the this parameter, as in script: this . This allows the function to access the commonPipelineEnvironment for retrieving, e.g. configuration parameters. back to overview Scope Details Aliases - Type Jenkins Script Mandatory yes Default Secret no Configuration scope \u2610 parameter \u2610 general \u2610 steps \u2610 stages Resource references none","title":"script"},{"location":"steps/gctsCreateRepository/#skipsslverification","text":"Skip the verification of SSL (Secure Socket Layer) certificates when using HTTPS. This parameter is not recommended for productive environments. back to overview Scope Details Aliases - Type bool Mandatory no Default false Possible values - true - false Secret no Configuration scope \u2612 parameter \u2610 general \u2612 steps \u2612 stages Resource references none","title":"skipSSLVerification"},{"location":"steps/gctsCreateRepository/#type","text":"Type of the used source code management tool back to overview Scope Details Aliases - Type string Mandatory no Default GIT Possible values - GIT Secret no Configuration scope \u2612 parameter \u2610 general \u2612 steps \u2612 stages Resource references none","title":"type"},{"location":"steps/gctsCreateRepository/#username","text":"Username to authenticate to the ABAP system back to overview Scope Details Aliases - Type string Mandatory yes Default $PIPER_username (if set) Secret yes Configuration scope \u2612 parameter \u2610 general \u2612 steps \u2612 stages Resource references Jenkins credential id: id: abapCredentialsId reference to: username","title":"username"},{"location":"steps/gctsCreateRepository/#vsid","text":"Virtual SID of the local repository. The vSID corresponds to the transport route that delivers content to the remote Git repository back to overview Scope Details Aliases - Type string Mandatory no Default $PIPER_vSID (if set) Secret no Configuration scope \u2612 parameter \u2610 general \u2612 steps \u2612 stages Resource references none","title":"vSID"},{"location":"steps/gctsCreateRepository/#verbose","text":"verbose output back to overview Scope Details Aliases - Type bool Mandatory no Default false Possible values - true - false Secret no Configuration scope \u2612 parameter \u2612 general \u2612 steps \u2612 stages Resource references none","title":"verbose"},{"location":"steps/gctsCreateRepository/#abapcredentialsid","text":"Jenkins credentials ID containing username and password for authentication to the ABAP system on which you want to create the repository back to overview Scope Details Aliases - Type string Configuration scope \u2612 parameter \u2612 general \u2612 steps \u2612 stages","title":"abapCredentialsId"},{"location":"steps/gctsCreateRepository/#example","text":"Example configuration for the use in a Jenkinsfile . gctsCreateRepository ( script: this , host: 'https://abap.server.com:port' , client: '000' , abapCredentialsId: 'ABAPUserPasswordCredentialsId' , repository: 'myrepo' , remoteRepositoryURL: 'https://github.com/user/myrepo' , role: 'SOURCE' , vSID: 'ABC' ) Example for the use in a YAML configuration file (such as .pipeline/config.yaml ). steps : <...> gctsCreateRepository : host : 'https://abap.server.com:port' client : '000' abapCredentialsId : 'ABAPUserPasswordCredentialsId' repository : 'myrepo' remoteRepositoryURL : 'https://github.com/user/myrepo' role : 'SOURCE' vSID : 'ABC'","title":"Example"},{"location":"steps/gctsDeploy/","text":"gctsDeploy \u00b6 Deploys a Git repository to a local repository and then to an ABAP system Description \u00b6 This step deploys a remote Git repository to a local repository on an ABAP system and imports the content in the ABAP database. If the repository does not yet exist in the system, this step also creates it. If the repository already exists on the ABAP system, this step executes the remaining actions of the step, depending on the parameters provided for the step. These actions include, for example, deploy a specific commit of the default branch or roll back to the previous commit, if import errors occur . You can use this step for gCTS as of SAP S/4HANA 2020. Usage \u00b6 We recommend to define values of step parameters via .pipeline/config.yml file . In this case, calling the step is essentially reduced to defining the step name. Calling the step can be done either in an orchestrator specific way (e.g. via a Jenkins library step) or on the command line. Jenkins Command Line library ( 'piper-lib-os' ) gctsDeploy script: this piper gctsDeploy Prerequisites \u00b6 If you provide a commit ID , the step deploys the content of the specified commit to the ABAP system. If you provide a branch , the step deploys the content of the specified branch. If you set the rollback parameter to true , the step returns to a working state of the repository, if the deployment of the specified commit or branch fails. More information about the Git-enabled Change and Transport System (gCTS) . Parameters \u00b6 Overview - Step \u00b6 Name Mandatory Additional information client yes host yes password (yes) pass via ENV or Jenkins credentials ( abapCredentialsId ) remoteRepositoryURL yes repository yes script (yes) reference to Jenkins main pipeline script username (yes) pass via ENV or Jenkins credentials ( abapCredentialsId ) branch no commit no configuration no queryParameters no role no rollback no scope no skipSSLVerification no type no vSID no verbose no activates debug output Overview - Execution Environment \u00b6 Orchestrator-specific only These parameters are relevant for orchestrator usage and not considered when using the command line option. Name Mandatory Additional information Details \u00b6 branch \u00b6 Name of a branch, if you want to deploy the content of a specific branch to the ABAP system. back to overview Scope Details Aliases - Type string Mandatory no Default $PIPER_branch (if set) Secret no Configuration scope \u2612 parameter \u2610 general \u2612 steps \u2612 stages Resource references none client \u00b6 Client of the ABAP system to which you want to deploy the repository back to overview Scope Details Aliases - Type string Mandatory yes Default $PIPER_client (if set) Secret no Configuration scope \u2612 parameter \u2610 general \u2612 steps \u2612 stages Resource references none commit \u00b6 ID of a specific commit, if you want to deploy the content of the specified commit. back to overview Scope Details Aliases - Type string Mandatory no Default $PIPER_commit (if set) Secret no Configuration scope \u2612 parameter \u2610 general \u2612 steps \u2612 stages Resource references none configuration \u00b6 Configuration parameters for the repository. Provide the parameters as a key-value pair map in the following format: <configuration parameter> : <Value> . For a list of available configuration parameters, see Configuration Parameters for Repositories . back to overview Scope Details Aliases gctsRepositoryConfigurations Type map[string]interface{} Mandatory no Default $PIPER_configuration (if set) Secret no Configuration scope \u2612 parameter \u2612 general \u2612 steps \u2612 stages Resource references none host \u00b6 Protocol and host of the ABAP system, including the port. Please provide in the format <protocol>://<host>:<port> . Supported protocols are http and https . back to overview Scope Details Aliases - Type string Mandatory yes Default $PIPER_host (if set) Secret no Configuration scope \u2612 parameter \u2610 general \u2612 steps \u2612 stages Resource references none password \u00b6 Password of the ABAP user that authenticates to the ABAP system. Note - Don\u00b4t provide this parameter directly. Either set it in the environment, or in the Jenkins credentials store, and provide the ID as value of the abapCredentialsId parameter. back to overview Scope Details Aliases - Type string Mandatory yes Default $PIPER_password (if set) Secret yes Configuration scope \u2612 parameter \u2610 general \u2612 steps \u2612 stages Resource references Jenkins credential id: id: abapCredentialsId reference to: password queryParameters \u00b6 Add query parameters (for API requests) that apply to all endpoints of the step. Provide the parameters as key-value pair map in the format <query parameter>:<value> . back to overview Scope Details Aliases - Type map[string]interface{} Mandatory no Default $PIPER_queryParameters (if set) Secret no Configuration scope \u2612 parameter \u2610 general \u2612 steps \u2612 stages Resource references none remoteRepositoryURL \u00b6 URL of the remote repository back to overview Scope Details Aliases - Type string Mandatory yes Default $PIPER_remoteRepositoryURL (if set) Secret no Configuration scope \u2612 parameter \u2610 general \u2612 steps \u2612 stages Resource references none repository \u00b6 Specifies the name (ID) of the local repsitory on the ABAP system back to overview Scope Details Aliases - Type string Mandatory yes Default $PIPER_repository (if set) Secret no Configuration scope \u2612 parameter \u2610 general \u2612 steps \u2612 stages Resource references none role \u00b6 Role of the local repository. Possible values are SOURCE (for repositories on development systems - Default) and TARGET (for repositories on target systems). Local repositories with a TARGET role cannot be the source of code changes. back to overview Scope Details Aliases - Type string Mandatory no Default SOURCE Possible values - SOURCE - TARGET Secret no Configuration scope \u2612 parameter \u2610 general \u2612 steps \u2612 stages Resource references none rollback \u00b6 Indication whether you want to roll back to the last working state of the repository, if any of the step actions switch branch or pull commit fail. back to overview Scope Details Aliases - Type bool Mandatory no Default false Possible values - true - false Secret no Configuration scope \u2612 parameter \u2610 general \u2612 steps \u2612 stages Resource references none scope \u00b6 Scope of objects to be deployed (imported). Only use this parameter for specific use cases, for example, when import errors occurred. Possible values are CRNTCOMMIT (current commit of the local repository) and LASTACTION (last action that occurred in the local repository). The CRNTCOMMIT option deploys the complete list of objects that existed in the local repository at the point in time when the commit was created. Note that this deploy scope doesn't only comprise the changed objects of the commit itself. LASTACTION only deploys the object difference between the From Commit and the To Commit of the last action in the repository. back to overview Scope Details Aliases - Type string Mandatory no Default $PIPER_scope (if set) Secret no Configuration scope \u2612 parameter \u2610 general \u2612 steps \u2612 stages Resource references none script \u00b6 The common script environment of the Jenkinsfile running. Typically the reference to the script calling the pipeline step is provided with the this parameter, as in script: this . This allows the function to access the commonPipelineEnvironment for retrieving, e.g. configuration parameters. back to overview Scope Details Aliases - Type Jenkins Script Mandatory yes Default Secret no Configuration scope \u2610 parameter \u2610 general \u2610 steps \u2610 stages Resource references none skipSSLVerification \u00b6 Skip the verification of SSL (Secure Socket Layer) certificates when using HTTPS. This parameter is not recommended for productive environments. back to overview Scope Details Aliases - Type bool Mandatory no Default false Possible values - true - false Secret no Configuration scope \u2612 parameter \u2610 general \u2612 steps \u2612 stages Resource references none type \u00b6 Type of the used source code management tool back to overview Scope Details Aliases - Type string Mandatory no Default GIT Possible values - GIT - GITHUB - GITLAB Secret no Configuration scope \u2612 parameter \u2610 general \u2612 steps \u2612 stages Resource references none username \u00b6 User that authenticates to the ABAP system. Note - Don't provide this parameter directly. Either set it in the environment, or in the Jenkins credentials store, and provide the ID as value of the abapCredentialsId parameter. back to overview Scope Details Aliases - Type string Mandatory yes Default $PIPER_username (if set) Secret yes Configuration scope \u2612 parameter \u2610 general \u2612 steps \u2612 stages Resource references Jenkins credential id: id: abapCredentialsId reference to: username vSID \u00b6 Virtual SID of the local repository. The vSID corresponds to the transport route that delivers content to the remote Git repository. For more information, see Background Information - vSID on SAP Help Portal. back to overview Scope Details Aliases - Type string Mandatory no Default $PIPER_vSID (if set) Secret no Configuration scope \u2612 parameter \u2610 general \u2612 steps \u2612 stages Resource references none verbose \u00b6 verbose output back to overview Scope Details Aliases - Type bool Mandatory no Default false Possible values - true - false Secret no Configuration scope \u2612 parameter \u2612 general \u2612 steps \u2612 stages Resource references none abapCredentialsId \u00b6 ID taken from the Jenkins credentials store containing the user name and password of the user that authenticates to the ABAP system. back to overview Scope Details Aliases - Type string Configuration scope \u2612 parameter \u2612 general \u2612 steps \u2612 stages Example \u00b6 Example configuration for the use in a Jenkinsfile . gctsDeploy ( script: this , host: 'https://abap.server.com:port' , client: '000' , abapCredentialsId: 'ABAPUserPasswordCredentialsId' , repository: 'myrepo' , remoteRepositoryURL: \"https://remote.repository.url.com\" , role: 'SOURCE' , vSID: 'ABC' , branch: 'feature1' , commit: '95952ec' , scope: 'LASTACTION' , rollback: true , configuration: [ VCS_AUTOMATIC_PULL: 'FALSE' , VCS_AUTOMATIC_PUSH: 'FALSE' , CLIENT_VCS_LOGLVL: 'debug' ], queryparameters: [ saml2: 'disabled' ] ) Example for the use in a YAML configuration file (such as .pipeline/config.yaml ). steps : <...> gctsDeploy : host : 'https://abap.server.com:port' client : '000' abapCredentialsId : 'ABAPUserPasswordCredentialsId' repository : 'myrepo' remoteRepositoryURL : \"https://remote.repository.url.com\" role : 'SOURCE' vSID : 'ABC' branch : 'feature2' commit : '0c9d330' scope : 'CRNTCOMMIT' rollback : false configuration : VCS_AUTOMATIC_PULL : \"FALSE\" VCS_AUTOMATIC_PUSH : \"FALSE\" CLIENT_VCS_LOGLVL : \"debug\" queryparameters : saml2 : \"disabled\"","title":"gctsDeploy"},{"location":"steps/gctsDeploy/#gctsdeploy","text":"Deploys a Git repository to a local repository and then to an ABAP system","title":"gctsDeploy"},{"location":"steps/gctsDeploy/#description","text":"This step deploys a remote Git repository to a local repository on an ABAP system and imports the content in the ABAP database. If the repository does not yet exist in the system, this step also creates it. If the repository already exists on the ABAP system, this step executes the remaining actions of the step, depending on the parameters provided for the step. These actions include, for example, deploy a specific commit of the default branch or roll back to the previous commit, if import errors occur . You can use this step for gCTS as of SAP S/4HANA 2020.","title":"Description"},{"location":"steps/gctsDeploy/#usage","text":"We recommend to define values of step parameters via .pipeline/config.yml file . In this case, calling the step is essentially reduced to defining the step name. Calling the step can be done either in an orchestrator specific way (e.g. via a Jenkins library step) or on the command line. Jenkins Command Line library ( 'piper-lib-os' ) gctsDeploy script: this piper gctsDeploy","title":"Usage"},{"location":"steps/gctsDeploy/#prerequisites","text":"If you provide a commit ID , the step deploys the content of the specified commit to the ABAP system. If you provide a branch , the step deploys the content of the specified branch. If you set the rollback parameter to true , the step returns to a working state of the repository, if the deployment of the specified commit or branch fails. More information about the Git-enabled Change and Transport System (gCTS) .","title":"Prerequisites"},{"location":"steps/gctsDeploy/#parameters","text":"","title":"Parameters"},{"location":"steps/gctsDeploy/#overview-step","text":"Name Mandatory Additional information client yes host yes password (yes) pass via ENV or Jenkins credentials ( abapCredentialsId ) remoteRepositoryURL yes repository yes script (yes) reference to Jenkins main pipeline script username (yes) pass via ENV or Jenkins credentials ( abapCredentialsId ) branch no commit no configuration no queryParameters no role no rollback no scope no skipSSLVerification no type no vSID no verbose no activates debug output","title":"Overview - Step"},{"location":"steps/gctsDeploy/#overview-execution-environment","text":"Orchestrator-specific only These parameters are relevant for orchestrator usage and not considered when using the command line option. Name Mandatory Additional information","title":"Overview - Execution Environment"},{"location":"steps/gctsDeploy/#details","text":"","title":"Details"},{"location":"steps/gctsDeploy/#branch","text":"Name of a branch, if you want to deploy the content of a specific branch to the ABAP system. back to overview Scope Details Aliases - Type string Mandatory no Default $PIPER_branch (if set) Secret no Configuration scope \u2612 parameter \u2610 general \u2612 steps \u2612 stages Resource references none","title":"branch"},{"location":"steps/gctsDeploy/#client","text":"Client of the ABAP system to which you want to deploy the repository back to overview Scope Details Aliases - Type string Mandatory yes Default $PIPER_client (if set) Secret no Configuration scope \u2612 parameter \u2610 general \u2612 steps \u2612 stages Resource references none","title":"client"},{"location":"steps/gctsDeploy/#commit","text":"ID of a specific commit, if you want to deploy the content of the specified commit. back to overview Scope Details Aliases - Type string Mandatory no Default $PIPER_commit (if set) Secret no Configuration scope \u2612 parameter \u2610 general \u2612 steps \u2612 stages Resource references none","title":"commit"},{"location":"steps/gctsDeploy/#configuration","text":"Configuration parameters for the repository. Provide the parameters as a key-value pair map in the following format: <configuration parameter> : <Value> . For a list of available configuration parameters, see Configuration Parameters for Repositories . back to overview Scope Details Aliases gctsRepositoryConfigurations Type map[string]interface{} Mandatory no Default $PIPER_configuration (if set) Secret no Configuration scope \u2612 parameter \u2612 general \u2612 steps \u2612 stages Resource references none","title":"configuration"},{"location":"steps/gctsDeploy/#host","text":"Protocol and host of the ABAP system, including the port. Please provide in the format <protocol>://<host>:<port> . Supported protocols are http and https . back to overview Scope Details Aliases - Type string Mandatory yes Default $PIPER_host (if set) Secret no Configuration scope \u2612 parameter \u2610 general \u2612 steps \u2612 stages Resource references none","title":"host"},{"location":"steps/gctsDeploy/#password","text":"Password of the ABAP user that authenticates to the ABAP system. Note - Don\u00b4t provide this parameter directly. Either set it in the environment, or in the Jenkins credentials store, and provide the ID as value of the abapCredentialsId parameter. back to overview Scope Details Aliases - Type string Mandatory yes Default $PIPER_password (if set) Secret yes Configuration scope \u2612 parameter \u2610 general \u2612 steps \u2612 stages Resource references Jenkins credential id: id: abapCredentialsId reference to: password","title":"password"},{"location":"steps/gctsDeploy/#queryparameters","text":"Add query parameters (for API requests) that apply to all endpoints of the step. Provide the parameters as key-value pair map in the format <query parameter>:<value> . back to overview Scope Details Aliases - Type map[string]interface{} Mandatory no Default $PIPER_queryParameters (if set) Secret no Configuration scope \u2612 parameter \u2610 general \u2612 steps \u2612 stages Resource references none","title":"queryParameters"},{"location":"steps/gctsDeploy/#remoterepositoryurl","text":"URL of the remote repository back to overview Scope Details Aliases - Type string Mandatory yes Default $PIPER_remoteRepositoryURL (if set) Secret no Configuration scope \u2612 parameter \u2610 general \u2612 steps \u2612 stages Resource references none","title":"remoteRepositoryURL"},{"location":"steps/gctsDeploy/#repository","text":"Specifies the name (ID) of the local repsitory on the ABAP system back to overview Scope Details Aliases - Type string Mandatory yes Default $PIPER_repository (if set) Secret no Configuration scope \u2612 parameter \u2610 general \u2612 steps \u2612 stages Resource references none","title":"repository"},{"location":"steps/gctsDeploy/#role","text":"Role of the local repository. Possible values are SOURCE (for repositories on development systems - Default) and TARGET (for repositories on target systems). Local repositories with a TARGET role cannot be the source of code changes. back to overview Scope Details Aliases - Type string Mandatory no Default SOURCE Possible values - SOURCE - TARGET Secret no Configuration scope \u2612 parameter \u2610 general \u2612 steps \u2612 stages Resource references none","title":"role"},{"location":"steps/gctsDeploy/#rollback","text":"Indication whether you want to roll back to the last working state of the repository, if any of the step actions switch branch or pull commit fail. back to overview Scope Details Aliases - Type bool Mandatory no Default false Possible values - true - false Secret no Configuration scope \u2612 parameter \u2610 general \u2612 steps \u2612 stages Resource references none","title":"rollback"},{"location":"steps/gctsDeploy/#scope","text":"Scope of objects to be deployed (imported). Only use this parameter for specific use cases, for example, when import errors occurred. Possible values are CRNTCOMMIT (current commit of the local repository) and LASTACTION (last action that occurred in the local repository). The CRNTCOMMIT option deploys the complete list of objects that existed in the local repository at the point in time when the commit was created. Note that this deploy scope doesn't only comprise the changed objects of the commit itself. LASTACTION only deploys the object difference between the From Commit and the To Commit of the last action in the repository. back to overview Scope Details Aliases - Type string Mandatory no Default $PIPER_scope (if set) Secret no Configuration scope \u2612 parameter \u2610 general \u2612 steps \u2612 stages Resource references none","title":"scope"},{"location":"steps/gctsDeploy/#script","text":"The common script environment of the Jenkinsfile running. Typically the reference to the script calling the pipeline step is provided with the this parameter, as in script: this . This allows the function to access the commonPipelineEnvironment for retrieving, e.g. configuration parameters. back to overview Scope Details Aliases - Type Jenkins Script Mandatory yes Default Secret no Configuration scope \u2610 parameter \u2610 general \u2610 steps \u2610 stages Resource references none","title":"script"},{"location":"steps/gctsDeploy/#skipsslverification","text":"Skip the verification of SSL (Secure Socket Layer) certificates when using HTTPS. This parameter is not recommended for productive environments. back to overview Scope Details Aliases - Type bool Mandatory no Default false Possible values - true - false Secret no Configuration scope \u2612 parameter \u2610 general \u2612 steps \u2612 stages Resource references none","title":"skipSSLVerification"},{"location":"steps/gctsDeploy/#type","text":"Type of the used source code management tool back to overview Scope Details Aliases - Type string Mandatory no Default GIT Possible values - GIT - GITHUB - GITLAB Secret no Configuration scope \u2612 parameter \u2610 general \u2612 steps \u2612 stages Resource references none","title":"type"},{"location":"steps/gctsDeploy/#username","text":"User that authenticates to the ABAP system. Note - Don't provide this parameter directly. Either set it in the environment, or in the Jenkins credentials store, and provide the ID as value of the abapCredentialsId parameter. back to overview Scope Details Aliases - Type string Mandatory yes Default $PIPER_username (if set) Secret yes Configuration scope \u2612 parameter \u2610 general \u2612 steps \u2612 stages Resource references Jenkins credential id: id: abapCredentialsId reference to: username","title":"username"},{"location":"steps/gctsDeploy/#vsid","text":"Virtual SID of the local repository. The vSID corresponds to the transport route that delivers content to the remote Git repository. For more information, see Background Information - vSID on SAP Help Portal. back to overview Scope Details Aliases - Type string Mandatory no Default $PIPER_vSID (if set) Secret no Configuration scope \u2612 parameter \u2610 general \u2612 steps \u2612 stages Resource references none","title":"vSID"},{"location":"steps/gctsDeploy/#verbose","text":"verbose output back to overview Scope Details Aliases - Type bool Mandatory no Default false Possible values - true - false Secret no Configuration scope \u2612 parameter \u2612 general \u2612 steps \u2612 stages Resource references none","title":"verbose"},{"location":"steps/gctsDeploy/#abapcredentialsid","text":"ID taken from the Jenkins credentials store containing the user name and password of the user that authenticates to the ABAP system. back to overview Scope Details Aliases - Type string Configuration scope \u2612 parameter \u2612 general \u2612 steps \u2612 stages","title":"abapCredentialsId"},{"location":"steps/gctsDeploy/#example","text":"Example configuration for the use in a Jenkinsfile . gctsDeploy ( script: this , host: 'https://abap.server.com:port' , client: '000' , abapCredentialsId: 'ABAPUserPasswordCredentialsId' , repository: 'myrepo' , remoteRepositoryURL: \"https://remote.repository.url.com\" , role: 'SOURCE' , vSID: 'ABC' , branch: 'feature1' , commit: '95952ec' , scope: 'LASTACTION' , rollback: true , configuration: [ VCS_AUTOMATIC_PULL: 'FALSE' , VCS_AUTOMATIC_PUSH: 'FALSE' , CLIENT_VCS_LOGLVL: 'debug' ], queryparameters: [ saml2: 'disabled' ] ) Example for the use in a YAML configuration file (such as .pipeline/config.yaml ). steps : <...> gctsDeploy : host : 'https://abap.server.com:port' client : '000' abapCredentialsId : 'ABAPUserPasswordCredentialsId' repository : 'myrepo' remoteRepositoryURL : \"https://remote.repository.url.com\" role : 'SOURCE' vSID : 'ABC' branch : 'feature2' commit : '0c9d330' scope : 'CRNTCOMMIT' rollback : false configuration : VCS_AUTOMATIC_PULL : \"FALSE\" VCS_AUTOMATIC_PUSH : \"FALSE\" CLIENT_VCS_LOGLVL : \"debug\" queryparameters : saml2 : \"disabled\"","title":"Example"},{"location":"steps/gctsExecuteABAPQualityChecks/","text":"gctsExecuteABAPQualityChecks \u00b6 Runs ABAP unit tests and ATC (ABAP Test Cockpit) checks for a specified object scope. Description \u00b6 This step executes ABAP unit test and ATC checks for a specified scope of objects that exist in a local Git repository on an ABAP system. Depending on your use case, you can specify a scope of objects for which you want to execute the checks. In addition, you can choose whether you want to execute only ABAP units tests, or only ATC checks, or both. By default, both checks are executed. The results of the checks are stored in a Checkstyle format. With the help of the Jenkins Warnings-Next-Generation Plugin), you can view the issues found, and navigate to the exact line of the source code where the issue occurred. To make the findings visible in the Jenkins plug-in, you need to use the recordIssues step, as displayed in the Example section below. You can use this step as of SAP S/4HANA 2020 with SAP Note 3159798 implemented. Usage \u00b6 We recommend to define values of step parameters via .pipeline/config.yml file . In this case, calling the step is essentially reduced to defining the step name. Calling the step can be done either in an orchestrator specific way (e.g. via a Jenkins library step) or on the command line. Jenkins Command Line library ( 'piper-lib-os' ) gctsExecuteABAPQualityChecks script: this piper gctsExecuteABAPQualityChecks Prerequisites \u00b6 ATC checks are enabled in transaction ATC in the ABAP systems where you want to use the step. ABAP Unit tests are available for the source code that you want to check. Note: Do not execute unit tests in client 000, and not in your production client. gCTS is available and configured in the ABAP systems where you want to use the step. If you want to use environmental variables as parameters, for example, GIT_COMMIT : The Git Plugin is installed in Jenkins. The Warnings-Next-Generation Plugin is installed in Jenkins. Parameters \u00b6 Overview - Step \u00b6 Name Mandatory Additional information client yes host yes password (yes) pass via ENV or Jenkins credentials ( abapCredentialsId ) repository yes script (yes) reference to Jenkins main pipeline script username (yes) pass via ENV or Jenkins credentials ( abapCredentialsId ) workspace yes aUnitResultsFileName no aUnitTest no atcCheck no atcResultsFileName no atcVariant no commit no queryParameters no scope no skipSSLVerification no verbose no activates debug output Overview - Execution Environment \u00b6 Orchestrator-specific only These parameters are relevant for orchestrator usage and not considered when using the command line option. Name Mandatory Additional information Details \u00b6 aUnitResultsFileName \u00b6 Specifies an output file name for the results of the ABAP Unit tests. back to overview Scope Details Aliases - Type string Mandatory no Default AUnitResults.xml Secret no Configuration scope \u2612 parameter \u2610 general \u2612 steps \u2612 stages Resource references none aUnitTest \u00b6 Indication whether you want to execute the ABAP Unit tests. If the ABAP Unit tests fail, the results are mapped as follows to the statuses available in the Jenkins plugin. (Successful ABAP unit test results are not displayed.) - Failed with severity fatal is displayed as an Error . - Failed with severity critical is displayed as an Error . - Failed with severity warning is displayed as a Warning . back to overview Scope Details Aliases - Type bool Mandatory no Default true Possible values - true - false Secret no Configuration scope \u2612 parameter \u2610 general \u2612 steps \u2612 stages Resource references none atcCheck \u00b6 Indication whether you want to execute the ATC checks. If the ATC checks result in errors with priorities 1 and 2, they are considered as failed. The results are mapped as follows to the statuses available in the Jenkins plugin. (Successful ATC check results are not displayed.) - Priorities 1 and 2 are displayed as an Error . - Priority 3 is displayed as a Warning . back to overview Scope Details Aliases - Type bool Mandatory no Default true Possible values - true - false Secret no Configuration scope \u2612 parameter \u2610 general \u2612 steps \u2612 stages Resource references none atcResultsFileName \u00b6 Specifies an output file name for the results of the ATC checks. back to overview Scope Details Aliases - Type string Mandatory no Default ATCResults.xml Secret no Configuration scope \u2612 parameter \u2610 general \u2612 steps \u2612 stages Resource references none atcVariant \u00b6 Variant for ATC checks back to overview Scope Details Aliases - Type string Mandatory no Default DEFAULT Secret no Configuration scope \u2612 parameter \u2610 general \u2612 steps \u2612 stages Resource references none client \u00b6 Client of the ABAP system in which you want to execute the checks back to overview Scope Details Aliases - Type string Mandatory yes Default $PIPER_client (if set) Secret no Configuration scope \u2612 parameter \u2610 general \u2612 steps \u2612 stages Resource references none commit \u00b6 ID of the commit that triggered the pipeline or any other commit used to calculate the object scope. Specifying a commit is mandatory for the remoteChangedObjects and remoteChangedPackages scopes. back to overview Scope Details Aliases - Type string Mandatory no Default $PIPER_commit (if set) Secret no Configuration scope \u2612 parameter \u2610 general \u2612 steps \u2612 stages Resource references none host \u00b6 Protocol and host of the ABAP system, including the port. Please provide it in the format <protocol>://<host>:<port> . Supported protocols are http and https . back to overview Scope Details Aliases - Type string Mandatory yes Default $PIPER_host (if set) Secret no Configuration scope \u2612 parameter \u2610 general \u2612 steps \u2612 stages Resource references none password \u00b6 Password of the ABAP user that authenticates to the ABAP system. Note - Don\u00b4t provide this parameter directly. Either set it in the environment, or in the Jenkins credentials store, and provide the ID as value of the abapCredentialsId parameter. back to overview Scope Details Aliases - Type string Mandatory yes Default $PIPER_password (if set) Secret yes Configuration scope \u2612 parameter \u2610 general \u2612 steps \u2612 stages Resource references Jenkins credential id: id: abapCredentialsId reference to: password queryParameters \u00b6 Add query parameters (for API requests) that apply to all endpoints of the step. Provide the parameters as key-value pair map in the format <query parameter>:<value> . back to overview Scope Details Aliases - Type map[string]interface{} Mandatory no Default $PIPER_queryParameters (if set) Secret no Configuration scope \u2612 parameter \u2610 general \u2612 steps \u2612 stages Resource references none repository \u00b6 Name (ID) of the local repository on the ABAP system back to overview Scope Details Aliases - Type string Mandatory yes Default $PIPER_repository (if set) Secret no Configuration scope \u2612 parameter \u2610 general \u2612 steps \u2612 stages Resource references none scope \u00b6 Scope of objects for which you want to execute the checks: - localChangedObjects : The object scope is derived from the last activity in the local repository. The checks are executed for the individual objects. - remoteChangedObjects : The object scope is the delta between the commit that triggered the pipeline and the current commit in the remote repository. The checks are executed for the individual objects. - localChangedPackages : The object scope is derived from the last activity in the local repository. All objects are resolved into packages. The checks are executed for the packages. - remoteChangedPackages : The object scope is the delta between the commit that triggered the pipeline and the current commit in the remote repository. All objects are resolved into packages. The checks are executed for the packages. - repository : The object scope comprises all objects that are part of the local repository. The checks are executed for the individual objects. Packages (DEVC) are excluded. This is the default scope. - packages : The object scope comprises all packages that are part of the local repository. The checks are executed for the packages. back to overview Scope Details Aliases - Type string Mandatory no Default repository Secret no Configuration scope \u2612 parameter \u2610 general \u2612 steps \u2612 stages Resource references none script \u00b6 The common script environment of the Jenkinsfile running. Typically the reference to the script calling the pipeline step is provided with the this parameter, as in script: this . This allows the function to access the commonPipelineEnvironment for retrieving, e.g. configuration parameters. back to overview Scope Details Aliases - Type Jenkins Script Mandatory yes Default Secret no Configuration scope \u2610 parameter \u2610 general \u2610 steps \u2610 stages Resource references none skipSSLVerification \u00b6 Skip the verification of SSL (Secure Socket Layer) certificates when using HTTPS. This parameter is not recommended for productive environments. back to overview Scope Details Aliases - Type bool Mandatory no Default false Possible values - true - false Secret no Configuration scope \u2612 parameter \u2610 general \u2612 steps \u2612 stages Resource references none username \u00b6 User that authenticates to the ABAP system. Note - Don\u00b4t provide this parameter directly. Either set it in the environment, or in the Jenkins credentials store, and provide the ID as value of the abapCredentialsId parameter. back to overview Scope Details Aliases - Type string Mandatory yes Default $PIPER_username (if set) Secret yes Configuration scope \u2612 parameter \u2610 general \u2612 steps \u2612 stages Resource references Jenkins credential id: id: abapCredentialsId reference to: username verbose \u00b6 verbose output back to overview Scope Details Aliases - Type bool Mandatory no Default false Possible values - true - false Secret no Configuration scope \u2612 parameter \u2612 general \u2612 steps \u2612 stages Resource references none workspace \u00b6 Absolute path to the directory that contains the source code that your CI/CD tool checks out. For example, in Jenkins, the workspace parameter is /var/jenkins_home/workspace/<jobName>/ . As an alternative, you can use Jenkins's predefined environmental variable WORKSPACE . back to overview Scope Details Aliases - Type string Mandatory yes Default $PIPER_workspace (if set) Secret no Configuration scope \u2612 parameter \u2610 general \u2612 steps \u2612 stages Resource references none abapCredentialsId \u00b6 ID taken from the Jenkins credentials store containing user name and password of the user that authenticates to the ABAP system on which you want to execute the checks. back to overview Scope Details Aliases - Type string Configuration scope \u2612 parameter \u2612 general \u2612 steps \u2612 stages Example \u00b6 Example configuration for the use in a Jenkinsfile. gctsExecuteABAPQualityChecks ( script: this , host: 'https://abap.server.com:port' , client: '000' , abapCredentialsId: 'ABAPUserPasswordCredentialsId' , repository: 'myrepo' , scope: 'remoteChangedObjects' , commit: \"${env.GIT_COMMIT}\" , workspace: \"${WORKSPACE}\" , queryparameters: [ saml2: 'disabled' ] ) Example configuration for the use in a .yaml config file (such as .pipeline/config.yaml ). steps : <...> gctsExecuteABAPQualityChecks : host : 'https://abap.server.com:port' client : '000' abapCredentialsId : 'ABAPUserPasswordCredentialsId' repository : 'myrepo' scope : 'remoteChangedObjects' commit : '38abb4814ae46b98e8e6c3e718cf1782afa9ca90' workspace : '/var/jenkins_home/workspace/myFirstPipeline' queryparameters : saml2 : \"disabled\" Example configuration with the repository scope defined. Here, you don\u00b4t need to specify a commit . This sample configuration can also be used with the packages scope. steps : <...> gctsExecuteABAPQualityChecks : host : 'https://abap.server.com:port' client : '000' abapCredentialsId : 'ABAPUserPasswordCredentialsId' repository : 'myrepo' scope : 'repository' workspace : '/var/jenkins_home/workspace/myFirstPipeline' Example configuration when you want to execute only ABAP Unit tests. steps : <...> gctsExecuteABAPQualityChecks : host : 'https://abap.server.com:port' client : '000' abapCredentialsId : 'ABAPUserPasswordCredentialsId' repository : 'myrepo' atcCheck : false scope : 'packages' workspace : '/var/jenkins_home/workspace/myFirstPipeline' Example configuration for the use of the recordIssue step in a Jenkinsfile to make the check results visible in the Warnings-Next-Generation Plugin in Jenkins. stage ( 'ABAP Unit Tests' ) { steps { script { try { gctsExecuteABAPQualityChecks ( script: this , commit: \"${env.GIT_COMMIT}\" , workspace: \"${WORKSPACE}\" ) } catch ( Exception ex ) { currentBuild . result = 'FAILURE' unstable ( message: \"${STAGE_NAME} is unstable\" ) } } } } stage ( 'Results in Checkstyle' ) { steps { recordIssues ( enabledForFailure: true , aggregatingResults: true , tools: [ checkStyle ( pattern: 'ATCResults.xml' , reportEncoding: 'UTF8' ), checkStyle ( pattern: 'AUnitResults.xml' , reportEncoding: 'UTF8' )] ) } } } Note: If you have disabled the atcCheck or aUnitTest parameters, you must also remove the corresponding ATCResults.xml or AUnitResults.xml from the recordIssues step. In the example below, the atcCheck is disabled. Therefore, the ATCResults.xml is missing. recordIssues ( enabledForFailure: true , aggregatingResults: true , tools: [ checkStyle ( pattern: 'AUnitResults.xml' , reportEncoding: 'UTF8' )] )","title":"gctsExecuteABAPQualityChecks"},{"location":"steps/gctsExecuteABAPQualityChecks/#gctsexecuteabapqualitychecks","text":"Runs ABAP unit tests and ATC (ABAP Test Cockpit) checks for a specified object scope.","title":"gctsExecuteABAPQualityChecks"},{"location":"steps/gctsExecuteABAPQualityChecks/#description","text":"This step executes ABAP unit test and ATC checks for a specified scope of objects that exist in a local Git repository on an ABAP system. Depending on your use case, you can specify a scope of objects for which you want to execute the checks. In addition, you can choose whether you want to execute only ABAP units tests, or only ATC checks, or both. By default, both checks are executed. The results of the checks are stored in a Checkstyle format. With the help of the Jenkins Warnings-Next-Generation Plugin), you can view the issues found, and navigate to the exact line of the source code where the issue occurred. To make the findings visible in the Jenkins plug-in, you need to use the recordIssues step, as displayed in the Example section below. You can use this step as of SAP S/4HANA 2020 with SAP Note 3159798 implemented.","title":"Description"},{"location":"steps/gctsExecuteABAPQualityChecks/#usage","text":"We recommend to define values of step parameters via .pipeline/config.yml file . In this case, calling the step is essentially reduced to defining the step name. Calling the step can be done either in an orchestrator specific way (e.g. via a Jenkins library step) or on the command line. Jenkins Command Line library ( 'piper-lib-os' ) gctsExecuteABAPQualityChecks script: this piper gctsExecuteABAPQualityChecks","title":"Usage"},{"location":"steps/gctsExecuteABAPQualityChecks/#prerequisites","text":"ATC checks are enabled in transaction ATC in the ABAP systems where you want to use the step. ABAP Unit tests are available for the source code that you want to check. Note: Do not execute unit tests in client 000, and not in your production client. gCTS is available and configured in the ABAP systems where you want to use the step. If you want to use environmental variables as parameters, for example, GIT_COMMIT : The Git Plugin is installed in Jenkins. The Warnings-Next-Generation Plugin is installed in Jenkins.","title":"Prerequisites"},{"location":"steps/gctsExecuteABAPQualityChecks/#parameters","text":"","title":"Parameters"},{"location":"steps/gctsExecuteABAPQualityChecks/#overview-step","text":"Name Mandatory Additional information client yes host yes password (yes) pass via ENV or Jenkins credentials ( abapCredentialsId ) repository yes script (yes) reference to Jenkins main pipeline script username (yes) pass via ENV or Jenkins credentials ( abapCredentialsId ) workspace yes aUnitResultsFileName no aUnitTest no atcCheck no atcResultsFileName no atcVariant no commit no queryParameters no scope no skipSSLVerification no verbose no activates debug output","title":"Overview - Step"},{"location":"steps/gctsExecuteABAPQualityChecks/#overview-execution-environment","text":"Orchestrator-specific only These parameters are relevant for orchestrator usage and not considered when using the command line option. Name Mandatory Additional information","title":"Overview - Execution Environment"},{"location":"steps/gctsExecuteABAPQualityChecks/#details","text":"","title":"Details"},{"location":"steps/gctsExecuteABAPQualityChecks/#aunitresultsfilename","text":"Specifies an output file name for the results of the ABAP Unit tests. back to overview Scope Details Aliases - Type string Mandatory no Default AUnitResults.xml Secret no Configuration scope \u2612 parameter \u2610 general \u2612 steps \u2612 stages Resource references none","title":"aUnitResultsFileName"},{"location":"steps/gctsExecuteABAPQualityChecks/#aunittest","text":"Indication whether you want to execute the ABAP Unit tests. If the ABAP Unit tests fail, the results are mapped as follows to the statuses available in the Jenkins plugin. (Successful ABAP unit test results are not displayed.) - Failed with severity fatal is displayed as an Error . - Failed with severity critical is displayed as an Error . - Failed with severity warning is displayed as a Warning . back to overview Scope Details Aliases - Type bool Mandatory no Default true Possible values - true - false Secret no Configuration scope \u2612 parameter \u2610 general \u2612 steps \u2612 stages Resource references none","title":"aUnitTest"},{"location":"steps/gctsExecuteABAPQualityChecks/#atccheck","text":"Indication whether you want to execute the ATC checks. If the ATC checks result in errors with priorities 1 and 2, they are considered as failed. The results are mapped as follows to the statuses available in the Jenkins plugin. (Successful ATC check results are not displayed.) - Priorities 1 and 2 are displayed as an Error . - Priority 3 is displayed as a Warning . back to overview Scope Details Aliases - Type bool Mandatory no Default true Possible values - true - false Secret no Configuration scope \u2612 parameter \u2610 general \u2612 steps \u2612 stages Resource references none","title":"atcCheck"},{"location":"steps/gctsExecuteABAPQualityChecks/#atcresultsfilename","text":"Specifies an output file name for the results of the ATC checks. back to overview Scope Details Aliases - Type string Mandatory no Default ATCResults.xml Secret no Configuration scope \u2612 parameter \u2610 general \u2612 steps \u2612 stages Resource references none","title":"atcResultsFileName"},{"location":"steps/gctsExecuteABAPQualityChecks/#atcvariant","text":"Variant for ATC checks back to overview Scope Details Aliases - Type string Mandatory no Default DEFAULT Secret no Configuration scope \u2612 parameter \u2610 general \u2612 steps \u2612 stages Resource references none","title":"atcVariant"},{"location":"steps/gctsExecuteABAPQualityChecks/#client","text":"Client of the ABAP system in which you want to execute the checks back to overview Scope Details Aliases - Type string Mandatory yes Default $PIPER_client (if set) Secret no Configuration scope \u2612 parameter \u2610 general \u2612 steps \u2612 stages Resource references none","title":"client"},{"location":"steps/gctsExecuteABAPQualityChecks/#commit","text":"ID of the commit that triggered the pipeline or any other commit used to calculate the object scope. Specifying a commit is mandatory for the remoteChangedObjects and remoteChangedPackages scopes. back to overview Scope Details Aliases - Type string Mandatory no Default $PIPER_commit (if set) Secret no Configuration scope \u2612 parameter \u2610 general \u2612 steps \u2612 stages Resource references none","title":"commit"},{"location":"steps/gctsExecuteABAPQualityChecks/#host","text":"Protocol and host of the ABAP system, including the port. Please provide it in the format <protocol>://<host>:<port> . Supported protocols are http and https . back to overview Scope Details Aliases - Type string Mandatory yes Default $PIPER_host (if set) Secret no Configuration scope \u2612 parameter \u2610 general \u2612 steps \u2612 stages Resource references none","title":"host"},{"location":"steps/gctsExecuteABAPQualityChecks/#password","text":"Password of the ABAP user that authenticates to the ABAP system. Note - Don\u00b4t provide this parameter directly. Either set it in the environment, or in the Jenkins credentials store, and provide the ID as value of the abapCredentialsId parameter. back to overview Scope Details Aliases - Type string Mandatory yes Default $PIPER_password (if set) Secret yes Configuration scope \u2612 parameter \u2610 general \u2612 steps \u2612 stages Resource references Jenkins credential id: id: abapCredentialsId reference to: password","title":"password"},{"location":"steps/gctsExecuteABAPQualityChecks/#queryparameters","text":"Add query parameters (for API requests) that apply to all endpoints of the step. Provide the parameters as key-value pair map in the format <query parameter>:<value> . back to overview Scope Details Aliases - Type map[string]interface{} Mandatory no Default $PIPER_queryParameters (if set) Secret no Configuration scope \u2612 parameter \u2610 general \u2612 steps \u2612 stages Resource references none","title":"queryParameters"},{"location":"steps/gctsExecuteABAPQualityChecks/#repository","text":"Name (ID) of the local repository on the ABAP system back to overview Scope Details Aliases - Type string Mandatory yes Default $PIPER_repository (if set) Secret no Configuration scope \u2612 parameter \u2610 general \u2612 steps \u2612 stages Resource references none","title":"repository"},{"location":"steps/gctsExecuteABAPQualityChecks/#scope","text":"Scope of objects for which you want to execute the checks: - localChangedObjects : The object scope is derived from the last activity in the local repository. The checks are executed for the individual objects. - remoteChangedObjects : The object scope is the delta between the commit that triggered the pipeline and the current commit in the remote repository. The checks are executed for the individual objects. - localChangedPackages : The object scope is derived from the last activity in the local repository. All objects are resolved into packages. The checks are executed for the packages. - remoteChangedPackages : The object scope is the delta between the commit that triggered the pipeline and the current commit in the remote repository. All objects are resolved into packages. The checks are executed for the packages. - repository : The object scope comprises all objects that are part of the local repository. The checks are executed for the individual objects. Packages (DEVC) are excluded. This is the default scope. - packages : The object scope comprises all packages that are part of the local repository. The checks are executed for the packages. back to overview Scope Details Aliases - Type string Mandatory no Default repository Secret no Configuration scope \u2612 parameter \u2610 general \u2612 steps \u2612 stages Resource references none","title":"scope"},{"location":"steps/gctsExecuteABAPQualityChecks/#script","text":"The common script environment of the Jenkinsfile running. Typically the reference to the script calling the pipeline step is provided with the this parameter, as in script: this . This allows the function to access the commonPipelineEnvironment for retrieving, e.g. configuration parameters. back to overview Scope Details Aliases - Type Jenkins Script Mandatory yes Default Secret no Configuration scope \u2610 parameter \u2610 general \u2610 steps \u2610 stages Resource references none","title":"script"},{"location":"steps/gctsExecuteABAPQualityChecks/#skipsslverification","text":"Skip the verification of SSL (Secure Socket Layer) certificates when using HTTPS. This parameter is not recommended for productive environments. back to overview Scope Details Aliases - Type bool Mandatory no Default false Possible values - true - false Secret no Configuration scope \u2612 parameter \u2610 general \u2612 steps \u2612 stages Resource references none","title":"skipSSLVerification"},{"location":"steps/gctsExecuteABAPQualityChecks/#username","text":"User that authenticates to the ABAP system. Note - Don\u00b4t provide this parameter directly. Either set it in the environment, or in the Jenkins credentials store, and provide the ID as value of the abapCredentialsId parameter. back to overview Scope Details Aliases - Type string Mandatory yes Default $PIPER_username (if set) Secret yes Configuration scope \u2612 parameter \u2610 general \u2612 steps \u2612 stages Resource references Jenkins credential id: id: abapCredentialsId reference to: username","title":"username"},{"location":"steps/gctsExecuteABAPQualityChecks/#verbose","text":"verbose output back to overview Scope Details Aliases - Type bool Mandatory no Default false Possible values - true - false Secret no Configuration scope \u2612 parameter \u2612 general \u2612 steps \u2612 stages Resource references none","title":"verbose"},{"location":"steps/gctsExecuteABAPQualityChecks/#workspace","text":"Absolute path to the directory that contains the source code that your CI/CD tool checks out. For example, in Jenkins, the workspace parameter is /var/jenkins_home/workspace/<jobName>/ . As an alternative, you can use Jenkins's predefined environmental variable WORKSPACE . back to overview Scope Details Aliases - Type string Mandatory yes Default $PIPER_workspace (if set) Secret no Configuration scope \u2612 parameter \u2610 general \u2612 steps \u2612 stages Resource references none","title":"workspace"},{"location":"steps/gctsExecuteABAPQualityChecks/#abapcredentialsid","text":"ID taken from the Jenkins credentials store containing user name and password of the user that authenticates to the ABAP system on which you want to execute the checks. back to overview Scope Details Aliases - Type string Configuration scope \u2612 parameter \u2612 general \u2612 steps \u2612 stages","title":"abapCredentialsId"},{"location":"steps/gctsExecuteABAPQualityChecks/#example","text":"Example configuration for the use in a Jenkinsfile. gctsExecuteABAPQualityChecks ( script: this , host: 'https://abap.server.com:port' , client: '000' , abapCredentialsId: 'ABAPUserPasswordCredentialsId' , repository: 'myrepo' , scope: 'remoteChangedObjects' , commit: \"${env.GIT_COMMIT}\" , workspace: \"${WORKSPACE}\" , queryparameters: [ saml2: 'disabled' ] ) Example configuration for the use in a .yaml config file (such as .pipeline/config.yaml ). steps : <...> gctsExecuteABAPQualityChecks : host : 'https://abap.server.com:port' client : '000' abapCredentialsId : 'ABAPUserPasswordCredentialsId' repository : 'myrepo' scope : 'remoteChangedObjects' commit : '38abb4814ae46b98e8e6c3e718cf1782afa9ca90' workspace : '/var/jenkins_home/workspace/myFirstPipeline' queryparameters : saml2 : \"disabled\" Example configuration with the repository scope defined. Here, you don\u00b4t need to specify a commit . This sample configuration can also be used with the packages scope. steps : <...> gctsExecuteABAPQualityChecks : host : 'https://abap.server.com:port' client : '000' abapCredentialsId : 'ABAPUserPasswordCredentialsId' repository : 'myrepo' scope : 'repository' workspace : '/var/jenkins_home/workspace/myFirstPipeline' Example configuration when you want to execute only ABAP Unit tests. steps : <...> gctsExecuteABAPQualityChecks : host : 'https://abap.server.com:port' client : '000' abapCredentialsId : 'ABAPUserPasswordCredentialsId' repository : 'myrepo' atcCheck : false scope : 'packages' workspace : '/var/jenkins_home/workspace/myFirstPipeline' Example configuration for the use of the recordIssue step in a Jenkinsfile to make the check results visible in the Warnings-Next-Generation Plugin in Jenkins. stage ( 'ABAP Unit Tests' ) { steps { script { try { gctsExecuteABAPQualityChecks ( script: this , commit: \"${env.GIT_COMMIT}\" , workspace: \"${WORKSPACE}\" ) } catch ( Exception ex ) { currentBuild . result = 'FAILURE' unstable ( message: \"${STAGE_NAME} is unstable\" ) } } } } stage ( 'Results in Checkstyle' ) { steps { recordIssues ( enabledForFailure: true , aggregatingResults: true , tools: [ checkStyle ( pattern: 'ATCResults.xml' , reportEncoding: 'UTF8' ), checkStyle ( pattern: 'AUnitResults.xml' , reportEncoding: 'UTF8' )] ) } } } Note: If you have disabled the atcCheck or aUnitTest parameters, you must also remove the corresponding ATCResults.xml or AUnitResults.xml from the recordIssues step. In the example below, the atcCheck is disabled. Therefore, the ATCResults.xml is missing. recordIssues ( enabledForFailure: true , aggregatingResults: true , tools: [ checkStyle ( pattern: 'AUnitResults.xml' , reportEncoding: 'UTF8' )] )","title":"Example"},{"location":"steps/gctsExecuteABAPUnitTests/","text":"gctsExecuteABAPUnitTests \u00b6 Runs ABAP unit tests and ATC (ABAP Test Cockpit) checks for a specified object scope. Description \u00b6 This step executes ABAP unit test and ATC checks for a specified scope of objects that exist in a local Git repository on an ABAP system. Usage \u00b6 We recommend to define values of step parameters via .pipeline/config.yml file . In this case, calling the step is essentially reduced to defining the step name. Calling the step can be done either in an orchestrator specific way (e.g. via a Jenkins library step) or on the command line. Jenkins Command Line library ( 'piper-lib-os' ) gctsExecuteABAPUnitTests script: this piper gctsExecuteABAPUnitTests This step is deprecated. Please use the gctsExecuteABAPQualityChecks instead. Don\u00b4t worry, if you\u00b4re already using the step. You can continue to use it. It will call the functions of the gctsExecuteABAPQualityChecks step. Prerequisites \u00b6 ATC checks are enabled in transaction ATC in the ABAP systems where you want to use the step. ABAP Unit tests are available for the source code that you want to check. Note: Do not execute unit tests in client 000, and not in your production client. gCTS is available and configured in the ABAP systems where you want to use the step. If you want to use environmental variables as parameters, for example, GIT_COMMIT : The Git Plugin is installed in Jenkins. The Warnings-Next-Generation Plugin is installed in Jenkins. Parameters \u00b6 Overview - Step \u00b6 Name Mandatory Additional information client yes host yes password (yes) pass via ENV or Jenkins credentials ( abapCredentialsId ) repository yes script (yes) reference to Jenkins main pipeline script username (yes) pass via ENV or Jenkins credentials ( abapCredentialsId ) workspace yes aUnitResultsFileName no aUnitTest no atcCheck no atcResultsFileName no atcVariant no commit no queryParameters no scope no skipSSLVerification no verbose no activates debug output Overview - Execution Environment \u00b6 Orchestrator-specific only These parameters are relevant for orchestrator usage and not considered when using the command line option. Name Mandatory Additional information Details \u00b6 aUnitResultsFileName \u00b6 Specifies an output file name for the results of the ABAP Unit tests. back to overview Scope Details Aliases - Type string Mandatory no Default AUnitResults.xml Secret no Configuration scope \u2612 parameter \u2610 general \u2612 steps \u2612 stages Resource references none aUnitTest \u00b6 Indication whether you want to execute the ABAP Unit tests. If the ABAP Unit tests fail, the results are mapped as follows to the statuses available in the Jenkins plugin. (Successful ABAP unit test results are not displayed.) - Failed with severity fatal is displayed as an Error . - Failed with severity critical is displayed as an Error . - Failed with severity warning is displayed as a Warning . back to overview Scope Details Aliases - Type bool Mandatory no Default true Possible values - true - false Secret no Configuration scope \u2612 parameter \u2610 general \u2612 steps \u2612 stages Resource references none atcCheck \u00b6 Indication whether you want to execute the ATC checks. If the ATC checks result in errors with priorities 1 and 2, they are considered as failed. The results are mapped as follows to the statuses available in the Jenkins plugin. (Successful ATC check results are not displayed.) - Priorities 1 and 2 are displayed as an Error . - Priority 3 is displayed as a Warning . back to overview Scope Details Aliases - Type bool Mandatory no Default true Possible values - true - false Secret no Configuration scope \u2612 parameter \u2610 general \u2612 steps \u2612 stages Resource references none atcResultsFileName \u00b6 Specifies an output file name for the results of the ATC checks. back to overview Scope Details Aliases - Type string Mandatory no Default ATCResults.xml Secret no Configuration scope \u2612 parameter \u2610 general \u2612 steps \u2612 stages Resource references none atcVariant \u00b6 Variant for ATC checks back to overview Scope Details Aliases - Type string Mandatory no Default DEFAULT Secret no Configuration scope \u2612 parameter \u2610 general \u2612 steps \u2612 stages Resource references none client \u00b6 Client of the ABAP system in which you want to execute the checks back to overview Scope Details Aliases - Type string Mandatory yes Default $PIPER_client (if set) Secret no Configuration scope \u2612 parameter \u2610 general \u2612 steps \u2612 stages Resource references none commit \u00b6 ID of the commit that triggered the pipeline or any other commit used to calculate the object scope. Specifying a commit is mandatory for the remoteChangedObjects and remoteChangedPackages scopes. back to overview Scope Details Aliases - Type string Mandatory no Default $PIPER_commit (if set) Secret no Configuration scope \u2612 parameter \u2610 general \u2612 steps \u2612 stages Resource references none host \u00b6 Protocol and host of the ABAP system, including the port. Please provide it in the format <protocol>://<host>:<port> . Supported protocols are http and https . back to overview Scope Details Aliases - Type string Mandatory yes Default $PIPER_host (if set) Secret no Configuration scope \u2612 parameter \u2610 general \u2612 steps \u2612 stages Resource references none password \u00b6 Password of the ABAP user that authenticates to the ABAP system. Note - Don\u00b4t provide this parameter directly. Either set it in the environment, or in the Jenkins credentials store, and provide the ID as value of the abapCredentialsId parameter. back to overview Scope Details Aliases - Type string Mandatory yes Default $PIPER_password (if set) Secret yes Configuration scope \u2612 parameter \u2610 general \u2612 steps \u2612 stages Resource references Jenkins credential id: id: abapCredentialsId reference to: password queryParameters \u00b6 Add query parameters (for API requests) that apply to all endpoints of the step. Provide the parameters as key-value pair map in the format <query parameter>:<value> . back to overview Scope Details Aliases - Type map[string]interface{} Mandatory no Default $PIPER_queryParameters (if set) Secret no Configuration scope \u2612 parameter \u2610 general \u2612 steps \u2612 stages Resource references none repository \u00b6 Name (ID) of the local repository on the ABAP system back to overview Scope Details Aliases - Type string Mandatory yes Default $PIPER_repository (if set) Secret no Configuration scope \u2612 parameter \u2610 general \u2612 steps \u2612 stages Resource references none scope \u00b6 Scope of objects for which you want to execute the checks: - localChangedObjects : The object scope is derived from the last activity in the local repository. The checks are executed for the individual objects. - remoteChangedObjects : The object scope is the delta between the commit that triggered the pipeline and the current commit in the remote repository. The checks are executed for the individual objects. - localChangedPackages : The object scope is derived from the last activity in the local repository. All objects are resolved into packages. The checks are executed for the packages. - remoteChangedPackages : The object scope is the delta between the commit that triggered the pipeline and the current commit in the remote repository. All objects are resolved into packages. The checks are executed for the packages. - repository : The object scope comprises all objects that are part of the local repository. The checks are executed for the individual objects. Packages (DEVC) are excluded. This is the default scope. - packages : The object scope comprises all packages that are part of the local repository. The checks are executed for the packages. back to overview Scope Details Aliases - Type string Mandatory no Default repository Secret no Configuration scope \u2612 parameter \u2610 general \u2612 steps \u2612 stages Resource references none script \u00b6 The common script environment of the Jenkinsfile running. Typically the reference to the script calling the pipeline step is provided with the this parameter, as in script: this . This allows the function to access the commonPipelineEnvironment for retrieving, e.g. configuration parameters. back to overview Scope Details Aliases - Type Jenkins Script Mandatory yes Default Secret no Configuration scope \u2610 parameter \u2610 general \u2610 steps \u2610 stages Resource references none skipSSLVerification \u00b6 Skip the verification of SSL (Secure Socket Layer) certificates when using HTTPS. This parameter is not recommended for productive environments. back to overview Scope Details Aliases - Type bool Mandatory no Default false Possible values - true - false Secret no Configuration scope \u2612 parameter \u2610 general \u2612 steps \u2612 stages Resource references none username \u00b6 User that authenticates to the ABAP system. Note - Don\u00b4t provide this parameter directly. Either set it in the environment, or in the Jenkins credentials store, and provide the ID as value of the abapCredentialsId parameter. back to overview Scope Details Aliases - Type string Mandatory yes Default $PIPER_username (if set) Secret yes Configuration scope \u2612 parameter \u2610 general \u2612 steps \u2612 stages Resource references Jenkins credential id: id: abapCredentialsId reference to: username verbose \u00b6 verbose output back to overview Scope Details Aliases - Type bool Mandatory no Default false Possible values - true - false Secret no Configuration scope \u2612 parameter \u2612 general \u2612 steps \u2612 stages Resource references none workspace \u00b6 Absolute path to the directory that contains the source code that your CI/CD tool checks out. For example, in Jenkins, the workspace parameter is /var/jenkins_home/workspace/<jobName>/ . As an alternative, you can use Jenkins's predefined environmental variable WORKSPACE . back to overview Scope Details Aliases - Type string Mandatory yes Default $PIPER_workspace (if set) Secret no Configuration scope \u2612 parameter \u2610 general \u2612 steps \u2612 stages Resource references none abapCredentialsId \u00b6 ID taken from the Jenkins credentials store containing user name and password of the user that authenticates to the ABAP system on which you want to execute the checks. back to overview Scope Details Aliases - Type string Configuration scope \u2612 parameter \u2612 general \u2612 steps \u2612 stages Example \u00b6 Example configuration for the use in a Jenkinsfile. gctsExecuteABAPUnitTests ( script: this , host: 'https://abap.server.com:port' , client: '000' , abapCredentialsId: 'ABAPUserPasswordCredentialsId' , repository: 'myrepo' , scope: 'remoteChangedObjects' , commit: \"${env.GIT_COMMIT}\" , workspace: \"${WORKSPACE}\" , queryparameters: [ saml2: 'disabled' ] ) Example configuration for the use in a yaml config file (such as .pipeline/config.yaml ). steps : <...> gctsExecuteABAPUnitTests : host : 'https://abap.server.com:port' client : '000' abapCredentialsId : 'ABAPUserPasswordCredentialsId' repository : 'myrepo' scope : 'remoteChangedObjects' commit : '38abb4814ae46b98e8e6c3e718cf1782afa9ca90' workspace : '/var/jenkins_home/workspace/myFirstPipeline' Example configuration when you define scope: repository or packages . For these two cases you do not need to specify a commit . steps : <...> gctsExecuteABAPUnitTests : host : 'https://abap.server.com:port' client : '000' abapCredentialsId : 'ABAPUserPasswordCredentialsId' repository : 'myrepo' scope : 'repository' workspace : '/var/jenkins_home/workspace/myFirstPipeline' Example configuration when you want to execute only ABAP Unit Test. steps : <...> gctsExecuteABAPUnitTests : host : 'https://abap.server.com:port' client : '000' abapCredentialsId : 'ABAPUserPasswordCredentialsId' repository : 'myrepo' atcCheck : false scope : 'packages' workspace : '/var/jenkins_home/workspace/myFirstPipeline' Example configuration for the use of recordIssue step to make the findings visible in Jenkins interface. stage ( 'ABAP Unit Tests' ) { steps { script { try { gctsExecuteABAPUnitTests ( script: this , commit: \"${env.GIT_COMMIT}\" , workspace: \"${WORKSPACE}\" ) } catch ( Exception ex ) { currentBuild . result = 'FAILURE' unstable ( message: \"${STAGE_NAME} is unstable\" ) } } } } stage ( 'Results in Checkstyle' ) { steps { recordIssues ( enabledForFailure: true , aggregatingResults: true , tools: [ checkStyle ( pattern: 'ATCResults.xml' , reportEncoding: 'UTF8' ), checkStyle ( pattern: 'AUnitResults.xml' , reportEncoding: 'UTF8' )] ) } } } Note: If you have disabled atcCheck or aUnitTest , than you also need to remove the corresponding ATCResults.xml or AUnitResults.xml from recordIssues step. In the example below the atcCheck was disabled, so ATCResults.xml was removed. recordIssues ( enabledForFailure: true , aggregatingResults: true , tools: [ checkStyle ( pattern: 'AUnitResults.xml' , reportEncoding: 'UTF8' )] )","title":"gctsExecuteABAPUnitTests"},{"location":"steps/gctsExecuteABAPUnitTests/#gctsexecuteabapunittests","text":"Runs ABAP unit tests and ATC (ABAP Test Cockpit) checks for a specified object scope.","title":"gctsExecuteABAPUnitTests"},{"location":"steps/gctsExecuteABAPUnitTests/#description","text":"This step executes ABAP unit test and ATC checks for a specified scope of objects that exist in a local Git repository on an ABAP system.","title":"Description"},{"location":"steps/gctsExecuteABAPUnitTests/#usage","text":"We recommend to define values of step parameters via .pipeline/config.yml file . In this case, calling the step is essentially reduced to defining the step name. Calling the step can be done either in an orchestrator specific way (e.g. via a Jenkins library step) or on the command line. Jenkins Command Line library ( 'piper-lib-os' ) gctsExecuteABAPUnitTests script: this piper gctsExecuteABAPUnitTests This step is deprecated. Please use the gctsExecuteABAPQualityChecks instead. Don\u00b4t worry, if you\u00b4re already using the step. You can continue to use it. It will call the functions of the gctsExecuteABAPQualityChecks step.","title":"Usage"},{"location":"steps/gctsExecuteABAPUnitTests/#prerequisites","text":"ATC checks are enabled in transaction ATC in the ABAP systems where you want to use the step. ABAP Unit tests are available for the source code that you want to check. Note: Do not execute unit tests in client 000, and not in your production client. gCTS is available and configured in the ABAP systems where you want to use the step. If you want to use environmental variables as parameters, for example, GIT_COMMIT : The Git Plugin is installed in Jenkins. The Warnings-Next-Generation Plugin is installed in Jenkins.","title":"Prerequisites"},{"location":"steps/gctsExecuteABAPUnitTests/#parameters","text":"","title":"Parameters"},{"location":"steps/gctsExecuteABAPUnitTests/#overview-step","text":"Name Mandatory Additional information client yes host yes password (yes) pass via ENV or Jenkins credentials ( abapCredentialsId ) repository yes script (yes) reference to Jenkins main pipeline script username (yes) pass via ENV or Jenkins credentials ( abapCredentialsId ) workspace yes aUnitResultsFileName no aUnitTest no atcCheck no atcResultsFileName no atcVariant no commit no queryParameters no scope no skipSSLVerification no verbose no activates debug output","title":"Overview - Step"},{"location":"steps/gctsExecuteABAPUnitTests/#overview-execution-environment","text":"Orchestrator-specific only These parameters are relevant for orchestrator usage and not considered when using the command line option. Name Mandatory Additional information","title":"Overview - Execution Environment"},{"location":"steps/gctsExecuteABAPUnitTests/#details","text":"","title":"Details"},{"location":"steps/gctsExecuteABAPUnitTests/#aunitresultsfilename","text":"Specifies an output file name for the results of the ABAP Unit tests. back to overview Scope Details Aliases - Type string Mandatory no Default AUnitResults.xml Secret no Configuration scope \u2612 parameter \u2610 general \u2612 steps \u2612 stages Resource references none","title":"aUnitResultsFileName"},{"location":"steps/gctsExecuteABAPUnitTests/#aunittest","text":"Indication whether you want to execute the ABAP Unit tests. If the ABAP Unit tests fail, the results are mapped as follows to the statuses available in the Jenkins plugin. (Successful ABAP unit test results are not displayed.) - Failed with severity fatal is displayed as an Error . - Failed with severity critical is displayed as an Error . - Failed with severity warning is displayed as a Warning . back to overview Scope Details Aliases - Type bool Mandatory no Default true Possible values - true - false Secret no Configuration scope \u2612 parameter \u2610 general \u2612 steps \u2612 stages Resource references none","title":"aUnitTest"},{"location":"steps/gctsExecuteABAPUnitTests/#atccheck","text":"Indication whether you want to execute the ATC checks. If the ATC checks result in errors with priorities 1 and 2, they are considered as failed. The results are mapped as follows to the statuses available in the Jenkins plugin. (Successful ATC check results are not displayed.) - Priorities 1 and 2 are displayed as an Error . - Priority 3 is displayed as a Warning . back to overview Scope Details Aliases - Type bool Mandatory no Default true Possible values - true - false Secret no Configuration scope \u2612 parameter \u2610 general \u2612 steps \u2612 stages Resource references none","title":"atcCheck"},{"location":"steps/gctsExecuteABAPUnitTests/#atcresultsfilename","text":"Specifies an output file name for the results of the ATC checks. back to overview Scope Details Aliases - Type string Mandatory no Default ATCResults.xml Secret no Configuration scope \u2612 parameter \u2610 general \u2612 steps \u2612 stages Resource references none","title":"atcResultsFileName"},{"location":"steps/gctsExecuteABAPUnitTests/#atcvariant","text":"Variant for ATC checks back to overview Scope Details Aliases - Type string Mandatory no Default DEFAULT Secret no Configuration scope \u2612 parameter \u2610 general \u2612 steps \u2612 stages Resource references none","title":"atcVariant"},{"location":"steps/gctsExecuteABAPUnitTests/#client","text":"Client of the ABAP system in which you want to execute the checks back to overview Scope Details Aliases - Type string Mandatory yes Default $PIPER_client (if set) Secret no Configuration scope \u2612 parameter \u2610 general \u2612 steps \u2612 stages Resource references none","title":"client"},{"location":"steps/gctsExecuteABAPUnitTests/#commit","text":"ID of the commit that triggered the pipeline or any other commit used to calculate the object scope. Specifying a commit is mandatory for the remoteChangedObjects and remoteChangedPackages scopes. back to overview Scope Details Aliases - Type string Mandatory no Default $PIPER_commit (if set) Secret no Configuration scope \u2612 parameter \u2610 general \u2612 steps \u2612 stages Resource references none","title":"commit"},{"location":"steps/gctsExecuteABAPUnitTests/#host","text":"Protocol and host of the ABAP system, including the port. Please provide it in the format <protocol>://<host>:<port> . Supported protocols are http and https . back to overview Scope Details Aliases - Type string Mandatory yes Default $PIPER_host (if set) Secret no Configuration scope \u2612 parameter \u2610 general \u2612 steps \u2612 stages Resource references none","title":"host"},{"location":"steps/gctsExecuteABAPUnitTests/#password","text":"Password of the ABAP user that authenticates to the ABAP system. Note - Don\u00b4t provide this parameter directly. Either set it in the environment, or in the Jenkins credentials store, and provide the ID as value of the abapCredentialsId parameter. back to overview Scope Details Aliases - Type string Mandatory yes Default $PIPER_password (if set) Secret yes Configuration scope \u2612 parameter \u2610 general \u2612 steps \u2612 stages Resource references Jenkins credential id: id: abapCredentialsId reference to: password","title":"password"},{"location":"steps/gctsExecuteABAPUnitTests/#queryparameters","text":"Add query parameters (for API requests) that apply to all endpoints of the step. Provide the parameters as key-value pair map in the format <query parameter>:<value> . back to overview Scope Details Aliases - Type map[string]interface{} Mandatory no Default $PIPER_queryParameters (if set) Secret no Configuration scope \u2612 parameter \u2610 general \u2612 steps \u2612 stages Resource references none","title":"queryParameters"},{"location":"steps/gctsExecuteABAPUnitTests/#repository","text":"Name (ID) of the local repository on the ABAP system back to overview Scope Details Aliases - Type string Mandatory yes Default $PIPER_repository (if set) Secret no Configuration scope \u2612 parameter \u2610 general \u2612 steps \u2612 stages Resource references none","title":"repository"},{"location":"steps/gctsExecuteABAPUnitTests/#scope","text":"Scope of objects for which you want to execute the checks: - localChangedObjects : The object scope is derived from the last activity in the local repository. The checks are executed for the individual objects. - remoteChangedObjects : The object scope is the delta between the commit that triggered the pipeline and the current commit in the remote repository. The checks are executed for the individual objects. - localChangedPackages : The object scope is derived from the last activity in the local repository. All objects are resolved into packages. The checks are executed for the packages. - remoteChangedPackages : The object scope is the delta between the commit that triggered the pipeline and the current commit in the remote repository. All objects are resolved into packages. The checks are executed for the packages. - repository : The object scope comprises all objects that are part of the local repository. The checks are executed for the individual objects. Packages (DEVC) are excluded. This is the default scope. - packages : The object scope comprises all packages that are part of the local repository. The checks are executed for the packages. back to overview Scope Details Aliases - Type string Mandatory no Default repository Secret no Configuration scope \u2612 parameter \u2610 general \u2612 steps \u2612 stages Resource references none","title":"scope"},{"location":"steps/gctsExecuteABAPUnitTests/#script","text":"The common script environment of the Jenkinsfile running. Typically the reference to the script calling the pipeline step is provided with the this parameter, as in script: this . This allows the function to access the commonPipelineEnvironment for retrieving, e.g. configuration parameters. back to overview Scope Details Aliases - Type Jenkins Script Mandatory yes Default Secret no Configuration scope \u2610 parameter \u2610 general \u2610 steps \u2610 stages Resource references none","title":"script"},{"location":"steps/gctsExecuteABAPUnitTests/#skipsslverification","text":"Skip the verification of SSL (Secure Socket Layer) certificates when using HTTPS. This parameter is not recommended for productive environments. back to overview Scope Details Aliases - Type bool Mandatory no Default false Possible values - true - false Secret no Configuration scope \u2612 parameter \u2610 general \u2612 steps \u2612 stages Resource references none","title":"skipSSLVerification"},{"location":"steps/gctsExecuteABAPUnitTests/#username","text":"User that authenticates to the ABAP system. Note - Don\u00b4t provide this parameter directly. Either set it in the environment, or in the Jenkins credentials store, and provide the ID as value of the abapCredentialsId parameter. back to overview Scope Details Aliases - Type string Mandatory yes Default $PIPER_username (if set) Secret yes Configuration scope \u2612 parameter \u2610 general \u2612 steps \u2612 stages Resource references Jenkins credential id: id: abapCredentialsId reference to: username","title":"username"},{"location":"steps/gctsExecuteABAPUnitTests/#verbose","text":"verbose output back to overview Scope Details Aliases - Type bool Mandatory no Default false Possible values - true - false Secret no Configuration scope \u2612 parameter \u2612 general \u2612 steps \u2612 stages Resource references none","title":"verbose"},{"location":"steps/gctsExecuteABAPUnitTests/#workspace","text":"Absolute path to the directory that contains the source code that your CI/CD tool checks out. For example, in Jenkins, the workspace parameter is /var/jenkins_home/workspace/<jobName>/ . As an alternative, you can use Jenkins's predefined environmental variable WORKSPACE . back to overview Scope Details Aliases - Type string Mandatory yes Default $PIPER_workspace (if set) Secret no Configuration scope \u2612 parameter \u2610 general \u2612 steps \u2612 stages Resource references none","title":"workspace"},{"location":"steps/gctsExecuteABAPUnitTests/#abapcredentialsid","text":"ID taken from the Jenkins credentials store containing user name and password of the user that authenticates to the ABAP system on which you want to execute the checks. back to overview Scope Details Aliases - Type string Configuration scope \u2612 parameter \u2612 general \u2612 steps \u2612 stages","title":"abapCredentialsId"},{"location":"steps/gctsExecuteABAPUnitTests/#example","text":"Example configuration for the use in a Jenkinsfile. gctsExecuteABAPUnitTests ( script: this , host: 'https://abap.server.com:port' , client: '000' , abapCredentialsId: 'ABAPUserPasswordCredentialsId' , repository: 'myrepo' , scope: 'remoteChangedObjects' , commit: \"${env.GIT_COMMIT}\" , workspace: \"${WORKSPACE}\" , queryparameters: [ saml2: 'disabled' ] ) Example configuration for the use in a yaml config file (such as .pipeline/config.yaml ). steps : <...> gctsExecuteABAPUnitTests : host : 'https://abap.server.com:port' client : '000' abapCredentialsId : 'ABAPUserPasswordCredentialsId' repository : 'myrepo' scope : 'remoteChangedObjects' commit : '38abb4814ae46b98e8e6c3e718cf1782afa9ca90' workspace : '/var/jenkins_home/workspace/myFirstPipeline' Example configuration when you define scope: repository or packages . For these two cases you do not need to specify a commit . steps : <...> gctsExecuteABAPUnitTests : host : 'https://abap.server.com:port' client : '000' abapCredentialsId : 'ABAPUserPasswordCredentialsId' repository : 'myrepo' scope : 'repository' workspace : '/var/jenkins_home/workspace/myFirstPipeline' Example configuration when you want to execute only ABAP Unit Test. steps : <...> gctsExecuteABAPUnitTests : host : 'https://abap.server.com:port' client : '000' abapCredentialsId : 'ABAPUserPasswordCredentialsId' repository : 'myrepo' atcCheck : false scope : 'packages' workspace : '/var/jenkins_home/workspace/myFirstPipeline' Example configuration for the use of recordIssue step to make the findings visible in Jenkins interface. stage ( 'ABAP Unit Tests' ) { steps { script { try { gctsExecuteABAPUnitTests ( script: this , commit: \"${env.GIT_COMMIT}\" , workspace: \"${WORKSPACE}\" ) } catch ( Exception ex ) { currentBuild . result = 'FAILURE' unstable ( message: \"${STAGE_NAME} is unstable\" ) } } } } stage ( 'Results in Checkstyle' ) { steps { recordIssues ( enabledForFailure: true , aggregatingResults: true , tools: [ checkStyle ( pattern: 'ATCResults.xml' , reportEncoding: 'UTF8' ), checkStyle ( pattern: 'AUnitResults.xml' , reportEncoding: 'UTF8' )] ) } } } Note: If you have disabled atcCheck or aUnitTest , than you also need to remove the corresponding ATCResults.xml or AUnitResults.xml from recordIssues step. In the example below the atcCheck was disabled, so ATCResults.xml was removed. recordIssues ( enabledForFailure: true , aggregatingResults: true , tools: [ checkStyle ( pattern: 'AUnitResults.xml' , reportEncoding: 'UTF8' )] )","title":"Example"},{"location":"steps/gctsRollback/","text":"gctsRollback \u00b6 Perfoms a rollback of one (default) or several commits Description \u00b6 This step performs a rollback of commits in a local ABAP repository. If a commit parameter is specified, it will be used as the target commit for the rollback. If no commit parameter is specified and the remote repository domain is 'github.com', the last commit with the status 'success' will be used for the rollback. Otherwise, gctsRollback will roll back to the previously active commit in the local repository. Usage \u00b6 We recommend to define values of step parameters via .pipeline/config.yml file . In this case, calling the step is essentially reduced to defining the step name. Calling the step can be done either in an orchestrator specific way (e.g. via a Jenkins library step) or on the command line. Jenkins Command Line library ( 'piper-lib-os' ) gctsRollback script: this piper gctsRollback Prerequisites \u00b6 This step performs a rollback of commit(s) in a local ABAP system repository. If a commit parameter is specified, it will be used as the target commit for the rollback. If no commit parameter is specified and the remote repository domain is 'github.com', the last commit with the status 'success' will be used for the rollback. Otherwise, gctsRollback will roll back to the previously active commit in the local repository. More information about the Git-enabled Change and Transport System (gCTS) . Parameters \u00b6 Overview - Step \u00b6 Name Mandatory Additional information client yes host yes password (yes) pass via ENV or Jenkins credentials ( abapCredentialsId ) repository yes script (yes) reference to Jenkins main pipeline script username (yes) pass via ENV or Jenkins credentials ( abapCredentialsId ) commit no githubPersonalAccessToken no pass via ENV or Jenkins credentials ( githubPersonalAccessTokenId ) queryParameters no skipSSLVerification no verbose no activates debug output Overview - Execution Environment \u00b6 Orchestrator-specific only These parameters are relevant for orchestrator usage and not considered when using the command line option. Name Mandatory Additional information Details \u00b6 client \u00b6 Specifies the client of the ABAP system to be addressed back to overview Scope Details Aliases - Type string Mandatory yes Default $PIPER_client (if set) Secret no Configuration scope \u2612 parameter \u2610 general \u2612 steps \u2612 stages Resource references none commit \u00b6 Specifies the target commit for the rollback back to overview Scope Details Aliases - Type string Mandatory no Default $PIPER_commit (if set) Secret no Configuration scope \u2612 parameter \u2610 general \u2612 steps \u2612 stages Resource references none githubPersonalAccessToken \u00b6 GitHub personal access token with at least read permissions for the remote repository back to overview Scope Details Aliases - Type string Mandatory no Default $PIPER_githubPersonalAccessToken (if set) Secret yes Configuration scope \u2612 parameter \u2610 general \u2612 steps \u2612 stages Resource references Jenkins credential id: id: githubPersonalAccessTokenId host \u00b6 Protocol and host of the ABAP system, including the port. Please provide in the format <protocol>://<host>:<port> . Supported protocols are http and https . back to overview Scope Details Aliases - Type string Mandatory yes Default $PIPER_host (if set) Secret no Configuration scope \u2612 parameter \u2610 general \u2612 steps \u2612 stages Resource references none password \u00b6 Password of the ABAP user that authenticates to the ABAP system. Note - Don\u00b4t provide this parameter directly. Either set it in the environment, or in the Jenkins credentials store, and provide the ID as value of the abapCredentialsId parameter. back to overview Scope Details Aliases - Type string Mandatory yes Default $PIPER_password (if set) Secret yes Configuration scope \u2612 parameter \u2610 general \u2612 steps \u2612 stages Resource references Jenkins credential id: id: abapCredentialsId reference to: password queryParameters \u00b6 Specifies pairs of key and value query parameters for the api requests back to overview Scope Details Aliases - Type map[string]interface{} Mandatory no Default $PIPER_queryParameters (if set) Secret no Configuration scope \u2612 parameter \u2610 general \u2612 steps \u2612 stages Resource references none repository \u00b6 Specifies the name (ID) of the local repsitory on the ABAP system back to overview Scope Details Aliases - Type string Mandatory yes Default $PIPER_repository (if set) Secret no Configuration scope \u2612 parameter \u2610 general \u2612 steps \u2612 stages Resource references none script \u00b6 The common script environment of the Jenkinsfile running. Typically the reference to the script calling the pipeline step is provided with the this parameter, as in script: this . This allows the function to access the commonPipelineEnvironment for retrieving, e.g. configuration parameters. back to overview Scope Details Aliases - Type Jenkins Script Mandatory yes Default Secret no Configuration scope \u2610 parameter \u2610 general \u2610 steps \u2610 stages Resource references none skipSSLVerification \u00b6 You can skip the SSL (Secure Socket Layer) verification for the http client back to overview Scope Details Aliases - Type bool Mandatory no Default false Possible values - true - false Secret no Configuration scope \u2612 parameter \u2610 general \u2612 steps \u2612 stages Resource references none username \u00b6 User that authenticates to the ABAP system. Note - Don't provide this parameter directly. Either set it in the environment, or in the Jenkins credentials store, and provide the ID as value of the abapCredentialsId parameter. back to overview Scope Details Aliases - Type string Mandatory yes Default $PIPER_username (if set) Secret yes Configuration scope \u2612 parameter \u2610 general \u2612 steps \u2612 stages Resource references Jenkins credential id: id: abapCredentialsId reference to: username verbose \u00b6 verbose output back to overview Scope Details Aliases - Type bool Mandatory no Default false Possible values - true - false Secret no Configuration scope \u2612 parameter \u2612 general \u2612 steps \u2612 stages Resource references none abapCredentialsId \u00b6 ID taken from the Jenkins credentials store containing user name and password of the user that authenticates to the ABAP system on which you want to execute the rollback. back to overview Scope Details Aliases - Type string Configuration scope \u2612 parameter \u2612 general \u2612 steps \u2612 stages githubPersonalAccessTokenId \u00b6 GitHub personal access token with at least read permissions for the remote repository back to overview Scope Details Aliases - Type string Configuration scope \u2612 parameter \u2612 general \u2612 steps \u2612 stages Example \u00b6 Example configuration for the use in a Jenkinsfile. gctsRollback ( script: this , host: \"https://abap.server.com:port\" , client: \"000\" , abapCredentialsId: 'ABAPUserPasswordCredentialsId' , repository: \"myrepo\" ) Example for the use in a YAML configuration file (such as .pipeline/config.yaml ). steps : <...> gctsRollback : host : \"https://abap.server.com:port\" client : \"000\" abapCredentialsId : 'ABAPUserPasswordCredentialsId' repository : \"myrepo\"","title":"gctsRollback"},{"location":"steps/gctsRollback/#gctsrollback","text":"Perfoms a rollback of one (default) or several commits","title":"gctsRollback"},{"location":"steps/gctsRollback/#description","text":"This step performs a rollback of commits in a local ABAP repository. If a commit parameter is specified, it will be used as the target commit for the rollback. If no commit parameter is specified and the remote repository domain is 'github.com', the last commit with the status 'success' will be used for the rollback. Otherwise, gctsRollback will roll back to the previously active commit in the local repository.","title":"Description"},{"location":"steps/gctsRollback/#usage","text":"We recommend to define values of step parameters via .pipeline/config.yml file . In this case, calling the step is essentially reduced to defining the step name. Calling the step can be done either in an orchestrator specific way (e.g. via a Jenkins library step) or on the command line. Jenkins Command Line library ( 'piper-lib-os' ) gctsRollback script: this piper gctsRollback","title":"Usage"},{"location":"steps/gctsRollback/#prerequisites","text":"This step performs a rollback of commit(s) in a local ABAP system repository. If a commit parameter is specified, it will be used as the target commit for the rollback. If no commit parameter is specified and the remote repository domain is 'github.com', the last commit with the status 'success' will be used for the rollback. Otherwise, gctsRollback will roll back to the previously active commit in the local repository. More information about the Git-enabled Change and Transport System (gCTS) .","title":"Prerequisites"},{"location":"steps/gctsRollback/#parameters","text":"","title":"Parameters"},{"location":"steps/gctsRollback/#overview-step","text":"Name Mandatory Additional information client yes host yes password (yes) pass via ENV or Jenkins credentials ( abapCredentialsId ) repository yes script (yes) reference to Jenkins main pipeline script username (yes) pass via ENV or Jenkins credentials ( abapCredentialsId ) commit no githubPersonalAccessToken no pass via ENV or Jenkins credentials ( githubPersonalAccessTokenId ) queryParameters no skipSSLVerification no verbose no activates debug output","title":"Overview - Step"},{"location":"steps/gctsRollback/#overview-execution-environment","text":"Orchestrator-specific only These parameters are relevant for orchestrator usage and not considered when using the command line option. Name Mandatory Additional information","title":"Overview - Execution Environment"},{"location":"steps/gctsRollback/#details","text":"","title":"Details"},{"location":"steps/gctsRollback/#client","text":"Specifies the client of the ABAP system to be addressed back to overview Scope Details Aliases - Type string Mandatory yes Default $PIPER_client (if set) Secret no Configuration scope \u2612 parameter \u2610 general \u2612 steps \u2612 stages Resource references none","title":"client"},{"location":"steps/gctsRollback/#commit","text":"Specifies the target commit for the rollback back to overview Scope Details Aliases - Type string Mandatory no Default $PIPER_commit (if set) Secret no Configuration scope \u2612 parameter \u2610 general \u2612 steps \u2612 stages Resource references none","title":"commit"},{"location":"steps/gctsRollback/#githubpersonalaccesstoken","text":"GitHub personal access token with at least read permissions for the remote repository back to overview Scope Details Aliases - Type string Mandatory no Default $PIPER_githubPersonalAccessToken (if set) Secret yes Configuration scope \u2612 parameter \u2610 general \u2612 steps \u2612 stages Resource references Jenkins credential id: id: githubPersonalAccessTokenId","title":"githubPersonalAccessToken"},{"location":"steps/gctsRollback/#host","text":"Protocol and host of the ABAP system, including the port. Please provide in the format <protocol>://<host>:<port> . Supported protocols are http and https . back to overview Scope Details Aliases - Type string Mandatory yes Default $PIPER_host (if set) Secret no Configuration scope \u2612 parameter \u2610 general \u2612 steps \u2612 stages Resource references none","title":"host"},{"location":"steps/gctsRollback/#password","text":"Password of the ABAP user that authenticates to the ABAP system. Note - Don\u00b4t provide this parameter directly. Either set it in the environment, or in the Jenkins credentials store, and provide the ID as value of the abapCredentialsId parameter. back to overview Scope Details Aliases - Type string Mandatory yes Default $PIPER_password (if set) Secret yes Configuration scope \u2612 parameter \u2610 general \u2612 steps \u2612 stages Resource references Jenkins credential id: id: abapCredentialsId reference to: password","title":"password"},{"location":"steps/gctsRollback/#queryparameters","text":"Specifies pairs of key and value query parameters for the api requests back to overview Scope Details Aliases - Type map[string]interface{} Mandatory no Default $PIPER_queryParameters (if set) Secret no Configuration scope \u2612 parameter \u2610 general \u2612 steps \u2612 stages Resource references none","title":"queryParameters"},{"location":"steps/gctsRollback/#repository","text":"Specifies the name (ID) of the local repsitory on the ABAP system back to overview Scope Details Aliases - Type string Mandatory yes Default $PIPER_repository (if set) Secret no Configuration scope \u2612 parameter \u2610 general \u2612 steps \u2612 stages Resource references none","title":"repository"},{"location":"steps/gctsRollback/#script","text":"The common script environment of the Jenkinsfile running. Typically the reference to the script calling the pipeline step is provided with the this parameter, as in script: this . This allows the function to access the commonPipelineEnvironment for retrieving, e.g. configuration parameters. back to overview Scope Details Aliases - Type Jenkins Script Mandatory yes Default Secret no Configuration scope \u2610 parameter \u2610 general \u2610 steps \u2610 stages Resource references none","title":"script"},{"location":"steps/gctsRollback/#skipsslverification","text":"You can skip the SSL (Secure Socket Layer) verification for the http client back to overview Scope Details Aliases - Type bool Mandatory no Default false Possible values - true - false Secret no Configuration scope \u2612 parameter \u2610 general \u2612 steps \u2612 stages Resource references none","title":"skipSSLVerification"},{"location":"steps/gctsRollback/#username","text":"User that authenticates to the ABAP system. Note - Don't provide this parameter directly. Either set it in the environment, or in the Jenkins credentials store, and provide the ID as value of the abapCredentialsId parameter. back to overview Scope Details Aliases - Type string Mandatory yes Default $PIPER_username (if set) Secret yes Configuration scope \u2612 parameter \u2610 general \u2612 steps \u2612 stages Resource references Jenkins credential id: id: abapCredentialsId reference to: username","title":"username"},{"location":"steps/gctsRollback/#verbose","text":"verbose output back to overview Scope Details Aliases - Type bool Mandatory no Default false Possible values - true - false Secret no Configuration scope \u2612 parameter \u2612 general \u2612 steps \u2612 stages Resource references none","title":"verbose"},{"location":"steps/gctsRollback/#abapcredentialsid","text":"ID taken from the Jenkins credentials store containing user name and password of the user that authenticates to the ABAP system on which you want to execute the rollback. back to overview Scope Details Aliases - Type string Configuration scope \u2612 parameter \u2612 general \u2612 steps \u2612 stages","title":"abapCredentialsId"},{"location":"steps/gctsRollback/#githubpersonalaccesstokenid","text":"GitHub personal access token with at least read permissions for the remote repository back to overview Scope Details Aliases - Type string Configuration scope \u2612 parameter \u2612 general \u2612 steps \u2612 stages","title":"githubPersonalAccessTokenId"},{"location":"steps/gctsRollback/#example","text":"Example configuration for the use in a Jenkinsfile. gctsRollback ( script: this , host: \"https://abap.server.com:port\" , client: \"000\" , abapCredentialsId: 'ABAPUserPasswordCredentialsId' , repository: \"myrepo\" ) Example for the use in a YAML configuration file (such as .pipeline/config.yaml ). steps : <...> gctsRollback : host : \"https://abap.server.com:port\" client : \"000\" abapCredentialsId : 'ABAPUserPasswordCredentialsId' repository : \"myrepo\"","title":"Example"},{"location":"steps/githubCheckBranchProtection/","text":"githubCheckBranchProtection \u00b6 Check branch protection of a GitHub branch Prerequisites \u00b6 You need to create a personal access token within GitHub and add this to the Jenkins credentials store. Please see GitHub documentation for details about creating the personal access token . Parameters \u00b6 Overview - Step \u00b6 Name Mandatory Additional information owner yes repository yes script (yes) reference to Jenkins main pipeline script token (yes) pass via ENV, Vault or Jenkins credentials ( githubTokenCredentialsId ) apiUrl no branch no requireEnforceAdmins no requiredApprovingReviewCount no requiredChecks no verbose no activates debug output Overview - Execution Environment \u00b6 Orchestrator-specific only These parameters are relevant for orchestrator usage and not considered when using the command line option. Name Mandatory Additional information Details \u00b6 apiUrl \u00b6 Set the GitHub API url. back to overview Scope Details Aliases githubApiUrl Type string Mandatory no Default https://api.github.com Secret no Configuration scope \u2612 parameter \u2612 general \u2612 steps \u2612 stages Resource references none branch \u00b6 The name of the branch for which the protection settings should be checked. back to overview Scope Details Aliases - Type string Mandatory no Default master Secret no Configuration scope \u2612 parameter \u2610 general \u2612 steps \u2612 stages Resource references none owner \u00b6 Name of the GitHub organization. back to overview Scope Details Aliases githubOrg Type string Mandatory yes Default $PIPER_owner (if set) Secret no Configuration scope \u2612 parameter \u2610 general \u2612 steps \u2612 stages Resource references commonPipelineEnvironment : reference to: github/owner repository \u00b6 Name of the GitHub repository. back to overview Scope Details Aliases githubRepo Type string Mandatory yes Default $PIPER_repository (if set) Secret no Configuration scope \u2612 parameter \u2610 general \u2612 steps \u2612 stages Resource references commonPipelineEnvironment : reference to: github/repository requireEnforceAdmins \u00b6 Check if 'Include Administrators' option is set in the GitHub repository configuration. back to overview Scope Details Aliases - Type bool Mandatory no Default false Possible values - true - false Secret no Configuration scope \u2612 parameter \u2610 general \u2612 steps \u2612 stages Resource references none requiredApprovingReviewCount \u00b6 Check if 'Require pull request reviews before merging' option is set with at least the defined number of reviewers in the GitHub repository configuration. back to overview Scope Details Aliases - Type int Mandatory no Default 0 Secret no Configuration scope \u2612 parameter \u2610 general \u2612 steps \u2612 stages Resource references none requiredChecks \u00b6 List of checks which have to be set to 'required' in the GitHub repository configuration. back to overview Scope Details Aliases - Type []string Mandatory no Default $PIPER_requiredChecks (if set) Secret no Configuration scope \u2612 parameter \u2610 general \u2612 steps \u2612 stages Resource references none script \u00b6 The common script environment of the Jenkinsfile running. Typically the reference to the script calling the pipeline step is provided with the this parameter, as in script: this . This allows the function to access the commonPipelineEnvironment for retrieving, e.g. configuration parameters. back to overview Scope Details Aliases - Type Jenkins Script Mandatory yes Default Secret no Configuration scope \u2610 parameter \u2610 general \u2610 steps \u2610 stages Resource references none token \u00b6 GitHub personal access token as per https://help.github.com/en/github/authenticating-to-github/creating-a-personal-access-token-for-the-command-line. back to overview Scope Details Aliases - githubToken - access_token Type string Mandatory yes Default $PIPER_token (if set) Secret yes Configuration scope \u2612 parameter \u2612 general \u2612 steps \u2612 stages Resource references Jenkins credential id: id: githubTokenCredentialsId Vault resource: name: githubVaultSecretName default value: github Vault paths: $(vaultPath)/github $(vaultBasePath)/$(vaultPipelineName)/github $(vaultBasePath)/GROUP-SECRETS/github verbose \u00b6 verbose output back to overview Scope Details Aliases - Type bool Mandatory no Default false Possible values - true - false Secret no Configuration scope \u2612 parameter \u2612 general \u2612 steps \u2612 stages Resource references none githubTokenCredentialsId \u00b6 Jenkins 'Secret text' credentials ID containing token to authenticate to GitHub. back to overview Scope Details Aliases - Type string Configuration scope \u2612 parameter \u2612 general \u2612 steps \u2612 stages Description \u00b6 This step allows you to check if certain branch protection rules are fulfilled. It can for example be used to verify if certain status checks are mandatory. This can be helpful to decide if a certain check needs to be performed again after merging a pull request. Usage \u00b6 We recommend to define values of step parameters via .pipeline/config.yml file . In this case, calling the step is essentially reduced to defining the step name. Calling the step can be done either in an orchestrator specific way (e.g. via a Jenkins library step) or on the command line. Jenkins Command Line library ( 'piper-lib-os' ) githubCheckBranchProtection script: this piper githubCheckBranchProtection","title":"githubCheckBranchProtection"},{"location":"steps/githubCheckBranchProtection/#githubcheckbranchprotection","text":"Check branch protection of a GitHub branch","title":"githubCheckBranchProtection"},{"location":"steps/githubCheckBranchProtection/#prerequisites","text":"You need to create a personal access token within GitHub and add this to the Jenkins credentials store. Please see GitHub documentation for details about creating the personal access token .","title":"Prerequisites"},{"location":"steps/githubCheckBranchProtection/#parameters","text":"","title":"Parameters"},{"location":"steps/githubCheckBranchProtection/#overview-step","text":"Name Mandatory Additional information owner yes repository yes script (yes) reference to Jenkins main pipeline script token (yes) pass via ENV, Vault or Jenkins credentials ( githubTokenCredentialsId ) apiUrl no branch no requireEnforceAdmins no requiredApprovingReviewCount no requiredChecks no verbose no activates debug output","title":"Overview - Step"},{"location":"steps/githubCheckBranchProtection/#overview-execution-environment","text":"Orchestrator-specific only These parameters are relevant for orchestrator usage and not considered when using the command line option. Name Mandatory Additional information","title":"Overview - Execution Environment"},{"location":"steps/githubCheckBranchProtection/#details","text":"","title":"Details"},{"location":"steps/githubCheckBranchProtection/#apiurl","text":"Set the GitHub API url. back to overview Scope Details Aliases githubApiUrl Type string Mandatory no Default https://api.github.com Secret no Configuration scope \u2612 parameter \u2612 general \u2612 steps \u2612 stages Resource references none","title":"apiUrl"},{"location":"steps/githubCheckBranchProtection/#branch","text":"The name of the branch for which the protection settings should be checked. back to overview Scope Details Aliases - Type string Mandatory no Default master Secret no Configuration scope \u2612 parameter \u2610 general \u2612 steps \u2612 stages Resource references none","title":"branch"},{"location":"steps/githubCheckBranchProtection/#owner","text":"Name of the GitHub organization. back to overview Scope Details Aliases githubOrg Type string Mandatory yes Default $PIPER_owner (if set) Secret no Configuration scope \u2612 parameter \u2610 general \u2612 steps \u2612 stages Resource references commonPipelineEnvironment : reference to: github/owner","title":"owner"},{"location":"steps/githubCheckBranchProtection/#repository","text":"Name of the GitHub repository. back to overview Scope Details Aliases githubRepo Type string Mandatory yes Default $PIPER_repository (if set) Secret no Configuration scope \u2612 parameter \u2610 general \u2612 steps \u2612 stages Resource references commonPipelineEnvironment : reference to: github/repository","title":"repository"},{"location":"steps/githubCheckBranchProtection/#requireenforceadmins","text":"Check if 'Include Administrators' option is set in the GitHub repository configuration. back to overview Scope Details Aliases - Type bool Mandatory no Default false Possible values - true - false Secret no Configuration scope \u2612 parameter \u2610 general \u2612 steps \u2612 stages Resource references none","title":"requireEnforceAdmins"},{"location":"steps/githubCheckBranchProtection/#requiredapprovingreviewcount","text":"Check if 'Require pull request reviews before merging' option is set with at least the defined number of reviewers in the GitHub repository configuration. back to overview Scope Details Aliases - Type int Mandatory no Default 0 Secret no Configuration scope \u2612 parameter \u2610 general \u2612 steps \u2612 stages Resource references none","title":"requiredApprovingReviewCount"},{"location":"steps/githubCheckBranchProtection/#requiredchecks","text":"List of checks which have to be set to 'required' in the GitHub repository configuration. back to overview Scope Details Aliases - Type []string Mandatory no Default $PIPER_requiredChecks (if set) Secret no Configuration scope \u2612 parameter \u2610 general \u2612 steps \u2612 stages Resource references none","title":"requiredChecks"},{"location":"steps/githubCheckBranchProtection/#script","text":"The common script environment of the Jenkinsfile running. Typically the reference to the script calling the pipeline step is provided with the this parameter, as in script: this . This allows the function to access the commonPipelineEnvironment for retrieving, e.g. configuration parameters. back to overview Scope Details Aliases - Type Jenkins Script Mandatory yes Default Secret no Configuration scope \u2610 parameter \u2610 general \u2610 steps \u2610 stages Resource references none","title":"script"},{"location":"steps/githubCheckBranchProtection/#token","text":"GitHub personal access token as per https://help.github.com/en/github/authenticating-to-github/creating-a-personal-access-token-for-the-command-line. back to overview Scope Details Aliases - githubToken - access_token Type string Mandatory yes Default $PIPER_token (if set) Secret yes Configuration scope \u2612 parameter \u2612 general \u2612 steps \u2612 stages Resource references Jenkins credential id: id: githubTokenCredentialsId Vault resource: name: githubVaultSecretName default value: github Vault paths: $(vaultPath)/github $(vaultBasePath)/$(vaultPipelineName)/github $(vaultBasePath)/GROUP-SECRETS/github","title":"token"},{"location":"steps/githubCheckBranchProtection/#verbose","text":"verbose output back to overview Scope Details Aliases - Type bool Mandatory no Default false Possible values - true - false Secret no Configuration scope \u2612 parameter \u2612 general \u2612 steps \u2612 stages Resource references none","title":"verbose"},{"location":"steps/githubCheckBranchProtection/#githubtokencredentialsid","text":"Jenkins 'Secret text' credentials ID containing token to authenticate to GitHub. back to overview Scope Details Aliases - Type string Configuration scope \u2612 parameter \u2612 general \u2612 steps \u2612 stages","title":"githubTokenCredentialsId"},{"location":"steps/githubCheckBranchProtection/#description","text":"This step allows you to check if certain branch protection rules are fulfilled. It can for example be used to verify if certain status checks are mandatory. This can be helpful to decide if a certain check needs to be performed again after merging a pull request.","title":"Description"},{"location":"steps/githubCheckBranchProtection/#usage","text":"We recommend to define values of step parameters via .pipeline/config.yml file . In this case, calling the step is essentially reduced to defining the step name. Calling the step can be done either in an orchestrator specific way (e.g. via a Jenkins library step) or on the command line. Jenkins Command Line library ( 'piper-lib-os' ) githubCheckBranchProtection script: this piper githubCheckBranchProtection","title":"Usage"},{"location":"steps/githubCommentIssue/","text":"githubCommentIssue \u00b6 Comment on GitHub issues and pull requests. Prerequisites \u00b6 You need to create a personal access token within GitHub and add this to the Jenkins credentials store. Please see GitHub documentation for details about creating the personal access token . Parameters \u00b6 Overview - Step \u00b6 Name Mandatory Additional information body yes number yes owner yes repository yes script (yes) reference to Jenkins main pipeline script token (yes) pass via ENV, Vault or Jenkins credentials ( githubTokenCredentialsId ) apiUrl no verbose no activates debug output Overview - Execution Environment \u00b6 Orchestrator-specific only These parameters are relevant for orchestrator usage and not considered when using the command line option. Name Mandatory Additional information Details \u00b6 apiUrl \u00b6 Set the GitHub API url. back to overview Scope Details Aliases githubApiUrl Type string Mandatory no Default https://api.github.com Secret no Configuration scope \u2612 parameter \u2612 general \u2612 steps \u2612 stages Resource references none body \u00b6 Defines the content of the comment, e.g. using markdown syntax. back to overview Scope Details Aliases - Type string Mandatory yes Default $PIPER_body (if set) Secret no Configuration scope \u2612 parameter \u2610 general \u2612 steps \u2612 stages Resource references none number \u00b6 Defines the number of the GitHub issue/pull request. back to overview Scope Details Aliases - Type int Mandatory yes Default 0 Secret no Configuration scope \u2612 parameter \u2610 general \u2612 steps \u2612 stages Resource references none owner \u00b6 Name of the GitHub organization. back to overview Scope Details Aliases githubOrg Type string Mandatory yes Default $PIPER_owner (if set) Secret no Configuration scope \u2612 parameter \u2610 general \u2612 steps \u2612 stages Resource references commonPipelineEnvironment : reference to: github/owner repository \u00b6 Name of the GitHub repository. back to overview Scope Details Aliases githubRepo Type string Mandatory yes Default $PIPER_repository (if set) Secret no Configuration scope \u2612 parameter \u2610 general \u2612 steps \u2612 stages Resource references commonPipelineEnvironment : reference to: github/repository script \u00b6 The common script environment of the Jenkinsfile running. Typically the reference to the script calling the pipeline step is provided with the this parameter, as in script: this . This allows the function to access the commonPipelineEnvironment for retrieving, e.g. configuration parameters. back to overview Scope Details Aliases - Type Jenkins Script Mandatory yes Default Secret no Configuration scope \u2610 parameter \u2610 general \u2610 steps \u2610 stages Resource references none token \u00b6 GitHub personal access token as per https://help.github.com/en/github/authenticating-to-github/creating-a-personal-access-token-for-the-command-line. back to overview Scope Details Aliases - githubToken - access_token Type string Mandatory yes Default $PIPER_token (if set) Secret yes Configuration scope \u2612 parameter \u2612 general \u2612 steps \u2612 stages Resource references Jenkins credential id: id: githubTokenCredentialsId Vault resource: name: githubVaultSecretName default value: github Vault paths: $(vaultPath)/github $(vaultBasePath)/$(vaultPipelineName)/github $(vaultBasePath)/GROUP-SECRETS/github verbose \u00b6 verbose output back to overview Scope Details Aliases - Type bool Mandatory no Default false Possible values - true - false Secret no Configuration scope \u2612 parameter \u2612 general \u2612 steps \u2612 stages Resource references none githubTokenCredentialsId \u00b6 Jenkins 'Secret text' credentials ID containing token to authenticate to GitHub. back to overview Scope Details Aliases - Type string Configuration scope \u2612 parameter \u2612 general \u2612 steps \u2612 stages Description \u00b6 This step allows you to add comments to existing GitHub issues or pull requests. Pull requests are considered similar to issues and thus adding a comment can be done to an existing pull request as well. This comes in very handy when you want to make developers aware of certain things during a PR voting process, for example. Usage \u00b6 We recommend to define values of step parameters via .pipeline/config.yml file . In this case, calling the step is essentially reduced to defining the step name. Calling the step can be done either in an orchestrator specific way (e.g. via a Jenkins library step) or on the command line. Jenkins Command Line library ( 'piper-lib-os' ) githubCommentIssue script: this piper githubCommentIssue","title":"githubCommentIssue"},{"location":"steps/githubCommentIssue/#githubcommentissue","text":"Comment on GitHub issues and pull requests.","title":"githubCommentIssue"},{"location":"steps/githubCommentIssue/#prerequisites","text":"You need to create a personal access token within GitHub and add this to the Jenkins credentials store. Please see GitHub documentation for details about creating the personal access token .","title":"Prerequisites"},{"location":"steps/githubCommentIssue/#parameters","text":"","title":"Parameters"},{"location":"steps/githubCommentIssue/#overview-step","text":"Name Mandatory Additional information body yes number yes owner yes repository yes script (yes) reference to Jenkins main pipeline script token (yes) pass via ENV, Vault or Jenkins credentials ( githubTokenCredentialsId ) apiUrl no verbose no activates debug output","title":"Overview - Step"},{"location":"steps/githubCommentIssue/#overview-execution-environment","text":"Orchestrator-specific only These parameters are relevant for orchestrator usage and not considered when using the command line option. Name Mandatory Additional information","title":"Overview - Execution Environment"},{"location":"steps/githubCommentIssue/#details","text":"","title":"Details"},{"location":"steps/githubCommentIssue/#apiurl","text":"Set the GitHub API url. back to overview Scope Details Aliases githubApiUrl Type string Mandatory no Default https://api.github.com Secret no Configuration scope \u2612 parameter \u2612 general \u2612 steps \u2612 stages Resource references none","title":"apiUrl"},{"location":"steps/githubCommentIssue/#body","text":"Defines the content of the comment, e.g. using markdown syntax. back to overview Scope Details Aliases - Type string Mandatory yes Default $PIPER_body (if set) Secret no Configuration scope \u2612 parameter \u2610 general \u2612 steps \u2612 stages Resource references none","title":"body"},{"location":"steps/githubCommentIssue/#number","text":"Defines the number of the GitHub issue/pull request. back to overview Scope Details Aliases - Type int Mandatory yes Default 0 Secret no Configuration scope \u2612 parameter \u2610 general \u2612 steps \u2612 stages Resource references none","title":"number"},{"location":"steps/githubCommentIssue/#owner","text":"Name of the GitHub organization. back to overview Scope Details Aliases githubOrg Type string Mandatory yes Default $PIPER_owner (if set) Secret no Configuration scope \u2612 parameter \u2610 general \u2612 steps \u2612 stages Resource references commonPipelineEnvironment : reference to: github/owner","title":"owner"},{"location":"steps/githubCommentIssue/#repository","text":"Name of the GitHub repository. back to overview Scope Details Aliases githubRepo Type string Mandatory yes Default $PIPER_repository (if set) Secret no Configuration scope \u2612 parameter \u2610 general \u2612 steps \u2612 stages Resource references commonPipelineEnvironment : reference to: github/repository","title":"repository"},{"location":"steps/githubCommentIssue/#script","text":"The common script environment of the Jenkinsfile running. Typically the reference to the script calling the pipeline step is provided with the this parameter, as in script: this . This allows the function to access the commonPipelineEnvironment for retrieving, e.g. configuration parameters. back to overview Scope Details Aliases - Type Jenkins Script Mandatory yes Default Secret no Configuration scope \u2610 parameter \u2610 general \u2610 steps \u2610 stages Resource references none","title":"script"},{"location":"steps/githubCommentIssue/#token","text":"GitHub personal access token as per https://help.github.com/en/github/authenticating-to-github/creating-a-personal-access-token-for-the-command-line. back to overview Scope Details Aliases - githubToken - access_token Type string Mandatory yes Default $PIPER_token (if set) Secret yes Configuration scope \u2612 parameter \u2612 general \u2612 steps \u2612 stages Resource references Jenkins credential id: id: githubTokenCredentialsId Vault resource: name: githubVaultSecretName default value: github Vault paths: $(vaultPath)/github $(vaultBasePath)/$(vaultPipelineName)/github $(vaultBasePath)/GROUP-SECRETS/github","title":"token"},{"location":"steps/githubCommentIssue/#verbose","text":"verbose output back to overview Scope Details Aliases - Type bool Mandatory no Default false Possible values - true - false Secret no Configuration scope \u2612 parameter \u2612 general \u2612 steps \u2612 stages Resource references none","title":"verbose"},{"location":"steps/githubCommentIssue/#githubtokencredentialsid","text":"Jenkins 'Secret text' credentials ID containing token to authenticate to GitHub. back to overview Scope Details Aliases - Type string Configuration scope \u2612 parameter \u2612 general \u2612 steps \u2612 stages","title":"githubTokenCredentialsId"},{"location":"steps/githubCommentIssue/#description","text":"This step allows you to add comments to existing GitHub issues or pull requests. Pull requests are considered similar to issues and thus adding a comment can be done to an existing pull request as well. This comes in very handy when you want to make developers aware of certain things during a PR voting process, for example.","title":"Description"},{"location":"steps/githubCommentIssue/#usage","text":"We recommend to define values of step parameters via .pipeline/config.yml file . In this case, calling the step is essentially reduced to defining the step name. Calling the step can be done either in an orchestrator specific way (e.g. via a Jenkins library step) or on the command line. Jenkins Command Line library ( 'piper-lib-os' ) githubCommentIssue script: this piper githubCommentIssue","title":"Usage"},{"location":"steps/githubCreateIssue/","text":"githubCreateIssue \u00b6 Create a new GitHub issue. Prerequisites \u00b6 You need to create a personal access token within GitHub and add this to the Jenkins credentials store. Please see GitHub documentation for details about creating the personal access token . Parameters \u00b6 Overview - Step \u00b6 Name Mandatory Additional information owner yes repository yes script (yes) reference to Jenkins main pipeline script title yes token (yes) pass via ENV, Vault or Jenkins credentials ( githubTokenCredentialsId ) apiUrl no assignees no body no bodyFilePath no chunkSize no updateExisting no verbose no activates debug output Overview - Execution Environment \u00b6 Orchestrator-specific only These parameters are relevant for orchestrator usage and not considered when using the command line option. Name Mandatory Additional information Details \u00b6 apiUrl \u00b6 Set the GitHub API url. back to overview Scope Details Aliases githubApiUrl Type string Mandatory no Default https://api.github.com Secret no Configuration scope \u2612 parameter \u2612 general \u2612 steps \u2612 stages Resource references none assignees \u00b6 Defines the assignees for the Issue. back to overview Scope Details Aliases - Type []string Mandatory no Default Secret no Configuration scope \u2612 parameter \u2610 general \u2612 steps \u2612 stages Resource references none body \u00b6 Defines the content of the issue, e.g. using markdown syntax. back to overview Scope Details Aliases - Type string Mandatory no Default $PIPER_body (if set) Secret no Configuration scope \u2612 parameter \u2610 general \u2612 steps \u2612 stages Resource references none bodyFilePath \u00b6 Defines the path to a file containing the markdown content for the issue. This can be used instead of body back to overview Scope Details Aliases - Type string Mandatory no Default $PIPER_bodyFilePath (if set) Secret no Configuration scope \u2612 parameter \u2610 general \u2612 steps \u2612 stages Resource references none chunkSize \u00b6 Defines size of the chunk. If content exceed chunk size it'll be sliced into chunks and stored in comments back to overview Scope Details Aliases - Type int Mandatory no Default 65500 Secret no Configuration scope \u2612 parameter \u2610 general \u2612 steps \u2612 stages Resource references none owner \u00b6 Name of the GitHub organization. back to overview Scope Details Aliases githubOrg Type string Mandatory yes Default $PIPER_owner (if set) Secret no Configuration scope \u2612 parameter \u2610 general \u2612 steps \u2612 stages Resource references commonPipelineEnvironment : reference to: github/owner repository \u00b6 Name of the GitHub repository. back to overview Scope Details Aliases githubRepo Type string Mandatory yes Default $PIPER_repository (if set) Secret no Configuration scope \u2612 parameter \u2610 general \u2612 steps \u2612 stages Resource references commonPipelineEnvironment : reference to: github/repository script \u00b6 The common script environment of the Jenkinsfile running. Typically the reference to the script calling the pipeline step is provided with the this parameter, as in script: this . This allows the function to access the commonPipelineEnvironment for retrieving, e.g. configuration parameters. back to overview Scope Details Aliases - Type Jenkins Script Mandatory yes Default Secret no Configuration scope \u2610 parameter \u2610 general \u2610 steps \u2610 stages Resource references none title \u00b6 Defines the title for the Issue. back to overview Scope Details Aliases - Type string Mandatory yes Default $PIPER_title (if set) Secret no Configuration scope \u2612 parameter \u2610 general \u2612 steps \u2612 stages Resource references none token \u00b6 GitHub personal access token as per https://help.github.com/en/github/authenticating-to-github/creating-a-personal-access-token-for-the-command-line. back to overview Scope Details Aliases - githubToken - access_token Type string Mandatory yes Default $PIPER_token (if set) Secret yes Configuration scope \u2612 parameter \u2612 general \u2612 steps \u2612 stages Resource references Jenkins credential id: id: githubTokenCredentialsId Vault resource: name: githubVaultSecretName default value: github Vault paths: $(vaultPath)/github $(vaultBasePath)/$(vaultPipelineName)/github $(vaultBasePath)/GROUP-SECRETS/github updateExisting \u00b6 Whether to update an existing open issue with the same title by adding a comment instead of creating a new one. back to overview Scope Details Aliases - Type bool Mandatory no Default false Possible values - true - false Secret no Configuration scope \u2612 parameter \u2610 general \u2612 steps \u2612 stages Resource references none verbose \u00b6 verbose output back to overview Scope Details Aliases - Type bool Mandatory no Default false Possible values - true - false Secret no Configuration scope \u2612 parameter \u2612 general \u2612 steps \u2612 stages Resource references none githubTokenCredentialsId \u00b6 Jenkins 'Secret text' credentials ID containing token to authenticate to GitHub. back to overview Scope Details Aliases - Type string Configuration scope \u2612 parameter \u2612 general \u2612 steps \u2612 stages Description \u00b6 This step allows you to create a new GitHub issue. You will be able to use this step for example for regular jobs to report into your repository in case of new security findings. Usage \u00b6 We recommend to define values of step parameters via .pipeline/config.yml file . In this case, calling the step is essentially reduced to defining the step name. Calling the step can be done either in an orchestrator specific way (e.g. via a Jenkins library step) or on the command line. Jenkins Command Line library ( 'piper-lib-os' ) githubCreateIssue script: this piper githubCreateIssue","title":"githubCreateIssue"},{"location":"steps/githubCreateIssue/#githubcreateissue","text":"Create a new GitHub issue.","title":"githubCreateIssue"},{"location":"steps/githubCreateIssue/#prerequisites","text":"You need to create a personal access token within GitHub and add this to the Jenkins credentials store. Please see GitHub documentation for details about creating the personal access token .","title":"Prerequisites"},{"location":"steps/githubCreateIssue/#parameters","text":"","title":"Parameters"},{"location":"steps/githubCreateIssue/#overview-step","text":"Name Mandatory Additional information owner yes repository yes script (yes) reference to Jenkins main pipeline script title yes token (yes) pass via ENV, Vault or Jenkins credentials ( githubTokenCredentialsId ) apiUrl no assignees no body no bodyFilePath no chunkSize no updateExisting no verbose no activates debug output","title":"Overview - Step"},{"location":"steps/githubCreateIssue/#overview-execution-environment","text":"Orchestrator-specific only These parameters are relevant for orchestrator usage and not considered when using the command line option. Name Mandatory Additional information","title":"Overview - Execution Environment"},{"location":"steps/githubCreateIssue/#details","text":"","title":"Details"},{"location":"steps/githubCreateIssue/#apiurl","text":"Set the GitHub API url. back to overview Scope Details Aliases githubApiUrl Type string Mandatory no Default https://api.github.com Secret no Configuration scope \u2612 parameter \u2612 general \u2612 steps \u2612 stages Resource references none","title":"apiUrl"},{"location":"steps/githubCreateIssue/#assignees","text":"Defines the assignees for the Issue. back to overview Scope Details Aliases - Type []string Mandatory no Default Secret no Configuration scope \u2612 parameter \u2610 general \u2612 steps \u2612 stages Resource references none","title":"assignees"},{"location":"steps/githubCreateIssue/#body","text":"Defines the content of the issue, e.g. using markdown syntax. back to overview Scope Details Aliases - Type string Mandatory no Default $PIPER_body (if set) Secret no Configuration scope \u2612 parameter \u2610 general \u2612 steps \u2612 stages Resource references none","title":"body"},{"location":"steps/githubCreateIssue/#bodyfilepath","text":"Defines the path to a file containing the markdown content for the issue. This can be used instead of body back to overview Scope Details Aliases - Type string Mandatory no Default $PIPER_bodyFilePath (if set) Secret no Configuration scope \u2612 parameter \u2610 general \u2612 steps \u2612 stages Resource references none","title":"bodyFilePath"},{"location":"steps/githubCreateIssue/#chunksize","text":"Defines size of the chunk. If content exceed chunk size it'll be sliced into chunks and stored in comments back to overview Scope Details Aliases - Type int Mandatory no Default 65500 Secret no Configuration scope \u2612 parameter \u2610 general \u2612 steps \u2612 stages Resource references none","title":"chunkSize"},{"location":"steps/githubCreateIssue/#owner","text":"Name of the GitHub organization. back to overview Scope Details Aliases githubOrg Type string Mandatory yes Default $PIPER_owner (if set) Secret no Configuration scope \u2612 parameter \u2610 general \u2612 steps \u2612 stages Resource references commonPipelineEnvironment : reference to: github/owner","title":"owner"},{"location":"steps/githubCreateIssue/#repository","text":"Name of the GitHub repository. back to overview Scope Details Aliases githubRepo Type string Mandatory yes Default $PIPER_repository (if set) Secret no Configuration scope \u2612 parameter \u2610 general \u2612 steps \u2612 stages Resource references commonPipelineEnvironment : reference to: github/repository","title":"repository"},{"location":"steps/githubCreateIssue/#script","text":"The common script environment of the Jenkinsfile running. Typically the reference to the script calling the pipeline step is provided with the this parameter, as in script: this . This allows the function to access the commonPipelineEnvironment for retrieving, e.g. configuration parameters. back to overview Scope Details Aliases - Type Jenkins Script Mandatory yes Default Secret no Configuration scope \u2610 parameter \u2610 general \u2610 steps \u2610 stages Resource references none","title":"script"},{"location":"steps/githubCreateIssue/#title","text":"Defines the title for the Issue. back to overview Scope Details Aliases - Type string Mandatory yes Default $PIPER_title (if set) Secret no Configuration scope \u2612 parameter \u2610 general \u2612 steps \u2612 stages Resource references none","title":"title"},{"location":"steps/githubCreateIssue/#token","text":"GitHub personal access token as per https://help.github.com/en/github/authenticating-to-github/creating-a-personal-access-token-for-the-command-line. back to overview Scope Details Aliases - githubToken - access_token Type string Mandatory yes Default $PIPER_token (if set) Secret yes Configuration scope \u2612 parameter \u2612 general \u2612 steps \u2612 stages Resource references Jenkins credential id: id: githubTokenCredentialsId Vault resource: name: githubVaultSecretName default value: github Vault paths: $(vaultPath)/github $(vaultBasePath)/$(vaultPipelineName)/github $(vaultBasePath)/GROUP-SECRETS/github","title":"token"},{"location":"steps/githubCreateIssue/#updateexisting","text":"Whether to update an existing open issue with the same title by adding a comment instead of creating a new one. back to overview Scope Details Aliases - Type bool Mandatory no Default false Possible values - true - false Secret no Configuration scope \u2612 parameter \u2610 general \u2612 steps \u2612 stages Resource references none","title":"updateExisting"},{"location":"steps/githubCreateIssue/#verbose","text":"verbose output back to overview Scope Details Aliases - Type bool Mandatory no Default false Possible values - true - false Secret no Configuration scope \u2612 parameter \u2612 general \u2612 steps \u2612 stages Resource references none","title":"verbose"},{"location":"steps/githubCreateIssue/#githubtokencredentialsid","text":"Jenkins 'Secret text' credentials ID containing token to authenticate to GitHub. back to overview Scope Details Aliases - Type string Configuration scope \u2612 parameter \u2612 general \u2612 steps \u2612 stages","title":"githubTokenCredentialsId"},{"location":"steps/githubCreateIssue/#description","text":"This step allows you to create a new GitHub issue. You will be able to use this step for example for regular jobs to report into your repository in case of new security findings.","title":"Description"},{"location":"steps/githubCreateIssue/#usage","text":"We recommend to define values of step parameters via .pipeline/config.yml file . In this case, calling the step is essentially reduced to defining the step name. Calling the step can be done either in an orchestrator specific way (e.g. via a Jenkins library step) or on the command line. Jenkins Command Line library ( 'piper-lib-os' ) githubCreateIssue script: this piper githubCreateIssue","title":"Usage"},{"location":"steps/githubCreatePullRequest/","text":"githubCreatePullRequest \u00b6 Create a pull request on GitHub Prerequisites \u00b6 You need to create a personal access token within GitHub and add this to the Jenkins credentials store. Please see GitHub documentation for details about creating the personal access token . Parameters \u00b6 Overview - Step \u00b6 Name Mandatory Additional information base yes body yes head yes owner yes repository yes script (yes) reference to Jenkins main pipeline script title yes token (yes) pass via ENV, Vault or Jenkins credentials ( githubTokenCredentialsId ) apiUrl no assignees no labels no serverUrl no verbose no activates debug output Overview - Execution Environment \u00b6 Orchestrator-specific only These parameters are relevant for orchestrator usage and not considered when using the command line option. Name Mandatory Additional information Details \u00b6 apiUrl \u00b6 Set the GitHub API url. back to overview Scope Details Aliases githubApiUrl Type string Mandatory no Default https://api.github.com Secret no Configuration scope \u2612 parameter \u2612 general \u2612 steps \u2612 stages Resource references none assignees \u00b6 Login names of users to which the PR should be assigned to. back to overview Scope Details Aliases - Type []string Mandatory no Default $PIPER_assignees (if set) Secret no Configuration scope \u2612 parameter \u2610 general \u2612 steps \u2612 stages Resource references none base \u00b6 The name of the branch you want the changes pulled into. back to overview Scope Details Aliases - Type string Mandatory yes Default $PIPER_base (if set) Secret no Configuration scope \u2612 parameter \u2610 general \u2612 steps \u2612 stages Resource references none body \u00b6 The description text of the pull request in markdown format. back to overview Scope Details Aliases - Type string Mandatory yes Default $PIPER_body (if set) Secret no Configuration scope \u2612 parameter \u2610 general \u2612 steps \u2612 stages Resource references none head \u00b6 The name of the branch where your changes are implemented. back to overview Scope Details Aliases - Type string Mandatory yes Default $PIPER_head (if set) Secret no Configuration scope \u2612 parameter \u2610 general \u2612 steps \u2612 stages Resource references none labels \u00b6 Labels to be added to the pull request. back to overview Scope Details Aliases - Type []string Mandatory no Default $PIPER_labels (if set) Secret no Configuration scope \u2612 parameter \u2610 general \u2612 steps \u2612 stages Resource references none owner \u00b6 Name of the GitHub organization. back to overview Scope Details Aliases githubOrg Type string Mandatory yes Default $PIPER_owner (if set) Secret no Configuration scope \u2612 parameter \u2610 general \u2612 steps \u2612 stages Resource references commonPipelineEnvironment : reference to: github/owner repository \u00b6 Name of the GitHub repository. back to overview Scope Details Aliases githubRepo Type string Mandatory yes Default $PIPER_repository (if set) Secret no Configuration scope \u2612 parameter \u2610 general \u2612 steps \u2612 stages Resource references commonPipelineEnvironment : reference to: github/repository script \u00b6 The common script environment of the Jenkinsfile running. Typically the reference to the script calling the pipeline step is provided with the this parameter, as in script: this . This allows the function to access the commonPipelineEnvironment for retrieving, e.g. configuration parameters. back to overview Scope Details Aliases - Type Jenkins Script Mandatory yes Default Secret no Configuration scope \u2610 parameter \u2610 general \u2610 steps \u2610 stages Resource references none serverUrl \u00b6 GitHub server url for end-user access. back to overview Scope Details Aliases githubServerUrl Type string Mandatory no Default https://github.com Secret no Configuration scope \u2612 parameter \u2612 general \u2612 steps \u2612 stages Resource references none title \u00b6 Title of the pull request. back to overview Scope Details Aliases - Type string Mandatory yes Default $PIPER_title (if set) Secret no Configuration scope \u2612 parameter \u2610 general \u2612 steps \u2612 stages Resource references none token \u00b6 GitHub personal access token as per https://help.github.com/en/github/authenticating-to-github/creating-a-personal-access-token-for-the-command-line back to overview Scope Details Aliases - githubToken - access_token Type string Mandatory yes Default $PIPER_token (if set) Secret yes Configuration scope \u2612 parameter \u2612 general \u2612 steps \u2612 stages Resource references Jenkins credential id: id: githubTokenCredentialsId Vault resource: name: githubVaultSecretName default value: github Vault paths: $(vaultPath)/github $(vaultBasePath)/$(vaultPipelineName)/github $(vaultBasePath)/GROUP-SECRETS/github verbose \u00b6 verbose output back to overview Scope Details Aliases - Type bool Mandatory no Default false Possible values - true - false Secret no Configuration scope \u2612 parameter \u2612 general \u2612 steps \u2612 stages Resource references none githubTokenCredentialsId \u00b6 Jenkins 'Secret text' credentials ID containing token to authenticate to GitHub. back to overview Scope Details Aliases - Type string Configuration scope \u2612 parameter \u2612 general \u2612 steps \u2612 stages Description \u00b6 This step allows you to create a pull request on Github. It can for example be used for GitOps scenarios or for scenarios where you want to have a manual confirmation step which is delegated to a GitHub pull request. Usage \u00b6 We recommend to define values of step parameters via .pipeline/config.yml file . In this case, calling the step is essentially reduced to defining the step name. Calling the step can be done either in an orchestrator specific way (e.g. via a Jenkins library step) or on the command line. Jenkins Command Line library ( 'piper-lib-os' ) githubCreatePullRequest script: this piper githubCreatePullRequest","title":"githubCreatePullRequest"},{"location":"steps/githubCreatePullRequest/#githubcreatepullrequest","text":"Create a pull request on GitHub","title":"githubCreatePullRequest"},{"location":"steps/githubCreatePullRequest/#prerequisites","text":"You need to create a personal access token within GitHub and add this to the Jenkins credentials store. Please see GitHub documentation for details about creating the personal access token .","title":"Prerequisites"},{"location":"steps/githubCreatePullRequest/#parameters","text":"","title":"Parameters"},{"location":"steps/githubCreatePullRequest/#overview-step","text":"Name Mandatory Additional information base yes body yes head yes owner yes repository yes script (yes) reference to Jenkins main pipeline script title yes token (yes) pass via ENV, Vault or Jenkins credentials ( githubTokenCredentialsId ) apiUrl no assignees no labels no serverUrl no verbose no activates debug output","title":"Overview - Step"},{"location":"steps/githubCreatePullRequest/#overview-execution-environment","text":"Orchestrator-specific only These parameters are relevant for orchestrator usage and not considered when using the command line option. Name Mandatory Additional information","title":"Overview - Execution Environment"},{"location":"steps/githubCreatePullRequest/#details","text":"","title":"Details"},{"location":"steps/githubCreatePullRequest/#apiurl","text":"Set the GitHub API url. back to overview Scope Details Aliases githubApiUrl Type string Mandatory no Default https://api.github.com Secret no Configuration scope \u2612 parameter \u2612 general \u2612 steps \u2612 stages Resource references none","title":"apiUrl"},{"location":"steps/githubCreatePullRequest/#assignees","text":"Login names of users to which the PR should be assigned to. back to overview Scope Details Aliases - Type []string Mandatory no Default $PIPER_assignees (if set) Secret no Configuration scope \u2612 parameter \u2610 general \u2612 steps \u2612 stages Resource references none","title":"assignees"},{"location":"steps/githubCreatePullRequest/#base","text":"The name of the branch you want the changes pulled into. back to overview Scope Details Aliases - Type string Mandatory yes Default $PIPER_base (if set) Secret no Configuration scope \u2612 parameter \u2610 general \u2612 steps \u2612 stages Resource references none","title":"base"},{"location":"steps/githubCreatePullRequest/#body","text":"The description text of the pull request in markdown format. back to overview Scope Details Aliases - Type string Mandatory yes Default $PIPER_body (if set) Secret no Configuration scope \u2612 parameter \u2610 general \u2612 steps \u2612 stages Resource references none","title":"body"},{"location":"steps/githubCreatePullRequest/#head","text":"The name of the branch where your changes are implemented. back to overview Scope Details Aliases - Type string Mandatory yes Default $PIPER_head (if set) Secret no Configuration scope \u2612 parameter \u2610 general \u2612 steps \u2612 stages Resource references none","title":"head"},{"location":"steps/githubCreatePullRequest/#labels","text":"Labels to be added to the pull request. back to overview Scope Details Aliases - Type []string Mandatory no Default $PIPER_labels (if set) Secret no Configuration scope \u2612 parameter \u2610 general \u2612 steps \u2612 stages Resource references none","title":"labels"},{"location":"steps/githubCreatePullRequest/#owner","text":"Name of the GitHub organization. back to overview Scope Details Aliases githubOrg Type string Mandatory yes Default $PIPER_owner (if set) Secret no Configuration scope \u2612 parameter \u2610 general \u2612 steps \u2612 stages Resource references commonPipelineEnvironment : reference to: github/owner","title":"owner"},{"location":"steps/githubCreatePullRequest/#repository","text":"Name of the GitHub repository. back to overview Scope Details Aliases githubRepo Type string Mandatory yes Default $PIPER_repository (if set) Secret no Configuration scope \u2612 parameter \u2610 general \u2612 steps \u2612 stages Resource references commonPipelineEnvironment : reference to: github/repository","title":"repository"},{"location":"steps/githubCreatePullRequest/#script","text":"The common script environment of the Jenkinsfile running. Typically the reference to the script calling the pipeline step is provided with the this parameter, as in script: this . This allows the function to access the commonPipelineEnvironment for retrieving, e.g. configuration parameters. back to overview Scope Details Aliases - Type Jenkins Script Mandatory yes Default Secret no Configuration scope \u2610 parameter \u2610 general \u2610 steps \u2610 stages Resource references none","title":"script"},{"location":"steps/githubCreatePullRequest/#serverurl","text":"GitHub server url for end-user access. back to overview Scope Details Aliases githubServerUrl Type string Mandatory no Default https://github.com Secret no Configuration scope \u2612 parameter \u2612 general \u2612 steps \u2612 stages Resource references none","title":"serverUrl"},{"location":"steps/githubCreatePullRequest/#title","text":"Title of the pull request. back to overview Scope Details Aliases - Type string Mandatory yes Default $PIPER_title (if set) Secret no Configuration scope \u2612 parameter \u2610 general \u2612 steps \u2612 stages Resource references none","title":"title"},{"location":"steps/githubCreatePullRequest/#token","text":"GitHub personal access token as per https://help.github.com/en/github/authenticating-to-github/creating-a-personal-access-token-for-the-command-line back to overview Scope Details Aliases - githubToken - access_token Type string Mandatory yes Default $PIPER_token (if set) Secret yes Configuration scope \u2612 parameter \u2612 general \u2612 steps \u2612 stages Resource references Jenkins credential id: id: githubTokenCredentialsId Vault resource: name: githubVaultSecretName default value: github Vault paths: $(vaultPath)/github $(vaultBasePath)/$(vaultPipelineName)/github $(vaultBasePath)/GROUP-SECRETS/github","title":"token"},{"location":"steps/githubCreatePullRequest/#verbose","text":"verbose output back to overview Scope Details Aliases - Type bool Mandatory no Default false Possible values - true - false Secret no Configuration scope \u2612 parameter \u2612 general \u2612 steps \u2612 stages Resource references none","title":"verbose"},{"location":"steps/githubCreatePullRequest/#githubtokencredentialsid","text":"Jenkins 'Secret text' credentials ID containing token to authenticate to GitHub. back to overview Scope Details Aliases - Type string Configuration scope \u2612 parameter \u2612 general \u2612 steps \u2612 stages","title":"githubTokenCredentialsId"},{"location":"steps/githubCreatePullRequest/#description","text":"This step allows you to create a pull request on Github. It can for example be used for GitOps scenarios or for scenarios where you want to have a manual confirmation step which is delegated to a GitHub pull request.","title":"Description"},{"location":"steps/githubCreatePullRequest/#usage","text":"We recommend to define values of step parameters via .pipeline/config.yml file . In this case, calling the step is essentially reduced to defining the step name. Calling the step can be done either in an orchestrator specific way (e.g. via a Jenkins library step) or on the command line. Jenkins Command Line library ( 'piper-lib-os' ) githubCreatePullRequest script: this piper githubCreatePullRequest","title":"Usage"},{"location":"steps/githubPublishRelease/","text":"githubPublishRelease \u00b6 Publish a release in GitHub Prerequisites \u00b6 You need to create a personal access token within GitHub and add this to the Jenkins credentials store. Please see GitHub documentation for details about creating the personal access token . Parameters \u00b6 Overview - Step \u00b6 Name Mandatory Additional information owner yes repository yes script (yes) reference to Jenkins main pipeline script token (yes) pass via ENV, Vault or Jenkins credentials ( githubTokenCredentialsId ) version yes addClosedIssues no addDeltaToLastRelease no apiUrl no assetPath no assetPathList no commitish no excludeLabels no githubApiTimeout no labels no preRelease no releaseBodyHeader no serverUrl no tagPrefix no uploadUrl no verbose no activates debug output Overview - Execution Environment \u00b6 Orchestrator-specific only These parameters are relevant for orchestrator usage and not considered when using the command line option. Name Mandatory Additional information Details \u00b6 addClosedIssues \u00b6 If set to true , closed issues and merged pull-requests since the last release will added below the releaseBodyHeader back to overview Scope Details Aliases - Type bool Mandatory no Default false Possible values - true - false Secret no Configuration scope \u2612 parameter \u2610 general \u2612 steps \u2612 stages Resource references none addDeltaToLastRelease \u00b6 If set to true , a link will be added to the release information that brings up all commits since the last release. back to overview Scope Details Aliases - Type bool Mandatory no Default false Possible values - true - false Secret no Configuration scope \u2612 parameter \u2610 general \u2612 steps \u2612 stages Resource references none apiUrl \u00b6 Set the GitHub API url. back to overview Scope Details Aliases githubApiUrl Type string Mandatory no Default https://api.github.com Secret no Configuration scope \u2612 parameter \u2612 general \u2612 steps \u2612 stages Resource references none assetPath \u00b6 Path to a release asset which should be uploaded to the list of release assets. back to overview Scope Details Aliases - Type string Mandatory no Default $PIPER_assetPath (if set) Secret no Configuration scope \u2612 parameter \u2610 general \u2612 steps \u2612 stages Resource references none assetPathList \u00b6 List of paths to a release asset which should be uploaded to the list of release assets. back to overview Scope Details Aliases - Type []string Mandatory no Default $PIPER_assetPathList (if set) Secret no Configuration scope \u2612 parameter \u2610 general \u2612 steps \u2612 stages Resource references none commitish \u00b6 Target git commitish for the release back to overview Scope Details Aliases - Type string Mandatory no Default master Secret no Configuration scope \u2612 parameter \u2610 general \u2612 steps \u2612 stages Resource references commonPipelineEnvironment : reference to: git/headCommitId excludeLabels \u00b6 Allows to exclude issues with dedicated list of labels. back to overview Scope Details Aliases - Type []string Mandatory no Default - duplicate - invalid - question - wontfix Secret no Configuration scope \u2612 parameter \u2610 general \u2612 steps \u2612 stages Resource references none githubApiTimeout \u00b6 Set HTTP timeout for GitHub API calls (in seconds) back to overview Scope Details Aliases - Type int Mandatory no Default 30 Secret no Configuration scope \u2612 parameter \u2612 general \u2612 steps \u2612 stages Resource references none labels \u00b6 Labels to include in issue search. back to overview Scope Details Aliases - Type []string Mandatory no Default $PIPER_labels (if set) Secret no Configuration scope \u2612 parameter \u2610 general \u2612 steps \u2612 stages Resource references none owner \u00b6 Name of the GitHub organization. back to overview Scope Details Aliases githubOrg Type string Mandatory yes Default $PIPER_owner (if set) Secret no Configuration scope \u2612 parameter \u2612 general \u2612 steps \u2612 stages Resource references commonPipelineEnvironment : reference to: github/owner preRelease \u00b6 If set to true the release will be marked as Pre-release. back to overview Scope Details Aliases - Type bool Mandatory no Default false Possible values - true - false Secret no Configuration scope \u2612 parameter \u2610 general \u2612 steps \u2612 stages Resource references none releaseBodyHeader \u00b6 Content which will appear for the release. back to overview Scope Details Aliases - Type string Mandatory no Default $PIPER_releaseBodyHeader (if set) Secret no Configuration scope \u2612 parameter \u2610 general \u2612 steps \u2612 stages Resource references none repository \u00b6 Name of the GitHub repository. back to overview Scope Details Aliases githubRepo Type string Mandatory yes Default $PIPER_repository (if set) Secret no Configuration scope \u2612 parameter \u2612 general \u2612 steps \u2612 stages Resource references commonPipelineEnvironment : reference to: github/repository script \u00b6 The common script environment of the Jenkinsfile running. Typically the reference to the script calling the pipeline step is provided with the this parameter, as in script: this . This allows the function to access the commonPipelineEnvironment for retrieving, e.g. configuration parameters. back to overview Scope Details Aliases - Type Jenkins Script Mandatory yes Default Secret no Configuration scope \u2610 parameter \u2610 general \u2610 steps \u2610 stages Resource references none serverUrl \u00b6 GitHub server url for end-user access. back to overview Scope Details Aliases githubServerUrl Type string Mandatory no Default https://github.com Secret no Configuration scope \u2612 parameter \u2612 general \u2612 steps \u2612 stages Resource references none tagPrefix \u00b6 Defines a prefix to be added to the tag. back to overview Scope Details Aliases - Type string Mandatory no Default '' Secret no Configuration scope \u2612 parameter \u2610 general \u2612 steps \u2612 stages Resource references none token \u00b6 GitHub personal access token as per https://help.github.com/en/github/authenticating-to-github/creating-a-personal-access-token-for-the-command-line back to overview Scope Details Aliases - githubToken - access_token Type string Mandatory yes Default $PIPER_token (if set) Secret yes Configuration scope \u2612 parameter \u2612 general \u2612 steps \u2612 stages Resource references Jenkins credential id: id: githubTokenCredentialsId Vault resource: name: githubVaultSecretName default value: github Vault paths: $(vaultPath)/github $(vaultBasePath)/$(vaultPipelineName)/github $(vaultBasePath)/GROUP-SECRETS/github uploadUrl \u00b6 Set the GitHub API url. back to overview Scope Details Aliases githubUploadUrl Type string Mandatory no Default https://uploads.github.com Secret no Configuration scope \u2612 parameter \u2612 general \u2612 steps \u2612 stages Resource references none verbose \u00b6 verbose output back to overview Scope Details Aliases - Type bool Mandatory no Default false Possible values - true - false Secret no Configuration scope \u2612 parameter \u2612 general \u2612 steps \u2612 stages Resource references none version \u00b6 Define the version number which will be written as tag as well as release name. back to overview Scope Details Aliases - Type string Mandatory yes Default $PIPER_version (if set) Secret no Configuration scope \u2612 parameter \u2610 general \u2612 steps \u2612 stages Resource references commonPipelineEnvironment : reference to: artifactVersion githubTokenCredentialsId \u00b6 Jenkins 'Secret text' credentials ID containing token to authenticate to GitHub. back to overview Scope Details Aliases - Type string Configuration scope \u2612 parameter \u2612 general \u2612 steps \u2612 stages Description \u00b6 This step creates a tag in your GitHub repository together with a release. The release can be filled with text plus additional information like: Closed pull request since last release Closed issues since last release Link to delta information showing all commits since last release The result looks like Usage \u00b6 We recommend to define values of step parameters via .pipeline/config.yml file . In this case, calling the step is essentially reduced to defining the step name. Calling the step can be done either in an orchestrator specific way (e.g. via a Jenkins library step) or on the command line. Jenkins Command Line library ( 'piper-lib-os' ) githubPublishRelease script: this piper githubPublishRelease Example \u00b6 Usage of pipeline step: githubPublishRelease script: this , releaseBodyHeader: \"**This is the latest success!**<br />\"","title":"githubPublishRelease"},{"location":"steps/githubPublishRelease/#githubpublishrelease","text":"Publish a release in GitHub","title":"githubPublishRelease"},{"location":"steps/githubPublishRelease/#prerequisites","text":"You need to create a personal access token within GitHub and add this to the Jenkins credentials store. Please see GitHub documentation for details about creating the personal access token .","title":"Prerequisites"},{"location":"steps/githubPublishRelease/#parameters","text":"","title":"Parameters"},{"location":"steps/githubPublishRelease/#overview-step","text":"Name Mandatory Additional information owner yes repository yes script (yes) reference to Jenkins main pipeline script token (yes) pass via ENV, Vault or Jenkins credentials ( githubTokenCredentialsId ) version yes addClosedIssues no addDeltaToLastRelease no apiUrl no assetPath no assetPathList no commitish no excludeLabels no githubApiTimeout no labels no preRelease no releaseBodyHeader no serverUrl no tagPrefix no uploadUrl no verbose no activates debug output","title":"Overview - Step"},{"location":"steps/githubPublishRelease/#overview-execution-environment","text":"Orchestrator-specific only These parameters are relevant for orchestrator usage and not considered when using the command line option. Name Mandatory Additional information","title":"Overview - Execution Environment"},{"location":"steps/githubPublishRelease/#details","text":"","title":"Details"},{"location":"steps/githubPublishRelease/#addclosedissues","text":"If set to true , closed issues and merged pull-requests since the last release will added below the releaseBodyHeader back to overview Scope Details Aliases - Type bool Mandatory no Default false Possible values - true - false Secret no Configuration scope \u2612 parameter \u2610 general \u2612 steps \u2612 stages Resource references none","title":"addClosedIssues"},{"location":"steps/githubPublishRelease/#adddeltatolastrelease","text":"If set to true , a link will be added to the release information that brings up all commits since the last release. back to overview Scope Details Aliases - Type bool Mandatory no Default false Possible values - true - false Secret no Configuration scope \u2612 parameter \u2610 general \u2612 steps \u2612 stages Resource references none","title":"addDeltaToLastRelease"},{"location":"steps/githubPublishRelease/#apiurl","text":"Set the GitHub API url. back to overview Scope Details Aliases githubApiUrl Type string Mandatory no Default https://api.github.com Secret no Configuration scope \u2612 parameter \u2612 general \u2612 steps \u2612 stages Resource references none","title":"apiUrl"},{"location":"steps/githubPublishRelease/#assetpath","text":"Path to a release asset which should be uploaded to the list of release assets. back to overview Scope Details Aliases - Type string Mandatory no Default $PIPER_assetPath (if set) Secret no Configuration scope \u2612 parameter \u2610 general \u2612 steps \u2612 stages Resource references none","title":"assetPath"},{"location":"steps/githubPublishRelease/#assetpathlist","text":"List of paths to a release asset which should be uploaded to the list of release assets. back to overview Scope Details Aliases - Type []string Mandatory no Default $PIPER_assetPathList (if set) Secret no Configuration scope \u2612 parameter \u2610 general \u2612 steps \u2612 stages Resource references none","title":"assetPathList"},{"location":"steps/githubPublishRelease/#commitish","text":"Target git commitish for the release back to overview Scope Details Aliases - Type string Mandatory no Default master Secret no Configuration scope \u2612 parameter \u2610 general \u2612 steps \u2612 stages Resource references commonPipelineEnvironment : reference to: git/headCommitId","title":"commitish"},{"location":"steps/githubPublishRelease/#excludelabels","text":"Allows to exclude issues with dedicated list of labels. back to overview Scope Details Aliases - Type []string Mandatory no Default - duplicate - invalid - question - wontfix Secret no Configuration scope \u2612 parameter \u2610 general \u2612 steps \u2612 stages Resource references none","title":"excludeLabels"},{"location":"steps/githubPublishRelease/#githubapitimeout","text":"Set HTTP timeout for GitHub API calls (in seconds) back to overview Scope Details Aliases - Type int Mandatory no Default 30 Secret no Configuration scope \u2612 parameter \u2612 general \u2612 steps \u2612 stages Resource references none","title":"githubApiTimeout"},{"location":"steps/githubPublishRelease/#labels","text":"Labels to include in issue search. back to overview Scope Details Aliases - Type []string Mandatory no Default $PIPER_labels (if set) Secret no Configuration scope \u2612 parameter \u2610 general \u2612 steps \u2612 stages Resource references none","title":"labels"},{"location":"steps/githubPublishRelease/#owner","text":"Name of the GitHub organization. back to overview Scope Details Aliases githubOrg Type string Mandatory yes Default $PIPER_owner (if set) Secret no Configuration scope \u2612 parameter \u2612 general \u2612 steps \u2612 stages Resource references commonPipelineEnvironment : reference to: github/owner","title":"owner"},{"location":"steps/githubPublishRelease/#prerelease","text":"If set to true the release will be marked as Pre-release. back to overview Scope Details Aliases - Type bool Mandatory no Default false Possible values - true - false Secret no Configuration scope \u2612 parameter \u2610 general \u2612 steps \u2612 stages Resource references none","title":"preRelease"},{"location":"steps/githubPublishRelease/#releasebodyheader","text":"Content which will appear for the release. back to overview Scope Details Aliases - Type string Mandatory no Default $PIPER_releaseBodyHeader (if set) Secret no Configuration scope \u2612 parameter \u2610 general \u2612 steps \u2612 stages Resource references none","title":"releaseBodyHeader"},{"location":"steps/githubPublishRelease/#repository","text":"Name of the GitHub repository. back to overview Scope Details Aliases githubRepo Type string Mandatory yes Default $PIPER_repository (if set) Secret no Configuration scope \u2612 parameter \u2612 general \u2612 steps \u2612 stages Resource references commonPipelineEnvironment : reference to: github/repository","title":"repository"},{"location":"steps/githubPublishRelease/#script","text":"The common script environment of the Jenkinsfile running. Typically the reference to the script calling the pipeline step is provided with the this parameter, as in script: this . This allows the function to access the commonPipelineEnvironment for retrieving, e.g. configuration parameters. back to overview Scope Details Aliases - Type Jenkins Script Mandatory yes Default Secret no Configuration scope \u2610 parameter \u2610 general \u2610 steps \u2610 stages Resource references none","title":"script"},{"location":"steps/githubPublishRelease/#serverurl","text":"GitHub server url for end-user access. back to overview Scope Details Aliases githubServerUrl Type string Mandatory no Default https://github.com Secret no Configuration scope \u2612 parameter \u2612 general \u2612 steps \u2612 stages Resource references none","title":"serverUrl"},{"location":"steps/githubPublishRelease/#tagprefix","text":"Defines a prefix to be added to the tag. back to overview Scope Details Aliases - Type string Mandatory no Default '' Secret no Configuration scope \u2612 parameter \u2610 general \u2612 steps \u2612 stages Resource references none","title":"tagPrefix"},{"location":"steps/githubPublishRelease/#token","text":"GitHub personal access token as per https://help.github.com/en/github/authenticating-to-github/creating-a-personal-access-token-for-the-command-line back to overview Scope Details Aliases - githubToken - access_token Type string Mandatory yes Default $PIPER_token (if set) Secret yes Configuration scope \u2612 parameter \u2612 general \u2612 steps \u2612 stages Resource references Jenkins credential id: id: githubTokenCredentialsId Vault resource: name: githubVaultSecretName default value: github Vault paths: $(vaultPath)/github $(vaultBasePath)/$(vaultPipelineName)/github $(vaultBasePath)/GROUP-SECRETS/github","title":"token"},{"location":"steps/githubPublishRelease/#uploadurl","text":"Set the GitHub API url. back to overview Scope Details Aliases githubUploadUrl Type string Mandatory no Default https://uploads.github.com Secret no Configuration scope \u2612 parameter \u2612 general \u2612 steps \u2612 stages Resource references none","title":"uploadUrl"},{"location":"steps/githubPublishRelease/#verbose","text":"verbose output back to overview Scope Details Aliases - Type bool Mandatory no Default false Possible values - true - false Secret no Configuration scope \u2612 parameter \u2612 general \u2612 steps \u2612 stages Resource references none","title":"verbose"},{"location":"steps/githubPublishRelease/#version","text":"Define the version number which will be written as tag as well as release name. back to overview Scope Details Aliases - Type string Mandatory yes Default $PIPER_version (if set) Secret no Configuration scope \u2612 parameter \u2610 general \u2612 steps \u2612 stages Resource references commonPipelineEnvironment : reference to: artifactVersion","title":"version"},{"location":"steps/githubPublishRelease/#githubtokencredentialsid","text":"Jenkins 'Secret text' credentials ID containing token to authenticate to GitHub. back to overview Scope Details Aliases - Type string Configuration scope \u2612 parameter \u2612 general \u2612 steps \u2612 stages","title":"githubTokenCredentialsId"},{"location":"steps/githubPublishRelease/#description","text":"This step creates a tag in your GitHub repository together with a release. The release can be filled with text plus additional information like: Closed pull request since last release Closed issues since last release Link to delta information showing all commits since last release The result looks like","title":"Description"},{"location":"steps/githubPublishRelease/#usage","text":"We recommend to define values of step parameters via .pipeline/config.yml file . In this case, calling the step is essentially reduced to defining the step name. Calling the step can be done either in an orchestrator specific way (e.g. via a Jenkins library step) or on the command line. Jenkins Command Line library ( 'piper-lib-os' ) githubPublishRelease script: this piper githubPublishRelease","title":"Usage"},{"location":"steps/githubPublishRelease/#example","text":"Usage of pipeline step: githubPublishRelease script: this , releaseBodyHeader: \"**This is the latest success!**<br />\"","title":"Example"},{"location":"steps/githubSetCommitStatus/","text":"githubSetCommitStatus \u00b6 Set a status of a certain commit. Prerequisites \u00b6 You need to create a personal access token within GitHub and add this to the Jenkins credentials store. Please see GitHub documentation for details about creating the personal access token . Parameters \u00b6 Overview - Step \u00b6 Name Mandatory Additional information commitId yes context yes owner yes repository yes script (yes) reference to Jenkins main pipeline script status yes token (yes) pass via ENV, Vault or Jenkins credentials ( githubTokenCredentialsId ) apiUrl no description no targetUrl no verbose no activates debug output Overview - Execution Environment \u00b6 Orchestrator-specific only These parameters are relevant for orchestrator usage and not considered when using the command line option. Name Mandatory Additional information Details \u00b6 apiUrl \u00b6 Set the GitHub API URL. back to overview Scope Details Aliases githubApiUrl Type string Mandatory no Default https://api.github.com Secret no Configuration scope \u2612 parameter \u2612 general \u2612 steps \u2612 stages Resource references none commitId \u00b6 The commitId for which the status should be set. back to overview Scope Details Aliases - Type string Mandatory yes Default $PIPER_commitId (if set) Secret no Configuration scope \u2612 parameter \u2610 general \u2612 steps \u2612 stages Resource references commonPipelineEnvironment : reference to: git/commitId context \u00b6 Label for the status which will for example show up in a pull request. back to overview Scope Details Aliases - Type string Mandatory yes Default $PIPER_context (if set) Secret no Configuration scope \u2612 parameter \u2610 general \u2612 steps \u2612 stages Resource references none description \u00b6 Short description of the status. back to overview Scope Details Aliases - Type string Mandatory no Default $PIPER_description (if set) Secret no Configuration scope \u2612 parameter \u2610 general \u2612 steps \u2612 stages Resource references none owner \u00b6 Name of the GitHub organization. back to overview Scope Details Aliases githubOrg Type string Mandatory yes Default $PIPER_owner (if set) Secret no Configuration scope \u2612 parameter \u2610 general \u2612 steps \u2612 stages Resource references commonPipelineEnvironment : reference to: github/owner repository \u00b6 Name of the GitHub repository. back to overview Scope Details Aliases githubRepo Type string Mandatory yes Default $PIPER_repository (if set) Secret no Configuration scope \u2612 parameter \u2610 general \u2612 steps \u2612 stages Resource references commonPipelineEnvironment : reference to: github/repository script \u00b6 The common script environment of the Jenkinsfile running. Typically the reference to the script calling the pipeline step is provided with the this parameter, as in script: this . This allows the function to access the commonPipelineEnvironment for retrieving, e.g. configuration parameters. back to overview Scope Details Aliases - Type Jenkins Script Mandatory yes Default Secret no Configuration scope \u2610 parameter \u2610 general \u2610 steps \u2610 stages Resource references none status \u00b6 Status which should be set on the commitId. back to overview Scope Details Aliases - Type string Mandatory yes Default $PIPER_status (if set) Possible values - failure - pending - success Secret no Configuration scope \u2612 parameter \u2610 general \u2612 steps \u2612 stages Resource references none targetUrl \u00b6 Target URL to associate the status with. back to overview Scope Details Aliases - Type string Mandatory no Default $PIPER_targetUrl (if set) Secret no Configuration scope \u2612 parameter \u2610 general \u2612 steps \u2612 stages Resource references none token \u00b6 GitHub personal access token as per https://help.github.com/en/github/authenticating-to-github/creating-a-personal-access-token-for-the-command-line. back to overview Scope Details Aliases - githubToken - access_token Type string Mandatory yes Default $PIPER_token (if set) Secret yes Configuration scope \u2612 parameter \u2612 general \u2612 steps \u2612 stages Resource references Jenkins credential id: id: githubTokenCredentialsId Vault resource: name: githubVaultSecretName default value: github Vault paths: $(vaultPath)/github $(vaultBasePath)/$(vaultPipelineName)/github $(vaultBasePath)/GROUP-SECRETS/github verbose \u00b6 verbose output back to overview Scope Details Aliases - Type bool Mandatory no Default false Possible values - true - false Secret no Configuration scope \u2612 parameter \u2612 general \u2612 steps \u2612 stages Resource references none githubTokenCredentialsId \u00b6 Jenkins 'Secret text' credentials ID containing token to authenticate to GitHub. back to overview Scope Details Aliases - Type string Configuration scope \u2612 parameter \u2612 general \u2612 steps \u2612 stages Description \u00b6 This step allows you to set a status for a certain commit. Details can be found here: https://developer.github.com/v3/repos/statuses/. Typically, following information is set: state (pending, failure, success) context target URL (link to details) It can for example be used to create additional check indicators for a pull request which can be evaluated and also be enforced by GitHub configuration. Usage \u00b6 We recommend to define values of step parameters via .pipeline/config.yml file . In this case, calling the step is essentially reduced to defining the step name. Calling the step can be done either in an orchestrator specific way (e.g. via a Jenkins library step) or on the command line. Jenkins Command Line library ( 'piper-lib-os' ) githubSetCommitStatus script: this piper githubSetCommitStatus","title":"githubSetCommitStatus"},{"location":"steps/githubSetCommitStatus/#githubsetcommitstatus","text":"Set a status of a certain commit.","title":"githubSetCommitStatus"},{"location":"steps/githubSetCommitStatus/#prerequisites","text":"You need to create a personal access token within GitHub and add this to the Jenkins credentials store. Please see GitHub documentation for details about creating the personal access token .","title":"Prerequisites"},{"location":"steps/githubSetCommitStatus/#parameters","text":"","title":"Parameters"},{"location":"steps/githubSetCommitStatus/#overview-step","text":"Name Mandatory Additional information commitId yes context yes owner yes repository yes script (yes) reference to Jenkins main pipeline script status yes token (yes) pass via ENV, Vault or Jenkins credentials ( githubTokenCredentialsId ) apiUrl no description no targetUrl no verbose no activates debug output","title":"Overview - Step"},{"location":"steps/githubSetCommitStatus/#overview-execution-environment","text":"Orchestrator-specific only These parameters are relevant for orchestrator usage and not considered when using the command line option. Name Mandatory Additional information","title":"Overview - Execution Environment"},{"location":"steps/githubSetCommitStatus/#details","text":"","title":"Details"},{"location":"steps/githubSetCommitStatus/#apiurl","text":"Set the GitHub API URL. back to overview Scope Details Aliases githubApiUrl Type string Mandatory no Default https://api.github.com Secret no Configuration scope \u2612 parameter \u2612 general \u2612 steps \u2612 stages Resource references none","title":"apiUrl"},{"location":"steps/githubSetCommitStatus/#commitid","text":"The commitId for which the status should be set. back to overview Scope Details Aliases - Type string Mandatory yes Default $PIPER_commitId (if set) Secret no Configuration scope \u2612 parameter \u2610 general \u2612 steps \u2612 stages Resource references commonPipelineEnvironment : reference to: git/commitId","title":"commitId"},{"location":"steps/githubSetCommitStatus/#context","text":"Label for the status which will for example show up in a pull request. back to overview Scope Details Aliases - Type string Mandatory yes Default $PIPER_context (if set) Secret no Configuration scope \u2612 parameter \u2610 general \u2612 steps \u2612 stages Resource references none","title":"context"},{"location":"steps/githubSetCommitStatus/#description","text":"Short description of the status. back to overview Scope Details Aliases - Type string Mandatory no Default $PIPER_description (if set) Secret no Configuration scope \u2612 parameter \u2610 general \u2612 steps \u2612 stages Resource references none","title":"description"},{"location":"steps/githubSetCommitStatus/#owner","text":"Name of the GitHub organization. back to overview Scope Details Aliases githubOrg Type string Mandatory yes Default $PIPER_owner (if set) Secret no Configuration scope \u2612 parameter \u2610 general \u2612 steps \u2612 stages Resource references commonPipelineEnvironment : reference to: github/owner","title":"owner"},{"location":"steps/githubSetCommitStatus/#repository","text":"Name of the GitHub repository. back to overview Scope Details Aliases githubRepo Type string Mandatory yes Default $PIPER_repository (if set) Secret no Configuration scope \u2612 parameter \u2610 general \u2612 steps \u2612 stages Resource references commonPipelineEnvironment : reference to: github/repository","title":"repository"},{"location":"steps/githubSetCommitStatus/#script","text":"The common script environment of the Jenkinsfile running. Typically the reference to the script calling the pipeline step is provided with the this parameter, as in script: this . This allows the function to access the commonPipelineEnvironment for retrieving, e.g. configuration parameters. back to overview Scope Details Aliases - Type Jenkins Script Mandatory yes Default Secret no Configuration scope \u2610 parameter \u2610 general \u2610 steps \u2610 stages Resource references none","title":"script"},{"location":"steps/githubSetCommitStatus/#status","text":"Status which should be set on the commitId. back to overview Scope Details Aliases - Type string Mandatory yes Default $PIPER_status (if set) Possible values - failure - pending - success Secret no Configuration scope \u2612 parameter \u2610 general \u2612 steps \u2612 stages Resource references none","title":"status"},{"location":"steps/githubSetCommitStatus/#targeturl","text":"Target URL to associate the status with. back to overview Scope Details Aliases - Type string Mandatory no Default $PIPER_targetUrl (if set) Secret no Configuration scope \u2612 parameter \u2610 general \u2612 steps \u2612 stages Resource references none","title":"targetUrl"},{"location":"steps/githubSetCommitStatus/#token","text":"GitHub personal access token as per https://help.github.com/en/github/authenticating-to-github/creating-a-personal-access-token-for-the-command-line. back to overview Scope Details Aliases - githubToken - access_token Type string Mandatory yes Default $PIPER_token (if set) Secret yes Configuration scope \u2612 parameter \u2612 general \u2612 steps \u2612 stages Resource references Jenkins credential id: id: githubTokenCredentialsId Vault resource: name: githubVaultSecretName default value: github Vault paths: $(vaultPath)/github $(vaultBasePath)/$(vaultPipelineName)/github $(vaultBasePath)/GROUP-SECRETS/github","title":"token"},{"location":"steps/githubSetCommitStatus/#verbose","text":"verbose output back to overview Scope Details Aliases - Type bool Mandatory no Default false Possible values - true - false Secret no Configuration scope \u2612 parameter \u2612 general \u2612 steps \u2612 stages Resource references none","title":"verbose"},{"location":"steps/githubSetCommitStatus/#githubtokencredentialsid","text":"Jenkins 'Secret text' credentials ID containing token to authenticate to GitHub. back to overview Scope Details Aliases - Type string Configuration scope \u2612 parameter \u2612 general \u2612 steps \u2612 stages","title":"githubTokenCredentialsId"},{"location":"steps/githubSetCommitStatus/#description_1","text":"This step allows you to set a status for a certain commit. Details can be found here: https://developer.github.com/v3/repos/statuses/. Typically, following information is set: state (pending, failure, success) context target URL (link to details) It can for example be used to create additional check indicators for a pull request which can be evaluated and also be enforced by GitHub configuration.","title":"Description"},{"location":"steps/githubSetCommitStatus/#usage","text":"We recommend to define values of step parameters via .pipeline/config.yml file . In this case, calling the step is essentially reduced to defining the step name. Calling the step can be done either in an orchestrator specific way (e.g. via a Jenkins library step) or on the command line. Jenkins Command Line library ( 'piper-lib-os' ) githubSetCommitStatus script: this piper githubSetCommitStatus","title":"Usage"},{"location":"steps/gitopsUpdateDeployment/","text":"gitopsUpdateDeployment \u00b6 Updates Kubernetes Deployment Manifest in an Infrastructure Git Repository Description \u00b6 This step allows you to update the deployment manifest for Kubernetes in a git repository. It can for example be used for GitOps scenarios where the update of the manifests triggers an update of the corresponding deployment in Kubernetes. As of today, it supports the update of deployment yaml files via kubectl patch, update a whole helm template and kustomize. For kubectl the container inside the yaml must be described within the following hierarchy: {\"spec\":{\"template\":{\"spec\":{\"containers\":[{...}]}}}} For helm the whole template is generated into a single file ( filePath ) and uploaded into the repository. For kustomize the images section will be update with the current image. Usage \u00b6 We recommend to define values of step parameters via .pipeline/config.yml file . In this case, calling the step is essentially reduced to defining the step name. Calling the step can be done either in an orchestrator specific way (e.g. via a Jenkins library step) or on the command line. Jenkins Command Line library ( 'piper-lib-os' ) gitopsUpdateDeployment script: this piper gitopsUpdateDeployment Parameters \u00b6 Overview - Step \u00b6 Name Mandatory Additional information containerImageNameTag yes containerRegistryUrl yes filePath yes password (yes) pass via ENV, Vault or Jenkins credentials ( gitHttpsCredentialsId ) script (yes) reference to Jenkins main pipeline script username (yes) pass via ENV, Vault or Jenkins credentials ( gitHttpsCredentialsId ) branchName no chartPath no commitMessage no containerName no customTlsCertificateLinks no deploymentName no forcePush no helmValues no serverUrl no tool no verbose no activates debug output Overview - Execution Environment \u00b6 Orchestrator-specific only These parameters are relevant for orchestrator usage and not considered when using the command line option. Name Mandatory Additional information containerCommand no containerShell no dockerEnvVars no dockerImage no dockerName no dockerOptions no dockerPullImage no dockerVolumeBind no dockerWorkspace no stashContent no Details \u00b6 branchName \u00b6 The name of the branch where the changes should get pushed into. back to overview Scope Details Aliases - Type string Mandatory no Default master Secret no Configuration scope \u2612 parameter \u2610 general \u2612 steps \u2612 stages Resource references none chartPath \u00b6 Defines the chart path for deployments using helm. Globbing is supported to merge multiple charts into one resource.yaml that will be commited. back to overview Scope Details Aliases helmChartPath Type string Mandatory no Default $PIPER_chartPath (if set) Secret no Configuration scope \u2612 parameter \u2610 general \u2612 steps \u2612 stages Resource references none commitMessage \u00b6 If the commit message is empty a default message in the form \"Updated containerName to version containerImage \" will be used. back to overview Scope Details Aliases - Type string Mandatory no Default $PIPER_commitMessage (if set) Secret no Configuration scope \u2612 parameter \u2610 general \u2612 steps \u2612 stages Resource references none containerCommand \u00b6 Jenkins-specific: Used for proper environment setup. Kubernetes only: Allows to specify start command for container created with dockerImage parameter to overwrite Piper default (/usr/bin/tail -f /dev/null). back to overview Scope Details Aliases - Type string Mandatory no Default Secret no Configuration scope \u2612 parameter \u2612 general \u2612 steps \u2612 stages Resource references none containerImageNameTag \u00b6 Container image name with version tag to annotate in the deployment configuration. back to overview Scope Details Aliases - image ( deprecated ) - containerImage Type string Mandatory yes Default $PIPER_containerImageNameTag (if set) Secret no Configuration scope \u2612 parameter \u2610 general \u2612 steps \u2612 stages Resource references commonPipelineEnvironment : reference to: container/imageNameTag containerName \u00b6 The name of the container to update back to overview Scope Details Aliases - Type string Mandatory no Default $PIPER_containerName (if set) Secret no Configuration scope \u2612 parameter \u2610 general \u2612 steps \u2612 stages Resource references none containerRegistryUrl \u00b6 http(s) url of the Container registry where the image is located back to overview Scope Details Aliases dockerRegistryUrl Type string Mandatory yes Default $PIPER_containerRegistryUrl (if set) Secret no Configuration scope \u2612 parameter \u2612 general \u2612 steps \u2612 stages Resource references commonPipelineEnvironment : reference to: container/registryUrl containerShell \u00b6 Jenkins-specific: Used for proper environment setup. Allows to specify the shell to be executed for container with containerName. back to overview Scope Details Aliases - Type string Mandatory no Default Secret no Configuration scope \u2612 parameter \u2612 general \u2612 steps \u2612 stages Resource references none customTlsCertificateLinks \u00b6 List containing download links of custom TLS certificates. This is required to ensure trusted connections to registries with custom certificates. back to overview Scope Details Aliases - Type []string Mandatory no Default $PIPER_customTlsCertificateLinks (if set) Secret no Configuration scope \u2612 parameter \u2610 general \u2612 steps \u2612 stages Resource references none deploymentName \u00b6 Defines the name of the deployment. In case of kustomize this is the name or alias of the image in the kustomization.yaml back to overview Scope Details Aliases helmDeploymentName Type string Mandatory no Default $PIPER_deploymentName (if set) Secret no Configuration scope \u2612 parameter \u2610 general \u2612 steps \u2612 stages Resource references none dockerEnvVars \u00b6 Environment variables to set in the container, e.g. [http_proxy: \"proxy:8080\"]. back to overview Scope Details Aliases - Type map[string]string Mandatory no Default Secret no Configuration scope \u2612 parameter \u2612 general \u2612 steps \u2612 stages Resource references none dockerImage \u00b6 Name of the docker image that should be used. If empty, Docker is not used and the command is executed directly on the Jenkins system. back to overview Scope Details Aliases - Type string Mandatory no Default tool= helm : dtzar/helm-kubectl:3.18.1 tool= kubectl : dtzar/helm-kubectl:3.18.1 tool= kustomize : nekottyo/kustomize-kubeval:kustomizev4 Secret no Configuration scope \u2612 parameter \u2612 general \u2612 steps \u2612 stages Resource references none dockerName \u00b6 Kubernetes only: Name of the container launching dockerImage. SideCar only: Name of the container in local network. back to overview Scope Details Aliases - Type string Mandatory no Default Secret no Configuration scope \u2612 parameter \u2612 general \u2612 steps \u2612 stages Resource references none dockerOptions \u00b6 Docker options to be set when starting the container. back to overview Scope Details Aliases - Type []string Mandatory no Default tool= helm : [{-u 0}] tool= kubectl : [{-u 0}] tool= kustomize : [{-u 0}] Secret no Configuration scope \u2612 parameter \u2612 general \u2612 steps \u2612 stages Resource references none dockerPullImage \u00b6 Set this to 'false' to bypass a docker image pull. Useful during development process. Allows testing of images which are available in the local registry only. back to overview Scope Details Aliases - Type bool Mandatory no Default tool= helm : true tool= kubectl : true tool= kustomize : true Possible values - true - false Secret no Configuration scope \u2612 parameter \u2612 general \u2612 steps \u2612 stages Resource references none dockerVolumeBind \u00b6 Jenkins-specific: Used for proper environment setup. Volumes that should be mounted into the docker container. back to overview Scope Details Aliases - Type map[string]string Mandatory no Default Secret no Configuration scope \u2612 parameter \u2612 general \u2612 steps \u2612 stages Resource references none dockerWorkspace \u00b6 Jenkins-specific: Used for proper environment setup. Kubernetes only: Specifies a dedicated user home directory for the container which will be passed as value for environment variable HOME . back to overview Scope Details Aliases - Type string Mandatory no Default tool= helm : /config tool= kubectl : /config tool= kustomize : /config Secret no Configuration scope \u2612 parameter \u2612 general \u2612 steps \u2612 stages Resource references none filePath \u00b6 Relative path in the git repository to the deployment descriptor file that shall be updated. For different tools this has different semantics: kubectl - path to the deployment.yaml that should be patched. Supports globbing. helm - path where the helm chart will be generated into. Here no globbing is supported. kustomize - path to the kustomization.yaml . Supports globbing. back to overview Scope Details Aliases - Type string Mandatory yes Default $PIPER_filePath (if set) Secret no Configuration scope \u2612 parameter \u2610 general \u2612 steps \u2612 stages Resource references none forcePush \u00b6 To bypass branch-protections the git push command can be forced. Example: steps : gitopsUpdateDeployment : forcePush : true back to overview Scope Details Aliases - Type bool Mandatory no Default false Possible values - true - false Secret no Configuration scope \u2612 parameter \u2610 general \u2612 steps \u2612 stages Resource references none helmValues \u00b6 List of helm values as YAML file reference or URL (as per helm parameter description for -f / --values ) back to overview Scope Details Aliases - Type []string Mandatory no Default $PIPER_helmValues (if set) Secret no Configuration scope \u2612 parameter \u2610 general \u2612 steps \u2612 stages Resource references none password \u00b6 Password/token for git authentication. back to overview Scope Details Aliases - Type string Mandatory yes Default $PIPER_password (if set) Secret yes Configuration scope \u2612 parameter \u2610 general \u2612 steps \u2612 stages Resource references Jenkins credential id: id: gitHttpsCredentialsId reference to: password Vault resource: name: gitHttpsCredentialVaultSecretName default value: gitHttpsCredential Vault paths: $(vaultPath)/gitHttpsCredential $(vaultBasePath)/$(vaultPipelineName)/gitHttpsCredential $(vaultBasePath)/GROUP-SECRETS/gitHttpsCredential script \u00b6 The common script environment of the Jenkinsfile running. Typically the reference to the script calling the pipeline step is provided with the this parameter, as in script: this . This allows the function to access the commonPipelineEnvironment for retrieving, e.g. configuration parameters. back to overview Scope Details Aliases - Type Jenkins Script Mandatory yes Default Secret no Configuration scope \u2610 parameter \u2610 general \u2610 steps \u2610 stages Resource references none serverUrl \u00b6 GitHub server url to the repository. back to overview Scope Details Aliases githubServerUrl Type string Mandatory no Default https://github.com Secret no Configuration scope \u2612 parameter \u2612 general \u2612 steps \u2612 stages Resource references none stashContent \u00b6 Jenkins-specific: Used for proper environment setup. Specific stashes that should be considered for the step execution. back to overview Scope Details Aliases - Type []string Mandatory no Default - deployDescriptor Secret no Configuration scope \u2612 parameter \u2612 general \u2612 steps \u2612 stages Resource references none tool \u00b6 Defines the tool which should be used to update the deployment description. back to overview Scope Details Aliases - Type string Mandatory no Default kubectl Possible values - kubectl - helm - kustomize Secret no Configuration scope \u2612 parameter \u2610 general \u2612 steps \u2612 stages Resource references none username \u00b6 User name for git authentication back to overview Scope Details Aliases - Type string Mandatory yes Default $PIPER_username (if set) Secret yes Configuration scope \u2612 parameter \u2610 general \u2612 steps \u2612 stages Resource references Jenkins credential id: id: gitHttpsCredentialsId reference to: username Vault resource: name: gitHttpsCredentialVaultSecretName default value: gitHttpsCredential Vault paths: $(vaultPath)/gitHttpsCredential $(vaultBasePath)/$(vaultPipelineName)/gitHttpsCredential $(vaultBasePath)/GROUP-SECRETS/gitHttpsCredential verbose \u00b6 verbose output back to overview Scope Details Aliases - Type bool Mandatory no Default false Possible values - true - false Secret no Configuration scope \u2612 parameter \u2612 general \u2612 steps \u2612 stages Resource references none gitHttpsCredentialsId \u00b6 Jenkins 'Username with password' credentials ID containing username/password for http access to your git repository. back to overview Scope Details Aliases - Type string Configuration scope \u2612 parameter \u2612 general \u2612 steps \u2612 stages","title":"gitopsUpdateDeployment"},{"location":"steps/gitopsUpdateDeployment/#gitopsupdatedeployment","text":"Updates Kubernetes Deployment Manifest in an Infrastructure Git Repository","title":"gitopsUpdateDeployment"},{"location":"steps/gitopsUpdateDeployment/#description","text":"This step allows you to update the deployment manifest for Kubernetes in a git repository. It can for example be used for GitOps scenarios where the update of the manifests triggers an update of the corresponding deployment in Kubernetes. As of today, it supports the update of deployment yaml files via kubectl patch, update a whole helm template and kustomize. For kubectl the container inside the yaml must be described within the following hierarchy: {\"spec\":{\"template\":{\"spec\":{\"containers\":[{...}]}}}} For helm the whole template is generated into a single file ( filePath ) and uploaded into the repository. For kustomize the images section will be update with the current image.","title":"Description"},{"location":"steps/gitopsUpdateDeployment/#usage","text":"We recommend to define values of step parameters via .pipeline/config.yml file . In this case, calling the step is essentially reduced to defining the step name. Calling the step can be done either in an orchestrator specific way (e.g. via a Jenkins library step) or on the command line. Jenkins Command Line library ( 'piper-lib-os' ) gitopsUpdateDeployment script: this piper gitopsUpdateDeployment","title":"Usage"},{"location":"steps/gitopsUpdateDeployment/#parameters","text":"","title":"Parameters"},{"location":"steps/gitopsUpdateDeployment/#overview-step","text":"Name Mandatory Additional information containerImageNameTag yes containerRegistryUrl yes filePath yes password (yes) pass via ENV, Vault or Jenkins credentials ( gitHttpsCredentialsId ) script (yes) reference to Jenkins main pipeline script username (yes) pass via ENV, Vault or Jenkins credentials ( gitHttpsCredentialsId ) branchName no chartPath no commitMessage no containerName no customTlsCertificateLinks no deploymentName no forcePush no helmValues no serverUrl no tool no verbose no activates debug output","title":"Overview - Step"},{"location":"steps/gitopsUpdateDeployment/#overview-execution-environment","text":"Orchestrator-specific only These parameters are relevant for orchestrator usage and not considered when using the command line option. Name Mandatory Additional information containerCommand no containerShell no dockerEnvVars no dockerImage no dockerName no dockerOptions no dockerPullImage no dockerVolumeBind no dockerWorkspace no stashContent no","title":"Overview - Execution Environment"},{"location":"steps/gitopsUpdateDeployment/#details","text":"","title":"Details"},{"location":"steps/gitopsUpdateDeployment/#branchname","text":"The name of the branch where the changes should get pushed into. back to overview Scope Details Aliases - Type string Mandatory no Default master Secret no Configuration scope \u2612 parameter \u2610 general \u2612 steps \u2612 stages Resource references none","title":"branchName"},{"location":"steps/gitopsUpdateDeployment/#chartpath","text":"Defines the chart path for deployments using helm. Globbing is supported to merge multiple charts into one resource.yaml that will be commited. back to overview Scope Details Aliases helmChartPath Type string Mandatory no Default $PIPER_chartPath (if set) Secret no Configuration scope \u2612 parameter \u2610 general \u2612 steps \u2612 stages Resource references none","title":"chartPath"},{"location":"steps/gitopsUpdateDeployment/#commitmessage","text":"If the commit message is empty a default message in the form \"Updated containerName to version containerImage \" will be used. back to overview Scope Details Aliases - Type string Mandatory no Default $PIPER_commitMessage (if set) Secret no Configuration scope \u2612 parameter \u2610 general \u2612 steps \u2612 stages Resource references none","title":"commitMessage"},{"location":"steps/gitopsUpdateDeployment/#containercommand","text":"Jenkins-specific: Used for proper environment setup. Kubernetes only: Allows to specify start command for container created with dockerImage parameter to overwrite Piper default (/usr/bin/tail -f /dev/null). back to overview Scope Details Aliases - Type string Mandatory no Default Secret no Configuration scope \u2612 parameter \u2612 general \u2612 steps \u2612 stages Resource references none","title":"containerCommand"},{"location":"steps/gitopsUpdateDeployment/#containerimagenametag","text":"Container image name with version tag to annotate in the deployment configuration. back to overview Scope Details Aliases - image ( deprecated ) - containerImage Type string Mandatory yes Default $PIPER_containerImageNameTag (if set) Secret no Configuration scope \u2612 parameter \u2610 general \u2612 steps \u2612 stages Resource references commonPipelineEnvironment : reference to: container/imageNameTag","title":"containerImageNameTag"},{"location":"steps/gitopsUpdateDeployment/#containername","text":"The name of the container to update back to overview Scope Details Aliases - Type string Mandatory no Default $PIPER_containerName (if set) Secret no Configuration scope \u2612 parameter \u2610 general \u2612 steps \u2612 stages Resource references none","title":"containerName"},{"location":"steps/gitopsUpdateDeployment/#containerregistryurl","text":"http(s) url of the Container registry where the image is located back to overview Scope Details Aliases dockerRegistryUrl Type string Mandatory yes Default $PIPER_containerRegistryUrl (if set) Secret no Configuration scope \u2612 parameter \u2612 general \u2612 steps \u2612 stages Resource references commonPipelineEnvironment : reference to: container/registryUrl","title":"containerRegistryUrl"},{"location":"steps/gitopsUpdateDeployment/#containershell","text":"Jenkins-specific: Used for proper environment setup. Allows to specify the shell to be executed for container with containerName. back to overview Scope Details Aliases - Type string Mandatory no Default Secret no Configuration scope \u2612 parameter \u2612 general \u2612 steps \u2612 stages Resource references none","title":"containerShell"},{"location":"steps/gitopsUpdateDeployment/#customtlscertificatelinks","text":"List containing download links of custom TLS certificates. This is required to ensure trusted connections to registries with custom certificates. back to overview Scope Details Aliases - Type []string Mandatory no Default $PIPER_customTlsCertificateLinks (if set) Secret no Configuration scope \u2612 parameter \u2610 general \u2612 steps \u2612 stages Resource references none","title":"customTlsCertificateLinks"},{"location":"steps/gitopsUpdateDeployment/#deploymentname","text":"Defines the name of the deployment. In case of kustomize this is the name or alias of the image in the kustomization.yaml back to overview Scope Details Aliases helmDeploymentName Type string Mandatory no Default $PIPER_deploymentName (if set) Secret no Configuration scope \u2612 parameter \u2610 general \u2612 steps \u2612 stages Resource references none","title":"deploymentName"},{"location":"steps/gitopsUpdateDeployment/#dockerenvvars","text":"Environment variables to set in the container, e.g. [http_proxy: \"proxy:8080\"]. back to overview Scope Details Aliases - Type map[string]string Mandatory no Default Secret no Configuration scope \u2612 parameter \u2612 general \u2612 steps \u2612 stages Resource references none","title":"dockerEnvVars"},{"location":"steps/gitopsUpdateDeployment/#dockerimage","text":"Name of the docker image that should be used. If empty, Docker is not used and the command is executed directly on the Jenkins system. back to overview Scope Details Aliases - Type string Mandatory no Default tool= helm : dtzar/helm-kubectl:3.18.1 tool= kubectl : dtzar/helm-kubectl:3.18.1 tool= kustomize : nekottyo/kustomize-kubeval:kustomizev4 Secret no Configuration scope \u2612 parameter \u2612 general \u2612 steps \u2612 stages Resource references none","title":"dockerImage"},{"location":"steps/gitopsUpdateDeployment/#dockername","text":"Kubernetes only: Name of the container launching dockerImage. SideCar only: Name of the container in local network. back to overview Scope Details Aliases - Type string Mandatory no Default Secret no Configuration scope \u2612 parameter \u2612 general \u2612 steps \u2612 stages Resource references none","title":"dockerName"},{"location":"steps/gitopsUpdateDeployment/#dockeroptions","text":"Docker options to be set when starting the container. back to overview Scope Details Aliases - Type []string Mandatory no Default tool= helm : [{-u 0}] tool= kubectl : [{-u 0}] tool= kustomize : [{-u 0}] Secret no Configuration scope \u2612 parameter \u2612 general \u2612 steps \u2612 stages Resource references none","title":"dockerOptions"},{"location":"steps/gitopsUpdateDeployment/#dockerpullimage","text":"Set this to 'false' to bypass a docker image pull. Useful during development process. Allows testing of images which are available in the local registry only. back to overview Scope Details Aliases - Type bool Mandatory no Default tool= helm : true tool= kubectl : true tool= kustomize : true Possible values - true - false Secret no Configuration scope \u2612 parameter \u2612 general \u2612 steps \u2612 stages Resource references none","title":"dockerPullImage"},{"location":"steps/gitopsUpdateDeployment/#dockervolumebind","text":"Jenkins-specific: Used for proper environment setup. Volumes that should be mounted into the docker container. back to overview Scope Details Aliases - Type map[string]string Mandatory no Default Secret no Configuration scope \u2612 parameter \u2612 general \u2612 steps \u2612 stages Resource references none","title":"dockerVolumeBind"},{"location":"steps/gitopsUpdateDeployment/#dockerworkspace","text":"Jenkins-specific: Used for proper environment setup. Kubernetes only: Specifies a dedicated user home directory for the container which will be passed as value for environment variable HOME . back to overview Scope Details Aliases - Type string Mandatory no Default tool= helm : /config tool= kubectl : /config tool= kustomize : /config Secret no Configuration scope \u2612 parameter \u2612 general \u2612 steps \u2612 stages Resource references none","title":"dockerWorkspace"},{"location":"steps/gitopsUpdateDeployment/#filepath","text":"Relative path in the git repository to the deployment descriptor file that shall be updated. For different tools this has different semantics: kubectl - path to the deployment.yaml that should be patched. Supports globbing. helm - path where the helm chart will be generated into. Here no globbing is supported. kustomize - path to the kustomization.yaml . Supports globbing. back to overview Scope Details Aliases - Type string Mandatory yes Default $PIPER_filePath (if set) Secret no Configuration scope \u2612 parameter \u2610 general \u2612 steps \u2612 stages Resource references none","title":"filePath"},{"location":"steps/gitopsUpdateDeployment/#forcepush","text":"To bypass branch-protections the git push command can be forced. Example: steps : gitopsUpdateDeployment : forcePush : true back to overview Scope Details Aliases - Type bool Mandatory no Default false Possible values - true - false Secret no Configuration scope \u2612 parameter \u2610 general \u2612 steps \u2612 stages Resource references none","title":"forcePush"},{"location":"steps/gitopsUpdateDeployment/#helmvalues","text":"List of helm values as YAML file reference or URL (as per helm parameter description for -f / --values ) back to overview Scope Details Aliases - Type []string Mandatory no Default $PIPER_helmValues (if set) Secret no Configuration scope \u2612 parameter \u2610 general \u2612 steps \u2612 stages Resource references none","title":"helmValues"},{"location":"steps/gitopsUpdateDeployment/#password","text":"Password/token for git authentication. back to overview Scope Details Aliases - Type string Mandatory yes Default $PIPER_password (if set) Secret yes Configuration scope \u2612 parameter \u2610 general \u2612 steps \u2612 stages Resource references Jenkins credential id: id: gitHttpsCredentialsId reference to: password Vault resource: name: gitHttpsCredentialVaultSecretName default value: gitHttpsCredential Vault paths: $(vaultPath)/gitHttpsCredential $(vaultBasePath)/$(vaultPipelineName)/gitHttpsCredential $(vaultBasePath)/GROUP-SECRETS/gitHttpsCredential","title":"password"},{"location":"steps/gitopsUpdateDeployment/#script","text":"The common script environment of the Jenkinsfile running. Typically the reference to the script calling the pipeline step is provided with the this parameter, as in script: this . This allows the function to access the commonPipelineEnvironment for retrieving, e.g. configuration parameters. back to overview Scope Details Aliases - Type Jenkins Script Mandatory yes Default Secret no Configuration scope \u2610 parameter \u2610 general \u2610 steps \u2610 stages Resource references none","title":"script"},{"location":"steps/gitopsUpdateDeployment/#serverurl","text":"GitHub server url to the repository. back to overview Scope Details Aliases githubServerUrl Type string Mandatory no Default https://github.com Secret no Configuration scope \u2612 parameter \u2612 general \u2612 steps \u2612 stages Resource references none","title":"serverUrl"},{"location":"steps/gitopsUpdateDeployment/#stashcontent","text":"Jenkins-specific: Used for proper environment setup. Specific stashes that should be considered for the step execution. back to overview Scope Details Aliases - Type []string Mandatory no Default - deployDescriptor Secret no Configuration scope \u2612 parameter \u2612 general \u2612 steps \u2612 stages Resource references none","title":"stashContent"},{"location":"steps/gitopsUpdateDeployment/#tool","text":"Defines the tool which should be used to update the deployment description. back to overview Scope Details Aliases - Type string Mandatory no Default kubectl Possible values - kubectl - helm - kustomize Secret no Configuration scope \u2612 parameter \u2610 general \u2612 steps \u2612 stages Resource references none","title":"tool"},{"location":"steps/gitopsUpdateDeployment/#username","text":"User name for git authentication back to overview Scope Details Aliases - Type string Mandatory yes Default $PIPER_username (if set) Secret yes Configuration scope \u2612 parameter \u2610 general \u2612 steps \u2612 stages Resource references Jenkins credential id: id: gitHttpsCredentialsId reference to: username Vault resource: name: gitHttpsCredentialVaultSecretName default value: gitHttpsCredential Vault paths: $(vaultPath)/gitHttpsCredential $(vaultBasePath)/$(vaultPipelineName)/gitHttpsCredential $(vaultBasePath)/GROUP-SECRETS/gitHttpsCredential","title":"username"},{"location":"steps/gitopsUpdateDeployment/#verbose","text":"verbose output back to overview Scope Details Aliases - Type bool Mandatory no Default false Possible values - true - false Secret no Configuration scope \u2612 parameter \u2612 general \u2612 steps \u2612 stages Resource references none","title":"verbose"},{"location":"steps/gitopsUpdateDeployment/#githttpscredentialsid","text":"Jenkins 'Username with password' credentials ID containing username/password for http access to your git repository. back to overview Scope Details Aliases - Type string Configuration scope \u2612 parameter \u2612 general \u2612 steps \u2612 stages","title":"gitHttpsCredentialsId"},{"location":"steps/golangBuild/","text":"golangBuild \u00b6 This step will execute a golang build. Description \u00b6 This step will build a golang project. It will also execute golang-based tests using gotestsum and with that allows for reporting test results and test coverage. Besides execution of the default tests the step allows for running an additional integration test run using -tags=integration using pattern ./... If the build is successful the resulting artifact can be uploaded to e.g. a binary repository automatically. Usage \u00b6 We recommend to define values of step parameters via .pipeline/config.yml file . In this case, calling the step is essentially reduced to defining the step name. Calling the step can be done either in an orchestrator specific way (e.g. via a Jenkins library step) or on the command line. Jenkins Command Line library ( 'piper-lib-os' ) golangBuild script: this piper golangBuild Outputs \u00b6 Output type Details commonPipelineEnvironment custom/buildSettingsInfo custom/artifacts Parameters \u00b6 Overview - Step \u00b6 Name Mandatory Additional information script (yes) reference to Jenkins main pipeline script artifactVersion no buildFlags no buildSettingsInfo no cgoEnabled no coverageFormat no createBOM no customTlsCertificateLinks no excludeGeneratedFromCoverage no failOnLintingError no golangciLintUrl no ldflagsTemplate no output no packages no privateModules no privateModulesGitToken no pass via ENV, Vault or Jenkins credentials ( golangPrivateModulesGitTokenCredentialsId ) publish no reportCoverage no runIntegrationTests no runLint no runTests no targetArchitectures no targetRepositoryPassword no pass via ENV or Jenkins credentials targetRepositoryURL no targetRepositoryUser no pass via ENV or Jenkins credentials testOptions no testResultFormat no verbose no activates debug output Overview - Execution Environment \u00b6 Orchestrator-specific only These parameters are relevant for orchestrator usage and not considered when using the command line option. Name Mandatory Additional information containerCommand no containerShell no dockerEnvVars no dockerImage no dockerName no dockerOptions no dockerPullImage no dockerVolumeBind no dockerWorkspace no Details \u00b6 artifactVersion \u00b6 Version of the artifact to be built. back to overview Scope Details Aliases - Type string Mandatory no Default $PIPER_artifactVersion (if set) Secret no Configuration scope \u2612 parameter \u2612 general \u2612 steps \u2612 stages Resource references commonPipelineEnvironment : reference to: artifactVersion buildFlags \u00b6 Defines list of build flags to be used. back to overview Scope Details Aliases - Type []string Mandatory no Default $PIPER_buildFlags (if set) Secret no Configuration scope \u2612 parameter \u2610 general \u2612 steps \u2612 stages Resource references none buildSettingsInfo \u00b6 build settings info is typically filled by the step automatically to create information about the build settings that were used during the maven build . This information is typically used for compliance related processes. back to overview Scope Details Aliases - Type string Mandatory no Default $PIPER_buildSettingsInfo (if set) Secret no Configuration scope \u2612 parameter \u2610 general \u2612 steps \u2612 stages Resource references commonPipelineEnvironment : reference to: custom/buildSettingsInfo cgoEnabled \u00b6 If active: enables the creation of Go packages that call C code. back to overview Scope Details Aliases - Type bool Mandatory no Default false Possible values - true - false Secret no Configuration scope \u2612 parameter \u2610 general \u2612 steps \u2612 stages Resource references none containerCommand \u00b6 Jenkins-specific: Used for proper environment setup. Kubernetes only: Allows to specify start command for container created with dockerImage parameter to overwrite Piper default (/usr/bin/tail -f /dev/null). back to overview Scope Details Aliases - Type string Mandatory no Default Secret no Configuration scope \u2612 parameter \u2612 general \u2612 steps \u2612 stages Resource references none containerShell \u00b6 Jenkins-specific: Used for proper environment setup. Allows to specify the shell to be executed for container with containerName. back to overview Scope Details Aliases - Type string Mandatory no Default Secret no Configuration scope \u2612 parameter \u2612 general \u2612 steps \u2612 stages Resource references none coverageFormat \u00b6 Defines the format of the coverage repository. back to overview Scope Details Aliases - Type string Mandatory no Default html Possible values - cobertura - html Secret no Configuration scope \u2612 parameter \u2610 general \u2612 steps \u2612 stages Resource references none createBOM \u00b6 Creates the bill of materials (BOM) using CycloneDX plugin. It requires Go 1.17 or newer. back to overview Scope Details Aliases - Type bool Mandatory no Default false Possible values - true - false Secret no Configuration scope \u2612 parameter \u2612 general \u2612 steps \u2612 stages Resource references none customTlsCertificateLinks \u00b6 List of download links to custom TLS certificates. This is required to ensure trusted connections to instances with repositories (like nexus) when publish flag is set to true. back to overview Scope Details Aliases - Type []string Mandatory no Default $PIPER_customTlsCertificateLinks (if set) Secret no Configuration scope \u2612 parameter \u2612 general \u2612 steps \u2612 stages Resource references none dockerEnvVars \u00b6 Environment variables to set in the container, e.g. [http_proxy: \"proxy:8080\"]. back to overview Scope Details Aliases - Type map[string]string Mandatory no Default Secret no Configuration scope \u2612 parameter \u2612 general \u2612 steps \u2612 stages Resource references none dockerImage \u00b6 Name of the docker image that should be used. If empty, Docker is not used and the command is executed directly on the Jenkins system. back to overview Scope Details Aliases - Type string Mandatory no Default golang:1 Secret no Configuration scope \u2612 parameter \u2612 general \u2612 steps \u2612 stages Resource references none dockerName \u00b6 Kubernetes only: Name of the container launching dockerImage. SideCar only: Name of the container in local network. back to overview Scope Details Aliases - Type string Mandatory no Default golang Secret no Configuration scope \u2612 parameter \u2612 general \u2612 steps \u2612 stages Resource references none dockerOptions \u00b6 Docker options to be set when starting the container. back to overview Scope Details Aliases - Type []string Mandatory no Default [{-u 0}] Secret no Configuration scope \u2612 parameter \u2612 general \u2612 steps \u2612 stages Resource references none dockerPullImage \u00b6 Set this to 'false' to bypass a docker image pull. Useful during development process. Allows testing of images which are available in the local registry only. back to overview Scope Details Aliases - Type bool Mandatory no Default true Possible values - true - false Secret no Configuration scope \u2612 parameter \u2612 general \u2612 steps \u2612 stages Resource references none dockerVolumeBind \u00b6 Jenkins-specific: Used for proper environment setup. Volumes that should be mounted into the docker container. back to overview Scope Details Aliases - Type map[string]string Mandatory no Default Secret no Configuration scope \u2612 parameter \u2612 general \u2612 steps \u2612 stages Resource references none dockerWorkspace \u00b6 Jenkins-specific: Used for proper environment setup. Kubernetes only: Specifies a dedicated user home directory for the container which will be passed as value for environment variable HOME . back to overview Scope Details Aliases - Type string Mandatory no Default Secret no Configuration scope \u2612 parameter \u2612 general \u2612 steps \u2612 stages Resource references none excludeGeneratedFromCoverage \u00b6 Defines if generated files should be excluded, according to https://golang.org/s/generatedcode . back to overview Scope Details Aliases - Type bool Mandatory no Default true Possible values - true - false Secret no Configuration scope \u2612 parameter \u2610 general \u2612 steps \u2612 stages Resource references none failOnLintingError \u00b6 Defines if step will return an error in case linting runs into a problem back to overview Scope Details Aliases - Type bool Mandatory no Default true Possible values - true - false Secret no Configuration scope \u2612 parameter \u2610 general \u2612 steps \u2612 stages Resource references none golangciLintUrl \u00b6 Specifies the download url of the Golangci-Lint Linux amd64 tar binary file. This can be found at https://github.com/golangci/golangci-lint/releases. back to overview Scope Details Aliases - Type string Mandatory no Default https://github.com/golangci/golangci-lint/releases/download/v1.51.2/golangci-lint-1.51.2-linux-amd64.tar.gz Secret no Configuration scope \u2612 parameter \u2610 general \u2612 steps \u2610 stages Resource references none ldflagsTemplate \u00b6 The template allows using commonPipelineEnvironment parameters in the form .CPE[\"<paramName>\"] Examples * `-X github.com/SAP/jenkins-library/pkg/log.Version={{index .CPE \"artifactVersion\"}}`. * `-X github.com/SAP/jenkins-library/pkg/log.LibraryRepository={{index .CPE \"custom/repositoryId\"}}` back to overview Scope Details Aliases - Type string Mandatory no Default $PIPER_ldflagsTemplate (if set) Secret no Configuration scope \u2612 parameter \u2610 general \u2612 steps \u2612 stages Resource references none output \u00b6 Defines the resulting executable or object name as per go build documentation. For multiple architectures, output serves as prefix, and the resulting name will be in format <output>-<os>.<arch> . back to overview Scope Details Aliases - Type string Mandatory no Default $PIPER_output (if set) Secret no Configuration scope \u2612 parameter \u2610 general \u2612 steps \u2612 stages Resource references none packages \u00b6 List of packages to be build as per go build documentation. back to overview Scope Details Aliases - Type []string Mandatory no Default $PIPER_packages (if set) Secret no Configuration scope \u2612 parameter \u2610 general \u2612 steps \u2612 stages Resource references none privateModules \u00b6 Tells go which modules shall be considered to be private (by setting GOPRIVATE ). back to overview Scope Details Aliases - Type string Mandatory no Default $PIPER_privateModules (if set) Secret no Configuration scope \u2612 parameter \u2612 general \u2612 steps \u2612 stages Resource references none privateModulesGitToken \u00b6 GitHub personal access token as per https://help.github.com/en/github/authenticating-to-github/creating-a-personal-access-token-for-the-command-line. back to overview Scope Details Aliases - Type string Mandatory no Default $PIPER_privateModulesGitToken (if set) Secret yes Configuration scope \u2612 parameter \u2612 general \u2612 steps \u2612 stages Resource references Jenkins credential id: id: golangPrivateModulesGitTokenCredentialsId reference to: password Vault resource: name: golangPrivateModulesGitTokenVaultSecret default value: golang Vault paths: $(vaultPath)/golang $(vaultBasePath)/$(vaultPipelineName)/golang $(vaultBasePath)/GROUP-SECRETS/golang publish \u00b6 Configures the build to publish artifacts to a repository. back to overview Scope Details Aliases - Type bool Mandatory no Default false Possible values - true - false Secret no Configuration scope \u2612 parameter \u2610 general \u2612 steps \u2612 stages Resource references none reportCoverage \u00b6 Defines if a coverage report should be created. back to overview Scope Details Aliases - Type bool Mandatory no Default true Possible values - true - false Secret no Configuration scope \u2612 parameter \u2610 general \u2612 steps \u2612 stages Resource references none runIntegrationTests \u00b6 Activates execution of a second test run using tag integration . back to overview Scope Details Aliases - Type bool Mandatory no Default false Possible values - true - false Secret no Configuration scope \u2612 parameter \u2610 general \u2612 steps \u2612 stages Resource references none runLint \u00b6 Configures the build to run linters with golangci-lint . back to overview Scope Details Aliases - Type bool Mandatory no Default false Possible values - true - false Secret no Configuration scope \u2612 parameter \u2610 general \u2612 steps \u2612 stages Resource references none runTests \u00b6 Activates execution of tests using gotestsum . Tag Go unit tests with 'unit' build tag to exclude them using --runTests=false back to overview Scope Details Aliases - Type bool Mandatory no Default true Possible values - true - false Secret no Configuration scope \u2612 parameter \u2610 general \u2612 steps \u2612 stages Resource references none script \u00b6 The common script environment of the Jenkinsfile running. Typically the reference to the script calling the pipeline step is provided with the this parameter, as in script: this . This allows the function to access the commonPipelineEnvironment for retrieving, e.g. configuration parameters. back to overview Scope Details Aliases - Type Jenkins Script Mandatory yes Default Secret no Configuration scope \u2610 parameter \u2610 general \u2610 steps \u2610 stages Resource references none targetArchitectures \u00b6 Defines the target architectures for which the build should run using OS and architecture separated by a comma. If you specify multiple architectures, make sure to set output parameter as well. back to overview Scope Details Aliases - Type []string Mandatory no Default linux,amd64 Secret no Configuration scope \u2612 parameter \u2612 general \u2612 steps \u2612 stages Resource references none targetRepositoryPassword \u00b6 Password for the target repository where the compiled binaries shall be uploaded - typically provided by the CI/CD environment. back to overview Scope Details Aliases - Type string Mandatory no Default $PIPER_targetRepositoryPassword (if set) Secret yes Configuration scope \u2612 parameter \u2610 general \u2612 steps \u2612 stages Resource references commonPipelineEnvironment : reference to: custom/rawRepositoryPassword commonPipelineEnvironment : reference to: custom/repositoryPassword targetRepositoryURL \u00b6 URL of the target repository where the compiled binaries shall be uploaded - typically provided by the CI/CD environment. back to overview Scope Details Aliases - Type string Mandatory no Default $PIPER_targetRepositoryURL (if set) Secret no Configuration scope \u2612 parameter \u2610 general \u2612 steps \u2612 stages Resource references commonPipelineEnvironment : reference to: custom/rawRepositoryURL commonPipelineEnvironment : reference to: custom/repositoryUrl targetRepositoryUser \u00b6 Username for the target repository where the compiled binaries shall be uploaded - typically provided by the CI/CD environment. back to overview Scope Details Aliases - Type string Mandatory no Default $PIPER_targetRepositoryUser (if set) Secret yes Configuration scope \u2612 parameter \u2610 general \u2612 steps \u2612 stages Resource references commonPipelineEnvironment : reference to: custom/rawRepositoryUsername commonPipelineEnvironment : reference to: custom/repositoryUsername testOptions \u00b6 Options to pass to test as per go test documentation (comprises e.g. flags, packages). back to overview Scope Details Aliases - Type []string Mandatory no Default $PIPER_testOptions (if set) Secret no Configuration scope \u2612 parameter \u2610 general \u2612 steps \u2612 stages Resource references none testResultFormat \u00b6 Defines the output format of the test results. back to overview Scope Details Aliases - Type string Mandatory no Default junit Possible values - junit - standard Secret no Configuration scope \u2612 parameter \u2610 general \u2612 steps \u2612 stages Resource references none verbose \u00b6 verbose output back to overview Scope Details Aliases - Type bool Mandatory no Default false Possible values - true - false Secret no Configuration scope \u2612 parameter \u2612 general \u2612 steps \u2612 stages Resource references none golangPrivateModulesGitTokenCredentialsId \u00b6 Jenkins 'Username with password' credentials ID containing username/password for http access to your git repos where your go private modules are stored. back to overview Scope Details Aliases - Type string Configuration scope \u2612 parameter \u2612 general \u2612 steps \u2612 stages","title":"golangBuild"},{"location":"steps/golangBuild/#golangbuild","text":"This step will execute a golang build.","title":"golangBuild"},{"location":"steps/golangBuild/#description","text":"This step will build a golang project. It will also execute golang-based tests using gotestsum and with that allows for reporting test results and test coverage. Besides execution of the default tests the step allows for running an additional integration test run using -tags=integration using pattern ./... If the build is successful the resulting artifact can be uploaded to e.g. a binary repository automatically.","title":"Description"},{"location":"steps/golangBuild/#usage","text":"We recommend to define values of step parameters via .pipeline/config.yml file . In this case, calling the step is essentially reduced to defining the step name. Calling the step can be done either in an orchestrator specific way (e.g. via a Jenkins library step) or on the command line. Jenkins Command Line library ( 'piper-lib-os' ) golangBuild script: this piper golangBuild","title":"Usage"},{"location":"steps/golangBuild/#outputs","text":"Output type Details commonPipelineEnvironment custom/buildSettingsInfo custom/artifacts","title":"Outputs"},{"location":"steps/golangBuild/#parameters","text":"","title":"Parameters"},{"location":"steps/golangBuild/#overview-step","text":"Name Mandatory Additional information script (yes) reference to Jenkins main pipeline script artifactVersion no buildFlags no buildSettingsInfo no cgoEnabled no coverageFormat no createBOM no customTlsCertificateLinks no excludeGeneratedFromCoverage no failOnLintingError no golangciLintUrl no ldflagsTemplate no output no packages no privateModules no privateModulesGitToken no pass via ENV, Vault or Jenkins credentials ( golangPrivateModulesGitTokenCredentialsId ) publish no reportCoverage no runIntegrationTests no runLint no runTests no targetArchitectures no targetRepositoryPassword no pass via ENV or Jenkins credentials targetRepositoryURL no targetRepositoryUser no pass via ENV or Jenkins credentials testOptions no testResultFormat no verbose no activates debug output","title":"Overview - Step"},{"location":"steps/golangBuild/#overview-execution-environment","text":"Orchestrator-specific only These parameters are relevant for orchestrator usage and not considered when using the command line option. Name Mandatory Additional information containerCommand no containerShell no dockerEnvVars no dockerImage no dockerName no dockerOptions no dockerPullImage no dockerVolumeBind no dockerWorkspace no","title":"Overview - Execution Environment"},{"location":"steps/golangBuild/#details","text":"","title":"Details"},{"location":"steps/golangBuild/#artifactversion","text":"Version of the artifact to be built. back to overview Scope Details Aliases - Type string Mandatory no Default $PIPER_artifactVersion (if set) Secret no Configuration scope \u2612 parameter \u2612 general \u2612 steps \u2612 stages Resource references commonPipelineEnvironment : reference to: artifactVersion","title":"artifactVersion"},{"location":"steps/golangBuild/#buildflags","text":"Defines list of build flags to be used. back to overview Scope Details Aliases - Type []string Mandatory no Default $PIPER_buildFlags (if set) Secret no Configuration scope \u2612 parameter \u2610 general \u2612 steps \u2612 stages Resource references none","title":"buildFlags"},{"location":"steps/golangBuild/#buildsettingsinfo","text":"build settings info is typically filled by the step automatically to create information about the build settings that were used during the maven build . This information is typically used for compliance related processes. back to overview Scope Details Aliases - Type string Mandatory no Default $PIPER_buildSettingsInfo (if set) Secret no Configuration scope \u2612 parameter \u2610 general \u2612 steps \u2612 stages Resource references commonPipelineEnvironment : reference to: custom/buildSettingsInfo","title":"buildSettingsInfo"},{"location":"steps/golangBuild/#cgoenabled","text":"If active: enables the creation of Go packages that call C code. back to overview Scope Details Aliases - Type bool Mandatory no Default false Possible values - true - false Secret no Configuration scope \u2612 parameter \u2610 general \u2612 steps \u2612 stages Resource references none","title":"cgoEnabled"},{"location":"steps/golangBuild/#containercommand","text":"Jenkins-specific: Used for proper environment setup. Kubernetes only: Allows to specify start command for container created with dockerImage parameter to overwrite Piper default (/usr/bin/tail -f /dev/null). back to overview Scope Details Aliases - Type string Mandatory no Default Secret no Configuration scope \u2612 parameter \u2612 general \u2612 steps \u2612 stages Resource references none","title":"containerCommand"},{"location":"steps/golangBuild/#containershell","text":"Jenkins-specific: Used for proper environment setup. Allows to specify the shell to be executed for container with containerName. back to overview Scope Details Aliases - Type string Mandatory no Default Secret no Configuration scope \u2612 parameter \u2612 general \u2612 steps \u2612 stages Resource references none","title":"containerShell"},{"location":"steps/golangBuild/#coverageformat","text":"Defines the format of the coverage repository. back to overview Scope Details Aliases - Type string Mandatory no Default html Possible values - cobertura - html Secret no Configuration scope \u2612 parameter \u2610 general \u2612 steps \u2612 stages Resource references none","title":"coverageFormat"},{"location":"steps/golangBuild/#createbom","text":"Creates the bill of materials (BOM) using CycloneDX plugin. It requires Go 1.17 or newer. back to overview Scope Details Aliases - Type bool Mandatory no Default false Possible values - true - false Secret no Configuration scope \u2612 parameter \u2612 general \u2612 steps \u2612 stages Resource references none","title":"createBOM"},{"location":"steps/golangBuild/#customtlscertificatelinks","text":"List of download links to custom TLS certificates. This is required to ensure trusted connections to instances with repositories (like nexus) when publish flag is set to true. back to overview Scope Details Aliases - Type []string Mandatory no Default $PIPER_customTlsCertificateLinks (if set) Secret no Configuration scope \u2612 parameter \u2612 general \u2612 steps \u2612 stages Resource references none","title":"customTlsCertificateLinks"},{"location":"steps/golangBuild/#dockerenvvars","text":"Environment variables to set in the container, e.g. [http_proxy: \"proxy:8080\"]. back to overview Scope Details Aliases - Type map[string]string Mandatory no Default Secret no Configuration scope \u2612 parameter \u2612 general \u2612 steps \u2612 stages Resource references none","title":"dockerEnvVars"},{"location":"steps/golangBuild/#dockerimage","text":"Name of the docker image that should be used. If empty, Docker is not used and the command is executed directly on the Jenkins system. back to overview Scope Details Aliases - Type string Mandatory no Default golang:1 Secret no Configuration scope \u2612 parameter \u2612 general \u2612 steps \u2612 stages Resource references none","title":"dockerImage"},{"location":"steps/golangBuild/#dockername","text":"Kubernetes only: Name of the container launching dockerImage. SideCar only: Name of the container in local network. back to overview Scope Details Aliases - Type string Mandatory no Default golang Secret no Configuration scope \u2612 parameter \u2612 general \u2612 steps \u2612 stages Resource references none","title":"dockerName"},{"location":"steps/golangBuild/#dockeroptions","text":"Docker options to be set when starting the container. back to overview Scope Details Aliases - Type []string Mandatory no Default [{-u 0}] Secret no Configuration scope \u2612 parameter \u2612 general \u2612 steps \u2612 stages Resource references none","title":"dockerOptions"},{"location":"steps/golangBuild/#dockerpullimage","text":"Set this to 'false' to bypass a docker image pull. Useful during development process. Allows testing of images which are available in the local registry only. back to overview Scope Details Aliases - Type bool Mandatory no Default true Possible values - true - false Secret no Configuration scope \u2612 parameter \u2612 general \u2612 steps \u2612 stages Resource references none","title":"dockerPullImage"},{"location":"steps/golangBuild/#dockervolumebind","text":"Jenkins-specific: Used for proper environment setup. Volumes that should be mounted into the docker container. back to overview Scope Details Aliases - Type map[string]string Mandatory no Default Secret no Configuration scope \u2612 parameter \u2612 general \u2612 steps \u2612 stages Resource references none","title":"dockerVolumeBind"},{"location":"steps/golangBuild/#dockerworkspace","text":"Jenkins-specific: Used for proper environment setup. Kubernetes only: Specifies a dedicated user home directory for the container which will be passed as value for environment variable HOME . back to overview Scope Details Aliases - Type string Mandatory no Default Secret no Configuration scope \u2612 parameter \u2612 general \u2612 steps \u2612 stages Resource references none","title":"dockerWorkspace"},{"location":"steps/golangBuild/#excludegeneratedfromcoverage","text":"Defines if generated files should be excluded, according to https://golang.org/s/generatedcode . back to overview Scope Details Aliases - Type bool Mandatory no Default true Possible values - true - false Secret no Configuration scope \u2612 parameter \u2610 general \u2612 steps \u2612 stages Resource references none","title":"excludeGeneratedFromCoverage"},{"location":"steps/golangBuild/#failonlintingerror","text":"Defines if step will return an error in case linting runs into a problem back to overview Scope Details Aliases - Type bool Mandatory no Default true Possible values - true - false Secret no Configuration scope \u2612 parameter \u2610 general \u2612 steps \u2612 stages Resource references none","title":"failOnLintingError"},{"location":"steps/golangBuild/#golangcilinturl","text":"Specifies the download url of the Golangci-Lint Linux amd64 tar binary file. This can be found at https://github.com/golangci/golangci-lint/releases. back to overview Scope Details Aliases - Type string Mandatory no Default https://github.com/golangci/golangci-lint/releases/download/v1.51.2/golangci-lint-1.51.2-linux-amd64.tar.gz Secret no Configuration scope \u2612 parameter \u2610 general \u2612 steps \u2610 stages Resource references none","title":"golangciLintUrl"},{"location":"steps/golangBuild/#ldflagstemplate","text":"The template allows using commonPipelineEnvironment parameters in the form .CPE[\"<paramName>\"] Examples * `-X github.com/SAP/jenkins-library/pkg/log.Version={{index .CPE \"artifactVersion\"}}`. * `-X github.com/SAP/jenkins-library/pkg/log.LibraryRepository={{index .CPE \"custom/repositoryId\"}}` back to overview Scope Details Aliases - Type string Mandatory no Default $PIPER_ldflagsTemplate (if set) Secret no Configuration scope \u2612 parameter \u2610 general \u2612 steps \u2612 stages Resource references none","title":"ldflagsTemplate"},{"location":"steps/golangBuild/#output","text":"Defines the resulting executable or object name as per go build documentation. For multiple architectures, output serves as prefix, and the resulting name will be in format <output>-<os>.<arch> . back to overview Scope Details Aliases - Type string Mandatory no Default $PIPER_output (if set) Secret no Configuration scope \u2612 parameter \u2610 general \u2612 steps \u2612 stages Resource references none","title":"output"},{"location":"steps/golangBuild/#packages","text":"List of packages to be build as per go build documentation. back to overview Scope Details Aliases - Type []string Mandatory no Default $PIPER_packages (if set) Secret no Configuration scope \u2612 parameter \u2610 general \u2612 steps \u2612 stages Resource references none","title":"packages"},{"location":"steps/golangBuild/#privatemodules","text":"Tells go which modules shall be considered to be private (by setting GOPRIVATE ). back to overview Scope Details Aliases - Type string Mandatory no Default $PIPER_privateModules (if set) Secret no Configuration scope \u2612 parameter \u2612 general \u2612 steps \u2612 stages Resource references none","title":"privateModules"},{"location":"steps/golangBuild/#privatemodulesgittoken","text":"GitHub personal access token as per https://help.github.com/en/github/authenticating-to-github/creating-a-personal-access-token-for-the-command-line. back to overview Scope Details Aliases - Type string Mandatory no Default $PIPER_privateModulesGitToken (if set) Secret yes Configuration scope \u2612 parameter \u2612 general \u2612 steps \u2612 stages Resource references Jenkins credential id: id: golangPrivateModulesGitTokenCredentialsId reference to: password Vault resource: name: golangPrivateModulesGitTokenVaultSecret default value: golang Vault paths: $(vaultPath)/golang $(vaultBasePath)/$(vaultPipelineName)/golang $(vaultBasePath)/GROUP-SECRETS/golang","title":"privateModulesGitToken"},{"location":"steps/golangBuild/#publish","text":"Configures the build to publish artifacts to a repository. back to overview Scope Details Aliases - Type bool Mandatory no Default false Possible values - true - false Secret no Configuration scope \u2612 parameter \u2610 general \u2612 steps \u2612 stages Resource references none","title":"publish"},{"location":"steps/golangBuild/#reportcoverage","text":"Defines if a coverage report should be created. back to overview Scope Details Aliases - Type bool Mandatory no Default true Possible values - true - false Secret no Configuration scope \u2612 parameter \u2610 general \u2612 steps \u2612 stages Resource references none","title":"reportCoverage"},{"location":"steps/golangBuild/#runintegrationtests","text":"Activates execution of a second test run using tag integration . back to overview Scope Details Aliases - Type bool Mandatory no Default false Possible values - true - false Secret no Configuration scope \u2612 parameter \u2610 general \u2612 steps \u2612 stages Resource references none","title":"runIntegrationTests"},{"location":"steps/golangBuild/#runlint","text":"Configures the build to run linters with golangci-lint . back to overview Scope Details Aliases - Type bool Mandatory no Default false Possible values - true - false Secret no Configuration scope \u2612 parameter \u2610 general \u2612 steps \u2612 stages Resource references none","title":"runLint"},{"location":"steps/golangBuild/#runtests","text":"Activates execution of tests using gotestsum . Tag Go unit tests with 'unit' build tag to exclude them using --runTests=false back to overview Scope Details Aliases - Type bool Mandatory no Default true Possible values - true - false Secret no Configuration scope \u2612 parameter \u2610 general \u2612 steps \u2612 stages Resource references none","title":"runTests"},{"location":"steps/golangBuild/#script","text":"The common script environment of the Jenkinsfile running. Typically the reference to the script calling the pipeline step is provided with the this parameter, as in script: this . This allows the function to access the commonPipelineEnvironment for retrieving, e.g. configuration parameters. back to overview Scope Details Aliases - Type Jenkins Script Mandatory yes Default Secret no Configuration scope \u2610 parameter \u2610 general \u2610 steps \u2610 stages Resource references none","title":"script"},{"location":"steps/golangBuild/#targetarchitectures","text":"Defines the target architectures for which the build should run using OS and architecture separated by a comma. If you specify multiple architectures, make sure to set output parameter as well. back to overview Scope Details Aliases - Type []string Mandatory no Default linux,amd64 Secret no Configuration scope \u2612 parameter \u2612 general \u2612 steps \u2612 stages Resource references none","title":"targetArchitectures"},{"location":"steps/golangBuild/#targetrepositorypassword","text":"Password for the target repository where the compiled binaries shall be uploaded - typically provided by the CI/CD environment. back to overview Scope Details Aliases - Type string Mandatory no Default $PIPER_targetRepositoryPassword (if set) Secret yes Configuration scope \u2612 parameter \u2610 general \u2612 steps \u2612 stages Resource references commonPipelineEnvironment : reference to: custom/rawRepositoryPassword commonPipelineEnvironment : reference to: custom/repositoryPassword","title":"targetRepositoryPassword"},{"location":"steps/golangBuild/#targetrepositoryurl","text":"URL of the target repository where the compiled binaries shall be uploaded - typically provided by the CI/CD environment. back to overview Scope Details Aliases - Type string Mandatory no Default $PIPER_targetRepositoryURL (if set) Secret no Configuration scope \u2612 parameter \u2610 general \u2612 steps \u2612 stages Resource references commonPipelineEnvironment : reference to: custom/rawRepositoryURL commonPipelineEnvironment : reference to: custom/repositoryUrl","title":"targetRepositoryURL"},{"location":"steps/golangBuild/#targetrepositoryuser","text":"Username for the target repository where the compiled binaries shall be uploaded - typically provided by the CI/CD environment. back to overview Scope Details Aliases - Type string Mandatory no Default $PIPER_targetRepositoryUser (if set) Secret yes Configuration scope \u2612 parameter \u2610 general \u2612 steps \u2612 stages Resource references commonPipelineEnvironment : reference to: custom/rawRepositoryUsername commonPipelineEnvironment : reference to: custom/repositoryUsername","title":"targetRepositoryUser"},{"location":"steps/golangBuild/#testoptions","text":"Options to pass to test as per go test documentation (comprises e.g. flags, packages). back to overview Scope Details Aliases - Type []string Mandatory no Default $PIPER_testOptions (if set) Secret no Configuration scope \u2612 parameter \u2610 general \u2612 steps \u2612 stages Resource references none","title":"testOptions"},{"location":"steps/golangBuild/#testresultformat","text":"Defines the output format of the test results. back to overview Scope Details Aliases - Type string Mandatory no Default junit Possible values - junit - standard Secret no Configuration scope \u2612 parameter \u2610 general \u2612 steps \u2612 stages Resource references none","title":"testResultFormat"},{"location":"steps/golangBuild/#verbose","text":"verbose output back to overview Scope Details Aliases - Type bool Mandatory no Default false Possible values - true - false Secret no Configuration scope \u2612 parameter \u2612 general \u2612 steps \u2612 stages Resource references none","title":"verbose"},{"location":"steps/golangBuild/#golangprivatemodulesgittokencredentialsid","text":"Jenkins 'Username with password' credentials ID containing username/password for http access to your git repos where your go private modules are stored. back to overview Scope Details Aliases - Type string Configuration scope \u2612 parameter \u2612 general \u2612 steps \u2612 stages","title":"golangPrivateModulesGitTokenCredentialsId"},{"location":"steps/gradleExecuteBuild/","text":"gradleExecuteBuild \u00b6 This step runs a gradle build command with parameters provided to the step. Description \u00b6 This step runs a gradle build command with parameters provided to the step.Supports execution of gradle tasks with or without wrapper.Gradle tasks and flags can be specified via 'task' or 'buildFlags' parameter. If both are not specified 'build' task will run by default. Usage \u00b6 We recommend to define values of step parameters via .pipeline/config.yml file . In this case, calling the step is essentially reduced to defining the step name. Calling the step can be done either in an orchestrator specific way (e.g. via a Jenkins library step) or on the command line. Jenkins Command Line library ( 'piper-lib-os' ) gradleExecuteBuild script: this piper gradleExecuteBuild Outputs \u00b6 Output type Details commonPipelineEnvironment custom/artifacts custom/buildSettingsInfo Parameters \u00b6 Overview - Step \u00b6 Name Mandatory Additional information script (yes) reference to Jenkins main pipeline script applyPublishingForAllProjects no artifactGroupId no artifactId no artifactVersion no buildFlags no buildSettingsInfo no createBOM no excludeCreateBOMForProjects no excludePublishingForProjects no path no publish no repositoryPassword no pass via ENV or Jenkins credentials repositoryUrl no repositoryUsername no pass via ENV or Jenkins credentials task no useWrapper no verbose no activates debug output Overview - Execution Environment \u00b6 Orchestrator-specific only These parameters are relevant for orchestrator usage and not considered when using the command line option. Name Mandatory Additional information containerCommand no containerShell no dockerEnvVars no dockerImage no dockerName no dockerOptions no dockerPullImage no dockerVolumeBind no dockerWorkspace no Details \u00b6 applyPublishingForAllProjects \u00b6 If set to false publishing logic will be applied in 'rootProject' directive, otherwise 'allprojects' will be directive used back to overview Scope Details Aliases - Type bool Mandatory no Default false Possible values - true - false Secret no Configuration scope \u2612 parameter \u2610 general \u2612 steps \u2612 stages Resource references none artifactGroupId \u00b6 The group of the artifact. back to overview Scope Details Aliases - Type string Mandatory no Default $PIPER_artifactGroupId (if set) Secret no Configuration scope \u2612 parameter \u2610 general \u2612 steps \u2612 stages Resource references commonPipelineEnvironment : reference to: groupId artifactId \u00b6 The name of the artifact. back to overview Scope Details Aliases - Type string Mandatory no Default $PIPER_artifactId (if set) Secret no Configuration scope \u2612 parameter \u2610 general \u2612 steps \u2612 stages Resource references commonPipelineEnvironment : reference to: artifactId artifactVersion \u00b6 Version of the artifact to be built. back to overview Scope Details Aliases - Type string Mandatory no Default $PIPER_artifactVersion (if set) Secret no Configuration scope \u2612 parameter \u2612 general \u2612 steps \u2612 stages Resource references commonPipelineEnvironment : reference to: artifactVersion buildFlags \u00b6 Defines a list of tasks and/or arguments to be provided for gradle in the respective order to be executed. This list takes precedence if specified over 'task' parameter To run command gradle clean build -x test , it can be achieved as follows steps: gradleExecuteBuild: buildFlags: - clean - build - -x - test back to overview Scope Details Aliases - Type []string Mandatory no Default $PIPER_buildFlags (if set) Secret no Configuration scope \u2612 parameter \u2610 general \u2612 steps \u2612 stages Resource references none buildSettingsInfo \u00b6 build settings info is typically filled by the step automatically to create information about the build settings that were used during the gradle build. This information is typically used for compliance related processes. back to overview Scope Details Aliases - Type string Mandatory no Default $PIPER_buildSettingsInfo (if set) Secret no Configuration scope \u2612 parameter \u2610 general \u2612 steps \u2612 stages Resource references commonPipelineEnvironment : reference to: custom/buildSettingsInfo containerCommand \u00b6 Jenkins-specific: Used for proper environment setup. Kubernetes only: Allows to specify start command for container created with dockerImage parameter to overwrite Piper default (/usr/bin/tail -f /dev/null). back to overview Scope Details Aliases - Type string Mandatory no Default Secret no Configuration scope \u2612 parameter \u2612 general \u2612 steps \u2612 stages Resource references none containerShell \u00b6 Jenkins-specific: Used for proper environment setup. Allows to specify the shell to be executed for container with containerName. back to overview Scope Details Aliases - Type string Mandatory no Default Secret no Configuration scope \u2612 parameter \u2612 general \u2612 steps \u2612 stages Resource references none createBOM \u00b6 Creates the bill of materials (BOM) using CycloneDX plugin. back to overview Scope Details Aliases - Type bool Mandatory no Default false Possible values - true - false Secret no Configuration scope \u2612 parameter \u2612 general \u2612 steps \u2612 stages Resource references none dockerEnvVars \u00b6 Environment variables to set in the container, e.g. [http_proxy: \"proxy:8080\"]. back to overview Scope Details Aliases - Type map[string]string Mandatory no Default Secret no Configuration scope \u2612 parameter \u2612 general \u2612 steps \u2612 stages Resource references none dockerImage \u00b6 Name of the docker image that should be used. If empty, Docker is not used and the command is executed directly on the Jenkins system. back to overview Scope Details Aliases - Type string Mandatory no Default gradle:6-jdk11-alpine Secret no Configuration scope \u2612 parameter \u2612 general \u2612 steps \u2612 stages Resource references none dockerName \u00b6 Kubernetes only: Name of the container launching dockerImage. SideCar only: Name of the container in local network. back to overview Scope Details Aliases - Type string Mandatory no Default gradle Secret no Configuration scope \u2612 parameter \u2612 general \u2612 steps \u2612 stages Resource references none dockerOptions \u00b6 Docker options to be set when starting the container. back to overview Scope Details Aliases - Type []string Mandatory no Default Secret no Configuration scope \u2612 parameter \u2612 general \u2612 steps \u2612 stages Resource references none dockerPullImage \u00b6 Set this to 'false' to bypass a docker image pull. Useful during development process. Allows testing of images which are available in the local registry only. back to overview Scope Details Aliases - Type bool Mandatory no Default true Possible values - true - false Secret no Configuration scope \u2612 parameter \u2612 general \u2612 steps \u2612 stages Resource references none dockerVolumeBind \u00b6 Jenkins-specific: Used for proper environment setup. Volumes that should be mounted into the docker container. back to overview Scope Details Aliases - Type map[string]string Mandatory no Default Secret no Configuration scope \u2612 parameter \u2612 general \u2612 steps \u2612 stages Resource references none dockerWorkspace \u00b6 Jenkins-specific: Used for proper environment setup. Kubernetes only: Specifies a dedicated user home directory for the container which will be passed as value for environment variable HOME . back to overview Scope Details Aliases - Type string Mandatory no Default Secret no Configuration scope \u2612 parameter \u2612 general \u2612 steps \u2612 stages Resource references none excludeCreateBOMForProjects \u00b6 Defines which projects/subprojects will be ignored during bom creation. Only if applyCreateBOMForAllProjects is set to true back to overview Scope Details Aliases - Type []string Mandatory no Default $PIPER_excludeCreateBOMForProjects (if set) Secret no Configuration scope \u2612 parameter \u2610 general \u2612 steps \u2612 stages Resource references none excludePublishingForProjects \u00b6 Defines which projects/subprojects will be ignored during publishing. Only if applyCreateBOMForAllProjects is set to true back to overview Scope Details Aliases - Type []string Mandatory no Default $PIPER_excludePublishingForProjects (if set) Secret no Configuration scope \u2612 parameter \u2610 general \u2612 steps \u2612 stages Resource references none path \u00b6 Path to the folder with build.gradle (or build.gradle.kts) file which should be executed. back to overview Scope Details Aliases buildGradlePath Type string Mandatory no Default $PIPER_path (if set) Secret no Configuration scope \u2612 parameter \u2610 general \u2612 steps \u2612 stages Resource references none publish \u00b6 Configures gradle to publish the artifact to a repository. back to overview Scope Details Aliases - Type bool Mandatory no Default false Possible values - true - false Secret no Configuration scope \u2612 parameter \u2610 general \u2612 steps \u2612 stages Resource references none repositoryPassword \u00b6 Password for the repository to which the project artifacts should be published. back to overview Scope Details Aliases - Type string Mandatory no Default $PIPER_repositoryPassword (if set) Secret yes Configuration scope \u2612 parameter \u2612 general \u2612 steps \u2612 stages Resource references commonPipelineEnvironment : reference to: custom/repositoryPassword repositoryUrl \u00b6 Url to the repository to which the project artifacts should be published. back to overview Scope Details Aliases - Type string Mandatory no Default $PIPER_repositoryUrl (if set) Secret no Configuration scope \u2612 parameter \u2612 general \u2612 steps \u2612 stages Resource references commonPipelineEnvironment : reference to: custom/repositoryUrl repositoryUsername \u00b6 Username for the repository to which the project artifacts should be published. back to overview Scope Details Aliases - Type string Mandatory no Default $PIPER_repositoryUsername (if set) Secret yes Configuration scope \u2612 parameter \u2612 general \u2612 steps \u2612 stages Resource references commonPipelineEnvironment : reference to: custom/repositoryUsername script \u00b6 The common script environment of the Jenkinsfile running. Typically the reference to the script calling the pipeline step is provided with the this parameter, as in script: this . This allows the function to access the commonPipelineEnvironment for retrieving, e.g. configuration parameters. back to overview Scope Details Aliases - Type Jenkins Script Mandatory yes Default Secret no Configuration scope \u2610 parameter \u2610 general \u2610 steps \u2610 stages Resource references none task \u00b6 A single gradle task that should be executed. If you prefer more than one, use 'buildFlags' parameter. If 'buildFlags' parameter is specified, this parameter will be ignored. back to overview Scope Details Aliases - Type string Mandatory no Default build Secret no Configuration scope \u2612 parameter \u2610 general \u2612 steps \u2612 stages Resource references none useWrapper \u00b6 If set to false all commands are executed using 'gradle', otherwise 'gradlew' is executed. back to overview Scope Details Aliases - Type bool Mandatory no Default false Possible values - true - false Secret no Configuration scope \u2612 parameter \u2610 general \u2612 steps \u2612 stages Resource references none verbose \u00b6 verbose output back to overview Scope Details Aliases - Type bool Mandatory no Default false Possible values - true - false Secret no Configuration scope \u2612 parameter \u2612 general \u2612 steps \u2612 stages Resource references none","title":"gradleExecuteBuild"},{"location":"steps/gradleExecuteBuild/#gradleexecutebuild","text":"This step runs a gradle build command with parameters provided to the step.","title":"gradleExecuteBuild"},{"location":"steps/gradleExecuteBuild/#description","text":"This step runs a gradle build command with parameters provided to the step.Supports execution of gradle tasks with or without wrapper.Gradle tasks and flags can be specified via 'task' or 'buildFlags' parameter. If both are not specified 'build' task will run by default.","title":"Description"},{"location":"steps/gradleExecuteBuild/#usage","text":"We recommend to define values of step parameters via .pipeline/config.yml file . In this case, calling the step is essentially reduced to defining the step name. Calling the step can be done either in an orchestrator specific way (e.g. via a Jenkins library step) or on the command line. Jenkins Command Line library ( 'piper-lib-os' ) gradleExecuteBuild script: this piper gradleExecuteBuild","title":"Usage"},{"location":"steps/gradleExecuteBuild/#outputs","text":"Output type Details commonPipelineEnvironment custom/artifacts custom/buildSettingsInfo","title":"Outputs"},{"location":"steps/gradleExecuteBuild/#parameters","text":"","title":"Parameters"},{"location":"steps/gradleExecuteBuild/#overview-step","text":"Name Mandatory Additional information script (yes) reference to Jenkins main pipeline script applyPublishingForAllProjects no artifactGroupId no artifactId no artifactVersion no buildFlags no buildSettingsInfo no createBOM no excludeCreateBOMForProjects no excludePublishingForProjects no path no publish no repositoryPassword no pass via ENV or Jenkins credentials repositoryUrl no repositoryUsername no pass via ENV or Jenkins credentials task no useWrapper no verbose no activates debug output","title":"Overview - Step"},{"location":"steps/gradleExecuteBuild/#overview-execution-environment","text":"Orchestrator-specific only These parameters are relevant for orchestrator usage and not considered when using the command line option. Name Mandatory Additional information containerCommand no containerShell no dockerEnvVars no dockerImage no dockerName no dockerOptions no dockerPullImage no dockerVolumeBind no dockerWorkspace no","title":"Overview - Execution Environment"},{"location":"steps/gradleExecuteBuild/#details","text":"","title":"Details"},{"location":"steps/gradleExecuteBuild/#applypublishingforallprojects","text":"If set to false publishing logic will be applied in 'rootProject' directive, otherwise 'allprojects' will be directive used back to overview Scope Details Aliases - Type bool Mandatory no Default false Possible values - true - false Secret no Configuration scope \u2612 parameter \u2610 general \u2612 steps \u2612 stages Resource references none","title":"applyPublishingForAllProjects"},{"location":"steps/gradleExecuteBuild/#artifactgroupid","text":"The group of the artifact. back to overview Scope Details Aliases - Type string Mandatory no Default $PIPER_artifactGroupId (if set) Secret no Configuration scope \u2612 parameter \u2610 general \u2612 steps \u2612 stages Resource references commonPipelineEnvironment : reference to: groupId","title":"artifactGroupId"},{"location":"steps/gradleExecuteBuild/#artifactid","text":"The name of the artifact. back to overview Scope Details Aliases - Type string Mandatory no Default $PIPER_artifactId (if set) Secret no Configuration scope \u2612 parameter \u2610 general \u2612 steps \u2612 stages Resource references commonPipelineEnvironment : reference to: artifactId","title":"artifactId"},{"location":"steps/gradleExecuteBuild/#artifactversion","text":"Version of the artifact to be built. back to overview Scope Details Aliases - Type string Mandatory no Default $PIPER_artifactVersion (if set) Secret no Configuration scope \u2612 parameter \u2612 general \u2612 steps \u2612 stages Resource references commonPipelineEnvironment : reference to: artifactVersion","title":"artifactVersion"},{"location":"steps/gradleExecuteBuild/#buildflags","text":"Defines a list of tasks and/or arguments to be provided for gradle in the respective order to be executed. This list takes precedence if specified over 'task' parameter To run command gradle clean build -x test , it can be achieved as follows steps: gradleExecuteBuild: buildFlags: - clean - build - -x - test back to overview Scope Details Aliases - Type []string Mandatory no Default $PIPER_buildFlags (if set) Secret no Configuration scope \u2612 parameter \u2610 general \u2612 steps \u2612 stages Resource references none","title":"buildFlags"},{"location":"steps/gradleExecuteBuild/#buildsettingsinfo","text":"build settings info is typically filled by the step automatically to create information about the build settings that were used during the gradle build. This information is typically used for compliance related processes. back to overview Scope Details Aliases - Type string Mandatory no Default $PIPER_buildSettingsInfo (if set) Secret no Configuration scope \u2612 parameter \u2610 general \u2612 steps \u2612 stages Resource references commonPipelineEnvironment : reference to: custom/buildSettingsInfo","title":"buildSettingsInfo"},{"location":"steps/gradleExecuteBuild/#containercommand","text":"Jenkins-specific: Used for proper environment setup. Kubernetes only: Allows to specify start command for container created with dockerImage parameter to overwrite Piper default (/usr/bin/tail -f /dev/null). back to overview Scope Details Aliases - Type string Mandatory no Default Secret no Configuration scope \u2612 parameter \u2612 general \u2612 steps \u2612 stages Resource references none","title":"containerCommand"},{"location":"steps/gradleExecuteBuild/#containershell","text":"Jenkins-specific: Used for proper environment setup. Allows to specify the shell to be executed for container with containerName. back to overview Scope Details Aliases - Type string Mandatory no Default Secret no Configuration scope \u2612 parameter \u2612 general \u2612 steps \u2612 stages Resource references none","title":"containerShell"},{"location":"steps/gradleExecuteBuild/#createbom","text":"Creates the bill of materials (BOM) using CycloneDX plugin. back to overview Scope Details Aliases - Type bool Mandatory no Default false Possible values - true - false Secret no Configuration scope \u2612 parameter \u2612 general \u2612 steps \u2612 stages Resource references none","title":"createBOM"},{"location":"steps/gradleExecuteBuild/#dockerenvvars","text":"Environment variables to set in the container, e.g. [http_proxy: \"proxy:8080\"]. back to overview Scope Details Aliases - Type map[string]string Mandatory no Default Secret no Configuration scope \u2612 parameter \u2612 general \u2612 steps \u2612 stages Resource references none","title":"dockerEnvVars"},{"location":"steps/gradleExecuteBuild/#dockerimage","text":"Name of the docker image that should be used. If empty, Docker is not used and the command is executed directly on the Jenkins system. back to overview Scope Details Aliases - Type string Mandatory no Default gradle:6-jdk11-alpine Secret no Configuration scope \u2612 parameter \u2612 general \u2612 steps \u2612 stages Resource references none","title":"dockerImage"},{"location":"steps/gradleExecuteBuild/#dockername","text":"Kubernetes only: Name of the container launching dockerImage. SideCar only: Name of the container in local network. back to overview Scope Details Aliases - Type string Mandatory no Default gradle Secret no Configuration scope \u2612 parameter \u2612 general \u2612 steps \u2612 stages Resource references none","title":"dockerName"},{"location":"steps/gradleExecuteBuild/#dockeroptions","text":"Docker options to be set when starting the container. back to overview Scope Details Aliases - Type []string Mandatory no Default Secret no Configuration scope \u2612 parameter \u2612 general \u2612 steps \u2612 stages Resource references none","title":"dockerOptions"},{"location":"steps/gradleExecuteBuild/#dockerpullimage","text":"Set this to 'false' to bypass a docker image pull. Useful during development process. Allows testing of images which are available in the local registry only. back to overview Scope Details Aliases - Type bool Mandatory no Default true Possible values - true - false Secret no Configuration scope \u2612 parameter \u2612 general \u2612 steps \u2612 stages Resource references none","title":"dockerPullImage"},{"location":"steps/gradleExecuteBuild/#dockervolumebind","text":"Jenkins-specific: Used for proper environment setup. Volumes that should be mounted into the docker container. back to overview Scope Details Aliases - Type map[string]string Mandatory no Default Secret no Configuration scope \u2612 parameter \u2612 general \u2612 steps \u2612 stages Resource references none","title":"dockerVolumeBind"},{"location":"steps/gradleExecuteBuild/#dockerworkspace","text":"Jenkins-specific: Used for proper environment setup. Kubernetes only: Specifies a dedicated user home directory for the container which will be passed as value for environment variable HOME . back to overview Scope Details Aliases - Type string Mandatory no Default Secret no Configuration scope \u2612 parameter \u2612 general \u2612 steps \u2612 stages Resource references none","title":"dockerWorkspace"},{"location":"steps/gradleExecuteBuild/#excludecreatebomforprojects","text":"Defines which projects/subprojects will be ignored during bom creation. Only if applyCreateBOMForAllProjects is set to true back to overview Scope Details Aliases - Type []string Mandatory no Default $PIPER_excludeCreateBOMForProjects (if set) Secret no Configuration scope \u2612 parameter \u2610 general \u2612 steps \u2612 stages Resource references none","title":"excludeCreateBOMForProjects"},{"location":"steps/gradleExecuteBuild/#excludepublishingforprojects","text":"Defines which projects/subprojects will be ignored during publishing. Only if applyCreateBOMForAllProjects is set to true back to overview Scope Details Aliases - Type []string Mandatory no Default $PIPER_excludePublishingForProjects (if set) Secret no Configuration scope \u2612 parameter \u2610 general \u2612 steps \u2612 stages Resource references none","title":"excludePublishingForProjects"},{"location":"steps/gradleExecuteBuild/#path","text":"Path to the folder with build.gradle (or build.gradle.kts) file which should be executed. back to overview Scope Details Aliases buildGradlePath Type string Mandatory no Default $PIPER_path (if set) Secret no Configuration scope \u2612 parameter \u2610 general \u2612 steps \u2612 stages Resource references none","title":"path"},{"location":"steps/gradleExecuteBuild/#publish","text":"Configures gradle to publish the artifact to a repository. back to overview Scope Details Aliases - Type bool Mandatory no Default false Possible values - true - false Secret no Configuration scope \u2612 parameter \u2610 general \u2612 steps \u2612 stages Resource references none","title":"publish"},{"location":"steps/gradleExecuteBuild/#repositorypassword","text":"Password for the repository to which the project artifacts should be published. back to overview Scope Details Aliases - Type string Mandatory no Default $PIPER_repositoryPassword (if set) Secret yes Configuration scope \u2612 parameter \u2612 general \u2612 steps \u2612 stages Resource references commonPipelineEnvironment : reference to: custom/repositoryPassword","title":"repositoryPassword"},{"location":"steps/gradleExecuteBuild/#repositoryurl","text":"Url to the repository to which the project artifacts should be published. back to overview Scope Details Aliases - Type string Mandatory no Default $PIPER_repositoryUrl (if set) Secret no Configuration scope \u2612 parameter \u2612 general \u2612 steps \u2612 stages Resource references commonPipelineEnvironment : reference to: custom/repositoryUrl","title":"repositoryUrl"},{"location":"steps/gradleExecuteBuild/#repositoryusername","text":"Username for the repository to which the project artifacts should be published. back to overview Scope Details Aliases - Type string Mandatory no Default $PIPER_repositoryUsername (if set) Secret yes Configuration scope \u2612 parameter \u2612 general \u2612 steps \u2612 stages Resource references commonPipelineEnvironment : reference to: custom/repositoryUsername","title":"repositoryUsername"},{"location":"steps/gradleExecuteBuild/#script","text":"The common script environment of the Jenkinsfile running. Typically the reference to the script calling the pipeline step is provided with the this parameter, as in script: this . This allows the function to access the commonPipelineEnvironment for retrieving, e.g. configuration parameters. back to overview Scope Details Aliases - Type Jenkins Script Mandatory yes Default Secret no Configuration scope \u2610 parameter \u2610 general \u2610 steps \u2610 stages Resource references none","title":"script"},{"location":"steps/gradleExecuteBuild/#task","text":"A single gradle task that should be executed. If you prefer more than one, use 'buildFlags' parameter. If 'buildFlags' parameter is specified, this parameter will be ignored. back to overview Scope Details Aliases - Type string Mandatory no Default build Secret no Configuration scope \u2612 parameter \u2610 general \u2612 steps \u2612 stages Resource references none","title":"task"},{"location":"steps/gradleExecuteBuild/#usewrapper","text":"If set to false all commands are executed using 'gradle', otherwise 'gradlew' is executed. back to overview Scope Details Aliases - Type bool Mandatory no Default false Possible values - true - false Secret no Configuration scope \u2612 parameter \u2610 general \u2612 steps \u2612 stages Resource references none","title":"useWrapper"},{"location":"steps/gradleExecuteBuild/#verbose","text":"verbose output back to overview Scope Details Aliases - Type bool Mandatory no Default false Possible values - true - false Secret no Configuration scope \u2612 parameter \u2612 general \u2612 steps \u2612 stages Resource references none","title":"verbose"},{"location":"steps/hadolintExecute/","text":"hadolintExecute \u00b6 Executes the Haskell Dockerfile Linter which is a smarter Dockerfile linter that helps you build best practice Docker images. Description \u00b6 Executes the Haskell Dockerfile Linter which is a smarter Dockerfile linter that helps you build best practice Docker images. The linter is parsing the Dockerfile into an abstract syntax tree (AST) and performs rules on top of the AST. Usage \u00b6 We recommend to define values of step parameters via .pipeline/config.yml file . In this case, calling the step is essentially reduced to defining the step name. Calling the step can be done either in an orchestrator specific way (e.g. via a Jenkins library step) or on the command line. Jenkins Command Line library ( 'piper-lib-os' ) hadolintExecute script: this piper hadolintExecute Parameters \u00b6 Overview - Step \u00b6 Name Mandatory Additional information script (yes) reference to Jenkins main pipeline script configurationFile no configurationPassword no pass via ENV, Vault or Jenkins credentials ( configurationCredentialsId ) configurationUrl no configurationUsername no pass via ENV, Vault or Jenkins credentials ( configurationCredentialsId ) customTlsCertificateLinks no dockerFile no reportFile no verbose no activates debug output Overview - Execution Environment \u00b6 Orchestrator-specific only These parameters are relevant for orchestrator usage and not considered when using the command line option. Name Mandatory Additional information containerCommand no containerShell no dockerEnvVars no dockerImage no dockerName no dockerOptions no dockerPullImage no dockerVolumeBind no dockerWorkspace no Details \u00b6 configurationFile \u00b6 Name of the configuration file used locally within the step. If a file with this name is detected as part of your repo downloading the central configuration via configurationUrl will be skipped. If you change the file's name make sure your stashing configuration also reflects this. back to overview Scope Details Aliases - Type string Mandatory no Default .hadolint.yaml Secret no Configuration scope \u2612 parameter \u2610 general \u2612 steps \u2612 stages Resource references none configurationPassword \u00b6 The password to authenticate back to overview Scope Details Aliases password Type string Mandatory no Default $PIPER_configurationPassword (if set) Secret yes Configuration scope \u2612 parameter \u2610 general \u2612 steps \u2612 stages Resource references Jenkins credential id: id: configurationCredentialsId reference to: password Vault resource: name: hadolintConfigSecretName default value: hadolintConfig Vault paths: $(vaultPath)/hadolintConfig $(vaultBasePath)/$(vaultPipelineName)/hadolintConfig $(vaultBasePath)/GROUP-SECRETS/hadolintConfig configurationUrl \u00b6 URL pointing to the .hadolint.yaml exclude configuration to be used for linting. Also have a look at configurationFile which could avoid central configuration download in case the file is part of your repository. back to overview Scope Details Aliases - Type string Mandatory no Default $PIPER_configurationUrl (if set) Secret no Configuration scope \u2612 parameter \u2610 general \u2612 steps \u2612 stages Resource references none configurationUsername \u00b6 The username to authenticate back to overview Scope Details Aliases username Type string Mandatory no Default $PIPER_configurationUsername (if set) Secret yes Configuration scope \u2612 parameter \u2610 general \u2612 steps \u2612 stages Resource references Jenkins credential id: id: configurationCredentialsId reference to: username Vault resource: name: hadolintConfigSecretName default value: hadolintConfig Vault paths: $(vaultPath)/hadolintConfig $(vaultBasePath)/$(vaultPipelineName)/hadolintConfig $(vaultBasePath)/GROUP-SECRETS/hadolintConfig containerCommand \u00b6 Jenkins-specific: Used for proper environment setup. Kubernetes only: Allows to specify start command for container created with dockerImage parameter to overwrite Piper default (/usr/bin/tail -f /dev/null). back to overview Scope Details Aliases - Type string Mandatory no Default Secret no Configuration scope \u2612 parameter \u2612 general \u2612 steps \u2612 stages Resource references none containerShell \u00b6 Jenkins-specific: Used for proper environment setup. Allows to specify the shell to be executed for container with containerName. back to overview Scope Details Aliases - Type string Mandatory no Default Secret no Configuration scope \u2612 parameter \u2612 general \u2612 steps \u2612 stages Resource references none customTlsCertificateLinks \u00b6 List of download links to custom TLS certificates. This is required to ensure trusted connections between Piper and the system where the configuration file is to be downloaded from. back to overview Scope Details Aliases - Type []string Mandatory no Default $PIPER_customTlsCertificateLinks (if set) Secret no Configuration scope \u2612 parameter \u2610 general \u2612 steps \u2612 stages Resource references none dockerEnvVars \u00b6 Environment variables to set in the container, e.g. [http_proxy: \"proxy:8080\"]. back to overview Scope Details Aliases - Type map[string]string Mandatory no Default Secret no Configuration scope \u2612 parameter \u2612 general \u2612 steps \u2612 stages Resource references none dockerFile \u00b6 Dockerfile to be used for the assessment. back to overview Scope Details Aliases dockerfile Type string Mandatory no Default ./Dockerfile Secret no Configuration scope \u2612 parameter \u2612 general \u2612 steps \u2612 stages Resource references none dockerImage \u00b6 Name of the docker image that should be used. If empty, Docker is not used and the command is executed directly on the Jenkins system. back to overview Scope Details Aliases - Type string Mandatory no Default hadolint/hadolint:latest-alpine Secret no Configuration scope \u2612 parameter \u2612 general \u2612 steps \u2612 stages Resource references none dockerName \u00b6 Kubernetes only: Name of the container launching dockerImage. SideCar only: Name of the container in local network. back to overview Scope Details Aliases - Type string Mandatory no Default hadolint Secret no Configuration scope \u2612 parameter \u2612 general \u2612 steps \u2612 stages Resource references none dockerOptions \u00b6 Docker options to be set when starting the container. back to overview Scope Details Aliases - Type []string Mandatory no Default Secret no Configuration scope \u2612 parameter \u2612 general \u2612 steps \u2612 stages Resource references none dockerPullImage \u00b6 Set this to 'false' to bypass a docker image pull. Useful during development process. Allows testing of images which are available in the local registry only. back to overview Scope Details Aliases - Type bool Mandatory no Default true Possible values - true - false Secret no Configuration scope \u2612 parameter \u2612 general \u2612 steps \u2612 stages Resource references none dockerVolumeBind \u00b6 Jenkins-specific: Used for proper environment setup. Volumes that should be mounted into the docker container. back to overview Scope Details Aliases - Type map[string]string Mandatory no Default Secret no Configuration scope \u2612 parameter \u2612 general \u2612 steps \u2612 stages Resource references none dockerWorkspace \u00b6 Jenkins-specific: Used for proper environment setup. Kubernetes only: Specifies a dedicated user home directory for the container which will be passed as value for environment variable HOME . back to overview Scope Details Aliases - Type string Mandatory no Default Secret no Configuration scope \u2612 parameter \u2612 general \u2612 steps \u2612 stages Resource references none reportFile \u00b6 Name of the result file used locally within the step. back to overview Scope Details Aliases - Type string Mandatory no Default hadolint.xml Secret no Configuration scope \u2612 parameter \u2610 general \u2612 steps \u2612 stages Resource references none script \u00b6 The common script environment of the Jenkinsfile running. Typically the reference to the script calling the pipeline step is provided with the this parameter, as in script: this . This allows the function to access the commonPipelineEnvironment for retrieving, e.g. configuration parameters. back to overview Scope Details Aliases - Type Jenkins Script Mandatory yes Default Secret no Configuration scope \u2610 parameter \u2610 general \u2610 steps \u2610 stages Resource references none verbose \u00b6 verbose output back to overview Scope Details Aliases - Type bool Mandatory no Default false Possible values - true - false Secret no Configuration scope \u2612 parameter \u2612 general \u2612 steps \u2612 stages Resource references none configurationCredentialsId \u00b6 Jenkins 'Username with password' credentials ID containing username/password for access to your remote configuration file. back to overview Scope Details Aliases - Type string Configuration scope \u2612 parameter \u2612 general \u2612 steps \u2612 stages Exceptions \u00b6 None Examples \u00b6 hadolintExecute script: this","title":"hadolintExecute"},{"location":"steps/hadolintExecute/#hadolintexecute","text":"Executes the Haskell Dockerfile Linter which is a smarter Dockerfile linter that helps you build best practice Docker images.","title":"hadolintExecute"},{"location":"steps/hadolintExecute/#description","text":"Executes the Haskell Dockerfile Linter which is a smarter Dockerfile linter that helps you build best practice Docker images. The linter is parsing the Dockerfile into an abstract syntax tree (AST) and performs rules on top of the AST.","title":"Description"},{"location":"steps/hadolintExecute/#usage","text":"We recommend to define values of step parameters via .pipeline/config.yml file . In this case, calling the step is essentially reduced to defining the step name. Calling the step can be done either in an orchestrator specific way (e.g. via a Jenkins library step) or on the command line. Jenkins Command Line library ( 'piper-lib-os' ) hadolintExecute script: this piper hadolintExecute","title":"Usage"},{"location":"steps/hadolintExecute/#parameters","text":"","title":"Parameters"},{"location":"steps/hadolintExecute/#overview-step","text":"Name Mandatory Additional information script (yes) reference to Jenkins main pipeline script configurationFile no configurationPassword no pass via ENV, Vault or Jenkins credentials ( configurationCredentialsId ) configurationUrl no configurationUsername no pass via ENV, Vault or Jenkins credentials ( configurationCredentialsId ) customTlsCertificateLinks no dockerFile no reportFile no verbose no activates debug output","title":"Overview - Step"},{"location":"steps/hadolintExecute/#overview-execution-environment","text":"Orchestrator-specific only These parameters are relevant for orchestrator usage and not considered when using the command line option. Name Mandatory Additional information containerCommand no containerShell no dockerEnvVars no dockerImage no dockerName no dockerOptions no dockerPullImage no dockerVolumeBind no dockerWorkspace no","title":"Overview - Execution Environment"},{"location":"steps/hadolintExecute/#details","text":"","title":"Details"},{"location":"steps/hadolintExecute/#configurationfile","text":"Name of the configuration file used locally within the step. If a file with this name is detected as part of your repo downloading the central configuration via configurationUrl will be skipped. If you change the file's name make sure your stashing configuration also reflects this. back to overview Scope Details Aliases - Type string Mandatory no Default .hadolint.yaml Secret no Configuration scope \u2612 parameter \u2610 general \u2612 steps \u2612 stages Resource references none","title":"configurationFile"},{"location":"steps/hadolintExecute/#configurationpassword","text":"The password to authenticate back to overview Scope Details Aliases password Type string Mandatory no Default $PIPER_configurationPassword (if set) Secret yes Configuration scope \u2612 parameter \u2610 general \u2612 steps \u2612 stages Resource references Jenkins credential id: id: configurationCredentialsId reference to: password Vault resource: name: hadolintConfigSecretName default value: hadolintConfig Vault paths: $(vaultPath)/hadolintConfig $(vaultBasePath)/$(vaultPipelineName)/hadolintConfig $(vaultBasePath)/GROUP-SECRETS/hadolintConfig","title":"configurationPassword"},{"location":"steps/hadolintExecute/#configurationurl","text":"URL pointing to the .hadolint.yaml exclude configuration to be used for linting. Also have a look at configurationFile which could avoid central configuration download in case the file is part of your repository. back to overview Scope Details Aliases - Type string Mandatory no Default $PIPER_configurationUrl (if set) Secret no Configuration scope \u2612 parameter \u2610 general \u2612 steps \u2612 stages Resource references none","title":"configurationUrl"},{"location":"steps/hadolintExecute/#configurationusername","text":"The username to authenticate back to overview Scope Details Aliases username Type string Mandatory no Default $PIPER_configurationUsername (if set) Secret yes Configuration scope \u2612 parameter \u2610 general \u2612 steps \u2612 stages Resource references Jenkins credential id: id: configurationCredentialsId reference to: username Vault resource: name: hadolintConfigSecretName default value: hadolintConfig Vault paths: $(vaultPath)/hadolintConfig $(vaultBasePath)/$(vaultPipelineName)/hadolintConfig $(vaultBasePath)/GROUP-SECRETS/hadolintConfig","title":"configurationUsername"},{"location":"steps/hadolintExecute/#containercommand","text":"Jenkins-specific: Used for proper environment setup. Kubernetes only: Allows to specify start command for container created with dockerImage parameter to overwrite Piper default (/usr/bin/tail -f /dev/null). back to overview Scope Details Aliases - Type string Mandatory no Default Secret no Configuration scope \u2612 parameter \u2612 general \u2612 steps \u2612 stages Resource references none","title":"containerCommand"},{"location":"steps/hadolintExecute/#containershell","text":"Jenkins-specific: Used for proper environment setup. Allows to specify the shell to be executed for container with containerName. back to overview Scope Details Aliases - Type string Mandatory no Default Secret no Configuration scope \u2612 parameter \u2612 general \u2612 steps \u2612 stages Resource references none","title":"containerShell"},{"location":"steps/hadolintExecute/#customtlscertificatelinks","text":"List of download links to custom TLS certificates. This is required to ensure trusted connections between Piper and the system where the configuration file is to be downloaded from. back to overview Scope Details Aliases - Type []string Mandatory no Default $PIPER_customTlsCertificateLinks (if set) Secret no Configuration scope \u2612 parameter \u2610 general \u2612 steps \u2612 stages Resource references none","title":"customTlsCertificateLinks"},{"location":"steps/hadolintExecute/#dockerenvvars","text":"Environment variables to set in the container, e.g. [http_proxy: \"proxy:8080\"]. back to overview Scope Details Aliases - Type map[string]string Mandatory no Default Secret no Configuration scope \u2612 parameter \u2612 general \u2612 steps \u2612 stages Resource references none","title":"dockerEnvVars"},{"location":"steps/hadolintExecute/#dockerfile","text":"Dockerfile to be used for the assessment. back to overview Scope Details Aliases dockerfile Type string Mandatory no Default ./Dockerfile Secret no Configuration scope \u2612 parameter \u2612 general \u2612 steps \u2612 stages Resource references none","title":"dockerFile"},{"location":"steps/hadolintExecute/#dockerimage","text":"Name of the docker image that should be used. If empty, Docker is not used and the command is executed directly on the Jenkins system. back to overview Scope Details Aliases - Type string Mandatory no Default hadolint/hadolint:latest-alpine Secret no Configuration scope \u2612 parameter \u2612 general \u2612 steps \u2612 stages Resource references none","title":"dockerImage"},{"location":"steps/hadolintExecute/#dockername","text":"Kubernetes only: Name of the container launching dockerImage. SideCar only: Name of the container in local network. back to overview Scope Details Aliases - Type string Mandatory no Default hadolint Secret no Configuration scope \u2612 parameter \u2612 general \u2612 steps \u2612 stages Resource references none","title":"dockerName"},{"location":"steps/hadolintExecute/#dockeroptions","text":"Docker options to be set when starting the container. back to overview Scope Details Aliases - Type []string Mandatory no Default Secret no Configuration scope \u2612 parameter \u2612 general \u2612 steps \u2612 stages Resource references none","title":"dockerOptions"},{"location":"steps/hadolintExecute/#dockerpullimage","text":"Set this to 'false' to bypass a docker image pull. Useful during development process. Allows testing of images which are available in the local registry only. back to overview Scope Details Aliases - Type bool Mandatory no Default true Possible values - true - false Secret no Configuration scope \u2612 parameter \u2612 general \u2612 steps \u2612 stages Resource references none","title":"dockerPullImage"},{"location":"steps/hadolintExecute/#dockervolumebind","text":"Jenkins-specific: Used for proper environment setup. Volumes that should be mounted into the docker container. back to overview Scope Details Aliases - Type map[string]string Mandatory no Default Secret no Configuration scope \u2612 parameter \u2612 general \u2612 steps \u2612 stages Resource references none","title":"dockerVolumeBind"},{"location":"steps/hadolintExecute/#dockerworkspace","text":"Jenkins-specific: Used for proper environment setup. Kubernetes only: Specifies a dedicated user home directory for the container which will be passed as value for environment variable HOME . back to overview Scope Details Aliases - Type string Mandatory no Default Secret no Configuration scope \u2612 parameter \u2612 general \u2612 steps \u2612 stages Resource references none","title":"dockerWorkspace"},{"location":"steps/hadolintExecute/#reportfile","text":"Name of the result file used locally within the step. back to overview Scope Details Aliases - Type string Mandatory no Default hadolint.xml Secret no Configuration scope \u2612 parameter \u2610 general \u2612 steps \u2612 stages Resource references none","title":"reportFile"},{"location":"steps/hadolintExecute/#script","text":"The common script environment of the Jenkinsfile running. Typically the reference to the script calling the pipeline step is provided with the this parameter, as in script: this . This allows the function to access the commonPipelineEnvironment for retrieving, e.g. configuration parameters. back to overview Scope Details Aliases - Type Jenkins Script Mandatory yes Default Secret no Configuration scope \u2610 parameter \u2610 general \u2610 steps \u2610 stages Resource references none","title":"script"},{"location":"steps/hadolintExecute/#verbose","text":"verbose output back to overview Scope Details Aliases - Type bool Mandatory no Default false Possible values - true - false Secret no Configuration scope \u2612 parameter \u2612 general \u2612 steps \u2612 stages Resource references none","title":"verbose"},{"location":"steps/hadolintExecute/#configurationcredentialsid","text":"Jenkins 'Username with password' credentials ID containing username/password for access to your remote configuration file. back to overview Scope Details Aliases - Type string Configuration scope \u2612 parameter \u2612 general \u2612 steps \u2612 stages","title":"configurationCredentialsId"},{"location":"steps/hadolintExecute/#exceptions","text":"None","title":"Exceptions"},{"location":"steps/hadolintExecute/#examples","text":"hadolintExecute script: this","title":"Examples"},{"location":"steps/handlePipelineStepErrors/","text":"handlePipelineStepErrors \u00b6 Description \u00b6 Used by other steps to make error analysis easier. Lists parameters and other data available to the step in which the error occurs. Prerequisites \u00b6 none Parameters \u00b6 name mandatory default possible values echoDetails no true true , false failOnError no true true , false libraryDocumentationUrl no https://sap.github.io/jenkins-library/ libraryRepositoryUrl no https://github.com/SAP/jenkins-library/ mandatorySteps no [] script yes stepName yes stepNameDoc no stepParameters yes stepTimeouts no [:] echoDetails - If it is set to true details will be output to the console. See example below. failOnError - Defines the behavior, in case an error occurs which is handled by this step. When set to false an error results in an \"UNSTABLE\" build result and the pipeline can continue. libraryDocumentationUrl - Defines the url of the library's documentation that will be used to generate the corresponding links to the step documentation. libraryRepositoryUrl - Defines the url of the library's repository that will be used to generate the corresponding links to the step implementation. mandatorySteps - Defines a list of mandatory steps (step names) which have to be successful (=stop the pipeline), even if failOnError: false script - The common script environment of the Jenkinsfile running. Typically the reference to the script calling the pipeline step is provided with the this parameter, as in script: this . This allows the function to access the commonPipelineEnvironment for retrieving, e.g. configuration parameters. stepName - Defines the name of the step for which the error handling is active. It will be shown in the console log. stepNameDoc - Defines the documented step, in case the documentation reference should point to a different step. stepParameters - Passes the parameters of the step which uses the error handling onto the error handling. The list of parameters is then shown in the console output. The simplest case looks like this: [ script: this ] stepTimeouts - Defines a Map containing step name as key and timout in minutes in order to stop an execution after a certain timeout. This helps to make pipeline runs more resilient with respect to long running steps. Step configuration \u00b6 We recommend to define values of step parameters via config.yml file . In following sections of the config.yml the configuration is possible: parameter general step/stage echoDetails failOnError X libraryDocumentationUrl X libraryRepositoryUrl X mandatorySteps X script stepName stepNameDoc stepParameters stepTimeouts X Dependencies \u00b6 The step depends on the following Jenkins plugins pipeline-utility-steps workflow-basic-steps workflow-cps-global-lib Transitive dependencies are omitted. The list might be incomplete. Consider using the ppiper/jenkins-master docker image. This images comes with preinstalled plugins. Example \u00b6 handlePipelineStepErrors ( stepName: 'executeHealthCheck' , stepParameters: parameters ) { // The code you want to get controlled by the error handler goes right here into the closure def url = new Utils (). getMandatoryParameter ( parameters , 'url' , null ) def statusCode = curl ( url ) if ( statusCode != '200' ) error \"Health Check failed: ${statusCode}\" } Example console output \u00b6 If echoDetails is set to true the following information will be output to the console: Step beginning: --- Begin library step: ${stepName}.groovy --- Step end: --- End library step: ${stepName}.groovy --- Step errors: ---------------------------------------------------------- --- An error occurred in the library step: ${stepName} ---------------------------------------------------------- The following parameters were available to the step: *** ${stepParameters} *** The error was: *** ${err} *** Further information: * Documentation of step ${stepName}: .../${stepName}/ * Pipeline documentation: https://... * GitHub repository for pipeline steps: https://... ----------------------------------------------------------","title":"handlePipelineStepErrors"},{"location":"steps/handlePipelineStepErrors/#handlepipelinesteperrors","text":"","title":"handlePipelineStepErrors"},{"location":"steps/handlePipelineStepErrors/#description","text":"Used by other steps to make error analysis easier. Lists parameters and other data available to the step in which the error occurs.","title":"Description"},{"location":"steps/handlePipelineStepErrors/#prerequisites","text":"none","title":"Prerequisites"},{"location":"steps/handlePipelineStepErrors/#parameters","text":"name mandatory default possible values echoDetails no true true , false failOnError no true true , false libraryDocumentationUrl no https://sap.github.io/jenkins-library/ libraryRepositoryUrl no https://github.com/SAP/jenkins-library/ mandatorySteps no [] script yes stepName yes stepNameDoc no stepParameters yes stepTimeouts no [:] echoDetails - If it is set to true details will be output to the console. See example below. failOnError - Defines the behavior, in case an error occurs which is handled by this step. When set to false an error results in an \"UNSTABLE\" build result and the pipeline can continue. libraryDocumentationUrl - Defines the url of the library's documentation that will be used to generate the corresponding links to the step documentation. libraryRepositoryUrl - Defines the url of the library's repository that will be used to generate the corresponding links to the step implementation. mandatorySteps - Defines a list of mandatory steps (step names) which have to be successful (=stop the pipeline), even if failOnError: false script - The common script environment of the Jenkinsfile running. Typically the reference to the script calling the pipeline step is provided with the this parameter, as in script: this . This allows the function to access the commonPipelineEnvironment for retrieving, e.g. configuration parameters. stepName - Defines the name of the step for which the error handling is active. It will be shown in the console log. stepNameDoc - Defines the documented step, in case the documentation reference should point to a different step. stepParameters - Passes the parameters of the step which uses the error handling onto the error handling. The list of parameters is then shown in the console output. The simplest case looks like this: [ script: this ] stepTimeouts - Defines a Map containing step name as key and timout in minutes in order to stop an execution after a certain timeout. This helps to make pipeline runs more resilient with respect to long running steps.","title":"Parameters"},{"location":"steps/handlePipelineStepErrors/#step-configuration","text":"We recommend to define values of step parameters via config.yml file . In following sections of the config.yml the configuration is possible: parameter general step/stage echoDetails failOnError X libraryDocumentationUrl X libraryRepositoryUrl X mandatorySteps X script stepName stepNameDoc stepParameters stepTimeouts X","title":"Step configuration"},{"location":"steps/handlePipelineStepErrors/#dependencies","text":"The step depends on the following Jenkins plugins pipeline-utility-steps workflow-basic-steps workflow-cps-global-lib Transitive dependencies are omitted. The list might be incomplete. Consider using the ppiper/jenkins-master docker image. This images comes with preinstalled plugins.","title":"Dependencies"},{"location":"steps/handlePipelineStepErrors/#example","text":"handlePipelineStepErrors ( stepName: 'executeHealthCheck' , stepParameters: parameters ) { // The code you want to get controlled by the error handler goes right here into the closure def url = new Utils (). getMandatoryParameter ( parameters , 'url' , null ) def statusCode = curl ( url ) if ( statusCode != '200' ) error \"Health Check failed: ${statusCode}\" }","title":"Example"},{"location":"steps/handlePipelineStepErrors/#example-console-output","text":"If echoDetails is set to true the following information will be output to the console: Step beginning: --- Begin library step: ${stepName}.groovy --- Step end: --- End library step: ${stepName}.groovy --- Step errors: ---------------------------------------------------------- --- An error occurred in the library step: ${stepName} ---------------------------------------------------------- The following parameters were available to the step: *** ${stepParameters} *** The error was: *** ${err} *** Further information: * Documentation of step ${stepName}: .../${stepName}/ * Pipeline documentation: https://... * GitHub repository for pipeline steps: https://... ----------------------------------------------------------","title":"Example console output"},{"location":"steps/healthExecuteCheck/","text":"healthExecuteCheck \u00b6 Description \u00b6 Calls the health endpoint url of the application. The intention of the check is to verify that a suitable health endpoint is available. Such a health endpoint is required for operation purposes. This check is used as a real-life test for your productive health endpoints. Check Depth Typically, tools performing simple health checks are not too smart. Therefore it is important to choose an endpoint for checking wisely. This check therefore only checks if the application/service url returns HTTP 200 . This is in line with health check capabilities of platforms which are used for example in load balancing scenarios. Here you can find an example for Amazon AWS . Prerequisites \u00b6 Endpoint for health check is configured. Warning The health endpoint needs to be available without authentication! Tip If using Spring Boot framework, ideally the provided /health endpoint is used and extended by development. Further information can be found in the Spring Boot documentation for Endpoints Parameters \u00b6 name mandatory default possible values healthEndpoint no `` script yes testServerUrl yes healthEndpoint - Optionally with healthEndpoint the health function is called if endpoint is not the standard url. script - The common script environment of the Jenkinsfile running. Typically the reference to the script calling the pipeline step is provided with the this parameter, as in script: this . This allows the function to access the commonPipelineEnvironment for retrieving, e.g. configuration parameters. testServerUrl - Health check function is called providing full qualified testServerUrl to the health check. Step configuration \u00b6 We recommend to define values of step parameters via config.yml file . In following sections of the config.yml the configuration is possible: parameter general step/stage healthEndpoint X script testServerUrl X Dependencies \u00b6 The step depends on the following Jenkins plugins pipeline-utility-steps workflow-basic-steps workflow-cps-global-lib workflow-durable-task-step Transitive dependencies are omitted. The list might be incomplete. Consider using the ppiper/jenkins-master docker image. This images comes with preinstalled plugins. Example \u00b6 Pipeline step: healthExecuteCheck testServerUrl: 'https://testserver.com'","title":"healthExecuteCheck"},{"location":"steps/healthExecuteCheck/#healthexecutecheck","text":"","title":"healthExecuteCheck"},{"location":"steps/healthExecuteCheck/#description","text":"Calls the health endpoint url of the application. The intention of the check is to verify that a suitable health endpoint is available. Such a health endpoint is required for operation purposes. This check is used as a real-life test for your productive health endpoints. Check Depth Typically, tools performing simple health checks are not too smart. Therefore it is important to choose an endpoint for checking wisely. This check therefore only checks if the application/service url returns HTTP 200 . This is in line with health check capabilities of platforms which are used for example in load balancing scenarios. Here you can find an example for Amazon AWS .","title":"Description"},{"location":"steps/healthExecuteCheck/#prerequisites","text":"Endpoint for health check is configured. Warning The health endpoint needs to be available without authentication! Tip If using Spring Boot framework, ideally the provided /health endpoint is used and extended by development. Further information can be found in the Spring Boot documentation for Endpoints","title":"Prerequisites"},{"location":"steps/healthExecuteCheck/#parameters","text":"name mandatory default possible values healthEndpoint no `` script yes testServerUrl yes healthEndpoint - Optionally with healthEndpoint the health function is called if endpoint is not the standard url. script - The common script environment of the Jenkinsfile running. Typically the reference to the script calling the pipeline step is provided with the this parameter, as in script: this . This allows the function to access the commonPipelineEnvironment for retrieving, e.g. configuration parameters. testServerUrl - Health check function is called providing full qualified testServerUrl to the health check.","title":"Parameters"},{"location":"steps/healthExecuteCheck/#step-configuration","text":"We recommend to define values of step parameters via config.yml file . In following sections of the config.yml the configuration is possible: parameter general step/stage healthEndpoint X script testServerUrl X","title":"Step configuration"},{"location":"steps/healthExecuteCheck/#dependencies","text":"The step depends on the following Jenkins plugins pipeline-utility-steps workflow-basic-steps workflow-cps-global-lib workflow-durable-task-step Transitive dependencies are omitted. The list might be incomplete. Consider using the ppiper/jenkins-master docker image. This images comes with preinstalled plugins.","title":"Dependencies"},{"location":"steps/healthExecuteCheck/#example","text":"Pipeline step: healthExecuteCheck testServerUrl: 'https://testserver.com'","title":"Example"},{"location":"steps/helmExecute/","text":"helmExecute \u00b6 Executes helm3 functionality as the package manager for Kubernetes. Description \u00b6 Alpha version: please expect incompatible changes Executes helm functionality as the package manager for Kubernetes. Helm is the package manager for Kubernetes. Helm documentation and best practices Helm Charts Available Commands: `upgrade`, `lint`, `install`, `test`, `uninstall`, `dependency`, `publish` upgrade upgrade a release lint examine a chart for possible issues install install a chart test run tests for a release uninstall uninstall a release dependency package a chart directory into a chart archive publish package and publish a release Note: piper supports only helm3 version, since helm2 is deprecated. Usage \u00b6 We recommend to define values of step parameters via .pipeline/config.yml file . In this case, calling the step is essentially reduced to defining the step name. Calling the step can be done either in an orchestrator specific way (e.g. via a Jenkins library step) or on the command line. Jenkins Command Line library ( 'piper-lib-os' ) helmExecute script: this piper helmExecute Outputs \u00b6 Output type Details commonPipelineEnvironment custom/helmChartUrl Parameters \u00b6 Overview - Step \u00b6 Name Mandatory Additional information image yes script (yes) reference to Jenkins main pipeline script additionalParameters no appVersion no chartPath no customTlsCertificateLinks no dependency no dockerConfigJSON no pass via ENV, Vault or Jenkins credentials ( dockerConfigJsonCredentialsId ) dumpLogs no filterTest no helmCommand no helmDeployWaitSeconds no helmValues no keepFailedDeployments no kubeConfig no pass via ENV, Vault or Jenkins credentials ( kubeConfigFileCredentialsId ) kubeContext no namespace no packageDependencyUpdate no publish no renderSubchartNotes no renderValuesTemplate no sourceRepositoryName no sourceRepositoryPassword no pass via ENV, Vault or Jenkins credentials ( sourceRepositoryCredentialsId ) sourceRepositoryURL no sourceRepositoryUser no pass via ENV, Vault or Jenkins credentials ( sourceRepositoryCredentialsId ) targetRepositoryName no targetRepositoryPassword no pass via ENV, Vault or Jenkins credentials ( targetRepositoryCredentialsId ) targetRepositoryURL no targetRepositoryUser no pass via ENV, Vault or Jenkins credentials ( targetRepositoryCredentialsId ) templateEndDelimiter no templateStartDelimiter no verbose no activates debug output version no Overview - Execution Environment \u00b6 Orchestrator-specific only These parameters are relevant for orchestrator usage and not considered when using the command line option. Name Mandatory Additional information containerCommand no containerShell no dockerEnvVars no dockerImage no dockerName no dockerOptions no dockerPullImage no dockerVolumeBind no dockerWorkspace no stashContent no Details \u00b6 additionalParameters \u00b6 Defines additional parameters for Helm like \"helm install [NAME] [CHART] [flags]\". back to overview Scope Details Aliases helmDeploymentParameters Type []string Mandatory no Default $PIPER_additionalParameters (if set) Secret no Configuration scope \u2612 parameter \u2610 general \u2612 steps \u2612 stages Resource references none appVersion \u00b6 set the appVersion on the chart to this version back to overview Scope Details Aliases - Type string Mandatory no Default $PIPER_appVersion (if set) Secret no Configuration scope \u2612 parameter \u2612 general \u2612 steps \u2612 stages Resource references none chartPath \u00b6 Defines the chart path for helm. chartPath is mandatory for install/upgrade/publish commands. back to overview Scope Details Aliases helmChartPath Type string Mandatory no Default $PIPER_chartPath (if set) Secret no Configuration scope \u2612 parameter \u2612 general \u2612 steps \u2612 stages Resource references none containerCommand \u00b6 Jenkins-specific: Used for proper environment setup. Kubernetes only: Allows to specify start command for container created with dockerImage parameter to overwrite Piper default (/usr/bin/tail -f /dev/null). back to overview Scope Details Aliases - Type string Mandatory no Default Secret no Configuration scope \u2612 parameter \u2612 general \u2612 steps \u2612 stages Resource references none containerShell \u00b6 Jenkins-specific: Used for proper environment setup. Allows to specify the shell to be executed for container with containerName. back to overview Scope Details Aliases - Type string Mandatory no Default Secret no Configuration scope \u2612 parameter \u2612 general \u2612 steps \u2612 stages Resource references none customTlsCertificateLinks \u00b6 List of download links to custom TLS certificates. This is required to ensure trusted connections to instances with repositories (like nexus) when publish flag is set to true. back to overview Scope Details Aliases - Type []string Mandatory no Default $PIPER_customTlsCertificateLinks (if set) Secret no Configuration scope \u2612 parameter \u2612 general \u2612 steps \u2612 stages Resource references none dependency \u00b6 manage a chart's dependencies back to overview Scope Details Aliases - Type string Mandatory no Default $PIPER_dependency (if set) Possible values - build - list - update Secret no Configuration scope \u2612 parameter \u2610 general \u2612 steps \u2612 stages Resource references none dockerConfigJSON \u00b6 Path to the file .docker/config.json - this is typically provided by your CI/CD system. You can find more details about the Docker credentials in the Docker documentation . back to overview Scope Details Aliases - Type string Mandatory no Default $PIPER_dockerConfigJSON (if set) Secret yes Configuration scope \u2612 parameter \u2610 general \u2612 steps \u2612 stages Resource references Jenkins credential id: id: dockerConfigJsonCredentialsId Vault resource: name: dockerConfigFileVaultSecretName default value: docker-config Vault paths: $(vaultPath)/docker-config $(vaultBasePath)/$(vaultPipelineName)/docker-config $(vaultBasePath)/GROUP-SECRETS/docker-config dockerEnvVars \u00b6 Environment variables to set in the container, e.g. [http_proxy: \"proxy:8080\"]. back to overview Scope Details Aliases - Type map[string]string Mandatory no Default Secret no Configuration scope \u2612 parameter \u2612 general \u2612 steps \u2612 stages Resource references none dockerImage \u00b6 Name of the docker image that should be used. If empty, Docker is not used and the command is executed directly on the Jenkins system. back to overview Scope Details Aliases - Type string Mandatory no Default dtzar/helm-kubectl:3 Secret no Configuration scope \u2612 parameter \u2612 general \u2612 steps \u2612 stages Resource references none dockerName \u00b6 Kubernetes only: Name of the container launching dockerImage. SideCar only: Name of the container in local network. back to overview Scope Details Aliases - Type string Mandatory no Default Secret no Configuration scope \u2612 parameter \u2612 general \u2612 steps \u2612 stages Resource references none dockerOptions \u00b6 Docker options to be set when starting the container. back to overview Scope Details Aliases - Type []string Mandatory no Default [{-u 0}] Secret no Configuration scope \u2612 parameter \u2612 general \u2612 steps \u2612 stages Resource references none dockerPullImage \u00b6 Set this to 'false' to bypass a docker image pull. Useful during development process. Allows testing of images which are available in the local registry only. back to overview Scope Details Aliases - Type bool Mandatory no Default true Possible values - true - false Secret no Configuration scope \u2612 parameter \u2612 general \u2612 steps \u2612 stages Resource references none dockerVolumeBind \u00b6 Jenkins-specific: Used for proper environment setup. Volumes that should be mounted into the docker container. back to overview Scope Details Aliases - Type map[string]string Mandatory no Default Secret no Configuration scope \u2612 parameter \u2612 general \u2612 steps \u2612 stages Resource references none dockerWorkspace \u00b6 Jenkins-specific: Used for proper environment setup. Kubernetes only: Specifies a dedicated user home directory for the container which will be passed as value for environment variable HOME . back to overview Scope Details Aliases - Type string Mandatory no Default /config Secret no Configuration scope \u2612 parameter \u2612 general \u2612 steps \u2612 stages Resource references none dumpLogs \u00b6 dump the logs from test pods (this runs after all tests are complete, but before any cleanup) back to overview Scope Details Aliases - Type bool Mandatory no Default false Possible values - true - false Secret no Configuration scope \u2612 parameter \u2612 general \u2612 steps \u2612 stages Resource references none filterTest \u00b6 specify tests by attribute (currently name ) using attribute=value syntax or !attribute=value to exclude a test (can specify multiple or separate values with commas name=test1,name=test2 ) back to overview Scope Details Aliases - Type string Mandatory no Default $PIPER_filterTest (if set) Secret no Configuration scope \u2612 parameter \u2612 general \u2612 steps \u2612 stages Resource references none helmCommand \u00b6 Helm: defines the command upgrade , lint , install , test , uninstall , dependency , publish . back to overview Scope Details Aliases - Type string Mandatory no Default $PIPER_helmCommand (if set) Possible values - upgrade - lint - install - test - uninstall - dependency - publish Secret no Configuration scope \u2612 parameter \u2610 general \u2612 steps \u2612 stages Resource references none helmDeployWaitSeconds \u00b6 Number of seconds before helm deploy returns. back to overview Scope Details Aliases - Type int Mandatory no Default 300 Secret no Configuration scope \u2612 parameter \u2610 general \u2612 steps \u2612 stages Resource references none helmValues \u00b6 List of helm values as YAML file reference or URL (as per helm parameter description for -f / --values ) back to overview Scope Details Aliases - Type []string Mandatory no Default $PIPER_helmValues (if set) Secret no Configuration scope \u2612 parameter \u2610 general \u2612 steps \u2612 stages Resource references none image \u00b6 Full name of the image to be deployed. back to overview Scope Details Aliases deployImage Type string Mandatory yes Default $PIPER_image (if set) Secret no Configuration scope \u2612 parameter \u2610 general \u2612 steps \u2612 stages Resource references commonPipelineEnvironment : reference to: container/imageNameTag keepFailedDeployments \u00b6 Defines whether a failed deployment will be purged back to overview Scope Details Aliases - Type bool Mandatory no Default false Possible values - true - false Secret no Configuration scope \u2612 parameter \u2612 general \u2612 steps \u2612 stages Resource references none kubeConfig \u00b6 Defines the path to the \"kubeconfig\" file. back to overview Scope Details Aliases - Type string Mandatory no Default $PIPER_kubeConfig (if set) Secret yes Configuration scope \u2612 parameter \u2612 general \u2612 steps \u2612 stages Resource references Jenkins credential id: id: kubeConfigFileCredentialsId Vault resource: name: kubeConfigFileVaultSecretName default value: kube-config Vault paths: $(vaultPath)/kube-config $(vaultBasePath)/$(vaultPipelineName)/kube-config $(vaultBasePath)/GROUP-SECRETS/kube-config kubeContext \u00b6 Defines the context to use from the \"kubeconfig\" file. back to overview Scope Details Aliases - Type string Mandatory no Default $PIPER_kubeContext (if set) Secret no Configuration scope \u2612 parameter \u2610 general \u2612 steps \u2612 stages Resource references none namespace \u00b6 Defines the target Kubernetes namespace for the deployment. back to overview Scope Details Aliases helmDeploymentNamespace Type string Mandatory no Default default Secret no Configuration scope \u2612 parameter \u2610 general \u2612 steps \u2612 stages Resource references none packageDependencyUpdate \u00b6 update dependencies from \"Chart.yaml\" to dir \"charts/\" before packaging back to overview Scope Details Aliases - Type bool Mandatory no Default false Possible values - true - false Secret no Configuration scope \u2612 parameter \u2612 general \u2612 steps \u2612 stages Resource references none publish \u00b6 Configures helm to run the deploy command to publish artifacts to a repository. back to overview Scope Details Aliases - Type bool Mandatory no Default false Possible values - true - false Secret no Configuration scope \u2612 parameter \u2612 general \u2612 steps \u2612 stages Resource references none renderSubchartNotes \u00b6 If set, render subchart notes along with the parent. back to overview Scope Details Aliases - Type bool Mandatory no Default true Possible values - true - false Secret no Configuration scope \u2612 parameter \u2612 general \u2612 steps \u2612 stages Resource references none renderValuesTemplate \u00b6 A flag to turn templating value files on or off. back to overview Scope Details Aliases - Type bool Mandatory no Default true Possible values - true - false Secret no Configuration scope \u2612 parameter \u2610 general \u2612 steps \u2610 stages Resource references none script \u00b6 The common script environment of the Jenkinsfile running. Typically the reference to the script calling the pipeline step is provided with the this parameter, as in script: this . This allows the function to access the commonPipelineEnvironment for retrieving, e.g. configuration parameters. back to overview Scope Details Aliases - Type Jenkins Script Mandatory yes Default Secret no Configuration scope \u2610 parameter \u2610 general \u2610 steps \u2610 stages Resource references none sourceRepositoryName \u00b6 Set the name of the chart repository. The value might be required for fetching dependencies. back to overview Scope Details Aliases - Type string Mandatory no Default $PIPER_sourceRepositoryName (if set) Secret no Configuration scope \u2612 parameter \u2612 general \u2612 steps \u2612 stages Resource references none sourceRepositoryPassword \u00b6 Password for the chart repository for fetching the dependencies. back to overview Scope Details Aliases - Type string Mandatory no Default $PIPER_sourceRepositoryPassword (if set) Secret yes Configuration scope \u2612 parameter \u2610 general \u2612 steps \u2612 stages Resource references Jenkins credential id: id: sourceRepositoryCredentialsId reference to: password Vault resource: name: sourceRepositoryPasswordSecret default value: dependencies Vault paths: $(vaultPath)/dependencies $(vaultBasePath)/$(vaultPipelineName)/dependencies $(vaultBasePath)/GROUP-SECRETS/dependencies sourceRepositoryURL \u00b6 URL of the source repository where the dependencies can be downloaded. back to overview Scope Details Aliases - Type string Mandatory no Default $PIPER_sourceRepositoryURL (if set) Secret no Configuration scope \u2612 parameter \u2610 general \u2612 steps \u2612 stages Resource references none sourceRepositoryUser \u00b6 Username for the chart repository for fetching the dependencies. back to overview Scope Details Aliases - Type string Mandatory no Default $PIPER_sourceRepositoryUser (if set) Secret yes Configuration scope \u2612 parameter \u2610 general \u2612 steps \u2612 stages Resource references Jenkins credential id: id: sourceRepositoryCredentialsId reference to: username Vault resource: name: sourceRepositoryUserSecretName default value: dependencies Vault paths: $(vaultPath)/dependencies $(vaultBasePath)/$(vaultPipelineName)/dependencies $(vaultBasePath)/GROUP-SECRETS/dependencies stashContent \u00b6 Jenkins-specific: Used for proper environment setup. Specific stashes that should be considered for the step execution. back to overview Scope Details Aliases - Type []string Mandatory no Default - deployDescriptor Secret no Configuration scope \u2612 parameter \u2612 general \u2612 steps \u2612 stages Resource references none targetRepositoryName \u00b6 set the chart repository. The value is required for install/upgrade/uninstall commands. back to overview Scope Details Aliases - Type string Mandatory no Default $PIPER_targetRepositoryName (if set) Secret no Configuration scope \u2612 parameter \u2612 general \u2612 steps \u2612 stages Resource references none targetRepositoryPassword \u00b6 Password for the target repository where the compiled helm .tgz archive shall be uploaded - typically provided by the CI/CD environment. back to overview Scope Details Aliases helmRepositoryPassword Type string Mandatory no Default $PIPER_targetRepositoryPassword (if set) Secret yes Configuration scope \u2612 parameter \u2610 general \u2612 steps \u2612 stages Resource references Jenkins credential id: id: targetRepositoryCredentialsId reference to: password Vault resource: name: targetRepositoryPasswordSecret default value: publishing Vault paths: $(vaultPath)/publishing $(vaultBasePath)/$(vaultPipelineName)/publishing $(vaultBasePath)/GROUP-SECRETS/publishing commonPipelineEnvironment : reference to: custom/helmRepositoryPassword commonPipelineEnvironment : reference to: custom/repositoryPassword targetRepositoryURL \u00b6 URL of the target repository where the compiled helm .tgz archive shall be uploaded - typically provided by the CI/CD environment. back to overview Scope Details Aliases - Type string Mandatory no Default $PIPER_targetRepositoryURL (if set) Secret no Configuration scope \u2612 parameter \u2610 general \u2612 steps \u2612 stages Resource references commonPipelineEnvironment : reference to: custom/helmRepositoryURL commonPipelineEnvironment : reference to: custom/repositoryUrl targetRepositoryUser \u00b6 Username for the chart repository where the compiled helm .tgz archive shall be uploaded - typically provided by the CI/CD environment. back to overview Scope Details Aliases helmRepositoryUsername Type string Mandatory no Default $PIPER_targetRepositoryUser (if set) Secret yes Configuration scope \u2612 parameter \u2610 general \u2612 steps \u2612 stages Resource references Jenkins credential id: id: targetRepositoryCredentialsId reference to: username Vault resource: name: targetRepositoryUserSecretName default value: publishing Vault paths: $(vaultPath)/publishing $(vaultBasePath)/$(vaultPipelineName)/publishing $(vaultBasePath)/GROUP-SECRETS/publishing commonPipelineEnvironment : reference to: custom/helmRepositoryUsername commonPipelineEnvironment : reference to: custom/repositoryUsername templateEndDelimiter \u00b6 When templating value files, use this end delimiter. back to overview Scope Details Aliases - Type string Mandatory no Default }} Secret no Configuration scope \u2612 parameter \u2610 general \u2612 steps \u2610 stages Resource references none templateStartDelimiter \u00b6 When templating value files, use this start delimiter. back to overview Scope Details Aliases - Type string Mandatory no Default {{ Secret no Configuration scope \u2612 parameter \u2610 general \u2612 steps \u2610 stages Resource references none verbose \u00b6 verbose output back to overview Scope Details Aliases - Type bool Mandatory no Default false Possible values - true - false Secret no Configuration scope \u2612 parameter \u2612 general \u2612 steps \u2612 stages Resource references none version \u00b6 Defines the artifact version to use from helm package/publish commands. back to overview Scope Details Aliases - Type string Mandatory no Default $PIPER_version (if set) Secret no Configuration scope \u2612 parameter \u2612 general \u2612 steps \u2612 stages Resource references none kubeConfigFileCredentialsId \u00b6 Jenkins 'Secret file' credentials ID containing kubeconfig file. Details can be found in the Kubernetes documentation . back to overview Scope Details Aliases kubeCredentialsId ( deprecated ) Type string Configuration scope \u2612 parameter \u2612 general \u2612 steps \u2612 stages dockerConfigJsonCredentialsId \u00b6 Jenkins 'Secret file' credentials ID containing Docker config.json (with registry credential(s)). back to overview Scope Details Aliases - Type string Configuration scope \u2612 parameter \u2612 general \u2612 steps \u2612 stages sourceRepositoryCredentialsId \u00b6 Jenkins 'Username Password' credentials ID containing username and password for the Helm Repository authentication (source repo) back to overview Scope Details Aliases - Type string Configuration scope \u2612 parameter \u2612 general \u2612 steps \u2612 stages targetRepositoryCredentialsId \u00b6 Jenkins 'Username Password' credentials ID containing username and password for the Helm Repository authentication (target repo) back to overview Scope Details Aliases - Type string Configuration scope \u2612 parameter \u2612 general \u2612 steps \u2612 stages","title":"helmExecute"},{"location":"steps/helmExecute/#helmexecute","text":"Executes helm3 functionality as the package manager for Kubernetes.","title":"helmExecute"},{"location":"steps/helmExecute/#description","text":"Alpha version: please expect incompatible changes Executes helm functionality as the package manager for Kubernetes. Helm is the package manager for Kubernetes. Helm documentation and best practices Helm Charts Available Commands: `upgrade`, `lint`, `install`, `test`, `uninstall`, `dependency`, `publish` upgrade upgrade a release lint examine a chart for possible issues install install a chart test run tests for a release uninstall uninstall a release dependency package a chart directory into a chart archive publish package and publish a release Note: piper supports only helm3 version, since helm2 is deprecated.","title":"Description"},{"location":"steps/helmExecute/#usage","text":"We recommend to define values of step parameters via .pipeline/config.yml file . In this case, calling the step is essentially reduced to defining the step name. Calling the step can be done either in an orchestrator specific way (e.g. via a Jenkins library step) or on the command line. Jenkins Command Line library ( 'piper-lib-os' ) helmExecute script: this piper helmExecute","title":"Usage"},{"location":"steps/helmExecute/#outputs","text":"Output type Details commonPipelineEnvironment custom/helmChartUrl","title":"Outputs"},{"location":"steps/helmExecute/#parameters","text":"","title":"Parameters"},{"location":"steps/helmExecute/#overview-step","text":"Name Mandatory Additional information image yes script (yes) reference to Jenkins main pipeline script additionalParameters no appVersion no chartPath no customTlsCertificateLinks no dependency no dockerConfigJSON no pass via ENV, Vault or Jenkins credentials ( dockerConfigJsonCredentialsId ) dumpLogs no filterTest no helmCommand no helmDeployWaitSeconds no helmValues no keepFailedDeployments no kubeConfig no pass via ENV, Vault or Jenkins credentials ( kubeConfigFileCredentialsId ) kubeContext no namespace no packageDependencyUpdate no publish no renderSubchartNotes no renderValuesTemplate no sourceRepositoryName no sourceRepositoryPassword no pass via ENV, Vault or Jenkins credentials ( sourceRepositoryCredentialsId ) sourceRepositoryURL no sourceRepositoryUser no pass via ENV, Vault or Jenkins credentials ( sourceRepositoryCredentialsId ) targetRepositoryName no targetRepositoryPassword no pass via ENV, Vault or Jenkins credentials ( targetRepositoryCredentialsId ) targetRepositoryURL no targetRepositoryUser no pass via ENV, Vault or Jenkins credentials ( targetRepositoryCredentialsId ) templateEndDelimiter no templateStartDelimiter no verbose no activates debug output version no","title":"Overview - Step"},{"location":"steps/helmExecute/#overview-execution-environment","text":"Orchestrator-specific only These parameters are relevant for orchestrator usage and not considered when using the command line option. Name Mandatory Additional information containerCommand no containerShell no dockerEnvVars no dockerImage no dockerName no dockerOptions no dockerPullImage no dockerVolumeBind no dockerWorkspace no stashContent no","title":"Overview - Execution Environment"},{"location":"steps/helmExecute/#details","text":"","title":"Details"},{"location":"steps/helmExecute/#additionalparameters","text":"Defines additional parameters for Helm like \"helm install [NAME] [CHART] [flags]\". back to overview Scope Details Aliases helmDeploymentParameters Type []string Mandatory no Default $PIPER_additionalParameters (if set) Secret no Configuration scope \u2612 parameter \u2610 general \u2612 steps \u2612 stages Resource references none","title":"additionalParameters"},{"location":"steps/helmExecute/#appversion","text":"set the appVersion on the chart to this version back to overview Scope Details Aliases - Type string Mandatory no Default $PIPER_appVersion (if set) Secret no Configuration scope \u2612 parameter \u2612 general \u2612 steps \u2612 stages Resource references none","title":"appVersion"},{"location":"steps/helmExecute/#chartpath","text":"Defines the chart path for helm. chartPath is mandatory for install/upgrade/publish commands. back to overview Scope Details Aliases helmChartPath Type string Mandatory no Default $PIPER_chartPath (if set) Secret no Configuration scope \u2612 parameter \u2612 general \u2612 steps \u2612 stages Resource references none","title":"chartPath"},{"location":"steps/helmExecute/#containercommand","text":"Jenkins-specific: Used for proper environment setup. Kubernetes only: Allows to specify start command for container created with dockerImage parameter to overwrite Piper default (/usr/bin/tail -f /dev/null). back to overview Scope Details Aliases - Type string Mandatory no Default Secret no Configuration scope \u2612 parameter \u2612 general \u2612 steps \u2612 stages Resource references none","title":"containerCommand"},{"location":"steps/helmExecute/#containershell","text":"Jenkins-specific: Used for proper environment setup. Allows to specify the shell to be executed for container with containerName. back to overview Scope Details Aliases - Type string Mandatory no Default Secret no Configuration scope \u2612 parameter \u2612 general \u2612 steps \u2612 stages Resource references none","title":"containerShell"},{"location":"steps/helmExecute/#customtlscertificatelinks","text":"List of download links to custom TLS certificates. This is required to ensure trusted connections to instances with repositories (like nexus) when publish flag is set to true. back to overview Scope Details Aliases - Type []string Mandatory no Default $PIPER_customTlsCertificateLinks (if set) Secret no Configuration scope \u2612 parameter \u2612 general \u2612 steps \u2612 stages Resource references none","title":"customTlsCertificateLinks"},{"location":"steps/helmExecute/#dependency","text":"manage a chart's dependencies back to overview Scope Details Aliases - Type string Mandatory no Default $PIPER_dependency (if set) Possible values - build - list - update Secret no Configuration scope \u2612 parameter \u2610 general \u2612 steps \u2612 stages Resource references none","title":"dependency"},{"location":"steps/helmExecute/#dockerconfigjson","text":"Path to the file .docker/config.json - this is typically provided by your CI/CD system. You can find more details about the Docker credentials in the Docker documentation . back to overview Scope Details Aliases - Type string Mandatory no Default $PIPER_dockerConfigJSON (if set) Secret yes Configuration scope \u2612 parameter \u2610 general \u2612 steps \u2612 stages Resource references Jenkins credential id: id: dockerConfigJsonCredentialsId Vault resource: name: dockerConfigFileVaultSecretName default value: docker-config Vault paths: $(vaultPath)/docker-config $(vaultBasePath)/$(vaultPipelineName)/docker-config $(vaultBasePath)/GROUP-SECRETS/docker-config","title":"dockerConfigJSON"},{"location":"steps/helmExecute/#dockerenvvars","text":"Environment variables to set in the container, e.g. [http_proxy: \"proxy:8080\"]. back to overview Scope Details Aliases - Type map[string]string Mandatory no Default Secret no Configuration scope \u2612 parameter \u2612 general \u2612 steps \u2612 stages Resource references none","title":"dockerEnvVars"},{"location":"steps/helmExecute/#dockerimage","text":"Name of the docker image that should be used. If empty, Docker is not used and the command is executed directly on the Jenkins system. back to overview Scope Details Aliases - Type string Mandatory no Default dtzar/helm-kubectl:3 Secret no Configuration scope \u2612 parameter \u2612 general \u2612 steps \u2612 stages Resource references none","title":"dockerImage"},{"location":"steps/helmExecute/#dockername","text":"Kubernetes only: Name of the container launching dockerImage. SideCar only: Name of the container in local network. back to overview Scope Details Aliases - Type string Mandatory no Default Secret no Configuration scope \u2612 parameter \u2612 general \u2612 steps \u2612 stages Resource references none","title":"dockerName"},{"location":"steps/helmExecute/#dockeroptions","text":"Docker options to be set when starting the container. back to overview Scope Details Aliases - Type []string Mandatory no Default [{-u 0}] Secret no Configuration scope \u2612 parameter \u2612 general \u2612 steps \u2612 stages Resource references none","title":"dockerOptions"},{"location":"steps/helmExecute/#dockerpullimage","text":"Set this to 'false' to bypass a docker image pull. Useful during development process. Allows testing of images which are available in the local registry only. back to overview Scope Details Aliases - Type bool Mandatory no Default true Possible values - true - false Secret no Configuration scope \u2612 parameter \u2612 general \u2612 steps \u2612 stages Resource references none","title":"dockerPullImage"},{"location":"steps/helmExecute/#dockervolumebind","text":"Jenkins-specific: Used for proper environment setup. Volumes that should be mounted into the docker container. back to overview Scope Details Aliases - Type map[string]string Mandatory no Default Secret no Configuration scope \u2612 parameter \u2612 general \u2612 steps \u2612 stages Resource references none","title":"dockerVolumeBind"},{"location":"steps/helmExecute/#dockerworkspace","text":"Jenkins-specific: Used for proper environment setup. Kubernetes only: Specifies a dedicated user home directory for the container which will be passed as value for environment variable HOME . back to overview Scope Details Aliases - Type string Mandatory no Default /config Secret no Configuration scope \u2612 parameter \u2612 general \u2612 steps \u2612 stages Resource references none","title":"dockerWorkspace"},{"location":"steps/helmExecute/#dumplogs","text":"dump the logs from test pods (this runs after all tests are complete, but before any cleanup) back to overview Scope Details Aliases - Type bool Mandatory no Default false Possible values - true - false Secret no Configuration scope \u2612 parameter \u2612 general \u2612 steps \u2612 stages Resource references none","title":"dumpLogs"},{"location":"steps/helmExecute/#filtertest","text":"specify tests by attribute (currently name ) using attribute=value syntax or !attribute=value to exclude a test (can specify multiple or separate values with commas name=test1,name=test2 ) back to overview Scope Details Aliases - Type string Mandatory no Default $PIPER_filterTest (if set) Secret no Configuration scope \u2612 parameter \u2612 general \u2612 steps \u2612 stages Resource references none","title":"filterTest"},{"location":"steps/helmExecute/#helmcommand","text":"Helm: defines the command upgrade , lint , install , test , uninstall , dependency , publish . back to overview Scope Details Aliases - Type string Mandatory no Default $PIPER_helmCommand (if set) Possible values - upgrade - lint - install - test - uninstall - dependency - publish Secret no Configuration scope \u2612 parameter \u2610 general \u2612 steps \u2612 stages Resource references none","title":"helmCommand"},{"location":"steps/helmExecute/#helmdeploywaitseconds","text":"Number of seconds before helm deploy returns. back to overview Scope Details Aliases - Type int Mandatory no Default 300 Secret no Configuration scope \u2612 parameter \u2610 general \u2612 steps \u2612 stages Resource references none","title":"helmDeployWaitSeconds"},{"location":"steps/helmExecute/#helmvalues","text":"List of helm values as YAML file reference or URL (as per helm parameter description for -f / --values ) back to overview Scope Details Aliases - Type []string Mandatory no Default $PIPER_helmValues (if set) Secret no Configuration scope \u2612 parameter \u2610 general \u2612 steps \u2612 stages Resource references none","title":"helmValues"},{"location":"steps/helmExecute/#image","text":"Full name of the image to be deployed. back to overview Scope Details Aliases deployImage Type string Mandatory yes Default $PIPER_image (if set) Secret no Configuration scope \u2612 parameter \u2610 general \u2612 steps \u2612 stages Resource references commonPipelineEnvironment : reference to: container/imageNameTag","title":"image"},{"location":"steps/helmExecute/#keepfaileddeployments","text":"Defines whether a failed deployment will be purged back to overview Scope Details Aliases - Type bool Mandatory no Default false Possible values - true - false Secret no Configuration scope \u2612 parameter \u2612 general \u2612 steps \u2612 stages Resource references none","title":"keepFailedDeployments"},{"location":"steps/helmExecute/#kubeconfig","text":"Defines the path to the \"kubeconfig\" file. back to overview Scope Details Aliases - Type string Mandatory no Default $PIPER_kubeConfig (if set) Secret yes Configuration scope \u2612 parameter \u2612 general \u2612 steps \u2612 stages Resource references Jenkins credential id: id: kubeConfigFileCredentialsId Vault resource: name: kubeConfigFileVaultSecretName default value: kube-config Vault paths: $(vaultPath)/kube-config $(vaultBasePath)/$(vaultPipelineName)/kube-config $(vaultBasePath)/GROUP-SECRETS/kube-config","title":"kubeConfig"},{"location":"steps/helmExecute/#kubecontext","text":"Defines the context to use from the \"kubeconfig\" file. back to overview Scope Details Aliases - Type string Mandatory no Default $PIPER_kubeContext (if set) Secret no Configuration scope \u2612 parameter \u2610 general \u2612 steps \u2612 stages Resource references none","title":"kubeContext"},{"location":"steps/helmExecute/#namespace","text":"Defines the target Kubernetes namespace for the deployment. back to overview Scope Details Aliases helmDeploymentNamespace Type string Mandatory no Default default Secret no Configuration scope \u2612 parameter \u2610 general \u2612 steps \u2612 stages Resource references none","title":"namespace"},{"location":"steps/helmExecute/#packagedependencyupdate","text":"update dependencies from \"Chart.yaml\" to dir \"charts/\" before packaging back to overview Scope Details Aliases - Type bool Mandatory no Default false Possible values - true - false Secret no Configuration scope \u2612 parameter \u2612 general \u2612 steps \u2612 stages Resource references none","title":"packageDependencyUpdate"},{"location":"steps/helmExecute/#publish","text":"Configures helm to run the deploy command to publish artifacts to a repository. back to overview Scope Details Aliases - Type bool Mandatory no Default false Possible values - true - false Secret no Configuration scope \u2612 parameter \u2612 general \u2612 steps \u2612 stages Resource references none","title":"publish"},{"location":"steps/helmExecute/#rendersubchartnotes","text":"If set, render subchart notes along with the parent. back to overview Scope Details Aliases - Type bool Mandatory no Default true Possible values - true - false Secret no Configuration scope \u2612 parameter \u2612 general \u2612 steps \u2612 stages Resource references none","title":"renderSubchartNotes"},{"location":"steps/helmExecute/#rendervaluestemplate","text":"A flag to turn templating value files on or off. back to overview Scope Details Aliases - Type bool Mandatory no Default true Possible values - true - false Secret no Configuration scope \u2612 parameter \u2610 general \u2612 steps \u2610 stages Resource references none","title":"renderValuesTemplate"},{"location":"steps/helmExecute/#script","text":"The common script environment of the Jenkinsfile running. Typically the reference to the script calling the pipeline step is provided with the this parameter, as in script: this . This allows the function to access the commonPipelineEnvironment for retrieving, e.g. configuration parameters. back to overview Scope Details Aliases - Type Jenkins Script Mandatory yes Default Secret no Configuration scope \u2610 parameter \u2610 general \u2610 steps \u2610 stages Resource references none","title":"script"},{"location":"steps/helmExecute/#sourcerepositoryname","text":"Set the name of the chart repository. The value might be required for fetching dependencies. back to overview Scope Details Aliases - Type string Mandatory no Default $PIPER_sourceRepositoryName (if set) Secret no Configuration scope \u2612 parameter \u2612 general \u2612 steps \u2612 stages Resource references none","title":"sourceRepositoryName"},{"location":"steps/helmExecute/#sourcerepositorypassword","text":"Password for the chart repository for fetching the dependencies. back to overview Scope Details Aliases - Type string Mandatory no Default $PIPER_sourceRepositoryPassword (if set) Secret yes Configuration scope \u2612 parameter \u2610 general \u2612 steps \u2612 stages Resource references Jenkins credential id: id: sourceRepositoryCredentialsId reference to: password Vault resource: name: sourceRepositoryPasswordSecret default value: dependencies Vault paths: $(vaultPath)/dependencies $(vaultBasePath)/$(vaultPipelineName)/dependencies $(vaultBasePath)/GROUP-SECRETS/dependencies","title":"sourceRepositoryPassword"},{"location":"steps/helmExecute/#sourcerepositoryurl","text":"URL of the source repository where the dependencies can be downloaded. back to overview Scope Details Aliases - Type string Mandatory no Default $PIPER_sourceRepositoryURL (if set) Secret no Configuration scope \u2612 parameter \u2610 general \u2612 steps \u2612 stages Resource references none","title":"sourceRepositoryURL"},{"location":"steps/helmExecute/#sourcerepositoryuser","text":"Username for the chart repository for fetching the dependencies. back to overview Scope Details Aliases - Type string Mandatory no Default $PIPER_sourceRepositoryUser (if set) Secret yes Configuration scope \u2612 parameter \u2610 general \u2612 steps \u2612 stages Resource references Jenkins credential id: id: sourceRepositoryCredentialsId reference to: username Vault resource: name: sourceRepositoryUserSecretName default value: dependencies Vault paths: $(vaultPath)/dependencies $(vaultBasePath)/$(vaultPipelineName)/dependencies $(vaultBasePath)/GROUP-SECRETS/dependencies","title":"sourceRepositoryUser"},{"location":"steps/helmExecute/#stashcontent","text":"Jenkins-specific: Used for proper environment setup. Specific stashes that should be considered for the step execution. back to overview Scope Details Aliases - Type []string Mandatory no Default - deployDescriptor Secret no Configuration scope \u2612 parameter \u2612 general \u2612 steps \u2612 stages Resource references none","title":"stashContent"},{"location":"steps/helmExecute/#targetrepositoryname","text":"set the chart repository. The value is required for install/upgrade/uninstall commands. back to overview Scope Details Aliases - Type string Mandatory no Default $PIPER_targetRepositoryName (if set) Secret no Configuration scope \u2612 parameter \u2612 general \u2612 steps \u2612 stages Resource references none","title":"targetRepositoryName"},{"location":"steps/helmExecute/#targetrepositorypassword","text":"Password for the target repository where the compiled helm .tgz archive shall be uploaded - typically provided by the CI/CD environment. back to overview Scope Details Aliases helmRepositoryPassword Type string Mandatory no Default $PIPER_targetRepositoryPassword (if set) Secret yes Configuration scope \u2612 parameter \u2610 general \u2612 steps \u2612 stages Resource references Jenkins credential id: id: targetRepositoryCredentialsId reference to: password Vault resource: name: targetRepositoryPasswordSecret default value: publishing Vault paths: $(vaultPath)/publishing $(vaultBasePath)/$(vaultPipelineName)/publishing $(vaultBasePath)/GROUP-SECRETS/publishing commonPipelineEnvironment : reference to: custom/helmRepositoryPassword commonPipelineEnvironment : reference to: custom/repositoryPassword","title":"targetRepositoryPassword"},{"location":"steps/helmExecute/#targetrepositoryurl","text":"URL of the target repository where the compiled helm .tgz archive shall be uploaded - typically provided by the CI/CD environment. back to overview Scope Details Aliases - Type string Mandatory no Default $PIPER_targetRepositoryURL (if set) Secret no Configuration scope \u2612 parameter \u2610 general \u2612 steps \u2612 stages Resource references commonPipelineEnvironment : reference to: custom/helmRepositoryURL commonPipelineEnvironment : reference to: custom/repositoryUrl","title":"targetRepositoryURL"},{"location":"steps/helmExecute/#targetrepositoryuser","text":"Username for the chart repository where the compiled helm .tgz archive shall be uploaded - typically provided by the CI/CD environment. back to overview Scope Details Aliases helmRepositoryUsername Type string Mandatory no Default $PIPER_targetRepositoryUser (if set) Secret yes Configuration scope \u2612 parameter \u2610 general \u2612 steps \u2612 stages Resource references Jenkins credential id: id: targetRepositoryCredentialsId reference to: username Vault resource: name: targetRepositoryUserSecretName default value: publishing Vault paths: $(vaultPath)/publishing $(vaultBasePath)/$(vaultPipelineName)/publishing $(vaultBasePath)/GROUP-SECRETS/publishing commonPipelineEnvironment : reference to: custom/helmRepositoryUsername commonPipelineEnvironment : reference to: custom/repositoryUsername","title":"targetRepositoryUser"},{"location":"steps/helmExecute/#templateenddelimiter","text":"When templating value files, use this end delimiter. back to overview Scope Details Aliases - Type string Mandatory no Default }} Secret no Configuration scope \u2612 parameter \u2610 general \u2612 steps \u2610 stages Resource references none","title":"templateEndDelimiter"},{"location":"steps/helmExecute/#templatestartdelimiter","text":"When templating value files, use this start delimiter. back to overview Scope Details Aliases - Type string Mandatory no Default {{ Secret no Configuration scope \u2612 parameter \u2610 general \u2612 steps \u2610 stages Resource references none","title":"templateStartDelimiter"},{"location":"steps/helmExecute/#verbose","text":"verbose output back to overview Scope Details Aliases - Type bool Mandatory no Default false Possible values - true - false Secret no Configuration scope \u2612 parameter \u2612 general \u2612 steps \u2612 stages Resource references none","title":"verbose"},{"location":"steps/helmExecute/#version","text":"Defines the artifact version to use from helm package/publish commands. back to overview Scope Details Aliases - Type string Mandatory no Default $PIPER_version (if set) Secret no Configuration scope \u2612 parameter \u2612 general \u2612 steps \u2612 stages Resource references none","title":"version"},{"location":"steps/helmExecute/#kubeconfigfilecredentialsid","text":"Jenkins 'Secret file' credentials ID containing kubeconfig file. Details can be found in the Kubernetes documentation . back to overview Scope Details Aliases kubeCredentialsId ( deprecated ) Type string Configuration scope \u2612 parameter \u2612 general \u2612 steps \u2612 stages","title":"kubeConfigFileCredentialsId"},{"location":"steps/helmExecute/#dockerconfigjsoncredentialsid","text":"Jenkins 'Secret file' credentials ID containing Docker config.json (with registry credential(s)). back to overview Scope Details Aliases - Type string Configuration scope \u2612 parameter \u2612 general \u2612 steps \u2612 stages","title":"dockerConfigJsonCredentialsId"},{"location":"steps/helmExecute/#sourcerepositorycredentialsid","text":"Jenkins 'Username Password' credentials ID containing username and password for the Helm Repository authentication (source repo) back to overview Scope Details Aliases - Type string Configuration scope \u2612 parameter \u2612 general \u2612 steps \u2612 stages","title":"sourceRepositoryCredentialsId"},{"location":"steps/helmExecute/#targetrepositorycredentialsid","text":"Jenkins 'Username Password' credentials ID containing username and password for the Helm Repository authentication (target repo) back to overview Scope Details Aliases - Type string Configuration scope \u2612 parameter \u2612 general \u2612 steps \u2612 stages","title":"targetRepositoryCredentialsId"},{"location":"steps/imagePushToRegistry/","text":"imagePushToRegistry \u00b6 Allows you to copy a Docker image from a source container registry to a destination container registry. Description \u00b6 In case you want to pull an existing image from a remote container registry, a source image and source registry needs to be specified. This makes it possible to move an image from one registry to another. The imagePushToRegistry is not similar in functionality to containerPushToRegistry (which is currently a groovy based step and only be used in jenkins). Currently the imagePushToRegistry only supports copying a local image or image from source remote registry to destination registry. Usage \u00b6 We recommend to define values of step parameters via .pipeline/config.yml file . In this case, calling the step is essentially reduced to defining the step name. Calling the step can be done either in an orchestrator specific way (e.g. via a Jenkins library step) or on the command line. Jenkins Command Line library ( 'piper-lib-os' ) imagePushToRegistry script: this piper imagePushToRegistry Parameters \u00b6 Overview - Step \u00b6 Name Mandatory Additional information localDockerImagePath (yes) mandatory in case of: - pushLocalDockerImage = true script (yes) reference to Jenkins main pipeline script sourceImageTag (yes) mandatory in case of: - pushLocalDockerImage = false sourceImages (yes) mandatory in case of: - pushLocalDockerImage = false sourceRegistryPassword (yes) pass via ENV, Vault or Jenkins credentials mandatory in case of: - pushLocalDockerImage = false sourceRegistryUrl (yes) mandatory in case of: - pushLocalDockerImage = false sourceRegistryUser (yes) pass via ENV, Vault or Jenkins credentials mandatory in case of: - pushLocalDockerImage = false targetImageTag (yes) mandatory in case of: - tagLatest = false targetRegistryPassword (yes) pass via ENV, Vault or Jenkins credentials targetRegistryUrl yes targetRegistryUser (yes) pass via ENV, Vault or Jenkins credentials dockerConfigJSON no pass via ENV, Vault or Jenkins credentials pushLocalDockerImage no sourceImageNameTags no tagLatest no targetArchitecture no targetImageNameTags no targetImages no useImageNameTags no verbose no activates debug output Overview - Execution Environment \u00b6 Orchestrator-specific only These parameters are relevant for orchestrator usage and not considered when using the command line option. Name Mandatory Additional information containerCommand no containerShell no dockerEnvVars no dockerImage no dockerName no dockerOptions no dockerPullImage no dockerVolumeBind no dockerWorkspace no stashContent no Details \u00b6 containerCommand \u00b6 Jenkins-specific: Used for proper environment setup. Kubernetes only: Allows to specify start command for container created with dockerImage parameter to overwrite Piper default (/usr/bin/tail -f /dev/null). back to overview Scope Details Aliases - Type string Mandatory no Default /busybox/tail -f /dev/null Secret no Configuration scope \u2612 parameter \u2612 general \u2612 steps \u2612 stages Resource references none containerShell \u00b6 Jenkins-specific: Used for proper environment setup. Allows to specify the shell to be executed for container with containerName. back to overview Scope Details Aliases - Type string Mandatory no Default /busybox/sh Secret no Configuration scope \u2612 parameter \u2612 general \u2612 steps \u2612 stages Resource references none dockerConfigJSON \u00b6 Path to the file .docker/config.json - this is typically provided by your CI/CD system. You can find more details about the Docker credentials in the Docker documentation . back to overview Scope Details Aliases - Type string Mandatory no Default $PIPER_dockerConfigJSON (if set) Secret yes Configuration scope \u2612 parameter \u2610 general \u2612 steps \u2612 stages Resource references Vault resource: name: dockerConfigFileVaultSecretName default value: docker-config Vault paths: $(vaultPath)/docker-config $(vaultBasePath)/$(vaultPipelineName)/docker-config $(vaultBasePath)/GROUP-SECRETS/docker-config dockerEnvVars \u00b6 Environment variables to set in the container, e.g. [http_proxy: \"proxy:8080\"]. back to overview Scope Details Aliases - Type map[string]string Mandatory no Default map[container:docker] Secret no Configuration scope \u2612 parameter \u2612 general \u2612 steps \u2612 stages Resource references none dockerImage \u00b6 Name of the docker image that should be used. If empty, Docker is not used and the command is executed directly on the Jenkins system. back to overview Scope Details Aliases - Type string Mandatory no Default gcr.io/go-containerregistry/crane:debug Secret no Configuration scope \u2612 parameter \u2612 general \u2612 steps \u2612 stages Resource references none dockerName \u00b6 Kubernetes only: Name of the container launching dockerImage. SideCar only: Name of the container in local network. back to overview Scope Details Aliases - Type string Mandatory no Default Secret no Configuration scope \u2612 parameter \u2612 general \u2612 steps \u2612 stages Resource references none dockerOptions \u00b6 Docker options to be set when starting the container. back to overview Scope Details Aliases - Type []string Mandatory no Default [{-u 0} {--entrypoint }] Secret no Configuration scope \u2612 parameter \u2612 general \u2612 steps \u2612 stages Resource references none dockerPullImage \u00b6 Set this to 'false' to bypass a docker image pull. Useful during development process. Allows testing of images which are available in the local registry only. back to overview Scope Details Aliases - Type bool Mandatory no Default true Possible values - true - false Secret no Configuration scope \u2612 parameter \u2612 general \u2612 steps \u2612 stages Resource references none dockerVolumeBind \u00b6 Jenkins-specific: Used for proper environment setup. Volumes that should be mounted into the docker container. back to overview Scope Details Aliases - Type map[string]string Mandatory no Default Secret no Configuration scope \u2612 parameter \u2612 general \u2612 steps \u2612 stages Resource references none dockerWorkspace \u00b6 Jenkins-specific: Used for proper environment setup. Kubernetes only: Specifies a dedicated user home directory for the container which will be passed as value for environment variable HOME . back to overview Scope Details Aliases - Type string Mandatory no Default Secret no Configuration scope \u2612 parameter \u2612 general \u2612 steps \u2612 stages Resource references none localDockerImagePath \u00b6 If the localDockerImagePath is a directory, it will be read as an OCI image layout. Otherwise, localDockerImagePath is assumed to be a docker-style tarball. back to overview Scope Details Aliases - Type string Mandatory mandatory in case of: - pushLocalDockerImage = true Default $PIPER_localDockerImagePath (if set) Secret no Configuration scope \u2612 parameter \u2610 general \u2612 steps \u2612 stages Resource references none pushLocalDockerImage \u00b6 Defines if the local image should be pushed to registry back to overview Scope Details Aliases - Type bool Mandatory no Default false Possible values - true - false Secret no Configuration scope \u2612 parameter \u2610 general \u2612 steps \u2612 stages Resource references none script \u00b6 The common script environment of the Jenkinsfile running. Typically the reference to the script calling the pipeline step is provided with the this parameter, as in script: this . This allows the function to access the commonPipelineEnvironment for retrieving, e.g. configuration parameters. back to overview Scope Details Aliases - Type Jenkins Script Mandatory yes Default Secret no Configuration scope \u2610 parameter \u2610 general \u2610 steps \u2610 stages Resource references none sourceImageNameTags \u00b6 List of full names (registry and tag) of the images to be copied. Works in combination with useImageNameTags. back to overview Scope Details Aliases - Type []string Mandatory no Default $PIPER_sourceImageNameTags (if set) Secret no Configuration scope \u2612 parameter \u2610 general \u2612 steps \u2612 stages Resource references commonPipelineEnvironment : reference to: container/imageNameTags sourceImageTag \u00b6 Tag of the sourceImages back to overview Scope Details Aliases - artifactVersion - containerImageTag Type string Mandatory mandatory in case of: - pushLocalDockerImage = false Default $PIPER_sourceImageTag (if set) Secret no Configuration scope \u2612 parameter \u2612 general \u2612 steps \u2612 stages Resource references commonPipelineEnvironment : reference to: artifactVersion sourceImages \u00b6 Defines the names of the images that will be pulled from source registry. This is helpful for moving images from one location to another. Please ensure that targetImages and sourceImages correspond to each other: the first image in sourceImages should be mapped to the first image in the targetImages parameter. sourceImages : - image-1 - image-2 targetImages : image-1 : target-image-1 image-2 : target-image-2 back to overview Scope Details Aliases - Type []string Mandatory mandatory in case of: - pushLocalDockerImage = false Default $PIPER_sourceImages (if set) Secret no Configuration scope \u2612 parameter \u2610 general \u2612 steps \u2612 stages Resource references commonPipelineEnvironment : reference to: container/imageNames sourceRegistryPassword \u00b6 Password of the source registry where the image should be pulled from. back to overview Scope Details Aliases - Type string Mandatory mandatory in case of: - pushLocalDockerImage = false Default $PIPER_sourceRegistryPassword (if set) Secret yes Configuration scope \u2612 parameter \u2610 general \u2612 steps \u2612 stages Resource references commonPipelineEnvironment : reference to: container/repositoryPassword Vault resource: name: registryCredentialsVaultSecretName default value: docker-registry Vault paths: $(vaultPath)/docker-registry $(vaultBasePath)/$(vaultPipelineName)/docker-registry $(vaultBasePath)/GROUP-SECRETS/docker-registry sourceRegistryUrl \u00b6 Defines a registry url from where the image should optionally be pulled from, incl. the protocol like https://my.registry.com *\" back to overview Scope Details Aliases - Type string Mandatory mandatory in case of: - pushLocalDockerImage = false Default $PIPER_sourceRegistryUrl (if set) Secret no Configuration scope \u2612 parameter \u2610 general \u2612 steps \u2612 stages Resource references commonPipelineEnvironment : reference to: container/registryUrl sourceRegistryUser \u00b6 Username of the source registry where the image should be pulled from. back to overview Scope Details Aliases - Type string Mandatory mandatory in case of: - pushLocalDockerImage = false Default $PIPER_sourceRegistryUser (if set) Secret yes Configuration scope \u2612 parameter \u2610 general \u2612 steps \u2612 stages Resource references commonPipelineEnvironment : reference to: container/repositoryUsername Vault resource: name: registryCredentialsVaultSecretName default value: docker-registry Vault paths: $(vaultPath)/docker-registry $(vaultBasePath)/$(vaultPipelineName)/docker-registry $(vaultBasePath)/GROUP-SECRETS/docker-registry stashContent \u00b6 Jenkins-specific: Used for proper environment setup. Specific stashes that should be considered for the step execution. back to overview Scope Details Aliases - Type []string Mandatory no Default - source Secret no Configuration scope \u2612 parameter \u2612 general \u2612 steps \u2612 stages Resource references none tagLatest \u00b6 Defines if the image should be tagged as latest . The parameter is true if targetImageTag is not specified. back to overview Scope Details Aliases - Type bool Mandatory no Default false Possible values - true - false Secret no Configuration scope \u2612 parameter \u2610 general \u2612 steps \u2612 stages Resource references none targetArchitecture \u00b6 Specifies the targetArchitecture in the form os/arch[/variant][:osversion] (e.g. linux/amd64). All OS and architectures of the specified image will be copied if it is a multi-platform image. To only push a single platform to the target registry use this parameter back to overview Scope Details Aliases - Type string Mandatory no Default $PIPER_targetArchitecture (if set) Secret no Configuration scope \u2612 parameter \u2610 general \u2612 steps \u2610 stages Resource references none targetImageNameTags \u00b6 List of full names (registry and tag) of the images to be deployed. Works in combination with useImageNameTags. If not set, the value will be the sourceImageNameTags with the targetRegistryUrl incorporated. back to overview Scope Details Aliases - Type []string Mandatory no Default $PIPER_targetImageNameTags (if set) Secret no Configuration scope \u2612 parameter \u2610 general \u2612 steps \u2612 stages Resource references none targetImageTag \u00b6 Tag of the targetImages back to overview Scope Details Aliases - artifactVersion - containerImageTag Type string Mandatory mandatory in case of: - tagLatest = false Default $PIPER_targetImageTag (if set) Secret no Configuration scope \u2612 parameter \u2612 general \u2612 steps \u2612 stages Resource references commonPipelineEnvironment : reference to: artifactVersion targetImages \u00b6 Defines the names of the images that will be pushed to the target registry. If empty, names of sourceImages will be used. Please ensure that targetImages and sourceImages correspond to each other: the first image in sourceImages should be mapped to the first image in the targetImages parameter. sourceImages : - image-1 - image-2 targetImages : image-1 : target-image-1 image-2 : target-image-2 back to overview Scope Details Aliases - Type map[string]interface{} Mandatory no Default $PIPER_targetImages (if set) Secret no Configuration scope \u2612 parameter \u2610 general \u2612 steps \u2612 stages Resource references none targetRegistryPassword \u00b6 Password of the target registry where the image should be pushed to. back to overview Scope Details Aliases - Type string Mandatory yes Default $PIPER_targetRegistryPassword (if set) Secret yes Configuration scope \u2612 parameter \u2610 general \u2612 steps \u2612 stages Resource references Vault resource: name: registryCredentialsVaultSecretName default value: docker-registry Vault paths: $(vaultPath)/docker-registry $(vaultBasePath)/$(vaultPipelineName)/docker-registry $(vaultBasePath)/GROUP-SECRETS/docker-registry targetRegistryUrl \u00b6 Defines a registry url from where the image should optionally be pushed to, incl. the protocol like https://my.registry.com *\" back to overview Scope Details Aliases - Type string Mandatory yes Default $PIPER_targetRegistryUrl (if set) Secret no Configuration scope \u2612 parameter \u2610 general \u2612 steps \u2612 stages Resource references none targetRegistryUser \u00b6 Username of the target registry where the image should be pushed to. back to overview Scope Details Aliases - Type string Mandatory yes Default $PIPER_targetRegistryUser (if set) Secret yes Configuration scope \u2612 parameter \u2610 general \u2612 steps \u2612 stages Resource references Vault resource: name: registryCredentialsVaultSecretName default value: docker-registry Vault paths: $(vaultPath)/docker-registry $(vaultBasePath)/$(vaultPipelineName)/docker-registry $(vaultBasePath)/GROUP-SECRETS/docker-registry useImageNameTags \u00b6 Will use the sourceImageNameTags and targetImageNameTags parameters, instead of sourceImages and targetImages. sourceImageNameTags can be set by a build step, e.g. kanikoExecute, and is then available in the pipeline environment. back to overview Scope Details Aliases - Type bool Mandatory no Default false Possible values - true - false Secret no Configuration scope \u2612 parameter \u2610 general \u2612 steps \u2612 stages Resource references none verbose \u00b6 verbose output back to overview Scope Details Aliases - Type bool Mandatory no Default false Possible values - true - false Secret no Configuration scope \u2612 parameter \u2612 general \u2612 steps \u2612 stages Resource references none","title":"imagePushToRegistry"},{"location":"steps/imagePushToRegistry/#imagepushtoregistry","text":"Allows you to copy a Docker image from a source container registry to a destination container registry.","title":"imagePushToRegistry"},{"location":"steps/imagePushToRegistry/#description","text":"In case you want to pull an existing image from a remote container registry, a source image and source registry needs to be specified. This makes it possible to move an image from one registry to another. The imagePushToRegistry is not similar in functionality to containerPushToRegistry (which is currently a groovy based step and only be used in jenkins). Currently the imagePushToRegistry only supports copying a local image or image from source remote registry to destination registry.","title":"Description"},{"location":"steps/imagePushToRegistry/#usage","text":"We recommend to define values of step parameters via .pipeline/config.yml file . In this case, calling the step is essentially reduced to defining the step name. Calling the step can be done either in an orchestrator specific way (e.g. via a Jenkins library step) or on the command line. Jenkins Command Line library ( 'piper-lib-os' ) imagePushToRegistry script: this piper imagePushToRegistry","title":"Usage"},{"location":"steps/imagePushToRegistry/#parameters","text":"","title":"Parameters"},{"location":"steps/imagePushToRegistry/#overview-step","text":"Name Mandatory Additional information localDockerImagePath (yes) mandatory in case of: - pushLocalDockerImage = true script (yes) reference to Jenkins main pipeline script sourceImageTag (yes) mandatory in case of: - pushLocalDockerImage = false sourceImages (yes) mandatory in case of: - pushLocalDockerImage = false sourceRegistryPassword (yes) pass via ENV, Vault or Jenkins credentials mandatory in case of: - pushLocalDockerImage = false sourceRegistryUrl (yes) mandatory in case of: - pushLocalDockerImage = false sourceRegistryUser (yes) pass via ENV, Vault or Jenkins credentials mandatory in case of: - pushLocalDockerImage = false targetImageTag (yes) mandatory in case of: - tagLatest = false targetRegistryPassword (yes) pass via ENV, Vault or Jenkins credentials targetRegistryUrl yes targetRegistryUser (yes) pass via ENV, Vault or Jenkins credentials dockerConfigJSON no pass via ENV, Vault or Jenkins credentials pushLocalDockerImage no sourceImageNameTags no tagLatest no targetArchitecture no targetImageNameTags no targetImages no useImageNameTags no verbose no activates debug output","title":"Overview - Step"},{"location":"steps/imagePushToRegistry/#overview-execution-environment","text":"Orchestrator-specific only These parameters are relevant for orchestrator usage and not considered when using the command line option. Name Mandatory Additional information containerCommand no containerShell no dockerEnvVars no dockerImage no dockerName no dockerOptions no dockerPullImage no dockerVolumeBind no dockerWorkspace no stashContent no","title":"Overview - Execution Environment"},{"location":"steps/imagePushToRegistry/#details","text":"","title":"Details"},{"location":"steps/imagePushToRegistry/#containercommand","text":"Jenkins-specific: Used for proper environment setup. Kubernetes only: Allows to specify start command for container created with dockerImage parameter to overwrite Piper default (/usr/bin/tail -f /dev/null). back to overview Scope Details Aliases - Type string Mandatory no Default /busybox/tail -f /dev/null Secret no Configuration scope \u2612 parameter \u2612 general \u2612 steps \u2612 stages Resource references none","title":"containerCommand"},{"location":"steps/imagePushToRegistry/#containershell","text":"Jenkins-specific: Used for proper environment setup. Allows to specify the shell to be executed for container with containerName. back to overview Scope Details Aliases - Type string Mandatory no Default /busybox/sh Secret no Configuration scope \u2612 parameter \u2612 general \u2612 steps \u2612 stages Resource references none","title":"containerShell"},{"location":"steps/imagePushToRegistry/#dockerconfigjson","text":"Path to the file .docker/config.json - this is typically provided by your CI/CD system. You can find more details about the Docker credentials in the Docker documentation . back to overview Scope Details Aliases - Type string Mandatory no Default $PIPER_dockerConfigJSON (if set) Secret yes Configuration scope \u2612 parameter \u2610 general \u2612 steps \u2612 stages Resource references Vault resource: name: dockerConfigFileVaultSecretName default value: docker-config Vault paths: $(vaultPath)/docker-config $(vaultBasePath)/$(vaultPipelineName)/docker-config $(vaultBasePath)/GROUP-SECRETS/docker-config","title":"dockerConfigJSON"},{"location":"steps/imagePushToRegistry/#dockerenvvars","text":"Environment variables to set in the container, e.g. [http_proxy: \"proxy:8080\"]. back to overview Scope Details Aliases - Type map[string]string Mandatory no Default map[container:docker] Secret no Configuration scope \u2612 parameter \u2612 general \u2612 steps \u2612 stages Resource references none","title":"dockerEnvVars"},{"location":"steps/imagePushToRegistry/#dockerimage","text":"Name of the docker image that should be used. If empty, Docker is not used and the command is executed directly on the Jenkins system. back to overview Scope Details Aliases - Type string Mandatory no Default gcr.io/go-containerregistry/crane:debug Secret no Configuration scope \u2612 parameter \u2612 general \u2612 steps \u2612 stages Resource references none","title":"dockerImage"},{"location":"steps/imagePushToRegistry/#dockername","text":"Kubernetes only: Name of the container launching dockerImage. SideCar only: Name of the container in local network. back to overview Scope Details Aliases - Type string Mandatory no Default Secret no Configuration scope \u2612 parameter \u2612 general \u2612 steps \u2612 stages Resource references none","title":"dockerName"},{"location":"steps/imagePushToRegistry/#dockeroptions","text":"Docker options to be set when starting the container. back to overview Scope Details Aliases - Type []string Mandatory no Default [{-u 0} {--entrypoint }] Secret no Configuration scope \u2612 parameter \u2612 general \u2612 steps \u2612 stages Resource references none","title":"dockerOptions"},{"location":"steps/imagePushToRegistry/#dockerpullimage","text":"Set this to 'false' to bypass a docker image pull. Useful during development process. Allows testing of images which are available in the local registry only. back to overview Scope Details Aliases - Type bool Mandatory no Default true Possible values - true - false Secret no Configuration scope \u2612 parameter \u2612 general \u2612 steps \u2612 stages Resource references none","title":"dockerPullImage"},{"location":"steps/imagePushToRegistry/#dockervolumebind","text":"Jenkins-specific: Used for proper environment setup. Volumes that should be mounted into the docker container. back to overview Scope Details Aliases - Type map[string]string Mandatory no Default Secret no Configuration scope \u2612 parameter \u2612 general \u2612 steps \u2612 stages Resource references none","title":"dockerVolumeBind"},{"location":"steps/imagePushToRegistry/#dockerworkspace","text":"Jenkins-specific: Used for proper environment setup. Kubernetes only: Specifies a dedicated user home directory for the container which will be passed as value for environment variable HOME . back to overview Scope Details Aliases - Type string Mandatory no Default Secret no Configuration scope \u2612 parameter \u2612 general \u2612 steps \u2612 stages Resource references none","title":"dockerWorkspace"},{"location":"steps/imagePushToRegistry/#localdockerimagepath","text":"If the localDockerImagePath is a directory, it will be read as an OCI image layout. Otherwise, localDockerImagePath is assumed to be a docker-style tarball. back to overview Scope Details Aliases - Type string Mandatory mandatory in case of: - pushLocalDockerImage = true Default $PIPER_localDockerImagePath (if set) Secret no Configuration scope \u2612 parameter \u2610 general \u2612 steps \u2612 stages Resource references none","title":"localDockerImagePath"},{"location":"steps/imagePushToRegistry/#pushlocaldockerimage","text":"Defines if the local image should be pushed to registry back to overview Scope Details Aliases - Type bool Mandatory no Default false Possible values - true - false Secret no Configuration scope \u2612 parameter \u2610 general \u2612 steps \u2612 stages Resource references none","title":"pushLocalDockerImage"},{"location":"steps/imagePushToRegistry/#script","text":"The common script environment of the Jenkinsfile running. Typically the reference to the script calling the pipeline step is provided with the this parameter, as in script: this . This allows the function to access the commonPipelineEnvironment for retrieving, e.g. configuration parameters. back to overview Scope Details Aliases - Type Jenkins Script Mandatory yes Default Secret no Configuration scope \u2610 parameter \u2610 general \u2610 steps \u2610 stages Resource references none","title":"script"},{"location":"steps/imagePushToRegistry/#sourceimagenametags","text":"List of full names (registry and tag) of the images to be copied. Works in combination with useImageNameTags. back to overview Scope Details Aliases - Type []string Mandatory no Default $PIPER_sourceImageNameTags (if set) Secret no Configuration scope \u2612 parameter \u2610 general \u2612 steps \u2612 stages Resource references commonPipelineEnvironment : reference to: container/imageNameTags","title":"sourceImageNameTags"},{"location":"steps/imagePushToRegistry/#sourceimagetag","text":"Tag of the sourceImages back to overview Scope Details Aliases - artifactVersion - containerImageTag Type string Mandatory mandatory in case of: - pushLocalDockerImage = false Default $PIPER_sourceImageTag (if set) Secret no Configuration scope \u2612 parameter \u2612 general \u2612 steps \u2612 stages Resource references commonPipelineEnvironment : reference to: artifactVersion","title":"sourceImageTag"},{"location":"steps/imagePushToRegistry/#sourceimages","text":"Defines the names of the images that will be pulled from source registry. This is helpful for moving images from one location to another. Please ensure that targetImages and sourceImages correspond to each other: the first image in sourceImages should be mapped to the first image in the targetImages parameter. sourceImages : - image-1 - image-2 targetImages : image-1 : target-image-1 image-2 : target-image-2 back to overview Scope Details Aliases - Type []string Mandatory mandatory in case of: - pushLocalDockerImage = false Default $PIPER_sourceImages (if set) Secret no Configuration scope \u2612 parameter \u2610 general \u2612 steps \u2612 stages Resource references commonPipelineEnvironment : reference to: container/imageNames","title":"sourceImages"},{"location":"steps/imagePushToRegistry/#sourceregistrypassword","text":"Password of the source registry where the image should be pulled from. back to overview Scope Details Aliases - Type string Mandatory mandatory in case of: - pushLocalDockerImage = false Default $PIPER_sourceRegistryPassword (if set) Secret yes Configuration scope \u2612 parameter \u2610 general \u2612 steps \u2612 stages Resource references commonPipelineEnvironment : reference to: container/repositoryPassword Vault resource: name: registryCredentialsVaultSecretName default value: docker-registry Vault paths: $(vaultPath)/docker-registry $(vaultBasePath)/$(vaultPipelineName)/docker-registry $(vaultBasePath)/GROUP-SECRETS/docker-registry","title":"sourceRegistryPassword"},{"location":"steps/imagePushToRegistry/#sourceregistryurl","text":"Defines a registry url from where the image should optionally be pulled from, incl. the protocol like https://my.registry.com *\" back to overview Scope Details Aliases - Type string Mandatory mandatory in case of: - pushLocalDockerImage = false Default $PIPER_sourceRegistryUrl (if set) Secret no Configuration scope \u2612 parameter \u2610 general \u2612 steps \u2612 stages Resource references commonPipelineEnvironment : reference to: container/registryUrl","title":"sourceRegistryUrl"},{"location":"steps/imagePushToRegistry/#sourceregistryuser","text":"Username of the source registry where the image should be pulled from. back to overview Scope Details Aliases - Type string Mandatory mandatory in case of: - pushLocalDockerImage = false Default $PIPER_sourceRegistryUser (if set) Secret yes Configuration scope \u2612 parameter \u2610 general \u2612 steps \u2612 stages Resource references commonPipelineEnvironment : reference to: container/repositoryUsername Vault resource: name: registryCredentialsVaultSecretName default value: docker-registry Vault paths: $(vaultPath)/docker-registry $(vaultBasePath)/$(vaultPipelineName)/docker-registry $(vaultBasePath)/GROUP-SECRETS/docker-registry","title":"sourceRegistryUser"},{"location":"steps/imagePushToRegistry/#stashcontent","text":"Jenkins-specific: Used for proper environment setup. Specific stashes that should be considered for the step execution. back to overview Scope Details Aliases - Type []string Mandatory no Default - source Secret no Configuration scope \u2612 parameter \u2612 general \u2612 steps \u2612 stages Resource references none","title":"stashContent"},{"location":"steps/imagePushToRegistry/#taglatest","text":"Defines if the image should be tagged as latest . The parameter is true if targetImageTag is not specified. back to overview Scope Details Aliases - Type bool Mandatory no Default false Possible values - true - false Secret no Configuration scope \u2612 parameter \u2610 general \u2612 steps \u2612 stages Resource references none","title":"tagLatest"},{"location":"steps/imagePushToRegistry/#targetarchitecture","text":"Specifies the targetArchitecture in the form os/arch[/variant][:osversion] (e.g. linux/amd64). All OS and architectures of the specified image will be copied if it is a multi-platform image. To only push a single platform to the target registry use this parameter back to overview Scope Details Aliases - Type string Mandatory no Default $PIPER_targetArchitecture (if set) Secret no Configuration scope \u2612 parameter \u2610 general \u2612 steps \u2610 stages Resource references none","title":"targetArchitecture"},{"location":"steps/imagePushToRegistry/#targetimagenametags","text":"List of full names (registry and tag) of the images to be deployed. Works in combination with useImageNameTags. If not set, the value will be the sourceImageNameTags with the targetRegistryUrl incorporated. back to overview Scope Details Aliases - Type []string Mandatory no Default $PIPER_targetImageNameTags (if set) Secret no Configuration scope \u2612 parameter \u2610 general \u2612 steps \u2612 stages Resource references none","title":"targetImageNameTags"},{"location":"steps/imagePushToRegistry/#targetimagetag","text":"Tag of the targetImages back to overview Scope Details Aliases - artifactVersion - containerImageTag Type string Mandatory mandatory in case of: - tagLatest = false Default $PIPER_targetImageTag (if set) Secret no Configuration scope \u2612 parameter \u2612 general \u2612 steps \u2612 stages Resource references commonPipelineEnvironment : reference to: artifactVersion","title":"targetImageTag"},{"location":"steps/imagePushToRegistry/#targetimages","text":"Defines the names of the images that will be pushed to the target registry. If empty, names of sourceImages will be used. Please ensure that targetImages and sourceImages correspond to each other: the first image in sourceImages should be mapped to the first image in the targetImages parameter. sourceImages : - image-1 - image-2 targetImages : image-1 : target-image-1 image-2 : target-image-2 back to overview Scope Details Aliases - Type map[string]interface{} Mandatory no Default $PIPER_targetImages (if set) Secret no Configuration scope \u2612 parameter \u2610 general \u2612 steps \u2612 stages Resource references none","title":"targetImages"},{"location":"steps/imagePushToRegistry/#targetregistrypassword","text":"Password of the target registry where the image should be pushed to. back to overview Scope Details Aliases - Type string Mandatory yes Default $PIPER_targetRegistryPassword (if set) Secret yes Configuration scope \u2612 parameter \u2610 general \u2612 steps \u2612 stages Resource references Vault resource: name: registryCredentialsVaultSecretName default value: docker-registry Vault paths: $(vaultPath)/docker-registry $(vaultBasePath)/$(vaultPipelineName)/docker-registry $(vaultBasePath)/GROUP-SECRETS/docker-registry","title":"targetRegistryPassword"},{"location":"steps/imagePushToRegistry/#targetregistryurl","text":"Defines a registry url from where the image should optionally be pushed to, incl. the protocol like https://my.registry.com *\" back to overview Scope Details Aliases - Type string Mandatory yes Default $PIPER_targetRegistryUrl (if set) Secret no Configuration scope \u2612 parameter \u2610 general \u2612 steps \u2612 stages Resource references none","title":"targetRegistryUrl"},{"location":"steps/imagePushToRegistry/#targetregistryuser","text":"Username of the target registry where the image should be pushed to. back to overview Scope Details Aliases - Type string Mandatory yes Default $PIPER_targetRegistryUser (if set) Secret yes Configuration scope \u2612 parameter \u2610 general \u2612 steps \u2612 stages Resource references Vault resource: name: registryCredentialsVaultSecretName default value: docker-registry Vault paths: $(vaultPath)/docker-registry $(vaultBasePath)/$(vaultPipelineName)/docker-registry $(vaultBasePath)/GROUP-SECRETS/docker-registry","title":"targetRegistryUser"},{"location":"steps/imagePushToRegistry/#useimagenametags","text":"Will use the sourceImageNameTags and targetImageNameTags parameters, instead of sourceImages and targetImages. sourceImageNameTags can be set by a build step, e.g. kanikoExecute, and is then available in the pipeline environment. back to overview Scope Details Aliases - Type bool Mandatory no Default false Possible values - true - false Secret no Configuration scope \u2612 parameter \u2610 general \u2612 steps \u2612 stages Resource references none","title":"useImageNameTags"},{"location":"steps/imagePushToRegistry/#verbose","text":"verbose output back to overview Scope Details Aliases - Type bool Mandatory no Default false Possible values - true - false Secret no Configuration scope \u2612 parameter \u2612 general \u2612 steps \u2612 stages Resource references none","title":"verbose"},{"location":"steps/influxWriteData/","text":"influxWriteData \u00b6 Description \u00b6 Since your Continuous Delivery Pipeline in Jenkins provides your productive development and delivery infrastructure you should monitor the pipeline to ensure it runs as expected. How to setup this monitoring is described in the following. You basically need three components: The InfluxDB Jenkins plugin which allows you to send build metrics to InfluxDB servers The InfluxDB to store this data (Docker available) A Grafana dashboard to visualize the data stored in InfluxDB (Docker available) no InfluxDB available? If you don't have an InfluxDB available yet this step will still provide you some benefit. It will create following files for you and archive them into your build: jenkins_data.json : This file gives you build-specific information, like e.g. build result, stage where the build failed influx_data.json : This file gives you detailed information about your pipeline, e.g. stage durations, steps executed, ... Prerequisites \u00b6 Setting up InfluxDB with Grafana \u00b6 The easiest way to start with is using the available official docker images. You can either run these docker containers on the same host on which you run your Jenkins or each docker on individual VMs (hosts). Very basic setup can be done like that (with user \"admin\" and password \"adminPwd\" for both InfluxDB and Grafana): docker run -d -p 8083:8083 -p 8086:8086 --restart=always --name influxdb -v /var/influx_data:/var/lib/influxdb influxdb docker run -d -p 3000:3000 --name grafana --restart=always --link influxdb:influxdb -e \"GF_SECURITY_ADMIN_PASSWORD=adminPwd\" grafana/grafana For more advanced setup please reach out to the respective documentation: InfluxDB ( Docker Hub GitHub ) Grafana ( Docker Hub GitHub ) After you have started your InfluxDB docker you need to create a database: in a Webbrowser open the InfluxDB Web-UI using the following URL: <host of your docker>:8083 (port 8083 is used for access via Web-UI, for Jenkins you use port 8086 to access the DB) create new DB (the name of this DB you need to provide later to Jenkins) create Admin user (this user you need to provide later to Jenkins) With InfluxDB version 1.1 the InfluxDB Web-UI is deprecated You can perform the above steps via commandline: The following command will create a database with name <databasename> curl -i -XPOST http://localhost:8086/query --data-urlencode \"q=CREATE DATABASE \\<databasename\\>\" The admin user with the name <adminusername> and the password <adminuserpwd> can be created with curl -i -XPOST http://localhost:8086/query --data-urlencode \"q=CREATE USER \\<adminusername\\> WITH PASSWORD '\\<adminuserpwd\\>' WITH ALL PRIVILEGES\" Once you have started both docker containers and Influx and Grafana are running you need to configure the Jenkins Plugin according to your settings. Pipeline configuration \u00b6 To setup your Jenkins you need to do two configuration steps: Configure Jenkins (via Manage Jenkins) Adapt pipeline configuration Configure Jenkins \u00b6 Once the plugin is available in your Jenkins: go to \"Manage Jenkins\" > \"Configure System\" > scroll down to section \"influxdb target\" maintain Influx data Jenkins as a Service For Jenkins as a Service instances this is already preset to the local InfluxDB with the name jenkins . In this case there is not need to do any additional configuration. Adapt pipeline configuration \u00b6 You need to define the influxDB server in your pipeline as it is defined in the InfluxDb plugin configuration (see above). influxDBServer = jenkins Parameters \u00b6 name mandatory default possible values artifactVersion no customData no customDataMap no customDataMapTags no customDataTags no influxPrefix no influxServer no `` script yes sonarTokenCredentialsId no wrapInNode no artifactVersion - Defines the version of the current artifact. Defaults to commonPipelineEnvironment.getArtifactVersion() customData - Defines custom data (map of key-value pairs) to be written to Influx into measurement jenkins_custom_data . Defaults to commonPipelineEnvironment.getInfluxCustomData() customDataMap - Defines a map of measurement names containing custom data (map of key-value pairs) to be written to Influx. Defaults to commonPipelineEnvironment.getInfluxCustomDataMap() customDataMapTags - Defines a map of measurement names containing tags (map of key-value pairs) to be written to Influx. Defaults to commonPipelineEnvironment.getInfluxCustomDataTags() customDataTags - Defines tags (map of key-value pairs) to be written to Influx into measurement jenkins_custom_data . Defaults to commonPipelineEnvironment.getInfluxCustomDataTags() influxPrefix - Defines a custom prefix. For example in multi branch pipelines, where every build is named after the branch built and thus you have different builds called 'master' that report different metrics. influxServer - Defines the name of the Influx server as configured in Jenkins global configuration. script - The common script environment of the Jenkinsfile running. Typically the reference to the script calling the pipeline step is provided with the this parameter, as in script: this . This allows the function to access the commonPipelineEnvironment for retrieving, e.g. configuration parameters. sonarTokenCredentialsId - wrapInNode - Defines if a dedicated node/executor should be created in the pipeline run. This is especially relevant when running the step in a declarative POST stage where by default no executor is available. Step configuration \u00b6 We recommend to define values of step parameters via config.yml file . In following sections of the config.yml the configuration is possible: parameter general step/stage artifactVersion X customData X customDataMap X customDataMapTags X customDataTags X influxPrefix X influxServer X script sonarTokenCredentialsId X wrapInNode X Dependencies \u00b6 The step depends on the following Jenkins plugins credentials-binding pipeline-utility-steps workflow-basic-steps workflow-cps-global-lib workflow-durable-task-step Transitive dependencies are omitted. The list might be incomplete. Consider using the ppiper/jenkins-master docker image. This images comes with preinstalled plugins. Example \u00b6 influxWriteData script: this Work with InfluxDB and Grafana \u00b6 You can access your Grafana via Web-UI: <host of your grafana(-docker)>:<port3000> (or another port in case you have defined another one when starting your docker) As a first step you need to add your InfluxDB as Data source to your Grafana: Login as user admin (PW as defined when starting your docker) in the navigation go to data sources -> add data source: name type: InfluxDB Url: http://<host of your InfluxDB server>:<port> Access: direct (not via proxy) database: <name of the DB as specified above> User: <name of the admin user as specified in step above> Password: <password of the admin user as specified in step above> Jenkins as a Service For Jenkins as a Service the data source configuration is already available. Therefore no need to go through the data source configuration step unless you want to add additional data sources. Data collected in InfluxDB \u00b6 The Influx plugin collects following data in the project \"Piper\" context: All data as per default InfluxDB plugin capabilities Additional data collected via InfluxData.addField(measurement, key, value) Add custom information to your InfluxDB You can simply add custom data collected during your pipeline runs via available data objects. Example: //add data to measurement jenkins_custom_data - value can be a String or a Number commonPipelineEnvironment . setInfluxCustomDataProperty ( 'myProperty' , 2018 ) Collected InfluxDB measurements \u00b6 Measurements are potentially pre-fixed - see parameter influxPrefix above. Measurement name data column description All measurements build_number project_name All below measurements will have these columns. Details see InfluxDB plugin documentation jenkins_data build_result build_time last_successful_build tests_failed tests_skipped tests_total ... Details see InfluxDB plugin documentation cobertura_data cobertura_branch_coverage_rate cobertura_class_coverage_rate cobertura_line_coverage_rate cobertura_package_coverage_rate ... Details see InfluxDB plugin documentation jacoco_data jacoco_branch_coverage_rate jacoco_class_coverage_rate jacoco_instruction_coverage_rate jacoco_line_coverage_rate jacoco_method_coverage_rate Details see InfluxDB plugin documentation performance_data 90Percentile average max median min error_count error_percent ... Details see InfluxDB plugin documentation sonarqube_data blocker_issues critical_issues info_issues major_issues minor_issues lines_of_code ... Details see InfluxDB plugin documentation jenkins_custom_data project \"Piper\" fills following colums by default: build_result build_result_key build_step (->step in case of error) build_error (->error message in case of error) filled by commonPipelineEnvironment.setInfluxCustomDataProperty() pipeline_data Examples from the project \"Piper\" templates: build_duration opa_duration deploy_test_duration deploy_test_duration fortify_duration release_duration ... filled by step measureDuration using parameter measurementName step_data Considered, e.g.: build_url bats checkmarx fortify gauge nsp snyk sonar ... filled by InfluxData.addField('step_data', key, value) Examples for InfluxDB queries which can be used in Grafana \u00b6 Project Names containing dashes (-) The InfluxDB plugin replaces dashes (-) with underscores (_). Please keep this in mind when specifying your project_name for a InfluxDB query. Example 1: Select last 10 successful builds \u00b6 select top ( build_number , 10 ), build_result from jenkins_data WHERE build_result = 'SUCCESS' Example 2: Select last 10 step names of failed builds \u00b6 select top ( build_number , 10 ), build_result , build_step from jenkins_custom_data WHERE build_result = 'FAILURE' Example 3: Select build duration of step for a specific project \u00b6 select build_duration / 1000 from \"pipeline_data\" WHERE project_name = 'PiperTestOrg_piper_test_master' Example 4: Get transparency about successful/failed steps for a specific project \u00b6 select top ( build_number , 10 ) AS \"Build\" , build_url , build_quality , fortify , gauge , vulas , opa from step_data WHERE project_name = 'PiperTestOrg_piper_test_master' Note With this query you can create transparency about which steps ran successfully / not successfully in your pipeline and which ones were not executed at all. By specifying all the steps you consider relevant in your select statement it is very easy to create this transparency.","title":"influxWriteData"},{"location":"steps/influxWriteData/#influxwritedata","text":"","title":"influxWriteData"},{"location":"steps/influxWriteData/#description","text":"Since your Continuous Delivery Pipeline in Jenkins provides your productive development and delivery infrastructure you should monitor the pipeline to ensure it runs as expected. How to setup this monitoring is described in the following. You basically need three components: The InfluxDB Jenkins plugin which allows you to send build metrics to InfluxDB servers The InfluxDB to store this data (Docker available) A Grafana dashboard to visualize the data stored in InfluxDB (Docker available) no InfluxDB available? If you don't have an InfluxDB available yet this step will still provide you some benefit. It will create following files for you and archive them into your build: jenkins_data.json : This file gives you build-specific information, like e.g. build result, stage where the build failed influx_data.json : This file gives you detailed information about your pipeline, e.g. stage durations, steps executed, ...","title":"Description"},{"location":"steps/influxWriteData/#prerequisites","text":"","title":"Prerequisites"},{"location":"steps/influxWriteData/#setting-up-influxdb-with-grafana","text":"The easiest way to start with is using the available official docker images. You can either run these docker containers on the same host on which you run your Jenkins or each docker on individual VMs (hosts). Very basic setup can be done like that (with user \"admin\" and password \"adminPwd\" for both InfluxDB and Grafana): docker run -d -p 8083:8083 -p 8086:8086 --restart=always --name influxdb -v /var/influx_data:/var/lib/influxdb influxdb docker run -d -p 3000:3000 --name grafana --restart=always --link influxdb:influxdb -e \"GF_SECURITY_ADMIN_PASSWORD=adminPwd\" grafana/grafana For more advanced setup please reach out to the respective documentation: InfluxDB ( Docker Hub GitHub ) Grafana ( Docker Hub GitHub ) After you have started your InfluxDB docker you need to create a database: in a Webbrowser open the InfluxDB Web-UI using the following URL: <host of your docker>:8083 (port 8083 is used for access via Web-UI, for Jenkins you use port 8086 to access the DB) create new DB (the name of this DB you need to provide later to Jenkins) create Admin user (this user you need to provide later to Jenkins) With InfluxDB version 1.1 the InfluxDB Web-UI is deprecated You can perform the above steps via commandline: The following command will create a database with name <databasename> curl -i -XPOST http://localhost:8086/query --data-urlencode \"q=CREATE DATABASE \\<databasename\\>\" The admin user with the name <adminusername> and the password <adminuserpwd> can be created with curl -i -XPOST http://localhost:8086/query --data-urlencode \"q=CREATE USER \\<adminusername\\> WITH PASSWORD '\\<adminuserpwd\\>' WITH ALL PRIVILEGES\" Once you have started both docker containers and Influx and Grafana are running you need to configure the Jenkins Plugin according to your settings.","title":"Setting up InfluxDB with Grafana"},{"location":"steps/influxWriteData/#pipeline-configuration","text":"To setup your Jenkins you need to do two configuration steps: Configure Jenkins (via Manage Jenkins) Adapt pipeline configuration","title":"Pipeline configuration"},{"location":"steps/influxWriteData/#configure-jenkins","text":"Once the plugin is available in your Jenkins: go to \"Manage Jenkins\" > \"Configure System\" > scroll down to section \"influxdb target\" maintain Influx data Jenkins as a Service For Jenkins as a Service instances this is already preset to the local InfluxDB with the name jenkins . In this case there is not need to do any additional configuration.","title":"Configure Jenkins"},{"location":"steps/influxWriteData/#adapt-pipeline-configuration","text":"You need to define the influxDB server in your pipeline as it is defined in the InfluxDb plugin configuration (see above). influxDBServer = jenkins","title":"Adapt pipeline configuration"},{"location":"steps/influxWriteData/#parameters","text":"name mandatory default possible values artifactVersion no customData no customDataMap no customDataMapTags no customDataTags no influxPrefix no influxServer no `` script yes sonarTokenCredentialsId no wrapInNode no artifactVersion - Defines the version of the current artifact. Defaults to commonPipelineEnvironment.getArtifactVersion() customData - Defines custom data (map of key-value pairs) to be written to Influx into measurement jenkins_custom_data . Defaults to commonPipelineEnvironment.getInfluxCustomData() customDataMap - Defines a map of measurement names containing custom data (map of key-value pairs) to be written to Influx. Defaults to commonPipelineEnvironment.getInfluxCustomDataMap() customDataMapTags - Defines a map of measurement names containing tags (map of key-value pairs) to be written to Influx. Defaults to commonPipelineEnvironment.getInfluxCustomDataTags() customDataTags - Defines tags (map of key-value pairs) to be written to Influx into measurement jenkins_custom_data . Defaults to commonPipelineEnvironment.getInfluxCustomDataTags() influxPrefix - Defines a custom prefix. For example in multi branch pipelines, where every build is named after the branch built and thus you have different builds called 'master' that report different metrics. influxServer - Defines the name of the Influx server as configured in Jenkins global configuration. script - The common script environment of the Jenkinsfile running. Typically the reference to the script calling the pipeline step is provided with the this parameter, as in script: this . This allows the function to access the commonPipelineEnvironment for retrieving, e.g. configuration parameters. sonarTokenCredentialsId - wrapInNode - Defines if a dedicated node/executor should be created in the pipeline run. This is especially relevant when running the step in a declarative POST stage where by default no executor is available.","title":"Parameters"},{"location":"steps/influxWriteData/#step-configuration","text":"We recommend to define values of step parameters via config.yml file . In following sections of the config.yml the configuration is possible: parameter general step/stage artifactVersion X customData X customDataMap X customDataMapTags X customDataTags X influxPrefix X influxServer X script sonarTokenCredentialsId X wrapInNode X","title":"Step configuration"},{"location":"steps/influxWriteData/#dependencies","text":"The step depends on the following Jenkins plugins credentials-binding pipeline-utility-steps workflow-basic-steps workflow-cps-global-lib workflow-durable-task-step Transitive dependencies are omitted. The list might be incomplete. Consider using the ppiper/jenkins-master docker image. This images comes with preinstalled plugins.","title":"Dependencies"},{"location":"steps/influxWriteData/#example","text":"influxWriteData script: this","title":"Example"},{"location":"steps/influxWriteData/#work-with-influxdb-and-grafana","text":"You can access your Grafana via Web-UI: <host of your grafana(-docker)>:<port3000> (or another port in case you have defined another one when starting your docker) As a first step you need to add your InfluxDB as Data source to your Grafana: Login as user admin (PW as defined when starting your docker) in the navigation go to data sources -> add data source: name type: InfluxDB Url: http://<host of your InfluxDB server>:<port> Access: direct (not via proxy) database: <name of the DB as specified above> User: <name of the admin user as specified in step above> Password: <password of the admin user as specified in step above> Jenkins as a Service For Jenkins as a Service the data source configuration is already available. Therefore no need to go through the data source configuration step unless you want to add additional data sources.","title":"Work with InfluxDB and Grafana"},{"location":"steps/influxWriteData/#data-collected-in-influxdb","text":"The Influx plugin collects following data in the project \"Piper\" context: All data as per default InfluxDB plugin capabilities Additional data collected via InfluxData.addField(measurement, key, value) Add custom information to your InfluxDB You can simply add custom data collected during your pipeline runs via available data objects. Example: //add data to measurement jenkins_custom_data - value can be a String or a Number commonPipelineEnvironment . setInfluxCustomDataProperty ( 'myProperty' , 2018 )","title":"Data collected in InfluxDB"},{"location":"steps/influxWriteData/#collected-influxdb-measurements","text":"Measurements are potentially pre-fixed - see parameter influxPrefix above. Measurement name data column description All measurements build_number project_name All below measurements will have these columns. Details see InfluxDB plugin documentation jenkins_data build_result build_time last_successful_build tests_failed tests_skipped tests_total ... Details see InfluxDB plugin documentation cobertura_data cobertura_branch_coverage_rate cobertura_class_coverage_rate cobertura_line_coverage_rate cobertura_package_coverage_rate ... Details see InfluxDB plugin documentation jacoco_data jacoco_branch_coverage_rate jacoco_class_coverage_rate jacoco_instruction_coverage_rate jacoco_line_coverage_rate jacoco_method_coverage_rate Details see InfluxDB plugin documentation performance_data 90Percentile average max median min error_count error_percent ... Details see InfluxDB plugin documentation sonarqube_data blocker_issues critical_issues info_issues major_issues minor_issues lines_of_code ... Details see InfluxDB plugin documentation jenkins_custom_data project \"Piper\" fills following colums by default: build_result build_result_key build_step (->step in case of error) build_error (->error message in case of error) filled by commonPipelineEnvironment.setInfluxCustomDataProperty() pipeline_data Examples from the project \"Piper\" templates: build_duration opa_duration deploy_test_duration deploy_test_duration fortify_duration release_duration ... filled by step measureDuration using parameter measurementName step_data Considered, e.g.: build_url bats checkmarx fortify gauge nsp snyk sonar ... filled by InfluxData.addField('step_data', key, value)","title":"Collected InfluxDB measurements"},{"location":"steps/influxWriteData/#examples-for-influxdb-queries-which-can-be-used-in-grafana","text":"Project Names containing dashes (-) The InfluxDB plugin replaces dashes (-) with underscores (_). Please keep this in mind when specifying your project_name for a InfluxDB query.","title":"Examples for InfluxDB queries which can be used in Grafana"},{"location":"steps/influxWriteData/#example-1-select-last-10-successful-builds","text":"select top ( build_number , 10 ), build_result from jenkins_data WHERE build_result = 'SUCCESS'","title":"Example 1: Select last 10 successful builds"},{"location":"steps/influxWriteData/#example-2-select-last-10-step-names-of-failed-builds","text":"select top ( build_number , 10 ), build_result , build_step from jenkins_custom_data WHERE build_result = 'FAILURE'","title":"Example 2: Select last 10 step names of failed builds"},{"location":"steps/influxWriteData/#example-3-select-build-duration-of-step-for-a-specific-project","text":"select build_duration / 1000 from \"pipeline_data\" WHERE project_name = 'PiperTestOrg_piper_test_master'","title":"Example 3: Select build duration of step for a specific project"},{"location":"steps/influxWriteData/#example-4-get-transparency-about-successfulfailed-steps-for-a-specific-project","text":"select top ( build_number , 10 ) AS \"Build\" , build_url , build_quality , fortify , gauge , vulas , opa from step_data WHERE project_name = 'PiperTestOrg_piper_test_master' Note With this query you can create transparency about which steps ran successfully / not successfully in your pipeline and which ones were not executed at all. By specifying all the steps you consider relevant in your select statement it is very easy to create this transparency.","title":"Example 4: Get transparency about successful/failed steps for a specific project"},{"location":"steps/integrationArtifactDeploy/","text":"integrationArtifactDeploy \u00b6 Deploy a CPI integration flow Description \u00b6 With this step you can deploy a integration flow artifact in to SAP BTP integration runtime using OData API. Learn more about the SAP Cloud Integration remote API for deploying an integration artifact here Usage \u00b6 We recommend to define values of step parameters via .pipeline/config.yml file . In this case, calling the step is essentially reduced to defining the step name. Calling the step can be done either in an orchestrator specific way (e.g. via a Jenkins library step) or on the command line. Jenkins Command Line library ( 'piper-lib-os' ) integrationArtifactDeploy script: this piper integrationArtifactDeploy Prerequisites \u00b6 Parameters \u00b6 Overview - Step \u00b6 Name Mandatory Additional information apiServiceKey (yes) pass via ENV or Jenkins credentials ( cpiApiServiceKeyCredentialsId ) integrationFlowId yes script (yes) reference to Jenkins main pipeline script verbose no activates debug output Overview - Execution Environment \u00b6 Orchestrator-specific only These parameters are relevant for orchestrator usage and not considered when using the command line option. Name Mandatory Additional information Details \u00b6 apiServiceKey \u00b6 Service key JSON string to access the Process Integration Runtime service instance of plan 'api' back to overview Scope Details Aliases - Type string Mandatory yes Default $PIPER_apiServiceKey (if set) Secret yes Configuration scope \u2612 parameter \u2610 general \u2610 steps \u2610 stages Resource references Jenkins credential id: id: cpiApiServiceKeyCredentialsId reference to: apiServiceKey integrationFlowId \u00b6 Specifies the ID of the Integration Flow artifact back to overview Scope Details Aliases - Type string Mandatory yes Default $PIPER_integrationFlowId (if set) Secret no Configuration scope \u2612 parameter \u2612 general \u2612 steps \u2612 stages Resource references none script \u00b6 The common script environment of the Jenkinsfile running. Typically the reference to the script calling the pipeline step is provided with the this parameter, as in script: this . This allows the function to access the commonPipelineEnvironment for retrieving, e.g. configuration parameters. back to overview Scope Details Aliases - Type Jenkins Script Mandatory yes Default Secret no Configuration scope \u2610 parameter \u2610 general \u2610 steps \u2610 stages Resource references none verbose \u00b6 verbose output back to overview Scope Details Aliases - Type bool Mandatory no Default false Possible values - true - false Secret no Configuration scope \u2612 parameter \u2612 general \u2612 steps \u2612 stages Resource references none cpiApiServiceKeyCredentialsId \u00b6 Jenkins secret text credential ID containing the service key to the Process Integration Runtime service instance of plan 'api' back to overview Scope Details Aliases - Type string Configuration scope \u2612 parameter \u2612 general \u2612 steps \u2612 stages Example \u00b6 Example configuration for the use in a Jenkinsfile . integrationArtifactDeploy script: this Example of a YAML configuration file (such as .pipeline/config.yaml ). steps : <...> integrationArtifactDeploy : cpiApiServiceKeyCredentialsId : 'MY_API_SERVICE_KEY' integrationFlowId : 'MY_INTEGRATION_FLOW_NAME'","title":"integrationArtifactDeploy"},{"location":"steps/integrationArtifactDeploy/#integrationartifactdeploy","text":"Deploy a CPI integration flow","title":"integrationArtifactDeploy"},{"location":"steps/integrationArtifactDeploy/#description","text":"With this step you can deploy a integration flow artifact in to SAP BTP integration runtime using OData API. Learn more about the SAP Cloud Integration remote API for deploying an integration artifact here","title":"Description"},{"location":"steps/integrationArtifactDeploy/#usage","text":"We recommend to define values of step parameters via .pipeline/config.yml file . In this case, calling the step is essentially reduced to defining the step name. Calling the step can be done either in an orchestrator specific way (e.g. via a Jenkins library step) or on the command line. Jenkins Command Line library ( 'piper-lib-os' ) integrationArtifactDeploy script: this piper integrationArtifactDeploy","title":"Usage"},{"location":"steps/integrationArtifactDeploy/#prerequisites","text":"","title":"Prerequisites"},{"location":"steps/integrationArtifactDeploy/#parameters","text":"","title":"Parameters"},{"location":"steps/integrationArtifactDeploy/#overview-step","text":"Name Mandatory Additional information apiServiceKey (yes) pass via ENV or Jenkins credentials ( cpiApiServiceKeyCredentialsId ) integrationFlowId yes script (yes) reference to Jenkins main pipeline script verbose no activates debug output","title":"Overview - Step"},{"location":"steps/integrationArtifactDeploy/#overview-execution-environment","text":"Orchestrator-specific only These parameters are relevant for orchestrator usage and not considered when using the command line option. Name Mandatory Additional information","title":"Overview - Execution Environment"},{"location":"steps/integrationArtifactDeploy/#details","text":"","title":"Details"},{"location":"steps/integrationArtifactDeploy/#apiservicekey","text":"Service key JSON string to access the Process Integration Runtime service instance of plan 'api' back to overview Scope Details Aliases - Type string Mandatory yes Default $PIPER_apiServiceKey (if set) Secret yes Configuration scope \u2612 parameter \u2610 general \u2610 steps \u2610 stages Resource references Jenkins credential id: id: cpiApiServiceKeyCredentialsId reference to: apiServiceKey","title":"apiServiceKey"},{"location":"steps/integrationArtifactDeploy/#integrationflowid","text":"Specifies the ID of the Integration Flow artifact back to overview Scope Details Aliases - Type string Mandatory yes Default $PIPER_integrationFlowId (if set) Secret no Configuration scope \u2612 parameter \u2612 general \u2612 steps \u2612 stages Resource references none","title":"integrationFlowId"},{"location":"steps/integrationArtifactDeploy/#script","text":"The common script environment of the Jenkinsfile running. Typically the reference to the script calling the pipeline step is provided with the this parameter, as in script: this . This allows the function to access the commonPipelineEnvironment for retrieving, e.g. configuration parameters. back to overview Scope Details Aliases - Type Jenkins Script Mandatory yes Default Secret no Configuration scope \u2610 parameter \u2610 general \u2610 steps \u2610 stages Resource references none","title":"script"},{"location":"steps/integrationArtifactDeploy/#verbose","text":"verbose output back to overview Scope Details Aliases - Type bool Mandatory no Default false Possible values - true - false Secret no Configuration scope \u2612 parameter \u2612 general \u2612 steps \u2612 stages Resource references none","title":"verbose"},{"location":"steps/integrationArtifactDeploy/#cpiapiservicekeycredentialsid","text":"Jenkins secret text credential ID containing the service key to the Process Integration Runtime service instance of plan 'api' back to overview Scope Details Aliases - Type string Configuration scope \u2612 parameter \u2612 general \u2612 steps \u2612 stages","title":"cpiApiServiceKeyCredentialsId"},{"location":"steps/integrationArtifactDeploy/#example","text":"Example configuration for the use in a Jenkinsfile . integrationArtifactDeploy script: this Example of a YAML configuration file (such as .pipeline/config.yaml ). steps : <...> integrationArtifactDeploy : cpiApiServiceKeyCredentialsId : 'MY_API_SERVICE_KEY' integrationFlowId : 'MY_INTEGRATION_FLOW_NAME'","title":"Example"},{"location":"steps/integrationArtifactDownload/","text":"integrationArtifactDownload \u00b6 Download integration flow runtime artefact Description \u00b6 With this step you can download a integration flow runtime artifact, which returns a zip file with the integration flow contents in to current workspace using the OData API. Learn more about the SAP Cloud Integration remote API for downloading an integration flow artifact here . Usage \u00b6 We recommend to define values of step parameters via .pipeline/config.yml file . In this case, calling the step is essentially reduced to defining the step name. Calling the step can be done either in an orchestrator specific way (e.g. via a Jenkins library step) or on the command line. Jenkins Command Line library ( 'piper-lib-os' ) integrationArtifactDownload script: this piper integrationArtifactDownload Prerequisites \u00b6 Parameters \u00b6 Overview - Step \u00b6 Name Mandatory Additional information apiServiceKey (yes) pass via ENV or Jenkins credentials ( cpiApiServiceKeyCredentialsId ) downloadPath yes integrationFlowId yes integrationFlowVersion yes script (yes) reference to Jenkins main pipeline script verbose no activates debug output Overview - Execution Environment \u00b6 Orchestrator-specific only These parameters are relevant for orchestrator usage and not considered when using the command line option. Name Mandatory Additional information Details \u00b6 apiServiceKey \u00b6 Service key JSON string to access the Process Integration Runtime service instance of plan 'api' back to overview Scope Details Aliases - Type string Mandatory yes Default $PIPER_apiServiceKey (if set) Secret yes Configuration scope \u2612 parameter \u2610 general \u2610 steps \u2610 stages Resource references Jenkins credential id: id: cpiApiServiceKeyCredentialsId reference to: apiServiceKey downloadPath \u00b6 Specifies integration artifact download location. back to overview Scope Details Aliases - Type string Mandatory yes Default $PIPER_downloadPath (if set) Secret no Configuration scope \u2612 parameter \u2610 general \u2612 steps \u2612 stages Resource references none integrationFlowId \u00b6 Specifies the ID of the Integration Flow artifact back to overview Scope Details Aliases - Type string Mandatory yes Default $PIPER_integrationFlowId (if set) Secret no Configuration scope \u2612 parameter \u2610 general \u2612 steps \u2612 stages Resource references none integrationFlowVersion \u00b6 Specifies the version of the Integration Flow artifact back to overview Scope Details Aliases - Type string Mandatory yes Default $PIPER_integrationFlowVersion (if set) Secret no Configuration scope \u2612 parameter \u2612 general \u2612 steps \u2612 stages Resource references none script \u00b6 The common script environment of the Jenkinsfile running. Typically the reference to the script calling the pipeline step is provided with the this parameter, as in script: this . This allows the function to access the commonPipelineEnvironment for retrieving, e.g. configuration parameters. back to overview Scope Details Aliases - Type Jenkins Script Mandatory yes Default Secret no Configuration scope \u2610 parameter \u2610 general \u2610 steps \u2610 stages Resource references none verbose \u00b6 verbose output back to overview Scope Details Aliases - Type bool Mandatory no Default false Possible values - true - false Secret no Configuration scope \u2612 parameter \u2612 general \u2612 steps \u2612 stages Resource references none cpiApiServiceKeyCredentialsId \u00b6 Jenkins secret text credential ID containing the service key to the Process Integration Runtime service instance of plan 'api' back to overview Scope Details Aliases - Type string Configuration scope \u2612 parameter \u2612 general \u2612 steps \u2612 stages Example \u00b6 Example configuration for the use in a Jenkinsfile . integrationArtifactDownload script: this Example for the use in a YAML configuration file (such as .pipeline/config.yaml ). steps : <...> integrationArtifactDownload : cpiApiServiceKeyCredentialsId : 'MY_API_SERVICE_KEY' integrationFlowId : 'MY_INTEGRATION_FLOW_NAME' integrationFlowVersion : 'MY_INTEGRATION_FLOW_VERSION' downloadPath : MY_INTEGRATION_FLOW_DOWNLOAD_PATH","title":"integrationArtifactDownload"},{"location":"steps/integrationArtifactDownload/#integrationartifactdownload","text":"Download integration flow runtime artefact","title":"integrationArtifactDownload"},{"location":"steps/integrationArtifactDownload/#description","text":"With this step you can download a integration flow runtime artifact, which returns a zip file with the integration flow contents in to current workspace using the OData API. Learn more about the SAP Cloud Integration remote API for downloading an integration flow artifact here .","title":"Description"},{"location":"steps/integrationArtifactDownload/#usage","text":"We recommend to define values of step parameters via .pipeline/config.yml file . In this case, calling the step is essentially reduced to defining the step name. Calling the step can be done either in an orchestrator specific way (e.g. via a Jenkins library step) or on the command line. Jenkins Command Line library ( 'piper-lib-os' ) integrationArtifactDownload script: this piper integrationArtifactDownload","title":"Usage"},{"location":"steps/integrationArtifactDownload/#prerequisites","text":"","title":"Prerequisites"},{"location":"steps/integrationArtifactDownload/#parameters","text":"","title":"Parameters"},{"location":"steps/integrationArtifactDownload/#overview-step","text":"Name Mandatory Additional information apiServiceKey (yes) pass via ENV or Jenkins credentials ( cpiApiServiceKeyCredentialsId ) downloadPath yes integrationFlowId yes integrationFlowVersion yes script (yes) reference to Jenkins main pipeline script verbose no activates debug output","title":"Overview - Step"},{"location":"steps/integrationArtifactDownload/#overview-execution-environment","text":"Orchestrator-specific only These parameters are relevant for orchestrator usage and not considered when using the command line option. Name Mandatory Additional information","title":"Overview - Execution Environment"},{"location":"steps/integrationArtifactDownload/#details","text":"","title":"Details"},{"location":"steps/integrationArtifactDownload/#apiservicekey","text":"Service key JSON string to access the Process Integration Runtime service instance of plan 'api' back to overview Scope Details Aliases - Type string Mandatory yes Default $PIPER_apiServiceKey (if set) Secret yes Configuration scope \u2612 parameter \u2610 general \u2610 steps \u2610 stages Resource references Jenkins credential id: id: cpiApiServiceKeyCredentialsId reference to: apiServiceKey","title":"apiServiceKey"},{"location":"steps/integrationArtifactDownload/#downloadpath","text":"Specifies integration artifact download location. back to overview Scope Details Aliases - Type string Mandatory yes Default $PIPER_downloadPath (if set) Secret no Configuration scope \u2612 parameter \u2610 general \u2612 steps \u2612 stages Resource references none","title":"downloadPath"},{"location":"steps/integrationArtifactDownload/#integrationflowid","text":"Specifies the ID of the Integration Flow artifact back to overview Scope Details Aliases - Type string Mandatory yes Default $PIPER_integrationFlowId (if set) Secret no Configuration scope \u2612 parameter \u2610 general \u2612 steps \u2612 stages Resource references none","title":"integrationFlowId"},{"location":"steps/integrationArtifactDownload/#integrationflowversion","text":"Specifies the version of the Integration Flow artifact back to overview Scope Details Aliases - Type string Mandatory yes Default $PIPER_integrationFlowVersion (if set) Secret no Configuration scope \u2612 parameter \u2612 general \u2612 steps \u2612 stages Resource references none","title":"integrationFlowVersion"},{"location":"steps/integrationArtifactDownload/#script","text":"The common script environment of the Jenkinsfile running. Typically the reference to the script calling the pipeline step is provided with the this parameter, as in script: this . This allows the function to access the commonPipelineEnvironment for retrieving, e.g. configuration parameters. back to overview Scope Details Aliases - Type Jenkins Script Mandatory yes Default Secret no Configuration scope \u2610 parameter \u2610 general \u2610 steps \u2610 stages Resource references none","title":"script"},{"location":"steps/integrationArtifactDownload/#verbose","text":"verbose output back to overview Scope Details Aliases - Type bool Mandatory no Default false Possible values - true - false Secret no Configuration scope \u2612 parameter \u2612 general \u2612 steps \u2612 stages Resource references none","title":"verbose"},{"location":"steps/integrationArtifactDownload/#cpiapiservicekeycredentialsid","text":"Jenkins secret text credential ID containing the service key to the Process Integration Runtime service instance of plan 'api' back to overview Scope Details Aliases - Type string Configuration scope \u2612 parameter \u2612 general \u2612 steps \u2612 stages","title":"cpiApiServiceKeyCredentialsId"},{"location":"steps/integrationArtifactDownload/#example","text":"Example configuration for the use in a Jenkinsfile . integrationArtifactDownload script: this Example for the use in a YAML configuration file (such as .pipeline/config.yaml ). steps : <...> integrationArtifactDownload : cpiApiServiceKeyCredentialsId : 'MY_API_SERVICE_KEY' integrationFlowId : 'MY_INTEGRATION_FLOW_NAME' integrationFlowVersion : 'MY_INTEGRATION_FLOW_VERSION' downloadPath : MY_INTEGRATION_FLOW_DOWNLOAD_PATH","title":"Example"},{"location":"steps/integrationArtifactGetMplStatus/","text":"integrationArtifactGetMplStatus \u00b6 Get the MPL status of an integration flow Description \u00b6 With this step you can obtain information about the Message Processing Log (MPL) status of integration flow using OData API. Learn more about the SAP Cloud Integration remote API for getting MPL status messages processed of an deployed integration artifact here . Usage \u00b6 We recommend to define values of step parameters via .pipeline/config.yml file . In this case, calling the step is essentially reduced to defining the step name. Calling the step can be done either in an orchestrator specific way (e.g. via a Jenkins library step) or on the command line. Jenkins Command Line library ( 'piper-lib-os' ) integrationArtifactGetMplStatus script: this piper integrationArtifactGetMplStatus Outputs \u00b6 Output type Details commonPipelineEnvironment custom/integrationFlowMplStatus custom/integrationFlowMplError Prerequisites \u00b6 Parameters \u00b6 Overview - Step \u00b6 Name Mandatory Additional information apiServiceKey (yes) pass via ENV or Jenkins credentials ( cpiApiServiceKeyCredentialsId ) integrationFlowId yes script (yes) reference to Jenkins main pipeline script verbose no activates debug output Overview - Execution Environment \u00b6 Orchestrator-specific only These parameters are relevant for orchestrator usage and not considered when using the command line option. Name Mandatory Additional information Details \u00b6 apiServiceKey \u00b6 Service key JSON string to access the Process Integration Runtime service instance of plan 'api' back to overview Scope Details Aliases - Type string Mandatory yes Default $PIPER_apiServiceKey (if set) Secret yes Configuration scope \u2612 parameter \u2610 general \u2610 steps \u2610 stages Resource references Jenkins credential id: id: cpiApiServiceKeyCredentialsId reference to: apiServiceKey integrationFlowId \u00b6 Specifies the ID of the Integration Flow artifact back to overview Scope Details Aliases - Type string Mandatory yes Default $PIPER_integrationFlowId (if set) Secret no Configuration scope \u2612 parameter \u2612 general \u2612 steps \u2612 stages Resource references none script \u00b6 The common script environment of the Jenkinsfile running. Typically the reference to the script calling the pipeline step is provided with the this parameter, as in script: this . This allows the function to access the commonPipelineEnvironment for retrieving, e.g. configuration parameters. back to overview Scope Details Aliases - Type Jenkins Script Mandatory yes Default Secret no Configuration scope \u2610 parameter \u2610 general \u2610 steps \u2610 stages Resource references none verbose \u00b6 verbose output back to overview Scope Details Aliases - Type bool Mandatory no Default false Possible values - true - false Secret no Configuration scope \u2612 parameter \u2612 general \u2612 steps \u2612 stages Resource references none cpiApiServiceKeyCredentialsId \u00b6 Jenkins secret text credential ID containing the service key to the Process Integration Runtime service instance of plan 'api' back to overview Scope Details Aliases - Type string Configuration scope \u2612 parameter \u2612 general \u2612 steps \u2612 stages Example \u00b6 Example configuration for the use in a Jenkinsfile . integrationArtifactGetMplStatus script: this Example for the use in a YAML configuration file (such as .pipeline/config.yaml ). steps : <...> integrationArtifactGetMplStatus : cpiApiServiceKeyCredentialsId : 'MY_API_SERVICE_KEY' integrationFlowId : 'INTEGRATION_FLOW_ID' platform : cf","title":"integrationArtifactGetMplStatus"},{"location":"steps/integrationArtifactGetMplStatus/#integrationartifactgetmplstatus","text":"Get the MPL status of an integration flow","title":"integrationArtifactGetMplStatus"},{"location":"steps/integrationArtifactGetMplStatus/#description","text":"With this step you can obtain information about the Message Processing Log (MPL) status of integration flow using OData API. Learn more about the SAP Cloud Integration remote API for getting MPL status messages processed of an deployed integration artifact here .","title":"Description"},{"location":"steps/integrationArtifactGetMplStatus/#usage","text":"We recommend to define values of step parameters via .pipeline/config.yml file . In this case, calling the step is essentially reduced to defining the step name. Calling the step can be done either in an orchestrator specific way (e.g. via a Jenkins library step) or on the command line. Jenkins Command Line library ( 'piper-lib-os' ) integrationArtifactGetMplStatus script: this piper integrationArtifactGetMplStatus","title":"Usage"},{"location":"steps/integrationArtifactGetMplStatus/#outputs","text":"Output type Details commonPipelineEnvironment custom/integrationFlowMplStatus custom/integrationFlowMplError","title":"Outputs"},{"location":"steps/integrationArtifactGetMplStatus/#prerequisites","text":"","title":"Prerequisites"},{"location":"steps/integrationArtifactGetMplStatus/#parameters","text":"","title":"Parameters"},{"location":"steps/integrationArtifactGetMplStatus/#overview-step","text":"Name Mandatory Additional information apiServiceKey (yes) pass via ENV or Jenkins credentials ( cpiApiServiceKeyCredentialsId ) integrationFlowId yes script (yes) reference to Jenkins main pipeline script verbose no activates debug output","title":"Overview - Step"},{"location":"steps/integrationArtifactGetMplStatus/#overview-execution-environment","text":"Orchestrator-specific only These parameters are relevant for orchestrator usage and not considered when using the command line option. Name Mandatory Additional information","title":"Overview - Execution Environment"},{"location":"steps/integrationArtifactGetMplStatus/#details","text":"","title":"Details"},{"location":"steps/integrationArtifactGetMplStatus/#apiservicekey","text":"Service key JSON string to access the Process Integration Runtime service instance of plan 'api' back to overview Scope Details Aliases - Type string Mandatory yes Default $PIPER_apiServiceKey (if set) Secret yes Configuration scope \u2612 parameter \u2610 general \u2610 steps \u2610 stages Resource references Jenkins credential id: id: cpiApiServiceKeyCredentialsId reference to: apiServiceKey","title":"apiServiceKey"},{"location":"steps/integrationArtifactGetMplStatus/#integrationflowid","text":"Specifies the ID of the Integration Flow artifact back to overview Scope Details Aliases - Type string Mandatory yes Default $PIPER_integrationFlowId (if set) Secret no Configuration scope \u2612 parameter \u2612 general \u2612 steps \u2612 stages Resource references none","title":"integrationFlowId"},{"location":"steps/integrationArtifactGetMplStatus/#script","text":"The common script environment of the Jenkinsfile running. Typically the reference to the script calling the pipeline step is provided with the this parameter, as in script: this . This allows the function to access the commonPipelineEnvironment for retrieving, e.g. configuration parameters. back to overview Scope Details Aliases - Type Jenkins Script Mandatory yes Default Secret no Configuration scope \u2610 parameter \u2610 general \u2610 steps \u2610 stages Resource references none","title":"script"},{"location":"steps/integrationArtifactGetMplStatus/#verbose","text":"verbose output back to overview Scope Details Aliases - Type bool Mandatory no Default false Possible values - true - false Secret no Configuration scope \u2612 parameter \u2612 general \u2612 steps \u2612 stages Resource references none","title":"verbose"},{"location":"steps/integrationArtifactGetMplStatus/#cpiapiservicekeycredentialsid","text":"Jenkins secret text credential ID containing the service key to the Process Integration Runtime service instance of plan 'api' back to overview Scope Details Aliases - Type string Configuration scope \u2612 parameter \u2612 general \u2612 steps \u2612 stages","title":"cpiApiServiceKeyCredentialsId"},{"location":"steps/integrationArtifactGetMplStatus/#example","text":"Example configuration for the use in a Jenkinsfile . integrationArtifactGetMplStatus script: this Example for the use in a YAML configuration file (such as .pipeline/config.yaml ). steps : <...> integrationArtifactGetMplStatus : cpiApiServiceKeyCredentialsId : 'MY_API_SERVICE_KEY' integrationFlowId : 'INTEGRATION_FLOW_ID' platform : cf","title":"Example"},{"location":"steps/integrationArtifactGetServiceEndpoint/","text":"integrationArtifactGetServiceEndpoint \u00b6 Get an deployed CPI intgeration flow service endpoint Description \u00b6 With this step you can obtain information about the service endpoints exposed by SAP BTP Integration on a tenant using OData API. Learn more about the SAP Cloud Integration remote API for getting service endpoint of deployed integration artifact here . Usage \u00b6 We recommend to define values of step parameters via .pipeline/config.yml file . In this case, calling the step is essentially reduced to defining the step name. Calling the step can be done either in an orchestrator specific way (e.g. via a Jenkins library step) or on the command line. Jenkins Command Line library ( 'piper-lib-os' ) integrationArtifactGetServiceEndpoint script: this piper integrationArtifactGetServiceEndpoint Outputs \u00b6 Output type Details commonPipelineEnvironment custom/integrationFlowServiceEndpoint Prerequisites \u00b6 Parameters \u00b6 Overview - Step \u00b6 Name Mandatory Additional information apiServiceKey (yes) pass via ENV or Jenkins credentials ( cpiApiServiceKeyCredentialsId ) integrationFlowId yes script (yes) reference to Jenkins main pipeline script verbose no activates debug output Overview - Execution Environment \u00b6 Orchestrator-specific only These parameters are relevant for orchestrator usage and not considered when using the command line option. Name Mandatory Additional information Details \u00b6 apiServiceKey \u00b6 Service key JSON string to access the Process Integration Runtime service instance of plan 'api' back to overview Scope Details Aliases - Type string Mandatory yes Default $PIPER_apiServiceKey (if set) Secret yes Configuration scope \u2612 parameter \u2610 general \u2610 steps \u2610 stages Resource references Jenkins credential id: id: cpiApiServiceKeyCredentialsId reference to: apiServiceKey integrationFlowId \u00b6 Specifies the ID of the Integration Flow artifact back to overview Scope Details Aliases - Type string Mandatory yes Default $PIPER_integrationFlowId (if set) Secret no Configuration scope \u2612 parameter \u2612 general \u2612 steps \u2612 stages Resource references none script \u00b6 The common script environment of the Jenkinsfile running. Typically the reference to the script calling the pipeline step is provided with the this parameter, as in script: this . This allows the function to access the commonPipelineEnvironment for retrieving, e.g. configuration parameters. back to overview Scope Details Aliases - Type Jenkins Script Mandatory yes Default Secret no Configuration scope \u2610 parameter \u2610 general \u2610 steps \u2610 stages Resource references none verbose \u00b6 verbose output back to overview Scope Details Aliases - Type bool Mandatory no Default false Possible values - true - false Secret no Configuration scope \u2612 parameter \u2612 general \u2612 steps \u2612 stages Resource references none cpiApiServiceKeyCredentialsId \u00b6 Jenkins secret text credential ID containing the service key to the Process Integration Runtime service instance of plan 'api' back to overview Scope Details Aliases - Type string Configuration scope \u2612 parameter \u2612 general \u2612 steps \u2612 stages Example \u00b6 Example configuration for the use in a Jenkinsfile . integrationArtifactGetServiceEndpoint script: this Example for the use in a YAML configuration file (such as .pipeline/config.yaml ). steps : <...> integrationArtifactGetServiceEndpoint : cpiApiServiceKeyCredentialsId : 'MY_API_SERVICE_KEY' integrationFlowId : 'MY_INTEGRATION_FLOW_ID'","title":"integrationArtifactGetServiceEndpoint"},{"location":"steps/integrationArtifactGetServiceEndpoint/#integrationartifactgetserviceendpoint","text":"Get an deployed CPI intgeration flow service endpoint","title":"integrationArtifactGetServiceEndpoint"},{"location":"steps/integrationArtifactGetServiceEndpoint/#description","text":"With this step you can obtain information about the service endpoints exposed by SAP BTP Integration on a tenant using OData API. Learn more about the SAP Cloud Integration remote API for getting service endpoint of deployed integration artifact here .","title":"Description"},{"location":"steps/integrationArtifactGetServiceEndpoint/#usage","text":"We recommend to define values of step parameters via .pipeline/config.yml file . In this case, calling the step is essentially reduced to defining the step name. Calling the step can be done either in an orchestrator specific way (e.g. via a Jenkins library step) or on the command line. Jenkins Command Line library ( 'piper-lib-os' ) integrationArtifactGetServiceEndpoint script: this piper integrationArtifactGetServiceEndpoint","title":"Usage"},{"location":"steps/integrationArtifactGetServiceEndpoint/#outputs","text":"Output type Details commonPipelineEnvironment custom/integrationFlowServiceEndpoint","title":"Outputs"},{"location":"steps/integrationArtifactGetServiceEndpoint/#prerequisites","text":"","title":"Prerequisites"},{"location":"steps/integrationArtifactGetServiceEndpoint/#parameters","text":"","title":"Parameters"},{"location":"steps/integrationArtifactGetServiceEndpoint/#overview-step","text":"Name Mandatory Additional information apiServiceKey (yes) pass via ENV or Jenkins credentials ( cpiApiServiceKeyCredentialsId ) integrationFlowId yes script (yes) reference to Jenkins main pipeline script verbose no activates debug output","title":"Overview - Step"},{"location":"steps/integrationArtifactGetServiceEndpoint/#overview-execution-environment","text":"Orchestrator-specific only These parameters are relevant for orchestrator usage and not considered when using the command line option. Name Mandatory Additional information","title":"Overview - Execution Environment"},{"location":"steps/integrationArtifactGetServiceEndpoint/#details","text":"","title":"Details"},{"location":"steps/integrationArtifactGetServiceEndpoint/#apiservicekey","text":"Service key JSON string to access the Process Integration Runtime service instance of plan 'api' back to overview Scope Details Aliases - Type string Mandatory yes Default $PIPER_apiServiceKey (if set) Secret yes Configuration scope \u2612 parameter \u2610 general \u2610 steps \u2610 stages Resource references Jenkins credential id: id: cpiApiServiceKeyCredentialsId reference to: apiServiceKey","title":"apiServiceKey"},{"location":"steps/integrationArtifactGetServiceEndpoint/#integrationflowid","text":"Specifies the ID of the Integration Flow artifact back to overview Scope Details Aliases - Type string Mandatory yes Default $PIPER_integrationFlowId (if set) Secret no Configuration scope \u2612 parameter \u2612 general \u2612 steps \u2612 stages Resource references none","title":"integrationFlowId"},{"location":"steps/integrationArtifactGetServiceEndpoint/#script","text":"The common script environment of the Jenkinsfile running. Typically the reference to the script calling the pipeline step is provided with the this parameter, as in script: this . This allows the function to access the commonPipelineEnvironment for retrieving, e.g. configuration parameters. back to overview Scope Details Aliases - Type Jenkins Script Mandatory yes Default Secret no Configuration scope \u2610 parameter \u2610 general \u2610 steps \u2610 stages Resource references none","title":"script"},{"location":"steps/integrationArtifactGetServiceEndpoint/#verbose","text":"verbose output back to overview Scope Details Aliases - Type bool Mandatory no Default false Possible values - true - false Secret no Configuration scope \u2612 parameter \u2612 general \u2612 steps \u2612 stages Resource references none","title":"verbose"},{"location":"steps/integrationArtifactGetServiceEndpoint/#cpiapiservicekeycredentialsid","text":"Jenkins secret text credential ID containing the service key to the Process Integration Runtime service instance of plan 'api' back to overview Scope Details Aliases - Type string Configuration scope \u2612 parameter \u2612 general \u2612 steps \u2612 stages","title":"cpiApiServiceKeyCredentialsId"},{"location":"steps/integrationArtifactGetServiceEndpoint/#example","text":"Example configuration for the use in a Jenkinsfile . integrationArtifactGetServiceEndpoint script: this Example for the use in a YAML configuration file (such as .pipeline/config.yaml ). steps : <...> integrationArtifactGetServiceEndpoint : cpiApiServiceKeyCredentialsId : 'MY_API_SERVICE_KEY' integrationFlowId : 'MY_INTEGRATION_FLOW_ID'","title":"Example"},{"location":"steps/integrationArtifactResource/","text":"integrationArtifactResource \u00b6 Add, Delete or Update an resource file of integration flow designtime artifact Description \u00b6 With this step you can either add, delete or update a resource of integration flow designtime artifact using the OData API. Learn more about the SAP Cloud Integration remote API for managing an resource of integration flow artifact here . Usage \u00b6 We recommend to define values of step parameters via .pipeline/config.yml file . In this case, calling the step is essentially reduced to defining the step name. Calling the step can be done either in an orchestrator specific way (e.g. via a Jenkins library step) or on the command line. Jenkins Command Line library ( 'piper-lib-os' ) integrationArtifactResource script: this piper integrationArtifactResource Prerequisites \u00b6 Parameters \u00b6 Overview - Step \u00b6 Name Mandatory Additional information apiServiceKey (yes) pass via ENV or Jenkins credentials ( cpiApiServiceKeyCredentialsId ) integrationFlowId yes operation yes resourcePath yes script (yes) reference to Jenkins main pipeline script verbose no activates debug output Overview - Execution Environment \u00b6 Orchestrator-specific only These parameters are relevant for orchestrator usage and not considered when using the command line option. Name Mandatory Additional information Details \u00b6 apiServiceKey \u00b6 Service key JSON string to access the Process Integration Runtime service instance of plan 'api' back to overview Scope Details Aliases - Type string Mandatory yes Default $PIPER_apiServiceKey (if set) Secret yes Configuration scope \u2612 parameter \u2610 general \u2610 steps \u2610 stages Resource references Jenkins credential id: id: cpiApiServiceKeyCredentialsId reference to: apiServiceKey integrationFlowId \u00b6 Specifies the ID of the Integration Flow artifact back to overview Scope Details Aliases - Type string Mandatory yes Default $PIPER_integrationFlowId (if set) Secret no Configuration scope \u2612 parameter \u2612 general \u2612 steps \u2612 stages Resource references none operation \u00b6 Specifies the operation(create/update/delete) for resource file of the Integration Flow artifact back to overview Scope Details Aliases - Type string Mandatory yes Default $PIPER_operation (if set) Possible values - create - update - delete Secret no Configuration scope \u2612 parameter \u2610 general \u2612 steps \u2612 stages Resource references none resourcePath \u00b6 Specifies integration artifact resource file relative path. back to overview Scope Details Aliases - Type string Mandatory yes Default $PIPER_resourcePath (if set) Secret no Configuration scope \u2612 parameter \u2610 general \u2612 steps \u2612 stages Resource references none script \u00b6 The common script environment of the Jenkinsfile running. Typically the reference to the script calling the pipeline step is provided with the this parameter, as in script: this . This allows the function to access the commonPipelineEnvironment for retrieving, e.g. configuration parameters. back to overview Scope Details Aliases - Type Jenkins Script Mandatory yes Default Secret no Configuration scope \u2610 parameter \u2610 general \u2610 steps \u2610 stages Resource references none verbose \u00b6 verbose output back to overview Scope Details Aliases - Type bool Mandatory no Default false Possible values - true - false Secret no Configuration scope \u2612 parameter \u2612 general \u2612 steps \u2612 stages Resource references none cpiApiServiceKeyCredentialsId \u00b6 Jenkins secret text credential ID containing the service key to the Process Integration Runtime service instance of plan 'api' back to overview Scope Details Aliases - Type string Configuration scope \u2612 parameter \u2612 general \u2612 steps \u2612 stages Example \u00b6 Example configuration for the use in a Jenkinsfile . integrationArtifactUpload script: this Example for the use in a YAML configuration file (such as .pipeline/config.yaml ). steps : <...> integrationArtifactResource : cpiApiServiceKeyCredentialsId : 'MY_API_SERVICE_KEY' integrationFlowId : 'MY_INTEGRATION_FLOW_ID' operation : 'Create_OR_Modify_Delete_INTEGRATION_FLOW_Artifact_Resource' resourcePath : 'MY_INTEGRATION_FLOW_Artifact_Resource_Relative_Path'","title":"integrationArtifactResource"},{"location":"steps/integrationArtifactResource/#integrationartifactresource","text":"Add, Delete or Update an resource file of integration flow designtime artifact","title":"integrationArtifactResource"},{"location":"steps/integrationArtifactResource/#description","text":"With this step you can either add, delete or update a resource of integration flow designtime artifact using the OData API. Learn more about the SAP Cloud Integration remote API for managing an resource of integration flow artifact here .","title":"Description"},{"location":"steps/integrationArtifactResource/#usage","text":"We recommend to define values of step parameters via .pipeline/config.yml file . In this case, calling the step is essentially reduced to defining the step name. Calling the step can be done either in an orchestrator specific way (e.g. via a Jenkins library step) or on the command line. Jenkins Command Line library ( 'piper-lib-os' ) integrationArtifactResource script: this piper integrationArtifactResource","title":"Usage"},{"location":"steps/integrationArtifactResource/#prerequisites","text":"","title":"Prerequisites"},{"location":"steps/integrationArtifactResource/#parameters","text":"","title":"Parameters"},{"location":"steps/integrationArtifactResource/#overview-step","text":"Name Mandatory Additional information apiServiceKey (yes) pass via ENV or Jenkins credentials ( cpiApiServiceKeyCredentialsId ) integrationFlowId yes operation yes resourcePath yes script (yes) reference to Jenkins main pipeline script verbose no activates debug output","title":"Overview - Step"},{"location":"steps/integrationArtifactResource/#overview-execution-environment","text":"Orchestrator-specific only These parameters are relevant for orchestrator usage and not considered when using the command line option. Name Mandatory Additional information","title":"Overview - Execution Environment"},{"location":"steps/integrationArtifactResource/#details","text":"","title":"Details"},{"location":"steps/integrationArtifactResource/#apiservicekey","text":"Service key JSON string to access the Process Integration Runtime service instance of plan 'api' back to overview Scope Details Aliases - Type string Mandatory yes Default $PIPER_apiServiceKey (if set) Secret yes Configuration scope \u2612 parameter \u2610 general \u2610 steps \u2610 stages Resource references Jenkins credential id: id: cpiApiServiceKeyCredentialsId reference to: apiServiceKey","title":"apiServiceKey"},{"location":"steps/integrationArtifactResource/#integrationflowid","text":"Specifies the ID of the Integration Flow artifact back to overview Scope Details Aliases - Type string Mandatory yes Default $PIPER_integrationFlowId (if set) Secret no Configuration scope \u2612 parameter \u2612 general \u2612 steps \u2612 stages Resource references none","title":"integrationFlowId"},{"location":"steps/integrationArtifactResource/#operation","text":"Specifies the operation(create/update/delete) for resource file of the Integration Flow artifact back to overview Scope Details Aliases - Type string Mandatory yes Default $PIPER_operation (if set) Possible values - create - update - delete Secret no Configuration scope \u2612 parameter \u2610 general \u2612 steps \u2612 stages Resource references none","title":"operation"},{"location":"steps/integrationArtifactResource/#resourcepath","text":"Specifies integration artifact resource file relative path. back to overview Scope Details Aliases - Type string Mandatory yes Default $PIPER_resourcePath (if set) Secret no Configuration scope \u2612 parameter \u2610 general \u2612 steps \u2612 stages Resource references none","title":"resourcePath"},{"location":"steps/integrationArtifactResource/#script","text":"The common script environment of the Jenkinsfile running. Typically the reference to the script calling the pipeline step is provided with the this parameter, as in script: this . This allows the function to access the commonPipelineEnvironment for retrieving, e.g. configuration parameters. back to overview Scope Details Aliases - Type Jenkins Script Mandatory yes Default Secret no Configuration scope \u2610 parameter \u2610 general \u2610 steps \u2610 stages Resource references none","title":"script"},{"location":"steps/integrationArtifactResource/#verbose","text":"verbose output back to overview Scope Details Aliases - Type bool Mandatory no Default false Possible values - true - false Secret no Configuration scope \u2612 parameter \u2612 general \u2612 steps \u2612 stages Resource references none","title":"verbose"},{"location":"steps/integrationArtifactResource/#cpiapiservicekeycredentialsid","text":"Jenkins secret text credential ID containing the service key to the Process Integration Runtime service instance of plan 'api' back to overview Scope Details Aliases - Type string Configuration scope \u2612 parameter \u2612 general \u2612 steps \u2612 stages","title":"cpiApiServiceKeyCredentialsId"},{"location":"steps/integrationArtifactResource/#example","text":"Example configuration for the use in a Jenkinsfile . integrationArtifactUpload script: this Example for the use in a YAML configuration file (such as .pipeline/config.yaml ). steps : <...> integrationArtifactResource : cpiApiServiceKeyCredentialsId : 'MY_API_SERVICE_KEY' integrationFlowId : 'MY_INTEGRATION_FLOW_ID' operation : 'Create_OR_Modify_Delete_INTEGRATION_FLOW_Artifact_Resource' resourcePath : 'MY_INTEGRATION_FLOW_Artifact_Resource_Relative_Path'","title":"Example"},{"location":"steps/integrationArtifactTransport/","text":"integrationArtifactTransport \u00b6 Integration Package transport using the SAP Content Agent Service Description \u00b6 With this step you can trigger an Integration Package transport from SAP Integration Suite using SAP Content Agent Service and SAP Cloud Transport Management Service. For more information about doing an Integration Package transport using SAP Content Agent Service see the documentation here . Usage \u00b6 We recommend to define values of step parameters via .pipeline/config.yml file . In this case, calling the step is essentially reduced to defining the step name. Calling the step can be done either in an orchestrator specific way (e.g. via a Jenkins library step) or on the command line. Jenkins Command Line library ( 'piper-lib-os' ) integrationArtifactTransport script: this piper integrationArtifactTransport With this step, you can transport Integration Packages from SAP Integration Suite across various landscapes using SAP Content Agent Service. SAP Integration Suite provides the ability to transport its content to other services. SAP Content Agent service enables you to assemble the content from various content providers (including SAP Integration Suite) in MTAR format. Later, this content is either available for download or can be exported to a configured transport queue, such as SAP Cloud Transport Management. This step, integrationArtifactTransport, only supports transporting Integration Packages from SAP Integration Suite. For more information on configurations required for SAP Integration Suite, see Content Assembly for SAP Integration Suite To use the integrationArtifactTransport step, proceed as follows: Create SAP Content Agent Service Destination . Create Cloud Integration Destination . Create SAP Cloud Transport Management Destination . Transport Cloud Integration Content with SAP Content Agent Service as explained in the blog TMS \u2013 Transport SAP Cloud Integration (CI/CPI) Content with Transport Management Service (TMS) and Content Agent Service (CAS) integrationArtifactTransport step only supports Integration Package transport Prerequisites \u00b6 Parameters \u00b6 Overview - Step \u00b6 Name Mandatory Additional information casServiceKey (yes) pass via ENV or Jenkins credentials ( casApiServiceKeyCredentialsId ) integrationPackageId yes name yes resourceID yes script (yes) reference to Jenkins main pipeline script version yes verbose no activates debug output Overview - Execution Environment \u00b6 Orchestrator-specific only These parameters are relevant for orchestrator usage and not considered when using the command line option. Name Mandatory Additional information Details \u00b6 casServiceKey \u00b6 Service key JSON string to access the CAS service instance back to overview Scope Details Aliases - Type string Mandatory yes Default $PIPER_casServiceKey (if set) Secret yes Configuration scope \u2612 parameter \u2610 general \u2610 steps \u2610 stages Resource references Jenkins credential id: id: casApiServiceKeyCredentialsId reference to: casServiceKey integrationPackageId \u00b6 Specifies the ID of the integration package artifact. back to overview Scope Details Aliases - Type string Mandatory yes Default $PIPER_integrationPackageId (if set) Secret no Configuration scope \u2612 parameter \u2612 general \u2612 steps \u2612 stages Resource references none name \u00b6 Specifies the name of the integration package artifact. back to overview Scope Details Aliases - Type string Mandatory yes Default $PIPER_name (if set) Secret no Configuration scope \u2612 parameter \u2612 general \u2612 steps \u2612 stages Resource references none resourceID \u00b6 Specifies the technical ID of the integration package artifact. back to overview Scope Details Aliases - Type string Mandatory yes Default $PIPER_resourceID (if set) Secret no Configuration scope \u2612 parameter \u2612 general \u2612 steps \u2612 stages Resource references none script \u00b6 The common script environment of the Jenkinsfile running. Typically the reference to the script calling the pipeline step is provided with the this parameter, as in script: this . This allows the function to access the commonPipelineEnvironment for retrieving, e.g. configuration parameters. back to overview Scope Details Aliases - Type Jenkins Script Mandatory yes Default Secret no Configuration scope \u2610 parameter \u2610 general \u2610 steps \u2610 stages Resource references none verbose \u00b6 verbose output back to overview Scope Details Aliases - Type bool Mandatory no Default false Possible values - true - false Secret no Configuration scope \u2612 parameter \u2612 general \u2612 steps \u2612 stages Resource references none version \u00b6 Specifies the version of the Integration Package artifact. back to overview Scope Details Aliases - Type string Mandatory yes Default $PIPER_version (if set) Secret no Configuration scope \u2612 parameter \u2612 general \u2612 steps \u2612 stages Resource references none casApiServiceKeyCredentialsId \u00b6 Jenkins secret text credential ID containing the service key to the CAS service instance back to overview Scope Details Aliases - Type string Configuration scope \u2612 parameter \u2612 general \u2612 steps \u2612 stages Example \u00b6 Configuration example for a Jenkinsfile : integrationArtifactTransport script: this Configuration example for a YAML file (for example .pipeline/config.yaml ): steps : <...> integrationArtifactTransport : casApiServiceKeyCredentialsId : 'MY_API_SERVICE_KEY' integrationPackageId : MY_INTEGRATION_PACKAGE_ID resourceID : MY_INTEGRATION_RESOURCE_ID name : MY_INTEGRATION_PACKAGE_NAME version : MY_INTEGRATION_PACKAGE_VERSION","title":"integrationArtifactTransport"},{"location":"steps/integrationArtifactTransport/#integrationartifacttransport","text":"Integration Package transport using the SAP Content Agent Service","title":"integrationArtifactTransport"},{"location":"steps/integrationArtifactTransport/#description","text":"With this step you can trigger an Integration Package transport from SAP Integration Suite using SAP Content Agent Service and SAP Cloud Transport Management Service. For more information about doing an Integration Package transport using SAP Content Agent Service see the documentation here .","title":"Description"},{"location":"steps/integrationArtifactTransport/#usage","text":"We recommend to define values of step parameters via .pipeline/config.yml file . In this case, calling the step is essentially reduced to defining the step name. Calling the step can be done either in an orchestrator specific way (e.g. via a Jenkins library step) or on the command line. Jenkins Command Line library ( 'piper-lib-os' ) integrationArtifactTransport script: this piper integrationArtifactTransport With this step, you can transport Integration Packages from SAP Integration Suite across various landscapes using SAP Content Agent Service. SAP Integration Suite provides the ability to transport its content to other services. SAP Content Agent service enables you to assemble the content from various content providers (including SAP Integration Suite) in MTAR format. Later, this content is either available for download or can be exported to a configured transport queue, such as SAP Cloud Transport Management. This step, integrationArtifactTransport, only supports transporting Integration Packages from SAP Integration Suite. For more information on configurations required for SAP Integration Suite, see Content Assembly for SAP Integration Suite To use the integrationArtifactTransport step, proceed as follows: Create SAP Content Agent Service Destination . Create Cloud Integration Destination . Create SAP Cloud Transport Management Destination . Transport Cloud Integration Content with SAP Content Agent Service as explained in the blog TMS \u2013 Transport SAP Cloud Integration (CI/CPI) Content with Transport Management Service (TMS) and Content Agent Service (CAS) integrationArtifactTransport step only supports Integration Package transport","title":"Usage"},{"location":"steps/integrationArtifactTransport/#prerequisites","text":"","title":"Prerequisites"},{"location":"steps/integrationArtifactTransport/#parameters","text":"","title":"Parameters"},{"location":"steps/integrationArtifactTransport/#overview-step","text":"Name Mandatory Additional information casServiceKey (yes) pass via ENV or Jenkins credentials ( casApiServiceKeyCredentialsId ) integrationPackageId yes name yes resourceID yes script (yes) reference to Jenkins main pipeline script version yes verbose no activates debug output","title":"Overview - Step"},{"location":"steps/integrationArtifactTransport/#overview-execution-environment","text":"Orchestrator-specific only These parameters are relevant for orchestrator usage and not considered when using the command line option. Name Mandatory Additional information","title":"Overview - Execution Environment"},{"location":"steps/integrationArtifactTransport/#details","text":"","title":"Details"},{"location":"steps/integrationArtifactTransport/#casservicekey","text":"Service key JSON string to access the CAS service instance back to overview Scope Details Aliases - Type string Mandatory yes Default $PIPER_casServiceKey (if set) Secret yes Configuration scope \u2612 parameter \u2610 general \u2610 steps \u2610 stages Resource references Jenkins credential id: id: casApiServiceKeyCredentialsId reference to: casServiceKey","title":"casServiceKey"},{"location":"steps/integrationArtifactTransport/#integrationpackageid","text":"Specifies the ID of the integration package artifact. back to overview Scope Details Aliases - Type string Mandatory yes Default $PIPER_integrationPackageId (if set) Secret no Configuration scope \u2612 parameter \u2612 general \u2612 steps \u2612 stages Resource references none","title":"integrationPackageId"},{"location":"steps/integrationArtifactTransport/#name","text":"Specifies the name of the integration package artifact. back to overview Scope Details Aliases - Type string Mandatory yes Default $PIPER_name (if set) Secret no Configuration scope \u2612 parameter \u2612 general \u2612 steps \u2612 stages Resource references none","title":"name"},{"location":"steps/integrationArtifactTransport/#resourceid","text":"Specifies the technical ID of the integration package artifact. back to overview Scope Details Aliases - Type string Mandatory yes Default $PIPER_resourceID (if set) Secret no Configuration scope \u2612 parameter \u2612 general \u2612 steps \u2612 stages Resource references none","title":"resourceID"},{"location":"steps/integrationArtifactTransport/#script","text":"The common script environment of the Jenkinsfile running. Typically the reference to the script calling the pipeline step is provided with the this parameter, as in script: this . This allows the function to access the commonPipelineEnvironment for retrieving, e.g. configuration parameters. back to overview Scope Details Aliases - Type Jenkins Script Mandatory yes Default Secret no Configuration scope \u2610 parameter \u2610 general \u2610 steps \u2610 stages Resource references none","title":"script"},{"location":"steps/integrationArtifactTransport/#verbose","text":"verbose output back to overview Scope Details Aliases - Type bool Mandatory no Default false Possible values - true - false Secret no Configuration scope \u2612 parameter \u2612 general \u2612 steps \u2612 stages Resource references none","title":"verbose"},{"location":"steps/integrationArtifactTransport/#version","text":"Specifies the version of the Integration Package artifact. back to overview Scope Details Aliases - Type string Mandatory yes Default $PIPER_version (if set) Secret no Configuration scope \u2612 parameter \u2612 general \u2612 steps \u2612 stages Resource references none","title":"version"},{"location":"steps/integrationArtifactTransport/#casapiservicekeycredentialsid","text":"Jenkins secret text credential ID containing the service key to the CAS service instance back to overview Scope Details Aliases - Type string Configuration scope \u2612 parameter \u2612 general \u2612 steps \u2612 stages","title":"casApiServiceKeyCredentialsId"},{"location":"steps/integrationArtifactTransport/#example","text":"Configuration example for a Jenkinsfile : integrationArtifactTransport script: this Configuration example for a YAML file (for example .pipeline/config.yaml ): steps : <...> integrationArtifactTransport : casApiServiceKeyCredentialsId : 'MY_API_SERVICE_KEY' integrationPackageId : MY_INTEGRATION_PACKAGE_ID resourceID : MY_INTEGRATION_RESOURCE_ID name : MY_INTEGRATION_PACKAGE_NAME version : MY_INTEGRATION_PACKAGE_VERSION","title":"Example"},{"location":"steps/integrationArtifactTriggerIntegrationTest/","text":"integrationArtifactTriggerIntegrationTest \u00b6 Test the service endpoint of your iFlow Description \u00b6 With this step you can test your intergration flow exposed by SAP BTP Integration on a tenant using OData API.Learn more about the SAP Cloud Integration remote API for getting service endpoint of deployed integration artifact here . Usage \u00b6 We recommend to define values of step parameters via .pipeline/config.yml file . In this case, calling the step is essentially reduced to defining the step name. Calling the step can be done either in an orchestrator specific way (e.g. via a Jenkins library step) or on the command line. Jenkins Command Line library ( 'piper-lib-os' ) integrationArtifactTriggerIntegrationTest script: this piper integrationArtifactTriggerIntegrationTest Outputs \u00b6 Output type Details commonPipelineEnvironment custom/integrationFlowTriggerIntegrationTestResponseBody custom/integrationFlowTriggerIntegrationTestResponseHeaders Parameters \u00b6 Overview - Step \u00b6 Name Mandatory Additional information integrationFlowId yes integrationFlowServiceEndpointUrl yes integrationFlowServiceKey (yes) pass via ENV or Jenkins credentials ( integrationFlowServiceKeyCredentialsId ) script (yes) reference to Jenkins main pipeline script contentType no messageBodyPath no verbose no activates debug output Overview - Execution Environment \u00b6 Orchestrator-specific only These parameters are relevant for orchestrator usage and not considered when using the command line option. Name Mandatory Additional information Details \u00b6 contentType \u00b6 Specifies the content type of the file defined in messageBodyPath e.g. application/json back to overview Scope Details Aliases - Type string Mandatory no Default $PIPER_contentType (if set) Secret no Configuration scope \u2612 parameter \u2610 general \u2612 steps \u2612 stages Resource references none integrationFlowId \u00b6 Specifies the ID of the Integration Flow artifact back to overview Scope Details Aliases - Type string Mandatory yes Default $PIPER_integrationFlowId (if set) Secret no Configuration scope \u2612 parameter \u2612 general \u2612 steps \u2612 stages Resource references none integrationFlowServiceEndpointUrl \u00b6 Specifies the URL endpoint of the iFlow. Please provide in the format <protocol>://<host>:<port> . Supported protocols are http and https . back to overview Scope Details Aliases - Type string Mandatory yes Default $PIPER_integrationFlowServiceEndpointUrl (if set) Secret no Configuration scope \u2612 parameter \u2610 general \u2610 steps \u2610 stages Resource references commonPipelineEnvironment : reference to: custom/integrationFlowServiceEndpoint integrationFlowServiceKey \u00b6 Service key JSON string to access the Process Integration Runtime service instance of plan 'integration-flow' back to overview Scope Details Aliases - Type string Mandatory yes Default $PIPER_integrationFlowServiceKey (if set) Secret yes Configuration scope \u2612 parameter \u2610 general \u2610 steps \u2610 stages Resource references Jenkins credential id: id: integrationFlowServiceKeyCredentialsId reference to: integrationFlowServiceKey messageBodyPath \u00b6 Speficfies the relative file path to the message body. back to overview Scope Details Aliases - Type string Mandatory no Default $PIPER_messageBodyPath (if set) Secret no Configuration scope \u2612 parameter \u2610 general \u2612 steps \u2612 stages Resource references none script \u00b6 The common script environment of the Jenkinsfile running. Typically the reference to the script calling the pipeline step is provided with the this parameter, as in script: this . This allows the function to access the commonPipelineEnvironment for retrieving, e.g. configuration parameters. back to overview Scope Details Aliases - Type Jenkins Script Mandatory yes Default Secret no Configuration scope \u2610 parameter \u2610 general \u2610 steps \u2610 stages Resource references none verbose \u00b6 verbose output back to overview Scope Details Aliases - Type bool Mandatory no Default false Possible values - true - false Secret no Configuration scope \u2612 parameter \u2612 general \u2612 steps \u2612 stages Resource references none integrationFlowServiceKeyCredentialsId \u00b6 Jenkins secret text credential ID containing the service key to the Process Integration Runtime service instance of plan 'integration-flow' back to overview Scope Details Aliases - Type string Configuration scope \u2612 parameter \u2612 general \u2612 steps \u2612 stages Example \u00b6 Example configuration for the use in a Jenkinsfile . integrationArtifactTriggerIntegrationTest script: this Example for the use in a YAML configuration file (such as .pipeline/config.yaml ). steps : <...> integrationArtifactTriggerIntegrationTest : integrationFlowServiceKeyCredentialsId : 'MY_INTEGRATION_FLOW_SERVICE_KEY' integrationFlowId : 'INTEGRATION_FLOW_ID' contentType : 'text/plain' messageBodyPath : 'myIntegrationsTest/testBody'","title":"integrationArtifactTriggerIntegrationTest"},{"location":"steps/integrationArtifactTriggerIntegrationTest/#integrationartifacttriggerintegrationtest","text":"Test the service endpoint of your iFlow","title":"integrationArtifactTriggerIntegrationTest"},{"location":"steps/integrationArtifactTriggerIntegrationTest/#description","text":"With this step you can test your intergration flow exposed by SAP BTP Integration on a tenant using OData API.Learn more about the SAP Cloud Integration remote API for getting service endpoint of deployed integration artifact here .","title":"Description"},{"location":"steps/integrationArtifactTriggerIntegrationTest/#usage","text":"We recommend to define values of step parameters via .pipeline/config.yml file . In this case, calling the step is essentially reduced to defining the step name. Calling the step can be done either in an orchestrator specific way (e.g. via a Jenkins library step) or on the command line. Jenkins Command Line library ( 'piper-lib-os' ) integrationArtifactTriggerIntegrationTest script: this piper integrationArtifactTriggerIntegrationTest","title":"Usage"},{"location":"steps/integrationArtifactTriggerIntegrationTest/#outputs","text":"Output type Details commonPipelineEnvironment custom/integrationFlowTriggerIntegrationTestResponseBody custom/integrationFlowTriggerIntegrationTestResponseHeaders","title":"Outputs"},{"location":"steps/integrationArtifactTriggerIntegrationTest/#parameters","text":"","title":"Parameters"},{"location":"steps/integrationArtifactTriggerIntegrationTest/#overview-step","text":"Name Mandatory Additional information integrationFlowId yes integrationFlowServiceEndpointUrl yes integrationFlowServiceKey (yes) pass via ENV or Jenkins credentials ( integrationFlowServiceKeyCredentialsId ) script (yes) reference to Jenkins main pipeline script contentType no messageBodyPath no verbose no activates debug output","title":"Overview - Step"},{"location":"steps/integrationArtifactTriggerIntegrationTest/#overview-execution-environment","text":"Orchestrator-specific only These parameters are relevant for orchestrator usage and not considered when using the command line option. Name Mandatory Additional information","title":"Overview - Execution Environment"},{"location":"steps/integrationArtifactTriggerIntegrationTest/#details","text":"","title":"Details"},{"location":"steps/integrationArtifactTriggerIntegrationTest/#contenttype","text":"Specifies the content type of the file defined in messageBodyPath e.g. application/json back to overview Scope Details Aliases - Type string Mandatory no Default $PIPER_contentType (if set) Secret no Configuration scope \u2612 parameter \u2610 general \u2612 steps \u2612 stages Resource references none","title":"contentType"},{"location":"steps/integrationArtifactTriggerIntegrationTest/#integrationflowid","text":"Specifies the ID of the Integration Flow artifact back to overview Scope Details Aliases - Type string Mandatory yes Default $PIPER_integrationFlowId (if set) Secret no Configuration scope \u2612 parameter \u2612 general \u2612 steps \u2612 stages Resource references none","title":"integrationFlowId"},{"location":"steps/integrationArtifactTriggerIntegrationTest/#integrationflowserviceendpointurl","text":"Specifies the URL endpoint of the iFlow. Please provide in the format <protocol>://<host>:<port> . Supported protocols are http and https . back to overview Scope Details Aliases - Type string Mandatory yes Default $PIPER_integrationFlowServiceEndpointUrl (if set) Secret no Configuration scope \u2612 parameter \u2610 general \u2610 steps \u2610 stages Resource references commonPipelineEnvironment : reference to: custom/integrationFlowServiceEndpoint","title":"integrationFlowServiceEndpointUrl"},{"location":"steps/integrationArtifactTriggerIntegrationTest/#integrationflowservicekey","text":"Service key JSON string to access the Process Integration Runtime service instance of plan 'integration-flow' back to overview Scope Details Aliases - Type string Mandatory yes Default $PIPER_integrationFlowServiceKey (if set) Secret yes Configuration scope \u2612 parameter \u2610 general \u2610 steps \u2610 stages Resource references Jenkins credential id: id: integrationFlowServiceKeyCredentialsId reference to: integrationFlowServiceKey","title":"integrationFlowServiceKey"},{"location":"steps/integrationArtifactTriggerIntegrationTest/#messagebodypath","text":"Speficfies the relative file path to the message body. back to overview Scope Details Aliases - Type string Mandatory no Default $PIPER_messageBodyPath (if set) Secret no Configuration scope \u2612 parameter \u2610 general \u2612 steps \u2612 stages Resource references none","title":"messageBodyPath"},{"location":"steps/integrationArtifactTriggerIntegrationTest/#script","text":"The common script environment of the Jenkinsfile running. Typically the reference to the script calling the pipeline step is provided with the this parameter, as in script: this . This allows the function to access the commonPipelineEnvironment for retrieving, e.g. configuration parameters. back to overview Scope Details Aliases - Type Jenkins Script Mandatory yes Default Secret no Configuration scope \u2610 parameter \u2610 general \u2610 steps \u2610 stages Resource references none","title":"script"},{"location":"steps/integrationArtifactTriggerIntegrationTest/#verbose","text":"verbose output back to overview Scope Details Aliases - Type bool Mandatory no Default false Possible values - true - false Secret no Configuration scope \u2612 parameter \u2612 general \u2612 steps \u2612 stages Resource references none","title":"verbose"},{"location":"steps/integrationArtifactTriggerIntegrationTest/#integrationflowservicekeycredentialsid","text":"Jenkins secret text credential ID containing the service key to the Process Integration Runtime service instance of plan 'integration-flow' back to overview Scope Details Aliases - Type string Configuration scope \u2612 parameter \u2612 general \u2612 steps \u2612 stages","title":"integrationFlowServiceKeyCredentialsId"},{"location":"steps/integrationArtifactTriggerIntegrationTest/#example","text":"Example configuration for the use in a Jenkinsfile . integrationArtifactTriggerIntegrationTest script: this Example for the use in a YAML configuration file (such as .pipeline/config.yaml ). steps : <...> integrationArtifactTriggerIntegrationTest : integrationFlowServiceKeyCredentialsId : 'MY_INTEGRATION_FLOW_SERVICE_KEY' integrationFlowId : 'INTEGRATION_FLOW_ID' contentType : 'text/plain' messageBodyPath : 'myIntegrationsTest/testBody'","title":"Example"},{"location":"steps/integrationArtifactUnDeploy/","text":"integrationArtifactUnDeploy \u00b6 Undeploy a integration flow Description \u00b6 With this step you can undeploy a integration flow artifact in SAP Cloud integration runtime using OData API. Learn more about the SAP Cloud Integration remote API for undeploying an integration artifact here Usage \u00b6 We recommend to define values of step parameters via .pipeline/config.yml file . In this case, calling the step is essentially reduced to defining the step name. Calling the step can be done either in an orchestrator specific way (e.g. via a Jenkins library step) or on the command line. Jenkins Command Line library ( 'piper-lib-os' ) integrationArtifactUnDeploy script: this piper integrationArtifactUnDeploy Prerequisites \u00b6 Parameters \u00b6 Overview - Step \u00b6 Name Mandatory Additional information apiServiceKey (yes) pass via ENV or Jenkins credentials ( cpiApiServiceKeyCredentialsId ) integrationFlowId yes script (yes) reference to Jenkins main pipeline script verbose no activates debug output Overview - Execution Environment \u00b6 Orchestrator-specific only These parameters are relevant for orchestrator usage and not considered when using the command line option. Name Mandatory Additional information Details \u00b6 apiServiceKey \u00b6 Service key JSON string to access the Process Integration Runtime service instance of plan 'api' back to overview Scope Details Aliases - Type string Mandatory yes Default $PIPER_apiServiceKey (if set) Secret yes Configuration scope \u2612 parameter \u2610 general \u2610 steps \u2610 stages Resource references Jenkins credential id: id: cpiApiServiceKeyCredentialsId reference to: apiServiceKey integrationFlowId \u00b6 Specifies the ID of the Integration Flow artifact back to overview Scope Details Aliases - Type string Mandatory yes Default $PIPER_integrationFlowId (if set) Secret no Configuration scope \u2612 parameter \u2612 general \u2612 steps \u2612 stages Resource references none script \u00b6 The common script environment of the Jenkinsfile running. Typically the reference to the script calling the pipeline step is provided with the this parameter, as in script: this . This allows the function to access the commonPipelineEnvironment for retrieving, e.g. configuration parameters. back to overview Scope Details Aliases - Type Jenkins Script Mandatory yes Default Secret no Configuration scope \u2610 parameter \u2610 general \u2610 steps \u2610 stages Resource references none verbose \u00b6 verbose output back to overview Scope Details Aliases - Type bool Mandatory no Default false Possible values - true - false Secret no Configuration scope \u2612 parameter \u2612 general \u2612 steps \u2612 stages Resource references none cpiApiServiceKeyCredentialsId \u00b6 Jenkins secret text credential ID containing the service key to the Process Integration Runtime service instance of plan 'api' back to overview Scope Details Aliases - Type string Configuration scope \u2612 parameter \u2612 general \u2612 steps \u2612 stages Example \u00b6 Example configuration for the use in a Jenkinsfile . integrationArtifactUnDeploy script: this Example of a YAML configuration file (such as .pipeline/config.yaml ). steps : <...> integrationArtifactUnDeploy : cpiApiServiceKeyCredentialsId : 'MY_API_SERVICE_KEY' integrationFlowId : 'MY_INTEGRATION_FLOW_ID'","title":"integrationArtifactUnDeploy"},{"location":"steps/integrationArtifactUnDeploy/#integrationartifactundeploy","text":"Undeploy a integration flow","title":"integrationArtifactUnDeploy"},{"location":"steps/integrationArtifactUnDeploy/#description","text":"With this step you can undeploy a integration flow artifact in SAP Cloud integration runtime using OData API. Learn more about the SAP Cloud Integration remote API for undeploying an integration artifact here","title":"Description"},{"location":"steps/integrationArtifactUnDeploy/#usage","text":"We recommend to define values of step parameters via .pipeline/config.yml file . In this case, calling the step is essentially reduced to defining the step name. Calling the step can be done either in an orchestrator specific way (e.g. via a Jenkins library step) or on the command line. Jenkins Command Line library ( 'piper-lib-os' ) integrationArtifactUnDeploy script: this piper integrationArtifactUnDeploy","title":"Usage"},{"location":"steps/integrationArtifactUnDeploy/#prerequisites","text":"","title":"Prerequisites"},{"location":"steps/integrationArtifactUnDeploy/#parameters","text":"","title":"Parameters"},{"location":"steps/integrationArtifactUnDeploy/#overview-step","text":"Name Mandatory Additional information apiServiceKey (yes) pass via ENV or Jenkins credentials ( cpiApiServiceKeyCredentialsId ) integrationFlowId yes script (yes) reference to Jenkins main pipeline script verbose no activates debug output","title":"Overview - Step"},{"location":"steps/integrationArtifactUnDeploy/#overview-execution-environment","text":"Orchestrator-specific only These parameters are relevant for orchestrator usage and not considered when using the command line option. Name Mandatory Additional information","title":"Overview - Execution Environment"},{"location":"steps/integrationArtifactUnDeploy/#details","text":"","title":"Details"},{"location":"steps/integrationArtifactUnDeploy/#apiservicekey","text":"Service key JSON string to access the Process Integration Runtime service instance of plan 'api' back to overview Scope Details Aliases - Type string Mandatory yes Default $PIPER_apiServiceKey (if set) Secret yes Configuration scope \u2612 parameter \u2610 general \u2610 steps \u2610 stages Resource references Jenkins credential id: id: cpiApiServiceKeyCredentialsId reference to: apiServiceKey","title":"apiServiceKey"},{"location":"steps/integrationArtifactUnDeploy/#integrationflowid","text":"Specifies the ID of the Integration Flow artifact back to overview Scope Details Aliases - Type string Mandatory yes Default $PIPER_integrationFlowId (if set) Secret no Configuration scope \u2612 parameter \u2612 general \u2612 steps \u2612 stages Resource references none","title":"integrationFlowId"},{"location":"steps/integrationArtifactUnDeploy/#script","text":"The common script environment of the Jenkinsfile running. Typically the reference to the script calling the pipeline step is provided with the this parameter, as in script: this . This allows the function to access the commonPipelineEnvironment for retrieving, e.g. configuration parameters. back to overview Scope Details Aliases - Type Jenkins Script Mandatory yes Default Secret no Configuration scope \u2610 parameter \u2610 general \u2610 steps \u2610 stages Resource references none","title":"script"},{"location":"steps/integrationArtifactUnDeploy/#verbose","text":"verbose output back to overview Scope Details Aliases - Type bool Mandatory no Default false Possible values - true - false Secret no Configuration scope \u2612 parameter \u2612 general \u2612 steps \u2612 stages Resource references none","title":"verbose"},{"location":"steps/integrationArtifactUnDeploy/#cpiapiservicekeycredentialsid","text":"Jenkins secret text credential ID containing the service key to the Process Integration Runtime service instance of plan 'api' back to overview Scope Details Aliases - Type string Configuration scope \u2612 parameter \u2612 general \u2612 steps \u2612 stages","title":"cpiApiServiceKeyCredentialsId"},{"location":"steps/integrationArtifactUnDeploy/#example","text":"Example configuration for the use in a Jenkinsfile . integrationArtifactUnDeploy script: this Example of a YAML configuration file (such as .pipeline/config.yaml ). steps : <...> integrationArtifactUnDeploy : cpiApiServiceKeyCredentialsId : 'MY_API_SERVICE_KEY' integrationFlowId : 'MY_INTEGRATION_FLOW_ID'","title":"Example"},{"location":"steps/integrationArtifactUpdateConfiguration/","text":"integrationArtifactUpdateConfiguration \u00b6 Update integration flow Configuration parameter Description \u00b6 With this step you can update the value for a configuration parameters of a designtime integration flow using the OData API. Learn more about the SAP Cloud Integration remote API for configuration update of the integration flow parameter here . Usage \u00b6 We recommend to define values of step parameters via .pipeline/config.yml file . In this case, calling the step is essentially reduced to defining the step name. Calling the step can be done either in an orchestrator specific way (e.g. via a Jenkins library step) or on the command line. Jenkins Command Line library ( 'piper-lib-os' ) integrationArtifactUpdateConfiguration script: this piper integrationArtifactUpdateConfiguration Prerequisites \u00b6 Parameters \u00b6 Overview - Step \u00b6 Name Mandatory Additional information apiServiceKey (yes) pass via ENV or Jenkins credentials ( cpiApiServiceKeyCredentialsId ) integrationFlowId yes integrationFlowVersion yes parameterKey yes parameterValue yes script (yes) reference to Jenkins main pipeline script verbose no activates debug output Overview - Execution Environment \u00b6 Orchestrator-specific only These parameters are relevant for orchestrator usage and not considered when using the command line option. Name Mandatory Additional information Details \u00b6 apiServiceKey \u00b6 Service key JSON string to access the Process Integration Runtime service instance of plan 'api' back to overview Scope Details Aliases - Type string Mandatory yes Default $PIPER_apiServiceKey (if set) Secret yes Configuration scope \u2612 parameter \u2610 general \u2610 steps \u2610 stages Resource references Jenkins credential id: id: cpiApiServiceKeyCredentialsId reference to: apiServiceKey integrationFlowId \u00b6 Specifies the ID of the Integration Flow artifact back to overview Scope Details Aliases - Type string Mandatory yes Default $PIPER_integrationFlowId (if set) Secret no Configuration scope \u2612 parameter \u2612 general \u2612 steps \u2612 stages Resource references none integrationFlowVersion \u00b6 Specifies the version of the Integration Flow artifact back to overview Scope Details Aliases - Type string Mandatory yes Default $PIPER_integrationFlowVersion (if set) Secret no Configuration scope \u2612 parameter \u2612 general \u2612 steps \u2612 stages Resource references none parameterKey \u00b6 Specifies the externalized parameter name. back to overview Scope Details Aliases - Type string Mandatory yes Default $PIPER_parameterKey (if set) Secret no Configuration scope \u2612 parameter \u2610 general \u2612 steps \u2612 stages Resource references none parameterValue \u00b6 Specifies the externalized parameter value. back to overview Scope Details Aliases - Type string Mandatory yes Default $PIPER_parameterValue (if set) Secret no Configuration scope \u2612 parameter \u2610 general \u2612 steps \u2612 stages Resource references none script \u00b6 The common script environment of the Jenkinsfile running. Typically the reference to the script calling the pipeline step is provided with the this parameter, as in script: this . This allows the function to access the commonPipelineEnvironment for retrieving, e.g. configuration parameters. back to overview Scope Details Aliases - Type Jenkins Script Mandatory yes Default Secret no Configuration scope \u2610 parameter \u2610 general \u2610 steps \u2610 stages Resource references none verbose \u00b6 verbose output back to overview Scope Details Aliases - Type bool Mandatory no Default false Possible values - true - false Secret no Configuration scope \u2612 parameter \u2612 general \u2612 steps \u2612 stages Resource references none cpiApiServiceKeyCredentialsId \u00b6 Jenkins secret text credential ID containing the service key to the Process Integration Runtime service instance of plan 'api' back to overview Scope Details Aliases - Type string Configuration scope \u2612 parameter \u2612 general \u2612 steps \u2612 stages Example \u00b6 Example configuration for the use in a Jenkinsfile . integrationArtifactUpdateConfiguration script: this Example of a YAML configuration file (such as .pipeline/config.yaml ). steps : <...> integrationArtifactUpdateConfiguration : cpiApiServiceKeyCredentialsId : 'MY_API_SERVICE_KEY' integrationFlowId : 'MY_INTEGRATION_FLOW_NAME' integrationFlowVersion : 'MY_INTEGRATION_FLOW_VERSION' parameterKey : 'MY_INTEGRATION_FLOW_CONFIG_PARAMETER_NAME' parameterValue : 'MY_INTEGRATION_FLOW_CONFIG_PARAMETER_VALUE'","title":"integrationArtifactUpdateConfiguration"},{"location":"steps/integrationArtifactUpdateConfiguration/#integrationartifactupdateconfiguration","text":"Update integration flow Configuration parameter","title":"integrationArtifactUpdateConfiguration"},{"location":"steps/integrationArtifactUpdateConfiguration/#description","text":"With this step you can update the value for a configuration parameters of a designtime integration flow using the OData API. Learn more about the SAP Cloud Integration remote API for configuration update of the integration flow parameter here .","title":"Description"},{"location":"steps/integrationArtifactUpdateConfiguration/#usage","text":"We recommend to define values of step parameters via .pipeline/config.yml file . In this case, calling the step is essentially reduced to defining the step name. Calling the step can be done either in an orchestrator specific way (e.g. via a Jenkins library step) or on the command line. Jenkins Command Line library ( 'piper-lib-os' ) integrationArtifactUpdateConfiguration script: this piper integrationArtifactUpdateConfiguration","title":"Usage"},{"location":"steps/integrationArtifactUpdateConfiguration/#prerequisites","text":"","title":"Prerequisites"},{"location":"steps/integrationArtifactUpdateConfiguration/#parameters","text":"","title":"Parameters"},{"location":"steps/integrationArtifactUpdateConfiguration/#overview-step","text":"Name Mandatory Additional information apiServiceKey (yes) pass via ENV or Jenkins credentials ( cpiApiServiceKeyCredentialsId ) integrationFlowId yes integrationFlowVersion yes parameterKey yes parameterValue yes script (yes) reference to Jenkins main pipeline script verbose no activates debug output","title":"Overview - Step"},{"location":"steps/integrationArtifactUpdateConfiguration/#overview-execution-environment","text":"Orchestrator-specific only These parameters are relevant for orchestrator usage and not considered when using the command line option. Name Mandatory Additional information","title":"Overview - Execution Environment"},{"location":"steps/integrationArtifactUpdateConfiguration/#details","text":"","title":"Details"},{"location":"steps/integrationArtifactUpdateConfiguration/#apiservicekey","text":"Service key JSON string to access the Process Integration Runtime service instance of plan 'api' back to overview Scope Details Aliases - Type string Mandatory yes Default $PIPER_apiServiceKey (if set) Secret yes Configuration scope \u2612 parameter \u2610 general \u2610 steps \u2610 stages Resource references Jenkins credential id: id: cpiApiServiceKeyCredentialsId reference to: apiServiceKey","title":"apiServiceKey"},{"location":"steps/integrationArtifactUpdateConfiguration/#integrationflowid","text":"Specifies the ID of the Integration Flow artifact back to overview Scope Details Aliases - Type string Mandatory yes Default $PIPER_integrationFlowId (if set) Secret no Configuration scope \u2612 parameter \u2612 general \u2612 steps \u2612 stages Resource references none","title":"integrationFlowId"},{"location":"steps/integrationArtifactUpdateConfiguration/#integrationflowversion","text":"Specifies the version of the Integration Flow artifact back to overview Scope Details Aliases - Type string Mandatory yes Default $PIPER_integrationFlowVersion (if set) Secret no Configuration scope \u2612 parameter \u2612 general \u2612 steps \u2612 stages Resource references none","title":"integrationFlowVersion"},{"location":"steps/integrationArtifactUpdateConfiguration/#parameterkey","text":"Specifies the externalized parameter name. back to overview Scope Details Aliases - Type string Mandatory yes Default $PIPER_parameterKey (if set) Secret no Configuration scope \u2612 parameter \u2610 general \u2612 steps \u2612 stages Resource references none","title":"parameterKey"},{"location":"steps/integrationArtifactUpdateConfiguration/#parametervalue","text":"Specifies the externalized parameter value. back to overview Scope Details Aliases - Type string Mandatory yes Default $PIPER_parameterValue (if set) Secret no Configuration scope \u2612 parameter \u2610 general \u2612 steps \u2612 stages Resource references none","title":"parameterValue"},{"location":"steps/integrationArtifactUpdateConfiguration/#script","text":"The common script environment of the Jenkinsfile running. Typically the reference to the script calling the pipeline step is provided with the this parameter, as in script: this . This allows the function to access the commonPipelineEnvironment for retrieving, e.g. configuration parameters. back to overview Scope Details Aliases - Type Jenkins Script Mandatory yes Default Secret no Configuration scope \u2610 parameter \u2610 general \u2610 steps \u2610 stages Resource references none","title":"script"},{"location":"steps/integrationArtifactUpdateConfiguration/#verbose","text":"verbose output back to overview Scope Details Aliases - Type bool Mandatory no Default false Possible values - true - false Secret no Configuration scope \u2612 parameter \u2612 general \u2612 steps \u2612 stages Resource references none","title":"verbose"},{"location":"steps/integrationArtifactUpdateConfiguration/#cpiapiservicekeycredentialsid","text":"Jenkins secret text credential ID containing the service key to the Process Integration Runtime service instance of plan 'api' back to overview Scope Details Aliases - Type string Configuration scope \u2612 parameter \u2612 general \u2612 steps \u2612 stages","title":"cpiApiServiceKeyCredentialsId"},{"location":"steps/integrationArtifactUpdateConfiguration/#example","text":"Example configuration for the use in a Jenkinsfile . integrationArtifactUpdateConfiguration script: this Example of a YAML configuration file (such as .pipeline/config.yaml ). steps : <...> integrationArtifactUpdateConfiguration : cpiApiServiceKeyCredentialsId : 'MY_API_SERVICE_KEY' integrationFlowId : 'MY_INTEGRATION_FLOW_NAME' integrationFlowVersion : 'MY_INTEGRATION_FLOW_VERSION' parameterKey : 'MY_INTEGRATION_FLOW_CONFIG_PARAMETER_NAME' parameterValue : 'MY_INTEGRATION_FLOW_CONFIG_PARAMETER_VALUE'","title":"Example"},{"location":"steps/integrationArtifactUpload/","text":"integrationArtifactUpload \u00b6 Upload or Update an integration flow designtime artifact Description \u00b6 With this step you can either upload or update a integration flow designtime artifact using the OData API. Learn more about the SAP Cloud Integration remote API for updating an integration flow artifact here . Usage \u00b6 We recommend to define values of step parameters via .pipeline/config.yml file . In this case, calling the step is essentially reduced to defining the step name. Calling the step can be done either in an orchestrator specific way (e.g. via a Jenkins library step) or on the command line. Jenkins Command Line library ( 'piper-lib-os' ) integrationArtifactUpload script: this piper integrationArtifactUpload Prerequisites \u00b6 Parameters \u00b6 Overview - Step \u00b6 Name Mandatory Additional information apiServiceKey (yes) pass via ENV or Jenkins credentials ( cpiApiServiceKeyCredentialsId ) filePath yes integrationFlowId yes integrationFlowName yes script (yes) reference to Jenkins main pipeline script packageId no verbose no activates debug output Overview - Execution Environment \u00b6 Orchestrator-specific only These parameters are relevant for orchestrator usage and not considered when using the command line option. Name Mandatory Additional information Details \u00b6 apiServiceKey \u00b6 Service key JSON string to access the Process Integration Runtime service instance of plan 'api' back to overview Scope Details Aliases - Type string Mandatory yes Default $PIPER_apiServiceKey (if set) Secret yes Configuration scope \u2612 parameter \u2610 general \u2610 steps \u2610 stages Resource references Jenkins credential id: id: cpiApiServiceKeyCredentialsId reference to: apiServiceKey filePath \u00b6 Specifies integration artifact relative file path. back to overview Scope Details Aliases - Type string Mandatory yes Default $PIPER_filePath (if set) Secret no Configuration scope \u2612 parameter \u2610 general \u2612 steps \u2612 stages Resource references none integrationFlowId \u00b6 Specifies the ID of the Integration Flow artifact back to overview Scope Details Aliases - Type string Mandatory yes Default $PIPER_integrationFlowId (if set) Secret no Configuration scope \u2612 parameter \u2612 general \u2612 steps \u2612 stages Resource references none integrationFlowName \u00b6 Specifies the Name of the Integration Flow artifact back to overview Scope Details Aliases - Type string Mandatory yes Default $PIPER_integrationFlowName (if set) Secret no Configuration scope \u2612 parameter \u2610 general \u2612 steps \u2612 stages Resource references none packageId \u00b6 Specifies the ID of the Integration Package back to overview Scope Details Aliases - Type string Mandatory no Default $PIPER_packageId (if set) Secret no Configuration scope \u2612 parameter \u2610 general \u2612 steps \u2612 stages Resource references none script \u00b6 The common script environment of the Jenkinsfile running. Typically the reference to the script calling the pipeline step is provided with the this parameter, as in script: this . This allows the function to access the commonPipelineEnvironment for retrieving, e.g. configuration parameters. back to overview Scope Details Aliases - Type Jenkins Script Mandatory yes Default Secret no Configuration scope \u2610 parameter \u2610 general \u2610 steps \u2610 stages Resource references none verbose \u00b6 verbose output back to overview Scope Details Aliases - Type bool Mandatory no Default false Possible values - true - false Secret no Configuration scope \u2612 parameter \u2612 general \u2612 steps \u2612 stages Resource references none cpiApiServiceKeyCredentialsId \u00b6 Jenkins secret text credential ID containing the service key to the Process Integration Runtime service instance of plan 'api' back to overview Scope Details Aliases - Type string Configuration scope \u2612 parameter \u2612 general \u2612 steps \u2612 stages Example \u00b6 Example configuration for the use in a Jenkinsfile . integrationArtifactUpload script: this Example for the use in a YAML configuration file (such as .pipeline/config.yaml ). steps : <...> integrationArtifactUpload : cpiApiServiceKeyCredentialsId : 'MY_API_SERVICE_KEY' integrationFlowId : 'MY_INTEGRATION_FLOW_ID' integrationFlowName : 'MY_INTEGRATION_FLOW_Name' packageId : 'MY_INTEGRATION_Package_ID' filePath : 'MY_INTEGRATION_FLOW_Artifact_Relative_Path' downloadPath : /MY_INTEGRATION_FLOW_DOWNLOAD_PATH","title":"integrationArtifactUpload"},{"location":"steps/integrationArtifactUpload/#integrationartifactupload","text":"Upload or Update an integration flow designtime artifact","title":"integrationArtifactUpload"},{"location":"steps/integrationArtifactUpload/#description","text":"With this step you can either upload or update a integration flow designtime artifact using the OData API. Learn more about the SAP Cloud Integration remote API for updating an integration flow artifact here .","title":"Description"},{"location":"steps/integrationArtifactUpload/#usage","text":"We recommend to define values of step parameters via .pipeline/config.yml file . In this case, calling the step is essentially reduced to defining the step name. Calling the step can be done either in an orchestrator specific way (e.g. via a Jenkins library step) or on the command line. Jenkins Command Line library ( 'piper-lib-os' ) integrationArtifactUpload script: this piper integrationArtifactUpload","title":"Usage"},{"location":"steps/integrationArtifactUpload/#prerequisites","text":"","title":"Prerequisites"},{"location":"steps/integrationArtifactUpload/#parameters","text":"","title":"Parameters"},{"location":"steps/integrationArtifactUpload/#overview-step","text":"Name Mandatory Additional information apiServiceKey (yes) pass via ENV or Jenkins credentials ( cpiApiServiceKeyCredentialsId ) filePath yes integrationFlowId yes integrationFlowName yes script (yes) reference to Jenkins main pipeline script packageId no verbose no activates debug output","title":"Overview - Step"},{"location":"steps/integrationArtifactUpload/#overview-execution-environment","text":"Orchestrator-specific only These parameters are relevant for orchestrator usage and not considered when using the command line option. Name Mandatory Additional information","title":"Overview - Execution Environment"},{"location":"steps/integrationArtifactUpload/#details","text":"","title":"Details"},{"location":"steps/integrationArtifactUpload/#apiservicekey","text":"Service key JSON string to access the Process Integration Runtime service instance of plan 'api' back to overview Scope Details Aliases - Type string Mandatory yes Default $PIPER_apiServiceKey (if set) Secret yes Configuration scope \u2612 parameter \u2610 general \u2610 steps \u2610 stages Resource references Jenkins credential id: id: cpiApiServiceKeyCredentialsId reference to: apiServiceKey","title":"apiServiceKey"},{"location":"steps/integrationArtifactUpload/#filepath","text":"Specifies integration artifact relative file path. back to overview Scope Details Aliases - Type string Mandatory yes Default $PIPER_filePath (if set) Secret no Configuration scope \u2612 parameter \u2610 general \u2612 steps \u2612 stages Resource references none","title":"filePath"},{"location":"steps/integrationArtifactUpload/#integrationflowid","text":"Specifies the ID of the Integration Flow artifact back to overview Scope Details Aliases - Type string Mandatory yes Default $PIPER_integrationFlowId (if set) Secret no Configuration scope \u2612 parameter \u2612 general \u2612 steps \u2612 stages Resource references none","title":"integrationFlowId"},{"location":"steps/integrationArtifactUpload/#integrationflowname","text":"Specifies the Name of the Integration Flow artifact back to overview Scope Details Aliases - Type string Mandatory yes Default $PIPER_integrationFlowName (if set) Secret no Configuration scope \u2612 parameter \u2610 general \u2612 steps \u2612 stages Resource references none","title":"integrationFlowName"},{"location":"steps/integrationArtifactUpload/#packageid","text":"Specifies the ID of the Integration Package back to overview Scope Details Aliases - Type string Mandatory no Default $PIPER_packageId (if set) Secret no Configuration scope \u2612 parameter \u2610 general \u2612 steps \u2612 stages Resource references none","title":"packageId"},{"location":"steps/integrationArtifactUpload/#script","text":"The common script environment of the Jenkinsfile running. Typically the reference to the script calling the pipeline step is provided with the this parameter, as in script: this . This allows the function to access the commonPipelineEnvironment for retrieving, e.g. configuration parameters. back to overview Scope Details Aliases - Type Jenkins Script Mandatory yes Default Secret no Configuration scope \u2610 parameter \u2610 general \u2610 steps \u2610 stages Resource references none","title":"script"},{"location":"steps/integrationArtifactUpload/#verbose","text":"verbose output back to overview Scope Details Aliases - Type bool Mandatory no Default false Possible values - true - false Secret no Configuration scope \u2612 parameter \u2612 general \u2612 steps \u2612 stages Resource references none","title":"verbose"},{"location":"steps/integrationArtifactUpload/#cpiapiservicekeycredentialsid","text":"Jenkins secret text credential ID containing the service key to the Process Integration Runtime service instance of plan 'api' back to overview Scope Details Aliases - Type string Configuration scope \u2612 parameter \u2612 general \u2612 steps \u2612 stages","title":"cpiApiServiceKeyCredentialsId"},{"location":"steps/integrationArtifactUpload/#example","text":"Example configuration for the use in a Jenkinsfile . integrationArtifactUpload script: this Example for the use in a YAML configuration file (such as .pipeline/config.yaml ). steps : <...> integrationArtifactUpload : cpiApiServiceKeyCredentialsId : 'MY_API_SERVICE_KEY' integrationFlowId : 'MY_INTEGRATION_FLOW_ID' integrationFlowName : 'MY_INTEGRATION_FLOW_Name' packageId : 'MY_INTEGRATION_Package_ID' filePath : 'MY_INTEGRATION_FLOW_Artifact_Relative_Path' downloadPath : /MY_INTEGRATION_FLOW_DOWNLOAD_PATH","title":"Example"},{"location":"steps/isChangeInDevelopment/","text":"isChangeInDevelopment \u00b6 This step checks if a certain change is in status 'in development' Description \u00b6 This step checks if a certain change is in status 'in development' Usage \u00b6 We recommend to define values of step parameters via .pipeline/config.yml file . In this case, calling the step is essentially reduced to defining the step name. Calling the step can be done either in an orchestrator specific way (e.g. via a Jenkins library step) or on the command line. Jenkins Command Line library ( 'piper-lib-os' ) isChangeInDevelopment script: this piper isChangeInDevelopment Outputs \u00b6 Output type Details commonPipelineEnvironment custom/isChangeInDevelopment Prerequisites \u00b6 You have an SAP Solution Manager user to which you have assigned the roles required for uploading. See SAP Solution Manager Administration . You have created a change document. You have installed the Change Management Client with the needed certificates. See Change Management Client . Specifying the Change Document \u00b6 The target of the status check is a change document identified by an identifier (ID). Specify the ID by step parameter or common pipeline environment . Return Value \u00b6 The step isChangeInDevelopment returns a boolean value by setting the custom key custom.isChangeInDevelopment of the common pipeline environment: true if the change document is in status in development . false if the change document is not in status in development . In this case, AbortException terminates the execution of the pipeline job. // pipeline script isChangeInDevelopment ( script: this ) ... You can omit this exception by setting the configuration parameter failIfStatusIsNotInDevelopment to false : // pipeline script isChangeInDevelopment ( script: this , failIfStatusIsNotInDevelopment: false ) if ( commonPipelineEnvironment . getValue ( 'isChangeInDevelopment' ) { ... } Parameters \u00b6 Overview - Step \u00b6 Name Mandatory Additional information changeDocumentId yes endpoint yes password (yes) pass via ENV or Jenkins credentials ( credentialsId ) script (yes) reference to Jenkins main pipeline script username (yes) pass via ENV or Jenkins credentials ( credentialsId ) cmClientOpts no failIfStatusIsNotInDevelopment no verbose no activates debug output Overview - Execution Environment \u00b6 Orchestrator-specific only These parameters are relevant for orchestrator usage and not considered when using the command line option. Name Mandatory Additional information containerCommand no containerShell no dockerEnvVars no dockerImage no dockerName no dockerOptions no dockerPullImage no dockerVolumeBind no dockerWorkspace no Details \u00b6 changeDocumentId \u00b6 ID of the change document to be checked for the status back to overview Scope Details Aliases - Type string Mandatory yes Default $PIPER_changeDocumentId (if set) Secret no Configuration scope \u2612 parameter \u2610 general \u2610 steps \u2610 stages Resource references commonPipelineEnvironment : reference to: custom/changeDocumentId cmClientOpts \u00b6 additional options passed to cm client, e.g. for troubleshooting back to overview Scope Details Aliases - clientOpts - changeManagement/clientOpts Type []string Mandatory no Default $PIPER_cmClientOpts (if set) Secret no Configuration scope \u2612 parameter \u2610 general \u2612 steps \u2612 stages Resource references none containerCommand \u00b6 Jenkins-specific: Used for proper environment setup. Kubernetes only: Allows to specify start command for container created with dockerImage parameter to overwrite Piper default (/usr/bin/tail -f /dev/null). back to overview Scope Details Aliases - Type string Mandatory no Default Secret no Configuration scope \u2612 parameter \u2612 general \u2612 steps \u2612 stages Resource references none containerShell \u00b6 Jenkins-specific: Used for proper environment setup. Allows to specify the shell to be executed for container with containerName. back to overview Scope Details Aliases - Type string Mandatory no Default Secret no Configuration scope \u2612 parameter \u2612 general \u2612 steps \u2612 stages Resource references none dockerEnvVars \u00b6 Environment variables to set in the container, e.g. [http_proxy: \"proxy:8080\"]. back to overview Scope Details Aliases - Type map[string]string Mandatory no Default Secret no Configuration scope \u2612 parameter \u2612 general \u2612 steps \u2612 stages Resource references none dockerImage \u00b6 Name of the docker image that should be used. If empty, Docker is not used and the command is executed directly on the Jenkins system. back to overview Scope Details Aliases - Type string Mandatory no Default ppiper/cm-client:3.0.0.0 Secret no Configuration scope \u2612 parameter \u2612 general \u2612 steps \u2612 stages Resource references none dockerName \u00b6 Kubernetes only: Name of the container launching dockerImage. SideCar only: Name of the container in local network. back to overview Scope Details Aliases - Type string Mandatory no Default cmclient Secret no Configuration scope \u2612 parameter \u2612 general \u2612 steps \u2612 stages Resource references none dockerOptions \u00b6 Docker options to be set when starting the container. back to overview Scope Details Aliases - Type []string Mandatory no Default Secret no Configuration scope \u2612 parameter \u2612 general \u2612 steps \u2612 stages Resource references none dockerPullImage \u00b6 Set this to 'false' to bypass a docker image pull. Useful during development process. Allows testing of images which are available in the local registry only. back to overview Scope Details Aliases - Type bool Mandatory no Default true Possible values - true - false Secret no Configuration scope \u2612 parameter \u2612 general \u2612 steps \u2612 stages Resource references none dockerVolumeBind \u00b6 Jenkins-specific: Used for proper environment setup. Volumes that should be mounted into the docker container. back to overview Scope Details Aliases - Type map[string]string Mandatory no Default Secret no Configuration scope \u2612 parameter \u2612 general \u2612 steps \u2612 stages Resource references none dockerWorkspace \u00b6 Jenkins-specific: Used for proper environment setup. Kubernetes only: Specifies a dedicated user home directory for the container which will be passed as value for environment variable HOME . back to overview Scope Details Aliases - Type string Mandatory no Default Secret no Configuration scope \u2612 parameter \u2612 general \u2612 steps \u2612 stages Resource references none endpoint \u00b6 The service endpoint back to overview Scope Details Aliases changeManagement/endpoint Type string Mandatory yes Default $PIPER_endpoint (if set) Secret no Configuration scope \u2612 parameter \u2612 general \u2612 steps \u2612 stages Resource references none failIfStatusIsNotInDevelopment \u00b6 lets the build fail in case the change is not in status 'in developent'. Otherwise a warning is emitted to the log back to overview Scope Details Aliases - Type bool Mandatory no Default true Possible values - true - false Secret no Configuration scope \u2612 parameter \u2610 general \u2612 steps \u2612 stages Resource references none password \u00b6 Service user password to authenticate against the ABAP backend back to overview Scope Details Aliases - Type string Mandatory yes Default $PIPER_password (if set) Secret yes Configuration scope \u2612 parameter \u2610 general \u2610 steps \u2610 stages Resource references Jenkins credential id: id: credentialsId reference to: password script \u00b6 The common script environment of the Jenkinsfile running. Typically the reference to the script calling the pipeline step is provided with the this parameter, as in script: this . This allows the function to access the commonPipelineEnvironment for retrieving, e.g. configuration parameters. back to overview Scope Details Aliases - Type Jenkins Script Mandatory yes Default Secret no Configuration scope \u2610 parameter \u2610 general \u2610 steps \u2610 stages Resource references none username \u00b6 Service user to authenticate against the ABAP backend back to overview Scope Details Aliases - Type string Mandatory yes Default $PIPER_username (if set) Secret yes Configuration scope \u2612 parameter \u2612 general \u2612 steps \u2612 stages Resource references Jenkins credential id: id: credentialsId reference to: username verbose \u00b6 verbose output back to overview Scope Details Aliases - Type bool Mandatory no Default false Possible values - true - false Secret no Configuration scope \u2612 parameter \u2612 general \u2612 steps \u2612 stages Resource references none credentialsId \u00b6 Jenkins 'Username with password' credentials ID containing user and password to authenticate against the ABAP backend back to overview Scope Details Aliases changeManagement/credentialsId Type string Configuration scope \u2612 parameter \u2612 general \u2612 steps \u2612 stages Examples \u00b6 # config.yaml general : changeManagement : credentialsId : 'SOLMAN_CRED_ID' endpoint : 'https://example.org/cm/solman/endpoint' steps : isChangeInDevelopment : dockerImage : 'ppiper/cm-client:3.0.0.0' transportRequestUploadSOLMAN : dockerImage : 'ppiper/cm-client:3.0.0.0' applicationId : 'APPID' , filePath : '/path/file.ext' , // pipeline script ... stage ( 'Upload' ) { transportRequestDocIDFromGit ( script: this ) isChangeInDevelopment ( script: this ) transportRequestReqIDFromGit ( script: this ) transportRequestUploadSOLMAN ( script: this ) }","title":"isChangeInDevelopment"},{"location":"steps/isChangeInDevelopment/#ischangeindevelopment","text":"This step checks if a certain change is in status 'in development'","title":"isChangeInDevelopment"},{"location":"steps/isChangeInDevelopment/#description","text":"This step checks if a certain change is in status 'in development'","title":"Description"},{"location":"steps/isChangeInDevelopment/#usage","text":"We recommend to define values of step parameters via .pipeline/config.yml file . In this case, calling the step is essentially reduced to defining the step name. Calling the step can be done either in an orchestrator specific way (e.g. via a Jenkins library step) or on the command line. Jenkins Command Line library ( 'piper-lib-os' ) isChangeInDevelopment script: this piper isChangeInDevelopment","title":"Usage"},{"location":"steps/isChangeInDevelopment/#outputs","text":"Output type Details commonPipelineEnvironment custom/isChangeInDevelopment","title":"Outputs"},{"location":"steps/isChangeInDevelopment/#prerequisites","text":"You have an SAP Solution Manager user to which you have assigned the roles required for uploading. See SAP Solution Manager Administration . You have created a change document. You have installed the Change Management Client with the needed certificates. See Change Management Client .","title":"Prerequisites"},{"location":"steps/isChangeInDevelopment/#specifying-the-change-document","text":"The target of the status check is a change document identified by an identifier (ID). Specify the ID by step parameter or common pipeline environment .","title":"Specifying the Change Document"},{"location":"steps/isChangeInDevelopment/#return-value","text":"The step isChangeInDevelopment returns a boolean value by setting the custom key custom.isChangeInDevelopment of the common pipeline environment: true if the change document is in status in development . false if the change document is not in status in development . In this case, AbortException terminates the execution of the pipeline job. // pipeline script isChangeInDevelopment ( script: this ) ... You can omit this exception by setting the configuration parameter failIfStatusIsNotInDevelopment to false : // pipeline script isChangeInDevelopment ( script: this , failIfStatusIsNotInDevelopment: false ) if ( commonPipelineEnvironment . getValue ( 'isChangeInDevelopment' ) { ... }","title":"Return Value"},{"location":"steps/isChangeInDevelopment/#parameters","text":"","title":"Parameters"},{"location":"steps/isChangeInDevelopment/#overview-step","text":"Name Mandatory Additional information changeDocumentId yes endpoint yes password (yes) pass via ENV or Jenkins credentials ( credentialsId ) script (yes) reference to Jenkins main pipeline script username (yes) pass via ENV or Jenkins credentials ( credentialsId ) cmClientOpts no failIfStatusIsNotInDevelopment no verbose no activates debug output","title":"Overview - Step"},{"location":"steps/isChangeInDevelopment/#overview-execution-environment","text":"Orchestrator-specific only These parameters are relevant for orchestrator usage and not considered when using the command line option. Name Mandatory Additional information containerCommand no containerShell no dockerEnvVars no dockerImage no dockerName no dockerOptions no dockerPullImage no dockerVolumeBind no dockerWorkspace no","title":"Overview - Execution Environment"},{"location":"steps/isChangeInDevelopment/#details","text":"","title":"Details"},{"location":"steps/isChangeInDevelopment/#changedocumentid","text":"ID of the change document to be checked for the status back to overview Scope Details Aliases - Type string Mandatory yes Default $PIPER_changeDocumentId (if set) Secret no Configuration scope \u2612 parameter \u2610 general \u2610 steps \u2610 stages Resource references commonPipelineEnvironment : reference to: custom/changeDocumentId","title":"changeDocumentId"},{"location":"steps/isChangeInDevelopment/#cmclientopts","text":"additional options passed to cm client, e.g. for troubleshooting back to overview Scope Details Aliases - clientOpts - changeManagement/clientOpts Type []string Mandatory no Default $PIPER_cmClientOpts (if set) Secret no Configuration scope \u2612 parameter \u2610 general \u2612 steps \u2612 stages Resource references none","title":"cmClientOpts"},{"location":"steps/isChangeInDevelopment/#containercommand","text":"Jenkins-specific: Used for proper environment setup. Kubernetes only: Allows to specify start command for container created with dockerImage parameter to overwrite Piper default (/usr/bin/tail -f /dev/null). back to overview Scope Details Aliases - Type string Mandatory no Default Secret no Configuration scope \u2612 parameter \u2612 general \u2612 steps \u2612 stages Resource references none","title":"containerCommand"},{"location":"steps/isChangeInDevelopment/#containershell","text":"Jenkins-specific: Used for proper environment setup. Allows to specify the shell to be executed for container with containerName. back to overview Scope Details Aliases - Type string Mandatory no Default Secret no Configuration scope \u2612 parameter \u2612 general \u2612 steps \u2612 stages Resource references none","title":"containerShell"},{"location":"steps/isChangeInDevelopment/#dockerenvvars","text":"Environment variables to set in the container, e.g. [http_proxy: \"proxy:8080\"]. back to overview Scope Details Aliases - Type map[string]string Mandatory no Default Secret no Configuration scope \u2612 parameter \u2612 general \u2612 steps \u2612 stages Resource references none","title":"dockerEnvVars"},{"location":"steps/isChangeInDevelopment/#dockerimage","text":"Name of the docker image that should be used. If empty, Docker is not used and the command is executed directly on the Jenkins system. back to overview Scope Details Aliases - Type string Mandatory no Default ppiper/cm-client:3.0.0.0 Secret no Configuration scope \u2612 parameter \u2612 general \u2612 steps \u2612 stages Resource references none","title":"dockerImage"},{"location":"steps/isChangeInDevelopment/#dockername","text":"Kubernetes only: Name of the container launching dockerImage. SideCar only: Name of the container in local network. back to overview Scope Details Aliases - Type string Mandatory no Default cmclient Secret no Configuration scope \u2612 parameter \u2612 general \u2612 steps \u2612 stages Resource references none","title":"dockerName"},{"location":"steps/isChangeInDevelopment/#dockeroptions","text":"Docker options to be set when starting the container. back to overview Scope Details Aliases - Type []string Mandatory no Default Secret no Configuration scope \u2612 parameter \u2612 general \u2612 steps \u2612 stages Resource references none","title":"dockerOptions"},{"location":"steps/isChangeInDevelopment/#dockerpullimage","text":"Set this to 'false' to bypass a docker image pull. Useful during development process. Allows testing of images which are available in the local registry only. back to overview Scope Details Aliases - Type bool Mandatory no Default true Possible values - true - false Secret no Configuration scope \u2612 parameter \u2612 general \u2612 steps \u2612 stages Resource references none","title":"dockerPullImage"},{"location":"steps/isChangeInDevelopment/#dockervolumebind","text":"Jenkins-specific: Used for proper environment setup. Volumes that should be mounted into the docker container. back to overview Scope Details Aliases - Type map[string]string Mandatory no Default Secret no Configuration scope \u2612 parameter \u2612 general \u2612 steps \u2612 stages Resource references none","title":"dockerVolumeBind"},{"location":"steps/isChangeInDevelopment/#dockerworkspace","text":"Jenkins-specific: Used for proper environment setup. Kubernetes only: Specifies a dedicated user home directory for the container which will be passed as value for environment variable HOME . back to overview Scope Details Aliases - Type string Mandatory no Default Secret no Configuration scope \u2612 parameter \u2612 general \u2612 steps \u2612 stages Resource references none","title":"dockerWorkspace"},{"location":"steps/isChangeInDevelopment/#endpoint","text":"The service endpoint back to overview Scope Details Aliases changeManagement/endpoint Type string Mandatory yes Default $PIPER_endpoint (if set) Secret no Configuration scope \u2612 parameter \u2612 general \u2612 steps \u2612 stages Resource references none","title":"endpoint"},{"location":"steps/isChangeInDevelopment/#failifstatusisnotindevelopment","text":"lets the build fail in case the change is not in status 'in developent'. Otherwise a warning is emitted to the log back to overview Scope Details Aliases - Type bool Mandatory no Default true Possible values - true - false Secret no Configuration scope \u2612 parameter \u2610 general \u2612 steps \u2612 stages Resource references none","title":"failIfStatusIsNotInDevelopment"},{"location":"steps/isChangeInDevelopment/#password","text":"Service user password to authenticate against the ABAP backend back to overview Scope Details Aliases - Type string Mandatory yes Default $PIPER_password (if set) Secret yes Configuration scope \u2612 parameter \u2610 general \u2610 steps \u2610 stages Resource references Jenkins credential id: id: credentialsId reference to: password","title":"password"},{"location":"steps/isChangeInDevelopment/#script","text":"The common script environment of the Jenkinsfile running. Typically the reference to the script calling the pipeline step is provided with the this parameter, as in script: this . This allows the function to access the commonPipelineEnvironment for retrieving, e.g. configuration parameters. back to overview Scope Details Aliases - Type Jenkins Script Mandatory yes Default Secret no Configuration scope \u2610 parameter \u2610 general \u2610 steps \u2610 stages Resource references none","title":"script"},{"location":"steps/isChangeInDevelopment/#username","text":"Service user to authenticate against the ABAP backend back to overview Scope Details Aliases - Type string Mandatory yes Default $PIPER_username (if set) Secret yes Configuration scope \u2612 parameter \u2612 general \u2612 steps \u2612 stages Resource references Jenkins credential id: id: credentialsId reference to: username","title":"username"},{"location":"steps/isChangeInDevelopment/#verbose","text":"verbose output back to overview Scope Details Aliases - Type bool Mandatory no Default false Possible values - true - false Secret no Configuration scope \u2612 parameter \u2612 general \u2612 steps \u2612 stages Resource references none","title":"verbose"},{"location":"steps/isChangeInDevelopment/#credentialsid","text":"Jenkins 'Username with password' credentials ID containing user and password to authenticate against the ABAP backend back to overview Scope Details Aliases changeManagement/credentialsId Type string Configuration scope \u2612 parameter \u2612 general \u2612 steps \u2612 stages","title":"credentialsId"},{"location":"steps/isChangeInDevelopment/#examples","text":"# config.yaml general : changeManagement : credentialsId : 'SOLMAN_CRED_ID' endpoint : 'https://example.org/cm/solman/endpoint' steps : isChangeInDevelopment : dockerImage : 'ppiper/cm-client:3.0.0.0' transportRequestUploadSOLMAN : dockerImage : 'ppiper/cm-client:3.0.0.0' applicationId : 'APPID' , filePath : '/path/file.ext' , // pipeline script ... stage ( 'Upload' ) { transportRequestDocIDFromGit ( script: this ) isChangeInDevelopment ( script: this ) transportRequestReqIDFromGit ( script: this ) transportRequestUploadSOLMAN ( script: this ) }","title":"Examples"},{"location":"steps/jenkinsMaterializeLog/","text":"jenkinsMaterializeLog \u00b6 Description \u00b6 This step allows you to materialize the Jenkins log file of the running build. It acts as a wrapper executing the passed function body. Note: the file that has been created during step execution will be removed automatically. Prerequisites \u00b6 None Example \u00b6 jenkinsMaterializeLog script: this , { name -> println \"log file: \" + name } Parameters \u00b6 name mandatory default possible values script yes script - The common script environment of the Jenkinsfile running. Typically the reference to the script calling the pipeline step is provided with the this parameter, as in script: this . This allows the function to access the commonPipelineEnvironment for retrieving, e.g. configuration parameters. Step configuration \u00b6 We recommend to define values of step parameters via config.yml file . In following sections of the config.yml the configuration is possible: parameter general step/stage script Dependencies \u00b6 The step depends on the following Jenkins plugins pipeline-utility-steps workflow-basic-steps workflow-cps-global-lib Transitive dependencies are omitted. The list might be incomplete. Consider using the ppiper/jenkins-master docker image. This images comes with preinstalled plugins.","title":"jenkinsMaterializeLog"},{"location":"steps/jenkinsMaterializeLog/#jenkinsmaterializelog","text":"","title":"jenkinsMaterializeLog"},{"location":"steps/jenkinsMaterializeLog/#description","text":"This step allows you to materialize the Jenkins log file of the running build. It acts as a wrapper executing the passed function body. Note: the file that has been created during step execution will be removed automatically.","title":"Description"},{"location":"steps/jenkinsMaterializeLog/#prerequisites","text":"None","title":"Prerequisites"},{"location":"steps/jenkinsMaterializeLog/#example","text":"jenkinsMaterializeLog script: this , { name -> println \"log file: \" + name }","title":"Example"},{"location":"steps/jenkinsMaterializeLog/#parameters","text":"name mandatory default possible values script yes script - The common script environment of the Jenkinsfile running. Typically the reference to the script calling the pipeline step is provided with the this parameter, as in script: this . This allows the function to access the commonPipelineEnvironment for retrieving, e.g. configuration parameters.","title":"Parameters"},{"location":"steps/jenkinsMaterializeLog/#step-configuration","text":"We recommend to define values of step parameters via config.yml file . In following sections of the config.yml the configuration is possible: parameter general step/stage script","title":"Step configuration"},{"location":"steps/jenkinsMaterializeLog/#dependencies","text":"The step depends on the following Jenkins plugins pipeline-utility-steps workflow-basic-steps workflow-cps-global-lib Transitive dependencies are omitted. The list might be incomplete. Consider using the ppiper/jenkins-master docker image. This images comes with preinstalled plugins.","title":"Dependencies"},{"location":"steps/jsonApplyPatch/","text":"jsonApplyPatch \u00b6 Patches a json with a patch file Description \u00b6 This steps patches a json file with patch file using the json patch standard. This step can, e.g., be used if there is a json schema which needs to be patched. Usage \u00b6 We recommend to define values of step parameters via .pipeline/config.yml file . In this case, calling the step is essentially reduced to defining the step name. Calling the step can be done either in an orchestrator specific way (e.g. via a Jenkins library step) or on the command line. Jenkins Command Line library ( 'piper-lib-os' ) jsonApplyPatch script: this piper jsonApplyPatch Parameters \u00b6 Overview - Step \u00b6 Name Mandatory Additional information input yes output yes patch yes script (yes) reference to Jenkins main pipeline script verbose no activates debug output Overview - Execution Environment \u00b6 Orchestrator-specific only These parameters are relevant for orchestrator usage and not considered when using the command line option. Name Mandatory Additional information Details \u00b6 input \u00b6 File path to the json file which schould be patched. back to overview Scope Details Aliases - Type string Mandatory yes Default $PIPER_input (if set) Secret no Configuration scope \u2612 parameter \u2610 general \u2610 steps \u2610 stages Resource references none output \u00b6 File path to destination of the patched json file. back to overview Scope Details Aliases - Type string Mandatory yes Default $PIPER_output (if set) Secret no Configuration scope \u2612 parameter \u2610 general \u2610 steps \u2610 stages Resource references none patch \u00b6 File path to the patch which should be applied to the json file. back to overview Scope Details Aliases - Type string Mandatory yes Default $PIPER_patch (if set) Secret no Configuration scope \u2612 parameter \u2610 general \u2610 steps \u2610 stages Resource references none script \u00b6 The common script environment of the Jenkinsfile running. Typically the reference to the script calling the pipeline step is provided with the this parameter, as in script: this . This allows the function to access the commonPipelineEnvironment for retrieving, e.g. configuration parameters. back to overview Scope Details Aliases - Type Jenkins Script Mandatory yes Default Secret no Configuration scope \u2610 parameter \u2610 general \u2610 steps \u2610 stages Resource references none verbose \u00b6 verbose output back to overview Scope Details Aliases - Type bool Mandatory no Default false Possible values - true - false Secret no Configuration scope \u2612 parameter \u2612 general \u2612 steps \u2612 stages Resource references none","title":"jsonApplyPatch"},{"location":"steps/jsonApplyPatch/#jsonapplypatch","text":"Patches a json with a patch file","title":"jsonApplyPatch"},{"location":"steps/jsonApplyPatch/#description","text":"This steps patches a json file with patch file using the json patch standard. This step can, e.g., be used if there is a json schema which needs to be patched.","title":"Description"},{"location":"steps/jsonApplyPatch/#usage","text":"We recommend to define values of step parameters via .pipeline/config.yml file . In this case, calling the step is essentially reduced to defining the step name. Calling the step can be done either in an orchestrator specific way (e.g. via a Jenkins library step) or on the command line. Jenkins Command Line library ( 'piper-lib-os' ) jsonApplyPatch script: this piper jsonApplyPatch","title":"Usage"},{"location":"steps/jsonApplyPatch/#parameters","text":"","title":"Parameters"},{"location":"steps/jsonApplyPatch/#overview-step","text":"Name Mandatory Additional information input yes output yes patch yes script (yes) reference to Jenkins main pipeline script verbose no activates debug output","title":"Overview - Step"},{"location":"steps/jsonApplyPatch/#overview-execution-environment","text":"Orchestrator-specific only These parameters are relevant for orchestrator usage and not considered when using the command line option. Name Mandatory Additional information","title":"Overview - Execution Environment"},{"location":"steps/jsonApplyPatch/#details","text":"","title":"Details"},{"location":"steps/jsonApplyPatch/#input","text":"File path to the json file which schould be patched. back to overview Scope Details Aliases - Type string Mandatory yes Default $PIPER_input (if set) Secret no Configuration scope \u2612 parameter \u2610 general \u2610 steps \u2610 stages Resource references none","title":"input"},{"location":"steps/jsonApplyPatch/#output","text":"File path to destination of the patched json file. back to overview Scope Details Aliases - Type string Mandatory yes Default $PIPER_output (if set) Secret no Configuration scope \u2612 parameter \u2610 general \u2610 steps \u2610 stages Resource references none","title":"output"},{"location":"steps/jsonApplyPatch/#patch","text":"File path to the patch which should be applied to the json file. back to overview Scope Details Aliases - Type string Mandatory yes Default $PIPER_patch (if set) Secret no Configuration scope \u2612 parameter \u2610 general \u2610 steps \u2610 stages Resource references none","title":"patch"},{"location":"steps/jsonApplyPatch/#script","text":"The common script environment of the Jenkinsfile running. Typically the reference to the script calling the pipeline step is provided with the this parameter, as in script: this . This allows the function to access the commonPipelineEnvironment for retrieving, e.g. configuration parameters. back to overview Scope Details Aliases - Type Jenkins Script Mandatory yes Default Secret no Configuration scope \u2610 parameter \u2610 general \u2610 steps \u2610 stages Resource references none","title":"script"},{"location":"steps/jsonApplyPatch/#verbose","text":"verbose output back to overview Scope Details Aliases - Type bool Mandatory no Default false Possible values - true - false Secret no Configuration scope \u2612 parameter \u2612 general \u2612 steps \u2612 stages Resource references none","title":"verbose"},{"location":"steps/kanikoExecute/","text":"kanikoExecute \u00b6 Executes a Kaniko build for creating a Docker container. Description \u00b6 Executes a Kaniko build for creating a Docker container. Building one container image \u00b6 For building one container image the step expects that one of the containerImage, containerImageName or --destination (via buildOptions) is set. Building multiple container images \u00b6 The step allows you to build multiple container images with one run. This is suitable in case you need to create multiple images for one microservice, e.g. for testing. All images will get the same \"root\" name and the same versioning. Thus, this is not suitable to be used for a monorepo approach! For monorepos you need to use a build tool natively capable to take care for monorepos or implement a custom logic and for example execute this kanikoExecute step multiple times in your custom pipeline. You can activate multiple builds using the parameter containerMultiImageBuild Behavior can be adapted using: containerMultiImageBuildExcludes for defining excludes containerMultiImageBuildTrimDir for removing parent directory part from image name Examples: Multiple containers in sub directories \u00b6 Configuration as follows: general: containerImageName: myImage steps: kanikoExecute: containerMultiImageBuild: true Following Dockerfiles are available in the repository: sub1/Dockerfile sub2/Dockerfile Following final image names will be built: myImage-sub1 myImage-sub2 Multiple containers in sub directories while trimming a directory part \u00b6 Configuration as follows: general: containerImageName: myImage steps: kanikoExecute: containerMultiImageBuild: true containerMultiImageBuildTrimDir: .ci Following Dockerfiles are available in the repository: .ci/sub1/Dockerfile .ci/sub2/Dockerfile Following final image names will be built: myImage-sub1 myImage-sub2 Usage \u00b6 We recommend to define values of step parameters via .pipeline/config.yml file . In this case, calling the step is essentially reduced to defining the step name. Calling the step can be done either in an orchestrator specific way (e.g. via a Jenkins library step) or on the command line. Jenkins Command Line library ( 'piper-lib-os' ) kanikoExecute script: this piper kanikoExecute Outputs \u00b6 Output type Details commonPipelineEnvironment container/registryUrl container/imageNameTag container/imageDigest container/imageNames container/imageNameTags container/imageDigests custom/buildSettingsInfo Prerequisites \u00b6 When pushing to a container registry, you need to maintain the respective credentials in your Jenkins credentials store: Kaniko expects a Docker config.json file containing the credential information for registries. You can create it like explained in the protocodeExecuteScan Prerequisites section . Please copy this file and upload it to your Jenkins for example via Jenkins -> Credentials -> System -> Global credentials (unrestricted) -> Add Credentials -> Kind: Secret file File: upload your config.json file ID: specify id which you then use for the configuration of dockerConfigJsonCredentialsId (see below) Example \u00b6 kanikoExecute script: this Parameters \u00b6 Overview - Step \u00b6 Name Mandatory Additional information containerImageName (yes) mandatory in case of: - containerMultiImageBuild = true script (yes) reference to Jenkins main pipeline script buildOptions no buildSettingsInfo no containerBuildOptions no containerImage no containerImageTag no containerMultiImageBuild no containerMultiImageBuildExcludes no containerMultiImageBuildTrimDir no containerPreparationCommand no containerRegistryPassword no containerRegistryUrl no containerRegistryUser no createBOM no customTlsCertificateLinks no dockerConfigJSON no pass via ENV, Vault or Jenkins credentials ( dockerConfigJsonCredentialsId ) dockerfilePath no multipleImages no readImageDigest no syftDownloadUrl no targetArchitectures no verbose no activates debug output Overview - Execution Environment \u00b6 Orchestrator-specific only These parameters are relevant for orchestrator usage and not considered when using the command line option. Name Mandatory Additional information containerCommand no containerShell no dockerEnvVars no dockerImage no dockerName no dockerOptions no dockerPullImage no dockerVolumeBind no dockerWorkspace no Details \u00b6 buildOptions \u00b6 Defines a list of build options for the kaniko build. back to overview Scope Details Aliases - Type []string Mandatory no Default - --skip-tls-verify-pull - --ignore-path=/workspace - --ignore-path=/busybox Secret no Configuration scope \u2612 parameter \u2610 general \u2612 steps \u2612 stages Resource references none buildSettingsInfo \u00b6 Build settings info is typically filled by the step automatically to create information about the build settings that were used during the mta build. This information is typically used for compliance related processes. back to overview Scope Details Aliases - Type string Mandatory no Default $PIPER_buildSettingsInfo (if set) Secret no Configuration scope \u2612 parameter \u2610 general \u2612 steps \u2612 stages Resource references commonPipelineEnvironment : reference to: custom/buildSettingsInfo containerBuildOptions \u00b6 Deprected, please use buildOptions. Defines the build options for the kaniko build. back to overview Scope Details Aliases - Type string Mandatory no Default $PIPER_containerBuildOptions (if set) Secret no Configuration scope \u2612 parameter \u2610 general \u2612 steps \u2612 stages Resource references none containerCommand \u00b6 Jenkins-specific: Used for proper environment setup. Kubernetes only: Allows to specify start command for container created with dockerImage parameter to overwrite Piper default (/usr/bin/tail -f /dev/null). back to overview Scope Details Aliases - Type string Mandatory no Default /busybox/tail -f /dev/null Secret no Configuration scope \u2612 parameter \u2612 general \u2612 steps \u2612 stages Resource references none containerImage \u00b6 Defines the full name of the Docker image to be created including registry, image name and tag like my.docker.registry/path/myImageName:myTag . If containerImage is not provided, then containerImageName or --destination (via buildOptions) should be provided. back to overview Scope Details Aliases containerImageNameAndTag ( deprecated ) Type string Mandatory no Default $PIPER_containerImage (if set) Secret no Configuration scope \u2612 parameter \u2610 general \u2612 steps \u2612 stages Resource references none containerImageName \u00b6 Name of the container which will be built - will be used instead of parameter containerImage . If containerImageName is not provided, then containerImage or --destination (via buildOptions) should be provided. back to overview Scope Details Aliases dockerImageName Type string Mandatory mandatory in case of: - containerMultiImageBuild = true Default $PIPER_containerImageName (if set) Secret no Configuration scope \u2612 parameter \u2612 general \u2612 steps \u2612 stages Resource references none containerImageTag \u00b6 Tag of the container which will be built - will be used instead of parameter containerImage back to overview Scope Details Aliases artifactVersion Type string Mandatory no Default $PIPER_containerImageTag (if set) Secret no Configuration scope \u2612 parameter \u2612 general \u2612 steps \u2612 stages Resource references commonPipelineEnvironment : reference to: artifactVersion containerMultiImageBuild \u00b6 Defines if multiple containers should be build. Dockerfiles are used using the pattern * /Dockerfile . Excludes can be defined via containerMultiImageBuildExcludes . back to overview Scope Details Aliases - Type bool Mandatory no Default false Possible values - true - false Secret no Configuration scope \u2612 parameter \u2612 general \u2612 steps \u2612 stages Resource references none containerMultiImageBuildExcludes \u00b6 Defines a list of Dockerfile paths to exclude from the build when using containerMultiImageBuild . back to overview Scope Details Aliases - Type []string Mandatory no Default $PIPER_containerMultiImageBuildExcludes (if set) Secret no Configuration scope \u2612 parameter \u2612 general \u2612 steps \u2612 stages Resource references none containerMultiImageBuildTrimDir \u00b6 Defines a trailing directory part which should not be considered in the final image name. back to overview Scope Details Aliases - Type string Mandatory no Default $PIPER_containerMultiImageBuildTrimDir (if set) Secret no Configuration scope \u2612 parameter \u2610 general \u2612 steps \u2612 stages Resource references none containerPreparationCommand \u00b6 Defines the command to prepare the Kaniko container. By default the contained credentials are removed in order to allow anonymous access to container registries. back to overview Scope Details Aliases - Type string Mandatory no Default rm -f /kaniko/.docker/config.json Secret no Configuration scope \u2612 parameter \u2610 general \u2612 steps \u2612 stages Resource references none containerRegistryPassword \u00b6 Password of the Container registry where the image should be pushed to - which will updated in a docker config json file. If a docker config json file is provided via parameter dockerConfigJSON , then the existing file will be enhanced back to overview Scope Details Aliases dockerRegistryPassword Type string Mandatory no Default $PIPER_containerRegistryPassword (if set) Secret no Configuration scope \u2612 parameter \u2612 general \u2612 steps \u2612 stages Resource references commonPipelineEnvironment : reference to: container/repositoryPassword containerRegistryUrl \u00b6 http(s) url of the Container registry where the image should be pushed to - will be used instead of parameter containerImage back to overview Scope Details Aliases dockerRegistryUrl Type string Mandatory no Default $PIPER_containerRegistryUrl (if set) Secret no Configuration scope \u2612 parameter \u2612 general \u2612 steps \u2612 stages Resource references commonPipelineEnvironment : reference to: container/registryUrl containerRegistryUser \u00b6 Username of the Container registry where the image should be pushed to - which will updated in a docker config json file. If a docker config json file is provided via parameter dockerConfigJSON , then the existing file will be enhanced back to overview Scope Details Aliases dockerRegistryUser Type string Mandatory no Default $PIPER_containerRegistryUser (if set) Secret no Configuration scope \u2612 parameter \u2612 general \u2612 steps \u2612 stages Resource references commonPipelineEnvironment : reference to: container/repositoryUsername containerShell \u00b6 Jenkins-specific: Used for proper environment setup. Allows to specify the shell to be executed for container with containerName. back to overview Scope Details Aliases - Type string Mandatory no Default /busybox/sh Secret no Configuration scope \u2612 parameter \u2612 general \u2612 steps \u2612 stages Resource references none createBOM \u00b6 Creates the bill of materials (BOM) using Syft and stores it in a file in CycloneDX 1.4 format. back to overview Scope Details Aliases - Type bool Mandatory no Default false Possible values - true - false Secret no Configuration scope \u2612 parameter \u2612 general \u2612 steps \u2612 stages Resource references none customTlsCertificateLinks \u00b6 List containing download links of custom TLS certificates. This is required to ensure trusted connections to registries with custom certificates. back to overview Scope Details Aliases - Type []string Mandatory no Default $PIPER_customTlsCertificateLinks (if set) Secret no Configuration scope \u2612 parameter \u2610 general \u2612 steps \u2612 stages Resource references none dockerConfigJSON \u00b6 Path to the file .docker/config.json - this is typically provided by your CI/CD system. You can find more details about the Docker credentials in the Docker documentation . back to overview Scope Details Aliases - Type string Mandatory no Default $PIPER_dockerConfigJSON (if set) Secret yes Configuration scope \u2612 parameter \u2610 general \u2612 steps \u2612 stages Resource references Jenkins credential id: id: dockerConfigJsonCredentialsId Vault resource: name: dockerConfigFileVaultSecretName default value: docker-config Vault paths: $(vaultPath)/docker-config $(vaultBasePath)/$(vaultPipelineName)/docker-config $(vaultBasePath)/GROUP-SECRETS/docker-config dockerEnvVars \u00b6 Environment variables to set in the container, e.g. [http_proxy: \"proxy:8080\"]. back to overview Scope Details Aliases - Type map[string]string Mandatory no Default map[container:docker] Secret no Configuration scope \u2612 parameter \u2612 general \u2612 steps \u2612 stages Resource references none dockerImage \u00b6 Name of the docker image that should be used. If empty, Docker is not used and the command is executed directly on the Jenkins system. back to overview Scope Details Aliases - Type string Mandatory no Default gcr.io/kaniko-project/executor:debug Secret no Configuration scope \u2612 parameter \u2612 general \u2612 steps \u2612 stages Resource references none dockerName \u00b6 Kubernetes only: Name of the container launching dockerImage. SideCar only: Name of the container in local network. back to overview Scope Details Aliases - Type string Mandatory no Default Secret no Configuration scope \u2612 parameter \u2612 general \u2612 steps \u2612 stages Resource references none dockerOptions \u00b6 Docker options to be set when starting the container. back to overview Scope Details Aliases - Type []string Mandatory no Default [{-u 0} {--entrypoint }] Secret no Configuration scope \u2612 parameter \u2612 general \u2612 steps \u2612 stages Resource references none dockerPullImage \u00b6 Set this to 'false' to bypass a docker image pull. Useful during development process. Allows testing of images which are available in the local registry only. back to overview Scope Details Aliases - Type bool Mandatory no Default true Possible values - true - false Secret no Configuration scope \u2612 parameter \u2612 general \u2612 steps \u2612 stages Resource references none dockerVolumeBind \u00b6 Jenkins-specific: Used for proper environment setup. Volumes that should be mounted into the docker container. back to overview Scope Details Aliases - Type map[string]string Mandatory no Default Secret no Configuration scope \u2612 parameter \u2612 general \u2612 steps \u2612 stages Resource references none dockerWorkspace \u00b6 Jenkins-specific: Used for proper environment setup. Kubernetes only: Specifies a dedicated user home directory for the container which will be passed as value for environment variable HOME . back to overview Scope Details Aliases - Type string Mandatory no Default Secret no Configuration scope \u2612 parameter \u2612 general \u2612 steps \u2612 stages Resource references none dockerfilePath \u00b6 Defines the location of the Dockerfile relative to the pipeline working directory. back to overview Scope Details Aliases dockerfile Type string Mandatory no Default Dockerfile Secret no Configuration scope \u2612 parameter \u2610 general \u2612 steps \u2612 stages Resource references none multipleImages \u00b6 This parameter is only needed if kanikoExecute should create multiple images using the same root Dockerfile, but with different sub-contexts. Otherwise it can be ignored!!! In case of multiple images, this array contains one entry for each image. Either containerImageName OR containerImage MUST be provided for each entry. contextSubPath MUST be provided for each entry. Array keys: contextSubPath - Set a context subpath. dockerfilePath - Dockerfile path (optional). If empty, root will be used. containerImageName - Name of the container which will be built. containerImageTag - Tag of the container which will be built. If empty - root containerImageTag will be used. containerImage - Defines the full name of the Docker image to be created including registry. containerRegistryUrl : docker.io containerImageTag : latest multipleImages : - containerImageName : myImage1 containerImageTag : v1.0.0 contextSubPath : path/to/folder back to overview Scope Details Aliases images Type []map[string]interface{} Mandatory no Default $PIPER_multipleImages (if set) Secret no Configuration scope \u2612 parameter \u2610 general \u2612 steps \u2610 stages Resource references none readImageDigest \u00b6 back to overview Scope Details Aliases - Type bool Mandatory no Default false Possible values - true - false Secret no Configuration scope \u2612 parameter \u2610 general \u2612 steps \u2612 stages Resource references none script \u00b6 The common script environment of the Jenkinsfile running. Typically the reference to the script calling the pipeline step is provided with the this parameter, as in script: this . This allows the function to access the commonPipelineEnvironment for retrieving, e.g. configuration parameters. back to overview Scope Details Aliases - Type Jenkins Script Mandatory yes Default Secret no Configuration scope \u2610 parameter \u2610 general \u2610 steps \u2610 stages Resource references none syftDownloadUrl \u00b6 Specifies the download url of the Syft Linux amd64 tar binary file. This can be found at https://github.com/anchore/syft/releases/. back to overview Scope Details Aliases - Type string Mandatory no Default https://github.com/anchore/syft/releases/download/v1.22.0/syft_1.22.0_linux_amd64.tar.gz Secret no Configuration scope \u2612 parameter \u2610 general \u2612 steps \u2610 stages Resource references none targetArchitectures \u00b6 Defines the target architectures for which the build should run using OS and architecture separated by a comma. (EXPERIMENTAL) back to overview Scope Details Aliases - Type []string Mandatory no Default Secret no Configuration scope \u2612 parameter \u2612 general \u2612 steps \u2612 stages Resource references none verbose \u00b6 verbose output back to overview Scope Details Aliases - Type bool Mandatory no Default false Possible values - true - false Secret no Configuration scope \u2612 parameter \u2612 general \u2612 steps \u2612 stages Resource references none dockerConfigJsonCredentialsId \u00b6 Jenkins 'Secret file' credentials ID containing Docker config.json (with registry credential(s)). You can create it like explained in the protocodeExecuteScan Prerequisites section . back to overview Scope Details Aliases - Type string Configuration scope \u2612 parameter \u2612 general \u2612 steps \u2612 stages","title":"kanikoExecute"},{"location":"steps/kanikoExecute/#kanikoexecute","text":"Executes a Kaniko build for creating a Docker container.","title":"kanikoExecute"},{"location":"steps/kanikoExecute/#description","text":"Executes a Kaniko build for creating a Docker container.","title":"Description"},{"location":"steps/kanikoExecute/#building-one-container-image","text":"For building one container image the step expects that one of the containerImage, containerImageName or --destination (via buildOptions) is set.","title":"Building one container image"},{"location":"steps/kanikoExecute/#building-multiple-container-images","text":"The step allows you to build multiple container images with one run. This is suitable in case you need to create multiple images for one microservice, e.g. for testing. All images will get the same \"root\" name and the same versioning. Thus, this is not suitable to be used for a monorepo approach! For monorepos you need to use a build tool natively capable to take care for monorepos or implement a custom logic and for example execute this kanikoExecute step multiple times in your custom pipeline. You can activate multiple builds using the parameter containerMultiImageBuild Behavior can be adapted using: containerMultiImageBuildExcludes for defining excludes containerMultiImageBuildTrimDir for removing parent directory part from image name Examples:","title":"Building multiple container images"},{"location":"steps/kanikoExecute/#multiple-containers-in-sub-directories","text":"Configuration as follows: general: containerImageName: myImage steps: kanikoExecute: containerMultiImageBuild: true Following Dockerfiles are available in the repository: sub1/Dockerfile sub2/Dockerfile Following final image names will be built: myImage-sub1 myImage-sub2","title":"Multiple containers in sub directories"},{"location":"steps/kanikoExecute/#multiple-containers-in-sub-directories-while-trimming-a-directory-part","text":"Configuration as follows: general: containerImageName: myImage steps: kanikoExecute: containerMultiImageBuild: true containerMultiImageBuildTrimDir: .ci Following Dockerfiles are available in the repository: .ci/sub1/Dockerfile .ci/sub2/Dockerfile Following final image names will be built: myImage-sub1 myImage-sub2","title":"Multiple containers in sub directories while trimming a directory part"},{"location":"steps/kanikoExecute/#usage","text":"We recommend to define values of step parameters via .pipeline/config.yml file . In this case, calling the step is essentially reduced to defining the step name. Calling the step can be done either in an orchestrator specific way (e.g. via a Jenkins library step) or on the command line. Jenkins Command Line library ( 'piper-lib-os' ) kanikoExecute script: this piper kanikoExecute","title":"Usage"},{"location":"steps/kanikoExecute/#outputs","text":"Output type Details commonPipelineEnvironment container/registryUrl container/imageNameTag container/imageDigest container/imageNames container/imageNameTags container/imageDigests custom/buildSettingsInfo","title":"Outputs"},{"location":"steps/kanikoExecute/#prerequisites","text":"When pushing to a container registry, you need to maintain the respective credentials in your Jenkins credentials store: Kaniko expects a Docker config.json file containing the credential information for registries. You can create it like explained in the protocodeExecuteScan Prerequisites section . Please copy this file and upload it to your Jenkins for example via Jenkins -> Credentials -> System -> Global credentials (unrestricted) -> Add Credentials -> Kind: Secret file File: upload your config.json file ID: specify id which you then use for the configuration of dockerConfigJsonCredentialsId (see below)","title":"Prerequisites"},{"location":"steps/kanikoExecute/#example","text":"kanikoExecute script: this","title":"Example"},{"location":"steps/kanikoExecute/#parameters","text":"","title":"Parameters"},{"location":"steps/kanikoExecute/#overview-step","text":"Name Mandatory Additional information containerImageName (yes) mandatory in case of: - containerMultiImageBuild = true script (yes) reference to Jenkins main pipeline script buildOptions no buildSettingsInfo no containerBuildOptions no containerImage no containerImageTag no containerMultiImageBuild no containerMultiImageBuildExcludes no containerMultiImageBuildTrimDir no containerPreparationCommand no containerRegistryPassword no containerRegistryUrl no containerRegistryUser no createBOM no customTlsCertificateLinks no dockerConfigJSON no pass via ENV, Vault or Jenkins credentials ( dockerConfigJsonCredentialsId ) dockerfilePath no multipleImages no readImageDigest no syftDownloadUrl no targetArchitectures no verbose no activates debug output","title":"Overview - Step"},{"location":"steps/kanikoExecute/#overview-execution-environment","text":"Orchestrator-specific only These parameters are relevant for orchestrator usage and not considered when using the command line option. Name Mandatory Additional information containerCommand no containerShell no dockerEnvVars no dockerImage no dockerName no dockerOptions no dockerPullImage no dockerVolumeBind no dockerWorkspace no","title":"Overview - Execution Environment"},{"location":"steps/kanikoExecute/#details","text":"","title":"Details"},{"location":"steps/kanikoExecute/#buildoptions","text":"Defines a list of build options for the kaniko build. back to overview Scope Details Aliases - Type []string Mandatory no Default - --skip-tls-verify-pull - --ignore-path=/workspace - --ignore-path=/busybox Secret no Configuration scope \u2612 parameter \u2610 general \u2612 steps \u2612 stages Resource references none","title":"buildOptions"},{"location":"steps/kanikoExecute/#buildsettingsinfo","text":"Build settings info is typically filled by the step automatically to create information about the build settings that were used during the mta build. This information is typically used for compliance related processes. back to overview Scope Details Aliases - Type string Mandatory no Default $PIPER_buildSettingsInfo (if set) Secret no Configuration scope \u2612 parameter \u2610 general \u2612 steps \u2612 stages Resource references commonPipelineEnvironment : reference to: custom/buildSettingsInfo","title":"buildSettingsInfo"},{"location":"steps/kanikoExecute/#containerbuildoptions","text":"Deprected, please use buildOptions. Defines the build options for the kaniko build. back to overview Scope Details Aliases - Type string Mandatory no Default $PIPER_containerBuildOptions (if set) Secret no Configuration scope \u2612 parameter \u2610 general \u2612 steps \u2612 stages Resource references none","title":"containerBuildOptions"},{"location":"steps/kanikoExecute/#containercommand","text":"Jenkins-specific: Used for proper environment setup. Kubernetes only: Allows to specify start command for container created with dockerImage parameter to overwrite Piper default (/usr/bin/tail -f /dev/null). back to overview Scope Details Aliases - Type string Mandatory no Default /busybox/tail -f /dev/null Secret no Configuration scope \u2612 parameter \u2612 general \u2612 steps \u2612 stages Resource references none","title":"containerCommand"},{"location":"steps/kanikoExecute/#containerimage","text":"Defines the full name of the Docker image to be created including registry, image name and tag like my.docker.registry/path/myImageName:myTag . If containerImage is not provided, then containerImageName or --destination (via buildOptions) should be provided. back to overview Scope Details Aliases containerImageNameAndTag ( deprecated ) Type string Mandatory no Default $PIPER_containerImage (if set) Secret no Configuration scope \u2612 parameter \u2610 general \u2612 steps \u2612 stages Resource references none","title":"containerImage"},{"location":"steps/kanikoExecute/#containerimagename","text":"Name of the container which will be built - will be used instead of parameter containerImage . If containerImageName is not provided, then containerImage or --destination (via buildOptions) should be provided. back to overview Scope Details Aliases dockerImageName Type string Mandatory mandatory in case of: - containerMultiImageBuild = true Default $PIPER_containerImageName (if set) Secret no Configuration scope \u2612 parameter \u2612 general \u2612 steps \u2612 stages Resource references none","title":"containerImageName"},{"location":"steps/kanikoExecute/#containerimagetag","text":"Tag of the container which will be built - will be used instead of parameter containerImage back to overview Scope Details Aliases artifactVersion Type string Mandatory no Default $PIPER_containerImageTag (if set) Secret no Configuration scope \u2612 parameter \u2612 general \u2612 steps \u2612 stages Resource references commonPipelineEnvironment : reference to: artifactVersion","title":"containerImageTag"},{"location":"steps/kanikoExecute/#containermultiimagebuild","text":"Defines if multiple containers should be build. Dockerfiles are used using the pattern * /Dockerfile . Excludes can be defined via containerMultiImageBuildExcludes . back to overview Scope Details Aliases - Type bool Mandatory no Default false Possible values - true - false Secret no Configuration scope \u2612 parameter \u2612 general \u2612 steps \u2612 stages Resource references none","title":"containerMultiImageBuild"},{"location":"steps/kanikoExecute/#containermultiimagebuildexcludes","text":"Defines a list of Dockerfile paths to exclude from the build when using containerMultiImageBuild . back to overview Scope Details Aliases - Type []string Mandatory no Default $PIPER_containerMultiImageBuildExcludes (if set) Secret no Configuration scope \u2612 parameter \u2612 general \u2612 steps \u2612 stages Resource references none","title":"containerMultiImageBuildExcludes"},{"location":"steps/kanikoExecute/#containermultiimagebuildtrimdir","text":"Defines a trailing directory part which should not be considered in the final image name. back to overview Scope Details Aliases - Type string Mandatory no Default $PIPER_containerMultiImageBuildTrimDir (if set) Secret no Configuration scope \u2612 parameter \u2610 general \u2612 steps \u2612 stages Resource references none","title":"containerMultiImageBuildTrimDir"},{"location":"steps/kanikoExecute/#containerpreparationcommand","text":"Defines the command to prepare the Kaniko container. By default the contained credentials are removed in order to allow anonymous access to container registries. back to overview Scope Details Aliases - Type string Mandatory no Default rm -f /kaniko/.docker/config.json Secret no Configuration scope \u2612 parameter \u2610 general \u2612 steps \u2612 stages Resource references none","title":"containerPreparationCommand"},{"location":"steps/kanikoExecute/#containerregistrypassword","text":"Password of the Container registry where the image should be pushed to - which will updated in a docker config json file. If a docker config json file is provided via parameter dockerConfigJSON , then the existing file will be enhanced back to overview Scope Details Aliases dockerRegistryPassword Type string Mandatory no Default $PIPER_containerRegistryPassword (if set) Secret no Configuration scope \u2612 parameter \u2612 general \u2612 steps \u2612 stages Resource references commonPipelineEnvironment : reference to: container/repositoryPassword","title":"containerRegistryPassword"},{"location":"steps/kanikoExecute/#containerregistryurl","text":"http(s) url of the Container registry where the image should be pushed to - will be used instead of parameter containerImage back to overview Scope Details Aliases dockerRegistryUrl Type string Mandatory no Default $PIPER_containerRegistryUrl (if set) Secret no Configuration scope \u2612 parameter \u2612 general \u2612 steps \u2612 stages Resource references commonPipelineEnvironment : reference to: container/registryUrl","title":"containerRegistryUrl"},{"location":"steps/kanikoExecute/#containerregistryuser","text":"Username of the Container registry where the image should be pushed to - which will updated in a docker config json file. If a docker config json file is provided via parameter dockerConfigJSON , then the existing file will be enhanced back to overview Scope Details Aliases dockerRegistryUser Type string Mandatory no Default $PIPER_containerRegistryUser (if set) Secret no Configuration scope \u2612 parameter \u2612 general \u2612 steps \u2612 stages Resource references commonPipelineEnvironment : reference to: container/repositoryUsername","title":"containerRegistryUser"},{"location":"steps/kanikoExecute/#containershell","text":"Jenkins-specific: Used for proper environment setup. Allows to specify the shell to be executed for container with containerName. back to overview Scope Details Aliases - Type string Mandatory no Default /busybox/sh Secret no Configuration scope \u2612 parameter \u2612 general \u2612 steps \u2612 stages Resource references none","title":"containerShell"},{"location":"steps/kanikoExecute/#createbom","text":"Creates the bill of materials (BOM) using Syft and stores it in a file in CycloneDX 1.4 format. back to overview Scope Details Aliases - Type bool Mandatory no Default false Possible values - true - false Secret no Configuration scope \u2612 parameter \u2612 general \u2612 steps \u2612 stages Resource references none","title":"createBOM"},{"location":"steps/kanikoExecute/#customtlscertificatelinks","text":"List containing download links of custom TLS certificates. This is required to ensure trusted connections to registries with custom certificates. back to overview Scope Details Aliases - Type []string Mandatory no Default $PIPER_customTlsCertificateLinks (if set) Secret no Configuration scope \u2612 parameter \u2610 general \u2612 steps \u2612 stages Resource references none","title":"customTlsCertificateLinks"},{"location":"steps/kanikoExecute/#dockerconfigjson","text":"Path to the file .docker/config.json - this is typically provided by your CI/CD system. You can find more details about the Docker credentials in the Docker documentation . back to overview Scope Details Aliases - Type string Mandatory no Default $PIPER_dockerConfigJSON (if set) Secret yes Configuration scope \u2612 parameter \u2610 general \u2612 steps \u2612 stages Resource references Jenkins credential id: id: dockerConfigJsonCredentialsId Vault resource: name: dockerConfigFileVaultSecretName default value: docker-config Vault paths: $(vaultPath)/docker-config $(vaultBasePath)/$(vaultPipelineName)/docker-config $(vaultBasePath)/GROUP-SECRETS/docker-config","title":"dockerConfigJSON"},{"location":"steps/kanikoExecute/#dockerenvvars","text":"Environment variables to set in the container, e.g. [http_proxy: \"proxy:8080\"]. back to overview Scope Details Aliases - Type map[string]string Mandatory no Default map[container:docker] Secret no Configuration scope \u2612 parameter \u2612 general \u2612 steps \u2612 stages Resource references none","title":"dockerEnvVars"},{"location":"steps/kanikoExecute/#dockerimage","text":"Name of the docker image that should be used. If empty, Docker is not used and the command is executed directly on the Jenkins system. back to overview Scope Details Aliases - Type string Mandatory no Default gcr.io/kaniko-project/executor:debug Secret no Configuration scope \u2612 parameter \u2612 general \u2612 steps \u2612 stages Resource references none","title":"dockerImage"},{"location":"steps/kanikoExecute/#dockername","text":"Kubernetes only: Name of the container launching dockerImage. SideCar only: Name of the container in local network. back to overview Scope Details Aliases - Type string Mandatory no Default Secret no Configuration scope \u2612 parameter \u2612 general \u2612 steps \u2612 stages Resource references none","title":"dockerName"},{"location":"steps/kanikoExecute/#dockeroptions","text":"Docker options to be set when starting the container. back to overview Scope Details Aliases - Type []string Mandatory no Default [{-u 0} {--entrypoint }] Secret no Configuration scope \u2612 parameter \u2612 general \u2612 steps \u2612 stages Resource references none","title":"dockerOptions"},{"location":"steps/kanikoExecute/#dockerpullimage","text":"Set this to 'false' to bypass a docker image pull. Useful during development process. Allows testing of images which are available in the local registry only. back to overview Scope Details Aliases - Type bool Mandatory no Default true Possible values - true - false Secret no Configuration scope \u2612 parameter \u2612 general \u2612 steps \u2612 stages Resource references none","title":"dockerPullImage"},{"location":"steps/kanikoExecute/#dockervolumebind","text":"Jenkins-specific: Used for proper environment setup. Volumes that should be mounted into the docker container. back to overview Scope Details Aliases - Type map[string]string Mandatory no Default Secret no Configuration scope \u2612 parameter \u2612 general \u2612 steps \u2612 stages Resource references none","title":"dockerVolumeBind"},{"location":"steps/kanikoExecute/#dockerworkspace","text":"Jenkins-specific: Used for proper environment setup. Kubernetes only: Specifies a dedicated user home directory for the container which will be passed as value for environment variable HOME . back to overview Scope Details Aliases - Type string Mandatory no Default Secret no Configuration scope \u2612 parameter \u2612 general \u2612 steps \u2612 stages Resource references none","title":"dockerWorkspace"},{"location":"steps/kanikoExecute/#dockerfilepath","text":"Defines the location of the Dockerfile relative to the pipeline working directory. back to overview Scope Details Aliases dockerfile Type string Mandatory no Default Dockerfile Secret no Configuration scope \u2612 parameter \u2610 general \u2612 steps \u2612 stages Resource references none","title":"dockerfilePath"},{"location":"steps/kanikoExecute/#multipleimages","text":"This parameter is only needed if kanikoExecute should create multiple images using the same root Dockerfile, but with different sub-contexts. Otherwise it can be ignored!!! In case of multiple images, this array contains one entry for each image. Either containerImageName OR containerImage MUST be provided for each entry. contextSubPath MUST be provided for each entry. Array keys: contextSubPath - Set a context subpath. dockerfilePath - Dockerfile path (optional). If empty, root will be used. containerImageName - Name of the container which will be built. containerImageTag - Tag of the container which will be built. If empty - root containerImageTag will be used. containerImage - Defines the full name of the Docker image to be created including registry. containerRegistryUrl : docker.io containerImageTag : latest multipleImages : - containerImageName : myImage1 containerImageTag : v1.0.0 contextSubPath : path/to/folder back to overview Scope Details Aliases images Type []map[string]interface{} Mandatory no Default $PIPER_multipleImages (if set) Secret no Configuration scope \u2612 parameter \u2610 general \u2612 steps \u2610 stages Resource references none","title":"multipleImages"},{"location":"steps/kanikoExecute/#readimagedigest","text":"back to overview Scope Details Aliases - Type bool Mandatory no Default false Possible values - true - false Secret no Configuration scope \u2612 parameter \u2610 general \u2612 steps \u2612 stages Resource references none","title":"readImageDigest"},{"location":"steps/kanikoExecute/#script","text":"The common script environment of the Jenkinsfile running. Typically the reference to the script calling the pipeline step is provided with the this parameter, as in script: this . This allows the function to access the commonPipelineEnvironment for retrieving, e.g. configuration parameters. back to overview Scope Details Aliases - Type Jenkins Script Mandatory yes Default Secret no Configuration scope \u2610 parameter \u2610 general \u2610 steps \u2610 stages Resource references none","title":"script"},{"location":"steps/kanikoExecute/#syftdownloadurl","text":"Specifies the download url of the Syft Linux amd64 tar binary file. This can be found at https://github.com/anchore/syft/releases/. back to overview Scope Details Aliases - Type string Mandatory no Default https://github.com/anchore/syft/releases/download/v1.22.0/syft_1.22.0_linux_amd64.tar.gz Secret no Configuration scope \u2612 parameter \u2610 general \u2612 steps \u2610 stages Resource references none","title":"syftDownloadUrl"},{"location":"steps/kanikoExecute/#targetarchitectures","text":"Defines the target architectures for which the build should run using OS and architecture separated by a comma. (EXPERIMENTAL) back to overview Scope Details Aliases - Type []string Mandatory no Default Secret no Configuration scope \u2612 parameter \u2612 general \u2612 steps \u2612 stages Resource references none","title":"targetArchitectures"},{"location":"steps/kanikoExecute/#verbose","text":"verbose output back to overview Scope Details Aliases - Type bool Mandatory no Default false Possible values - true - false Secret no Configuration scope \u2612 parameter \u2612 general \u2612 steps \u2612 stages Resource references none","title":"verbose"},{"location":"steps/kanikoExecute/#dockerconfigjsoncredentialsid","text":"Jenkins 'Secret file' credentials ID containing Docker config.json (with registry credential(s)). You can create it like explained in the protocodeExecuteScan Prerequisites section . back to overview Scope Details Aliases - Type string Configuration scope \u2612 parameter \u2612 general \u2612 steps \u2612 stages","title":"dockerConfigJsonCredentialsId"},{"location":"steps/karmaExecuteTests/","text":"karmaExecuteTests \u00b6 Executes the Karma test runner Please note that Karma is marked as DEPRECATED as of 04/2023. There is no migration path defined yet. Description \u00b6 In this step the ( Karma test runner ) is executed. The step is using the seleniumExecuteTest step to spin up two containers in a Docker network: a Selenium/Chrome container ( selenium/standalone-chrome ) a NodeJS container ( node:lts-bookworm ) In the Docker network, the containers can be referenced by the values provided in dockerName and sidecarName , the default values are karma and selenium . These values must be used in the hostname properties of the test configuration ( Karma and WebDriver ). Note In a Kubernetes environment, the containers both need to be referenced with localhost . Usage \u00b6 We recommend to define values of step parameters via .pipeline/config.yml file . In this case, calling the step is essentially reduced to defining the step name. Calling the step can be done either in an orchestrator specific way (e.g. via a Jenkins library step) or on the command line. Jenkins Command Line library ( 'piper-lib-os' ) karmaExecuteTests script: this piper karmaExecuteTests Outputs \u00b6 Output type Details Prerequisites \u00b6 running Karma tests - have a NPM module with running tests executed with Karma configured WebDriver - have the karma-webdriver-launcher package installed and a custom, WebDriver-based browser configured in Karma Parameters \u00b6 Overview - Step \u00b6 Name Mandatory Additional information script (yes) reference to Jenkins main pipeline script installCommand no modules no runCommand no verbose no activates debug output Overview - Execution Environment \u00b6 Orchestrator-specific only These parameters are relevant for orchestrator usage and not considered when using the command line option. Name Mandatory Additional information containerCommand no containerName no containerShell no dockerEnvVars no dockerImage no dockerName no dockerOptions no dockerPullImage no dockerVolumeBind no dockerWorkspace no sidecarEnvVars no sidecarImage no sidecarName no sidecarOptions no sidecarPullImage no sidecarReadyCommand no sidecarVolumeBind no sidecarWorkspace no stashContent no Details \u00b6 containerCommand \u00b6 Jenkins-specific: Used for proper environment setup. Kubernetes only: Allows to specify start command for container created with dockerImage parameter to overwrite Piper default (/usr/bin/tail -f /dev/null). back to overview Scope Details Aliases - Type string Mandatory no Default Secret no Configuration scope \u2612 parameter \u2612 general \u2612 steps \u2612 stages Resource references none containerName \u00b6 Jenkins-specific: Used for proper environment setup. Optional configuration in combination with containerMap to define the container where the commands should be executed in. back to overview Scope Details Aliases - Type string Mandatory no Default karma Secret no Configuration scope \u2612 parameter \u2612 general \u2612 steps \u2612 stages Resource references none containerShell \u00b6 Jenkins-specific: Used for proper environment setup. Allows to specify the shell to be executed for container with containerName. back to overview Scope Details Aliases - Type string Mandatory no Default Secret no Configuration scope \u2612 parameter \u2612 general \u2612 steps \u2612 stages Resource references none dockerEnvVars \u00b6 Environment variables to set in the container, e.g. [http_proxy: \"proxy:8080\"]. back to overview Scope Details Aliases - Type map[string]string Mandatory no Default map[NO_PROXY:localhost,selenium,$NO_PROXY PIPER_SELENIUM_HOSTNAME:karma PIPER_SELENIUM_WEBDRIVER_HOSTNAME:selenium PIPER_SELENIUM_WEBDRIVER_PORT:4444 no_proxy:localhost,selenium,$no_proxy] Secret no Configuration scope \u2612 parameter \u2612 general \u2612 steps \u2612 stages Resource references none dockerImage \u00b6 Name of the docker image that should be used. If empty, Docker is not used and the command is executed directly on the Jenkins system. back to overview Scope Details Aliases - Type string Mandatory no Default node:22-bookworm Secret no Configuration scope \u2612 parameter \u2612 general \u2612 steps \u2612 stages Resource references none dockerName \u00b6 Kubernetes only: Name of the container launching dockerImage. SideCar only: Name of the container in local network. back to overview Scope Details Aliases - Type string Mandatory no Default karma Secret no Configuration scope \u2612 parameter \u2612 general \u2612 steps \u2612 stages Resource references none dockerOptions \u00b6 Docker options to be set when starting the container. back to overview Scope Details Aliases - Type []string Mandatory no Default Secret no Configuration scope \u2612 parameter \u2612 general \u2612 steps \u2612 stages Resource references none dockerPullImage \u00b6 Set this to 'false' to bypass a docker image pull. Useful during development process. Allows testing of images which are available in the local registry only. back to overview Scope Details Aliases - Type bool Mandatory no Default true Possible values - true - false Secret no Configuration scope \u2612 parameter \u2612 general \u2612 steps \u2612 stages Resource references none dockerVolumeBind \u00b6 Jenkins-specific: Used for proper environment setup. Volumes that should be mounted into the docker container. back to overview Scope Details Aliases - Type map[string]string Mandatory no Default Secret no Configuration scope \u2612 parameter \u2612 general \u2612 steps \u2612 stages Resource references none dockerWorkspace \u00b6 Jenkins-specific: Used for proper environment setup. Kubernetes only: Specifies a dedicated user home directory for the container which will be passed as value for environment variable HOME . back to overview Scope Details Aliases - Type string Mandatory no Default /home/node Secret no Configuration scope \u2612 parameter \u2612 general \u2612 steps \u2612 stages Resource references none installCommand \u00b6 The command that is executed to install the test tool. back to overview Scope Details Aliases - Type string Mandatory no Default npm install --quiet Secret no Configuration scope \u2612 parameter \u2612 general \u2612 steps \u2612 stages Resource references none modules \u00b6 Define the paths of the modules to execute tests on. back to overview Scope Details Aliases - Type []string Mandatory no Default - . Secret no Configuration scope \u2612 parameter \u2610 general \u2612 steps \u2612 stages Resource references none runCommand \u00b6 The command that is executed to start the tests. back to overview Scope Details Aliases - Type string Mandatory no Default npm run karma Secret no Configuration scope \u2612 parameter \u2612 general \u2612 steps \u2612 stages Resource references none script \u00b6 The common script environment of the Jenkinsfile running. Typically the reference to the script calling the pipeline step is provided with the this parameter, as in script: this . This allows the function to access the commonPipelineEnvironment for retrieving, e.g. configuration parameters. back to overview Scope Details Aliases - Type Jenkins Script Mandatory yes Default Secret no Configuration scope \u2610 parameter \u2610 general \u2610 steps \u2610 stages Resource references none sidecarEnvVars \u00b6 A map of environment variables to set in the sidecar container, similar to dockerEnvVars . back to overview Scope Details Aliases - Type map[string]string Mandatory no Default Secret no Configuration scope \u2612 parameter \u2612 general \u2612 steps \u2612 stages Resource references none sidecarImage \u00b6 The name of the docker image of the sidecar container. If empty, no sidecar container is started. Similar to dockerImage . back to overview Scope Details Aliases - Type string Mandatory no Default Secret no Configuration scope \u2612 parameter \u2612 general \u2612 steps \u2612 stages Resource references none sidecarName \u00b6 Name of the sidecar container. Similar to dockerName . back to overview Scope Details Aliases - Type string Mandatory no Default Secret no Configuration scope \u2612 parameter \u2612 general \u2612 steps \u2612 stages Resource references none sidecarOptions \u00b6 Options to be set when starting the sidecar container. Similar to dockerOptions . back to overview Scope Details Aliases - Type []string Mandatory no Default Secret no Configuration scope \u2612 parameter \u2612 general \u2612 steps \u2612 stages Resource references none sidecarPullImage \u00b6 Set this to 'false' to bypass a docker image pull. Useful during development process. Allows testing of images which are available in the local registry only. back to overview Scope Details Aliases - Type bool Mandatory no Default false Possible values - true - false Secret no Configuration scope \u2612 parameter \u2612 general \u2612 steps \u2612 stages Resource references none sidecarReadyCommand \u00b6 Jenkins-specific: Used for proper environment setup. Command executed inside the container which returns exit code 0 when the container is ready to be used. back to overview Scope Details Aliases - Type string Mandatory no Default Secret no Configuration scope \u2612 parameter \u2612 general \u2612 steps \u2612 stages Resource references none sidecarVolumeBind \u00b6 Volumes that should be mounted into the sidecar container. Similar to dockerVolumeBind . back to overview Scope Details Aliases - Type map[string]string Mandatory no Default Secret no Configuration scope \u2612 parameter \u2612 general \u2612 steps \u2612 stages Resource references none sidecarWorkspace \u00b6 Jenkins-specific: Used for proper environment setup. back to overview Scope Details Aliases - Type string Mandatory no Default Secret no Configuration scope \u2612 parameter \u2612 general \u2612 steps \u2612 stages Resource references none stashContent \u00b6 Jenkins-specific: Used for proper environment setup. Specific stashes that should be considered for the step execution. back to overview Scope Details Aliases - Type []string Mandatory no Default - buildDescriptor - tests Secret no Configuration scope \u2612 parameter \u2612 general \u2612 steps \u2612 stages Resource references none verbose \u00b6 verbose output back to overview Scope Details Aliases - Type bool Mandatory no Default false Possible values - true - false Secret no Configuration scope \u2612 parameter \u2612 general \u2612 steps \u2612 stages Resource references none seleniumHubCredentialsId \u00b6 Defines the id of the user/password credentials to be used to connect to a Selenium Hub. The credentials are provided in the environment variables PIPER_SELENIUM_HUB_USER and PIPER_SELENIUM_HUB_PASSWORD . back to overview Scope Details Aliases - Type string Configuration scope \u2612 parameter \u2612 general \u2612 steps \u2612 stages Side effects \u00b6 Step uses seleniumExecuteTest & dockerExecute inside. Exceptions \u00b6 none Example \u00b6 karmaExecuteTests script: this , modules: [ './shoppinglist' , './catalog' ]","title":"karmaExecuteTests"},{"location":"steps/karmaExecuteTests/#karmaexecutetests","text":"Executes the Karma test runner Please note that Karma is marked as DEPRECATED as of 04/2023. There is no migration path defined yet.","title":"karmaExecuteTests"},{"location":"steps/karmaExecuteTests/#description","text":"In this step the ( Karma test runner ) is executed. The step is using the seleniumExecuteTest step to spin up two containers in a Docker network: a Selenium/Chrome container ( selenium/standalone-chrome ) a NodeJS container ( node:lts-bookworm ) In the Docker network, the containers can be referenced by the values provided in dockerName and sidecarName , the default values are karma and selenium . These values must be used in the hostname properties of the test configuration ( Karma and WebDriver ). Note In a Kubernetes environment, the containers both need to be referenced with localhost .","title":"Description"},{"location":"steps/karmaExecuteTests/#usage","text":"We recommend to define values of step parameters via .pipeline/config.yml file . In this case, calling the step is essentially reduced to defining the step name. Calling the step can be done either in an orchestrator specific way (e.g. via a Jenkins library step) or on the command line. Jenkins Command Line library ( 'piper-lib-os' ) karmaExecuteTests script: this piper karmaExecuteTests","title":"Usage"},{"location":"steps/karmaExecuteTests/#outputs","text":"Output type Details","title":"Outputs"},{"location":"steps/karmaExecuteTests/#prerequisites","text":"running Karma tests - have a NPM module with running tests executed with Karma configured WebDriver - have the karma-webdriver-launcher package installed and a custom, WebDriver-based browser configured in Karma","title":"Prerequisites"},{"location":"steps/karmaExecuteTests/#parameters","text":"","title":"Parameters"},{"location":"steps/karmaExecuteTests/#overview-step","text":"Name Mandatory Additional information script (yes) reference to Jenkins main pipeline script installCommand no modules no runCommand no verbose no activates debug output","title":"Overview - Step"},{"location":"steps/karmaExecuteTests/#overview-execution-environment","text":"Orchestrator-specific only These parameters are relevant for orchestrator usage and not considered when using the command line option. Name Mandatory Additional information containerCommand no containerName no containerShell no dockerEnvVars no dockerImage no dockerName no dockerOptions no dockerPullImage no dockerVolumeBind no dockerWorkspace no sidecarEnvVars no sidecarImage no sidecarName no sidecarOptions no sidecarPullImage no sidecarReadyCommand no sidecarVolumeBind no sidecarWorkspace no stashContent no","title":"Overview - Execution Environment"},{"location":"steps/karmaExecuteTests/#details","text":"","title":"Details"},{"location":"steps/karmaExecuteTests/#containercommand","text":"Jenkins-specific: Used for proper environment setup. Kubernetes only: Allows to specify start command for container created with dockerImage parameter to overwrite Piper default (/usr/bin/tail -f /dev/null). back to overview Scope Details Aliases - Type string Mandatory no Default Secret no Configuration scope \u2612 parameter \u2612 general \u2612 steps \u2612 stages Resource references none","title":"containerCommand"},{"location":"steps/karmaExecuteTests/#containername","text":"Jenkins-specific: Used for proper environment setup. Optional configuration in combination with containerMap to define the container where the commands should be executed in. back to overview Scope Details Aliases - Type string Mandatory no Default karma Secret no Configuration scope \u2612 parameter \u2612 general \u2612 steps \u2612 stages Resource references none","title":"containerName"},{"location":"steps/karmaExecuteTests/#containershell","text":"Jenkins-specific: Used for proper environment setup. Allows to specify the shell to be executed for container with containerName. back to overview Scope Details Aliases - Type string Mandatory no Default Secret no Configuration scope \u2612 parameter \u2612 general \u2612 steps \u2612 stages Resource references none","title":"containerShell"},{"location":"steps/karmaExecuteTests/#dockerenvvars","text":"Environment variables to set in the container, e.g. [http_proxy: \"proxy:8080\"]. back to overview Scope Details Aliases - Type map[string]string Mandatory no Default map[NO_PROXY:localhost,selenium,$NO_PROXY PIPER_SELENIUM_HOSTNAME:karma PIPER_SELENIUM_WEBDRIVER_HOSTNAME:selenium PIPER_SELENIUM_WEBDRIVER_PORT:4444 no_proxy:localhost,selenium,$no_proxy] Secret no Configuration scope \u2612 parameter \u2612 general \u2612 steps \u2612 stages Resource references none","title":"dockerEnvVars"},{"location":"steps/karmaExecuteTests/#dockerimage","text":"Name of the docker image that should be used. If empty, Docker is not used and the command is executed directly on the Jenkins system. back to overview Scope Details Aliases - Type string Mandatory no Default node:22-bookworm Secret no Configuration scope \u2612 parameter \u2612 general \u2612 steps \u2612 stages Resource references none","title":"dockerImage"},{"location":"steps/karmaExecuteTests/#dockername","text":"Kubernetes only: Name of the container launching dockerImage. SideCar only: Name of the container in local network. back to overview Scope Details Aliases - Type string Mandatory no Default karma Secret no Configuration scope \u2612 parameter \u2612 general \u2612 steps \u2612 stages Resource references none","title":"dockerName"},{"location":"steps/karmaExecuteTests/#dockeroptions","text":"Docker options to be set when starting the container. back to overview Scope Details Aliases - Type []string Mandatory no Default Secret no Configuration scope \u2612 parameter \u2612 general \u2612 steps \u2612 stages Resource references none","title":"dockerOptions"},{"location":"steps/karmaExecuteTests/#dockerpullimage","text":"Set this to 'false' to bypass a docker image pull. Useful during development process. Allows testing of images which are available in the local registry only. back to overview Scope Details Aliases - Type bool Mandatory no Default true Possible values - true - false Secret no Configuration scope \u2612 parameter \u2612 general \u2612 steps \u2612 stages Resource references none","title":"dockerPullImage"},{"location":"steps/karmaExecuteTests/#dockervolumebind","text":"Jenkins-specific: Used for proper environment setup. Volumes that should be mounted into the docker container. back to overview Scope Details Aliases - Type map[string]string Mandatory no Default Secret no Configuration scope \u2612 parameter \u2612 general \u2612 steps \u2612 stages Resource references none","title":"dockerVolumeBind"},{"location":"steps/karmaExecuteTests/#dockerworkspace","text":"Jenkins-specific: Used for proper environment setup. Kubernetes only: Specifies a dedicated user home directory for the container which will be passed as value for environment variable HOME . back to overview Scope Details Aliases - Type string Mandatory no Default /home/node Secret no Configuration scope \u2612 parameter \u2612 general \u2612 steps \u2612 stages Resource references none","title":"dockerWorkspace"},{"location":"steps/karmaExecuteTests/#installcommand","text":"The command that is executed to install the test tool. back to overview Scope Details Aliases - Type string Mandatory no Default npm install --quiet Secret no Configuration scope \u2612 parameter \u2612 general \u2612 steps \u2612 stages Resource references none","title":"installCommand"},{"location":"steps/karmaExecuteTests/#modules","text":"Define the paths of the modules to execute tests on. back to overview Scope Details Aliases - Type []string Mandatory no Default - . Secret no Configuration scope \u2612 parameter \u2610 general \u2612 steps \u2612 stages Resource references none","title":"modules"},{"location":"steps/karmaExecuteTests/#runcommand","text":"The command that is executed to start the tests. back to overview Scope Details Aliases - Type string Mandatory no Default npm run karma Secret no Configuration scope \u2612 parameter \u2612 general \u2612 steps \u2612 stages Resource references none","title":"runCommand"},{"location":"steps/karmaExecuteTests/#script","text":"The common script environment of the Jenkinsfile running. Typically the reference to the script calling the pipeline step is provided with the this parameter, as in script: this . This allows the function to access the commonPipelineEnvironment for retrieving, e.g. configuration parameters. back to overview Scope Details Aliases - Type Jenkins Script Mandatory yes Default Secret no Configuration scope \u2610 parameter \u2610 general \u2610 steps \u2610 stages Resource references none","title":"script"},{"location":"steps/karmaExecuteTests/#sidecarenvvars","text":"A map of environment variables to set in the sidecar container, similar to dockerEnvVars . back to overview Scope Details Aliases - Type map[string]string Mandatory no Default Secret no Configuration scope \u2612 parameter \u2612 general \u2612 steps \u2612 stages Resource references none","title":"sidecarEnvVars"},{"location":"steps/karmaExecuteTests/#sidecarimage","text":"The name of the docker image of the sidecar container. If empty, no sidecar container is started. Similar to dockerImage . back to overview Scope Details Aliases - Type string Mandatory no Default Secret no Configuration scope \u2612 parameter \u2612 general \u2612 steps \u2612 stages Resource references none","title":"sidecarImage"},{"location":"steps/karmaExecuteTests/#sidecarname","text":"Name of the sidecar container. Similar to dockerName . back to overview Scope Details Aliases - Type string Mandatory no Default Secret no Configuration scope \u2612 parameter \u2612 general \u2612 steps \u2612 stages Resource references none","title":"sidecarName"},{"location":"steps/karmaExecuteTests/#sidecaroptions","text":"Options to be set when starting the sidecar container. Similar to dockerOptions . back to overview Scope Details Aliases - Type []string Mandatory no Default Secret no Configuration scope \u2612 parameter \u2612 general \u2612 steps \u2612 stages Resource references none","title":"sidecarOptions"},{"location":"steps/karmaExecuteTests/#sidecarpullimage","text":"Set this to 'false' to bypass a docker image pull. Useful during development process. Allows testing of images which are available in the local registry only. back to overview Scope Details Aliases - Type bool Mandatory no Default false Possible values - true - false Secret no Configuration scope \u2612 parameter \u2612 general \u2612 steps \u2612 stages Resource references none","title":"sidecarPullImage"},{"location":"steps/karmaExecuteTests/#sidecarreadycommand","text":"Jenkins-specific: Used for proper environment setup. Command executed inside the container which returns exit code 0 when the container is ready to be used. back to overview Scope Details Aliases - Type string Mandatory no Default Secret no Configuration scope \u2612 parameter \u2612 general \u2612 steps \u2612 stages Resource references none","title":"sidecarReadyCommand"},{"location":"steps/karmaExecuteTests/#sidecarvolumebind","text":"Volumes that should be mounted into the sidecar container. Similar to dockerVolumeBind . back to overview Scope Details Aliases - Type map[string]string Mandatory no Default Secret no Configuration scope \u2612 parameter \u2612 general \u2612 steps \u2612 stages Resource references none","title":"sidecarVolumeBind"},{"location":"steps/karmaExecuteTests/#sidecarworkspace","text":"Jenkins-specific: Used for proper environment setup. back to overview Scope Details Aliases - Type string Mandatory no Default Secret no Configuration scope \u2612 parameter \u2612 general \u2612 steps \u2612 stages Resource references none","title":"sidecarWorkspace"},{"location":"steps/karmaExecuteTests/#stashcontent","text":"Jenkins-specific: Used for proper environment setup. Specific stashes that should be considered for the step execution. back to overview Scope Details Aliases - Type []string Mandatory no Default - buildDescriptor - tests Secret no Configuration scope \u2612 parameter \u2612 general \u2612 steps \u2612 stages Resource references none","title":"stashContent"},{"location":"steps/karmaExecuteTests/#verbose","text":"verbose output back to overview Scope Details Aliases - Type bool Mandatory no Default false Possible values - true - false Secret no Configuration scope \u2612 parameter \u2612 general \u2612 steps \u2612 stages Resource references none","title":"verbose"},{"location":"steps/karmaExecuteTests/#seleniumhubcredentialsid","text":"Defines the id of the user/password credentials to be used to connect to a Selenium Hub. The credentials are provided in the environment variables PIPER_SELENIUM_HUB_USER and PIPER_SELENIUM_HUB_PASSWORD . back to overview Scope Details Aliases - Type string Configuration scope \u2612 parameter \u2612 general \u2612 steps \u2612 stages","title":"seleniumHubCredentialsId"},{"location":"steps/karmaExecuteTests/#side-effects","text":"Step uses seleniumExecuteTest & dockerExecute inside.","title":"Side effects"},{"location":"steps/karmaExecuteTests/#exceptions","text":"none","title":"Exceptions"},{"location":"steps/karmaExecuteTests/#example","text":"karmaExecuteTests script: this , modules: [ './shoppinglist' , './catalog' ]","title":"Example"},{"location":"steps/kubernetesDeploy/","text":"kubernetesDeploy \u00b6 Deployment to Kubernetes test or production namespace within the specified Kubernetes cluster. Description \u00b6 Deployment to Kubernetes test or production namespace within the specified Kubernetes cluster. Deployment supports multiple deployment tools Currently the following are supported: Helm command line tool and Helm Charts . kubectl and kubectl apply command. Helm \u00b6 Following helm command will be executed by default: helm upgrade <deploymentName> <chartPath> --install --force --namespace <namespace> --wait --timeout <helmDeployWaitSeconds> --set \"image.repository=<yourRegistry>/<yourImageName>,image.tag=<yourImageTag>,secret.dockerconfigjson=<dockerSecret>,ingress.hosts[0]=<ingressHosts[0]>,,ingress.hosts[1]=<ingressHosts[1]>,... yourRegistry will be retrieved from containerRegistryUrl yourImageName , yourImageTag will be retrieved from image dockerSecret will be calculated with a call to kubectl create secret generic <containerRegistrySecret> --from-file=.dockerconfigjson=<dockerConfigJson> --type=kubernetes.io/dockerconfigjson --insecure-skip-tls-verify=true --dry-run=client --output=json Usage \u00b6 We recommend to define values of step parameters via .pipeline/config.yml file . In this case, calling the step is essentially reduced to defining the step name. Calling the step can be done either in an orchestrator specific way (e.g. via a Jenkins library step) or on the command line. Jenkins Command Line library ( 'piper-lib-os' ) kubernetesDeploy script: this piper kubernetesDeploy Parameters \u00b6 Overview - Step \u00b6 Name Mandatory Additional information containerRegistryUrl yes script (yes) reference to Jenkins main pipeline script CACertificate no pass via ENV, Vault or Jenkins credentials additionalParameters no apiServer no appTemplate no chartPath no containerImageName no containerImageTag no containerRegistryPassword no pass via ENV or Jenkins credentials ( dockerCredentialsId ) containerRegistrySecret no containerRegistryUser no pass via ENV or Jenkins credentials ( dockerCredentialsId ) createDockerRegistrySecret no deployCommand no deployTool no deploymentName no dockerConfigJSON no pass via ENV, Vault or Jenkins credentials ( dockerConfigJsonCredentialsId ) forceUpdates no githubToken no pass via ENV, Vault or Jenkins credentials ( githubTokenCredentialsId ) helmDeployWaitSeconds no helmTestWaitSeconds no helmValues no image no imageDigests no imageNameTags no imageNames no ingressHosts no insecureSkipTLSVerify no keepFailedDeployments no kubeConfig no pass via ENV, Vault or Jenkins credentials ( kubeConfigFileCredentialsId ) kubeContext no kubeToken no pass via ENV or Jenkins credentials ( kubeTokenCredentialsId ) namespace no renderSubchartNotes no runHelmTests no setupScript no showTestLogs no teardownScript no tillerNamespace no valuesMapping no verbose no activates debug output verificationScript no Overview - Execution Environment \u00b6 Orchestrator-specific only These parameters are relevant for orchestrator usage and not considered when using the command line option. Name Mandatory Additional information containerCommand no containerShell no dockerEnvVars no dockerImage no dockerName no dockerOptions no dockerPullImage no dockerVolumeBind no dockerWorkspace no stashContent no Details \u00b6 CACertificate \u00b6 Path to the Kubernetes CA certificate file. If provided, secure connections will be established using this certificate when 'insecureSkipTLSVerify' is false. back to overview Scope Details Aliases - Type string Mandatory no Default ca-certificate Secret yes Configuration scope \u2612 parameter \u2610 general \u2612 steps \u2612 stages Resource references Vault resource: name: CACertificateVaultSecretName default value: ca-certificate Vault paths: $(vaultPath)/ca-certificate $(vaultBasePath)/$(vaultPipelineName)/ca-certificate $(vaultBasePath)/GROUP-SECRETS/ca-certificate additionalParameters \u00b6 Defines additional parameters for \"helm install\" or \"kubectl apply\" command. back to overview Scope Details Aliases helmDeploymentParameters Type []string Mandatory no Default $PIPER_additionalParameters (if set) Secret no Configuration scope \u2612 parameter \u2610 general \u2612 steps \u2612 stages Resource references none apiServer \u00b6 Defines the Url of the API Server of the Kubernetes cluster. back to overview Scope Details Aliases k8sAPIServer Type string Mandatory no Default $PIPER_apiServer (if set) Secret no Configuration scope \u2612 parameter \u2612 general \u2612 steps \u2612 stages Resource references none appTemplate \u00b6 There are two supported ways for the template rendering: For a deployments using single image, you can use a placeholder <image-name> , which will be replaced with the image GUN. apiVersion: apps/v1 kind: Deployment metadata: name: app labels: app: app spec: replicas: 3 selector: matchLabels: app: app template: metadata: labels: app: app spec: containers: - name: app image: <image-name> Helm styled templates, with the support for multi-image deployments. apiVersion: apps/v1 kind: Deployment metadata: name: app labels: app: app spec: replicas: 3 selector: matchLabels: app: app template: metadata: labels: app: app spec: containers: - name: app-1 image: \"{{ .Values.image.repository}}:{{ .Values.image.tag }}\" - name: app-2 image: \"{{ .Values.image.app_2.repository}}:{{ .Values.image.app_2.tag }}\" back to overview Scope Details Aliases k8sAppTemplate Type string Mandatory no Default $PIPER_appTemplate (if set) Secret no Configuration scope \u2612 parameter \u2610 general \u2612 steps \u2612 stages Resource references none chartPath \u00b6 Defines the chart path for deployments using helm. It is a mandatory parameter when deployTool:helm or deployTool:helm3 . back to overview Scope Details Aliases helmChartPath Type string Mandatory no Default $PIPER_chartPath (if set) Secret no Configuration scope \u2612 parameter \u2612 general \u2612 steps \u2612 stages Resource references commonPipelineEnvironment : reference to: custom/localHelmChartPath containerCommand \u00b6 Jenkins-specific: Used for proper environment setup. Kubernetes only: Allows to specify start command for container created with dockerImage parameter to overwrite Piper default (/usr/bin/tail -f /dev/null). back to overview Scope Details Aliases - Type string Mandatory no Default Secret no Configuration scope \u2612 parameter \u2612 general \u2612 steps \u2612 stages Resource references none containerImageName \u00b6 Name of the container which will be built - will be used together with containerImageTag instead of parameter containerImage back to overview Scope Details Aliases dockerImageName Type string Mandatory no Default $PIPER_containerImageName (if set) Secret no Configuration scope \u2612 parameter \u2612 general \u2612 steps \u2612 stages Resource references none containerImageTag \u00b6 Tag of the container which will be built - will be used together with containerImageName instead of parameter containerImage back to overview Scope Details Aliases artifactVersion Type string Mandatory no Default $PIPER_containerImageTag (if set) Secret no Configuration scope \u2612 parameter \u2612 general \u2612 steps \u2612 stages Resource references commonPipelineEnvironment : reference to: artifactVersion containerRegistryPassword \u00b6 Password for container registry access - typically provided by the CI/CD environment. back to overview Scope Details Aliases - Type string Mandatory no Default $PIPER_containerRegistryPassword (if set) Secret yes Configuration scope \u2612 parameter \u2610 general \u2612 steps \u2612 stages Resource references Jenkins credential id: id: dockerCredentialsId reference to: password commonPipelineEnvironment : reference to: container/repositoryPassword commonPipelineEnvironment : reference to: custom/repositoryPassword containerRegistrySecret \u00b6 Name of the container registry secret used for pulling containers from the registry. For deployTool: helm/helm3 : If containerRegistryUser and containerRegistryPassword are provided, a secret is created on the fly and the information is passed to the helm template. For deployTool: kubectl : If containerRegistryUser and containerRegistryPassword are provided, a secret with the given name will be created in the Kubernetes cluster. If neither containerRegistryUser nor containerRegistryPassword are provided, it is expected that a secret with the configured name exists in the target Kubernetes cluster. back to overview Scope Details Aliases - Type string Mandatory no Default regsecret Secret no Configuration scope \u2612 parameter \u2610 general \u2612 steps \u2612 stages Resource references none containerRegistryUrl \u00b6 http(s) url of the Container registry where the image to deploy is located. back to overview Scope Details Aliases dockerRegistryUrl Type string Mandatory yes Default $PIPER_containerRegistryUrl (if set) Secret no Configuration scope \u2612 parameter \u2612 general \u2612 steps \u2612 stages Resource references commonPipelineEnvironment : reference to: container/registryUrl containerRegistryUser \u00b6 Username for container registry access - typically provided by the CI/CD environment. back to overview Scope Details Aliases - Type string Mandatory no Default $PIPER_containerRegistryUser (if set) Secret yes Configuration scope \u2612 parameter \u2610 general \u2612 steps \u2612 stages Resource references Jenkins credential id: id: dockerCredentialsId reference to: username commonPipelineEnvironment : reference to: container/repositoryUsername commonPipelineEnvironment : reference to: custom/repositoryUsername containerShell \u00b6 Jenkins-specific: Used for proper environment setup. Allows to specify the shell to be executed for container with containerName. back to overview Scope Details Aliases - Type string Mandatory no Default Secret no Configuration scope \u2612 parameter \u2612 general \u2612 steps \u2612 stages Resource references none createDockerRegistrySecret \u00b6 Only for deployTool:kubectl : Toggle to turn on containerRegistrySecret creation. back to overview Scope Details Aliases - Type bool Mandatory no Default false Possible values - true - false Secret no Configuration scope \u2612 parameter \u2610 general \u2612 steps \u2612 stages Resource references none deployCommand \u00b6 Only for deployTool: kubectl : defines the command apply or replace . The default is apply . back to overview Scope Details Aliases - Type string Mandatory no Default apply Possible values - apply - replace Secret no Configuration scope \u2612 parameter \u2610 general \u2612 steps \u2612 stages Resource references none deployTool \u00b6 Defines the tool which should be used for deployment. back to overview Scope Details Aliases - Type string Mandatory no Default kubectl Possible values - kubectl - helm - helm3 Secret no Configuration scope \u2612 parameter \u2610 general \u2612 steps \u2612 stages Resource references none deploymentName \u00b6 Defines the name of the deployment. It is a mandatory parameter when deployTool:helm or deployTool:helm3 . back to overview Scope Details Aliases helmDeploymentName Type string Mandatory no Default $PIPER_deploymentName (if set) Secret no Configuration scope \u2612 parameter \u2610 general \u2612 steps \u2612 stages Resource references none dockerConfigJSON \u00b6 Path to the file .docker/config.json - this is typically provided by your CI/CD system. You can find more details about the Docker credentials in the Docker documentation . back to overview Scope Details Aliases - Type string Mandatory no Default .pipeline/docker/config.json Secret yes Configuration scope \u2612 parameter \u2610 general \u2612 steps \u2612 stages Resource references Jenkins credential id: id: dockerConfigJsonCredentialsId Vault resource: name: dockerConfigFileVaultSecretName default value: docker-config Vault paths: $(vaultPath)/docker-config $(vaultBasePath)/$(vaultPipelineName)/docker-config $(vaultBasePath)/GROUP-SECRETS/docker-config dockerEnvVars \u00b6 Environment variables to set in the container, e.g. [http_proxy: \"proxy:8080\"]. back to overview Scope Details Aliases - Type map[string]string Mandatory no Default Secret no Configuration scope \u2612 parameter \u2612 general \u2612 steps \u2612 stages Resource references none dockerImage \u00b6 Name of the docker image that should be used. If empty, Docker is not used and the command is executed directly on the Jenkins system. back to overview Scope Details Aliases - Type string Mandatory no Default dtzar/helm-kubectl:3 Secret no Configuration scope \u2612 parameter \u2612 general \u2612 steps \u2612 stages Resource references none dockerName \u00b6 Kubernetes only: Name of the container launching dockerImage. SideCar only: Name of the container in local network. back to overview Scope Details Aliases - Type string Mandatory no Default Secret no Configuration scope \u2612 parameter \u2612 general \u2612 steps \u2612 stages Resource references none dockerOptions \u00b6 Docker options to be set when starting the container. back to overview Scope Details Aliases - Type []string Mandatory no Default [{-u 0}] Secret no Configuration scope \u2612 parameter \u2612 general \u2612 steps \u2612 stages Resource references none dockerPullImage \u00b6 Set this to 'false' to bypass a docker image pull. Useful during development process. Allows testing of images which are available in the local registry only. back to overview Scope Details Aliases - Type bool Mandatory no Default true Possible values - true - false Secret no Configuration scope \u2612 parameter \u2612 general \u2612 steps \u2612 stages Resource references none dockerVolumeBind \u00b6 Jenkins-specific: Used for proper environment setup. Volumes that should be mounted into the docker container. back to overview Scope Details Aliases - Type map[string]string Mandatory no Default Secret no Configuration scope \u2612 parameter \u2612 general \u2612 steps \u2612 stages Resource references none dockerWorkspace \u00b6 Jenkins-specific: Used for proper environment setup. Kubernetes only: Specifies a dedicated user home directory for the container which will be passed as value for environment variable HOME . back to overview Scope Details Aliases - Type string Mandatory no Default /config Secret no Configuration scope \u2612 parameter \u2612 general \u2612 steps \u2612 stages Resource references none forceUpdates \u00b6 Adds --force flag to a helm resource update command or to a kubectl replace command back to overview Scope Details Aliases force Type bool Mandatory no Default true Possible values - true - false Secret no Configuration scope \u2612 parameter \u2610 general \u2612 steps \u2612 stages Resource references none githubToken \u00b6 GitHub personal access token as per https://help.github.com/en/github/authenticating-to-github/creating-a-personal-access-token-for-the-command-line back to overview Scope Details Aliases access_token Type string Mandatory no Default $PIPER_githubToken (if set) Secret yes Configuration scope \u2612 parameter \u2612 general \u2612 steps \u2612 stages Resource references Jenkins credential id: id: githubTokenCredentialsId Vault resource: name: githubVaultSecretName default value: github Vault paths: $(vaultPath)/github $(vaultBasePath)/$(vaultPipelineName)/github $(vaultBasePath)/GROUP-SECRETS/github helmDeployWaitSeconds \u00b6 Number of seconds before helm deploy returns. back to overview Scope Details Aliases - Type int Mandatory no Default 300 Secret no Configuration scope \u2612 parameter \u2610 general \u2612 steps \u2612 stages Resource references none helmTestWaitSeconds \u00b6 Number of seconds to wait for any individual Kubernetes operation (like Jobs for hooks). See https://helm.sh/docs/helm/helm_test/#options for further details back to overview Scope Details Aliases - Type int Mandatory no Default 300 Secret no Configuration scope \u2612 parameter \u2610 general \u2612 steps \u2612 stages Resource references none helmValues \u00b6 List of helm values as YAML file reference or URL (as per helm parameter description for -f / --values ) back to overview Scope Details Aliases - Type []string Mandatory no Default $PIPER_helmValues (if set) Secret no Configuration scope \u2612 parameter \u2610 general \u2612 steps \u2612 stages Resource references none image \u00b6 Full name of the image to be deployed. back to overview Scope Details Deprecated This parameter is deprecated, please use containerImageName and containerImageTag Aliases deployImage Type string Mandatory no Default $PIPER_image (if set) Secret no Configuration scope \u2612 parameter \u2610 general \u2612 steps \u2612 stages Resource references commonPipelineEnvironment : reference to: container/imageNameTag imageDigests \u00b6 List of image digests of the images to be deployed, in the format sha256:<hash> . If provided, image digests will be appended to the image tag, e.g. <repository>/<name>:<tag>@<digest> back to overview Scope Details Aliases - Type []string Mandatory no Default $PIPER_imageDigests (if set) Secret no Configuration scope \u2612 parameter \u2610 general \u2612 steps \u2612 stages Resource references commonPipelineEnvironment : reference to: container/imageDigests imageNameTags \u00b6 List of full names (registry and tag) of the images to be deployed. back to overview Scope Details Aliases - Type []string Mandatory no Default $PIPER_imageNameTags (if set) Secret no Configuration scope \u2612 parameter \u2610 general \u2612 steps \u2612 stages Resource references commonPipelineEnvironment : reference to: container/imageNameTags imageNames \u00b6 List of names of the images to be deployed. back to overview Scope Details Aliases - Type []string Mandatory no Default $PIPER_imageNames (if set) Secret no Configuration scope \u2612 parameter \u2610 general \u2612 steps \u2612 stages Resource references commonPipelineEnvironment : reference to: container/imageNames ingressHosts \u00b6 DEPRECATED List of ingress hosts to be exposed via helm deployment. Host names are passed to helm template via ingress configuration. This requires a modification to the default helm template, thus it is not recommended. Recommendation is to use custom values and pass them via parameter helmValues . Since helm supports multiple files on top of the values.yaml , landscape-specific attributes can be passed via a specific file. back to overview Scope Details Aliases - Type []string Mandatory no Default $PIPER_ingressHosts (if set) Secret no Configuration scope \u2612 parameter \u2610 general \u2612 steps \u2612 stages Resource references none insecureSkipTLSVerify \u00b6 This disables TLS certificate verification, allowing connections even with self-signed or untrusted certificates. More details back to overview Scope Details Aliases - Type bool Mandatory no Default false Possible values - true - false Secret no Configuration scope \u2612 parameter \u2610 general \u2612 steps \u2612 stages Resource references none keepFailedDeployments \u00b6 Defines whether a failed deployment will be purged back to overview Scope Details Aliases - Type bool Mandatory no Default false Possible values - true - false Secret no Configuration scope \u2612 parameter \u2612 general \u2612 steps \u2612 stages Resource references none kubeConfig \u00b6 Defines the path to the \"kubeconfig\" file. back to overview Scope Details Aliases - Type string Mandatory no Default $PIPER_kubeConfig (if set) Secret yes Configuration scope \u2612 parameter \u2612 general \u2612 steps \u2612 stages Resource references Jenkins credential id: id: kubeConfigFileCredentialsId Vault resource: name: kubeConfigFileVaultSecretName default value: kube-config Vault paths: $(vaultPath)/kube-config $(vaultBasePath)/$(vaultPipelineName)/kube-config $(vaultBasePath)/GROUP-SECRETS/kube-config kubeContext \u00b6 Defines the context to use from the \"kubeconfig\" file. back to overview Scope Details Aliases - Type string Mandatory no Default $PIPER_kubeContext (if set) Secret no Configuration scope \u2612 parameter \u2610 general \u2612 steps \u2612 stages Resource references none kubeToken \u00b6 Contains the id_token used by kubectl for authentication. Consider using kubeConfig parameter instead. back to overview Scope Details Aliases - Type string Mandatory no Default $PIPER_kubeToken (if set) Secret yes Configuration scope \u2612 parameter \u2612 general \u2612 steps \u2612 stages Resource references Jenkins credential id: id: kubeTokenCredentialsId namespace \u00b6 Defines the target Kubernetes namespace for the deployment. back to overview Scope Details Aliases - helmDeploymentNamespace - k8sDeploymentNamespace Type string Mandatory no Default default Secret no Configuration scope \u2612 parameter \u2610 general \u2612 steps \u2612 stages Resource references none renderSubchartNotes \u00b6 If set, render subchart notes along with the parent. back to overview Scope Details Aliases - Type bool Mandatory no Default true Possible values - true - false Secret no Configuration scope \u2612 parameter \u2612 general \u2612 steps \u2612 stages Resource references none runHelmTests \u00b6 Defines whether or not to run helm tests against the recently deployed release back to overview Scope Details Aliases - Type bool Mandatory no Default false Possible values - true - false Secret no Configuration scope \u2612 parameter \u2612 general \u2612 steps \u2612 stages Resource references none script \u00b6 The common script environment of the Jenkinsfile running. Typically the reference to the script calling the pipeline step is provided with the this parameter, as in script: this . This allows the function to access the commonPipelineEnvironment for retrieving, e.g. configuration parameters. back to overview Scope Details Aliases - Type Jenkins Script Mandatory yes Default Secret no Configuration scope \u2610 parameter \u2610 general \u2610 steps \u2610 stages Resource references none setupScript \u00b6 For helm-based deploymens only! HTTP location of setup script. The script will be downloaded from a GitHub location using the githubToken and executed before the installation of the helm package. back to overview Scope Details Aliases - Type string Mandatory no Default $PIPER_setupScript (if set) Secret no Configuration scope \u2612 parameter \u2610 general \u2612 steps \u2612 stages Resource references none showTestLogs \u00b6 Defines whether to print the pod logs after running helm tests back to overview Scope Details Aliases - Type bool Mandatory no Default false Possible values - true - false Secret no Configuration scope \u2612 parameter \u2612 general \u2612 steps \u2612 stages Resource references none stashContent \u00b6 Jenkins-specific: Used for proper environment setup. Specific stashes that should be considered for the step execution. back to overview Scope Details Aliases - Type []string Mandatory no Default - deployDescriptor - downloadedArtifact Secret no Configuration scope \u2612 parameter \u2612 general \u2612 steps \u2612 stages Resource references none teardownScript \u00b6 For helm-based deploymens only! HTTP location of setup script. The script will be downloaded from a GitHub location using the githubToken and executed at the end of the step. This can for example be used in order to remove a temporary namespace which was created for the test. back to overview Scope Details Aliases - Type string Mandatory no Default $PIPER_teardownScript (if set) Secret no Configuration scope \u2612 parameter \u2610 general \u2612 steps \u2612 stages Resource references none tillerNamespace \u00b6 Defines optional tiller namespace for deployments using helm. back to overview Scope Details Aliases helmTillerNamespace Type string Mandatory no Default $PIPER_tillerNamespace (if set) Secret no Configuration scope \u2612 parameter \u2610 general \u2612 steps \u2612 stages Resource references none valuesMapping \u00b6 Mapping of values provided by Piper onto custom paths in format [custom-path]: [piper-value] Example: valuesMapping : subchart.image.tag : image.debug.tag subchart.image.repository : image.debug.repository subchart.image.pullsecret : secret.dockerconfigjson back to overview Scope Details Aliases - Type map[string]interface{} Mandatory no Default $PIPER_valuesMapping (if set) Secret no Configuration scope \u2612 parameter \u2610 general \u2612 steps \u2612 stages Resource references none verbose \u00b6 verbose output back to overview Scope Details Aliases - Type bool Mandatory no Default false Possible values - true - false Secret no Configuration scope \u2612 parameter \u2612 general \u2612 steps \u2612 stages Resource references none verificationScript \u00b6 For helm-based deploymens only! HTTP location of verification script. The script will be downloaded from a GitHub location using the githubToken and executed after installation of the helm package. It can be used to verify if all required artifacts are ready before progressing with for example helmTest using the step option runHelmTests: true back to overview Scope Details Aliases - Type string Mandatory no Default $PIPER_verificationScript (if set) Secret no Configuration scope \u2612 parameter \u2610 general \u2612 steps \u2612 stages Resource references none kubeConfigFileCredentialsId \u00b6 Jenkins 'Secret file' credentials ID containing kubeconfig file. Details can be found in the Kubernetes documentation . back to overview Scope Details Aliases kubeCredentialsId ( deprecated ) Type string Configuration scope \u2612 parameter \u2612 general \u2612 steps \u2612 stages kubeTokenCredentialsId \u00b6 Jenkins 'Secret text' credentials ID containing token to authenticate to Kubernetes. This is an alternative way to using a kubeconfig file. Details can be found in the Kubernetes documentation . back to overview Scope Details Aliases k8sTokenCredentialsId ( deprecated ) Type string Configuration scope \u2612 parameter \u2612 general \u2612 steps \u2612 stages dockerCredentialsId \u00b6 back to overview Scope Details Aliases - Type string Configuration scope \u2612 parameter \u2612 general \u2612 steps \u2612 stages dockerConfigJsonCredentialsId \u00b6 Jenkins 'Secret file' credentials ID containing Docker config.json (with registry credential(s)). back to overview Scope Details Aliases - Type string Configuration scope \u2612 parameter \u2612 general \u2612 steps \u2612 stages githubTokenCredentialsId \u00b6 Jenkins credentials ID containing the github token. back to overview Scope Details Aliases - Type string Configuration scope \u2612 parameter \u2612 general \u2612 steps \u2612 stages Exceptions \u00b6 None Examples \u00b6 kubernetesDeploy script: this // Deploy a helm chart called \"myChart\" using Helm 3 kubernetesDeploy script: this , deployTool: 'helm3' , chartPath: 'myChart' , deploymentName: 'myRelease' , image: 'nginx' , containerRegistryUrl: 'https://docker.io'","title":"kubernetesDeploy"},{"location":"steps/kubernetesDeploy/#kubernetesdeploy","text":"Deployment to Kubernetes test or production namespace within the specified Kubernetes cluster.","title":"kubernetesDeploy"},{"location":"steps/kubernetesDeploy/#description","text":"Deployment to Kubernetes test or production namespace within the specified Kubernetes cluster. Deployment supports multiple deployment tools Currently the following are supported: Helm command line tool and Helm Charts . kubectl and kubectl apply command.","title":"Description"},{"location":"steps/kubernetesDeploy/#helm","text":"Following helm command will be executed by default: helm upgrade <deploymentName> <chartPath> --install --force --namespace <namespace> --wait --timeout <helmDeployWaitSeconds> --set \"image.repository=<yourRegistry>/<yourImageName>,image.tag=<yourImageTag>,secret.dockerconfigjson=<dockerSecret>,ingress.hosts[0]=<ingressHosts[0]>,,ingress.hosts[1]=<ingressHosts[1]>,... yourRegistry will be retrieved from containerRegistryUrl yourImageName , yourImageTag will be retrieved from image dockerSecret will be calculated with a call to kubectl create secret generic <containerRegistrySecret> --from-file=.dockerconfigjson=<dockerConfigJson> --type=kubernetes.io/dockerconfigjson --insecure-skip-tls-verify=true --dry-run=client --output=json","title":"Helm"},{"location":"steps/kubernetesDeploy/#usage","text":"We recommend to define values of step parameters via .pipeline/config.yml file . In this case, calling the step is essentially reduced to defining the step name. Calling the step can be done either in an orchestrator specific way (e.g. via a Jenkins library step) or on the command line. Jenkins Command Line library ( 'piper-lib-os' ) kubernetesDeploy script: this piper kubernetesDeploy","title":"Usage"},{"location":"steps/kubernetesDeploy/#parameters","text":"","title":"Parameters"},{"location":"steps/kubernetesDeploy/#overview-step","text":"Name Mandatory Additional information containerRegistryUrl yes script (yes) reference to Jenkins main pipeline script CACertificate no pass via ENV, Vault or Jenkins credentials additionalParameters no apiServer no appTemplate no chartPath no containerImageName no containerImageTag no containerRegistryPassword no pass via ENV or Jenkins credentials ( dockerCredentialsId ) containerRegistrySecret no containerRegistryUser no pass via ENV or Jenkins credentials ( dockerCredentialsId ) createDockerRegistrySecret no deployCommand no deployTool no deploymentName no dockerConfigJSON no pass via ENV, Vault or Jenkins credentials ( dockerConfigJsonCredentialsId ) forceUpdates no githubToken no pass via ENV, Vault or Jenkins credentials ( githubTokenCredentialsId ) helmDeployWaitSeconds no helmTestWaitSeconds no helmValues no image no imageDigests no imageNameTags no imageNames no ingressHosts no insecureSkipTLSVerify no keepFailedDeployments no kubeConfig no pass via ENV, Vault or Jenkins credentials ( kubeConfigFileCredentialsId ) kubeContext no kubeToken no pass via ENV or Jenkins credentials ( kubeTokenCredentialsId ) namespace no renderSubchartNotes no runHelmTests no setupScript no showTestLogs no teardownScript no tillerNamespace no valuesMapping no verbose no activates debug output verificationScript no","title":"Overview - Step"},{"location":"steps/kubernetesDeploy/#overview-execution-environment","text":"Orchestrator-specific only These parameters are relevant for orchestrator usage and not considered when using the command line option. Name Mandatory Additional information containerCommand no containerShell no dockerEnvVars no dockerImage no dockerName no dockerOptions no dockerPullImage no dockerVolumeBind no dockerWorkspace no stashContent no","title":"Overview - Execution Environment"},{"location":"steps/kubernetesDeploy/#details","text":"","title":"Details"},{"location":"steps/kubernetesDeploy/#cacertificate","text":"Path to the Kubernetes CA certificate file. If provided, secure connections will be established using this certificate when 'insecureSkipTLSVerify' is false. back to overview Scope Details Aliases - Type string Mandatory no Default ca-certificate Secret yes Configuration scope \u2612 parameter \u2610 general \u2612 steps \u2612 stages Resource references Vault resource: name: CACertificateVaultSecretName default value: ca-certificate Vault paths: $(vaultPath)/ca-certificate $(vaultBasePath)/$(vaultPipelineName)/ca-certificate $(vaultBasePath)/GROUP-SECRETS/ca-certificate","title":"CACertificate"},{"location":"steps/kubernetesDeploy/#additionalparameters","text":"Defines additional parameters for \"helm install\" or \"kubectl apply\" command. back to overview Scope Details Aliases helmDeploymentParameters Type []string Mandatory no Default $PIPER_additionalParameters (if set) Secret no Configuration scope \u2612 parameter \u2610 general \u2612 steps \u2612 stages Resource references none","title":"additionalParameters"},{"location":"steps/kubernetesDeploy/#apiserver","text":"Defines the Url of the API Server of the Kubernetes cluster. back to overview Scope Details Aliases k8sAPIServer Type string Mandatory no Default $PIPER_apiServer (if set) Secret no Configuration scope \u2612 parameter \u2612 general \u2612 steps \u2612 stages Resource references none","title":"apiServer"},{"location":"steps/kubernetesDeploy/#apptemplate","text":"There are two supported ways for the template rendering: For a deployments using single image, you can use a placeholder <image-name> , which will be replaced with the image GUN. apiVersion: apps/v1 kind: Deployment metadata: name: app labels: app: app spec: replicas: 3 selector: matchLabels: app: app template: metadata: labels: app: app spec: containers: - name: app image: <image-name> Helm styled templates, with the support for multi-image deployments. apiVersion: apps/v1 kind: Deployment metadata: name: app labels: app: app spec: replicas: 3 selector: matchLabels: app: app template: metadata: labels: app: app spec: containers: - name: app-1 image: \"{{ .Values.image.repository}}:{{ .Values.image.tag }}\" - name: app-2 image: \"{{ .Values.image.app_2.repository}}:{{ .Values.image.app_2.tag }}\" back to overview Scope Details Aliases k8sAppTemplate Type string Mandatory no Default $PIPER_appTemplate (if set) Secret no Configuration scope \u2612 parameter \u2610 general \u2612 steps \u2612 stages Resource references none","title":"appTemplate"},{"location":"steps/kubernetesDeploy/#chartpath","text":"Defines the chart path for deployments using helm. It is a mandatory parameter when deployTool:helm or deployTool:helm3 . back to overview Scope Details Aliases helmChartPath Type string Mandatory no Default $PIPER_chartPath (if set) Secret no Configuration scope \u2612 parameter \u2612 general \u2612 steps \u2612 stages Resource references commonPipelineEnvironment : reference to: custom/localHelmChartPath","title":"chartPath"},{"location":"steps/kubernetesDeploy/#containercommand","text":"Jenkins-specific: Used for proper environment setup. Kubernetes only: Allows to specify start command for container created with dockerImage parameter to overwrite Piper default (/usr/bin/tail -f /dev/null). back to overview Scope Details Aliases - Type string Mandatory no Default Secret no Configuration scope \u2612 parameter \u2612 general \u2612 steps \u2612 stages Resource references none","title":"containerCommand"},{"location":"steps/kubernetesDeploy/#containerimagename","text":"Name of the container which will be built - will be used together with containerImageTag instead of parameter containerImage back to overview Scope Details Aliases dockerImageName Type string Mandatory no Default $PIPER_containerImageName (if set) Secret no Configuration scope \u2612 parameter \u2612 general \u2612 steps \u2612 stages Resource references none","title":"containerImageName"},{"location":"steps/kubernetesDeploy/#containerimagetag","text":"Tag of the container which will be built - will be used together with containerImageName instead of parameter containerImage back to overview Scope Details Aliases artifactVersion Type string Mandatory no Default $PIPER_containerImageTag (if set) Secret no Configuration scope \u2612 parameter \u2612 general \u2612 steps \u2612 stages Resource references commonPipelineEnvironment : reference to: artifactVersion","title":"containerImageTag"},{"location":"steps/kubernetesDeploy/#containerregistrypassword","text":"Password for container registry access - typically provided by the CI/CD environment. back to overview Scope Details Aliases - Type string Mandatory no Default $PIPER_containerRegistryPassword (if set) Secret yes Configuration scope \u2612 parameter \u2610 general \u2612 steps \u2612 stages Resource references Jenkins credential id: id: dockerCredentialsId reference to: password commonPipelineEnvironment : reference to: container/repositoryPassword commonPipelineEnvironment : reference to: custom/repositoryPassword","title":"containerRegistryPassword"},{"location":"steps/kubernetesDeploy/#containerregistrysecret","text":"Name of the container registry secret used for pulling containers from the registry. For deployTool: helm/helm3 : If containerRegistryUser and containerRegistryPassword are provided, a secret is created on the fly and the information is passed to the helm template. For deployTool: kubectl : If containerRegistryUser and containerRegistryPassword are provided, a secret with the given name will be created in the Kubernetes cluster. If neither containerRegistryUser nor containerRegistryPassword are provided, it is expected that a secret with the configured name exists in the target Kubernetes cluster. back to overview Scope Details Aliases - Type string Mandatory no Default regsecret Secret no Configuration scope \u2612 parameter \u2610 general \u2612 steps \u2612 stages Resource references none","title":"containerRegistrySecret"},{"location":"steps/kubernetesDeploy/#containerregistryurl","text":"http(s) url of the Container registry where the image to deploy is located. back to overview Scope Details Aliases dockerRegistryUrl Type string Mandatory yes Default $PIPER_containerRegistryUrl (if set) Secret no Configuration scope \u2612 parameter \u2612 general \u2612 steps \u2612 stages Resource references commonPipelineEnvironment : reference to: container/registryUrl","title":"containerRegistryUrl"},{"location":"steps/kubernetesDeploy/#containerregistryuser","text":"Username for container registry access - typically provided by the CI/CD environment. back to overview Scope Details Aliases - Type string Mandatory no Default $PIPER_containerRegistryUser (if set) Secret yes Configuration scope \u2612 parameter \u2610 general \u2612 steps \u2612 stages Resource references Jenkins credential id: id: dockerCredentialsId reference to: username commonPipelineEnvironment : reference to: container/repositoryUsername commonPipelineEnvironment : reference to: custom/repositoryUsername","title":"containerRegistryUser"},{"location":"steps/kubernetesDeploy/#containershell","text":"Jenkins-specific: Used for proper environment setup. Allows to specify the shell to be executed for container with containerName. back to overview Scope Details Aliases - Type string Mandatory no Default Secret no Configuration scope \u2612 parameter \u2612 general \u2612 steps \u2612 stages Resource references none","title":"containerShell"},{"location":"steps/kubernetesDeploy/#createdockerregistrysecret","text":"Only for deployTool:kubectl : Toggle to turn on containerRegistrySecret creation. back to overview Scope Details Aliases - Type bool Mandatory no Default false Possible values - true - false Secret no Configuration scope \u2612 parameter \u2610 general \u2612 steps \u2612 stages Resource references none","title":"createDockerRegistrySecret"},{"location":"steps/kubernetesDeploy/#deploycommand","text":"Only for deployTool: kubectl : defines the command apply or replace . The default is apply . back to overview Scope Details Aliases - Type string Mandatory no Default apply Possible values - apply - replace Secret no Configuration scope \u2612 parameter \u2610 general \u2612 steps \u2612 stages Resource references none","title":"deployCommand"},{"location":"steps/kubernetesDeploy/#deploytool","text":"Defines the tool which should be used for deployment. back to overview Scope Details Aliases - Type string Mandatory no Default kubectl Possible values - kubectl - helm - helm3 Secret no Configuration scope \u2612 parameter \u2610 general \u2612 steps \u2612 stages Resource references none","title":"deployTool"},{"location":"steps/kubernetesDeploy/#deploymentname","text":"Defines the name of the deployment. It is a mandatory parameter when deployTool:helm or deployTool:helm3 . back to overview Scope Details Aliases helmDeploymentName Type string Mandatory no Default $PIPER_deploymentName (if set) Secret no Configuration scope \u2612 parameter \u2610 general \u2612 steps \u2612 stages Resource references none","title":"deploymentName"},{"location":"steps/kubernetesDeploy/#dockerconfigjson","text":"Path to the file .docker/config.json - this is typically provided by your CI/CD system. You can find more details about the Docker credentials in the Docker documentation . back to overview Scope Details Aliases - Type string Mandatory no Default .pipeline/docker/config.json Secret yes Configuration scope \u2612 parameter \u2610 general \u2612 steps \u2612 stages Resource references Jenkins credential id: id: dockerConfigJsonCredentialsId Vault resource: name: dockerConfigFileVaultSecretName default value: docker-config Vault paths: $(vaultPath)/docker-config $(vaultBasePath)/$(vaultPipelineName)/docker-config $(vaultBasePath)/GROUP-SECRETS/docker-config","title":"dockerConfigJSON"},{"location":"steps/kubernetesDeploy/#dockerenvvars","text":"Environment variables to set in the container, e.g. [http_proxy: \"proxy:8080\"]. back to overview Scope Details Aliases - Type map[string]string Mandatory no Default Secret no Configuration scope \u2612 parameter \u2612 general \u2612 steps \u2612 stages Resource references none","title":"dockerEnvVars"},{"location":"steps/kubernetesDeploy/#dockerimage","text":"Name of the docker image that should be used. If empty, Docker is not used and the command is executed directly on the Jenkins system. back to overview Scope Details Aliases - Type string Mandatory no Default dtzar/helm-kubectl:3 Secret no Configuration scope \u2612 parameter \u2612 general \u2612 steps \u2612 stages Resource references none","title":"dockerImage"},{"location":"steps/kubernetesDeploy/#dockername","text":"Kubernetes only: Name of the container launching dockerImage. SideCar only: Name of the container in local network. back to overview Scope Details Aliases - Type string Mandatory no Default Secret no Configuration scope \u2612 parameter \u2612 general \u2612 steps \u2612 stages Resource references none","title":"dockerName"},{"location":"steps/kubernetesDeploy/#dockeroptions","text":"Docker options to be set when starting the container. back to overview Scope Details Aliases - Type []string Mandatory no Default [{-u 0}] Secret no Configuration scope \u2612 parameter \u2612 general \u2612 steps \u2612 stages Resource references none","title":"dockerOptions"},{"location":"steps/kubernetesDeploy/#dockerpullimage","text":"Set this to 'false' to bypass a docker image pull. Useful during development process. Allows testing of images which are available in the local registry only. back to overview Scope Details Aliases - Type bool Mandatory no Default true Possible values - true - false Secret no Configuration scope \u2612 parameter \u2612 general \u2612 steps \u2612 stages Resource references none","title":"dockerPullImage"},{"location":"steps/kubernetesDeploy/#dockervolumebind","text":"Jenkins-specific: Used for proper environment setup. Volumes that should be mounted into the docker container. back to overview Scope Details Aliases - Type map[string]string Mandatory no Default Secret no Configuration scope \u2612 parameter \u2612 general \u2612 steps \u2612 stages Resource references none","title":"dockerVolumeBind"},{"location":"steps/kubernetesDeploy/#dockerworkspace","text":"Jenkins-specific: Used for proper environment setup. Kubernetes only: Specifies a dedicated user home directory for the container which will be passed as value for environment variable HOME . back to overview Scope Details Aliases - Type string Mandatory no Default /config Secret no Configuration scope \u2612 parameter \u2612 general \u2612 steps \u2612 stages Resource references none","title":"dockerWorkspace"},{"location":"steps/kubernetesDeploy/#forceupdates","text":"Adds --force flag to a helm resource update command or to a kubectl replace command back to overview Scope Details Aliases force Type bool Mandatory no Default true Possible values - true - false Secret no Configuration scope \u2612 parameter \u2610 general \u2612 steps \u2612 stages Resource references none","title":"forceUpdates"},{"location":"steps/kubernetesDeploy/#githubtoken","text":"GitHub personal access token as per https://help.github.com/en/github/authenticating-to-github/creating-a-personal-access-token-for-the-command-line back to overview Scope Details Aliases access_token Type string Mandatory no Default $PIPER_githubToken (if set) Secret yes Configuration scope \u2612 parameter \u2612 general \u2612 steps \u2612 stages Resource references Jenkins credential id: id: githubTokenCredentialsId Vault resource: name: githubVaultSecretName default value: github Vault paths: $(vaultPath)/github $(vaultBasePath)/$(vaultPipelineName)/github $(vaultBasePath)/GROUP-SECRETS/github","title":"githubToken"},{"location":"steps/kubernetesDeploy/#helmdeploywaitseconds","text":"Number of seconds before helm deploy returns. back to overview Scope Details Aliases - Type int Mandatory no Default 300 Secret no Configuration scope \u2612 parameter \u2610 general \u2612 steps \u2612 stages Resource references none","title":"helmDeployWaitSeconds"},{"location":"steps/kubernetesDeploy/#helmtestwaitseconds","text":"Number of seconds to wait for any individual Kubernetes operation (like Jobs for hooks). See https://helm.sh/docs/helm/helm_test/#options for further details back to overview Scope Details Aliases - Type int Mandatory no Default 300 Secret no Configuration scope \u2612 parameter \u2610 general \u2612 steps \u2612 stages Resource references none","title":"helmTestWaitSeconds"},{"location":"steps/kubernetesDeploy/#helmvalues","text":"List of helm values as YAML file reference or URL (as per helm parameter description for -f / --values ) back to overview Scope Details Aliases - Type []string Mandatory no Default $PIPER_helmValues (if set) Secret no Configuration scope \u2612 parameter \u2610 general \u2612 steps \u2612 stages Resource references none","title":"helmValues"},{"location":"steps/kubernetesDeploy/#image","text":"Full name of the image to be deployed. back to overview Scope Details Deprecated This parameter is deprecated, please use containerImageName and containerImageTag Aliases deployImage Type string Mandatory no Default $PIPER_image (if set) Secret no Configuration scope \u2612 parameter \u2610 general \u2612 steps \u2612 stages Resource references commonPipelineEnvironment : reference to: container/imageNameTag","title":"image"},{"location":"steps/kubernetesDeploy/#imagedigests","text":"List of image digests of the images to be deployed, in the format sha256:<hash> . If provided, image digests will be appended to the image tag, e.g. <repository>/<name>:<tag>@<digest> back to overview Scope Details Aliases - Type []string Mandatory no Default $PIPER_imageDigests (if set) Secret no Configuration scope \u2612 parameter \u2610 general \u2612 steps \u2612 stages Resource references commonPipelineEnvironment : reference to: container/imageDigests","title":"imageDigests"},{"location":"steps/kubernetesDeploy/#imagenametags","text":"List of full names (registry and tag) of the images to be deployed. back to overview Scope Details Aliases - Type []string Mandatory no Default $PIPER_imageNameTags (if set) Secret no Configuration scope \u2612 parameter \u2610 general \u2612 steps \u2612 stages Resource references commonPipelineEnvironment : reference to: container/imageNameTags","title":"imageNameTags"},{"location":"steps/kubernetesDeploy/#imagenames","text":"List of names of the images to be deployed. back to overview Scope Details Aliases - Type []string Mandatory no Default $PIPER_imageNames (if set) Secret no Configuration scope \u2612 parameter \u2610 general \u2612 steps \u2612 stages Resource references commonPipelineEnvironment : reference to: container/imageNames","title":"imageNames"},{"location":"steps/kubernetesDeploy/#ingresshosts","text":"DEPRECATED List of ingress hosts to be exposed via helm deployment. Host names are passed to helm template via ingress configuration. This requires a modification to the default helm template, thus it is not recommended. Recommendation is to use custom values and pass them via parameter helmValues . Since helm supports multiple files on top of the values.yaml , landscape-specific attributes can be passed via a specific file. back to overview Scope Details Aliases - Type []string Mandatory no Default $PIPER_ingressHosts (if set) Secret no Configuration scope \u2612 parameter \u2610 general \u2612 steps \u2612 stages Resource references none","title":"ingressHosts"},{"location":"steps/kubernetesDeploy/#insecureskiptlsverify","text":"This disables TLS certificate verification, allowing connections even with self-signed or untrusted certificates. More details back to overview Scope Details Aliases - Type bool Mandatory no Default false Possible values - true - false Secret no Configuration scope \u2612 parameter \u2610 general \u2612 steps \u2612 stages Resource references none","title":"insecureSkipTLSVerify"},{"location":"steps/kubernetesDeploy/#keepfaileddeployments","text":"Defines whether a failed deployment will be purged back to overview Scope Details Aliases - Type bool Mandatory no Default false Possible values - true - false Secret no Configuration scope \u2612 parameter \u2612 general \u2612 steps \u2612 stages Resource references none","title":"keepFailedDeployments"},{"location":"steps/kubernetesDeploy/#kubeconfig","text":"Defines the path to the \"kubeconfig\" file. back to overview Scope Details Aliases - Type string Mandatory no Default $PIPER_kubeConfig (if set) Secret yes Configuration scope \u2612 parameter \u2612 general \u2612 steps \u2612 stages Resource references Jenkins credential id: id: kubeConfigFileCredentialsId Vault resource: name: kubeConfigFileVaultSecretName default value: kube-config Vault paths: $(vaultPath)/kube-config $(vaultBasePath)/$(vaultPipelineName)/kube-config $(vaultBasePath)/GROUP-SECRETS/kube-config","title":"kubeConfig"},{"location":"steps/kubernetesDeploy/#kubecontext","text":"Defines the context to use from the \"kubeconfig\" file. back to overview Scope Details Aliases - Type string Mandatory no Default $PIPER_kubeContext (if set) Secret no Configuration scope \u2612 parameter \u2610 general \u2612 steps \u2612 stages Resource references none","title":"kubeContext"},{"location":"steps/kubernetesDeploy/#kubetoken","text":"Contains the id_token used by kubectl for authentication. Consider using kubeConfig parameter instead. back to overview Scope Details Aliases - Type string Mandatory no Default $PIPER_kubeToken (if set) Secret yes Configuration scope \u2612 parameter \u2612 general \u2612 steps \u2612 stages Resource references Jenkins credential id: id: kubeTokenCredentialsId","title":"kubeToken"},{"location":"steps/kubernetesDeploy/#namespace","text":"Defines the target Kubernetes namespace for the deployment. back to overview Scope Details Aliases - helmDeploymentNamespace - k8sDeploymentNamespace Type string Mandatory no Default default Secret no Configuration scope \u2612 parameter \u2610 general \u2612 steps \u2612 stages Resource references none","title":"namespace"},{"location":"steps/kubernetesDeploy/#rendersubchartnotes","text":"If set, render subchart notes along with the parent. back to overview Scope Details Aliases - Type bool Mandatory no Default true Possible values - true - false Secret no Configuration scope \u2612 parameter \u2612 general \u2612 steps \u2612 stages Resource references none","title":"renderSubchartNotes"},{"location":"steps/kubernetesDeploy/#runhelmtests","text":"Defines whether or not to run helm tests against the recently deployed release back to overview Scope Details Aliases - Type bool Mandatory no Default false Possible values - true - false Secret no Configuration scope \u2612 parameter \u2612 general \u2612 steps \u2612 stages Resource references none","title":"runHelmTests"},{"location":"steps/kubernetesDeploy/#script","text":"The common script environment of the Jenkinsfile running. Typically the reference to the script calling the pipeline step is provided with the this parameter, as in script: this . This allows the function to access the commonPipelineEnvironment for retrieving, e.g. configuration parameters. back to overview Scope Details Aliases - Type Jenkins Script Mandatory yes Default Secret no Configuration scope \u2610 parameter \u2610 general \u2610 steps \u2610 stages Resource references none","title":"script"},{"location":"steps/kubernetesDeploy/#setupscript","text":"For helm-based deploymens only! HTTP location of setup script. The script will be downloaded from a GitHub location using the githubToken and executed before the installation of the helm package. back to overview Scope Details Aliases - Type string Mandatory no Default $PIPER_setupScript (if set) Secret no Configuration scope \u2612 parameter \u2610 general \u2612 steps \u2612 stages Resource references none","title":"setupScript"},{"location":"steps/kubernetesDeploy/#showtestlogs","text":"Defines whether to print the pod logs after running helm tests back to overview Scope Details Aliases - Type bool Mandatory no Default false Possible values - true - false Secret no Configuration scope \u2612 parameter \u2612 general \u2612 steps \u2612 stages Resource references none","title":"showTestLogs"},{"location":"steps/kubernetesDeploy/#stashcontent","text":"Jenkins-specific: Used for proper environment setup. Specific stashes that should be considered for the step execution. back to overview Scope Details Aliases - Type []string Mandatory no Default - deployDescriptor - downloadedArtifact Secret no Configuration scope \u2612 parameter \u2612 general \u2612 steps \u2612 stages Resource references none","title":"stashContent"},{"location":"steps/kubernetesDeploy/#teardownscript","text":"For helm-based deploymens only! HTTP location of setup script. The script will be downloaded from a GitHub location using the githubToken and executed at the end of the step. This can for example be used in order to remove a temporary namespace which was created for the test. back to overview Scope Details Aliases - Type string Mandatory no Default $PIPER_teardownScript (if set) Secret no Configuration scope \u2612 parameter \u2610 general \u2612 steps \u2612 stages Resource references none","title":"teardownScript"},{"location":"steps/kubernetesDeploy/#tillernamespace","text":"Defines optional tiller namespace for deployments using helm. back to overview Scope Details Aliases helmTillerNamespace Type string Mandatory no Default $PIPER_tillerNamespace (if set) Secret no Configuration scope \u2612 parameter \u2610 general \u2612 steps \u2612 stages Resource references none","title":"tillerNamespace"},{"location":"steps/kubernetesDeploy/#valuesmapping","text":"Mapping of values provided by Piper onto custom paths in format [custom-path]: [piper-value] Example: valuesMapping : subchart.image.tag : image.debug.tag subchart.image.repository : image.debug.repository subchart.image.pullsecret : secret.dockerconfigjson back to overview Scope Details Aliases - Type map[string]interface{} Mandatory no Default $PIPER_valuesMapping (if set) Secret no Configuration scope \u2612 parameter \u2610 general \u2612 steps \u2612 stages Resource references none","title":"valuesMapping"},{"location":"steps/kubernetesDeploy/#verbose","text":"verbose output back to overview Scope Details Aliases - Type bool Mandatory no Default false Possible values - true - false Secret no Configuration scope \u2612 parameter \u2612 general \u2612 steps \u2612 stages Resource references none","title":"verbose"},{"location":"steps/kubernetesDeploy/#verificationscript","text":"For helm-based deploymens only! HTTP location of verification script. The script will be downloaded from a GitHub location using the githubToken and executed after installation of the helm package. It can be used to verify if all required artifacts are ready before progressing with for example helmTest using the step option runHelmTests: true back to overview Scope Details Aliases - Type string Mandatory no Default $PIPER_verificationScript (if set) Secret no Configuration scope \u2612 parameter \u2610 general \u2612 steps \u2612 stages Resource references none","title":"verificationScript"},{"location":"steps/kubernetesDeploy/#kubeconfigfilecredentialsid","text":"Jenkins 'Secret file' credentials ID containing kubeconfig file. Details can be found in the Kubernetes documentation . back to overview Scope Details Aliases kubeCredentialsId ( deprecated ) Type string Configuration scope \u2612 parameter \u2612 general \u2612 steps \u2612 stages","title":"kubeConfigFileCredentialsId"},{"location":"steps/kubernetesDeploy/#kubetokencredentialsid","text":"Jenkins 'Secret text' credentials ID containing token to authenticate to Kubernetes. This is an alternative way to using a kubeconfig file. Details can be found in the Kubernetes documentation . back to overview Scope Details Aliases k8sTokenCredentialsId ( deprecated ) Type string Configuration scope \u2612 parameter \u2612 general \u2612 steps \u2612 stages","title":"kubeTokenCredentialsId"},{"location":"steps/kubernetesDeploy/#dockercredentialsid","text":"back to overview Scope Details Aliases - Type string Configuration scope \u2612 parameter \u2612 general \u2612 steps \u2612 stages","title":"dockerCredentialsId"},{"location":"steps/kubernetesDeploy/#dockerconfigjsoncredentialsid","text":"Jenkins 'Secret file' credentials ID containing Docker config.json (with registry credential(s)). back to overview Scope Details Aliases - Type string Configuration scope \u2612 parameter \u2612 general \u2612 steps \u2612 stages","title":"dockerConfigJsonCredentialsId"},{"location":"steps/kubernetesDeploy/#githubtokencredentialsid","text":"Jenkins credentials ID containing the github token. back to overview Scope Details Aliases - Type string Configuration scope \u2612 parameter \u2612 general \u2612 steps \u2612 stages","title":"githubTokenCredentialsId"},{"location":"steps/kubernetesDeploy/#exceptions","text":"None","title":"Exceptions"},{"location":"steps/kubernetesDeploy/#examples","text":"kubernetesDeploy script: this // Deploy a helm chart called \"myChart\" using Helm 3 kubernetesDeploy script: this , deployTool: 'helm3' , chartPath: 'myChart' , deploymentName: 'myRelease' , image: 'nginx' , containerRegistryUrl: 'https://docker.io'","title":"Examples"},{"location":"steps/mailSendNotification/","text":"mailSendNotification \u00b6 Description \u00b6 Sends notifications to all potential culprits of a current or previous build failure and to fixed list of recipients. It will attach the current build log to the email. Notifications are sent in following cases: current build failed or is unstable current build is successful and previous build failed or was unstable Prerequisites \u00b6 none Example \u00b6 Usage of pipeline step: mailSendNotification script: this Parameters \u00b6 name mandatory default possible values buildResult no gitCommitId no gitSshKeyCredentialsId no `` Jenkins credentials id gitUrl no notificationAttachment no true true , false notificationRecipients no notifyCulprits no true true , false numLogLinesInBody no 100 projectName no script yes wrapInNode no false true , false buildResult - Set the build result used to determine the mail template. default currentBuild.result gitCommitId - Only if notifyCulprits is set: Defines a dedicated git commitId for culprit retrieval. default commonPipelineEnvironment.getGitCommitId() gitSshKeyCredentialsId - Only if notifyCulprits is set: Credentials if the repository is protected. gitUrl - Only if notifyCulprits is set: Repository url used to retrieve culprit information. default commonPipelineEnvironment.getGitSshUrl() notificationAttachment - defines if the console log file should be attached to the notification mail. notificationRecipients - A space-separated list of recipients that always get the notification. notifyCulprits - Notify all committers since the last successful build. numLogLinesInBody - Number of log line which are included in the email body. projectName - The project name used in the email subject. default currentBuild.fullProjectName script - The common script environment of the Jenkinsfile running. Typically the reference to the script calling the pipeline step is provided with the this parameter, as in script: this . This allows the function to access the commonPipelineEnvironment for retrieving, e.g. configuration parameters. wrapInNode - Needs to be set to true if step is used outside of a node context, e.g. post actions in a declarative pipeline script. default false Step configuration \u00b6 We recommend to define values of step parameters via config.yml file . In following sections of the config.yml the configuration is possible: parameter general step/stage buildResult X gitCommitId X gitSshKeyCredentialsId X X gitUrl X notificationAttachment X notificationRecipients X notifyCulprits X numLogLinesInBody X projectName X script wrapInNode X Dependencies \u00b6 The step depends on the following Jenkins plugins email-ext pipeline-utility-steps ssh-agent workflow-basic-steps workflow-cps-global-lib workflow-durable-task-step Transitive dependencies are omitted. The list might be incomplete. Consider using the ppiper/jenkins-master docker image. This images comes with preinstalled plugins. Side effects \u00b6 none Exceptions \u00b6 none","title":"mailSendNotification"},{"location":"steps/mailSendNotification/#mailsendnotification","text":"","title":"mailSendNotification"},{"location":"steps/mailSendNotification/#description","text":"Sends notifications to all potential culprits of a current or previous build failure and to fixed list of recipients. It will attach the current build log to the email. Notifications are sent in following cases: current build failed or is unstable current build is successful and previous build failed or was unstable","title":"Description"},{"location":"steps/mailSendNotification/#prerequisites","text":"none","title":"Prerequisites"},{"location":"steps/mailSendNotification/#example","text":"Usage of pipeline step: mailSendNotification script: this","title":"Example"},{"location":"steps/mailSendNotification/#parameters","text":"name mandatory default possible values buildResult no gitCommitId no gitSshKeyCredentialsId no `` Jenkins credentials id gitUrl no notificationAttachment no true true , false notificationRecipients no notifyCulprits no true true , false numLogLinesInBody no 100 projectName no script yes wrapInNode no false true , false buildResult - Set the build result used to determine the mail template. default currentBuild.result gitCommitId - Only if notifyCulprits is set: Defines a dedicated git commitId for culprit retrieval. default commonPipelineEnvironment.getGitCommitId() gitSshKeyCredentialsId - Only if notifyCulprits is set: Credentials if the repository is protected. gitUrl - Only if notifyCulprits is set: Repository url used to retrieve culprit information. default commonPipelineEnvironment.getGitSshUrl() notificationAttachment - defines if the console log file should be attached to the notification mail. notificationRecipients - A space-separated list of recipients that always get the notification. notifyCulprits - Notify all committers since the last successful build. numLogLinesInBody - Number of log line which are included in the email body. projectName - The project name used in the email subject. default currentBuild.fullProjectName script - The common script environment of the Jenkinsfile running. Typically the reference to the script calling the pipeline step is provided with the this parameter, as in script: this . This allows the function to access the commonPipelineEnvironment for retrieving, e.g. configuration parameters. wrapInNode - Needs to be set to true if step is used outside of a node context, e.g. post actions in a declarative pipeline script. default false","title":"Parameters"},{"location":"steps/mailSendNotification/#step-configuration","text":"We recommend to define values of step parameters via config.yml file . In following sections of the config.yml the configuration is possible: parameter general step/stage buildResult X gitCommitId X gitSshKeyCredentialsId X X gitUrl X notificationAttachment X notificationRecipients X notifyCulprits X numLogLinesInBody X projectName X script wrapInNode X","title":"Step configuration"},{"location":"steps/mailSendNotification/#dependencies","text":"The step depends on the following Jenkins plugins email-ext pipeline-utility-steps ssh-agent workflow-basic-steps workflow-cps-global-lib workflow-durable-task-step Transitive dependencies are omitted. The list might be incomplete. Consider using the ppiper/jenkins-master docker image. This images comes with preinstalled plugins.","title":"Dependencies"},{"location":"steps/mailSendNotification/#side-effects","text":"none","title":"Side effects"},{"location":"steps/mailSendNotification/#exceptions","text":"none","title":"Exceptions"},{"location":"steps/malwareExecuteScan/","text":"malwareExecuteScan \u00b6 Performs a malware scan using the SAP Malware Scanning Service . Parameters \u00b6 Overview - Step \u00b6 Name Mandatory Additional information buildTool yes host yes password (yes) pass via ENV, Vault or Jenkins credentials ( malwareScanCredentialsId ) script (yes) reference to Jenkins main pipeline script username (yes) pass via ENV, Vault or Jenkins credentials ( malwareScanCredentialsId ) containerRegistryPassword no pass via ENV or Jenkins credentials containerRegistryUser no pass via ENV or Jenkins credentials dockerConfigJSON no pass via ENV, Vault or Jenkins credentials reportFileName no scanFile no scanImage no scanImageRegistryUrl no timeout no verbose no activates debug output Overview - Execution Environment \u00b6 Orchestrator-specific only These parameters are relevant for orchestrator usage and not considered when using the command line option. Name Mandatory Additional information Details \u00b6 buildTool \u00b6 Defines the tool which is used for building the artifact. back to overview Scope Details Aliases - Type string Mandatory yes Default $PIPER_buildTool (if set) Secret no Configuration scope \u2612 parameter \u2612 general \u2612 steps \u2612 stages Resource references commonPipelineEnvironment : reference to: buildTool containerRegistryPassword \u00b6 For buildTool: docker : Password for container registry access - typically provided by the CI/CD environment. back to overview Scope Details Aliases - Type string Mandatory no Default $PIPER_containerRegistryPassword (if set) Secret yes Configuration scope \u2612 parameter \u2610 general \u2612 steps \u2612 stages Resource references commonPipelineEnvironment : reference to: container/repositoryPassword commonPipelineEnvironment : reference to: custom/repositoryPassword containerRegistryUser \u00b6 For buildTool: docker : Username for container registry access - typically provided by the CI/CD environment. back to overview Scope Details Aliases - Type string Mandatory no Default $PIPER_containerRegistryUser (if set) Secret yes Configuration scope \u2612 parameter \u2610 general \u2612 steps \u2612 stages Resource references commonPipelineEnvironment : reference to: container/repositoryUsername commonPipelineEnvironment : reference to: custom/repositoryUsername dockerConfigJSON \u00b6 Path to the file .docker/config.json - this is typically provided by your CI/CD system. You can find more details about the Docker credentials in the Docker documentation . back to overview Scope Details Aliases - Type string Mandatory no Default $PIPER_dockerConfigJSON (if set) Secret yes Configuration scope \u2612 parameter \u2610 general \u2612 steps \u2612 stages Resource references commonPipelineEnvironment : reference to: custom/dockerConfigJSON Vault resource: name: dockerConfigFileVaultSecretName default value: docker-config Vault paths: $(vaultPath)/docker-config $(vaultBasePath)/$(vaultPipelineName)/docker-config $(vaultBasePath)/GROUP-SECRETS/docker-config host \u00b6 malware scanning host. back to overview Scope Details Aliases - Type string Mandatory yes Default $PIPER_host (if set) Secret no Configuration scope \u2612 parameter \u2610 general \u2612 steps \u2612 stages Resource references none password \u00b6 Password back to overview Scope Details Aliases - Type string Mandatory yes Default $PIPER_password (if set) Secret yes Configuration scope \u2612 parameter \u2610 general \u2612 steps \u2612 stages Resource references Jenkins credential id: id: malwareScanCredentialsId reference to: password Vault resource: name: malwareScanPasswordVaultSecretName default value: malware-scan Vault paths: $(vaultPath)/malware-scan $(vaultBasePath)/$(vaultPipelineName)/malware-scan $(vaultBasePath)/GROUP-SECRETS/malware-scan reportFileName \u00b6 The file name of the report to be created back to overview Scope Details Aliases - Type string Mandatory no Default malwarescan_report.json Secret no Configuration scope \u2612 parameter \u2610 general \u2612 steps \u2612 stages Resource references none scanFile \u00b6 The file which is scanned for malware back to overview Scope Details Aliases file ( deprecated ) Type string Mandatory no Default $PIPER_scanFile (if set) Secret no Configuration scope \u2612 parameter \u2610 general \u2612 steps \u2612 stages Resource references none scanImage \u00b6 For buildTool: docker : Defines the docker image which should be scanned. back to overview Scope Details Aliases - Type string Mandatory no Default $PIPER_scanImage (if set) Secret no Configuration scope \u2612 parameter \u2610 general \u2612 steps \u2612 stages Resource references commonPipelineEnvironment : reference to: container/imageNameTag scanImageRegistryUrl \u00b6 For buildTool: docker : Defines the registry where the scanImage is located. back to overview Scope Details Aliases - Type string Mandatory no Default $PIPER_scanImageRegistryUrl (if set) Secret no Configuration scope \u2612 parameter \u2610 general \u2612 steps \u2612 stages Resource references commonPipelineEnvironment : reference to: container/registryUrl script \u00b6 The common script environment of the Jenkinsfile running. Typically the reference to the script calling the pipeline step is provided with the this parameter, as in script: this . This allows the function to access the commonPipelineEnvironment for retrieving, e.g. configuration parameters. back to overview Scope Details Aliases - Type Jenkins Script Mandatory yes Default Secret no Configuration scope \u2610 parameter \u2610 general \u2610 steps \u2610 stages Resource references none timeout \u00b6 timeout for http layer in seconds back to overview Scope Details Aliases - Type string Mandatory no Default 600 Secret no Configuration scope \u2612 parameter \u2610 general \u2612 steps \u2612 stages Resource references none username \u00b6 User back to overview Scope Details Aliases - Type string Mandatory yes Default $PIPER_username (if set) Secret yes Configuration scope \u2612 parameter \u2610 general \u2612 steps \u2612 stages Resource references Jenkins credential id: id: malwareScanCredentialsId reference to: username Vault resource: name: malwareScanUsernameVaultSecretName default value: malware-scan Vault paths: $(vaultPath)/malware-scan $(vaultBasePath)/$(vaultPipelineName)/malware-scan $(vaultBasePath)/GROUP-SECRETS/malware-scan verbose \u00b6 verbose output back to overview Scope Details Aliases - Type bool Mandatory no Default false Possible values - true - false Secret no Configuration scope \u2612 parameter \u2612 general \u2612 steps \u2612 stages Resource references none malwareScanCredentialsId \u00b6 Jenkins 'Username with password' credentials ID containing the technical user/password credential used to communicate with the malwarescanning service. back to overview Scope Details Aliases - Type string Configuration scope \u2612 parameter \u2612 general \u2612 steps \u2612 stages Exceptions \u00b6 None Examples \u00b6 malwareExecuteScan script: this configuration steps: malwareExecuteScan: file: myFile.zip host: https://malwarescanner.example.sap.com malwareScanCredentialsId: MALWARESCAN","title":"malwareExecuteScan"},{"location":"steps/malwareExecuteScan/#malwareexecutescan","text":"Performs a malware scan using the SAP Malware Scanning Service .","title":"malwareExecuteScan"},{"location":"steps/malwareExecuteScan/#parameters","text":"","title":"Parameters"},{"location":"steps/malwareExecuteScan/#overview-step","text":"Name Mandatory Additional information buildTool yes host yes password (yes) pass via ENV, Vault or Jenkins credentials ( malwareScanCredentialsId ) script (yes) reference to Jenkins main pipeline script username (yes) pass via ENV, Vault or Jenkins credentials ( malwareScanCredentialsId ) containerRegistryPassword no pass via ENV or Jenkins credentials containerRegistryUser no pass via ENV or Jenkins credentials dockerConfigJSON no pass via ENV, Vault or Jenkins credentials reportFileName no scanFile no scanImage no scanImageRegistryUrl no timeout no verbose no activates debug output","title":"Overview - Step"},{"location":"steps/malwareExecuteScan/#overview-execution-environment","text":"Orchestrator-specific only These parameters are relevant for orchestrator usage and not considered when using the command line option. Name Mandatory Additional information","title":"Overview - Execution Environment"},{"location":"steps/malwareExecuteScan/#details","text":"","title":"Details"},{"location":"steps/malwareExecuteScan/#buildtool","text":"Defines the tool which is used for building the artifact. back to overview Scope Details Aliases - Type string Mandatory yes Default $PIPER_buildTool (if set) Secret no Configuration scope \u2612 parameter \u2612 general \u2612 steps \u2612 stages Resource references commonPipelineEnvironment : reference to: buildTool","title":"buildTool"},{"location":"steps/malwareExecuteScan/#containerregistrypassword","text":"For buildTool: docker : Password for container registry access - typically provided by the CI/CD environment. back to overview Scope Details Aliases - Type string Mandatory no Default $PIPER_containerRegistryPassword (if set) Secret yes Configuration scope \u2612 parameter \u2610 general \u2612 steps \u2612 stages Resource references commonPipelineEnvironment : reference to: container/repositoryPassword commonPipelineEnvironment : reference to: custom/repositoryPassword","title":"containerRegistryPassword"},{"location":"steps/malwareExecuteScan/#containerregistryuser","text":"For buildTool: docker : Username for container registry access - typically provided by the CI/CD environment. back to overview Scope Details Aliases - Type string Mandatory no Default $PIPER_containerRegistryUser (if set) Secret yes Configuration scope \u2612 parameter \u2610 general \u2612 steps \u2612 stages Resource references commonPipelineEnvironment : reference to: container/repositoryUsername commonPipelineEnvironment : reference to: custom/repositoryUsername","title":"containerRegistryUser"},{"location":"steps/malwareExecuteScan/#dockerconfigjson","text":"Path to the file .docker/config.json - this is typically provided by your CI/CD system. You can find more details about the Docker credentials in the Docker documentation . back to overview Scope Details Aliases - Type string Mandatory no Default $PIPER_dockerConfigJSON (if set) Secret yes Configuration scope \u2612 parameter \u2610 general \u2612 steps \u2612 stages Resource references commonPipelineEnvironment : reference to: custom/dockerConfigJSON Vault resource: name: dockerConfigFileVaultSecretName default value: docker-config Vault paths: $(vaultPath)/docker-config $(vaultBasePath)/$(vaultPipelineName)/docker-config $(vaultBasePath)/GROUP-SECRETS/docker-config","title":"dockerConfigJSON"},{"location":"steps/malwareExecuteScan/#host","text":"malware scanning host. back to overview Scope Details Aliases - Type string Mandatory yes Default $PIPER_host (if set) Secret no Configuration scope \u2612 parameter \u2610 general \u2612 steps \u2612 stages Resource references none","title":"host"},{"location":"steps/malwareExecuteScan/#password","text":"Password back to overview Scope Details Aliases - Type string Mandatory yes Default $PIPER_password (if set) Secret yes Configuration scope \u2612 parameter \u2610 general \u2612 steps \u2612 stages Resource references Jenkins credential id: id: malwareScanCredentialsId reference to: password Vault resource: name: malwareScanPasswordVaultSecretName default value: malware-scan Vault paths: $(vaultPath)/malware-scan $(vaultBasePath)/$(vaultPipelineName)/malware-scan $(vaultBasePath)/GROUP-SECRETS/malware-scan","title":"password"},{"location":"steps/malwareExecuteScan/#reportfilename","text":"The file name of the report to be created back to overview Scope Details Aliases - Type string Mandatory no Default malwarescan_report.json Secret no Configuration scope \u2612 parameter \u2610 general \u2612 steps \u2612 stages Resource references none","title":"reportFileName"},{"location":"steps/malwareExecuteScan/#scanfile","text":"The file which is scanned for malware back to overview Scope Details Aliases file ( deprecated ) Type string Mandatory no Default $PIPER_scanFile (if set) Secret no Configuration scope \u2612 parameter \u2610 general \u2612 steps \u2612 stages Resource references none","title":"scanFile"},{"location":"steps/malwareExecuteScan/#scanimage","text":"For buildTool: docker : Defines the docker image which should be scanned. back to overview Scope Details Aliases - Type string Mandatory no Default $PIPER_scanImage (if set) Secret no Configuration scope \u2612 parameter \u2610 general \u2612 steps \u2612 stages Resource references commonPipelineEnvironment : reference to: container/imageNameTag","title":"scanImage"},{"location":"steps/malwareExecuteScan/#scanimageregistryurl","text":"For buildTool: docker : Defines the registry where the scanImage is located. back to overview Scope Details Aliases - Type string Mandatory no Default $PIPER_scanImageRegistryUrl (if set) Secret no Configuration scope \u2612 parameter \u2610 general \u2612 steps \u2612 stages Resource references commonPipelineEnvironment : reference to: container/registryUrl","title":"scanImageRegistryUrl"},{"location":"steps/malwareExecuteScan/#script","text":"The common script environment of the Jenkinsfile running. Typically the reference to the script calling the pipeline step is provided with the this parameter, as in script: this . This allows the function to access the commonPipelineEnvironment for retrieving, e.g. configuration parameters. back to overview Scope Details Aliases - Type Jenkins Script Mandatory yes Default Secret no Configuration scope \u2610 parameter \u2610 general \u2610 steps \u2610 stages Resource references none","title":"script"},{"location":"steps/malwareExecuteScan/#timeout","text":"timeout for http layer in seconds back to overview Scope Details Aliases - Type string Mandatory no Default 600 Secret no Configuration scope \u2612 parameter \u2610 general \u2612 steps \u2612 stages Resource references none","title":"timeout"},{"location":"steps/malwareExecuteScan/#username","text":"User back to overview Scope Details Aliases - Type string Mandatory yes Default $PIPER_username (if set) Secret yes Configuration scope \u2612 parameter \u2610 general \u2612 steps \u2612 stages Resource references Jenkins credential id: id: malwareScanCredentialsId reference to: username Vault resource: name: malwareScanUsernameVaultSecretName default value: malware-scan Vault paths: $(vaultPath)/malware-scan $(vaultBasePath)/$(vaultPipelineName)/malware-scan $(vaultBasePath)/GROUP-SECRETS/malware-scan","title":"username"},{"location":"steps/malwareExecuteScan/#verbose","text":"verbose output back to overview Scope Details Aliases - Type bool Mandatory no Default false Possible values - true - false Secret no Configuration scope \u2612 parameter \u2612 general \u2612 steps \u2612 stages Resource references none","title":"verbose"},{"location":"steps/malwareExecuteScan/#malwarescancredentialsid","text":"Jenkins 'Username with password' credentials ID containing the technical user/password credential used to communicate with the malwarescanning service. back to overview Scope Details Aliases - Type string Configuration scope \u2612 parameter \u2612 general \u2612 steps \u2612 stages","title":"malwareScanCredentialsId"},{"location":"steps/malwareExecuteScan/#exceptions","text":"None","title":"Exceptions"},{"location":"steps/malwareExecuteScan/#examples","text":"malwareExecuteScan script: this configuration steps: malwareExecuteScan: file: myFile.zip host: https://malwarescanner.example.sap.com malwareScanCredentialsId: MALWARESCAN","title":"Examples"},{"location":"steps/mavenBuild/","text":"mavenBuild \u00b6 This step will install the maven project into the local maven repository. Description \u00b6 This step will install the maven project into the local maven repository. It will also prepare jacoco to record the code coverage and supports ci friendly versioning by flattening the pom before installing. build with dependencies from a private repository \u00b6 if your build has dependencies from a private repository you can include a project settings xml into the source code repository as below (replace the <url> tag with a valid private repo url). <?xml version=\"1.0\" encoding=\"UTF-8\"?> <settings xmlns= \"http://maven.apache.org/SETTINGS/1.0.0\" xmlns:xsi= \"http://www.w3.org/2001/XMLSchema-instance\" xsi:schemaLocation= \"http://maven.apache.org/SETTINGS/1.0.0 https://maven.apache.org/xsd/settings-1.0.0.xsd\" > <servers> <server> <id> private.repo.id </id> <username> ${env.PIPER_VAULTCREDENTIAL_USERNAME} </username> <password> ${env.PIPER_VAULTCREDENTIAL_PASSWORD} </password> </server> </servers> </settings> PIPER_VAULTCREDENTIAL_USERNAME and PIPER_VAULTCREDENTIAL_PASSWORD are the username and password for the private repository and are exposed as environment variables that must be present in the environment where the Piper step runs or alternatively can be created using : vault general purpose credentials include the below <repositories> tag in your pom.xml to reference the <server> and make sure the values in the <id> tags match <repositories> <repository> <id> private.repo.id </id> <url> https://private.repo.com/ </url> </repository> </repositories> Ensure the following configuration in the Piper config.yaml to ensure the above settings xml is included and all steps can consume this parameter: general : projectSettingsFile : <path to the above settings.xml> Usage \u00b6 We recommend to define values of step parameters via .pipeline/config.yml file . In this case, calling the step is essentially reduced to defining the step name. Calling the step can be done either in an orchestrator specific way (e.g. via a Jenkins library step) or on the command line. Jenkins Command Line library ( 'piper-lib-os' ) mavenBuild script: this piper mavenBuild Outputs \u00b6 Output type Details commonPipelineEnvironment custom/buildSettingsInfo custom/mavenBuildArtifacts Parameters \u00b6 Overview - Step \u00b6 Name Mandatory Additional information script (yes) reference to Jenkins main pipeline script altDeploymentRepositoryID no altDeploymentRepositoryPassword no pass via ENV, Vault or Jenkins credentials ( altDeploymentRepositoryPasswordId ) altDeploymentRepositoryUrl no altDeploymentRepositoryUser no buildSettingsInfo no createBOM no createBuildArtifactsMetadata no customTlsCertificateLinks no deployFlags no flatten no globalSettingsFile no javaCaCertFilePath no logSuccessfulMavenTransfers no m2Path no pomPath no profiles no projectSettingsFile no publish no verbose no activates debug output verify no Overview - Execution Environment \u00b6 Orchestrator-specific only These parameters are relevant for orchestrator usage and not considered when using the command line option. Name Mandatory Additional information containerCommand no containerShell no dockerEnvVars no dockerImage no dockerName no dockerOptions no dockerPullImage no dockerVolumeBind no dockerWorkspace no stashContent no Details \u00b6 altDeploymentRepositoryID \u00b6 Id for the alternative deployment repository to which the project artifacts should be deployed ( other than those specified in ). This id will be updated in settings.xml and will be used as a flag with DaltDeploymentRepository along with mavenAltDeploymentRepositoryUrl during maven deploy . When no settings.xml is provided a new one is created corresponding with tag back to overview Scope Details Aliases - Type string Mandatory no Default $PIPER_altDeploymentRepositoryID (if set) Secret no Configuration scope \u2612 parameter \u2612 general \u2612 steps \u2612 stages Resource references commonPipelineEnvironment : reference to: custom/repositoryId altDeploymentRepositoryPassword \u00b6 Password for the alternative deployment repository to which the project artifacts should be deployed ( other than those specified in ). This password will be updated in settings.xml . When no settings.xml is provided a new one is created corresponding with tag back to overview Scope Details Aliases - Type string Mandatory no Default $PIPER_altDeploymentRepositoryPassword (if set) Secret yes Configuration scope \u2612 parameter \u2612 general \u2612 steps \u2612 stages Resource references commonPipelineEnvironment : reference to: custom/mavenRepositoryPassword commonPipelineEnvironment : reference to: custom/repositoryPassword Jenkins credential id: id: altDeploymentRepositoryPasswordId Vault resource: name: altDeploymentRepositoryPasswordFileVaultSecretName default value: alt-deployment-repository-password Vault paths: $(vaultPath)/alt-deployment-repository-password $(vaultBasePath)/$(vaultPipelineName)/alt-deployment-repository-password $(vaultBasePath)/GROUP-SECRETS/alt-deployment-repository-password altDeploymentRepositoryUrl \u00b6 Url for the alternative deployment repository to which the project artifacts should be deployed ( other than those specified in ). This Url will be updated in settings.xml . When no settings.xml is provided a new one is created corresponding with tag back to overview Scope Details Aliases - Type string Mandatory no Default $PIPER_altDeploymentRepositoryUrl (if set) Secret no Configuration scope \u2612 parameter \u2612 general \u2612 steps \u2612 stages Resource references commonPipelineEnvironment : reference to: custom/mavenRepositoryURL commonPipelineEnvironment : reference to: custom/repositoryUrl altDeploymentRepositoryUser \u00b6 User for the alternative deployment repository to which the project artifacts should be deployed ( other than those specified in ). This user will be updated in settings.xml . When no settings.xml is provided a new one is created corresponding with tag back to overview Scope Details Aliases - Type string Mandatory no Default $PIPER_altDeploymentRepositoryUser (if set) Secret no Configuration scope \u2612 parameter \u2612 general \u2612 steps \u2612 stages Resource references commonPipelineEnvironment : reference to: custom/mavenRepositoryUsername commonPipelineEnvironment : reference to: custom/repositoryUsername buildSettingsInfo \u00b6 build settings info is typically filled by the step automatically to create information about the build settings that were used during the maven build . This information is typically used for compliance related processes. back to overview Scope Details Aliases - Type string Mandatory no Default $PIPER_buildSettingsInfo (if set) Secret no Configuration scope \u2612 parameter \u2610 general \u2612 steps \u2612 stages Resource references commonPipelineEnvironment : reference to: custom/buildSettingsInfo containerCommand \u00b6 Jenkins-specific: Used for proper environment setup. Kubernetes only: Allows to specify start command for container created with dockerImage parameter to overwrite Piper default (/usr/bin/tail -f /dev/null). back to overview Scope Details Aliases - Type string Mandatory no Default Secret no Configuration scope \u2612 parameter \u2612 general \u2612 steps \u2612 stages Resource references none containerShell \u00b6 Jenkins-specific: Used for proper environment setup. Allows to specify the shell to be executed for container with containerName. back to overview Scope Details Aliases - Type string Mandatory no Default Secret no Configuration scope \u2612 parameter \u2612 general \u2612 steps \u2612 stages Resource references none createBOM \u00b6 Creates the bill of materials (BOM) using CycloneDX Maven plugin. back to overview Scope Details Aliases maven/createBOM Type bool Mandatory no Default false Possible values - true - false Secret no Configuration scope \u2612 parameter \u2612 general \u2612 steps \u2612 stages Resource references none createBuildArtifactsMetadata \u00b6 metadata about the artifacts that are build and published , this metadata is generally used by steps downstream in the pipeline back to overview Scope Details Aliases - Type bool Mandatory no Default false Possible values - true - false Secret no Configuration scope \u2612 parameter \u2610 general \u2612 steps \u2612 stages Resource references none customTlsCertificateLinks \u00b6 List of download links to custom TLS certificates. This is required to ensure trusted connections to instances with repositories (like nexus) when publish flag is set to true. back to overview Scope Details Aliases - Type []string Mandatory no Default $PIPER_customTlsCertificateLinks (if set) Secret no Configuration scope \u2612 parameter \u2610 general \u2612 steps \u2612 stages Resource references none deployFlags \u00b6 Maven deploy flags that will be used when publish is detected. Build with optimized goals: By default, the deploy process skips the main, test, and install Maven goals to reduce build time and avoid redundant executions. If you provide custom deployFlags, manually add the default flags to maintain build optimization unless you override them. back to overview Scope Details Aliases - Type []string Mandatory no Default - -Dmaven.main.skip=true - -Dmaven.test.skip=true - -Dmaven.install.skip=true Secret no Configuration scope \u2612 parameter \u2610 general \u2612 steps \u2612 stages Resource references none dockerEnvVars \u00b6 Environment variables to set in the container, e.g. [http_proxy: \"proxy:8080\"]. back to overview Scope Details Aliases - Type map[string]string Mandatory no Default Secret no Configuration scope \u2612 parameter \u2612 general \u2612 steps \u2612 stages Resource references none dockerImage \u00b6 Name of the docker image that should be used. If empty, Docker is not used and the command is executed directly on the Jenkins system. back to overview Scope Details Aliases - Type string Mandatory no Default maven:3.8-jdk-8 Secret no Configuration scope \u2612 parameter \u2612 general \u2612 steps \u2612 stages Resource references none dockerName \u00b6 Kubernetes only: Name of the container launching dockerImage. SideCar only: Name of the container in local network. back to overview Scope Details Aliases - Type string Mandatory no Default mvn Secret no Configuration scope \u2612 parameter \u2612 general \u2612 steps \u2612 stages Resource references none dockerOptions \u00b6 Docker options to be set when starting the container. back to overview Scope Details Aliases - Type []string Mandatory no Default Secret no Configuration scope \u2612 parameter \u2612 general \u2612 steps \u2612 stages Resource references none dockerPullImage \u00b6 Set this to 'false' to bypass a docker image pull. Useful during development process. Allows testing of images which are available in the local registry only. back to overview Scope Details Aliases - Type bool Mandatory no Default true Possible values - true - false Secret no Configuration scope \u2612 parameter \u2612 general \u2612 steps \u2612 stages Resource references none dockerVolumeBind \u00b6 Jenkins-specific: Used for proper environment setup. Volumes that should be mounted into the docker container. back to overview Scope Details Aliases - Type map[string]string Mandatory no Default Secret no Configuration scope \u2612 parameter \u2612 general \u2612 steps \u2612 stages Resource references none dockerWorkspace \u00b6 Jenkins-specific: Used for proper environment setup. Kubernetes only: Specifies a dedicated user home directory for the container which will be passed as value for environment variable HOME . back to overview Scope Details Aliases - Type string Mandatory no Default Secret no Configuration scope \u2612 parameter \u2612 general \u2612 steps \u2612 stages Resource references none flatten \u00b6 Defines if the pom files should be flattened to support ci friendly maven versioning. back to overview Scope Details Aliases - Type bool Mandatory no Default true Possible values - true - false Secret no Configuration scope \u2612 parameter \u2610 general \u2612 steps \u2610 stages Resource references none globalSettingsFile \u00b6 Path to the mvn settings file that should be used as global settings file. back to overview Scope Details Aliases maven/globalSettingsFile Type string Mandatory no Default $PIPER_globalSettingsFile (if set) Secret no Configuration scope \u2612 parameter \u2612 general \u2612 steps \u2612 stages Resource references commonPipelineEnvironment : reference to: custom/mavenGlobalSettingsFile javaCaCertFilePath \u00b6 path to the cacerts file used by Java. When maven publish is set to True and customTlsCertificateLinks (to deploy the artifact to a repository with a self signed cert) are provided to trust the self signed certs, Piper will extend the existing Java cacerts to include the new self signed certs. if not provided Piper will search for the cacerts in $JAVA_HOME/jre/lib/security/cacerts back to overview Scope Details Aliases maven/javaCaCertFilePath Type string Mandatory no Default $PIPER_javaCaCertFilePath (if set) Secret no Configuration scope \u2612 parameter \u2610 general \u2612 steps \u2612 stages Resource references none logSuccessfulMavenTransfers \u00b6 Configures maven to log successful downloads. This is set to false by default to reduce the noise in build logs. back to overview Scope Details Aliases maven/logSuccessfulMavenTransfers Type bool Mandatory no Default false Possible values - true - false Secret no Configuration scope \u2612 parameter \u2612 general \u2612 steps \u2612 stages Resource references none m2Path \u00b6 Path to the location of the local repository that should be used. back to overview Scope Details Aliases maven/m2Path Type string Mandatory no Default $PIPER_m2Path (if set) Secret no Configuration scope \u2612 parameter \u2612 general \u2612 steps \u2612 stages Resource references none pomPath \u00b6 Path to the pom file which should be installed including all children. back to overview Scope Details Aliases - Type string Mandatory no Default pom.xml Secret no Configuration scope \u2612 parameter \u2610 general \u2612 steps \u2612 stages Resource references none profiles \u00b6 Defines list of maven build profiles to be used. back to overview Scope Details Aliases - Type []string Mandatory no Default $PIPER_profiles (if set) Secret no Configuration scope \u2612 parameter \u2612 general \u2612 steps \u2612 stages Resource references none projectSettingsFile \u00b6 Path to the mvn settings file that should be used as project settings file. back to overview Scope Details Aliases maven/projectSettingsFile Type string Mandatory no Default $PIPER_projectSettingsFile (if set) Secret no Configuration scope \u2612 parameter \u2612 general \u2612 steps \u2612 stages Resource references none publish \u00b6 Configures maven to run the deploy plugin to publish artifacts to a repository. back to overview Scope Details Aliases maven/publish Type bool Mandatory no Default false Possible values - true - false Secret no Configuration scope \u2612 parameter \u2610 general \u2612 steps \u2612 stages Resource references none script \u00b6 The common script environment of the Jenkinsfile running. Typically the reference to the script calling the pipeline step is provided with the this parameter, as in script: this . This allows the function to access the commonPipelineEnvironment for retrieving, e.g. configuration parameters. back to overview Scope Details Aliases - Type Jenkins Script Mandatory yes Default Secret no Configuration scope \u2610 parameter \u2610 general \u2610 steps \u2610 stages Resource references none stashContent \u00b6 Jenkins-specific: Used for proper environment setup. Specific stashes that should be considered for the step execution. back to overview Scope Details Aliases - Type []string Mandatory no Default - `` Secret no Configuration scope \u2612 parameter \u2612 general \u2612 steps \u2612 stages Resource references none verbose \u00b6 verbose output back to overview Scope Details Aliases - Type bool Mandatory no Default false Possible values - true - false Secret no Configuration scope \u2612 parameter \u2612 general \u2612 steps \u2612 stages Resource references none verify \u00b6 Instead of installing the artifact only the verify lifecycle phase is executed. back to overview Scope Details Aliases - Type bool Mandatory no Default false Possible values - true - false Secret no Configuration scope \u2612 parameter \u2610 general \u2610 steps \u2610 stages Resource references none altDeploymentRepositoryPasswordId \u00b6 Jenkins credentials ID containing the artifact deployment repository password. back to overview Scope Details Aliases - Type string Configuration scope \u2612 parameter \u2612 general \u2612 steps \u2612 stages","title":"mavenBuild"},{"location":"steps/mavenBuild/#mavenbuild","text":"This step will install the maven project into the local maven repository.","title":"mavenBuild"},{"location":"steps/mavenBuild/#description","text":"This step will install the maven project into the local maven repository. It will also prepare jacoco to record the code coverage and supports ci friendly versioning by flattening the pom before installing.","title":"Description"},{"location":"steps/mavenBuild/#build-with-dependencies-from-a-private-repository","text":"if your build has dependencies from a private repository you can include a project settings xml into the source code repository as below (replace the <url> tag with a valid private repo url). <?xml version=\"1.0\" encoding=\"UTF-8\"?> <settings xmlns= \"http://maven.apache.org/SETTINGS/1.0.0\" xmlns:xsi= \"http://www.w3.org/2001/XMLSchema-instance\" xsi:schemaLocation= \"http://maven.apache.org/SETTINGS/1.0.0 https://maven.apache.org/xsd/settings-1.0.0.xsd\" > <servers> <server> <id> private.repo.id </id> <username> ${env.PIPER_VAULTCREDENTIAL_USERNAME} </username> <password> ${env.PIPER_VAULTCREDENTIAL_PASSWORD} </password> </server> </servers> </settings> PIPER_VAULTCREDENTIAL_USERNAME and PIPER_VAULTCREDENTIAL_PASSWORD are the username and password for the private repository and are exposed as environment variables that must be present in the environment where the Piper step runs or alternatively can be created using : vault general purpose credentials include the below <repositories> tag in your pom.xml to reference the <server> and make sure the values in the <id> tags match <repositories> <repository> <id> private.repo.id </id> <url> https://private.repo.com/ </url> </repository> </repositories> Ensure the following configuration in the Piper config.yaml to ensure the above settings xml is included and all steps can consume this parameter: general : projectSettingsFile : <path to the above settings.xml>","title":"build with dependencies from a private repository"},{"location":"steps/mavenBuild/#usage","text":"We recommend to define values of step parameters via .pipeline/config.yml file . In this case, calling the step is essentially reduced to defining the step name. Calling the step can be done either in an orchestrator specific way (e.g. via a Jenkins library step) or on the command line. Jenkins Command Line library ( 'piper-lib-os' ) mavenBuild script: this piper mavenBuild","title":"Usage"},{"location":"steps/mavenBuild/#outputs","text":"Output type Details commonPipelineEnvironment custom/buildSettingsInfo custom/mavenBuildArtifacts","title":"Outputs"},{"location":"steps/mavenBuild/#parameters","text":"","title":"Parameters"},{"location":"steps/mavenBuild/#overview-step","text":"Name Mandatory Additional information script (yes) reference to Jenkins main pipeline script altDeploymentRepositoryID no altDeploymentRepositoryPassword no pass via ENV, Vault or Jenkins credentials ( altDeploymentRepositoryPasswordId ) altDeploymentRepositoryUrl no altDeploymentRepositoryUser no buildSettingsInfo no createBOM no createBuildArtifactsMetadata no customTlsCertificateLinks no deployFlags no flatten no globalSettingsFile no javaCaCertFilePath no logSuccessfulMavenTransfers no m2Path no pomPath no profiles no projectSettingsFile no publish no verbose no activates debug output verify no","title":"Overview - Step"},{"location":"steps/mavenBuild/#overview-execution-environment","text":"Orchestrator-specific only These parameters are relevant for orchestrator usage and not considered when using the command line option. Name Mandatory Additional information containerCommand no containerShell no dockerEnvVars no dockerImage no dockerName no dockerOptions no dockerPullImage no dockerVolumeBind no dockerWorkspace no stashContent no","title":"Overview - Execution Environment"},{"location":"steps/mavenBuild/#details","text":"","title":"Details"},{"location":"steps/mavenBuild/#altdeploymentrepositoryid","text":"Id for the alternative deployment repository to which the project artifacts should be deployed ( other than those specified in ). This id will be updated in settings.xml and will be used as a flag with DaltDeploymentRepository along with mavenAltDeploymentRepositoryUrl during maven deploy . When no settings.xml is provided a new one is created corresponding with tag back to overview Scope Details Aliases - Type string Mandatory no Default $PIPER_altDeploymentRepositoryID (if set) Secret no Configuration scope \u2612 parameter \u2612 general \u2612 steps \u2612 stages Resource references commonPipelineEnvironment : reference to: custom/repositoryId","title":"altDeploymentRepositoryID"},{"location":"steps/mavenBuild/#altdeploymentrepositorypassword","text":"Password for the alternative deployment repository to which the project artifacts should be deployed ( other than those specified in ). This password will be updated in settings.xml . When no settings.xml is provided a new one is created corresponding with tag back to overview Scope Details Aliases - Type string Mandatory no Default $PIPER_altDeploymentRepositoryPassword (if set) Secret yes Configuration scope \u2612 parameter \u2612 general \u2612 steps \u2612 stages Resource references commonPipelineEnvironment : reference to: custom/mavenRepositoryPassword commonPipelineEnvironment : reference to: custom/repositoryPassword Jenkins credential id: id: altDeploymentRepositoryPasswordId Vault resource: name: altDeploymentRepositoryPasswordFileVaultSecretName default value: alt-deployment-repository-password Vault paths: $(vaultPath)/alt-deployment-repository-password $(vaultBasePath)/$(vaultPipelineName)/alt-deployment-repository-password $(vaultBasePath)/GROUP-SECRETS/alt-deployment-repository-password","title":"altDeploymentRepositoryPassword"},{"location":"steps/mavenBuild/#altdeploymentrepositoryurl","text":"Url for the alternative deployment repository to which the project artifacts should be deployed ( other than those specified in ). This Url will be updated in settings.xml . When no settings.xml is provided a new one is created corresponding with tag back to overview Scope Details Aliases - Type string Mandatory no Default $PIPER_altDeploymentRepositoryUrl (if set) Secret no Configuration scope \u2612 parameter \u2612 general \u2612 steps \u2612 stages Resource references commonPipelineEnvironment : reference to: custom/mavenRepositoryURL commonPipelineEnvironment : reference to: custom/repositoryUrl","title":"altDeploymentRepositoryUrl"},{"location":"steps/mavenBuild/#altdeploymentrepositoryuser","text":"User for the alternative deployment repository to which the project artifacts should be deployed ( other than those specified in ). This user will be updated in settings.xml . When no settings.xml is provided a new one is created corresponding with tag back to overview Scope Details Aliases - Type string Mandatory no Default $PIPER_altDeploymentRepositoryUser (if set) Secret no Configuration scope \u2612 parameter \u2612 general \u2612 steps \u2612 stages Resource references commonPipelineEnvironment : reference to: custom/mavenRepositoryUsername commonPipelineEnvironment : reference to: custom/repositoryUsername","title":"altDeploymentRepositoryUser"},{"location":"steps/mavenBuild/#buildsettingsinfo","text":"build settings info is typically filled by the step automatically to create information about the build settings that were used during the maven build . This information is typically used for compliance related processes. back to overview Scope Details Aliases - Type string Mandatory no Default $PIPER_buildSettingsInfo (if set) Secret no Configuration scope \u2612 parameter \u2610 general \u2612 steps \u2612 stages Resource references commonPipelineEnvironment : reference to: custom/buildSettingsInfo","title":"buildSettingsInfo"},{"location":"steps/mavenBuild/#containercommand","text":"Jenkins-specific: Used for proper environment setup. Kubernetes only: Allows to specify start command for container created with dockerImage parameter to overwrite Piper default (/usr/bin/tail -f /dev/null). back to overview Scope Details Aliases - Type string Mandatory no Default Secret no Configuration scope \u2612 parameter \u2612 general \u2612 steps \u2612 stages Resource references none","title":"containerCommand"},{"location":"steps/mavenBuild/#containershell","text":"Jenkins-specific: Used for proper environment setup. Allows to specify the shell to be executed for container with containerName. back to overview Scope Details Aliases - Type string Mandatory no Default Secret no Configuration scope \u2612 parameter \u2612 general \u2612 steps \u2612 stages Resource references none","title":"containerShell"},{"location":"steps/mavenBuild/#createbom","text":"Creates the bill of materials (BOM) using CycloneDX Maven plugin. back to overview Scope Details Aliases maven/createBOM Type bool Mandatory no Default false Possible values - true - false Secret no Configuration scope \u2612 parameter \u2612 general \u2612 steps \u2612 stages Resource references none","title":"createBOM"},{"location":"steps/mavenBuild/#createbuildartifactsmetadata","text":"metadata about the artifacts that are build and published , this metadata is generally used by steps downstream in the pipeline back to overview Scope Details Aliases - Type bool Mandatory no Default false Possible values - true - false Secret no Configuration scope \u2612 parameter \u2610 general \u2612 steps \u2612 stages Resource references none","title":"createBuildArtifactsMetadata"},{"location":"steps/mavenBuild/#customtlscertificatelinks","text":"List of download links to custom TLS certificates. This is required to ensure trusted connections to instances with repositories (like nexus) when publish flag is set to true. back to overview Scope Details Aliases - Type []string Mandatory no Default $PIPER_customTlsCertificateLinks (if set) Secret no Configuration scope \u2612 parameter \u2610 general \u2612 steps \u2612 stages Resource references none","title":"customTlsCertificateLinks"},{"location":"steps/mavenBuild/#deployflags","text":"Maven deploy flags that will be used when publish is detected. Build with optimized goals: By default, the deploy process skips the main, test, and install Maven goals to reduce build time and avoid redundant executions. If you provide custom deployFlags, manually add the default flags to maintain build optimization unless you override them. back to overview Scope Details Aliases - Type []string Mandatory no Default - -Dmaven.main.skip=true - -Dmaven.test.skip=true - -Dmaven.install.skip=true Secret no Configuration scope \u2612 parameter \u2610 general \u2612 steps \u2612 stages Resource references none","title":"deployFlags"},{"location":"steps/mavenBuild/#dockerenvvars","text":"Environment variables to set in the container, e.g. [http_proxy: \"proxy:8080\"]. back to overview Scope Details Aliases - Type map[string]string Mandatory no Default Secret no Configuration scope \u2612 parameter \u2612 general \u2612 steps \u2612 stages Resource references none","title":"dockerEnvVars"},{"location":"steps/mavenBuild/#dockerimage","text":"Name of the docker image that should be used. If empty, Docker is not used and the command is executed directly on the Jenkins system. back to overview Scope Details Aliases - Type string Mandatory no Default maven:3.8-jdk-8 Secret no Configuration scope \u2612 parameter \u2612 general \u2612 steps \u2612 stages Resource references none","title":"dockerImage"},{"location":"steps/mavenBuild/#dockername","text":"Kubernetes only: Name of the container launching dockerImage. SideCar only: Name of the container in local network. back to overview Scope Details Aliases - Type string Mandatory no Default mvn Secret no Configuration scope \u2612 parameter \u2612 general \u2612 steps \u2612 stages Resource references none","title":"dockerName"},{"location":"steps/mavenBuild/#dockeroptions","text":"Docker options to be set when starting the container. back to overview Scope Details Aliases - Type []string Mandatory no Default Secret no Configuration scope \u2612 parameter \u2612 general \u2612 steps \u2612 stages Resource references none","title":"dockerOptions"},{"location":"steps/mavenBuild/#dockerpullimage","text":"Set this to 'false' to bypass a docker image pull. Useful during development process. Allows testing of images which are available in the local registry only. back to overview Scope Details Aliases - Type bool Mandatory no Default true Possible values - true - false Secret no Configuration scope \u2612 parameter \u2612 general \u2612 steps \u2612 stages Resource references none","title":"dockerPullImage"},{"location":"steps/mavenBuild/#dockervolumebind","text":"Jenkins-specific: Used for proper environment setup. Volumes that should be mounted into the docker container. back to overview Scope Details Aliases - Type map[string]string Mandatory no Default Secret no Configuration scope \u2612 parameter \u2612 general \u2612 steps \u2612 stages Resource references none","title":"dockerVolumeBind"},{"location":"steps/mavenBuild/#dockerworkspace","text":"Jenkins-specific: Used for proper environment setup. Kubernetes only: Specifies a dedicated user home directory for the container which will be passed as value for environment variable HOME . back to overview Scope Details Aliases - Type string Mandatory no Default Secret no Configuration scope \u2612 parameter \u2612 general \u2612 steps \u2612 stages Resource references none","title":"dockerWorkspace"},{"location":"steps/mavenBuild/#flatten","text":"Defines if the pom files should be flattened to support ci friendly maven versioning. back to overview Scope Details Aliases - Type bool Mandatory no Default true Possible values - true - false Secret no Configuration scope \u2612 parameter \u2610 general \u2612 steps \u2610 stages Resource references none","title":"flatten"},{"location":"steps/mavenBuild/#globalsettingsfile","text":"Path to the mvn settings file that should be used as global settings file. back to overview Scope Details Aliases maven/globalSettingsFile Type string Mandatory no Default $PIPER_globalSettingsFile (if set) Secret no Configuration scope \u2612 parameter \u2612 general \u2612 steps \u2612 stages Resource references commonPipelineEnvironment : reference to: custom/mavenGlobalSettingsFile","title":"globalSettingsFile"},{"location":"steps/mavenBuild/#javacacertfilepath","text":"path to the cacerts file used by Java. When maven publish is set to True and customTlsCertificateLinks (to deploy the artifact to a repository with a self signed cert) are provided to trust the self signed certs, Piper will extend the existing Java cacerts to include the new self signed certs. if not provided Piper will search for the cacerts in $JAVA_HOME/jre/lib/security/cacerts back to overview Scope Details Aliases maven/javaCaCertFilePath Type string Mandatory no Default $PIPER_javaCaCertFilePath (if set) Secret no Configuration scope \u2612 parameter \u2610 general \u2612 steps \u2612 stages Resource references none","title":"javaCaCertFilePath"},{"location":"steps/mavenBuild/#logsuccessfulmaventransfers","text":"Configures maven to log successful downloads. This is set to false by default to reduce the noise in build logs. back to overview Scope Details Aliases maven/logSuccessfulMavenTransfers Type bool Mandatory no Default false Possible values - true - false Secret no Configuration scope \u2612 parameter \u2612 general \u2612 steps \u2612 stages Resource references none","title":"logSuccessfulMavenTransfers"},{"location":"steps/mavenBuild/#m2path","text":"Path to the location of the local repository that should be used. back to overview Scope Details Aliases maven/m2Path Type string Mandatory no Default $PIPER_m2Path (if set) Secret no Configuration scope \u2612 parameter \u2612 general \u2612 steps \u2612 stages Resource references none","title":"m2Path"},{"location":"steps/mavenBuild/#pompath","text":"Path to the pom file which should be installed including all children. back to overview Scope Details Aliases - Type string Mandatory no Default pom.xml Secret no Configuration scope \u2612 parameter \u2610 general \u2612 steps \u2612 stages Resource references none","title":"pomPath"},{"location":"steps/mavenBuild/#profiles","text":"Defines list of maven build profiles to be used. back to overview Scope Details Aliases - Type []string Mandatory no Default $PIPER_profiles (if set) Secret no Configuration scope \u2612 parameter \u2612 general \u2612 steps \u2612 stages Resource references none","title":"profiles"},{"location":"steps/mavenBuild/#projectsettingsfile","text":"Path to the mvn settings file that should be used as project settings file. back to overview Scope Details Aliases maven/projectSettingsFile Type string Mandatory no Default $PIPER_projectSettingsFile (if set) Secret no Configuration scope \u2612 parameter \u2612 general \u2612 steps \u2612 stages Resource references none","title":"projectSettingsFile"},{"location":"steps/mavenBuild/#publish","text":"Configures maven to run the deploy plugin to publish artifacts to a repository. back to overview Scope Details Aliases maven/publish Type bool Mandatory no Default false Possible values - true - false Secret no Configuration scope \u2612 parameter \u2610 general \u2612 steps \u2612 stages Resource references none","title":"publish"},{"location":"steps/mavenBuild/#script","text":"The common script environment of the Jenkinsfile running. Typically the reference to the script calling the pipeline step is provided with the this parameter, as in script: this . This allows the function to access the commonPipelineEnvironment for retrieving, e.g. configuration parameters. back to overview Scope Details Aliases - Type Jenkins Script Mandatory yes Default Secret no Configuration scope \u2610 parameter \u2610 general \u2610 steps \u2610 stages Resource references none","title":"script"},{"location":"steps/mavenBuild/#stashcontent","text":"Jenkins-specific: Used for proper environment setup. Specific stashes that should be considered for the step execution. back to overview Scope Details Aliases - Type []string Mandatory no Default - `` Secret no Configuration scope \u2612 parameter \u2612 general \u2612 steps \u2612 stages Resource references none","title":"stashContent"},{"location":"steps/mavenBuild/#verbose","text":"verbose output back to overview Scope Details Aliases - Type bool Mandatory no Default false Possible values - true - false Secret no Configuration scope \u2612 parameter \u2612 general \u2612 steps \u2612 stages Resource references none","title":"verbose"},{"location":"steps/mavenBuild/#verify","text":"Instead of installing the artifact only the verify lifecycle phase is executed. back to overview Scope Details Aliases - Type bool Mandatory no Default false Possible values - true - false Secret no Configuration scope \u2612 parameter \u2610 general \u2610 steps \u2610 stages Resource references none","title":"verify"},{"location":"steps/mavenBuild/#altdeploymentrepositorypasswordid","text":"Jenkins credentials ID containing the artifact deployment repository password. back to overview Scope Details Aliases - Type string Configuration scope \u2612 parameter \u2612 general \u2612 steps \u2612 stages","title":"altDeploymentRepositoryPasswordId"},{"location":"steps/mavenExecute/","text":"mavenExecute \u00b6 This step allows to run maven commands Description \u00b6 This step runs a maven command based on the parameters provided to the step. Usage \u00b6 We recommend to define values of step parameters via .pipeline/config.yml file . In this case, calling the step is essentially reduced to defining the step name. Calling the step can be done either in an orchestrator specific way (e.g. via a Jenkins library step) or on the command line. Jenkins Command Line library ( 'piper-lib-os' ) mavenExecute script: this piper mavenExecute Parameters \u00b6 Overview - Step \u00b6 Name Mandatory Additional information goals yes script (yes) reference to Jenkins main pipeline script defines no flags no globalSettingsFile no logSuccessfulMavenTransfers no m2Path no pomPath no projectSettingsFile no returnStdout no verbose no activates debug output Overview - Execution Environment \u00b6 Orchestrator-specific only These parameters are relevant for orchestrator usage and not considered when using the command line option. Name Mandatory Additional information containerCommand no containerShell no dockerEnvVars no dockerImage no dockerName no dockerOptions no dockerPullImage no dockerVolumeBind no dockerWorkspace no Details \u00b6 containerCommand \u00b6 Jenkins-specific: Used for proper environment setup. Kubernetes only: Allows to specify start command for container created with dockerImage parameter to overwrite Piper default (/usr/bin/tail -f /dev/null). back to overview Scope Details Aliases - Type string Mandatory no Default Secret no Configuration scope \u2612 parameter \u2612 general \u2612 steps \u2612 stages Resource references none containerShell \u00b6 Jenkins-specific: Used for proper environment setup. Allows to specify the shell to be executed for container with containerName. back to overview Scope Details Aliases - Type string Mandatory no Default Secret no Configuration scope \u2612 parameter \u2612 general \u2612 steps \u2612 stages Resource references none defines \u00b6 Additional properties in form of -Dkey=value. back to overview Scope Details Aliases - Type []string Mandatory no Default $PIPER_defines (if set) Secret no Configuration scope \u2612 parameter \u2610 general \u2610 steps \u2610 stages Resource references none dockerEnvVars \u00b6 Environment variables to set in the container, e.g. [http_proxy: \"proxy:8080\"]. back to overview Scope Details Aliases - Type map[string]string Mandatory no Default Secret no Configuration scope \u2612 parameter \u2612 general \u2612 steps \u2612 stages Resource references none dockerImage \u00b6 Name of the docker image that should be used. If empty, Docker is not used and the command is executed directly on the Jenkins system. back to overview Scope Details Aliases - Type string Mandatory no Default maven:3.6-jdk-8 Secret no Configuration scope \u2612 parameter \u2612 general \u2612 steps \u2612 stages Resource references none dockerName \u00b6 Kubernetes only: Name of the container launching dockerImage. SideCar only: Name of the container in local network. back to overview Scope Details Aliases - Type string Mandatory no Default mvn Secret no Configuration scope \u2612 parameter \u2612 general \u2612 steps \u2612 stages Resource references none dockerOptions \u00b6 Docker options to be set when starting the container. back to overview Scope Details Aliases - Type []string Mandatory no Default Secret no Configuration scope \u2612 parameter \u2612 general \u2612 steps \u2612 stages Resource references none dockerPullImage \u00b6 Set this to 'false' to bypass a docker image pull. Useful during development process. Allows testing of images which are available in the local registry only. back to overview Scope Details Aliases - Type bool Mandatory no Default true Possible values - true - false Secret no Configuration scope \u2612 parameter \u2612 general \u2612 steps \u2612 stages Resource references none dockerVolumeBind \u00b6 Jenkins-specific: Used for proper environment setup. Volumes that should be mounted into the docker container. back to overview Scope Details Aliases - Type map[string]string Mandatory no Default Secret no Configuration scope \u2612 parameter \u2612 general \u2612 steps \u2612 stages Resource references none dockerWorkspace \u00b6 Jenkins-specific: Used for proper environment setup. Kubernetes only: Specifies a dedicated user home directory for the container which will be passed as value for environment variable HOME . back to overview Scope Details Aliases - Type string Mandatory no Default Secret no Configuration scope \u2612 parameter \u2612 general \u2612 steps \u2612 stages Resource references none flags \u00b6 Flags to provide when running mvn. back to overview Scope Details Aliases - Type []string Mandatory no Default $PIPER_flags (if set) Secret no Configuration scope \u2612 parameter \u2610 general \u2612 steps \u2610 stages Resource references none globalSettingsFile \u00b6 Path to the mvn settings file that should be used as global settings file. back to overview Scope Details Aliases maven/globalSettingsFile Type string Mandatory no Default $PIPER_globalSettingsFile (if set) Secret no Configuration scope \u2612 parameter \u2612 general \u2612 steps \u2612 stages Resource references none goals \u00b6 Maven goals that should be executed. back to overview Scope Details Aliases - Type []string Mandatory yes Default $PIPER_goals (if set) Secret no Configuration scope \u2612 parameter \u2610 general \u2610 steps \u2610 stages Resource references none logSuccessfulMavenTransfers \u00b6 Configures maven to log successful downloads. This is set to false by default to reduce the noise in build logs. back to overview Scope Details Aliases maven/logSuccessfulMavenTransfers Type bool Mandatory no Default false Possible values - true - false Secret no Configuration scope \u2612 parameter \u2612 general \u2612 steps \u2612 stages Resource references none m2Path \u00b6 Path to the location of the local repository that should be used. back to overview Scope Details Aliases maven/m2Path Type string Mandatory no Default $PIPER_m2Path (if set) Secret no Configuration scope \u2612 parameter \u2612 general \u2612 steps \u2612 stages Resource references none pomPath \u00b6 Path to the pom file that should be used. back to overview Scope Details Aliases - Type string Mandatory no Default $PIPER_pomPath (if set) Secret no Configuration scope \u2612 parameter \u2610 general \u2612 steps \u2610 stages Resource references none projectSettingsFile \u00b6 Path to the mvn settings file that should be used as project settings file. back to overview Scope Details Aliases maven/projectSettingsFile Type string Mandatory no Default $PIPER_projectSettingsFile (if set) Secret no Configuration scope \u2612 parameter \u2612 general \u2612 steps \u2612 stages Resource references none returnStdout \u00b6 Returns the output of the maven command for further processing. back to overview Scope Details Aliases - Type bool Mandatory no Default false Possible values - true - false Secret no Configuration scope \u2612 parameter \u2610 general \u2610 steps \u2610 stages Resource references none script \u00b6 The common script environment of the Jenkinsfile running. Typically the reference to the script calling the pipeline step is provided with the this parameter, as in script: this . This allows the function to access the commonPipelineEnvironment for retrieving, e.g. configuration parameters. back to overview Scope Details Aliases - Type Jenkins Script Mandatory yes Default Secret no Configuration scope \u2610 parameter \u2610 general \u2610 steps \u2610 stages Resource references none verbose \u00b6 verbose output back to overview Scope Details Aliases - Type bool Mandatory no Default false Possible values - true - false Secret no Configuration scope \u2612 parameter \u2612 general \u2612 steps \u2612 stages Resource references none Breaking change in goals , defines and flags parameters The goals , defines and flags parameters of the step need to be lists of strings with each element being one item. As an example consider this diff, showing the old api deleted and the new api inserted: -goals: 'org.apache.maven.plugins:maven-help-plugin:3.1.0:evaluate', -defines: \"-Dexpression=$pomPathExpression -DforceStdout -q\", +goals: ['org.apache.maven.plugins:maven-help-plugin:3.1.0:evaluate'], +defines: [\"-Dexpression=$pomPathExpression\", \"-DforceStdout\", \"-q\"], Additionally please note that in the parameters must not be shell quoted/escaped . What you pass in is literally passed to Maven without any shell interpreter in between. The old behavior is still available in version v1.23.0 and before of project \"Piper\". Exceptions \u00b6 None Example \u00b6 mavenExecute script: this , goals: [ 'clean' , 'install' ] Example for the correct usage of goals , defines and flags in version v1.24.0 and newer: mavenExecute ( script: script , goals: [ 'org.apache.maven.plugins:maven-help-plugin:3.1.0:evaluate' ], defines: [ \"-Dexpression=$pomPathExpression\" , \"-DforceStdout\" , \"-q\" ], returnStdout: true ) Note that it does not work to put multiple arguments into one element of a list, so defines: [\"-Dexpression=$pomPathExpression -DforceStdout -q\"] does not work.","title":"mavenExecute"},{"location":"steps/mavenExecute/#mavenexecute","text":"This step allows to run maven commands","title":"mavenExecute"},{"location":"steps/mavenExecute/#description","text":"This step runs a maven command based on the parameters provided to the step.","title":"Description"},{"location":"steps/mavenExecute/#usage","text":"We recommend to define values of step parameters via .pipeline/config.yml file . In this case, calling the step is essentially reduced to defining the step name. Calling the step can be done either in an orchestrator specific way (e.g. via a Jenkins library step) or on the command line. Jenkins Command Line library ( 'piper-lib-os' ) mavenExecute script: this piper mavenExecute","title":"Usage"},{"location":"steps/mavenExecute/#parameters","text":"","title":"Parameters"},{"location":"steps/mavenExecute/#overview-step","text":"Name Mandatory Additional information goals yes script (yes) reference to Jenkins main pipeline script defines no flags no globalSettingsFile no logSuccessfulMavenTransfers no m2Path no pomPath no projectSettingsFile no returnStdout no verbose no activates debug output","title":"Overview - Step"},{"location":"steps/mavenExecute/#overview-execution-environment","text":"Orchestrator-specific only These parameters are relevant for orchestrator usage and not considered when using the command line option. Name Mandatory Additional information containerCommand no containerShell no dockerEnvVars no dockerImage no dockerName no dockerOptions no dockerPullImage no dockerVolumeBind no dockerWorkspace no","title":"Overview - Execution Environment"},{"location":"steps/mavenExecute/#details","text":"","title":"Details"},{"location":"steps/mavenExecute/#containercommand","text":"Jenkins-specific: Used for proper environment setup. Kubernetes only: Allows to specify start command for container created with dockerImage parameter to overwrite Piper default (/usr/bin/tail -f /dev/null). back to overview Scope Details Aliases - Type string Mandatory no Default Secret no Configuration scope \u2612 parameter \u2612 general \u2612 steps \u2612 stages Resource references none","title":"containerCommand"},{"location":"steps/mavenExecute/#containershell","text":"Jenkins-specific: Used for proper environment setup. Allows to specify the shell to be executed for container with containerName. back to overview Scope Details Aliases - Type string Mandatory no Default Secret no Configuration scope \u2612 parameter \u2612 general \u2612 steps \u2612 stages Resource references none","title":"containerShell"},{"location":"steps/mavenExecute/#defines","text":"Additional properties in form of -Dkey=value. back to overview Scope Details Aliases - Type []string Mandatory no Default $PIPER_defines (if set) Secret no Configuration scope \u2612 parameter \u2610 general \u2610 steps \u2610 stages Resource references none","title":"defines"},{"location":"steps/mavenExecute/#dockerenvvars","text":"Environment variables to set in the container, e.g. [http_proxy: \"proxy:8080\"]. back to overview Scope Details Aliases - Type map[string]string Mandatory no Default Secret no Configuration scope \u2612 parameter \u2612 general \u2612 steps \u2612 stages Resource references none","title":"dockerEnvVars"},{"location":"steps/mavenExecute/#dockerimage","text":"Name of the docker image that should be used. If empty, Docker is not used and the command is executed directly on the Jenkins system. back to overview Scope Details Aliases - Type string Mandatory no Default maven:3.6-jdk-8 Secret no Configuration scope \u2612 parameter \u2612 general \u2612 steps \u2612 stages Resource references none","title":"dockerImage"},{"location":"steps/mavenExecute/#dockername","text":"Kubernetes only: Name of the container launching dockerImage. SideCar only: Name of the container in local network. back to overview Scope Details Aliases - Type string Mandatory no Default mvn Secret no Configuration scope \u2612 parameter \u2612 general \u2612 steps \u2612 stages Resource references none","title":"dockerName"},{"location":"steps/mavenExecute/#dockeroptions","text":"Docker options to be set when starting the container. back to overview Scope Details Aliases - Type []string Mandatory no Default Secret no Configuration scope \u2612 parameter \u2612 general \u2612 steps \u2612 stages Resource references none","title":"dockerOptions"},{"location":"steps/mavenExecute/#dockerpullimage","text":"Set this to 'false' to bypass a docker image pull. Useful during development process. Allows testing of images which are available in the local registry only. back to overview Scope Details Aliases - Type bool Mandatory no Default true Possible values - true - false Secret no Configuration scope \u2612 parameter \u2612 general \u2612 steps \u2612 stages Resource references none","title":"dockerPullImage"},{"location":"steps/mavenExecute/#dockervolumebind","text":"Jenkins-specific: Used for proper environment setup. Volumes that should be mounted into the docker container. back to overview Scope Details Aliases - Type map[string]string Mandatory no Default Secret no Configuration scope \u2612 parameter \u2612 general \u2612 steps \u2612 stages Resource references none","title":"dockerVolumeBind"},{"location":"steps/mavenExecute/#dockerworkspace","text":"Jenkins-specific: Used for proper environment setup. Kubernetes only: Specifies a dedicated user home directory for the container which will be passed as value for environment variable HOME . back to overview Scope Details Aliases - Type string Mandatory no Default Secret no Configuration scope \u2612 parameter \u2612 general \u2612 steps \u2612 stages Resource references none","title":"dockerWorkspace"},{"location":"steps/mavenExecute/#flags","text":"Flags to provide when running mvn. back to overview Scope Details Aliases - Type []string Mandatory no Default $PIPER_flags (if set) Secret no Configuration scope \u2612 parameter \u2610 general \u2612 steps \u2610 stages Resource references none","title":"flags"},{"location":"steps/mavenExecute/#globalsettingsfile","text":"Path to the mvn settings file that should be used as global settings file. back to overview Scope Details Aliases maven/globalSettingsFile Type string Mandatory no Default $PIPER_globalSettingsFile (if set) Secret no Configuration scope \u2612 parameter \u2612 general \u2612 steps \u2612 stages Resource references none","title":"globalSettingsFile"},{"location":"steps/mavenExecute/#goals","text":"Maven goals that should be executed. back to overview Scope Details Aliases - Type []string Mandatory yes Default $PIPER_goals (if set) Secret no Configuration scope \u2612 parameter \u2610 general \u2610 steps \u2610 stages Resource references none","title":"goals"},{"location":"steps/mavenExecute/#logsuccessfulmaventransfers","text":"Configures maven to log successful downloads. This is set to false by default to reduce the noise in build logs. back to overview Scope Details Aliases maven/logSuccessfulMavenTransfers Type bool Mandatory no Default false Possible values - true - false Secret no Configuration scope \u2612 parameter \u2612 general \u2612 steps \u2612 stages Resource references none","title":"logSuccessfulMavenTransfers"},{"location":"steps/mavenExecute/#m2path","text":"Path to the location of the local repository that should be used. back to overview Scope Details Aliases maven/m2Path Type string Mandatory no Default $PIPER_m2Path (if set) Secret no Configuration scope \u2612 parameter \u2612 general \u2612 steps \u2612 stages Resource references none","title":"m2Path"},{"location":"steps/mavenExecute/#pompath","text":"Path to the pom file that should be used. back to overview Scope Details Aliases - Type string Mandatory no Default $PIPER_pomPath (if set) Secret no Configuration scope \u2612 parameter \u2610 general \u2612 steps \u2610 stages Resource references none","title":"pomPath"},{"location":"steps/mavenExecute/#projectsettingsfile","text":"Path to the mvn settings file that should be used as project settings file. back to overview Scope Details Aliases maven/projectSettingsFile Type string Mandatory no Default $PIPER_projectSettingsFile (if set) Secret no Configuration scope \u2612 parameter \u2612 general \u2612 steps \u2612 stages Resource references none","title":"projectSettingsFile"},{"location":"steps/mavenExecute/#returnstdout","text":"Returns the output of the maven command for further processing. back to overview Scope Details Aliases - Type bool Mandatory no Default false Possible values - true - false Secret no Configuration scope \u2612 parameter \u2610 general \u2610 steps \u2610 stages Resource references none","title":"returnStdout"},{"location":"steps/mavenExecute/#script","text":"The common script environment of the Jenkinsfile running. Typically the reference to the script calling the pipeline step is provided with the this parameter, as in script: this . This allows the function to access the commonPipelineEnvironment for retrieving, e.g. configuration parameters. back to overview Scope Details Aliases - Type Jenkins Script Mandatory yes Default Secret no Configuration scope \u2610 parameter \u2610 general \u2610 steps \u2610 stages Resource references none","title":"script"},{"location":"steps/mavenExecute/#verbose","text":"verbose output back to overview Scope Details Aliases - Type bool Mandatory no Default false Possible values - true - false Secret no Configuration scope \u2612 parameter \u2612 general \u2612 steps \u2612 stages Resource references none Breaking change in goals , defines and flags parameters The goals , defines and flags parameters of the step need to be lists of strings with each element being one item. As an example consider this diff, showing the old api deleted and the new api inserted: -goals: 'org.apache.maven.plugins:maven-help-plugin:3.1.0:evaluate', -defines: \"-Dexpression=$pomPathExpression -DforceStdout -q\", +goals: ['org.apache.maven.plugins:maven-help-plugin:3.1.0:evaluate'], +defines: [\"-Dexpression=$pomPathExpression\", \"-DforceStdout\", \"-q\"], Additionally please note that in the parameters must not be shell quoted/escaped . What you pass in is literally passed to Maven without any shell interpreter in between. The old behavior is still available in version v1.23.0 and before of project \"Piper\".","title":"verbose"},{"location":"steps/mavenExecute/#exceptions","text":"None","title":"Exceptions"},{"location":"steps/mavenExecute/#example","text":"mavenExecute script: this , goals: [ 'clean' , 'install' ] Example for the correct usage of goals , defines and flags in version v1.24.0 and newer: mavenExecute ( script: script , goals: [ 'org.apache.maven.plugins:maven-help-plugin:3.1.0:evaluate' ], defines: [ \"-Dexpression=$pomPathExpression\" , \"-DforceStdout\" , \"-q\" ], returnStdout: true ) Note that it does not work to put multiple arguments into one element of a list, so defines: [\"-Dexpression=$pomPathExpression -DforceStdout -q\"] does not work.","title":"Example"},{"location":"steps/mavenExecuteIntegration/","text":"mavenExecuteIntegration \u00b6 This step will execute backend integration tests via the Jacoco Maven-plugin. Description \u00b6 If the project contains a Maven module named \"integration-tests\", this step will execute the integration tests via the Jacoco Maven-plugin. Usage \u00b6 We recommend to define values of step parameters via .pipeline/config.yml file . In this case, calling the step is essentially reduced to defining the step name. Calling the step can be done either in an orchestrator specific way (e.g. via a Jenkins library step) or on the command line. Jenkins Command Line library ( 'piper-lib-os' ) mavenExecuteIntegration script: this piper mavenExecuteIntegration Outputs \u00b6 Output type Details Parameters \u00b6 Overview - Step \u00b6 Name Mandatory Additional information script (yes) reference to Jenkins main pipeline script forkCount no globalSettingsFile no goal no installArtifacts no logSuccessfulMavenTransfers no m2Path no projectSettingsFile no retry no verbose no activates debug output Overview - Execution Environment \u00b6 Orchestrator-specific only These parameters are relevant for orchestrator usage and not considered when using the command line option. Name Mandatory Additional information containerCommand no containerName no containerShell no dockerEnvVars no dockerImage no dockerName no dockerOptions no dockerPullImage no dockerVolumeBind no dockerWorkspace no sidecarEnvVars no sidecarImage no sidecarName no sidecarOptions no sidecarPullImage no sidecarReadyCommand no sidecarVolumeBind no sidecarWorkspace no Details \u00b6 containerCommand \u00b6 Jenkins-specific: Used for proper environment setup. Kubernetes only: Allows to specify start command for container created with dockerImage parameter to overwrite Piper default (/usr/bin/tail -f /dev/null). back to overview Scope Details Aliases - Type string Mandatory no Default Secret no Configuration scope \u2612 parameter \u2612 general \u2612 steps \u2612 stages Resource references none containerName \u00b6 Jenkins-specific: Used for proper environment setup. Optional configuration in combination with containerMap to define the container where the commands should be executed in. back to overview Scope Details Aliases - Type string Mandatory no Default mvn Secret no Configuration scope \u2612 parameter \u2612 general \u2612 steps \u2612 stages Resource references none containerShell \u00b6 Jenkins-specific: Used for proper environment setup. Allows to specify the shell to be executed for container with containerName. back to overview Scope Details Aliases - Type string Mandatory no Default Secret no Configuration scope \u2612 parameter \u2612 general \u2612 steps \u2612 stages Resource references none dockerEnvVars \u00b6 Environment variables to set in the container, e.g. [http_proxy: \"proxy:8080\"]. back to overview Scope Details Aliases - Type map[string]string Mandatory no Default Secret no Configuration scope \u2612 parameter \u2612 general \u2612 steps \u2612 stages Resource references none dockerImage \u00b6 Name of the docker image that should be used. If empty, Docker is not used and the command is executed directly on the Jenkins system. back to overview Scope Details Aliases - Type string Mandatory no Default maven:3.6-jdk-8 Secret no Configuration scope \u2612 parameter \u2612 general \u2612 steps \u2612 stages Resource references none dockerName \u00b6 Kubernetes only: Name of the container launching dockerImage. SideCar only: Name of the container in local network. back to overview Scope Details Aliases - Type string Mandatory no Default mvn Secret no Configuration scope \u2612 parameter \u2612 general \u2612 steps \u2612 stages Resource references none dockerOptions \u00b6 Docker options to be set when starting the container. back to overview Scope Details Aliases - Type []string Mandatory no Default Secret no Configuration scope \u2612 parameter \u2612 general \u2612 steps \u2612 stages Resource references none dockerPullImage \u00b6 Set this to 'false' to bypass a docker image pull. Useful during development process. Allows testing of images which are available in the local registry only. back to overview Scope Details Aliases - Type bool Mandatory no Default true Possible values - true - false Secret no Configuration scope \u2612 parameter \u2612 general \u2612 steps \u2612 stages Resource references none dockerVolumeBind \u00b6 Jenkins-specific: Used for proper environment setup. Volumes that should be mounted into the docker container. back to overview Scope Details Aliases - Type map[string]string Mandatory no Default Secret no Configuration scope \u2612 parameter \u2612 general \u2612 steps \u2612 stages Resource references none dockerWorkspace \u00b6 Jenkins-specific: Used for proper environment setup. Kubernetes only: Specifies a dedicated user home directory for the container which will be passed as value for environment variable HOME . back to overview Scope Details Aliases - Type string Mandatory no Default Secret no Configuration scope \u2612 parameter \u2612 general \u2612 steps \u2612 stages Resource references none forkCount \u00b6 The number of JVM processes that are spawned to run the tests in parallel in case of using a maven based project structure. For more details visit the Surefire documentation at https://maven.apache.org/surefire/maven-surefire-plugin/test-mojo.html#forkCount. back to overview Scope Details Aliases - Type string Mandatory no Default 1C Secret no Configuration scope \u2612 parameter \u2610 general \u2612 steps \u2612 stages Resource references none globalSettingsFile \u00b6 Path to the mvn settings file that should be used as global settings file. back to overview Scope Details Aliases maven/globalSettingsFile Type string Mandatory no Default $PIPER_globalSettingsFile (if set) Secret no Configuration scope \u2612 parameter \u2612 general \u2612 steps \u2612 stages Resource references none goal \u00b6 The name of the Maven goal to execute. back to overview Scope Details Aliases - Type string Mandatory no Default test Secret no Configuration scope \u2612 parameter \u2610 general \u2612 steps \u2612 stages Resource references none installArtifacts \u00b6 If enabled, it will install all artifacts to the local maven repository to make them available before running the tests. This is required if the integration test module has dependencies to other modules in the repository and they were not installed before. back to overview Scope Details Aliases - Type bool Mandatory no Default true Possible values - true - false Secret no Configuration scope \u2612 parameter \u2612 general \u2612 steps \u2612 stages Resource references none logSuccessfulMavenTransfers \u00b6 Configures maven to log successful downloads. This is set to false by default to reduce the noise in build logs. back to overview Scope Details Aliases maven/logSuccessfulMavenTransfers Type bool Mandatory no Default false Possible values - true - false Secret no Configuration scope \u2612 parameter \u2612 general \u2612 steps \u2612 stages Resource references none m2Path \u00b6 Path to the location of the local repository that should be used. back to overview Scope Details Aliases maven/m2Path Type string Mandatory no Default $PIPER_m2Path (if set) Secret no Configuration scope \u2612 parameter \u2612 general \u2612 steps \u2612 stages Resource references none projectSettingsFile \u00b6 Path to the mvn settings file that should be used as project settings file. back to overview Scope Details Aliases maven/projectSettingsFile Type string Mandatory no Default $PIPER_projectSettingsFile (if set) Secret no Configuration scope \u2612 parameter \u2612 general \u2612 steps \u2612 stages Resource references none retry \u00b6 The number of times that integration tests will be retried before failing the step. Note: This will consume more time for the step execution. back to overview Scope Details Aliases - Type int Mandatory no Default 1 Secret no Configuration scope \u2612 parameter \u2610 general \u2612 steps \u2612 stages Resource references none script \u00b6 The common script environment of the Jenkinsfile running. Typically the reference to the script calling the pipeline step is provided with the this parameter, as in script: this . This allows the function to access the commonPipelineEnvironment for retrieving, e.g. configuration parameters. back to overview Scope Details Aliases - Type Jenkins Script Mandatory yes Default Secret no Configuration scope \u2610 parameter \u2610 general \u2610 steps \u2610 stages Resource references none sidecarEnvVars \u00b6 A map of environment variables to set in the sidecar container, similar to dockerEnvVars . back to overview Scope Details Aliases - Type map[string]string Mandatory no Default Secret no Configuration scope \u2612 parameter \u2612 general \u2612 steps \u2612 stages Resource references none sidecarImage \u00b6 The name of the docker image of the sidecar container. If empty, no sidecar container is started. Similar to dockerImage . back to overview Scope Details Aliases - Type string Mandatory no Default Secret no Configuration scope \u2612 parameter \u2612 general \u2612 steps \u2612 stages Resource references none sidecarName \u00b6 Name of the sidecar container. Similar to dockerName . back to overview Scope Details Aliases - Type string Mandatory no Default Secret no Configuration scope \u2612 parameter \u2612 general \u2612 steps \u2612 stages Resource references none sidecarOptions \u00b6 Options to be set when starting the sidecar container. Similar to dockerOptions . back to overview Scope Details Aliases - Type []string Mandatory no Default Secret no Configuration scope \u2612 parameter \u2612 general \u2612 steps \u2612 stages Resource references none sidecarPullImage \u00b6 Set this to 'false' to bypass a docker image pull. Useful during development process. Allows testing of images which are available in the local registry only. back to overview Scope Details Aliases - Type bool Mandatory no Default false Possible values - true - false Secret no Configuration scope \u2612 parameter \u2612 general \u2612 steps \u2612 stages Resource references none sidecarReadyCommand \u00b6 Jenkins-specific: Used for proper environment setup. Command executed inside the container which returns exit code 0 when the container is ready to be used. back to overview Scope Details Aliases - Type string Mandatory no Default Secret no Configuration scope \u2612 parameter \u2612 general \u2612 steps \u2612 stages Resource references none sidecarVolumeBind \u00b6 Volumes that should be mounted into the sidecar container. Similar to dockerVolumeBind . back to overview Scope Details Aliases - Type map[string]string Mandatory no Default Secret no Configuration scope \u2612 parameter \u2612 general \u2612 steps \u2612 stages Resource references none sidecarWorkspace \u00b6 Jenkins-specific: Used for proper environment setup. back to overview Scope Details Aliases - Type string Mandatory no Default Secret no Configuration scope \u2612 parameter \u2612 general \u2612 steps \u2612 stages Resource references none verbose \u00b6 verbose output back to overview Scope Details Aliases - Type bool Mandatory no Default false Possible values - true - false Secret no Configuration scope \u2612 parameter \u2612 general \u2612 steps \u2612 stages Resource references none","title":"mavenExecuteIntegration"},{"location":"steps/mavenExecuteIntegration/#mavenexecuteintegration","text":"This step will execute backend integration tests via the Jacoco Maven-plugin.","title":"mavenExecuteIntegration"},{"location":"steps/mavenExecuteIntegration/#description","text":"If the project contains a Maven module named \"integration-tests\", this step will execute the integration tests via the Jacoco Maven-plugin.","title":"Description"},{"location":"steps/mavenExecuteIntegration/#usage","text":"We recommend to define values of step parameters via .pipeline/config.yml file . In this case, calling the step is essentially reduced to defining the step name. Calling the step can be done either in an orchestrator specific way (e.g. via a Jenkins library step) or on the command line. Jenkins Command Line library ( 'piper-lib-os' ) mavenExecuteIntegration script: this piper mavenExecuteIntegration","title":"Usage"},{"location":"steps/mavenExecuteIntegration/#outputs","text":"Output type Details","title":"Outputs"},{"location":"steps/mavenExecuteIntegration/#parameters","text":"","title":"Parameters"},{"location":"steps/mavenExecuteIntegration/#overview-step","text":"Name Mandatory Additional information script (yes) reference to Jenkins main pipeline script forkCount no globalSettingsFile no goal no installArtifacts no logSuccessfulMavenTransfers no m2Path no projectSettingsFile no retry no verbose no activates debug output","title":"Overview - Step"},{"location":"steps/mavenExecuteIntegration/#overview-execution-environment","text":"Orchestrator-specific only These parameters are relevant for orchestrator usage and not considered when using the command line option. Name Mandatory Additional information containerCommand no containerName no containerShell no dockerEnvVars no dockerImage no dockerName no dockerOptions no dockerPullImage no dockerVolumeBind no dockerWorkspace no sidecarEnvVars no sidecarImage no sidecarName no sidecarOptions no sidecarPullImage no sidecarReadyCommand no sidecarVolumeBind no sidecarWorkspace no","title":"Overview - Execution Environment"},{"location":"steps/mavenExecuteIntegration/#details","text":"","title":"Details"},{"location":"steps/mavenExecuteIntegration/#containercommand","text":"Jenkins-specific: Used for proper environment setup. Kubernetes only: Allows to specify start command for container created with dockerImage parameter to overwrite Piper default (/usr/bin/tail -f /dev/null). back to overview Scope Details Aliases - Type string Mandatory no Default Secret no Configuration scope \u2612 parameter \u2612 general \u2612 steps \u2612 stages Resource references none","title":"containerCommand"},{"location":"steps/mavenExecuteIntegration/#containername","text":"Jenkins-specific: Used for proper environment setup. Optional configuration in combination with containerMap to define the container where the commands should be executed in. back to overview Scope Details Aliases - Type string Mandatory no Default mvn Secret no Configuration scope \u2612 parameter \u2612 general \u2612 steps \u2612 stages Resource references none","title":"containerName"},{"location":"steps/mavenExecuteIntegration/#containershell","text":"Jenkins-specific: Used for proper environment setup. Allows to specify the shell to be executed for container with containerName. back to overview Scope Details Aliases - Type string Mandatory no Default Secret no Configuration scope \u2612 parameter \u2612 general \u2612 steps \u2612 stages Resource references none","title":"containerShell"},{"location":"steps/mavenExecuteIntegration/#dockerenvvars","text":"Environment variables to set in the container, e.g. [http_proxy: \"proxy:8080\"]. back to overview Scope Details Aliases - Type map[string]string Mandatory no Default Secret no Configuration scope \u2612 parameter \u2612 general \u2612 steps \u2612 stages Resource references none","title":"dockerEnvVars"},{"location":"steps/mavenExecuteIntegration/#dockerimage","text":"Name of the docker image that should be used. If empty, Docker is not used and the command is executed directly on the Jenkins system. back to overview Scope Details Aliases - Type string Mandatory no Default maven:3.6-jdk-8 Secret no Configuration scope \u2612 parameter \u2612 general \u2612 steps \u2612 stages Resource references none","title":"dockerImage"},{"location":"steps/mavenExecuteIntegration/#dockername","text":"Kubernetes only: Name of the container launching dockerImage. SideCar only: Name of the container in local network. back to overview Scope Details Aliases - Type string Mandatory no Default mvn Secret no Configuration scope \u2612 parameter \u2612 general \u2612 steps \u2612 stages Resource references none","title":"dockerName"},{"location":"steps/mavenExecuteIntegration/#dockeroptions","text":"Docker options to be set when starting the container. back to overview Scope Details Aliases - Type []string Mandatory no Default Secret no Configuration scope \u2612 parameter \u2612 general \u2612 steps \u2612 stages Resource references none","title":"dockerOptions"},{"location":"steps/mavenExecuteIntegration/#dockerpullimage","text":"Set this to 'false' to bypass a docker image pull. Useful during development process. Allows testing of images which are available in the local registry only. back to overview Scope Details Aliases - Type bool Mandatory no Default true Possible values - true - false Secret no Configuration scope \u2612 parameter \u2612 general \u2612 steps \u2612 stages Resource references none","title":"dockerPullImage"},{"location":"steps/mavenExecuteIntegration/#dockervolumebind","text":"Jenkins-specific: Used for proper environment setup. Volumes that should be mounted into the docker container. back to overview Scope Details Aliases - Type map[string]string Mandatory no Default Secret no Configuration scope \u2612 parameter \u2612 general \u2612 steps \u2612 stages Resource references none","title":"dockerVolumeBind"},{"location":"steps/mavenExecuteIntegration/#dockerworkspace","text":"Jenkins-specific: Used for proper environment setup. Kubernetes only: Specifies a dedicated user home directory for the container which will be passed as value for environment variable HOME . back to overview Scope Details Aliases - Type string Mandatory no Default Secret no Configuration scope \u2612 parameter \u2612 general \u2612 steps \u2612 stages Resource references none","title":"dockerWorkspace"},{"location":"steps/mavenExecuteIntegration/#forkcount","text":"The number of JVM processes that are spawned to run the tests in parallel in case of using a maven based project structure. For more details visit the Surefire documentation at https://maven.apache.org/surefire/maven-surefire-plugin/test-mojo.html#forkCount. back to overview Scope Details Aliases - Type string Mandatory no Default 1C Secret no Configuration scope \u2612 parameter \u2610 general \u2612 steps \u2612 stages Resource references none","title":"forkCount"},{"location":"steps/mavenExecuteIntegration/#globalsettingsfile","text":"Path to the mvn settings file that should be used as global settings file. back to overview Scope Details Aliases maven/globalSettingsFile Type string Mandatory no Default $PIPER_globalSettingsFile (if set) Secret no Configuration scope \u2612 parameter \u2612 general \u2612 steps \u2612 stages Resource references none","title":"globalSettingsFile"},{"location":"steps/mavenExecuteIntegration/#goal","text":"The name of the Maven goal to execute. back to overview Scope Details Aliases - Type string Mandatory no Default test Secret no Configuration scope \u2612 parameter \u2610 general \u2612 steps \u2612 stages Resource references none","title":"goal"},{"location":"steps/mavenExecuteIntegration/#installartifacts","text":"If enabled, it will install all artifacts to the local maven repository to make them available before running the tests. This is required if the integration test module has dependencies to other modules in the repository and they were not installed before. back to overview Scope Details Aliases - Type bool Mandatory no Default true Possible values - true - false Secret no Configuration scope \u2612 parameter \u2612 general \u2612 steps \u2612 stages Resource references none","title":"installArtifacts"},{"location":"steps/mavenExecuteIntegration/#logsuccessfulmaventransfers","text":"Configures maven to log successful downloads. This is set to false by default to reduce the noise in build logs. back to overview Scope Details Aliases maven/logSuccessfulMavenTransfers Type bool Mandatory no Default false Possible values - true - false Secret no Configuration scope \u2612 parameter \u2612 general \u2612 steps \u2612 stages Resource references none","title":"logSuccessfulMavenTransfers"},{"location":"steps/mavenExecuteIntegration/#m2path","text":"Path to the location of the local repository that should be used. back to overview Scope Details Aliases maven/m2Path Type string Mandatory no Default $PIPER_m2Path (if set) Secret no Configuration scope \u2612 parameter \u2612 general \u2612 steps \u2612 stages Resource references none","title":"m2Path"},{"location":"steps/mavenExecuteIntegration/#projectsettingsfile","text":"Path to the mvn settings file that should be used as project settings file. back to overview Scope Details Aliases maven/projectSettingsFile Type string Mandatory no Default $PIPER_projectSettingsFile (if set) Secret no Configuration scope \u2612 parameter \u2612 general \u2612 steps \u2612 stages Resource references none","title":"projectSettingsFile"},{"location":"steps/mavenExecuteIntegration/#retry","text":"The number of times that integration tests will be retried before failing the step. Note: This will consume more time for the step execution. back to overview Scope Details Aliases - Type int Mandatory no Default 1 Secret no Configuration scope \u2612 parameter \u2610 general \u2612 steps \u2612 stages Resource references none","title":"retry"},{"location":"steps/mavenExecuteIntegration/#script","text":"The common script environment of the Jenkinsfile running. Typically the reference to the script calling the pipeline step is provided with the this parameter, as in script: this . This allows the function to access the commonPipelineEnvironment for retrieving, e.g. configuration parameters. back to overview Scope Details Aliases - Type Jenkins Script Mandatory yes Default Secret no Configuration scope \u2610 parameter \u2610 general \u2610 steps \u2610 stages Resource references none","title":"script"},{"location":"steps/mavenExecuteIntegration/#sidecarenvvars","text":"A map of environment variables to set in the sidecar container, similar to dockerEnvVars . back to overview Scope Details Aliases - Type map[string]string Mandatory no Default Secret no Configuration scope \u2612 parameter \u2612 general \u2612 steps \u2612 stages Resource references none","title":"sidecarEnvVars"},{"location":"steps/mavenExecuteIntegration/#sidecarimage","text":"The name of the docker image of the sidecar container. If empty, no sidecar container is started. Similar to dockerImage . back to overview Scope Details Aliases - Type string Mandatory no Default Secret no Configuration scope \u2612 parameter \u2612 general \u2612 steps \u2612 stages Resource references none","title":"sidecarImage"},{"location":"steps/mavenExecuteIntegration/#sidecarname","text":"Name of the sidecar container. Similar to dockerName . back to overview Scope Details Aliases - Type string Mandatory no Default Secret no Configuration scope \u2612 parameter \u2612 general \u2612 steps \u2612 stages Resource references none","title":"sidecarName"},{"location":"steps/mavenExecuteIntegration/#sidecaroptions","text":"Options to be set when starting the sidecar container. Similar to dockerOptions . back to overview Scope Details Aliases - Type []string Mandatory no Default Secret no Configuration scope \u2612 parameter \u2612 general \u2612 steps \u2612 stages Resource references none","title":"sidecarOptions"},{"location":"steps/mavenExecuteIntegration/#sidecarpullimage","text":"Set this to 'false' to bypass a docker image pull. Useful during development process. Allows testing of images which are available in the local registry only. back to overview Scope Details Aliases - Type bool Mandatory no Default false Possible values - true - false Secret no Configuration scope \u2612 parameter \u2612 general \u2612 steps \u2612 stages Resource references none","title":"sidecarPullImage"},{"location":"steps/mavenExecuteIntegration/#sidecarreadycommand","text":"Jenkins-specific: Used for proper environment setup. Command executed inside the container which returns exit code 0 when the container is ready to be used. back to overview Scope Details Aliases - Type string Mandatory no Default Secret no Configuration scope \u2612 parameter \u2612 general \u2612 steps \u2612 stages Resource references none","title":"sidecarReadyCommand"},{"location":"steps/mavenExecuteIntegration/#sidecarvolumebind","text":"Volumes that should be mounted into the sidecar container. Similar to dockerVolumeBind . back to overview Scope Details Aliases - Type map[string]string Mandatory no Default Secret no Configuration scope \u2612 parameter \u2612 general \u2612 steps \u2612 stages Resource references none","title":"sidecarVolumeBind"},{"location":"steps/mavenExecuteIntegration/#sidecarworkspace","text":"Jenkins-specific: Used for proper environment setup. back to overview Scope Details Aliases - Type string Mandatory no Default Secret no Configuration scope \u2612 parameter \u2612 general \u2612 steps \u2612 stages Resource references none","title":"sidecarWorkspace"},{"location":"steps/mavenExecuteIntegration/#verbose","text":"verbose output back to overview Scope Details Aliases - Type bool Mandatory no Default false Possible values - true - false Secret no Configuration scope \u2612 parameter \u2612 general \u2612 steps \u2612 stages Resource references none","title":"verbose"},{"location":"steps/mavenExecuteStaticCodeChecks/","text":"mavenExecuteStaticCodeChecks \u00b6 Execute static code checks for Maven based projects. The plugins SpotBugs and PMD are used. Description \u00b6 Executes Spotbugs Maven plugin as well as Pmd Maven plugin for static code checks. SpotBugs is a program to find bugs in Java programs. It looks for instances of \u201cbug patterns\u201d \u2014 code instances that are likely to be errors. For more information please visit https://spotbugs.readthedocs.io/en/latest/maven.html PMD is a source code analyzer. It finds common programming flaws like unused variables, empty catch blocks, unnecessary object creation, and so forth. It supports Java, JavaScript, Salesforce.com Apex and Visualforce, PLSQL, Apache Velocity, XML, XSL. For more information please visit https://pmd.github.io/. The plugins should be configured in the respective pom.xml. For SpotBugs include- and exclude filters as well as maximum allowed violations are conifgurable via .pipeline/config.yml. For PMD the failure priority and the max allowed violations are configurable via .pipeline/config.yml. Usage \u00b6 We recommend to define values of step parameters via .pipeline/config.yml file . In this case, calling the step is essentially reduced to defining the step name. Calling the step can be done either in an orchestrator specific way (e.g. via a Jenkins library step) or on the command line. Jenkins Command Line library ( 'piper-lib-os' ) mavenExecuteStaticCodeChecks script: this piper mavenExecuteStaticCodeChecks Parameters \u00b6 Overview - Step \u00b6 Name Mandatory Additional information script (yes) reference to Jenkins main pipeline script globalSettingsFile no installArtifacts no logSuccessfulMavenTransfers no m2Path no mavenModulesExcludes no pmd no pmdFailurePriority no pmdMaxAllowedViolations no projectSettingsFile no spotBugs no spotBugsExcludeFilterFile no spotBugsIncludeFilterFile no spotBugsMaxAllowedViolations no verbose no activates debug output Overview - Execution Environment \u00b6 Orchestrator-specific only These parameters are relevant for orchestrator usage and not considered when using the command line option. Name Mandatory Additional information containerCommand no containerShell no dockerEnvVars no dockerImage no dockerName no dockerOptions no dockerPullImage no dockerVolumeBind no dockerWorkspace no Details \u00b6 containerCommand \u00b6 Jenkins-specific: Used for proper environment setup. Kubernetes only: Allows to specify start command for container created with dockerImage parameter to overwrite Piper default (/usr/bin/tail -f /dev/null). back to overview Scope Details Aliases - Type string Mandatory no Default Secret no Configuration scope \u2612 parameter \u2612 general \u2612 steps \u2612 stages Resource references none containerShell \u00b6 Jenkins-specific: Used for proper environment setup. Allows to specify the shell to be executed for container with containerName. back to overview Scope Details Aliases - Type string Mandatory no Default Secret no Configuration scope \u2612 parameter \u2612 general \u2612 steps \u2612 stages Resource references none dockerEnvVars \u00b6 Environment variables to set in the container, e.g. [http_proxy: \"proxy:8080\"]. back to overview Scope Details Aliases - Type map[string]string Mandatory no Default Secret no Configuration scope \u2612 parameter \u2612 general \u2612 steps \u2612 stages Resource references none dockerImage \u00b6 Name of the docker image that should be used. If empty, Docker is not used and the command is executed directly on the Jenkins system. back to overview Scope Details Aliases - Type string Mandatory no Default maven:3.6-jdk-8 Secret no Configuration scope \u2612 parameter \u2612 general \u2612 steps \u2612 stages Resource references none dockerName \u00b6 Kubernetes only: Name of the container launching dockerImage. SideCar only: Name of the container in local network. back to overview Scope Details Aliases - Type string Mandatory no Default mvn Secret no Configuration scope \u2612 parameter \u2612 general \u2612 steps \u2612 stages Resource references none dockerOptions \u00b6 Docker options to be set when starting the container. back to overview Scope Details Aliases - Type []string Mandatory no Default Secret no Configuration scope \u2612 parameter \u2612 general \u2612 steps \u2612 stages Resource references none dockerPullImage \u00b6 Set this to 'false' to bypass a docker image pull. Useful during development process. Allows testing of images which are available in the local registry only. back to overview Scope Details Aliases - Type bool Mandatory no Default true Possible values - true - false Secret no Configuration scope \u2612 parameter \u2612 general \u2612 steps \u2612 stages Resource references none dockerVolumeBind \u00b6 Jenkins-specific: Used for proper environment setup. Volumes that should be mounted into the docker container. back to overview Scope Details Aliases - Type map[string]string Mandatory no Default Secret no Configuration scope \u2612 parameter \u2612 general \u2612 steps \u2612 stages Resource references none dockerWorkspace \u00b6 Jenkins-specific: Used for proper environment setup. Kubernetes only: Specifies a dedicated user home directory for the container which will be passed as value for environment variable HOME . back to overview Scope Details Aliases - Type string Mandatory no Default Secret no Configuration scope \u2612 parameter \u2612 general \u2612 steps \u2612 stages Resource references none globalSettingsFile \u00b6 Path to the mvn settings file that should be used as global settings file. back to overview Scope Details Aliases maven/globalSettingsFile Type string Mandatory no Default $PIPER_globalSettingsFile (if set) Secret no Configuration scope \u2612 parameter \u2612 general \u2612 steps \u2612 stages Resource references none installArtifacts \u00b6 If enabled, it will install all artifacts to the local maven repository to make them available before running the static code checks. This is required if any maven module has dependencies to other modules in the repository and they were not installed before. back to overview Scope Details Aliases - Type bool Mandatory no Default false Possible values - true - false Secret no Configuration scope \u2612 parameter \u2612 general \u2612 steps \u2612 stages Resource references none logSuccessfulMavenTransfers \u00b6 Configures maven to log successful downloads. This is set to false by default to reduce the noise in build logs. back to overview Scope Details Aliases maven/logSuccessfulMavenTransfers Type bool Mandatory no Default false Possible values - true - false Secret no Configuration scope \u2612 parameter \u2612 general \u2612 steps \u2612 stages Resource references none m2Path \u00b6 Path to the location of the local repository that should be used. back to overview Scope Details Aliases maven/m2Path Type string Mandatory no Default $PIPER_m2Path (if set) Secret no Configuration scope \u2612 parameter \u2612 general \u2612 steps \u2612 stages Resource references none mavenModulesExcludes \u00b6 Maven modules which should be excluded by the static code checks. By default the modules 'unit-tests' and 'integration-tests' will be excluded. back to overview Scope Details Aliases - Type []string Mandatory no Default $PIPER_mavenModulesExcludes (if set) Secret no Configuration scope \u2612 parameter \u2610 general \u2612 steps \u2612 stages Resource references none pmd \u00b6 Parameter to turn off PMD. back to overview Scope Details Aliases - Type bool Mandatory no Default true Possible values - true - false Secret no Configuration scope \u2612 parameter \u2610 general \u2612 steps \u2612 stages Resource references none pmdFailurePriority \u00b6 What priority level to fail the build on. PMD violations are assigned a priority from 1 (most severe) to 5 (least severe) according the the rule's priority. Violations at or less than this priority level are considered failures and will fail the build if failOnViolation=true and the count exceeds maxAllowedViolations. The other violations will be regarded as warnings and will be displayed in the build output if verbose=true. Setting a value of 5 will treat all violations as failures, which may cause the build to fail. Setting a value of 1 will treat all violations as warnings. Only values from 1 to 5 are valid. back to overview Scope Details Aliases pmd/failurePriority Type int Mandatory no Default 0 Secret no Configuration scope \u2612 parameter \u2610 general \u2612 steps \u2612 stages Resource references none pmdMaxAllowedViolations \u00b6 The maximum number of failures allowed before execution fails. Used in conjunction with failOnViolation=true and utilizes failurePriority. This value has no meaning if failOnViolation=false. If the number of failures is greater than this number, the build will be failed. If the number of failures is less than or equal to this value, then the build will not be failed. back to overview Scope Details Aliases pmd/maxAllowedViolations Type int Mandatory no Default 0 Secret no Configuration scope \u2612 parameter \u2610 general \u2612 steps \u2612 stages Resource references none projectSettingsFile \u00b6 Path to the mvn settings file that should be used as project settings file. back to overview Scope Details Aliases maven/projectSettingsFile Type string Mandatory no Default $PIPER_projectSettingsFile (if set) Secret no Configuration scope \u2612 parameter \u2612 general \u2612 steps \u2612 stages Resource references none script \u00b6 The common script environment of the Jenkinsfile running. Typically the reference to the script calling the pipeline step is provided with the this parameter, as in script: this . This allows the function to access the commonPipelineEnvironment for retrieving, e.g. configuration parameters. back to overview Scope Details Aliases - Type Jenkins Script Mandatory yes Default Secret no Configuration scope \u2610 parameter \u2610 general \u2610 steps \u2610 stages Resource references none spotBugs \u00b6 Parameter to turn off SpotBugs. back to overview Scope Details Aliases - Type bool Mandatory no Default true Possible values - true - false Secret no Configuration scope \u2612 parameter \u2610 general \u2612 steps \u2612 stages Resource references none spotBugsExcludeFilterFile \u00b6 Path to a filter file with bug definitions which should be excluded. back to overview Scope Details Aliases spotBugs/excludeFilterFile Type string Mandatory no Default $PIPER_spotBugsExcludeFilterFile (if set) Secret no Configuration scope \u2612 parameter \u2610 general \u2612 steps \u2612 stages Resource references none spotBugsIncludeFilterFile \u00b6 Path to a filter file with bug definitions which should be included. back to overview Scope Details Aliases spotBugs/includeFilterFile Type string Mandatory no Default $PIPER_spotBugsIncludeFilterFile (if set) Secret no Configuration scope \u2612 parameter \u2610 general \u2612 steps \u2612 stages Resource references none spotBugsMaxAllowedViolations \u00b6 The maximum number of failures allowed before execution fails. back to overview Scope Details Aliases spotBugs/maxAllowedViolations Type int Mandatory no Default 0 Secret no Configuration scope \u2612 parameter \u2610 general \u2612 steps \u2612 stages Resource references none verbose \u00b6 verbose output back to overview Scope Details Aliases - Type bool Mandatory no Default false Possible values - true - false Secret no Configuration scope \u2612 parameter \u2612 general \u2612 steps \u2612 stages Resource references none","title":"mavenExecuteStaticCodeChecks"},{"location":"steps/mavenExecuteStaticCodeChecks/#mavenexecutestaticcodechecks","text":"Execute static code checks for Maven based projects. The plugins SpotBugs and PMD are used.","title":"mavenExecuteStaticCodeChecks"},{"location":"steps/mavenExecuteStaticCodeChecks/#description","text":"Executes Spotbugs Maven plugin as well as Pmd Maven plugin for static code checks. SpotBugs is a program to find bugs in Java programs. It looks for instances of \u201cbug patterns\u201d \u2014 code instances that are likely to be errors. For more information please visit https://spotbugs.readthedocs.io/en/latest/maven.html PMD is a source code analyzer. It finds common programming flaws like unused variables, empty catch blocks, unnecessary object creation, and so forth. It supports Java, JavaScript, Salesforce.com Apex and Visualforce, PLSQL, Apache Velocity, XML, XSL. For more information please visit https://pmd.github.io/. The plugins should be configured in the respective pom.xml. For SpotBugs include- and exclude filters as well as maximum allowed violations are conifgurable via .pipeline/config.yml. For PMD the failure priority and the max allowed violations are configurable via .pipeline/config.yml.","title":"Description"},{"location":"steps/mavenExecuteStaticCodeChecks/#usage","text":"We recommend to define values of step parameters via .pipeline/config.yml file . In this case, calling the step is essentially reduced to defining the step name. Calling the step can be done either in an orchestrator specific way (e.g. via a Jenkins library step) or on the command line. Jenkins Command Line library ( 'piper-lib-os' ) mavenExecuteStaticCodeChecks script: this piper mavenExecuteStaticCodeChecks","title":"Usage"},{"location":"steps/mavenExecuteStaticCodeChecks/#parameters","text":"","title":"Parameters"},{"location":"steps/mavenExecuteStaticCodeChecks/#overview-step","text":"Name Mandatory Additional information script (yes) reference to Jenkins main pipeline script globalSettingsFile no installArtifacts no logSuccessfulMavenTransfers no m2Path no mavenModulesExcludes no pmd no pmdFailurePriority no pmdMaxAllowedViolations no projectSettingsFile no spotBugs no spotBugsExcludeFilterFile no spotBugsIncludeFilterFile no spotBugsMaxAllowedViolations no verbose no activates debug output","title":"Overview - Step"},{"location":"steps/mavenExecuteStaticCodeChecks/#overview-execution-environment","text":"Orchestrator-specific only These parameters are relevant for orchestrator usage and not considered when using the command line option. Name Mandatory Additional information containerCommand no containerShell no dockerEnvVars no dockerImage no dockerName no dockerOptions no dockerPullImage no dockerVolumeBind no dockerWorkspace no","title":"Overview - Execution Environment"},{"location":"steps/mavenExecuteStaticCodeChecks/#details","text":"","title":"Details"},{"location":"steps/mavenExecuteStaticCodeChecks/#containercommand","text":"Jenkins-specific: Used for proper environment setup. Kubernetes only: Allows to specify start command for container created with dockerImage parameter to overwrite Piper default (/usr/bin/tail -f /dev/null). back to overview Scope Details Aliases - Type string Mandatory no Default Secret no Configuration scope \u2612 parameter \u2612 general \u2612 steps \u2612 stages Resource references none","title":"containerCommand"},{"location":"steps/mavenExecuteStaticCodeChecks/#containershell","text":"Jenkins-specific: Used for proper environment setup. Allows to specify the shell to be executed for container with containerName. back to overview Scope Details Aliases - Type string Mandatory no Default Secret no Configuration scope \u2612 parameter \u2612 general \u2612 steps \u2612 stages Resource references none","title":"containerShell"},{"location":"steps/mavenExecuteStaticCodeChecks/#dockerenvvars","text":"Environment variables to set in the container, e.g. [http_proxy: \"proxy:8080\"]. back to overview Scope Details Aliases - Type map[string]string Mandatory no Default Secret no Configuration scope \u2612 parameter \u2612 general \u2612 steps \u2612 stages Resource references none","title":"dockerEnvVars"},{"location":"steps/mavenExecuteStaticCodeChecks/#dockerimage","text":"Name of the docker image that should be used. If empty, Docker is not used and the command is executed directly on the Jenkins system. back to overview Scope Details Aliases - Type string Mandatory no Default maven:3.6-jdk-8 Secret no Configuration scope \u2612 parameter \u2612 general \u2612 steps \u2612 stages Resource references none","title":"dockerImage"},{"location":"steps/mavenExecuteStaticCodeChecks/#dockername","text":"Kubernetes only: Name of the container launching dockerImage. SideCar only: Name of the container in local network. back to overview Scope Details Aliases - Type string Mandatory no Default mvn Secret no Configuration scope \u2612 parameter \u2612 general \u2612 steps \u2612 stages Resource references none","title":"dockerName"},{"location":"steps/mavenExecuteStaticCodeChecks/#dockeroptions","text":"Docker options to be set when starting the container. back to overview Scope Details Aliases - Type []string Mandatory no Default Secret no Configuration scope \u2612 parameter \u2612 general \u2612 steps \u2612 stages Resource references none","title":"dockerOptions"},{"location":"steps/mavenExecuteStaticCodeChecks/#dockerpullimage","text":"Set this to 'false' to bypass a docker image pull. Useful during development process. Allows testing of images which are available in the local registry only. back to overview Scope Details Aliases - Type bool Mandatory no Default true Possible values - true - false Secret no Configuration scope \u2612 parameter \u2612 general \u2612 steps \u2612 stages Resource references none","title":"dockerPullImage"},{"location":"steps/mavenExecuteStaticCodeChecks/#dockervolumebind","text":"Jenkins-specific: Used for proper environment setup. Volumes that should be mounted into the docker container. back to overview Scope Details Aliases - Type map[string]string Mandatory no Default Secret no Configuration scope \u2612 parameter \u2612 general \u2612 steps \u2612 stages Resource references none","title":"dockerVolumeBind"},{"location":"steps/mavenExecuteStaticCodeChecks/#dockerworkspace","text":"Jenkins-specific: Used for proper environment setup. Kubernetes only: Specifies a dedicated user home directory for the container which will be passed as value for environment variable HOME . back to overview Scope Details Aliases - Type string Mandatory no Default Secret no Configuration scope \u2612 parameter \u2612 general \u2612 steps \u2612 stages Resource references none","title":"dockerWorkspace"},{"location":"steps/mavenExecuteStaticCodeChecks/#globalsettingsfile","text":"Path to the mvn settings file that should be used as global settings file. back to overview Scope Details Aliases maven/globalSettingsFile Type string Mandatory no Default $PIPER_globalSettingsFile (if set) Secret no Configuration scope \u2612 parameter \u2612 general \u2612 steps \u2612 stages Resource references none","title":"globalSettingsFile"},{"location":"steps/mavenExecuteStaticCodeChecks/#installartifacts","text":"If enabled, it will install all artifacts to the local maven repository to make them available before running the static code checks. This is required if any maven module has dependencies to other modules in the repository and they were not installed before. back to overview Scope Details Aliases - Type bool Mandatory no Default false Possible values - true - false Secret no Configuration scope \u2612 parameter \u2612 general \u2612 steps \u2612 stages Resource references none","title":"installArtifacts"},{"location":"steps/mavenExecuteStaticCodeChecks/#logsuccessfulmaventransfers","text":"Configures maven to log successful downloads. This is set to false by default to reduce the noise in build logs. back to overview Scope Details Aliases maven/logSuccessfulMavenTransfers Type bool Mandatory no Default false Possible values - true - false Secret no Configuration scope \u2612 parameter \u2612 general \u2612 steps \u2612 stages Resource references none","title":"logSuccessfulMavenTransfers"},{"location":"steps/mavenExecuteStaticCodeChecks/#m2path","text":"Path to the location of the local repository that should be used. back to overview Scope Details Aliases maven/m2Path Type string Mandatory no Default $PIPER_m2Path (if set) Secret no Configuration scope \u2612 parameter \u2612 general \u2612 steps \u2612 stages Resource references none","title":"m2Path"},{"location":"steps/mavenExecuteStaticCodeChecks/#mavenmodulesexcludes","text":"Maven modules which should be excluded by the static code checks. By default the modules 'unit-tests' and 'integration-tests' will be excluded. back to overview Scope Details Aliases - Type []string Mandatory no Default $PIPER_mavenModulesExcludes (if set) Secret no Configuration scope \u2612 parameter \u2610 general \u2612 steps \u2612 stages Resource references none","title":"mavenModulesExcludes"},{"location":"steps/mavenExecuteStaticCodeChecks/#pmd","text":"Parameter to turn off PMD. back to overview Scope Details Aliases - Type bool Mandatory no Default true Possible values - true - false Secret no Configuration scope \u2612 parameter \u2610 general \u2612 steps \u2612 stages Resource references none","title":"pmd"},{"location":"steps/mavenExecuteStaticCodeChecks/#pmdfailurepriority","text":"What priority level to fail the build on. PMD violations are assigned a priority from 1 (most severe) to 5 (least severe) according the the rule's priority. Violations at or less than this priority level are considered failures and will fail the build if failOnViolation=true and the count exceeds maxAllowedViolations. The other violations will be regarded as warnings and will be displayed in the build output if verbose=true. Setting a value of 5 will treat all violations as failures, which may cause the build to fail. Setting a value of 1 will treat all violations as warnings. Only values from 1 to 5 are valid. back to overview Scope Details Aliases pmd/failurePriority Type int Mandatory no Default 0 Secret no Configuration scope \u2612 parameter \u2610 general \u2612 steps \u2612 stages Resource references none","title":"pmdFailurePriority"},{"location":"steps/mavenExecuteStaticCodeChecks/#pmdmaxallowedviolations","text":"The maximum number of failures allowed before execution fails. Used in conjunction with failOnViolation=true and utilizes failurePriority. This value has no meaning if failOnViolation=false. If the number of failures is greater than this number, the build will be failed. If the number of failures is less than or equal to this value, then the build will not be failed. back to overview Scope Details Aliases pmd/maxAllowedViolations Type int Mandatory no Default 0 Secret no Configuration scope \u2612 parameter \u2610 general \u2612 steps \u2612 stages Resource references none","title":"pmdMaxAllowedViolations"},{"location":"steps/mavenExecuteStaticCodeChecks/#projectsettingsfile","text":"Path to the mvn settings file that should be used as project settings file. back to overview Scope Details Aliases maven/projectSettingsFile Type string Mandatory no Default $PIPER_projectSettingsFile (if set) Secret no Configuration scope \u2612 parameter \u2612 general \u2612 steps \u2612 stages Resource references none","title":"projectSettingsFile"},{"location":"steps/mavenExecuteStaticCodeChecks/#script","text":"The common script environment of the Jenkinsfile running. Typically the reference to the script calling the pipeline step is provided with the this parameter, as in script: this . This allows the function to access the commonPipelineEnvironment for retrieving, e.g. configuration parameters. back to overview Scope Details Aliases - Type Jenkins Script Mandatory yes Default Secret no Configuration scope \u2610 parameter \u2610 general \u2610 steps \u2610 stages Resource references none","title":"script"},{"location":"steps/mavenExecuteStaticCodeChecks/#spotbugs","text":"Parameter to turn off SpotBugs. back to overview Scope Details Aliases - Type bool Mandatory no Default true Possible values - true - false Secret no Configuration scope \u2612 parameter \u2610 general \u2612 steps \u2612 stages Resource references none","title":"spotBugs"},{"location":"steps/mavenExecuteStaticCodeChecks/#spotbugsexcludefilterfile","text":"Path to a filter file with bug definitions which should be excluded. back to overview Scope Details Aliases spotBugs/excludeFilterFile Type string Mandatory no Default $PIPER_spotBugsExcludeFilterFile (if set) Secret no Configuration scope \u2612 parameter \u2610 general \u2612 steps \u2612 stages Resource references none","title":"spotBugsExcludeFilterFile"},{"location":"steps/mavenExecuteStaticCodeChecks/#spotbugsincludefilterfile","text":"Path to a filter file with bug definitions which should be included. back to overview Scope Details Aliases spotBugs/includeFilterFile Type string Mandatory no Default $PIPER_spotBugsIncludeFilterFile (if set) Secret no Configuration scope \u2612 parameter \u2610 general \u2612 steps \u2612 stages Resource references none","title":"spotBugsIncludeFilterFile"},{"location":"steps/mavenExecuteStaticCodeChecks/#spotbugsmaxallowedviolations","text":"The maximum number of failures allowed before execution fails. back to overview Scope Details Aliases spotBugs/maxAllowedViolations Type int Mandatory no Default 0 Secret no Configuration scope \u2612 parameter \u2610 general \u2612 steps \u2612 stages Resource references none","title":"spotBugsMaxAllowedViolations"},{"location":"steps/mavenExecuteStaticCodeChecks/#verbose","text":"verbose output back to overview Scope Details Aliases - Type bool Mandatory no Default false Possible values - true - false Secret no Configuration scope \u2612 parameter \u2612 general \u2612 steps \u2612 stages Resource references none","title":"verbose"},{"location":"steps/mtaBuild/","text":"mtaBuild \u00b6 Performs an mta build Description \u00b6 Executes the SAP Multitarget Application Archive Builder to create an mtar archive of the application. build with dependencies from a private repository \u00b6 For Maven related settings refer Maven build dependencies For NPM related settings refer NPM build dependencies Usage \u00b6 We recommend to define values of step parameters via .pipeline/config.yml file . In this case, calling the step is essentially reduced to defining the step name. Calling the step can be done either in an orchestrator specific way (e.g. via a Jenkins library step) or on the command line. Jenkins Command Line library ( 'piper-lib-os' ) mtaBuild script: this piper mtaBuild Outputs \u00b6 Output type Details commonPipelineEnvironment mtarFilePath custom/mtaBuildToolDesc custom/mtarPublishedUrl custom/buildSettingsInfo custom/mtaBuildArtifacts Prerequisites \u00b6 While using a custom docker file, ensure that the following tools are installed: multitarget application archive builder 1.0.6 or compatible version - can be downloaded from SAP Development Tools . Java 8 or compatible version - necessary to run the multitarget application archive builder itself and to build Java modules. NodeJS installed - the multitarget application archive builder uses npm to download node module dependencies such as grunt . Parameters \u00b6 Overview - Step \u00b6 Name Mandatory Additional information script (yes) reference to Jenkins main pipeline script applicationName no buildSettingsInfo no createBOM no createBuildArtifactsMetadata no defaultNpmRegistry no enableSetTimestamp no extensions no globalSettingsFile no installArtifacts no jobs no m2Path no mtaDeploymentRepositoryPassword no pass via ENV, Vault or Jenkins credentials mtaDeploymentRepositoryUrl no mtaDeploymentRepositoryUser no mtarGroup no mtarName no platform no profiles no projectSettingsFile no publish no source no target no verbose no activates debug output version no Overview - Execution Environment \u00b6 Orchestrator-specific only These parameters are relevant for orchestrator usage and not considered when using the command line option. Name Mandatory Additional information containerCommand no containerShell no dockerEnvVars no dockerImage no dockerName no dockerOptions no dockerPullImage no dockerVolumeBind no dockerWorkspace no Details \u00b6 applicationName \u00b6 The name of the application which is being built. If the parameter has been provided and no mta.yaml exists, the mta.yaml will be automatically generated using this parameter and the information ( name and version ) from 'package.json` before the actual build starts. back to overview Scope Details Aliases - Type string Mandatory no Default $PIPER_applicationName (if set) Secret no Configuration scope \u2612 parameter \u2610 general \u2612 steps \u2612 stages Resource references none buildSettingsInfo \u00b6 build settings info is typically filled by the step automatically to create information about the build settings that were used during the mta build . This information is typically used for compliance related processes. back to overview Scope Details Aliases - Type string Mandatory no Default $PIPER_buildSettingsInfo (if set) Secret no Configuration scope \u2612 parameter \u2610 general \u2612 steps \u2612 stages Resource references commonPipelineEnvironment : reference to: custom/buildSettingsInfo containerCommand \u00b6 Jenkins-specific: Used for proper environment setup. Kubernetes only: Allows to specify start command for container created with dockerImage parameter to overwrite Piper default (/usr/bin/tail -f /dev/null). back to overview Scope Details Aliases - Type string Mandatory no Default Secret no Configuration scope \u2612 parameter \u2612 general \u2612 steps \u2612 stages Resource references none containerShell \u00b6 Jenkins-specific: Used for proper environment setup. Allows to specify the shell to be executed for container with containerName. back to overview Scope Details Aliases - Type string Mandatory no Default Secret no Configuration scope \u2612 parameter \u2612 general \u2612 steps \u2612 stages Resource references none createBOM \u00b6 Creates the bill of materials (BOM) using CycloneDX plugin. back to overview Scope Details Aliases - Type bool Mandatory no Default false Possible values - true - false Secret no Configuration scope \u2612 parameter \u2612 general \u2612 steps \u2612 stages Resource references none createBuildArtifactsMetadata \u00b6 metadata about the artifacts that are build and published, this metadata is generally used by steps downstream in the pipeline back to overview Scope Details Aliases - Type bool Mandatory no Default false Possible values - true - false Secret no Configuration scope \u2612 parameter \u2610 general \u2612 steps \u2612 stages Resource references none defaultNpmRegistry \u00b6 Url to the npm registry that should be used for installing npm dependencies. back to overview Scope Details Aliases npm/defaultNpmRegistry Type string Mandatory no Default $PIPER_defaultNpmRegistry (if set) Secret no Configuration scope \u2612 parameter \u2612 general \u2612 steps \u2612 stages Resource references none dockerEnvVars \u00b6 Environment variables to set in the container, e.g. [http_proxy: \"proxy:8080\"]. back to overview Scope Details Aliases - Type map[string]string Mandatory no Default Secret no Configuration scope \u2612 parameter \u2612 general \u2612 steps \u2612 stages Resource references none dockerImage \u00b6 Name of the docker image that should be used. If empty, Docker is not used and the command is executed directly on the Jenkins system. back to overview Scope Details Aliases - Type string Mandatory no Default devxci/mbtci-java21-node22 Secret no Configuration scope \u2612 parameter \u2612 general \u2612 steps \u2612 stages Resource references none dockerName \u00b6 Kubernetes only: Name of the container launching dockerImage. SideCar only: Name of the container in local network. back to overview Scope Details Aliases - Type string Mandatory no Default Secret no Configuration scope \u2612 parameter \u2612 general \u2612 steps \u2612 stages Resource references none dockerOptions \u00b6 Docker options to be set when starting the container. back to overview Scope Details Aliases - Type []string Mandatory no Default Secret no Configuration scope \u2612 parameter \u2612 general \u2612 steps \u2612 stages Resource references none dockerPullImage \u00b6 Set this to 'false' to bypass a docker image pull. Useful during development process. Allows testing of images which are available in the local registry only. back to overview Scope Details Aliases - Type bool Mandatory no Default true Possible values - true - false Secret no Configuration scope \u2612 parameter \u2612 general \u2612 steps \u2612 stages Resource references none dockerVolumeBind \u00b6 Jenkins-specific: Used for proper environment setup. Volumes that should be mounted into the docker container. back to overview Scope Details Aliases - Type map[string]string Mandatory no Default Secret no Configuration scope \u2612 parameter \u2612 general \u2612 steps \u2612 stages Resource references none dockerWorkspace \u00b6 Jenkins-specific: Used for proper environment setup. Kubernetes only: Specifies a dedicated user home directory for the container which will be passed as value for environment variable HOME . back to overview Scope Details Aliases - Type string Mandatory no Default Secret no Configuration scope \u2612 parameter \u2612 general \u2612 steps \u2612 stages Resource references none enableSetTimestamp \u00b6 Enables setting the timestamp in the mta.yaml when it contains ${timestamp} . Disable this when you want the MTA Deploy Service to do this instead. back to overview Scope Details Aliases - Type bool Mandatory no Default true Possible values - true - false Secret no Configuration scope \u2612 parameter \u2610 general \u2612 steps \u2612 stages Resource references none extensions \u00b6 The path to the extension descriptor file. back to overview Scope Details Aliases extension Type string Mandatory no Default $PIPER_extensions (if set) Secret no Configuration scope \u2612 parameter \u2610 general \u2612 steps \u2612 stages Resource references none globalSettingsFile \u00b6 Path or url to the mvn settings file that should be used as global settings file back to overview Scope Details Aliases maven/globalSettingsFile Type string Mandatory no Default $PIPER_globalSettingsFile (if set) Secret no Configuration scope \u2612 parameter \u2612 general \u2612 steps \u2612 stages Resource references none installArtifacts \u00b6 If enabled, for npm packages this step will install all dependencies including dev dependencies. For maven it will install all artifacts to the local maven repository. Note: This happens after mta build was done. The default mta build tool does not install dev-dependencies as part of the process. If you require dev-dependencies for building the mta, you will need to use a custom builder back to overview Scope Details Aliases - Type bool Mandatory no Default false Possible values - true - false Secret no Configuration scope \u2612 parameter \u2612 general \u2612 steps \u2612 stages Resource references none jobs \u00b6 Configures the number of Make jobs that can run simultaneously. Maximum value allowed is 8 back to overview Scope Details Aliases jobs Type int Mandatory no Default 0 Secret no Configuration scope \u2612 parameter \u2610 general \u2612 steps \u2612 stages Resource references none m2Path \u00b6 Path to the location of the local repository that should be used. back to overview Scope Details Aliases maven/m2Path Type string Mandatory no Default $PIPER_m2Path (if set) Secret no Configuration scope \u2612 parameter \u2612 general \u2612 steps \u2612 stages Resource references none mtaDeploymentRepositoryPassword \u00b6 Password for the alternative deployment repository to which mtar artifacts will be publised back to overview Scope Details Aliases - Type string Mandatory no Default $PIPER_mtaDeploymentRepositoryPassword (if set) Secret yes Configuration scope \u2612 parameter \u2612 general \u2612 steps \u2612 stages Resource references commonPipelineEnvironment : reference to: custom/mavenRepositoryPassword commonPipelineEnvironment : reference to: custom/repositoryPassword Vault resource: name: mtaDeploymentRepositoryPasswordFileVaultSecretName default value: mta-deployment-repository-password Vault paths: $(vaultPath)/mta-deployment-repository-password $(vaultBasePath)/$(vaultPipelineName)/mta-deployment-repository-password $(vaultBasePath)/GROUP-SECRETS/mta-deployment-repository-password mtaDeploymentRepositoryUrl \u00b6 Url for the alternative deployment repository to which mtar artifacts will be publised back to overview Scope Details Aliases - Type string Mandatory no Default $PIPER_mtaDeploymentRepositoryUrl (if set) Secret no Configuration scope \u2612 parameter \u2612 general \u2612 steps \u2612 stages Resource references commonPipelineEnvironment : reference to: custom/mavenRepositoryURL commonPipelineEnvironment : reference to: custom/repositoryUrl mtaDeploymentRepositoryUser \u00b6 User for the alternative deployment repository to which which mtar artifacts will be publised back to overview Scope Details Aliases - Type string Mandatory no Default $PIPER_mtaDeploymentRepositoryUser (if set) Secret no Configuration scope \u2612 parameter \u2612 general \u2612 steps \u2612 stages Resource references commonPipelineEnvironment : reference to: custom/mavenRepositoryUsername commonPipelineEnvironment : reference to: custom/repositoryUsername mtarGroup \u00b6 The group to which the mtar artifact will be uploaded. Required when publish is True. back to overview Scope Details Aliases - Type string Mandatory no Default $PIPER_mtarGroup (if set) Secret no Configuration scope \u2612 parameter \u2610 general \u2612 steps \u2612 stages Resource references none mtarName \u00b6 The name of the generated mtar file including its extension. back to overview Scope Details Aliases - Type string Mandatory no Default $PIPER_mtarName (if set) Secret no Configuration scope \u2612 parameter \u2610 general \u2612 steps \u2612 stages Resource references none platform \u00b6 The target platform to which the mtar can be deployed. back to overview Scope Details Aliases - Type string Mandatory no Default CF Possible values - CF - NEO - XSA Secret no Configuration scope \u2612 parameter \u2610 general \u2612 steps \u2612 stages Resource references none profiles \u00b6 Defines list of maven build profiles to be used. profiles will overwrite existing values in the global settings xml at $M2_HOME/conf/settings.xml back to overview Scope Details Aliases - Type []string Mandatory no Default $PIPER_profiles (if set) Secret no Configuration scope \u2612 parameter \u2612 general \u2612 steps \u2612 stages Resource references none projectSettingsFile \u00b6 Path or url to the mvn settings file that should be used as project settings file. back to overview Scope Details Aliases maven/projectSettingsFile Type string Mandatory no Default $PIPER_projectSettingsFile (if set) Secret no Configuration scope \u2612 parameter \u2612 general \u2612 steps \u2612 stages Resource references none publish \u00b6 pushed mtar artifact to altDeploymentRepositoryUrl/altDeploymentRepositoryID when set to true back to overview Scope Details Aliases mta/publish Type bool Mandatory no Default false Possible values - true - false Secret no Configuration scope \u2612 parameter \u2610 general \u2612 steps \u2612 stages Resource references none script \u00b6 The common script environment of the Jenkinsfile running. Typically the reference to the script calling the pipeline step is provided with the this parameter, as in script: this . This allows the function to access the commonPipelineEnvironment for retrieving, e.g. configuration parameters. back to overview Scope Details Aliases - Type Jenkins Script Mandatory yes Default Secret no Configuration scope \u2610 parameter \u2610 general \u2610 steps \u2610 stages Resource references none source \u00b6 The path to the MTA project. back to overview Scope Details Aliases - Type string Mandatory no Default ./ Secret no Configuration scope \u2612 parameter \u2610 general \u2612 steps \u2612 stages Resource references none target \u00b6 The folder for the generated MTAR file. If the parameter has been provided, the MTAR file is saved in the root of the folder provided by the argument. back to overview Scope Details Aliases - Type string Mandatory no Default ./ Secret no Configuration scope \u2612 parameter \u2610 general \u2612 steps \u2612 stages Resource references none verbose \u00b6 verbose output back to overview Scope Details Aliases - Type bool Mandatory no Default false Possible values - true - false Secret no Configuration scope \u2612 parameter \u2612 general \u2612 steps \u2612 stages Resource references none version \u00b6 Version of the mtar artifact back to overview Scope Details Aliases artifactVersion Type string Mandatory no Default $PIPER_version (if set) Secret no Configuration scope \u2612 parameter \u2610 general \u2612 steps \u2612 stages Resource references commonPipelineEnvironment : reference to: artifactVersion Side effects \u00b6 The file name of the resulting archive is written to the commonPipelineEnvironment with variable name mtarFileName . Exceptions \u00b6 AbortException : If there is an invalid buildTarget . If there is no key ID inside the mta.yaml file. Example \u00b6 dir ( '/path/to/FioriApp' ){ mtaBuild script: this , buildTarget: 'NEO' } def mtarFilePath = commonPipelineEnvironment . getMtarFilePath ()","title":"mtaBuild"},{"location":"steps/mtaBuild/#mtabuild","text":"Performs an mta build","title":"mtaBuild"},{"location":"steps/mtaBuild/#description","text":"Executes the SAP Multitarget Application Archive Builder to create an mtar archive of the application.","title":"Description"},{"location":"steps/mtaBuild/#build-with-dependencies-from-a-private-repository","text":"For Maven related settings refer Maven build dependencies For NPM related settings refer NPM build dependencies","title":"build with dependencies from a private repository"},{"location":"steps/mtaBuild/#usage","text":"We recommend to define values of step parameters via .pipeline/config.yml file . In this case, calling the step is essentially reduced to defining the step name. Calling the step can be done either in an orchestrator specific way (e.g. via a Jenkins library step) or on the command line. Jenkins Command Line library ( 'piper-lib-os' ) mtaBuild script: this piper mtaBuild","title":"Usage"},{"location":"steps/mtaBuild/#outputs","text":"Output type Details commonPipelineEnvironment mtarFilePath custom/mtaBuildToolDesc custom/mtarPublishedUrl custom/buildSettingsInfo custom/mtaBuildArtifacts","title":"Outputs"},{"location":"steps/mtaBuild/#prerequisites","text":"While using a custom docker file, ensure that the following tools are installed: multitarget application archive builder 1.0.6 or compatible version - can be downloaded from SAP Development Tools . Java 8 or compatible version - necessary to run the multitarget application archive builder itself and to build Java modules. NodeJS installed - the multitarget application archive builder uses npm to download node module dependencies such as grunt .","title":"Prerequisites"},{"location":"steps/mtaBuild/#parameters","text":"","title":"Parameters"},{"location":"steps/mtaBuild/#overview-step","text":"Name Mandatory Additional information script (yes) reference to Jenkins main pipeline script applicationName no buildSettingsInfo no createBOM no createBuildArtifactsMetadata no defaultNpmRegistry no enableSetTimestamp no extensions no globalSettingsFile no installArtifacts no jobs no m2Path no mtaDeploymentRepositoryPassword no pass via ENV, Vault or Jenkins credentials mtaDeploymentRepositoryUrl no mtaDeploymentRepositoryUser no mtarGroup no mtarName no platform no profiles no projectSettingsFile no publish no source no target no verbose no activates debug output version no","title":"Overview - Step"},{"location":"steps/mtaBuild/#overview-execution-environment","text":"Orchestrator-specific only These parameters are relevant for orchestrator usage and not considered when using the command line option. Name Mandatory Additional information containerCommand no containerShell no dockerEnvVars no dockerImage no dockerName no dockerOptions no dockerPullImage no dockerVolumeBind no dockerWorkspace no","title":"Overview - Execution Environment"},{"location":"steps/mtaBuild/#details","text":"","title":"Details"},{"location":"steps/mtaBuild/#applicationname","text":"The name of the application which is being built. If the parameter has been provided and no mta.yaml exists, the mta.yaml will be automatically generated using this parameter and the information ( name and version ) from 'package.json` before the actual build starts. back to overview Scope Details Aliases - Type string Mandatory no Default $PIPER_applicationName (if set) Secret no Configuration scope \u2612 parameter \u2610 general \u2612 steps \u2612 stages Resource references none","title":"applicationName"},{"location":"steps/mtaBuild/#buildsettingsinfo","text":"build settings info is typically filled by the step automatically to create information about the build settings that were used during the mta build . This information is typically used for compliance related processes. back to overview Scope Details Aliases - Type string Mandatory no Default $PIPER_buildSettingsInfo (if set) Secret no Configuration scope \u2612 parameter \u2610 general \u2612 steps \u2612 stages Resource references commonPipelineEnvironment : reference to: custom/buildSettingsInfo","title":"buildSettingsInfo"},{"location":"steps/mtaBuild/#containercommand","text":"Jenkins-specific: Used for proper environment setup. Kubernetes only: Allows to specify start command for container created with dockerImage parameter to overwrite Piper default (/usr/bin/tail -f /dev/null). back to overview Scope Details Aliases - Type string Mandatory no Default Secret no Configuration scope \u2612 parameter \u2612 general \u2612 steps \u2612 stages Resource references none","title":"containerCommand"},{"location":"steps/mtaBuild/#containershell","text":"Jenkins-specific: Used for proper environment setup. Allows to specify the shell to be executed for container with containerName. back to overview Scope Details Aliases - Type string Mandatory no Default Secret no Configuration scope \u2612 parameter \u2612 general \u2612 steps \u2612 stages Resource references none","title":"containerShell"},{"location":"steps/mtaBuild/#createbom","text":"Creates the bill of materials (BOM) using CycloneDX plugin. back to overview Scope Details Aliases - Type bool Mandatory no Default false Possible values - true - false Secret no Configuration scope \u2612 parameter \u2612 general \u2612 steps \u2612 stages Resource references none","title":"createBOM"},{"location":"steps/mtaBuild/#createbuildartifactsmetadata","text":"metadata about the artifacts that are build and published, this metadata is generally used by steps downstream in the pipeline back to overview Scope Details Aliases - Type bool Mandatory no Default false Possible values - true - false Secret no Configuration scope \u2612 parameter \u2610 general \u2612 steps \u2612 stages Resource references none","title":"createBuildArtifactsMetadata"},{"location":"steps/mtaBuild/#defaultnpmregistry","text":"Url to the npm registry that should be used for installing npm dependencies. back to overview Scope Details Aliases npm/defaultNpmRegistry Type string Mandatory no Default $PIPER_defaultNpmRegistry (if set) Secret no Configuration scope \u2612 parameter \u2612 general \u2612 steps \u2612 stages Resource references none","title":"defaultNpmRegistry"},{"location":"steps/mtaBuild/#dockerenvvars","text":"Environment variables to set in the container, e.g. [http_proxy: \"proxy:8080\"]. back to overview Scope Details Aliases - Type map[string]string Mandatory no Default Secret no Configuration scope \u2612 parameter \u2612 general \u2612 steps \u2612 stages Resource references none","title":"dockerEnvVars"},{"location":"steps/mtaBuild/#dockerimage","text":"Name of the docker image that should be used. If empty, Docker is not used and the command is executed directly on the Jenkins system. back to overview Scope Details Aliases - Type string Mandatory no Default devxci/mbtci-java21-node22 Secret no Configuration scope \u2612 parameter \u2612 general \u2612 steps \u2612 stages Resource references none","title":"dockerImage"},{"location":"steps/mtaBuild/#dockername","text":"Kubernetes only: Name of the container launching dockerImage. SideCar only: Name of the container in local network. back to overview Scope Details Aliases - Type string Mandatory no Default Secret no Configuration scope \u2612 parameter \u2612 general \u2612 steps \u2612 stages Resource references none","title":"dockerName"},{"location":"steps/mtaBuild/#dockeroptions","text":"Docker options to be set when starting the container. back to overview Scope Details Aliases - Type []string Mandatory no Default Secret no Configuration scope \u2612 parameter \u2612 general \u2612 steps \u2612 stages Resource references none","title":"dockerOptions"},{"location":"steps/mtaBuild/#dockerpullimage","text":"Set this to 'false' to bypass a docker image pull. Useful during development process. Allows testing of images which are available in the local registry only. back to overview Scope Details Aliases - Type bool Mandatory no Default true Possible values - true - false Secret no Configuration scope \u2612 parameter \u2612 general \u2612 steps \u2612 stages Resource references none","title":"dockerPullImage"},{"location":"steps/mtaBuild/#dockervolumebind","text":"Jenkins-specific: Used for proper environment setup. Volumes that should be mounted into the docker container. back to overview Scope Details Aliases - Type map[string]string Mandatory no Default Secret no Configuration scope \u2612 parameter \u2612 general \u2612 steps \u2612 stages Resource references none","title":"dockerVolumeBind"},{"location":"steps/mtaBuild/#dockerworkspace","text":"Jenkins-specific: Used for proper environment setup. Kubernetes only: Specifies a dedicated user home directory for the container which will be passed as value for environment variable HOME . back to overview Scope Details Aliases - Type string Mandatory no Default Secret no Configuration scope \u2612 parameter \u2612 general \u2612 steps \u2612 stages Resource references none","title":"dockerWorkspace"},{"location":"steps/mtaBuild/#enablesettimestamp","text":"Enables setting the timestamp in the mta.yaml when it contains ${timestamp} . Disable this when you want the MTA Deploy Service to do this instead. back to overview Scope Details Aliases - Type bool Mandatory no Default true Possible values - true - false Secret no Configuration scope \u2612 parameter \u2610 general \u2612 steps \u2612 stages Resource references none","title":"enableSetTimestamp"},{"location":"steps/mtaBuild/#extensions","text":"The path to the extension descriptor file. back to overview Scope Details Aliases extension Type string Mandatory no Default $PIPER_extensions (if set) Secret no Configuration scope \u2612 parameter \u2610 general \u2612 steps \u2612 stages Resource references none","title":"extensions"},{"location":"steps/mtaBuild/#globalsettingsfile","text":"Path or url to the mvn settings file that should be used as global settings file back to overview Scope Details Aliases maven/globalSettingsFile Type string Mandatory no Default $PIPER_globalSettingsFile (if set) Secret no Configuration scope \u2612 parameter \u2612 general \u2612 steps \u2612 stages Resource references none","title":"globalSettingsFile"},{"location":"steps/mtaBuild/#installartifacts","text":"If enabled, for npm packages this step will install all dependencies including dev dependencies. For maven it will install all artifacts to the local maven repository. Note: This happens after mta build was done. The default mta build tool does not install dev-dependencies as part of the process. If you require dev-dependencies for building the mta, you will need to use a custom builder back to overview Scope Details Aliases - Type bool Mandatory no Default false Possible values - true - false Secret no Configuration scope \u2612 parameter \u2612 general \u2612 steps \u2612 stages Resource references none","title":"installArtifacts"},{"location":"steps/mtaBuild/#jobs","text":"Configures the number of Make jobs that can run simultaneously. Maximum value allowed is 8 back to overview Scope Details Aliases jobs Type int Mandatory no Default 0 Secret no Configuration scope \u2612 parameter \u2610 general \u2612 steps \u2612 stages Resource references none","title":"jobs"},{"location":"steps/mtaBuild/#m2path","text":"Path to the location of the local repository that should be used. back to overview Scope Details Aliases maven/m2Path Type string Mandatory no Default $PIPER_m2Path (if set) Secret no Configuration scope \u2612 parameter \u2612 general \u2612 steps \u2612 stages Resource references none","title":"m2Path"},{"location":"steps/mtaBuild/#mtadeploymentrepositorypassword","text":"Password for the alternative deployment repository to which mtar artifacts will be publised back to overview Scope Details Aliases - Type string Mandatory no Default $PIPER_mtaDeploymentRepositoryPassword (if set) Secret yes Configuration scope \u2612 parameter \u2612 general \u2612 steps \u2612 stages Resource references commonPipelineEnvironment : reference to: custom/mavenRepositoryPassword commonPipelineEnvironment : reference to: custom/repositoryPassword Vault resource: name: mtaDeploymentRepositoryPasswordFileVaultSecretName default value: mta-deployment-repository-password Vault paths: $(vaultPath)/mta-deployment-repository-password $(vaultBasePath)/$(vaultPipelineName)/mta-deployment-repository-password $(vaultBasePath)/GROUP-SECRETS/mta-deployment-repository-password","title":"mtaDeploymentRepositoryPassword"},{"location":"steps/mtaBuild/#mtadeploymentrepositoryurl","text":"Url for the alternative deployment repository to which mtar artifacts will be publised back to overview Scope Details Aliases - Type string Mandatory no Default $PIPER_mtaDeploymentRepositoryUrl (if set) Secret no Configuration scope \u2612 parameter \u2612 general \u2612 steps \u2612 stages Resource references commonPipelineEnvironment : reference to: custom/mavenRepositoryURL commonPipelineEnvironment : reference to: custom/repositoryUrl","title":"mtaDeploymentRepositoryUrl"},{"location":"steps/mtaBuild/#mtadeploymentrepositoryuser","text":"User for the alternative deployment repository to which which mtar artifacts will be publised back to overview Scope Details Aliases - Type string Mandatory no Default $PIPER_mtaDeploymentRepositoryUser (if set) Secret no Configuration scope \u2612 parameter \u2612 general \u2612 steps \u2612 stages Resource references commonPipelineEnvironment : reference to: custom/mavenRepositoryUsername commonPipelineEnvironment : reference to: custom/repositoryUsername","title":"mtaDeploymentRepositoryUser"},{"location":"steps/mtaBuild/#mtargroup","text":"The group to which the mtar artifact will be uploaded. Required when publish is True. back to overview Scope Details Aliases - Type string Mandatory no Default $PIPER_mtarGroup (if set) Secret no Configuration scope \u2612 parameter \u2610 general \u2612 steps \u2612 stages Resource references none","title":"mtarGroup"},{"location":"steps/mtaBuild/#mtarname","text":"The name of the generated mtar file including its extension. back to overview Scope Details Aliases - Type string Mandatory no Default $PIPER_mtarName (if set) Secret no Configuration scope \u2612 parameter \u2610 general \u2612 steps \u2612 stages Resource references none","title":"mtarName"},{"location":"steps/mtaBuild/#platform","text":"The target platform to which the mtar can be deployed. back to overview Scope Details Aliases - Type string Mandatory no Default CF Possible values - CF - NEO - XSA Secret no Configuration scope \u2612 parameter \u2610 general \u2612 steps \u2612 stages Resource references none","title":"platform"},{"location":"steps/mtaBuild/#profiles","text":"Defines list of maven build profiles to be used. profiles will overwrite existing values in the global settings xml at $M2_HOME/conf/settings.xml back to overview Scope Details Aliases - Type []string Mandatory no Default $PIPER_profiles (if set) Secret no Configuration scope \u2612 parameter \u2612 general \u2612 steps \u2612 stages Resource references none","title":"profiles"},{"location":"steps/mtaBuild/#projectsettingsfile","text":"Path or url to the mvn settings file that should be used as project settings file. back to overview Scope Details Aliases maven/projectSettingsFile Type string Mandatory no Default $PIPER_projectSettingsFile (if set) Secret no Configuration scope \u2612 parameter \u2612 general \u2612 steps \u2612 stages Resource references none","title":"projectSettingsFile"},{"location":"steps/mtaBuild/#publish","text":"pushed mtar artifact to altDeploymentRepositoryUrl/altDeploymentRepositoryID when set to true back to overview Scope Details Aliases mta/publish Type bool Mandatory no Default false Possible values - true - false Secret no Configuration scope \u2612 parameter \u2610 general \u2612 steps \u2612 stages Resource references none","title":"publish"},{"location":"steps/mtaBuild/#script","text":"The common script environment of the Jenkinsfile running. Typically the reference to the script calling the pipeline step is provided with the this parameter, as in script: this . This allows the function to access the commonPipelineEnvironment for retrieving, e.g. configuration parameters. back to overview Scope Details Aliases - Type Jenkins Script Mandatory yes Default Secret no Configuration scope \u2610 parameter \u2610 general \u2610 steps \u2610 stages Resource references none","title":"script"},{"location":"steps/mtaBuild/#source","text":"The path to the MTA project. back to overview Scope Details Aliases - Type string Mandatory no Default ./ Secret no Configuration scope \u2612 parameter \u2610 general \u2612 steps \u2612 stages Resource references none","title":"source"},{"location":"steps/mtaBuild/#target","text":"The folder for the generated MTAR file. If the parameter has been provided, the MTAR file is saved in the root of the folder provided by the argument. back to overview Scope Details Aliases - Type string Mandatory no Default ./ Secret no Configuration scope \u2612 parameter \u2610 general \u2612 steps \u2612 stages Resource references none","title":"target"},{"location":"steps/mtaBuild/#verbose","text":"verbose output back to overview Scope Details Aliases - Type bool Mandatory no Default false Possible values - true - false Secret no Configuration scope \u2612 parameter \u2612 general \u2612 steps \u2612 stages Resource references none","title":"verbose"},{"location":"steps/mtaBuild/#version","text":"Version of the mtar artifact back to overview Scope Details Aliases artifactVersion Type string Mandatory no Default $PIPER_version (if set) Secret no Configuration scope \u2612 parameter \u2610 general \u2612 steps \u2612 stages Resource references commonPipelineEnvironment : reference to: artifactVersion","title":"version"},{"location":"steps/mtaBuild/#side-effects","text":"The file name of the resulting archive is written to the commonPipelineEnvironment with variable name mtarFileName .","title":"Side effects"},{"location":"steps/mtaBuild/#exceptions","text":"AbortException : If there is an invalid buildTarget . If there is no key ID inside the mta.yaml file.","title":"Exceptions"},{"location":"steps/mtaBuild/#example","text":"dir ( '/path/to/FioriApp' ){ mtaBuild script: this , buildTarget: 'NEO' } def mtarFilePath = commonPipelineEnvironment . getMtarFilePath ()","title":"Example"},{"location":"steps/multicloudDeploy/","text":"multicloudDeploy \u00b6 Parameters \u00b6 name mandatory default possible values cfCreateServices no cfTargets no [] enableZeroDowntimeDeployment no false neoTargets no [] parallelExecution no false preDeploymentHook no script yes source no cfCreateServices - Defines Cloud Foundry service instances to create as part of the deployment. This is a list of objects with the following properties each: - apiEndpoint - credentialsId - serviceManifest - manifestVariablesFiles - org - space cfTargets - Defines the targets to deploy on Cloud Foundry. enableZeroDowntimeDeployment - Defines the deployment type. neoTargets - Defines the targets to deploy on neo. parallelExecution - Executes the deployments in parallel. preDeploymentHook - Closure which is executed before calling the deployment steps. script - The common script environment of the Jenkinsfile running. Typically the reference to the script calling the pipeline step is provided with the this parameter, as in script: this . This allows the function to access the commonPipelineEnvironment for retrieving, e.g. configuration parameters. source - The source file to deploy to SAP BTP. Step configuration \u00b6 We recommend to define values of step parameters via config.yml file . In following sections of the config.yml the configuration is possible: parameter general step/stage cfCreateServices X cfTargets X X enableZeroDowntimeDeployment X neoTargets X X parallelExecution X X preDeploymentHook script source Dependencies \u00b6 The step depends on the following Jenkins plugins credentials-binding docker kubernetes lockable-resources pipeline-utility-steps workflow-basic-steps workflow-cps workflow-cps-global-lib workflow-durable-task-step The kubernetes plugin is only used if running in a kubernetes environment. Transitive dependencies are omitted. The list might be incomplete. Consider using the ppiper/jenkins-master docker image. This images comes with preinstalled plugins. Examples \u00b6 multicloudDeploy ( script: script , cfTargets: [[ apiEndpoint: 'https://test.server.com' , appName: 'cfAppName' , credentialsId: 'cfCredentialsId' , manifest: 'cfManifest' , org: 'cfOrg' , space: 'cfSpace' ]], neoTargets: [[ credentialsId: 'my-credentials-id' , host: hana . example . org , account: 'trialuser1' ]], enableZeroDowntimeDeployment: 'true' )","title":"multicloudDeploy"},{"location":"steps/multicloudDeploy/#multiclouddeploy","text":"","title":"multicloudDeploy"},{"location":"steps/multicloudDeploy/#parameters","text":"name mandatory default possible values cfCreateServices no cfTargets no [] enableZeroDowntimeDeployment no false neoTargets no [] parallelExecution no false preDeploymentHook no script yes source no cfCreateServices - Defines Cloud Foundry service instances to create as part of the deployment. This is a list of objects with the following properties each: - apiEndpoint - credentialsId - serviceManifest - manifestVariablesFiles - org - space cfTargets - Defines the targets to deploy on Cloud Foundry. enableZeroDowntimeDeployment - Defines the deployment type. neoTargets - Defines the targets to deploy on neo. parallelExecution - Executes the deployments in parallel. preDeploymentHook - Closure which is executed before calling the deployment steps. script - The common script environment of the Jenkinsfile running. Typically the reference to the script calling the pipeline step is provided with the this parameter, as in script: this . This allows the function to access the commonPipelineEnvironment for retrieving, e.g. configuration parameters. source - The source file to deploy to SAP BTP.","title":"Parameters"},{"location":"steps/multicloudDeploy/#step-configuration","text":"We recommend to define values of step parameters via config.yml file . In following sections of the config.yml the configuration is possible: parameter general step/stage cfCreateServices X cfTargets X X enableZeroDowntimeDeployment X neoTargets X X parallelExecution X X preDeploymentHook script source","title":"Step configuration"},{"location":"steps/multicloudDeploy/#dependencies","text":"The step depends on the following Jenkins plugins credentials-binding docker kubernetes lockable-resources pipeline-utility-steps workflow-basic-steps workflow-cps workflow-cps-global-lib workflow-durable-task-step The kubernetes plugin is only used if running in a kubernetes environment. Transitive dependencies are omitted. The list might be incomplete. Consider using the ppiper/jenkins-master docker image. This images comes with preinstalled plugins.","title":"Dependencies"},{"location":"steps/multicloudDeploy/#examples","text":"multicloudDeploy ( script: script , cfTargets: [[ apiEndpoint: 'https://test.server.com' , appName: 'cfAppName' , credentialsId: 'cfCredentialsId' , manifest: 'cfManifest' , org: 'cfOrg' , space: 'cfSpace' ]], neoTargets: [[ credentialsId: 'my-credentials-id' , host: hana . example . org , account: 'trialuser1' ]], enableZeroDowntimeDeployment: 'true' )","title":"Examples"},{"location":"steps/neoDeploy/","text":"neoDeploy \u00b6 Description \u00b6 Deploys an Application to SAP BTP (SAP CP) using the SAP BTP Console Client (Neo Java Web SDK). Prerequisites \u00b6 SAP BTP account - the account to where the application is deployed. To deploy MTA ( deployMode: mta ) an over existing Java application, free Java Quota of at least 1 is required, which means that this will not work on trial accounts. SAP BTP user for deployment - a user with deployment permissions in the given account. Jenkins credentials for deployment - must be configured in Jenkins credentials with a dedicated Id. Neo Java Web SDK 3.39.10 or compatible version - can be downloaded from Maven Central . This step is capable of triggering the neo deploy tool provided inside a docker image. We provide docker image ppiper/neo-cli . neo.sh needs to be contained in path, e.g by adding a symbolic link to /usr/local/bin . Java 8 or compatible version - needed by the Neo-Java-Web-SDK . Java environment needs to be properly configured (JAVA_HOME, java exectutable contained in path). Parameters \u00b6 name mandatory default possible values deployMode no mta 'mta', 'warParams', 'warPropertiesFile' dockerEnvVars no dockerImage no ppiper/neo-cli dockerOptions no extensions no [] mavenDeploymentModule no . neo/account for deployMode=warParams neo/application for deployMode=warParams neo/azDistribution no 1, 2 neo/credentialType no UsernamePassword neo/credentialsId no CI_CREDENTIALS_ID neo/environment no neo/host for deployMode=warParams neo/invalidateCache no true , false neo/oauthCredentialId no neo/portalLandscape no cloudnwcportal neo/propertiesFile for deployMode=warPropertiesFile neo/runtime for deployMode=warParams neo/runtimeVersion for deployMode=warParams neo/siteId no neo/size no lite neo/vmArguments no script yes source yes warAction no deploy 'deploy', 'rolling-update' deployMode - The deployment mode which should be used. Available options are: 'mta' - default, 'warParams' - deploying WAR file and passing all the deployment parameters via the function call, * 'warPropertiesFile' - deploying WAR file and putting all the deployment parameters in a .properties file. dockerEnvVars - Environment variables to set in the container, e.g. [http_proxy: 'proxy:8080']. dockerImage - Name of the docker image that should be used. Configure with empty value to execute the command directly on the Jenkins system (not using a container). Omit to use the default image (cf. default_pipeline_environment.yml ) Overwrite to use custom Docker image. dockerOptions - Docker only: Docker options to be set when starting the container (List or String). extensions - Extension files. Provided to the neo command via parameter --extensions ( -e ). Only valid for deploy mode mta . mavenDeploymentModule - Path to the maven module which contains the deployment artifact. neo/account - The SAP BTP account to deploy to. neo/application - Name of the application you want to manage, configure, or deploy. neo/azDistribution - Availability zone of BTP NEO into which the application is deployed. neo/credentialType - The Jenkins credential of type 'UsernamePassword' or 'SecretFile'. neo/credentialsId - The Jenkins credentials containing either user and password (UsernamePassword type credential) or json containing clientId, client secret and oauth service url (SecretFile type credential) used for SAP CP deployment. neo/environment - Map of environment variables in the form of KEY: VALUE. neo/host - The SAP BTP host to deploy to. neo/invalidateCache - Boolean to enable/disable invalidating the cache after deployment. neo/oauthCredentialId - UsernamePassword type credential containing SAP BTP OAuth client ID and client secret. neo/portalLandscape - Portal landscape region subscribed to in SAP BTP. neo/propertiesFile - The path to the .properties file in which all necessary deployment properties for the application are defined. neo/runtime - Name of SAP BTP application runtime. neo/runtimeVersion - Version of SAP BTP application runtime. neo/siteId - Site ID of the SAP Fiori Launchpad containing the SAP Fiori app. If not set, the cache of the default site, as defined in the Portal service, is invalidated. neo/size - Compute unit (VM) size. Acceptable values: lite, pro, prem, prem-plus. neo/vmArguments - String of VM arguments passed to the JVM. script - The common script environment of the Jenkinsfile running. Typically the reference to the script calling the pipeline step is provided with the this parameter, as in script: this . This allows the function to access the commonPipelineEnvironment for retrieving, e.g. configuration parameters. source - The path to the archive for deployment to SAP CP. If not provided the following defaults are used based on the deployMode: 'mta' - The mtarFilePath from common pipeline environment is used instead. 'warParams' and 'warPropertiesFile' - The following template will be used \" /target/ . \" warAction - Action mode when using WAR file mode. Available options are deploy (default) and rolling-update which performs update of an application without downtime in one go. Step configuration \u00b6 We recommend to define values of step parameters via config.yml file . In following sections of the config.yml the configuration is possible: parameter general step/stage deployMode X dockerEnvVars X dockerImage X dockerOptions X extensions X mavenDeploymentModule X neo/account X X neo/application X X neo/azDistribution X X neo/credentialType X X neo/credentialsId X X neo/environment X X neo/host X X neo/invalidateCache X X neo/oauthCredentialId X X neo/portalLandscape X X neo/propertiesFile X X neo/runtime X X neo/runtimeVersion X X neo/siteId X X neo/size X X neo/vmArguments X X script source X warAction Dependencies \u00b6 The step depends on the following Jenkins plugins credentials-binding docker kubernetes lockable-resources pipeline-utility-steps workflow-basic-steps workflow-cps-global-lib workflow-durable-task-step The kubernetes plugin is only used if running in a kubernetes environment. Transitive dependencies are omitted. The list might be incomplete. Consider using the ppiper/jenkins-master docker image. This images comes with preinstalled plugins. Side effects \u00b6 none Exceptions \u00b6 Exception : If source is not provided. If propertiesFile is not provided (when using 'WAR_PROPERTIESFILE' deployment mode). If application is not provided (when using 'WAR_PARAMS' deployment mode). If runtime is not provided (when using 'WAR_PARAMS' deployment mode). If runtimeVersion is not provided (when using 'WAR_PARAMS' deployment mode). AbortException : If neo-java-web-sdk is not properly installed. CredentialNotFoundException : If the credentials cannot be resolved. Example \u00b6 neoDeploy script: this , source: 'path/to/archiveFile.mtar' , neo: [ credentialsId: 'my-credentials-id' , host: hana . example . org ] Example configuration: steps : <...> neoDeploy : deployMode : mta neo : account : <myDeployAccount> host : hana.example.org Example for invalidating the cache \u00b6 Set the parameter invalidateCache to true to clean up the cache of an SAP Fiori launchpad site by refreshing the content of HTML5 applications deployed in it. Note: This section is only applicable for HTML5 applications accessed through an SAP Fiori launchpad site. Setting this parameter to true requires additional configuration: Create an OAuth credential \u00b6 In your subaccount, choose OAuth . In the Subscription field, select the portal landscape to which you would like to subscribe, for example, portal/nwc or portal/sandbox . From the drop-down menu in the Authorization Grant field, choose Client Credentials . In the Secret field, enter a user-defined password and save your changes. In Jenkins, create new username/password credentials. As username, use the client ID and as password, use the client secret. Configure the site ID \u00b6 When you're logged in to the portal service, you can retrieve the site ID. Either configure it in your configuration file or set the site as default through the Site Directory tile. If you don't set it as default, configure the parameter siteId as follows in your configuration file: steps : <...> neoDeploy : neo : account : <myDeployAccount> host : hana.example.org credentialsId : 'my-credentials-id' invalidateCache : true portalLandscape : \"cloudnwcportal\" oauthCredentialId : <OAUTH_CREDENTIAL_ID> siteId : <PORTAL_SITE_ID> # not required, if the default site is already set in the portal service (SAP BTP)","title":"neoDeploy"},{"location":"steps/neoDeploy/#neodeploy","text":"","title":"neoDeploy"},{"location":"steps/neoDeploy/#description","text":"Deploys an Application to SAP BTP (SAP CP) using the SAP BTP Console Client (Neo Java Web SDK).","title":"Description"},{"location":"steps/neoDeploy/#prerequisites","text":"SAP BTP account - the account to where the application is deployed. To deploy MTA ( deployMode: mta ) an over existing Java application, free Java Quota of at least 1 is required, which means that this will not work on trial accounts. SAP BTP user for deployment - a user with deployment permissions in the given account. Jenkins credentials for deployment - must be configured in Jenkins credentials with a dedicated Id. Neo Java Web SDK 3.39.10 or compatible version - can be downloaded from Maven Central . This step is capable of triggering the neo deploy tool provided inside a docker image. We provide docker image ppiper/neo-cli . neo.sh needs to be contained in path, e.g by adding a symbolic link to /usr/local/bin . Java 8 or compatible version - needed by the Neo-Java-Web-SDK . Java environment needs to be properly configured (JAVA_HOME, java exectutable contained in path).","title":"Prerequisites"},{"location":"steps/neoDeploy/#parameters","text":"name mandatory default possible values deployMode no mta 'mta', 'warParams', 'warPropertiesFile' dockerEnvVars no dockerImage no ppiper/neo-cli dockerOptions no extensions no [] mavenDeploymentModule no . neo/account for deployMode=warParams neo/application for deployMode=warParams neo/azDistribution no 1, 2 neo/credentialType no UsernamePassword neo/credentialsId no CI_CREDENTIALS_ID neo/environment no neo/host for deployMode=warParams neo/invalidateCache no true , false neo/oauthCredentialId no neo/portalLandscape no cloudnwcportal neo/propertiesFile for deployMode=warPropertiesFile neo/runtime for deployMode=warParams neo/runtimeVersion for deployMode=warParams neo/siteId no neo/size no lite neo/vmArguments no script yes source yes warAction no deploy 'deploy', 'rolling-update' deployMode - The deployment mode which should be used. Available options are: 'mta' - default, 'warParams' - deploying WAR file and passing all the deployment parameters via the function call, * 'warPropertiesFile' - deploying WAR file and putting all the deployment parameters in a .properties file. dockerEnvVars - Environment variables to set in the container, e.g. [http_proxy: 'proxy:8080']. dockerImage - Name of the docker image that should be used. Configure with empty value to execute the command directly on the Jenkins system (not using a container). Omit to use the default image (cf. default_pipeline_environment.yml ) Overwrite to use custom Docker image. dockerOptions - Docker only: Docker options to be set when starting the container (List or String). extensions - Extension files. Provided to the neo command via parameter --extensions ( -e ). Only valid for deploy mode mta . mavenDeploymentModule - Path to the maven module which contains the deployment artifact. neo/account - The SAP BTP account to deploy to. neo/application - Name of the application you want to manage, configure, or deploy. neo/azDistribution - Availability zone of BTP NEO into which the application is deployed. neo/credentialType - The Jenkins credential of type 'UsernamePassword' or 'SecretFile'. neo/credentialsId - The Jenkins credentials containing either user and password (UsernamePassword type credential) or json containing clientId, client secret and oauth service url (SecretFile type credential) used for SAP CP deployment. neo/environment - Map of environment variables in the form of KEY: VALUE. neo/host - The SAP BTP host to deploy to. neo/invalidateCache - Boolean to enable/disable invalidating the cache after deployment. neo/oauthCredentialId - UsernamePassword type credential containing SAP BTP OAuth client ID and client secret. neo/portalLandscape - Portal landscape region subscribed to in SAP BTP. neo/propertiesFile - The path to the .properties file in which all necessary deployment properties for the application are defined. neo/runtime - Name of SAP BTP application runtime. neo/runtimeVersion - Version of SAP BTP application runtime. neo/siteId - Site ID of the SAP Fiori Launchpad containing the SAP Fiori app. If not set, the cache of the default site, as defined in the Portal service, is invalidated. neo/size - Compute unit (VM) size. Acceptable values: lite, pro, prem, prem-plus. neo/vmArguments - String of VM arguments passed to the JVM. script - The common script environment of the Jenkinsfile running. Typically the reference to the script calling the pipeline step is provided with the this parameter, as in script: this . This allows the function to access the commonPipelineEnvironment for retrieving, e.g. configuration parameters. source - The path to the archive for deployment to SAP CP. If not provided the following defaults are used based on the deployMode: 'mta' - The mtarFilePath from common pipeline environment is used instead. 'warParams' and 'warPropertiesFile' - The following template will be used \" /target/ . \" warAction - Action mode when using WAR file mode. Available options are deploy (default) and rolling-update which performs update of an application without downtime in one go.","title":"Parameters"},{"location":"steps/neoDeploy/#step-configuration","text":"We recommend to define values of step parameters via config.yml file . In following sections of the config.yml the configuration is possible: parameter general step/stage deployMode X dockerEnvVars X dockerImage X dockerOptions X extensions X mavenDeploymentModule X neo/account X X neo/application X X neo/azDistribution X X neo/credentialType X X neo/credentialsId X X neo/environment X X neo/host X X neo/invalidateCache X X neo/oauthCredentialId X X neo/portalLandscape X X neo/propertiesFile X X neo/runtime X X neo/runtimeVersion X X neo/siteId X X neo/size X X neo/vmArguments X X script source X warAction","title":"Step configuration"},{"location":"steps/neoDeploy/#dependencies","text":"The step depends on the following Jenkins plugins credentials-binding docker kubernetes lockable-resources pipeline-utility-steps workflow-basic-steps workflow-cps-global-lib workflow-durable-task-step The kubernetes plugin is only used if running in a kubernetes environment. Transitive dependencies are omitted. The list might be incomplete. Consider using the ppiper/jenkins-master docker image. This images comes with preinstalled plugins.","title":"Dependencies"},{"location":"steps/neoDeploy/#side-effects","text":"none","title":"Side effects"},{"location":"steps/neoDeploy/#exceptions","text":"Exception : If source is not provided. If propertiesFile is not provided (when using 'WAR_PROPERTIESFILE' deployment mode). If application is not provided (when using 'WAR_PARAMS' deployment mode). If runtime is not provided (when using 'WAR_PARAMS' deployment mode). If runtimeVersion is not provided (when using 'WAR_PARAMS' deployment mode). AbortException : If neo-java-web-sdk is not properly installed. CredentialNotFoundException : If the credentials cannot be resolved.","title":"Exceptions"},{"location":"steps/neoDeploy/#example","text":"neoDeploy script: this , source: 'path/to/archiveFile.mtar' , neo: [ credentialsId: 'my-credentials-id' , host: hana . example . org ] Example configuration: steps : <...> neoDeploy : deployMode : mta neo : account : <myDeployAccount> host : hana.example.org","title":"Example"},{"location":"steps/neoDeploy/#example-for-invalidating-the-cache","text":"Set the parameter invalidateCache to true to clean up the cache of an SAP Fiori launchpad site by refreshing the content of HTML5 applications deployed in it. Note: This section is only applicable for HTML5 applications accessed through an SAP Fiori launchpad site. Setting this parameter to true requires additional configuration:","title":"Example for invalidating the cache"},{"location":"steps/neoDeploy/#create-an-oauth-credential","text":"In your subaccount, choose OAuth . In the Subscription field, select the portal landscape to which you would like to subscribe, for example, portal/nwc or portal/sandbox . From the drop-down menu in the Authorization Grant field, choose Client Credentials . In the Secret field, enter a user-defined password and save your changes. In Jenkins, create new username/password credentials. As username, use the client ID and as password, use the client secret.","title":"Create an OAuth credential"},{"location":"steps/neoDeploy/#configure-the-site-id","text":"When you're logged in to the portal service, you can retrieve the site ID. Either configure it in your configuration file or set the site as default through the Site Directory tile. If you don't set it as default, configure the parameter siteId as follows in your configuration file: steps : <...> neoDeploy : neo : account : <myDeployAccount> host : hana.example.org credentialsId : 'my-credentials-id' invalidateCache : true portalLandscape : \"cloudnwcportal\" oauthCredentialId : <OAUTH_CREDENTIAL_ID> siteId : <PORTAL_SITE_ID> # not required, if the default site is already set in the portal service (SAP BTP)","title":"Configure the site ID"},{"location":"steps/newmanExecute/","text":"newmanExecute \u00b6 Installs newman and executes specified newman collections. Deprecation notice Details of changes after the step migration to a golang can be found below . Description \u00b6 This script executes Postman tests from a collection via the Newman command line tool. Usage \u00b6 We recommend to define values of step parameters via .pipeline/config.yml file . In this case, calling the step is essentially reduced to defining the step name. Calling the step can be done either in an orchestrator specific way (e.g. via a Jenkins library step) or on the command line. Jenkins Command Line library ( 'piper-lib-os' ) newmanExecute script: this piper newmanExecute Outputs \u00b6 Output type Details influx measurement step_data newman Prerequisites \u00b6 prepared Postman with a test collection Parameters \u00b6 Overview - Step \u00b6 Name Mandatory Additional information script (yes) reference to Jenkins main pipeline script cfAppsWithSecrets no failOnError no newmanCollection no newmanEnvironment no newmanGlobals no newmanInstallCommand no newmanRunCommand no runOptions no verbose no activates debug output Overview - Execution Environment \u00b6 Orchestrator-specific only These parameters are relevant for orchestrator usage and not considered when using the command line option. Name Mandatory Additional information containerCommand no containerShell no dockerEnvVars no dockerImage no dockerName no dockerOptions no dockerPullImage no dockerVolumeBind no dockerWorkspace no stashContent no Details \u00b6 cfAppsWithSecrets \u00b6 Define name array of cloud foundry apps deployed for which secrets (clientid and clientsecret) will be appended to the newman command that overrides the environment json entries (--env-var =${clientid} & --env-var =${clientsecret}) back to overview Scope Details Aliases - Type []string Mandatory no Default $PIPER_cfAppsWithSecrets (if set) Secret no Configuration scope \u2612 parameter \u2610 general \u2612 steps \u2612 stages Resource references none containerCommand \u00b6 Jenkins-specific: Used for proper environment setup. Kubernetes only: Allows to specify start command for container created with dockerImage parameter to overwrite Piper default (/usr/bin/tail -f /dev/null). back to overview Scope Details Aliases - Type string Mandatory no Default Secret no Configuration scope \u2612 parameter \u2612 general \u2612 steps \u2612 stages Resource references none containerShell \u00b6 Jenkins-specific: Used for proper environment setup. Allows to specify the shell to be executed for container with containerName. back to overview Scope Details Aliases - Type string Mandatory no Default Secret no Configuration scope \u2612 parameter \u2612 general \u2612 steps \u2612 stages Resource references none dockerEnvVars \u00b6 Environment variables to set in the container, e.g. [http_proxy: \"proxy:8080\"]. back to overview Scope Details Aliases - Type map[string]string Mandatory no Default Secret no Configuration scope \u2612 parameter \u2612 general \u2612 steps \u2612 stages Resource references none dockerImage \u00b6 Name of the docker image that should be used. If empty, Docker is not used and the command is executed directly on the Jenkins system. back to overview Scope Details Aliases - Type string Mandatory no Default node:22-bookworm Secret no Configuration scope \u2612 parameter \u2612 general \u2612 steps \u2612 stages Resource references none dockerName \u00b6 Kubernetes only: Name of the container launching dockerImage. SideCar only: Name of the container in local network. back to overview Scope Details Aliases - Type string Mandatory no Default newman Secret no Configuration scope \u2612 parameter \u2612 general \u2612 steps \u2612 stages Resource references none dockerOptions \u00b6 Docker options to be set when starting the container. back to overview Scope Details Aliases - Type []string Mandatory no Default Secret no Configuration scope \u2612 parameter \u2612 general \u2612 steps \u2612 stages Resource references none dockerPullImage \u00b6 Set this to 'false' to bypass a docker image pull. Useful during development process. Allows testing of images which are available in the local registry only. back to overview Scope Details Aliases - Type bool Mandatory no Default true Possible values - true - false Secret no Configuration scope \u2612 parameter \u2612 general \u2612 steps \u2612 stages Resource references none dockerVolumeBind \u00b6 Jenkins-specific: Used for proper environment setup. Volumes that should be mounted into the docker container. back to overview Scope Details Aliases - Type map[string]string Mandatory no Default Secret no Configuration scope \u2612 parameter \u2612 general \u2612 steps \u2612 stages Resource references none dockerWorkspace \u00b6 Jenkins-specific: Used for proper environment setup. Kubernetes only: Specifies a dedicated user home directory for the container which will be passed as value for environment variable HOME . back to overview Scope Details Aliases - Type string Mandatory no Default /home/node Secret no Configuration scope \u2612 parameter \u2612 general \u2612 steps \u2612 stages Resource references none failOnError \u00b6 Defines the behavior, in case tests fail. back to overview Scope Details Aliases - Type bool Mandatory no Default true Possible values - true - false Secret no Configuration scope \u2612 parameter \u2610 general \u2612 steps \u2612 stages Resource references none newmanCollection \u00b6 The test collection that should be executed. This could also be a file pattern. back to overview Scope Details Aliases - Type string Mandatory no Default **/*.postman_collection.json Secret no Configuration scope \u2612 parameter \u2610 general \u2612 steps \u2612 stages Resource references none newmanEnvironment \u00b6 see also Newman docs back to overview Scope Details Aliases - Type string Mandatory no Default $PIPER_newmanEnvironment (if set) Secret no Configuration scope \u2612 parameter \u2610 general \u2612 steps \u2612 stages Resource references none newmanGlobals \u00b6 see also Newman docs back to overview Scope Details Aliases - Type string Mandatory no Default $PIPER_newmanGlobals (if set) Secret no Configuration scope \u2612 parameter \u2610 general \u2612 steps \u2612 stages Resource references none newmanInstallCommand \u00b6 The shell command that will be executed inside the docker container to install Newman. back to overview Scope Details Aliases - Type string Mandatory no Default npm install newman newman-reporter-html --global --quiet Secret no Configuration scope \u2612 parameter \u2610 general \u2612 steps \u2612 stages Resource references none newmanRunCommand \u00b6 +++ Deprecated +++ Please use list parameter runOptions instead. back to overview Scope Details Aliases - Type string Mandatory no Default $PIPER_newmanRunCommand (if set) Secret no Configuration scope \u2612 parameter \u2610 general \u2612 steps \u2612 stages Resource references none runOptions \u00b6 The newman command that will be executed inside the docker container. Env vars can be passed via template as in \"{{getenv MY_ENV_VAR}}\". back to overview Scope Details Aliases - Type []string Mandatory no Default - run - {{.NewmanCollection}} - --reporters - cli,junit,html - --reporter-junit-export - target/newman/TEST-{{.CollectionDisplayName}}.xml - --reporter-html-export - target/newman/TEST-{{.CollectionDisplayName}}.html Secret no Configuration scope \u2612 parameter \u2610 general \u2612 steps \u2612 stages Resource references none script \u00b6 The common script environment of the Jenkinsfile running. Typically the reference to the script calling the pipeline step is provided with the this parameter, as in script: this . This allows the function to access the commonPipelineEnvironment for retrieving, e.g. configuration parameters. back to overview Scope Details Aliases - Type Jenkins Script Mandatory yes Default Secret no Configuration scope \u2610 parameter \u2610 general \u2610 steps \u2610 stages Resource references none stashContent \u00b6 Jenkins-specific: Used for proper environment setup. Specific stashes that should be considered for the step execution. back to overview Scope Details Aliases - Type []string Mandatory no Default - tests Secret no Configuration scope \u2612 parameter \u2612 general \u2612 steps \u2612 stages Resource references none verbose \u00b6 verbose output back to overview Scope Details Aliases - Type bool Mandatory no Default false Possible values - true - false Secret no Configuration scope \u2612 parameter \u2612 general \u2612 steps \u2612 stages Resource references none Side effects \u00b6 Step uses dockerExecute inside. Exceptions \u00b6 The step has been migrated into a golang-based step. The following release notes belong to the new implementation: newmanRunCommand : The parameter newmanRunCommand is deprecated by now and is replaced by list parameter runOptions . For backward compatibility, the newmanRunCommand parameter will still be used if configured. Nevertheless, using this parameter can break the step in some cases, e.g. when spaces are used in single quoted strings like spaces in file names. Also Groovy Templating is deprecated and now replaced by Go Templating. The example show the required changes: # deprecated groovy default newmanRunCommand : \"run '${config.newmanCollection}' --environment '${config.newmanEnvironment}' --globals '${config.newmanGlobals}' --reporters junit,html --reporter-junit-export 'target/newman/TEST-${collectionDisplayName}.xml' --reporter-html-export 'target/newman/TEST-${collectionDisplayName}.html'\" # new run options using golang templating runOptions : [ \"run\" , \"{{.NewmanCollection}}\" , \"--environment\" , \"{{.Config.NewmanEnvironment}}\" , \"--globals\" , \"{{.Config.NewmanGlobals}}\" , \"--reporters\" , \"junit,html\" , \"--reporter-junit-export\" , \"target/newman/TEST-{{.CollectionDisplayName}}.xml\" , \"--reporter-html-export\" , \"target/newman/TEST-{{.CollectionDisplayName}}.html\" ] If the following error occurs during the pipeline run, the newmanRunCommand is probably still configured with the deprecated groovy template syntax: info newmanExecute - error: collection could not be loaded info newmanExecute - unable to read data from file \"${config.newmanCollection}\" info newmanExecute - ENOENT: no such file or directory, open '${config.newmanCollection}' newmanEnvironment and newmanGlobals : Referencing newmanEnvironment and newmanGlobals in the runOptions is redundant now. Both parameters are added to runCommand using newmanEnvironment and newmanGlobals from config when configured and not referenced by go templating using \"--environment\", \"{{.Config.NewmanEnvironment}}\" and \"--globals\", \"{{.Config.NewmanGlobals}}\" as shown above. Passing Credentials \u00b6 If you need to pass additional credentials you can do so via environment variables. This is done via templating in the runOptions , as per this example: runOptions : [ \"run\" , \"{{.NewmanCollection}}\" , \"--environment\" , \"{{.Config.NewmanEnvironment}}\" , \"--env-var\" , \"username={{getenv \\\"PIPER_TESTCREDENTIAL_USERNAME\\\"}}\" , \"--env-var\" , \"password={{getenv \\\"PIPER_TESTCREDENTIAL_PASSWORD\\\"}}\" ] Example \u00b6 Pipeline step: newmanExecute script: this This step should be used in combination with testsPublishResults : newmanExecute script: this , failOnError: false testsPublishResults script: this , junit: [ pattern: '**/newman/TEST-*.xml' ]","title":"newmanExecute"},{"location":"steps/newmanExecute/#newmanexecute","text":"Installs newman and executes specified newman collections. Deprecation notice Details of changes after the step migration to a golang can be found below .","title":"newmanExecute"},{"location":"steps/newmanExecute/#description","text":"This script executes Postman tests from a collection via the Newman command line tool.","title":"Description"},{"location":"steps/newmanExecute/#usage","text":"We recommend to define values of step parameters via .pipeline/config.yml file . In this case, calling the step is essentially reduced to defining the step name. Calling the step can be done either in an orchestrator specific way (e.g. via a Jenkins library step) or on the command line. Jenkins Command Line library ( 'piper-lib-os' ) newmanExecute script: this piper newmanExecute","title":"Usage"},{"location":"steps/newmanExecute/#outputs","text":"Output type Details influx measurement step_data newman","title":"Outputs"},{"location":"steps/newmanExecute/#prerequisites","text":"prepared Postman with a test collection","title":"Prerequisites"},{"location":"steps/newmanExecute/#parameters","text":"","title":"Parameters"},{"location":"steps/newmanExecute/#overview-step","text":"Name Mandatory Additional information script (yes) reference to Jenkins main pipeline script cfAppsWithSecrets no failOnError no newmanCollection no newmanEnvironment no newmanGlobals no newmanInstallCommand no newmanRunCommand no runOptions no verbose no activates debug output","title":"Overview - Step"},{"location":"steps/newmanExecute/#overview-execution-environment","text":"Orchestrator-specific only These parameters are relevant for orchestrator usage and not considered when using the command line option. Name Mandatory Additional information containerCommand no containerShell no dockerEnvVars no dockerImage no dockerName no dockerOptions no dockerPullImage no dockerVolumeBind no dockerWorkspace no stashContent no","title":"Overview - Execution Environment"},{"location":"steps/newmanExecute/#details","text":"","title":"Details"},{"location":"steps/newmanExecute/#cfappswithsecrets","text":"Define name array of cloud foundry apps deployed for which secrets (clientid and clientsecret) will be appended to the newman command that overrides the environment json entries (--env-var =${clientid} & --env-var =${clientsecret}) back to overview Scope Details Aliases - Type []string Mandatory no Default $PIPER_cfAppsWithSecrets (if set) Secret no Configuration scope \u2612 parameter \u2610 general \u2612 steps \u2612 stages Resource references none","title":"cfAppsWithSecrets"},{"location":"steps/newmanExecute/#containercommand","text":"Jenkins-specific: Used for proper environment setup. Kubernetes only: Allows to specify start command for container created with dockerImage parameter to overwrite Piper default (/usr/bin/tail -f /dev/null). back to overview Scope Details Aliases - Type string Mandatory no Default Secret no Configuration scope \u2612 parameter \u2612 general \u2612 steps \u2612 stages Resource references none","title":"containerCommand"},{"location":"steps/newmanExecute/#containershell","text":"Jenkins-specific: Used for proper environment setup. Allows to specify the shell to be executed for container with containerName. back to overview Scope Details Aliases - Type string Mandatory no Default Secret no Configuration scope \u2612 parameter \u2612 general \u2612 steps \u2612 stages Resource references none","title":"containerShell"},{"location":"steps/newmanExecute/#dockerenvvars","text":"Environment variables to set in the container, e.g. [http_proxy: \"proxy:8080\"]. back to overview Scope Details Aliases - Type map[string]string Mandatory no Default Secret no Configuration scope \u2612 parameter \u2612 general \u2612 steps \u2612 stages Resource references none","title":"dockerEnvVars"},{"location":"steps/newmanExecute/#dockerimage","text":"Name of the docker image that should be used. If empty, Docker is not used and the command is executed directly on the Jenkins system. back to overview Scope Details Aliases - Type string Mandatory no Default node:22-bookworm Secret no Configuration scope \u2612 parameter \u2612 general \u2612 steps \u2612 stages Resource references none","title":"dockerImage"},{"location":"steps/newmanExecute/#dockername","text":"Kubernetes only: Name of the container launching dockerImage. SideCar only: Name of the container in local network. back to overview Scope Details Aliases - Type string Mandatory no Default newman Secret no Configuration scope \u2612 parameter \u2612 general \u2612 steps \u2612 stages Resource references none","title":"dockerName"},{"location":"steps/newmanExecute/#dockeroptions","text":"Docker options to be set when starting the container. back to overview Scope Details Aliases - Type []string Mandatory no Default Secret no Configuration scope \u2612 parameter \u2612 general \u2612 steps \u2612 stages Resource references none","title":"dockerOptions"},{"location":"steps/newmanExecute/#dockerpullimage","text":"Set this to 'false' to bypass a docker image pull. Useful during development process. Allows testing of images which are available in the local registry only. back to overview Scope Details Aliases - Type bool Mandatory no Default true Possible values - true - false Secret no Configuration scope \u2612 parameter \u2612 general \u2612 steps \u2612 stages Resource references none","title":"dockerPullImage"},{"location":"steps/newmanExecute/#dockervolumebind","text":"Jenkins-specific: Used for proper environment setup. Volumes that should be mounted into the docker container. back to overview Scope Details Aliases - Type map[string]string Mandatory no Default Secret no Configuration scope \u2612 parameter \u2612 general \u2612 steps \u2612 stages Resource references none","title":"dockerVolumeBind"},{"location":"steps/newmanExecute/#dockerworkspace","text":"Jenkins-specific: Used for proper environment setup. Kubernetes only: Specifies a dedicated user home directory for the container which will be passed as value for environment variable HOME . back to overview Scope Details Aliases - Type string Mandatory no Default /home/node Secret no Configuration scope \u2612 parameter \u2612 general \u2612 steps \u2612 stages Resource references none","title":"dockerWorkspace"},{"location":"steps/newmanExecute/#failonerror","text":"Defines the behavior, in case tests fail. back to overview Scope Details Aliases - Type bool Mandatory no Default true Possible values - true - false Secret no Configuration scope \u2612 parameter \u2610 general \u2612 steps \u2612 stages Resource references none","title":"failOnError"},{"location":"steps/newmanExecute/#newmancollection","text":"The test collection that should be executed. This could also be a file pattern. back to overview Scope Details Aliases - Type string Mandatory no Default **/*.postman_collection.json Secret no Configuration scope \u2612 parameter \u2610 general \u2612 steps \u2612 stages Resource references none","title":"newmanCollection"},{"location":"steps/newmanExecute/#newmanenvironment","text":"see also Newman docs back to overview Scope Details Aliases - Type string Mandatory no Default $PIPER_newmanEnvironment (if set) Secret no Configuration scope \u2612 parameter \u2610 general \u2612 steps \u2612 stages Resource references none","title":"newmanEnvironment"},{"location":"steps/newmanExecute/#newmanglobals","text":"see also Newman docs back to overview Scope Details Aliases - Type string Mandatory no Default $PIPER_newmanGlobals (if set) Secret no Configuration scope \u2612 parameter \u2610 general \u2612 steps \u2612 stages Resource references none","title":"newmanGlobals"},{"location":"steps/newmanExecute/#newmaninstallcommand","text":"The shell command that will be executed inside the docker container to install Newman. back to overview Scope Details Aliases - Type string Mandatory no Default npm install newman newman-reporter-html --global --quiet Secret no Configuration scope \u2612 parameter \u2610 general \u2612 steps \u2612 stages Resource references none","title":"newmanInstallCommand"},{"location":"steps/newmanExecute/#newmanruncommand","text":"+++ Deprecated +++ Please use list parameter runOptions instead. back to overview Scope Details Aliases - Type string Mandatory no Default $PIPER_newmanRunCommand (if set) Secret no Configuration scope \u2612 parameter \u2610 general \u2612 steps \u2612 stages Resource references none","title":"newmanRunCommand"},{"location":"steps/newmanExecute/#runoptions","text":"The newman command that will be executed inside the docker container. Env vars can be passed via template as in \"{{getenv MY_ENV_VAR}}\". back to overview Scope Details Aliases - Type []string Mandatory no Default - run - {{.NewmanCollection}} - --reporters - cli,junit,html - --reporter-junit-export - target/newman/TEST-{{.CollectionDisplayName}}.xml - --reporter-html-export - target/newman/TEST-{{.CollectionDisplayName}}.html Secret no Configuration scope \u2612 parameter \u2610 general \u2612 steps \u2612 stages Resource references none","title":"runOptions"},{"location":"steps/newmanExecute/#script","text":"The common script environment of the Jenkinsfile running. Typically the reference to the script calling the pipeline step is provided with the this parameter, as in script: this . This allows the function to access the commonPipelineEnvironment for retrieving, e.g. configuration parameters. back to overview Scope Details Aliases - Type Jenkins Script Mandatory yes Default Secret no Configuration scope \u2610 parameter \u2610 general \u2610 steps \u2610 stages Resource references none","title":"script"},{"location":"steps/newmanExecute/#stashcontent","text":"Jenkins-specific: Used for proper environment setup. Specific stashes that should be considered for the step execution. back to overview Scope Details Aliases - Type []string Mandatory no Default - tests Secret no Configuration scope \u2612 parameter \u2612 general \u2612 steps \u2612 stages Resource references none","title":"stashContent"},{"location":"steps/newmanExecute/#verbose","text":"verbose output back to overview Scope Details Aliases - Type bool Mandatory no Default false Possible values - true - false Secret no Configuration scope \u2612 parameter \u2612 general \u2612 steps \u2612 stages Resource references none","title":"verbose"},{"location":"steps/newmanExecute/#side-effects","text":"Step uses dockerExecute inside.","title":"Side effects"},{"location":"steps/newmanExecute/#exceptions","text":"The step has been migrated into a golang-based step. The following release notes belong to the new implementation: newmanRunCommand : The parameter newmanRunCommand is deprecated by now and is replaced by list parameter runOptions . For backward compatibility, the newmanRunCommand parameter will still be used if configured. Nevertheless, using this parameter can break the step in some cases, e.g. when spaces are used in single quoted strings like spaces in file names. Also Groovy Templating is deprecated and now replaced by Go Templating. The example show the required changes: # deprecated groovy default newmanRunCommand : \"run '${config.newmanCollection}' --environment '${config.newmanEnvironment}' --globals '${config.newmanGlobals}' --reporters junit,html --reporter-junit-export 'target/newman/TEST-${collectionDisplayName}.xml' --reporter-html-export 'target/newman/TEST-${collectionDisplayName}.html'\" # new run options using golang templating runOptions : [ \"run\" , \"{{.NewmanCollection}}\" , \"--environment\" , \"{{.Config.NewmanEnvironment}}\" , \"--globals\" , \"{{.Config.NewmanGlobals}}\" , \"--reporters\" , \"junit,html\" , \"--reporter-junit-export\" , \"target/newman/TEST-{{.CollectionDisplayName}}.xml\" , \"--reporter-html-export\" , \"target/newman/TEST-{{.CollectionDisplayName}}.html\" ] If the following error occurs during the pipeline run, the newmanRunCommand is probably still configured with the deprecated groovy template syntax: info newmanExecute - error: collection could not be loaded info newmanExecute - unable to read data from file \"${config.newmanCollection}\" info newmanExecute - ENOENT: no such file or directory, open '${config.newmanCollection}' newmanEnvironment and newmanGlobals : Referencing newmanEnvironment and newmanGlobals in the runOptions is redundant now. Both parameters are added to runCommand using newmanEnvironment and newmanGlobals from config when configured and not referenced by go templating using \"--environment\", \"{{.Config.NewmanEnvironment}}\" and \"--globals\", \"{{.Config.NewmanGlobals}}\" as shown above.","title":"Exceptions"},{"location":"steps/newmanExecute/#passing-credentials","text":"If you need to pass additional credentials you can do so via environment variables. This is done via templating in the runOptions , as per this example: runOptions : [ \"run\" , \"{{.NewmanCollection}}\" , \"--environment\" , \"{{.Config.NewmanEnvironment}}\" , \"--env-var\" , \"username={{getenv \\\"PIPER_TESTCREDENTIAL_USERNAME\\\"}}\" , \"--env-var\" , \"password={{getenv \\\"PIPER_TESTCREDENTIAL_PASSWORD\\\"}}\" ]","title":"Passing Credentials"},{"location":"steps/newmanExecute/#example","text":"Pipeline step: newmanExecute script: this This step should be used in combination with testsPublishResults : newmanExecute script: this , failOnError: false testsPublishResults script: this , junit: [ pattern: '**/newman/TEST-*.xml' ]","title":"Example"},{"location":"steps/nexusUpload/","text":"nexusUpload \u00b6 Upload artifacts to Nexus Repository Manager Description \u00b6 Upload build artifacts to a Nexus Repository Manager. Supports MTA, npm and (multi-module) Maven projects. MTA files will be uploaded to a Maven repository. The uploaded file-type depends on your project structure and step configuration. To upload Maven projects, you need a pom.xml in the project root and set the mavenRepository option. To upload MTA projects, you need a mta.yaml in the project root and set the mavenRepository option. To upload npm projects, you need a package.json in the project root and set the npmRepository option. If the 'format' option is set, the 'URL' can contain the full path including the repository ID. Providing the 'npmRepository' or the 'mavenRepository' parameter(s) is not necessary. npm: Publishing npm projects makes use of npm's \"publish\" command. It requires a \"package.json\" file in the project's root directory which has \"version\" set and is not delared as \"private\". To find out what will be published, run \"npm publish --dry-run\" in the project's root folder. It will use your gitignore file to exclude the mached files from publishing. Note: npm's gitignore parser might yield different results from your git client, to ignore a \"foo\" directory globally use the glob pattern \"**/foo\". If an image for mavenExecute is configured, and npm packages are to be published, the image must have npm installed. Usage \u00b6 We recommend to define values of step parameters via .pipeline/config.yml file . In this case, calling the step is essentially reduced to defining the step name. Calling the step can be done either in an orchestrator specific way (e.g. via a Jenkins library step) or on the command line. Jenkins Command Line library ( 'piper-lib-os' ) nexusUpload script: this piper nexusUpload Parameters \u00b6 Overview - Step \u00b6 Name Mandatory Additional information script (yes) reference to Jenkins main pipeline script url yes artifactId no format no globalSettingsFile no groupId no m2Path no mavenRepository no npmRepository no password no pass via ENV or Jenkins credentials ( nexusCredentialsId ) username no pass via ENV or Jenkins credentials ( nexusCredentialsId ) verbose no activates debug output version no Overview - Execution Environment \u00b6 Orchestrator-specific only These parameters are relevant for orchestrator usage and not considered when using the command line option. Name Mandatory Additional information containerCommand no containerShell no dockerEnvVars no dockerImage no dockerName no dockerOptions no dockerPullImage no dockerVolumeBind no dockerWorkspace no stashContent no Details \u00b6 artifactId \u00b6 The artifact ID used for both the .mtar and mta.yaml files deployed for MTA projects, ignored for Maven. back to overview Scope Details Aliases - Type string Mandatory no Default $PIPER_artifactId (if set) Secret no Configuration scope \u2612 parameter \u2610 general \u2610 steps \u2610 stages Resource references none containerCommand \u00b6 Jenkins-specific: Used for proper environment setup. Kubernetes only: Allows to specify start command for container created with dockerImage parameter to overwrite Piper default (/usr/bin/tail -f /dev/null). back to overview Scope Details Aliases - Type string Mandatory no Default Secret no Configuration scope \u2612 parameter \u2612 general \u2612 steps \u2612 stages Resource references none containerShell \u00b6 Jenkins-specific: Used for proper environment setup. Allows to specify the shell to be executed for container with containerName. back to overview Scope Details Aliases - Type string Mandatory no Default Secret no Configuration scope \u2612 parameter \u2612 general \u2612 steps \u2612 stages Resource references none dockerEnvVars \u00b6 Environment variables to set in the container, e.g. [http_proxy: \"proxy:8080\"]. back to overview Scope Details Aliases - Type map[string]string Mandatory no Default Secret no Configuration scope \u2612 parameter \u2612 general \u2612 steps \u2612 stages Resource references none dockerImage \u00b6 Name of the docker image that should be used. If empty, Docker is not used and the command is executed directly on the Jenkins system. back to overview Scope Details Aliases - Type string Mandatory no Default devxci/mbtci-java11-node14 Secret no Configuration scope \u2612 parameter \u2612 general \u2612 steps \u2612 stages Resource references none dockerName \u00b6 Kubernetes only: Name of the container launching dockerImage. SideCar only: Name of the container in local network. back to overview Scope Details Aliases - Type string Mandatory no Default mvn-npm Secret no Configuration scope \u2612 parameter \u2612 general \u2612 steps \u2612 stages Resource references none dockerOptions \u00b6 Docker options to be set when starting the container. back to overview Scope Details Aliases - Type []string Mandatory no Default Secret no Configuration scope \u2612 parameter \u2612 general \u2612 steps \u2612 stages Resource references none dockerPullImage \u00b6 Set this to 'false' to bypass a docker image pull. Useful during development process. Allows testing of images which are available in the local registry only. back to overview Scope Details Aliases - Type bool Mandatory no Default true Possible values - true - false Secret no Configuration scope \u2612 parameter \u2612 general \u2612 steps \u2612 stages Resource references none dockerVolumeBind \u00b6 Jenkins-specific: Used for proper environment setup. Volumes that should be mounted into the docker container. back to overview Scope Details Aliases - Type map[string]string Mandatory no Default Secret no Configuration scope \u2612 parameter \u2612 general \u2612 steps \u2612 stages Resource references none dockerWorkspace \u00b6 Jenkins-specific: Used for proper environment setup. Kubernetes only: Specifies a dedicated user home directory for the container which will be passed as value for environment variable HOME . back to overview Scope Details Aliases - Type string Mandatory no Default Secret no Configuration scope \u2612 parameter \u2612 general \u2612 steps \u2612 stages Resource references none format \u00b6 The format/registry type. Currently supported are 'maven' and 'npm'. back to overview Scope Details Aliases - Type string Mandatory no Default maven Possible values - maven - npm Secret no Configuration scope \u2612 parameter \u2610 general \u2612 steps \u2612 stages Resource references commonPipelineEnvironment : reference to: custom/repositoryFormat globalSettingsFile \u00b6 Path to the mvn settings file that should be used as global settings file. back to overview Scope Details Aliases maven/globalSettingsFile Type string Mandatory no Default $PIPER_globalSettingsFile (if set) Secret no Configuration scope \u2612 parameter \u2612 general \u2612 steps \u2612 stages Resource references none groupId \u00b6 Group ID of the artifacts. Only used in MTA projects, ignored for Maven. back to overview Scope Details Aliases nexus/groupId Type string Mandatory no Default $PIPER_groupId (if set) Secret no Configuration scope \u2612 parameter \u2610 general \u2612 steps \u2612 stages Resource references none m2Path \u00b6 The path to the local .m2 directory, only used for Maven projects. back to overview Scope Details Aliases maven/m2Path Type string Mandatory no Default $PIPER_m2Path (if set) Secret no Configuration scope \u2612 parameter \u2612 general \u2612 steps \u2612 stages Resource references none mavenRepository \u00b6 Name of the nexus repository for Maven and MTA deployments. If this is not provided, Maven and MTA deployment is implicitly disabled. back to overview Scope Details Aliases - nexus/mavenRepository - nexus/repository ( deprecated ) Type string Mandatory no Default $PIPER_mavenRepository (if set) Secret no Configuration scope \u2612 parameter \u2610 general \u2612 steps \u2612 stages Resource references none npmRepository \u00b6 Name of the nexus repository for npm deployments. If this is not provided, npm deployment is implicitly disabled. back to overview Scope Details Aliases nexus/npmRepository Type string Mandatory no Default $PIPER_npmRepository (if set) Secret no Configuration scope \u2612 parameter \u2610 general \u2612 steps \u2612 stages Resource references none password \u00b6 Password for accessing the Nexus endpoint. back to overview Scope Details Aliases - Type string Mandatory no Default $PIPER_password (if set) Secret yes Configuration scope \u2612 parameter \u2610 general \u2610 steps \u2610 stages Resource references Jenkins credential id: id: nexusCredentialsId reference to: password commonPipelineEnvironment : reference to: custom/repositoryPassword script \u00b6 The common script environment of the Jenkinsfile running. Typically the reference to the script calling the pipeline step is provided with the this parameter, as in script: this . This allows the function to access the commonPipelineEnvironment for retrieving, e.g. configuration parameters. back to overview Scope Details Aliases - Type Jenkins Script Mandatory yes Default Secret no Configuration scope \u2610 parameter \u2610 general \u2610 steps \u2610 stages Resource references none stashContent \u00b6 Jenkins-specific: Used for proper environment setup. Specific stashes that should be considered for the step execution. back to overview Scope Details Aliases - Type []string Mandatory no Default - buildDescriptor - buildResult Secret no Configuration scope \u2612 parameter \u2612 general \u2612 steps \u2612 stages Resource references none url \u00b6 URL of the nexus. The scheme part of the URL will not be considered, because only http is supported. If the 'format' option is set, the 'URL' can contain the full path including the repository ID and providing the 'npmRepository' or the 'mavenRepository' parameter(s) is not necessary. back to overview Scope Details Aliases nexus/url Type string Mandatory yes Default $PIPER_url (if set) Secret no Configuration scope \u2612 parameter \u2610 general \u2612 steps \u2612 stages Resource references commonPipelineEnvironment : reference to: custom/repositoryUrl username \u00b6 Username for accessing the Nexus endpoint. back to overview Scope Details Aliases - Type string Mandatory no Default $PIPER_username (if set) Secret yes Configuration scope \u2612 parameter \u2610 general \u2610 steps \u2610 stages Resource references Jenkins credential id: id: nexusCredentialsId reference to: username commonPipelineEnvironment : reference to: custom/repositoryUsername verbose \u00b6 verbose output back to overview Scope Details Aliases - Type bool Mandatory no Default false Possible values - true - false Secret no Configuration scope \u2612 parameter \u2612 general \u2612 steps \u2612 stages Resource references none version \u00b6 The Nexus Repository Manager version. Currently supported are 'nexus2' and 'nexus3'. back to overview Scope Details Aliases nexus/version Type string Mandatory no Default nexus3 Possible values - nexus2 - nexus3 Secret no Configuration scope \u2612 parameter \u2610 general \u2612 steps \u2612 stages Resource references none nexusCredentialsId \u00b6 Jenkins 'Username with password' credentials ID containing the technical username/password credential for accessing the nexus endpoint. back to overview Scope Details Aliases nexus/credentialsId Type string Configuration scope \u2612 parameter \u2612 general \u2612 steps \u2612 stages","title":"nexusUpload"},{"location":"steps/nexusUpload/#nexusupload","text":"Upload artifacts to Nexus Repository Manager","title":"nexusUpload"},{"location":"steps/nexusUpload/#description","text":"Upload build artifacts to a Nexus Repository Manager. Supports MTA, npm and (multi-module) Maven projects. MTA files will be uploaded to a Maven repository. The uploaded file-type depends on your project structure and step configuration. To upload Maven projects, you need a pom.xml in the project root and set the mavenRepository option. To upload MTA projects, you need a mta.yaml in the project root and set the mavenRepository option. To upload npm projects, you need a package.json in the project root and set the npmRepository option. If the 'format' option is set, the 'URL' can contain the full path including the repository ID. Providing the 'npmRepository' or the 'mavenRepository' parameter(s) is not necessary. npm: Publishing npm projects makes use of npm's \"publish\" command. It requires a \"package.json\" file in the project's root directory which has \"version\" set and is not delared as \"private\". To find out what will be published, run \"npm publish --dry-run\" in the project's root folder. It will use your gitignore file to exclude the mached files from publishing. Note: npm's gitignore parser might yield different results from your git client, to ignore a \"foo\" directory globally use the glob pattern \"**/foo\". If an image for mavenExecute is configured, and npm packages are to be published, the image must have npm installed.","title":"Description"},{"location":"steps/nexusUpload/#usage","text":"We recommend to define values of step parameters via .pipeline/config.yml file . In this case, calling the step is essentially reduced to defining the step name. Calling the step can be done either in an orchestrator specific way (e.g. via a Jenkins library step) or on the command line. Jenkins Command Line library ( 'piper-lib-os' ) nexusUpload script: this piper nexusUpload","title":"Usage"},{"location":"steps/nexusUpload/#parameters","text":"","title":"Parameters"},{"location":"steps/nexusUpload/#overview-step","text":"Name Mandatory Additional information script (yes) reference to Jenkins main pipeline script url yes artifactId no format no globalSettingsFile no groupId no m2Path no mavenRepository no npmRepository no password no pass via ENV or Jenkins credentials ( nexusCredentialsId ) username no pass via ENV or Jenkins credentials ( nexusCredentialsId ) verbose no activates debug output version no","title":"Overview - Step"},{"location":"steps/nexusUpload/#overview-execution-environment","text":"Orchestrator-specific only These parameters are relevant for orchestrator usage and not considered when using the command line option. Name Mandatory Additional information containerCommand no containerShell no dockerEnvVars no dockerImage no dockerName no dockerOptions no dockerPullImage no dockerVolumeBind no dockerWorkspace no stashContent no","title":"Overview - Execution Environment"},{"location":"steps/nexusUpload/#details","text":"","title":"Details"},{"location":"steps/nexusUpload/#artifactid","text":"The artifact ID used for both the .mtar and mta.yaml files deployed for MTA projects, ignored for Maven. back to overview Scope Details Aliases - Type string Mandatory no Default $PIPER_artifactId (if set) Secret no Configuration scope \u2612 parameter \u2610 general \u2610 steps \u2610 stages Resource references none","title":"artifactId"},{"location":"steps/nexusUpload/#containercommand","text":"Jenkins-specific: Used for proper environment setup. Kubernetes only: Allows to specify start command for container created with dockerImage parameter to overwrite Piper default (/usr/bin/tail -f /dev/null). back to overview Scope Details Aliases - Type string Mandatory no Default Secret no Configuration scope \u2612 parameter \u2612 general \u2612 steps \u2612 stages Resource references none","title":"containerCommand"},{"location":"steps/nexusUpload/#containershell","text":"Jenkins-specific: Used for proper environment setup. Allows to specify the shell to be executed for container with containerName. back to overview Scope Details Aliases - Type string Mandatory no Default Secret no Configuration scope \u2612 parameter \u2612 general \u2612 steps \u2612 stages Resource references none","title":"containerShell"},{"location":"steps/nexusUpload/#dockerenvvars","text":"Environment variables to set in the container, e.g. [http_proxy: \"proxy:8080\"]. back to overview Scope Details Aliases - Type map[string]string Mandatory no Default Secret no Configuration scope \u2612 parameter \u2612 general \u2612 steps \u2612 stages Resource references none","title":"dockerEnvVars"},{"location":"steps/nexusUpload/#dockerimage","text":"Name of the docker image that should be used. If empty, Docker is not used and the command is executed directly on the Jenkins system. back to overview Scope Details Aliases - Type string Mandatory no Default devxci/mbtci-java11-node14 Secret no Configuration scope \u2612 parameter \u2612 general \u2612 steps \u2612 stages Resource references none","title":"dockerImage"},{"location":"steps/nexusUpload/#dockername","text":"Kubernetes only: Name of the container launching dockerImage. SideCar only: Name of the container in local network. back to overview Scope Details Aliases - Type string Mandatory no Default mvn-npm Secret no Configuration scope \u2612 parameter \u2612 general \u2612 steps \u2612 stages Resource references none","title":"dockerName"},{"location":"steps/nexusUpload/#dockeroptions","text":"Docker options to be set when starting the container. back to overview Scope Details Aliases - Type []string Mandatory no Default Secret no Configuration scope \u2612 parameter \u2612 general \u2612 steps \u2612 stages Resource references none","title":"dockerOptions"},{"location":"steps/nexusUpload/#dockerpullimage","text":"Set this to 'false' to bypass a docker image pull. Useful during development process. Allows testing of images which are available in the local registry only. back to overview Scope Details Aliases - Type bool Mandatory no Default true Possible values - true - false Secret no Configuration scope \u2612 parameter \u2612 general \u2612 steps \u2612 stages Resource references none","title":"dockerPullImage"},{"location":"steps/nexusUpload/#dockervolumebind","text":"Jenkins-specific: Used for proper environment setup. Volumes that should be mounted into the docker container. back to overview Scope Details Aliases - Type map[string]string Mandatory no Default Secret no Configuration scope \u2612 parameter \u2612 general \u2612 steps \u2612 stages Resource references none","title":"dockerVolumeBind"},{"location":"steps/nexusUpload/#dockerworkspace","text":"Jenkins-specific: Used for proper environment setup. Kubernetes only: Specifies a dedicated user home directory for the container which will be passed as value for environment variable HOME . back to overview Scope Details Aliases - Type string Mandatory no Default Secret no Configuration scope \u2612 parameter \u2612 general \u2612 steps \u2612 stages Resource references none","title":"dockerWorkspace"},{"location":"steps/nexusUpload/#format","text":"The format/registry type. Currently supported are 'maven' and 'npm'. back to overview Scope Details Aliases - Type string Mandatory no Default maven Possible values - maven - npm Secret no Configuration scope \u2612 parameter \u2610 general \u2612 steps \u2612 stages Resource references commonPipelineEnvironment : reference to: custom/repositoryFormat","title":"format"},{"location":"steps/nexusUpload/#globalsettingsfile","text":"Path to the mvn settings file that should be used as global settings file. back to overview Scope Details Aliases maven/globalSettingsFile Type string Mandatory no Default $PIPER_globalSettingsFile (if set) Secret no Configuration scope \u2612 parameter \u2612 general \u2612 steps \u2612 stages Resource references none","title":"globalSettingsFile"},{"location":"steps/nexusUpload/#groupid","text":"Group ID of the artifacts. Only used in MTA projects, ignored for Maven. back to overview Scope Details Aliases nexus/groupId Type string Mandatory no Default $PIPER_groupId (if set) Secret no Configuration scope \u2612 parameter \u2610 general \u2612 steps \u2612 stages Resource references none","title":"groupId"},{"location":"steps/nexusUpload/#m2path","text":"The path to the local .m2 directory, only used for Maven projects. back to overview Scope Details Aliases maven/m2Path Type string Mandatory no Default $PIPER_m2Path (if set) Secret no Configuration scope \u2612 parameter \u2612 general \u2612 steps \u2612 stages Resource references none","title":"m2Path"},{"location":"steps/nexusUpload/#mavenrepository","text":"Name of the nexus repository for Maven and MTA deployments. If this is not provided, Maven and MTA deployment is implicitly disabled. back to overview Scope Details Aliases - nexus/mavenRepository - nexus/repository ( deprecated ) Type string Mandatory no Default $PIPER_mavenRepository (if set) Secret no Configuration scope \u2612 parameter \u2610 general \u2612 steps \u2612 stages Resource references none","title":"mavenRepository"},{"location":"steps/nexusUpload/#npmrepository","text":"Name of the nexus repository for npm deployments. If this is not provided, npm deployment is implicitly disabled. back to overview Scope Details Aliases nexus/npmRepository Type string Mandatory no Default $PIPER_npmRepository (if set) Secret no Configuration scope \u2612 parameter \u2610 general \u2612 steps \u2612 stages Resource references none","title":"npmRepository"},{"location":"steps/nexusUpload/#password","text":"Password for accessing the Nexus endpoint. back to overview Scope Details Aliases - Type string Mandatory no Default $PIPER_password (if set) Secret yes Configuration scope \u2612 parameter \u2610 general \u2610 steps \u2610 stages Resource references Jenkins credential id: id: nexusCredentialsId reference to: password commonPipelineEnvironment : reference to: custom/repositoryPassword","title":"password"},{"location":"steps/nexusUpload/#script","text":"The common script environment of the Jenkinsfile running. Typically the reference to the script calling the pipeline step is provided with the this parameter, as in script: this . This allows the function to access the commonPipelineEnvironment for retrieving, e.g. configuration parameters. back to overview Scope Details Aliases - Type Jenkins Script Mandatory yes Default Secret no Configuration scope \u2610 parameter \u2610 general \u2610 steps \u2610 stages Resource references none","title":"script"},{"location":"steps/nexusUpload/#stashcontent","text":"Jenkins-specific: Used for proper environment setup. Specific stashes that should be considered for the step execution. back to overview Scope Details Aliases - Type []string Mandatory no Default - buildDescriptor - buildResult Secret no Configuration scope \u2612 parameter \u2612 general \u2612 steps \u2612 stages Resource references none","title":"stashContent"},{"location":"steps/nexusUpload/#url","text":"URL of the nexus. The scheme part of the URL will not be considered, because only http is supported. If the 'format' option is set, the 'URL' can contain the full path including the repository ID and providing the 'npmRepository' or the 'mavenRepository' parameter(s) is not necessary. back to overview Scope Details Aliases nexus/url Type string Mandatory yes Default $PIPER_url (if set) Secret no Configuration scope \u2612 parameter \u2610 general \u2612 steps \u2612 stages Resource references commonPipelineEnvironment : reference to: custom/repositoryUrl","title":"url"},{"location":"steps/nexusUpload/#username","text":"Username for accessing the Nexus endpoint. back to overview Scope Details Aliases - Type string Mandatory no Default $PIPER_username (if set) Secret yes Configuration scope \u2612 parameter \u2610 general \u2610 steps \u2610 stages Resource references Jenkins credential id: id: nexusCredentialsId reference to: username commonPipelineEnvironment : reference to: custom/repositoryUsername","title":"username"},{"location":"steps/nexusUpload/#verbose","text":"verbose output back to overview Scope Details Aliases - Type bool Mandatory no Default false Possible values - true - false Secret no Configuration scope \u2612 parameter \u2612 general \u2612 steps \u2612 stages Resource references none","title":"verbose"},{"location":"steps/nexusUpload/#version","text":"The Nexus Repository Manager version. Currently supported are 'nexus2' and 'nexus3'. back to overview Scope Details Aliases nexus/version Type string Mandatory no Default nexus3 Possible values - nexus2 - nexus3 Secret no Configuration scope \u2612 parameter \u2610 general \u2612 steps \u2612 stages Resource references none","title":"version"},{"location":"steps/nexusUpload/#nexuscredentialsid","text":"Jenkins 'Username with password' credentials ID containing the technical username/password credential for accessing the nexus endpoint. back to overview Scope Details Aliases nexus/credentialsId Type string Configuration scope \u2612 parameter \u2612 general \u2612 steps \u2612 stages","title":"nexusCredentialsId"},{"location":"steps/npmExecute/","text":"npmExecute \u00b6 Parameters \u00b6 name mandatory default possible values defaultNpmRegistry no dockerEnvVars no dockerImage no node:lts-bookworm dockerOptions no dockerWorkspace no npmCommand no script yes defaultNpmRegistry - URL of default NPM registry dockerEnvVars - Environment variables to set in the container, e.g. [http_proxy: 'proxy:8080']. dockerImage - Name of the docker image that should be used, in which node should be installed and configured. dockerOptions - Docker options to be set when starting the container. dockerWorkspace - Kubernetes only: Specifies a dedicated user home directory for the container which will be passed as value for environment variable HOME . npmCommand - Which NPM command should be executed. script - The common script environment of the Jenkinsfile running. Typically the reference to the script calling the pipeline step is provided with the this parameter, as in script: this . This allows the function to access the commonPipelineEnvironment for retrieving, e.g. configuration parameters. Step configuration \u00b6 We recommend to define values of step parameters via config.yml file . In following sections of the config.yml the configuration is possible: parameter general step/stage defaultNpmRegistry X dockerEnvVars X dockerImage X dockerOptions X dockerWorkspace X npmCommand X script Dependencies \u00b6 The step depends on the following Jenkins plugins docker kubernetes pipeline-utility-steps workflow-basic-steps workflow-cps-global-lib workflow-durable-task-step The kubernetes plugin is only used if running in a kubernetes environment. Transitive dependencies are omitted. The list might be incomplete. Consider using the ppiper/jenkins-master docker image. This images comes with preinstalled plugins. Exceptions \u00b6 None Examples \u00b6 npmExecute script: this , dockerImage: 'node:8-stretch' , npmCommand: 'run build'","title":"npmExecute"},{"location":"steps/npmExecute/#npmexecute","text":"","title":"npmExecute"},{"location":"steps/npmExecute/#parameters","text":"name mandatory default possible values defaultNpmRegistry no dockerEnvVars no dockerImage no node:lts-bookworm dockerOptions no dockerWorkspace no npmCommand no script yes defaultNpmRegistry - URL of default NPM registry dockerEnvVars - Environment variables to set in the container, e.g. [http_proxy: 'proxy:8080']. dockerImage - Name of the docker image that should be used, in which node should be installed and configured. dockerOptions - Docker options to be set when starting the container. dockerWorkspace - Kubernetes only: Specifies a dedicated user home directory for the container which will be passed as value for environment variable HOME . npmCommand - Which NPM command should be executed. script - The common script environment of the Jenkinsfile running. Typically the reference to the script calling the pipeline step is provided with the this parameter, as in script: this . This allows the function to access the commonPipelineEnvironment for retrieving, e.g. configuration parameters.","title":"Parameters"},{"location":"steps/npmExecute/#step-configuration","text":"We recommend to define values of step parameters via config.yml file . In following sections of the config.yml the configuration is possible: parameter general step/stage defaultNpmRegistry X dockerEnvVars X dockerImage X dockerOptions X dockerWorkspace X npmCommand X script","title":"Step configuration"},{"location":"steps/npmExecute/#dependencies","text":"The step depends on the following Jenkins plugins docker kubernetes pipeline-utility-steps workflow-basic-steps workflow-cps-global-lib workflow-durable-task-step The kubernetes plugin is only used if running in a kubernetes environment. Transitive dependencies are omitted. The list might be incomplete. Consider using the ppiper/jenkins-master docker image. This images comes with preinstalled plugins.","title":"Dependencies"},{"location":"steps/npmExecute/#exceptions","text":"None","title":"Exceptions"},{"location":"steps/npmExecute/#examples","text":"npmExecute script: this , dockerImage: 'node:8-stretch' , npmCommand: 'run build'","title":"Examples"},{"location":"steps/npmExecuteEndToEndTests/","text":"npmExecuteEndToEndTests \u00b6 Description \u00b6 Executes end to end tests by running the npm script configured via the runScript property. Parameters \u00b6 name mandatory default possible values appUrls no baseUrl no buildDescriptorExcludeList no credentialsId no dockerImage no onlyRunInProductiveBranch no true , false parallelExecution no productiveBranch no master runScript no ci-e2e script yes wdi5 no true , false appUrls - The URLs under which the app is available after deployment. Each element of appUrls must be a map containing a property url, an optional property credentialId, and an optional property parameters. The optional property parameters can be used to pass additional parameters to the end-to-end test deployment reachable via the given application URL. These parameters must be a list of strings, where each string corresponds to one element of the parameters. For example, if the parameter --tag scenario1 should be passed to the test, specify parameters: [\"--tag\", \"scenario1\"]. These parameters are appended to the npm command during execution. baseUrl - Base URL of the application to be tested buildDescriptorExcludeList - List of build descriptors and therefore modules to exclude from execution of the npm scripts. The elements of the list can either be a path to the build descriptor or a pattern. credentialsId - Credentials to access the application to be tested dockerImage - Docker image on which end to end tests should be executed onlyRunInProductiveBranch - Boolean to indicate whether the step should only be executed in the productive branch or not. parallelExecution - Executes the deployments in parallel. productiveBranch - The branch used as productive branch, defaults to master. runScript - Script to be executed from package.json. Defaults to ci-e2e . script - The common script environment of the Jenkinsfile running. Typically the reference to the script calling the pipeline step is provided with the this parameter, as in script: this . This allows the function to access the commonPipelineEnvironment for retrieving, e.g. configuration parameters. wdi5 - Distinguish if these are wdi5 tests. If set to true wdi5_username and wdi5_password environment variables are used to enable autologin . Step configuration \u00b6 We recommend to define values of step parameters via config.yml file . In following sections of the config.yml the configuration is possible: parameter general step/stage appUrls X baseUrl X buildDescriptorExcludeList X credentialsId X dockerImage X onlyRunInProductiveBranch X parallelExecution X X productiveBranch X X runScript X script wdi5 X Examples \u00b6 Passing credentials \u00b6 When running acceptance tests in a real environment, authentication will be enabled in most cases. WDI5 includes features to automatically perform the login . For this, if the step parameter wdi5 is set to true , the provided basic auth credential ( credentialsId ) are mapped to the environment variables wdi5_username and wdi5_password .","title":"npmExecuteEndToEndTests"},{"location":"steps/npmExecuteEndToEndTests/#npmexecuteendtoendtests","text":"","title":"npmExecuteEndToEndTests"},{"location":"steps/npmExecuteEndToEndTests/#description","text":"Executes end to end tests by running the npm script configured via the runScript property.","title":"Description"},{"location":"steps/npmExecuteEndToEndTests/#parameters","text":"name mandatory default possible values appUrls no baseUrl no buildDescriptorExcludeList no credentialsId no dockerImage no onlyRunInProductiveBranch no true , false parallelExecution no productiveBranch no master runScript no ci-e2e script yes wdi5 no true , false appUrls - The URLs under which the app is available after deployment. Each element of appUrls must be a map containing a property url, an optional property credentialId, and an optional property parameters. The optional property parameters can be used to pass additional parameters to the end-to-end test deployment reachable via the given application URL. These parameters must be a list of strings, where each string corresponds to one element of the parameters. For example, if the parameter --tag scenario1 should be passed to the test, specify parameters: [\"--tag\", \"scenario1\"]. These parameters are appended to the npm command during execution. baseUrl - Base URL of the application to be tested buildDescriptorExcludeList - List of build descriptors and therefore modules to exclude from execution of the npm scripts. The elements of the list can either be a path to the build descriptor or a pattern. credentialsId - Credentials to access the application to be tested dockerImage - Docker image on which end to end tests should be executed onlyRunInProductiveBranch - Boolean to indicate whether the step should only be executed in the productive branch or not. parallelExecution - Executes the deployments in parallel. productiveBranch - The branch used as productive branch, defaults to master. runScript - Script to be executed from package.json. Defaults to ci-e2e . script - The common script environment of the Jenkinsfile running. Typically the reference to the script calling the pipeline step is provided with the this parameter, as in script: this . This allows the function to access the commonPipelineEnvironment for retrieving, e.g. configuration parameters. wdi5 - Distinguish if these are wdi5 tests. If set to true wdi5_username and wdi5_password environment variables are used to enable autologin .","title":"Parameters"},{"location":"steps/npmExecuteEndToEndTests/#step-configuration","text":"We recommend to define values of step parameters via config.yml file . In following sections of the config.yml the configuration is possible: parameter general step/stage appUrls X baseUrl X buildDescriptorExcludeList X credentialsId X dockerImage X onlyRunInProductiveBranch X parallelExecution X X productiveBranch X X runScript X script wdi5 X","title":"Step configuration"},{"location":"steps/npmExecuteEndToEndTests/#examples","text":"","title":"Examples"},{"location":"steps/npmExecuteEndToEndTests/#passing-credentials","text":"When running acceptance tests in a real environment, authentication will be enabled in most cases. WDI5 includes features to automatically perform the login . For this, if the step parameter wdi5 is set to true , the provided basic auth credential ( credentialsId ) are mapped to the environment variables wdi5_username and wdi5_password .","title":"Passing credentials"},{"location":"steps/npmExecuteLint/","text":"npmExecuteLint \u00b6 Execute ci-lint script on all npm packages in a project or execute default linting Description \u00b6 Execute ci-lint script for all package json files, if they implement the script. If no ci-lint script is defined, either use ESLint configurations present in the project or use the provided general purpose configuration to run ESLint. Usage \u00b6 We recommend to define values of step parameters via .pipeline/config.yml file . In this case, calling the step is essentially reduced to defining the step name. Calling the step can be done either in an orchestrator specific way (e.g. via a Jenkins library step) or on the command line. Jenkins Command Line library ( 'piper-lib-os' ) npmExecuteLint script: this piper npmExecuteLint Parameters \u00b6 Overview - Step \u00b6 Name Mandatory Additional information script (yes) reference to Jenkins main pipeline script defaultNpmRegistry no failOnError no install no outputFileName no outputFormat no runScript no verbose no activates debug output Overview - Execution Environment \u00b6 Orchestrator-specific only These parameters are relevant for orchestrator usage and not considered when using the command line option. Name Mandatory Additional information containerCommand no containerShell no dockerEnvVars no dockerImage no dockerName no dockerOptions no dockerPullImage no dockerVolumeBind no dockerWorkspace no Details \u00b6 containerCommand \u00b6 Jenkins-specific: Used for proper environment setup. Kubernetes only: Allows to specify start command for container created with dockerImage parameter to overwrite Piper default (/usr/bin/tail -f /dev/null). back to overview Scope Details Aliases - Type string Mandatory no Default Secret no Configuration scope \u2612 parameter \u2612 general \u2612 steps \u2612 stages Resource references none containerShell \u00b6 Jenkins-specific: Used for proper environment setup. Allows to specify the shell to be executed for container with containerName. back to overview Scope Details Aliases - Type string Mandatory no Default Secret no Configuration scope \u2612 parameter \u2612 general \u2612 steps \u2612 stages Resource references none defaultNpmRegistry \u00b6 URL of the npm registry to use. Defaults to https://registry.npmjs.org/ back to overview Scope Details Aliases npm/defaultNpmRegistry Type string Mandatory no Default $PIPER_defaultNpmRegistry (if set) Secret no Configuration scope \u2612 parameter \u2612 general \u2612 steps \u2612 stages Resource references none dockerEnvVars \u00b6 Environment variables to set in the container, e.g. [http_proxy: \"proxy:8080\"]. back to overview Scope Details Aliases - Type map[string]string Mandatory no Default Secret no Configuration scope \u2612 parameter \u2612 general \u2612 steps \u2612 stages Resource references none dockerImage \u00b6 Name of the docker image that should be used. If empty, Docker is not used and the command is executed directly on the Jenkins system. back to overview Scope Details Aliases - Type string Mandatory no Default node:22-bookworm Secret no Configuration scope \u2612 parameter \u2612 general \u2612 steps \u2612 stages Resource references none dockerName \u00b6 Kubernetes only: Name of the container launching dockerImage. SideCar only: Name of the container in local network. back to overview Scope Details Aliases - Type string Mandatory no Default node Secret no Configuration scope \u2612 parameter \u2612 general \u2612 steps \u2612 stages Resource references none dockerOptions \u00b6 Docker options to be set when starting the container. back to overview Scope Details Aliases - Type []string Mandatory no Default Secret no Configuration scope \u2612 parameter \u2612 general \u2612 steps \u2612 stages Resource references none dockerPullImage \u00b6 Set this to 'false' to bypass a docker image pull. Useful during development process. Allows testing of images which are available in the local registry only. back to overview Scope Details Aliases - Type bool Mandatory no Default true Possible values - true - false Secret no Configuration scope \u2612 parameter \u2612 general \u2612 steps \u2612 stages Resource references none dockerVolumeBind \u00b6 Jenkins-specific: Used for proper environment setup. Volumes that should be mounted into the docker container. back to overview Scope Details Aliases - Type map[string]string Mandatory no Default Secret no Configuration scope \u2612 parameter \u2612 general \u2612 steps \u2612 stages Resource references none dockerWorkspace \u00b6 Jenkins-specific: Used for proper environment setup. Kubernetes only: Specifies a dedicated user home directory for the container which will be passed as value for environment variable HOME . back to overview Scope Details Aliases - Type string Mandatory no Default Secret no Configuration scope \u2612 parameter \u2612 general \u2612 steps \u2612 stages Resource references none failOnError \u00b6 Defines the behavior in case linting errors are found. back to overview Scope Details Aliases - Type bool Mandatory no Default false Possible values - true - false Secret no Configuration scope \u2612 parameter \u2610 general \u2612 steps \u2612 stages Resource references none install \u00b6 Run npm install or similar commands depending on the project structure. back to overview Scope Details Aliases - Type bool Mandatory no Default false Possible values - true - false Secret no Configuration scope \u2612 parameter \u2610 general \u2612 steps \u2612 stages Resource references none outputFileName \u00b6 name of the output file. There might be a 'N_' prefix where 'N' is a number. When the empty string is provided, we will print to console back to overview Scope Details Aliases npm/outputFormat Type string Mandatory no Default defaultlint.xml Secret no Configuration scope \u2612 parameter \u2612 general \u2612 steps \u2612 stages Resource references none outputFormat \u00b6 eslint output format, e.g. stylish, checkstyle back to overview Scope Details Aliases npm/outputFormat Type string Mandatory no Default checkstyle Secret no Configuration scope \u2612 parameter \u2612 general \u2612 steps \u2612 stages Resource references none runScript \u00b6 List of additional run scripts to execute from package.json. back to overview Scope Details Aliases - Type string Mandatory no Default ci-lint Secret no Configuration scope \u2612 parameter \u2610 general \u2612 steps \u2612 stages Resource references none script \u00b6 The common script environment of the Jenkinsfile running. Typically the reference to the script calling the pipeline step is provided with the this parameter, as in script: this . This allows the function to access the commonPipelineEnvironment for retrieving, e.g. configuration parameters. back to overview Scope Details Aliases - Type Jenkins Script Mandatory yes Default Secret no Configuration scope \u2610 parameter \u2610 general \u2610 steps \u2610 stages Resource references none verbose \u00b6 verbose output back to overview Scope Details Aliases - Type bool Mandatory no Default false Possible values - true - false Secret no Configuration scope \u2612 parameter \u2612 general \u2612 steps \u2612 stages Resource references none","title":"npmExecuteLint"},{"location":"steps/npmExecuteLint/#npmexecutelint","text":"Execute ci-lint script on all npm packages in a project or execute default linting","title":"npmExecuteLint"},{"location":"steps/npmExecuteLint/#description","text":"Execute ci-lint script for all package json files, if they implement the script. If no ci-lint script is defined, either use ESLint configurations present in the project or use the provided general purpose configuration to run ESLint.","title":"Description"},{"location":"steps/npmExecuteLint/#usage","text":"We recommend to define values of step parameters via .pipeline/config.yml file . In this case, calling the step is essentially reduced to defining the step name. Calling the step can be done either in an orchestrator specific way (e.g. via a Jenkins library step) or on the command line. Jenkins Command Line library ( 'piper-lib-os' ) npmExecuteLint script: this piper npmExecuteLint","title":"Usage"},{"location":"steps/npmExecuteLint/#parameters","text":"","title":"Parameters"},{"location":"steps/npmExecuteLint/#overview-step","text":"Name Mandatory Additional information script (yes) reference to Jenkins main pipeline script defaultNpmRegistry no failOnError no install no outputFileName no outputFormat no runScript no verbose no activates debug output","title":"Overview - Step"},{"location":"steps/npmExecuteLint/#overview-execution-environment","text":"Orchestrator-specific only These parameters are relevant for orchestrator usage and not considered when using the command line option. Name Mandatory Additional information containerCommand no containerShell no dockerEnvVars no dockerImage no dockerName no dockerOptions no dockerPullImage no dockerVolumeBind no dockerWorkspace no","title":"Overview - Execution Environment"},{"location":"steps/npmExecuteLint/#details","text":"","title":"Details"},{"location":"steps/npmExecuteLint/#containercommand","text":"Jenkins-specific: Used for proper environment setup. Kubernetes only: Allows to specify start command for container created with dockerImage parameter to overwrite Piper default (/usr/bin/tail -f /dev/null). back to overview Scope Details Aliases - Type string Mandatory no Default Secret no Configuration scope \u2612 parameter \u2612 general \u2612 steps \u2612 stages Resource references none","title":"containerCommand"},{"location":"steps/npmExecuteLint/#containershell","text":"Jenkins-specific: Used for proper environment setup. Allows to specify the shell to be executed for container with containerName. back to overview Scope Details Aliases - Type string Mandatory no Default Secret no Configuration scope \u2612 parameter \u2612 general \u2612 steps \u2612 stages Resource references none","title":"containerShell"},{"location":"steps/npmExecuteLint/#defaultnpmregistry","text":"URL of the npm registry to use. Defaults to https://registry.npmjs.org/ back to overview Scope Details Aliases npm/defaultNpmRegistry Type string Mandatory no Default $PIPER_defaultNpmRegistry (if set) Secret no Configuration scope \u2612 parameter \u2612 general \u2612 steps \u2612 stages Resource references none","title":"defaultNpmRegistry"},{"location":"steps/npmExecuteLint/#dockerenvvars","text":"Environment variables to set in the container, e.g. [http_proxy: \"proxy:8080\"]. back to overview Scope Details Aliases - Type map[string]string Mandatory no Default Secret no Configuration scope \u2612 parameter \u2612 general \u2612 steps \u2612 stages Resource references none","title":"dockerEnvVars"},{"location":"steps/npmExecuteLint/#dockerimage","text":"Name of the docker image that should be used. If empty, Docker is not used and the command is executed directly on the Jenkins system. back to overview Scope Details Aliases - Type string Mandatory no Default node:22-bookworm Secret no Configuration scope \u2612 parameter \u2612 general \u2612 steps \u2612 stages Resource references none","title":"dockerImage"},{"location":"steps/npmExecuteLint/#dockername","text":"Kubernetes only: Name of the container launching dockerImage. SideCar only: Name of the container in local network. back to overview Scope Details Aliases - Type string Mandatory no Default node Secret no Configuration scope \u2612 parameter \u2612 general \u2612 steps \u2612 stages Resource references none","title":"dockerName"},{"location":"steps/npmExecuteLint/#dockeroptions","text":"Docker options to be set when starting the container. back to overview Scope Details Aliases - Type []string Mandatory no Default Secret no Configuration scope \u2612 parameter \u2612 general \u2612 steps \u2612 stages Resource references none","title":"dockerOptions"},{"location":"steps/npmExecuteLint/#dockerpullimage","text":"Set this to 'false' to bypass a docker image pull. Useful during development process. Allows testing of images which are available in the local registry only. back to overview Scope Details Aliases - Type bool Mandatory no Default true Possible values - true - false Secret no Configuration scope \u2612 parameter \u2612 general \u2612 steps \u2612 stages Resource references none","title":"dockerPullImage"},{"location":"steps/npmExecuteLint/#dockervolumebind","text":"Jenkins-specific: Used for proper environment setup. Volumes that should be mounted into the docker container. back to overview Scope Details Aliases - Type map[string]string Mandatory no Default Secret no Configuration scope \u2612 parameter \u2612 general \u2612 steps \u2612 stages Resource references none","title":"dockerVolumeBind"},{"location":"steps/npmExecuteLint/#dockerworkspace","text":"Jenkins-specific: Used for proper environment setup. Kubernetes only: Specifies a dedicated user home directory for the container which will be passed as value for environment variable HOME . back to overview Scope Details Aliases - Type string Mandatory no Default Secret no Configuration scope \u2612 parameter \u2612 general \u2612 steps \u2612 stages Resource references none","title":"dockerWorkspace"},{"location":"steps/npmExecuteLint/#failonerror","text":"Defines the behavior in case linting errors are found. back to overview Scope Details Aliases - Type bool Mandatory no Default false Possible values - true - false Secret no Configuration scope \u2612 parameter \u2610 general \u2612 steps \u2612 stages Resource references none","title":"failOnError"},{"location":"steps/npmExecuteLint/#install","text":"Run npm install or similar commands depending on the project structure. back to overview Scope Details Aliases - Type bool Mandatory no Default false Possible values - true - false Secret no Configuration scope \u2612 parameter \u2610 general \u2612 steps \u2612 stages Resource references none","title":"install"},{"location":"steps/npmExecuteLint/#outputfilename","text":"name of the output file. There might be a 'N_' prefix where 'N' is a number. When the empty string is provided, we will print to console back to overview Scope Details Aliases npm/outputFormat Type string Mandatory no Default defaultlint.xml Secret no Configuration scope \u2612 parameter \u2612 general \u2612 steps \u2612 stages Resource references none","title":"outputFileName"},{"location":"steps/npmExecuteLint/#outputformat","text":"eslint output format, e.g. stylish, checkstyle back to overview Scope Details Aliases npm/outputFormat Type string Mandatory no Default checkstyle Secret no Configuration scope \u2612 parameter \u2612 general \u2612 steps \u2612 stages Resource references none","title":"outputFormat"},{"location":"steps/npmExecuteLint/#runscript","text":"List of additional run scripts to execute from package.json. back to overview Scope Details Aliases - Type string Mandatory no Default ci-lint Secret no Configuration scope \u2612 parameter \u2610 general \u2612 steps \u2612 stages Resource references none","title":"runScript"},{"location":"steps/npmExecuteLint/#script","text":"The common script environment of the Jenkinsfile running. Typically the reference to the script calling the pipeline step is provided with the this parameter, as in script: this . This allows the function to access the commonPipelineEnvironment for retrieving, e.g. configuration parameters. back to overview Scope Details Aliases - Type Jenkins Script Mandatory yes Default Secret no Configuration scope \u2610 parameter \u2610 general \u2610 steps \u2610 stages Resource references none","title":"script"},{"location":"steps/npmExecuteLint/#verbose","text":"verbose output back to overview Scope Details Aliases - Type bool Mandatory no Default false Possible values - true - false Secret no Configuration scope \u2612 parameter \u2612 general \u2612 steps \u2612 stages Resource references none","title":"verbose"},{"location":"steps/npmExecuteScripts/","text":"npmExecuteScripts \u00b6 Handles JavaScript dependency installation via npm, yarn or pnpm and basic npm commands. Description \u00b6 Lock file detection: \u00b6 If package-lock.json is found \u2192 runs npm ci If yarn.lock.json is found \u2192 runs yarn install --frozen-lockfile If pnpm-lock.yaml is found \u2192 runs pnpm install --frozen-lockfile If no lock file is found \u2192 defaults to npm install and continues execution Only the install command uses the detected package manager (npm, yarn, or pnpm). All other commands (e.g., run , pack , publish ) are executed via the npm CLI, regardless of which lock file is detected. Rationale: In the Piper environment, using the npm CLI for non-install commands provides sufficient functionality without requiring additional CLI dependencies. Supporting yarn or pnpm for these commands was deemed unnecessary due to lack of added benefit. If your project contains multiple package.json files (i.e., multi module projects), install command will be run in every directory where the package.json file is found. One can use buildDescriptorList or buildDescriptorExcludeList (more details below) to override the default behaviour. pnpm multi-module support: \u00b6 pnpm multi-module projects are supported when each package has its own pnpm-lock.yaml file. Workspace-based pnpm projects are not yet supported. pnpm and running tests. \u00b6 When pnpm is installed, it is placed in ./tmp/node_modules/.bin/pnpm , and some dependency files under ./tmp/ may include test files. If your test runner uses a broad glob pattern (such as **/*.test.js ), it might unintentionally pick up test files from ./tmp/** . To avoid this, exclude ./tmp/** from your test execution patterns. For best results, use more specific glob patterns for running tests, such as src/**/*.test.js , to ensure only your intended test files are executed. Build with private dependencies from a repository \u00b6 If your build has scoped/unscoped dependencies from a private repository you can include a .npmrc into the source code repository as below (replace the @privateScope:registry value(s) with a valid private repo url) : @privateScope:registry=https://private.repository.com/ //private.repository.com/:username=${PIPER_VAULTCREDENTIAL_USER} //private.repository.com/:_password=${PIPER_VAULTCREDENTIAL_PASSWORD_BASE64} //private.repository.com/:always-auth=true registry=https://registry.npmjs.org PIPER_VAULTCREDENTIAL_USER and PIPER_VAULTCREDENTIAL_PASSWORD_BASE64 (Base64 encoded password) are the username and password for the private repository and are exposed are environment variables that must be present in the environment where the Piper step runs or alternatively can be created using : vault general purpose credentials Usage \u00b6 We recommend to define values of step parameters via .pipeline/config.yml file . In this case, calling the step is essentially reduced to defining the step name. Calling the step can be done either in an orchestrator specific way (e.g. via a Jenkins library step) or on the command line. Jenkins Command Line library ( 'piper-lib-os' ) npmExecuteScripts script: this piper npmExecuteScripts Outputs \u00b6 Output type Details commonPipelineEnvironment custom/buildSettingsInfo custom/npmBuildArtifacts Parameters \u00b6 Overview - Step \u00b6 Name Mandatory Additional information script (yes) reference to Jenkins main pipeline script buildDescriptorExcludeList no buildDescriptorList no buildSettingsInfo no createBOM no createBuildArtifactsMetadata no defaultNpmRegistry no install no packBeforePublish no pnpmVersion no production no publish no repositoryPassword no pass via ENV or Jenkins credentials repositoryUrl no repositoryUsername no pass via ENV or Jenkins credentials runScripts no scriptOptions no verbose no activates debug output virtualFrameBuffer no Overview - Execution Environment \u00b6 Orchestrator-specific only These parameters are relevant for orchestrator usage and not considered when using the command line option. Name Mandatory Additional information containerCommand no containerShell no dockerEnvVars no dockerImage no dockerName no dockerOptions no dockerPullImage no dockerVolumeBind no dockerWorkspace no stashContent no Details \u00b6 buildDescriptorExcludeList \u00b6 List of build descriptors and therefore modules to exclude from execution of the npm scripts. The elements can either be a path to the build descriptor or a pattern. back to overview Scope Details Aliases - Type []string Mandatory no Default - deployment/** Secret no Configuration scope \u2612 parameter \u2610 general \u2612 steps \u2612 stages Resource references none buildDescriptorList \u00b6 List of build descriptors and therefore modules for execution of the npm scripts. The elements have to be paths to the build descriptors. If set, buildDescriptorExcludeList will be ignored. back to overview Scope Details Aliases - Type []string Mandatory no Default $PIPER_buildDescriptorList (if set) Secret no Configuration scope \u2612 parameter \u2610 general \u2612 steps \u2612 stages Resource references none buildSettingsInfo \u00b6 build settings info is typically filled by the step automatically to create information about the build settings that were used during the npm build . This information is typically used for compliance related processes. back to overview Scope Details Aliases - Type string Mandatory no Default $PIPER_buildSettingsInfo (if set) Secret no Configuration scope \u2612 parameter \u2610 general \u2612 steps \u2612 stages Resource references commonPipelineEnvironment : reference to: custom/buildSettingsInfo containerCommand \u00b6 Jenkins-specific: Used for proper environment setup. Kubernetes only: Allows to specify start command for container created with dockerImage parameter to overwrite Piper default (/usr/bin/tail -f /dev/null). back to overview Scope Details Aliases - Type string Mandatory no Default Secret no Configuration scope \u2612 parameter \u2612 general \u2612 steps \u2612 stages Resource references none containerShell \u00b6 Jenkins-specific: Used for proper environment setup. Allows to specify the shell to be executed for container with containerName. back to overview Scope Details Aliases - Type string Mandatory no Default Secret no Configuration scope \u2612 parameter \u2612 general \u2612 steps \u2612 stages Resource references none createBOM \u00b6 Create a BOM xml using CycloneDX. back to overview Scope Details Aliases - Type bool Mandatory no Default false Possible values - true - false Secret no Configuration scope \u2612 parameter \u2612 general \u2612 steps \u2612 stages Resource references none createBuildArtifactsMetadata \u00b6 metadata about the artifacts that are build and published , this metadata is generally used by steps downstream in the pipeline back to overview Scope Details Aliases - Type bool Mandatory no Default false Possible values - true - false Secret no Configuration scope \u2612 parameter \u2610 general \u2612 steps \u2612 stages Resource references none defaultNpmRegistry \u00b6 URL of the npm registry to use. Defaults to https://registry.npmjs.org/ back to overview Scope Details Aliases npm/defaultNpmRegistry Type string Mandatory no Default $PIPER_defaultNpmRegistry (if set) Secret no Configuration scope \u2612 parameter \u2612 general \u2612 steps \u2612 stages Resource references none dockerEnvVars \u00b6 Environment variables to set in the container, e.g. [http_proxy: \"proxy:8080\"]. back to overview Scope Details Aliases - Type map[string]string Mandatory no Default Secret no Configuration scope \u2612 parameter \u2612 general \u2612 steps \u2612 stages Resource references none dockerImage \u00b6 Name of the docker image that should be used. If empty, Docker is not used and the command is executed directly on the Jenkins system. back to overview Scope Details Aliases - Type string Mandatory no Default node:22-bookworm Secret no Configuration scope \u2612 parameter \u2612 general \u2612 steps \u2612 stages Resource references none dockerName \u00b6 Kubernetes only: Name of the container launching dockerImage. SideCar only: Name of the container in local network. back to overview Scope Details Aliases - Type string Mandatory no Default node Secret no Configuration scope \u2612 parameter \u2612 general \u2612 steps \u2612 stages Resource references none dockerOptions \u00b6 Docker options to be set when starting the container. back to overview Scope Details Aliases - Type []string Mandatory no Default Secret no Configuration scope \u2612 parameter \u2612 general \u2612 steps \u2612 stages Resource references none dockerPullImage \u00b6 Set this to 'false' to bypass a docker image pull. Useful during development process. Allows testing of images which are available in the local registry only. back to overview Scope Details Aliases - Type bool Mandatory no Default true Possible values - true - false Secret no Configuration scope \u2612 parameter \u2612 general \u2612 steps \u2612 stages Resource references none dockerVolumeBind \u00b6 Jenkins-specific: Used for proper environment setup. Volumes that should be mounted into the docker container. back to overview Scope Details Aliases - Type map[string]string Mandatory no Default Secret no Configuration scope \u2612 parameter \u2612 general \u2612 steps \u2612 stages Resource references none dockerWorkspace \u00b6 Jenkins-specific: Used for proper environment setup. Kubernetes only: Specifies a dedicated user home directory for the container which will be passed as value for environment variable HOME . back to overview Scope Details Aliases - Type string Mandatory no Default Secret no Configuration scope \u2612 parameter \u2612 general \u2612 steps \u2612 stages Resource references none install \u00b6 Run npm install or similar commands depending on the project structure. back to overview Scope Details Aliases - Type bool Mandatory no Default true Possible values - true - false Secret no Configuration scope \u2612 parameter \u2610 general \u2612 steps \u2612 stages Resource references none packBeforePublish \u00b6 used for executing npm pack first, followed by npm publish. This two step maybe required in two cases. case 1) When building multiple npm packages (multiple package.json) please keep this parameter true and also see buildDescriptorList or buildDescriptorExcludeList to choose which package(s) to publish. case 2)when you are building a single npm (single package.json in your repo) / multiple npm (multiple package.json) scoped package(s) and have npm dependencies from the same scope. back to overview Scope Details Aliases - Type bool Mandatory no Default false Possible values - true - false Secret no Configuration scope \u2612 parameter \u2610 general \u2612 steps \u2612 stages Resource references none pnpmVersion \u00b6 Version of pnpm to use for installation. If not specified, will use globally installed pnpm or install latest locally. Only used when pnpm-lock.yaml is detected. back to overview Scope Details Aliases - Type string Mandatory no Default $PIPER_pnpmVersion (if set) Secret no Configuration scope \u2612 parameter \u2610 general \u2612 steps \u2612 stages Resource references none production \u00b6 used for omitting installation of dev. dependencies if true back to overview Scope Details Aliases - Type bool Mandatory no Default false Possible values - true - false Secret no Configuration scope \u2612 parameter \u2610 general \u2612 steps \u2612 stages Resource references none publish \u00b6 Configures npm to publish the artifact to a repository. back to overview Scope Details Aliases - Type bool Mandatory no Default false Possible values - true - false Secret no Configuration scope \u2612 parameter \u2610 general \u2612 steps \u2612 stages Resource references none repositoryPassword \u00b6 Password for the repository to which the project artifacts should be published. back to overview Scope Details Aliases - Type string Mandatory no Default $PIPER_repositoryPassword (if set) Secret yes Configuration scope \u2612 parameter \u2612 general \u2612 steps \u2612 stages Resource references commonPipelineEnvironment : reference to: custom/npmRepositoryPassword commonPipelineEnvironment : reference to: custom/repositoryPassword repositoryUrl \u00b6 Url to the repository to which the project artifacts should be published. back to overview Scope Details Aliases - Type string Mandatory no Default $PIPER_repositoryUrl (if set) Secret no Configuration scope \u2612 parameter \u2612 general \u2612 steps \u2612 stages Resource references commonPipelineEnvironment : reference to: custom/npmRepositoryURL commonPipelineEnvironment : reference to: custom/repositoryUrl repositoryUsername \u00b6 Username for the repository to which the project artifacts should be published. back to overview Scope Details Aliases - Type string Mandatory no Default $PIPER_repositoryUsername (if set) Secret yes Configuration scope \u2612 parameter \u2612 general \u2612 steps \u2612 stages Resource references commonPipelineEnvironment : reference to: custom/npmRepositoryUsername commonPipelineEnvironment : reference to: custom/repositoryUsername runScripts \u00b6 List of additional run scripts to execute from package.json. back to overview Scope Details Aliases - Type []string Mandatory no Default $PIPER_runScripts (if set) Secret no Configuration scope \u2612 parameter \u2610 general \u2612 steps \u2612 stages Resource references none script \u00b6 The common script environment of the Jenkinsfile running. Typically the reference to the script calling the pipeline step is provided with the this parameter, as in script: this . This allows the function to access the commonPipelineEnvironment for retrieving, e.g. configuration parameters. back to overview Scope Details Aliases - Type Jenkins Script Mandatory yes Default Secret no Configuration scope \u2610 parameter \u2610 general \u2610 steps \u2610 stages Resource references none scriptOptions \u00b6 Options are passed to all runScripts calls separated by a '--'. './piper npmExecuteScripts --runScripts ci-e2e --scriptOptions '--tag1' will correspond to 'npm run ci-e2e -- --tag1' back to overview Scope Details Aliases - Type []string Mandatory no Default $PIPER_scriptOptions (if set) Secret no Configuration scope \u2612 parameter \u2610 general \u2612 steps \u2612 stages Resource references none stashContent \u00b6 Jenkins-specific: Used for proper environment setup. Specific stashes that should be considered for the step execution. back to overview Scope Details Aliases - Type []string Mandatory no Default - source Secret no Configuration scope \u2612 parameter \u2612 general \u2612 steps \u2612 stages Resource references none verbose \u00b6 verbose output back to overview Scope Details Aliases - Type bool Mandatory no Default false Possible values - true - false Secret no Configuration scope \u2612 parameter \u2612 general \u2612 steps \u2612 stages Resource references none virtualFrameBuffer \u00b6 (Linux only) Start a virtual frame buffer in the background. This allows you to run a web browser without the need for an X server. Note that xvfb needs to be installed in the execution environment. back to overview Scope Details Aliases - Type bool Mandatory no Default false Possible values - true - false Secret no Configuration scope \u2612 parameter \u2610 general \u2612 steps \u2612 stages Resource references none","title":"npmExecuteScripts"},{"location":"steps/npmExecuteScripts/#npmexecutescripts","text":"Handles JavaScript dependency installation via npm, yarn or pnpm and basic npm commands.","title":"npmExecuteScripts"},{"location":"steps/npmExecuteScripts/#description","text":"","title":"Description"},{"location":"steps/npmExecuteScripts/#lock-file-detection","text":"If package-lock.json is found \u2192 runs npm ci If yarn.lock.json is found \u2192 runs yarn install --frozen-lockfile If pnpm-lock.yaml is found \u2192 runs pnpm install --frozen-lockfile If no lock file is found \u2192 defaults to npm install and continues execution Only the install command uses the detected package manager (npm, yarn, or pnpm). All other commands (e.g., run , pack , publish ) are executed via the npm CLI, regardless of which lock file is detected. Rationale: In the Piper environment, using the npm CLI for non-install commands provides sufficient functionality without requiring additional CLI dependencies. Supporting yarn or pnpm for these commands was deemed unnecessary due to lack of added benefit. If your project contains multiple package.json files (i.e., multi module projects), install command will be run in every directory where the package.json file is found. One can use buildDescriptorList or buildDescriptorExcludeList (more details below) to override the default behaviour.","title":"Lock file detection:"},{"location":"steps/npmExecuteScripts/#pnpm-multi-module-support","text":"pnpm multi-module projects are supported when each package has its own pnpm-lock.yaml file. Workspace-based pnpm projects are not yet supported.","title":"pnpm multi-module support:"},{"location":"steps/npmExecuteScripts/#pnpm-and-running-tests","text":"When pnpm is installed, it is placed in ./tmp/node_modules/.bin/pnpm , and some dependency files under ./tmp/ may include test files. If your test runner uses a broad glob pattern (such as **/*.test.js ), it might unintentionally pick up test files from ./tmp/** . To avoid this, exclude ./tmp/** from your test execution patterns. For best results, use more specific glob patterns for running tests, such as src/**/*.test.js , to ensure only your intended test files are executed.","title":"pnpm and running tests."},{"location":"steps/npmExecuteScripts/#build-with-private-dependencies-from-a-repository","text":"If your build has scoped/unscoped dependencies from a private repository you can include a .npmrc into the source code repository as below (replace the @privateScope:registry value(s) with a valid private repo url) : @privateScope:registry=https://private.repository.com/ //private.repository.com/:username=${PIPER_VAULTCREDENTIAL_USER} //private.repository.com/:_password=${PIPER_VAULTCREDENTIAL_PASSWORD_BASE64} //private.repository.com/:always-auth=true registry=https://registry.npmjs.org PIPER_VAULTCREDENTIAL_USER and PIPER_VAULTCREDENTIAL_PASSWORD_BASE64 (Base64 encoded password) are the username and password for the private repository and are exposed are environment variables that must be present in the environment where the Piper step runs or alternatively can be created using : vault general purpose credentials","title":"Build with private dependencies from a repository"},{"location":"steps/npmExecuteScripts/#usage","text":"We recommend to define values of step parameters via .pipeline/config.yml file . In this case, calling the step is essentially reduced to defining the step name. Calling the step can be done either in an orchestrator specific way (e.g. via a Jenkins library step) or on the command line. Jenkins Command Line library ( 'piper-lib-os' ) npmExecuteScripts script: this piper npmExecuteScripts","title":"Usage"},{"location":"steps/npmExecuteScripts/#outputs","text":"Output type Details commonPipelineEnvironment custom/buildSettingsInfo custom/npmBuildArtifacts","title":"Outputs"},{"location":"steps/npmExecuteScripts/#parameters","text":"","title":"Parameters"},{"location":"steps/npmExecuteScripts/#overview-step","text":"Name Mandatory Additional information script (yes) reference to Jenkins main pipeline script buildDescriptorExcludeList no buildDescriptorList no buildSettingsInfo no createBOM no createBuildArtifactsMetadata no defaultNpmRegistry no install no packBeforePublish no pnpmVersion no production no publish no repositoryPassword no pass via ENV or Jenkins credentials repositoryUrl no repositoryUsername no pass via ENV or Jenkins credentials runScripts no scriptOptions no verbose no activates debug output virtualFrameBuffer no","title":"Overview - Step"},{"location":"steps/npmExecuteScripts/#overview-execution-environment","text":"Orchestrator-specific only These parameters are relevant for orchestrator usage and not considered when using the command line option. Name Mandatory Additional information containerCommand no containerShell no dockerEnvVars no dockerImage no dockerName no dockerOptions no dockerPullImage no dockerVolumeBind no dockerWorkspace no stashContent no","title":"Overview - Execution Environment"},{"location":"steps/npmExecuteScripts/#details","text":"","title":"Details"},{"location":"steps/npmExecuteScripts/#builddescriptorexcludelist","text":"List of build descriptors and therefore modules to exclude from execution of the npm scripts. The elements can either be a path to the build descriptor or a pattern. back to overview Scope Details Aliases - Type []string Mandatory no Default - deployment/** Secret no Configuration scope \u2612 parameter \u2610 general \u2612 steps \u2612 stages Resource references none","title":"buildDescriptorExcludeList"},{"location":"steps/npmExecuteScripts/#builddescriptorlist","text":"List of build descriptors and therefore modules for execution of the npm scripts. The elements have to be paths to the build descriptors. If set, buildDescriptorExcludeList will be ignored. back to overview Scope Details Aliases - Type []string Mandatory no Default $PIPER_buildDescriptorList (if set) Secret no Configuration scope \u2612 parameter \u2610 general \u2612 steps \u2612 stages Resource references none","title":"buildDescriptorList"},{"location":"steps/npmExecuteScripts/#buildsettingsinfo","text":"build settings info is typically filled by the step automatically to create information about the build settings that were used during the npm build . This information is typically used for compliance related processes. back to overview Scope Details Aliases - Type string Mandatory no Default $PIPER_buildSettingsInfo (if set) Secret no Configuration scope \u2612 parameter \u2610 general \u2612 steps \u2612 stages Resource references commonPipelineEnvironment : reference to: custom/buildSettingsInfo","title":"buildSettingsInfo"},{"location":"steps/npmExecuteScripts/#containercommand","text":"Jenkins-specific: Used for proper environment setup. Kubernetes only: Allows to specify start command for container created with dockerImage parameter to overwrite Piper default (/usr/bin/tail -f /dev/null). back to overview Scope Details Aliases - Type string Mandatory no Default Secret no Configuration scope \u2612 parameter \u2612 general \u2612 steps \u2612 stages Resource references none","title":"containerCommand"},{"location":"steps/npmExecuteScripts/#containershell","text":"Jenkins-specific: Used for proper environment setup. Allows to specify the shell to be executed for container with containerName. back to overview Scope Details Aliases - Type string Mandatory no Default Secret no Configuration scope \u2612 parameter \u2612 general \u2612 steps \u2612 stages Resource references none","title":"containerShell"},{"location":"steps/npmExecuteScripts/#createbom","text":"Create a BOM xml using CycloneDX. back to overview Scope Details Aliases - Type bool Mandatory no Default false Possible values - true - false Secret no Configuration scope \u2612 parameter \u2612 general \u2612 steps \u2612 stages Resource references none","title":"createBOM"},{"location":"steps/npmExecuteScripts/#createbuildartifactsmetadata","text":"metadata about the artifacts that are build and published , this metadata is generally used by steps downstream in the pipeline back to overview Scope Details Aliases - Type bool Mandatory no Default false Possible values - true - false Secret no Configuration scope \u2612 parameter \u2610 general \u2612 steps \u2612 stages Resource references none","title":"createBuildArtifactsMetadata"},{"location":"steps/npmExecuteScripts/#defaultnpmregistry","text":"URL of the npm registry to use. Defaults to https://registry.npmjs.org/ back to overview Scope Details Aliases npm/defaultNpmRegistry Type string Mandatory no Default $PIPER_defaultNpmRegistry (if set) Secret no Configuration scope \u2612 parameter \u2612 general \u2612 steps \u2612 stages Resource references none","title":"defaultNpmRegistry"},{"location":"steps/npmExecuteScripts/#dockerenvvars","text":"Environment variables to set in the container, e.g. [http_proxy: \"proxy:8080\"]. back to overview Scope Details Aliases - Type map[string]string Mandatory no Default Secret no Configuration scope \u2612 parameter \u2612 general \u2612 steps \u2612 stages Resource references none","title":"dockerEnvVars"},{"location":"steps/npmExecuteScripts/#dockerimage","text":"Name of the docker image that should be used. If empty, Docker is not used and the command is executed directly on the Jenkins system. back to overview Scope Details Aliases - Type string Mandatory no Default node:22-bookworm Secret no Configuration scope \u2612 parameter \u2612 general \u2612 steps \u2612 stages Resource references none","title":"dockerImage"},{"location":"steps/npmExecuteScripts/#dockername","text":"Kubernetes only: Name of the container launching dockerImage. SideCar only: Name of the container in local network. back to overview Scope Details Aliases - Type string Mandatory no Default node Secret no Configuration scope \u2612 parameter \u2612 general \u2612 steps \u2612 stages Resource references none","title":"dockerName"},{"location":"steps/npmExecuteScripts/#dockeroptions","text":"Docker options to be set when starting the container. back to overview Scope Details Aliases - Type []string Mandatory no Default Secret no Configuration scope \u2612 parameter \u2612 general \u2612 steps \u2612 stages Resource references none","title":"dockerOptions"},{"location":"steps/npmExecuteScripts/#dockerpullimage","text":"Set this to 'false' to bypass a docker image pull. Useful during development process. Allows testing of images which are available in the local registry only. back to overview Scope Details Aliases - Type bool Mandatory no Default true Possible values - true - false Secret no Configuration scope \u2612 parameter \u2612 general \u2612 steps \u2612 stages Resource references none","title":"dockerPullImage"},{"location":"steps/npmExecuteScripts/#dockervolumebind","text":"Jenkins-specific: Used for proper environment setup. Volumes that should be mounted into the docker container. back to overview Scope Details Aliases - Type map[string]string Mandatory no Default Secret no Configuration scope \u2612 parameter \u2612 general \u2612 steps \u2612 stages Resource references none","title":"dockerVolumeBind"},{"location":"steps/npmExecuteScripts/#dockerworkspace","text":"Jenkins-specific: Used for proper environment setup. Kubernetes only: Specifies a dedicated user home directory for the container which will be passed as value for environment variable HOME . back to overview Scope Details Aliases - Type string Mandatory no Default Secret no Configuration scope \u2612 parameter \u2612 general \u2612 steps \u2612 stages Resource references none","title":"dockerWorkspace"},{"location":"steps/npmExecuteScripts/#install","text":"Run npm install or similar commands depending on the project structure. back to overview Scope Details Aliases - Type bool Mandatory no Default true Possible values - true - false Secret no Configuration scope \u2612 parameter \u2610 general \u2612 steps \u2612 stages Resource references none","title":"install"},{"location":"steps/npmExecuteScripts/#packbeforepublish","text":"used for executing npm pack first, followed by npm publish. This two step maybe required in two cases. case 1) When building multiple npm packages (multiple package.json) please keep this parameter true and also see buildDescriptorList or buildDescriptorExcludeList to choose which package(s) to publish. case 2)when you are building a single npm (single package.json in your repo) / multiple npm (multiple package.json) scoped package(s) and have npm dependencies from the same scope. back to overview Scope Details Aliases - Type bool Mandatory no Default false Possible values - true - false Secret no Configuration scope \u2612 parameter \u2610 general \u2612 steps \u2612 stages Resource references none","title":"packBeforePublish"},{"location":"steps/npmExecuteScripts/#pnpmversion","text":"Version of pnpm to use for installation. If not specified, will use globally installed pnpm or install latest locally. Only used when pnpm-lock.yaml is detected. back to overview Scope Details Aliases - Type string Mandatory no Default $PIPER_pnpmVersion (if set) Secret no Configuration scope \u2612 parameter \u2610 general \u2612 steps \u2612 stages Resource references none","title":"pnpmVersion"},{"location":"steps/npmExecuteScripts/#production","text":"used for omitting installation of dev. dependencies if true back to overview Scope Details Aliases - Type bool Mandatory no Default false Possible values - true - false Secret no Configuration scope \u2612 parameter \u2610 general \u2612 steps \u2612 stages Resource references none","title":"production"},{"location":"steps/npmExecuteScripts/#publish","text":"Configures npm to publish the artifact to a repository. back to overview Scope Details Aliases - Type bool Mandatory no Default false Possible values - true - false Secret no Configuration scope \u2612 parameter \u2610 general \u2612 steps \u2612 stages Resource references none","title":"publish"},{"location":"steps/npmExecuteScripts/#repositorypassword","text":"Password for the repository to which the project artifacts should be published. back to overview Scope Details Aliases - Type string Mandatory no Default $PIPER_repositoryPassword (if set) Secret yes Configuration scope \u2612 parameter \u2612 general \u2612 steps \u2612 stages Resource references commonPipelineEnvironment : reference to: custom/npmRepositoryPassword commonPipelineEnvironment : reference to: custom/repositoryPassword","title":"repositoryPassword"},{"location":"steps/npmExecuteScripts/#repositoryurl","text":"Url to the repository to which the project artifacts should be published. back to overview Scope Details Aliases - Type string Mandatory no Default $PIPER_repositoryUrl (if set) Secret no Configuration scope \u2612 parameter \u2612 general \u2612 steps \u2612 stages Resource references commonPipelineEnvironment : reference to: custom/npmRepositoryURL commonPipelineEnvironment : reference to: custom/repositoryUrl","title":"repositoryUrl"},{"location":"steps/npmExecuteScripts/#repositoryusername","text":"Username for the repository to which the project artifacts should be published. back to overview Scope Details Aliases - Type string Mandatory no Default $PIPER_repositoryUsername (if set) Secret yes Configuration scope \u2612 parameter \u2612 general \u2612 steps \u2612 stages Resource references commonPipelineEnvironment : reference to: custom/npmRepositoryUsername commonPipelineEnvironment : reference to: custom/repositoryUsername","title":"repositoryUsername"},{"location":"steps/npmExecuteScripts/#runscripts","text":"List of additional run scripts to execute from package.json. back to overview Scope Details Aliases - Type []string Mandatory no Default $PIPER_runScripts (if set) Secret no Configuration scope \u2612 parameter \u2610 general \u2612 steps \u2612 stages Resource references none","title":"runScripts"},{"location":"steps/npmExecuteScripts/#script","text":"The common script environment of the Jenkinsfile running. Typically the reference to the script calling the pipeline step is provided with the this parameter, as in script: this . This allows the function to access the commonPipelineEnvironment for retrieving, e.g. configuration parameters. back to overview Scope Details Aliases - Type Jenkins Script Mandatory yes Default Secret no Configuration scope \u2610 parameter \u2610 general \u2610 steps \u2610 stages Resource references none","title":"script"},{"location":"steps/npmExecuteScripts/#scriptoptions","text":"Options are passed to all runScripts calls separated by a '--'. './piper npmExecuteScripts --runScripts ci-e2e --scriptOptions '--tag1' will correspond to 'npm run ci-e2e -- --tag1' back to overview Scope Details Aliases - Type []string Mandatory no Default $PIPER_scriptOptions (if set) Secret no Configuration scope \u2612 parameter \u2610 general \u2612 steps \u2612 stages Resource references none","title":"scriptOptions"},{"location":"steps/npmExecuteScripts/#stashcontent","text":"Jenkins-specific: Used for proper environment setup. Specific stashes that should be considered for the step execution. back to overview Scope Details Aliases - Type []string Mandatory no Default - source Secret no Configuration scope \u2612 parameter \u2612 general \u2612 steps \u2612 stages Resource references none","title":"stashContent"},{"location":"steps/npmExecuteScripts/#verbose","text":"verbose output back to overview Scope Details Aliases - Type bool Mandatory no Default false Possible values - true - false Secret no Configuration scope \u2612 parameter \u2612 general \u2612 steps \u2612 stages Resource references none","title":"verbose"},{"location":"steps/npmExecuteScripts/#virtualframebuffer","text":"(Linux only) Start a virtual frame buffer in the background. This allows you to run a web browser without the need for an X server. Note that xvfb needs to be installed in the execution environment. back to overview Scope Details Aliases - Type bool Mandatory no Default false Possible values - true - false Secret no Configuration scope \u2612 parameter \u2610 general \u2612 steps \u2612 stages Resource references none","title":"virtualFrameBuffer"},{"location":"steps/npmExecuteTests/","text":"npmExecuteTests \u00b6 Executes end-to-end tests using npm Note Please note, that the npmExecuteTests step is in beta state, and there could be breaking changes before we remove the beta notice. Description \u00b6 This step executes end-to-end tests in a Docker environment using npm. The step spins up a Docker container based on the specified dockerImage and executes the installScript and runScript from package.json . The application URLs and credentials can be specified in appUrls and credentialsId respectively. If wdi5 is set to true , the step uses wdi5_username and wdi5_password for authentication. The tests can be restricted to run only on the productive branch by setting onlyRunInProductiveBranch to true . Usage \u00b6 We recommend to define values of step parameters via .pipeline/config.yml file . In this case, calling the step is essentially reduced to defining the step name. Calling the step can be done either in an orchestrator specific way (e.g. via a Jenkins library step) or on the command line. Jenkins Command Line library ( 'piper-lib-os' ) npmExecuteTests script: this piper npmExecuteTests Outputs \u00b6 Output type Details Parameters \u00b6 Overview - Step \u00b6 Name Mandatory Additional information script (yes) reference to Jenkins main pipeline script URLs no baseUrl no envs no installCommand no password no passwordEnvVar no paths no runCommand no urlOptionPrefix no username no usernameEnvVar no verbose no activates debug output workingDirectory no Overview - Execution Environment \u00b6 Orchestrator-specific only These parameters are relevant for orchestrator usage and not considered when using the command line option. Name Mandatory Additional information containerCommand no containerName no containerShell no dockerEnvVars no dockerImage no dockerName no dockerOptions no dockerPullImage no dockerVolumeBind no dockerWorkspace no sidecarEnvVars no sidecarImage no sidecarName no sidecarOptions no sidecarPullImage no sidecarReadyCommand no sidecarVolumeBind no sidecarWorkspace no Details \u00b6 URLs \u00b6 An array of objects, each representing an application URL with associated credentials. Each object must have the following properties: - url : The URL of the application. - username : The username for accessing the application. - password : The password for accessing the application. back to overview Scope Details Aliases - Type []map[string]interface{} Mandatory no Default $PIPER_URLs (if set) Secret no Configuration scope \u2612 parameter \u2610 general \u2612 steps \u2612 stages Resource references Vault resource: name: appMetadataVaultSecretName default value: appMetadata Vault paths: $(vaultPath)/appMetadata $(vaultBasePath)/$(vaultPipelineName)/appMetadata $(vaultBasePath)/GROUP-SECRETS/appMetadata baseUrl \u00b6 Base URL of the application to be tested. back to overview Scope Details Aliases - Type string Mandatory no Default http://localhost:8080/index.html Secret no Configuration scope \u2612 parameter \u2610 general \u2612 steps \u2612 stages Resource references none containerCommand \u00b6 Jenkins-specific: Used for proper environment setup. Kubernetes only: Allows to specify start command for container created with dockerImage parameter to overwrite Piper default (/usr/bin/tail -f /dev/null). back to overview Scope Details Aliases - Type string Mandatory no Default Secret no Configuration scope \u2612 parameter \u2612 general \u2612 steps \u2612 stages Resource references none containerName \u00b6 Jenkins-specific: Used for proper environment setup. Optional configuration in combination with containerMap to define the container where the commands should be executed in. back to overview Scope Details Aliases - Type string Mandatory no Default node Secret no Configuration scope \u2612 parameter \u2612 general \u2612 steps \u2612 stages Resource references none containerShell \u00b6 Jenkins-specific: Used for proper environment setup. Allows to specify the shell to be executed for container with containerName. back to overview Scope Details Aliases - Type string Mandatory no Default Secret no Configuration scope \u2612 parameter \u2612 general \u2612 steps \u2612 stages Resource references none dockerEnvVars \u00b6 Environment variables to set in the container, e.g. [http_proxy: \"proxy:8080\"]. back to overview Scope Details Aliases - Type map[string]string Mandatory no Default map[BASE_URL:${{params.baseUrl}} CREDENTIALS_ID:${{params.credentialsId}} NO_PROXY:localhost,selenium,$NO_PROXY no_proxy:localhost,selenium,$no_proxy] Secret no Configuration scope \u2612 parameter \u2612 general \u2612 steps \u2612 stages Resource references none dockerImage \u00b6 Name of the docker image that should be used. If empty, Docker is not used and the command is executed directly on the Jenkins system. back to overview Scope Details Aliases - Type string Mandatory no Default node:22-bookworm Secret no Configuration scope \u2612 parameter \u2612 general \u2612 steps \u2612 stages Resource references none dockerName \u00b6 Kubernetes only: Name of the container launching dockerImage. SideCar only: Name of the container in local network. back to overview Scope Details Aliases - Type string Mandatory no Default node Secret no Configuration scope \u2612 parameter \u2612 general \u2612 steps \u2612 stages Resource references none dockerOptions \u00b6 Docker options to be set when starting the container. back to overview Scope Details Aliases - Type []string Mandatory no Default Secret no Configuration scope \u2612 parameter \u2612 general \u2612 steps \u2612 stages Resource references none dockerPullImage \u00b6 Set this to 'false' to bypass a docker image pull. Useful during development process. Allows testing of images which are available in the local registry only. back to overview Scope Details Aliases - Type bool Mandatory no Default true Possible values - true - false Secret no Configuration scope \u2612 parameter \u2612 general \u2612 steps \u2612 stages Resource references none dockerVolumeBind \u00b6 Jenkins-specific: Used for proper environment setup. Volumes that should be mounted into the docker container. back to overview Scope Details Aliases - Type map[string]string Mandatory no Default Secret no Configuration scope \u2612 parameter \u2612 general \u2612 steps \u2612 stages Resource references none dockerWorkspace \u00b6 Jenkins-specific: Used for proper environment setup. Kubernetes only: Specifies a dedicated user home directory for the container which will be passed as value for environment variable HOME . back to overview Scope Details Aliases - Type string Mandatory no Default /home/node Secret no Configuration scope \u2612 parameter \u2612 general \u2612 steps \u2612 stages Resource references none envs \u00b6 List of environment variables to be set back to overview Scope Details Aliases - Type []string Mandatory no Default $PIPER_envs (if set) Secret no Configuration scope \u2612 parameter \u2610 general \u2612 steps \u2612 stages Resource references none installCommand \u00b6 Command to be executed for installation`. back to overview Scope Details Aliases - Type string Mandatory no Default npm ci Secret no Configuration scope \u2612 parameter \u2610 general \u2612 steps \u2612 stages Resource references none password \u00b6 The base URL password used to authenticate back to overview Scope Details Aliases - Type string Mandatory no Default $PIPER_password (if set) Secret no Configuration scope \u2612 parameter \u2610 general \u2612 steps \u2612 stages Resource references Vault resource: name: appMetadataVaultSecretName default value: appMetadata Vault paths: $(vaultPath)/appMetadata $(vaultBasePath)/$(vaultPipelineName)/appMetadata $(vaultBasePath)/GROUP-SECRETS/appMetadata passwordEnvVar \u00b6 Env var for password. back to overview Scope Details Aliases - Type string Mandatory no Default wdi5_password Secret no Configuration scope \u2612 parameter \u2610 general \u2612 steps \u2612 stages Resource references none paths \u00b6 List of paths to be added to $PATH back to overview Scope Details Aliases - Type []string Mandatory no Default $PIPER_paths (if set) Secret no Configuration scope \u2612 parameter \u2610 general \u2612 steps \u2612 stages Resource references none runCommand \u00b6 Command to be executed for running tests`. back to overview Scope Details Aliases - Type string Mandatory no Default npm run wdi5 Secret no Configuration scope \u2612 parameter \u2610 general \u2612 steps \u2612 stages Resource references none script \u00b6 The common script environment of the Jenkinsfile running. Typically the reference to the script calling the pipeline step is provided with the this parameter, as in script: this . This allows the function to access the commonPipelineEnvironment for retrieving, e.g. configuration parameters. back to overview Scope Details Aliases - Type Jenkins Script Mandatory yes Default Secret no Configuration scope \u2610 parameter \u2610 general \u2610 steps \u2610 stages Resource references none sidecarEnvVars \u00b6 A map of environment variables to set in the sidecar container, similar to dockerEnvVars . back to overview Scope Details Aliases - Type map[string]string Mandatory no Default Secret no Configuration scope \u2612 parameter \u2612 general \u2612 steps \u2612 stages Resource references none sidecarImage \u00b6 The name of the docker image of the sidecar container. If empty, no sidecar container is started. Similar to dockerImage . back to overview Scope Details Aliases - Type string Mandatory no Default Secret no Configuration scope \u2612 parameter \u2612 general \u2612 steps \u2612 stages Resource references none sidecarName \u00b6 Name of the sidecar container. Similar to dockerName . back to overview Scope Details Aliases - Type string Mandatory no Default Secret no Configuration scope \u2612 parameter \u2612 general \u2612 steps \u2612 stages Resource references none sidecarOptions \u00b6 Options to be set when starting the sidecar container. Similar to dockerOptions . back to overview Scope Details Aliases - Type []string Mandatory no Default Secret no Configuration scope \u2612 parameter \u2612 general \u2612 steps \u2612 stages Resource references none sidecarPullImage \u00b6 Set this to 'false' to bypass a docker image pull. Useful during development process. Allows testing of images which are available in the local registry only. back to overview Scope Details Aliases - Type bool Mandatory no Default false Possible values - true - false Secret no Configuration scope \u2612 parameter \u2612 general \u2612 steps \u2612 stages Resource references none sidecarReadyCommand \u00b6 Jenkins-specific: Used for proper environment setup. Command executed inside the container which returns exit code 0 when the container is ready to be used. back to overview Scope Details Aliases - Type string Mandatory no Default Secret no Configuration scope \u2612 parameter \u2612 general \u2612 steps \u2612 stages Resource references none sidecarVolumeBind \u00b6 Volumes that should be mounted into the sidecar container. Similar to dockerVolumeBind . back to overview Scope Details Aliases - Type map[string]string Mandatory no Default Secret no Configuration scope \u2612 parameter \u2612 general \u2612 steps \u2612 stages Resource references none sidecarWorkspace \u00b6 Jenkins-specific: Used for proper environment setup. back to overview Scope Details Aliases - Type string Mandatory no Default Secret no Configuration scope \u2612 parameter \u2612 general \u2612 steps \u2612 stages Resource references none urlOptionPrefix \u00b6 If you want to specify an extra option that the tested url it appended to. For example if the test URL is http://localhost and urlOptionPrefix is --base-url= , we'll add --base-url=http://localhost to your runScript. back to overview Scope Details Aliases - Type string Mandatory no Default $PIPER_urlOptionPrefix (if set) Secret no Configuration scope \u2612 parameter \u2610 general \u2612 steps \u2612 stages Resource references none username \u00b6 The base URL username used to authenticate back to overview Scope Details Aliases - Type string Mandatory no Default $PIPER_username (if set) Secret no Configuration scope \u2612 parameter \u2610 general \u2612 steps \u2612 stages Resource references Vault resource: name: appMetadataVaultSecretName default value: appMetadata Vault paths: $(vaultPath)/appMetadata $(vaultBasePath)/$(vaultPipelineName)/appMetadata $(vaultBasePath)/GROUP-SECRETS/appMetadata usernameEnvVar \u00b6 Env var for username. back to overview Scope Details Aliases - Type string Mandatory no Default wdi5_username Secret no Configuration scope \u2612 parameter \u2610 general \u2612 steps \u2612 stages Resource references none verbose \u00b6 verbose output back to overview Scope Details Aliases - Type bool Mandatory no Default false Possible values - true - false Secret no Configuration scope \u2612 parameter \u2612 general \u2612 steps \u2612 stages Resource references none workingDirectory \u00b6 Directory where your tests are located relative to the root of your project back to overview Scope Details Aliases - Type string Mandatory no Default . Secret no Configuration scope \u2612 parameter \u2610 general \u2612 steps \u2612 stages Resource references none Examples \u00b6 Simple example using wdi5 \u00b6 stages : - name : Test steps : - name : npmExecuteTests type : npmExecuteTests params : baseUrl : \"http://example.com/index.html\" This will run your wdi5 tests with the given baseUrl. Advanced example using custom test script with credentials using Vault \u00b6 stages : - name : Test steps : - name : npmExecuteTests type : npmExecuteTests params : installCommand : \"npm install\" runCommand : \"npm run custom-e2e-test\" usernameEnvVar : \"e2e_username\" passwordEnvVar : \"e2e_password\" baseUrl : \"http://example.com/index.html\" urlOptionPrefix : \"--base-url=\" and Vault configuration in PIPELINE-GROUP- /PIPELINE- /appMetadata { \"URLs\" : [ { \"url\" : \"http://one.example.com/index.html\" , \"username\" : \"some-username1\" , \"password\" : \"some-password1\" }, { \"url\" : \"http://two.example.com/index.html\" , \"username\" : \"some-username2\" , \"password\" : \"some-password2\" } ], \"username\" : \"base-url-username\" , \"password\" : \"base-url-password\" } This will run your custom install and run script for each URL from secrets and use the given URL like so: npm run custom-e2e-test --base-url = http://one.example.com/index.html Each test run will have their own environment variables set: e2e_username = some-username1 e2e_password = some-password1 Environment variables are reset before each test run with their corresponding values from the secrets Custom environment variables and $PATH \u00b6 stages : - name : Test steps : - name : npmExecuteTests type : npmExecuteTests params : envs : - \"MY_ENV_VAR=value\" paths : - \"/path/to/add\" If you're running uiVeri5 tests, you might need to set additional environment variables or add paths to the $PATH variable. This can be done using the envs and paths parameters: stages : - name : Test steps : - name : npmExecuteTests type : npmExecuteTests params : runCommand : \"/home/node/.npm-global/bin/uiveri5\" installCommand : \"npm install @ui5/uiveri5 --global --quiet\" runOptions : [ \"--seleniumAddress=http://localhost:4444/wd/hub\" ] usernameEnvVar : \"PIPER_SELENIUM_HUB_USER\" passwordEnvVar : \"PIPER_SELENIUM_HUB_PASSWORD\" envs : - \"NPM_CONFIG_PREFIX=~/.npm-global\" paths : - \"~/.npm-global/bin\"","title":"npmExecuteTests"},{"location":"steps/npmExecuteTests/#npmexecutetests","text":"Executes end-to-end tests using npm Note Please note, that the npmExecuteTests step is in beta state, and there could be breaking changes before we remove the beta notice.","title":"npmExecuteTests"},{"location":"steps/npmExecuteTests/#description","text":"This step executes end-to-end tests in a Docker environment using npm. The step spins up a Docker container based on the specified dockerImage and executes the installScript and runScript from package.json . The application URLs and credentials can be specified in appUrls and credentialsId respectively. If wdi5 is set to true , the step uses wdi5_username and wdi5_password for authentication. The tests can be restricted to run only on the productive branch by setting onlyRunInProductiveBranch to true .","title":"Description"},{"location":"steps/npmExecuteTests/#usage","text":"We recommend to define values of step parameters via .pipeline/config.yml file . In this case, calling the step is essentially reduced to defining the step name. Calling the step can be done either in an orchestrator specific way (e.g. via a Jenkins library step) or on the command line. Jenkins Command Line library ( 'piper-lib-os' ) npmExecuteTests script: this piper npmExecuteTests","title":"Usage"},{"location":"steps/npmExecuteTests/#outputs","text":"Output type Details","title":"Outputs"},{"location":"steps/npmExecuteTests/#parameters","text":"","title":"Parameters"},{"location":"steps/npmExecuteTests/#overview-step","text":"Name Mandatory Additional information script (yes) reference to Jenkins main pipeline script URLs no baseUrl no envs no installCommand no password no passwordEnvVar no paths no runCommand no urlOptionPrefix no username no usernameEnvVar no verbose no activates debug output workingDirectory no","title":"Overview - Step"},{"location":"steps/npmExecuteTests/#overview-execution-environment","text":"Orchestrator-specific only These parameters are relevant for orchestrator usage and not considered when using the command line option. Name Mandatory Additional information containerCommand no containerName no containerShell no dockerEnvVars no dockerImage no dockerName no dockerOptions no dockerPullImage no dockerVolumeBind no dockerWorkspace no sidecarEnvVars no sidecarImage no sidecarName no sidecarOptions no sidecarPullImage no sidecarReadyCommand no sidecarVolumeBind no sidecarWorkspace no","title":"Overview - Execution Environment"},{"location":"steps/npmExecuteTests/#details","text":"","title":"Details"},{"location":"steps/npmExecuteTests/#urls","text":"An array of objects, each representing an application URL with associated credentials. Each object must have the following properties: - url : The URL of the application. - username : The username for accessing the application. - password : The password for accessing the application. back to overview Scope Details Aliases - Type []map[string]interface{} Mandatory no Default $PIPER_URLs (if set) Secret no Configuration scope \u2612 parameter \u2610 general \u2612 steps \u2612 stages Resource references Vault resource: name: appMetadataVaultSecretName default value: appMetadata Vault paths: $(vaultPath)/appMetadata $(vaultBasePath)/$(vaultPipelineName)/appMetadata $(vaultBasePath)/GROUP-SECRETS/appMetadata","title":"URLs"},{"location":"steps/npmExecuteTests/#baseurl","text":"Base URL of the application to be tested. back to overview Scope Details Aliases - Type string Mandatory no Default http://localhost:8080/index.html Secret no Configuration scope \u2612 parameter \u2610 general \u2612 steps \u2612 stages Resource references none","title":"baseUrl"},{"location":"steps/npmExecuteTests/#containercommand","text":"Jenkins-specific: Used for proper environment setup. Kubernetes only: Allows to specify start command for container created with dockerImage parameter to overwrite Piper default (/usr/bin/tail -f /dev/null). back to overview Scope Details Aliases - Type string Mandatory no Default Secret no Configuration scope \u2612 parameter \u2612 general \u2612 steps \u2612 stages Resource references none","title":"containerCommand"},{"location":"steps/npmExecuteTests/#containername","text":"Jenkins-specific: Used for proper environment setup. Optional configuration in combination with containerMap to define the container where the commands should be executed in. back to overview Scope Details Aliases - Type string Mandatory no Default node Secret no Configuration scope \u2612 parameter \u2612 general \u2612 steps \u2612 stages Resource references none","title":"containerName"},{"location":"steps/npmExecuteTests/#containershell","text":"Jenkins-specific: Used for proper environment setup. Allows to specify the shell to be executed for container with containerName. back to overview Scope Details Aliases - Type string Mandatory no Default Secret no Configuration scope \u2612 parameter \u2612 general \u2612 steps \u2612 stages Resource references none","title":"containerShell"},{"location":"steps/npmExecuteTests/#dockerenvvars","text":"Environment variables to set in the container, e.g. [http_proxy: \"proxy:8080\"]. back to overview Scope Details Aliases - Type map[string]string Mandatory no Default map[BASE_URL:${{params.baseUrl}} CREDENTIALS_ID:${{params.credentialsId}} NO_PROXY:localhost,selenium,$NO_PROXY no_proxy:localhost,selenium,$no_proxy] Secret no Configuration scope \u2612 parameter \u2612 general \u2612 steps \u2612 stages Resource references none","title":"dockerEnvVars"},{"location":"steps/npmExecuteTests/#dockerimage","text":"Name of the docker image that should be used. If empty, Docker is not used and the command is executed directly on the Jenkins system. back to overview Scope Details Aliases - Type string Mandatory no Default node:22-bookworm Secret no Configuration scope \u2612 parameter \u2612 general \u2612 steps \u2612 stages Resource references none","title":"dockerImage"},{"location":"steps/npmExecuteTests/#dockername","text":"Kubernetes only: Name of the container launching dockerImage. SideCar only: Name of the container in local network. back to overview Scope Details Aliases - Type string Mandatory no Default node Secret no Configuration scope \u2612 parameter \u2612 general \u2612 steps \u2612 stages Resource references none","title":"dockerName"},{"location":"steps/npmExecuteTests/#dockeroptions","text":"Docker options to be set when starting the container. back to overview Scope Details Aliases - Type []string Mandatory no Default Secret no Configuration scope \u2612 parameter \u2612 general \u2612 steps \u2612 stages Resource references none","title":"dockerOptions"},{"location":"steps/npmExecuteTests/#dockerpullimage","text":"Set this to 'false' to bypass a docker image pull. Useful during development process. Allows testing of images which are available in the local registry only. back to overview Scope Details Aliases - Type bool Mandatory no Default true Possible values - true - false Secret no Configuration scope \u2612 parameter \u2612 general \u2612 steps \u2612 stages Resource references none","title":"dockerPullImage"},{"location":"steps/npmExecuteTests/#dockervolumebind","text":"Jenkins-specific: Used for proper environment setup. Volumes that should be mounted into the docker container. back to overview Scope Details Aliases - Type map[string]string Mandatory no Default Secret no Configuration scope \u2612 parameter \u2612 general \u2612 steps \u2612 stages Resource references none","title":"dockerVolumeBind"},{"location":"steps/npmExecuteTests/#dockerworkspace","text":"Jenkins-specific: Used for proper environment setup. Kubernetes only: Specifies a dedicated user home directory for the container which will be passed as value for environment variable HOME . back to overview Scope Details Aliases - Type string Mandatory no Default /home/node Secret no Configuration scope \u2612 parameter \u2612 general \u2612 steps \u2612 stages Resource references none","title":"dockerWorkspace"},{"location":"steps/npmExecuteTests/#envs","text":"List of environment variables to be set back to overview Scope Details Aliases - Type []string Mandatory no Default $PIPER_envs (if set) Secret no Configuration scope \u2612 parameter \u2610 general \u2612 steps \u2612 stages Resource references none","title":"envs"},{"location":"steps/npmExecuteTests/#installcommand","text":"Command to be executed for installation`. back to overview Scope Details Aliases - Type string Mandatory no Default npm ci Secret no Configuration scope \u2612 parameter \u2610 general \u2612 steps \u2612 stages Resource references none","title":"installCommand"},{"location":"steps/npmExecuteTests/#password","text":"The base URL password used to authenticate back to overview Scope Details Aliases - Type string Mandatory no Default $PIPER_password (if set) Secret no Configuration scope \u2612 parameter \u2610 general \u2612 steps \u2612 stages Resource references Vault resource: name: appMetadataVaultSecretName default value: appMetadata Vault paths: $(vaultPath)/appMetadata $(vaultBasePath)/$(vaultPipelineName)/appMetadata $(vaultBasePath)/GROUP-SECRETS/appMetadata","title":"password"},{"location":"steps/npmExecuteTests/#passwordenvvar","text":"Env var for password. back to overview Scope Details Aliases - Type string Mandatory no Default wdi5_password Secret no Configuration scope \u2612 parameter \u2610 general \u2612 steps \u2612 stages Resource references none","title":"passwordEnvVar"},{"location":"steps/npmExecuteTests/#paths","text":"List of paths to be added to $PATH back to overview Scope Details Aliases - Type []string Mandatory no Default $PIPER_paths (if set) Secret no Configuration scope \u2612 parameter \u2610 general \u2612 steps \u2612 stages Resource references none","title":"paths"},{"location":"steps/npmExecuteTests/#runcommand","text":"Command to be executed for running tests`. back to overview Scope Details Aliases - Type string Mandatory no Default npm run wdi5 Secret no Configuration scope \u2612 parameter \u2610 general \u2612 steps \u2612 stages Resource references none","title":"runCommand"},{"location":"steps/npmExecuteTests/#script","text":"The common script environment of the Jenkinsfile running. Typically the reference to the script calling the pipeline step is provided with the this parameter, as in script: this . This allows the function to access the commonPipelineEnvironment for retrieving, e.g. configuration parameters. back to overview Scope Details Aliases - Type Jenkins Script Mandatory yes Default Secret no Configuration scope \u2610 parameter \u2610 general \u2610 steps \u2610 stages Resource references none","title":"script"},{"location":"steps/npmExecuteTests/#sidecarenvvars","text":"A map of environment variables to set in the sidecar container, similar to dockerEnvVars . back to overview Scope Details Aliases - Type map[string]string Mandatory no Default Secret no Configuration scope \u2612 parameter \u2612 general \u2612 steps \u2612 stages Resource references none","title":"sidecarEnvVars"},{"location":"steps/npmExecuteTests/#sidecarimage","text":"The name of the docker image of the sidecar container. If empty, no sidecar container is started. Similar to dockerImage . back to overview Scope Details Aliases - Type string Mandatory no Default Secret no Configuration scope \u2612 parameter \u2612 general \u2612 steps \u2612 stages Resource references none","title":"sidecarImage"},{"location":"steps/npmExecuteTests/#sidecarname","text":"Name of the sidecar container. Similar to dockerName . back to overview Scope Details Aliases - Type string Mandatory no Default Secret no Configuration scope \u2612 parameter \u2612 general \u2612 steps \u2612 stages Resource references none","title":"sidecarName"},{"location":"steps/npmExecuteTests/#sidecaroptions","text":"Options to be set when starting the sidecar container. Similar to dockerOptions . back to overview Scope Details Aliases - Type []string Mandatory no Default Secret no Configuration scope \u2612 parameter \u2612 general \u2612 steps \u2612 stages Resource references none","title":"sidecarOptions"},{"location":"steps/npmExecuteTests/#sidecarpullimage","text":"Set this to 'false' to bypass a docker image pull. Useful during development process. Allows testing of images which are available in the local registry only. back to overview Scope Details Aliases - Type bool Mandatory no Default false Possible values - true - false Secret no Configuration scope \u2612 parameter \u2612 general \u2612 steps \u2612 stages Resource references none","title":"sidecarPullImage"},{"location":"steps/npmExecuteTests/#sidecarreadycommand","text":"Jenkins-specific: Used for proper environment setup. Command executed inside the container which returns exit code 0 when the container is ready to be used. back to overview Scope Details Aliases - Type string Mandatory no Default Secret no Configuration scope \u2612 parameter \u2612 general \u2612 steps \u2612 stages Resource references none","title":"sidecarReadyCommand"},{"location":"steps/npmExecuteTests/#sidecarvolumebind","text":"Volumes that should be mounted into the sidecar container. Similar to dockerVolumeBind . back to overview Scope Details Aliases - Type map[string]string Mandatory no Default Secret no Configuration scope \u2612 parameter \u2612 general \u2612 steps \u2612 stages Resource references none","title":"sidecarVolumeBind"},{"location":"steps/npmExecuteTests/#sidecarworkspace","text":"Jenkins-specific: Used for proper environment setup. back to overview Scope Details Aliases - Type string Mandatory no Default Secret no Configuration scope \u2612 parameter \u2612 general \u2612 steps \u2612 stages Resource references none","title":"sidecarWorkspace"},{"location":"steps/npmExecuteTests/#urloptionprefix","text":"If you want to specify an extra option that the tested url it appended to. For example if the test URL is http://localhost and urlOptionPrefix is --base-url= , we'll add --base-url=http://localhost to your runScript. back to overview Scope Details Aliases - Type string Mandatory no Default $PIPER_urlOptionPrefix (if set) Secret no Configuration scope \u2612 parameter \u2610 general \u2612 steps \u2612 stages Resource references none","title":"urlOptionPrefix"},{"location":"steps/npmExecuteTests/#username","text":"The base URL username used to authenticate back to overview Scope Details Aliases - Type string Mandatory no Default $PIPER_username (if set) Secret no Configuration scope \u2612 parameter \u2610 general \u2612 steps \u2612 stages Resource references Vault resource: name: appMetadataVaultSecretName default value: appMetadata Vault paths: $(vaultPath)/appMetadata $(vaultBasePath)/$(vaultPipelineName)/appMetadata $(vaultBasePath)/GROUP-SECRETS/appMetadata","title":"username"},{"location":"steps/npmExecuteTests/#usernameenvvar","text":"Env var for username. back to overview Scope Details Aliases - Type string Mandatory no Default wdi5_username Secret no Configuration scope \u2612 parameter \u2610 general \u2612 steps \u2612 stages Resource references none","title":"usernameEnvVar"},{"location":"steps/npmExecuteTests/#verbose","text":"verbose output back to overview Scope Details Aliases - Type bool Mandatory no Default false Possible values - true - false Secret no Configuration scope \u2612 parameter \u2612 general \u2612 steps \u2612 stages Resource references none","title":"verbose"},{"location":"steps/npmExecuteTests/#workingdirectory","text":"Directory where your tests are located relative to the root of your project back to overview Scope Details Aliases - Type string Mandatory no Default . Secret no Configuration scope \u2612 parameter \u2610 general \u2612 steps \u2612 stages Resource references none","title":"workingDirectory"},{"location":"steps/npmExecuteTests/#examples","text":"","title":"Examples"},{"location":"steps/npmExecuteTests/#simple-example-using-wdi5","text":"stages : - name : Test steps : - name : npmExecuteTests type : npmExecuteTests params : baseUrl : \"http://example.com/index.html\" This will run your wdi5 tests with the given baseUrl.","title":"Simple example using wdi5"},{"location":"steps/npmExecuteTests/#advanced-example-using-custom-test-script-with-credentials-using-vault","text":"stages : - name : Test steps : - name : npmExecuteTests type : npmExecuteTests params : installCommand : \"npm install\" runCommand : \"npm run custom-e2e-test\" usernameEnvVar : \"e2e_username\" passwordEnvVar : \"e2e_password\" baseUrl : \"http://example.com/index.html\" urlOptionPrefix : \"--base-url=\" and Vault configuration in PIPELINE-GROUP- /PIPELINE- /appMetadata { \"URLs\" : [ { \"url\" : \"http://one.example.com/index.html\" , \"username\" : \"some-username1\" , \"password\" : \"some-password1\" }, { \"url\" : \"http://two.example.com/index.html\" , \"username\" : \"some-username2\" , \"password\" : \"some-password2\" } ], \"username\" : \"base-url-username\" , \"password\" : \"base-url-password\" } This will run your custom install and run script for each URL from secrets and use the given URL like so: npm run custom-e2e-test --base-url = http://one.example.com/index.html Each test run will have their own environment variables set: e2e_username = some-username1 e2e_password = some-password1 Environment variables are reset before each test run with their corresponding values from the secrets","title":"Advanced example using custom test script with credentials using Vault"},{"location":"steps/npmExecuteTests/#custom-environment-variables-and-path","text":"stages : - name : Test steps : - name : npmExecuteTests type : npmExecuteTests params : envs : - \"MY_ENV_VAR=value\" paths : - \"/path/to/add\" If you're running uiVeri5 tests, you might need to set additional environment variables or add paths to the $PATH variable. This can be done using the envs and paths parameters: stages : - name : Test steps : - name : npmExecuteTests type : npmExecuteTests params : runCommand : \"/home/node/.npm-global/bin/uiveri5\" installCommand : \"npm install @ui5/uiveri5 --global --quiet\" runOptions : [ \"--seleniumAddress=http://localhost:4444/wd/hub\" ] usernameEnvVar : \"PIPER_SELENIUM_HUB_USER\" passwordEnvVar : \"PIPER_SELENIUM_HUB_PASSWORD\" envs : - \"NPM_CONFIG_PREFIX=~/.npm-global\" paths : - \"~/.npm-global/bin\"","title":"Custom environment variables and $PATH"},{"location":"steps/pipelineCreateScanSummary/","text":"pipelineCreateScanSummary \u00b6 Collect scan result information anc create a summary report Description \u00b6 This step allows you to create a summary report of your scan results. It is for example used to create a markdown file which can be used to create a GitHub issue. Usage \u00b6 We recommend to define values of step parameters via .pipeline/config.yml file . In this case, calling the step is essentially reduced to defining the step name. Calling the step can be done either in an orchestrator specific way (e.g. via a Jenkins library step) or on the command line. Jenkins Command Line library ( 'piper-lib-os' ) pipelineCreateScanSummary script: this piper pipelineCreateScanSummary Parameters \u00b6 Overview - Step \u00b6 Name Mandatory Additional information script (yes) reference to Jenkins main pipeline script failedOnly no outputFilePath no pipelineLink no verbose no activates debug output Overview - Execution Environment \u00b6 Orchestrator-specific only These parameters are relevant for orchestrator usage and not considered when using the command line option. Name Mandatory Additional information Details \u00b6 failedOnly \u00b6 Defines if only failed scans should be included into the summary. back to overview Scope Details Aliases - Type bool Mandatory no Default false Possible values - true - false Secret no Configuration scope \u2612 parameter \u2610 general \u2612 steps \u2612 stages Resource references none outputFilePath \u00b6 Defines the filepath to the target file which will be created by the step. back to overview Scope Details Aliases - Type string Mandatory no Default scanSummary.md Secret no Configuration scope \u2612 parameter \u2610 general \u2612 steps \u2612 stages Resource references none pipelineLink \u00b6 Link to the pipeline (e.g. Jenkins job url) for reference in the scan summary. back to overview Scope Details Aliases - Type string Mandatory no Default $PIPER_pipelineLink (if set) Secret no Configuration scope \u2612 parameter \u2610 general \u2612 steps \u2612 stages Resource references none script \u00b6 The common script environment of the Jenkinsfile running. Typically the reference to the script calling the pipeline step is provided with the this parameter, as in script: this . This allows the function to access the commonPipelineEnvironment for retrieving, e.g. configuration parameters. back to overview Scope Details Aliases - Type Jenkins Script Mandatory yes Default Secret no Configuration scope \u2610 parameter \u2610 general \u2610 steps \u2610 stages Resource references none verbose \u00b6 verbose output back to overview Scope Details Aliases - Type bool Mandatory no Default false Possible values - true - false Secret no Configuration scope \u2612 parameter \u2612 general \u2612 steps \u2612 stages Resource references none","title":"pipelineCreateScanSummary"},{"location":"steps/pipelineCreateScanSummary/#pipelinecreatescansummary","text":"Collect scan result information anc create a summary report","title":"pipelineCreateScanSummary"},{"location":"steps/pipelineCreateScanSummary/#description","text":"This step allows you to create a summary report of your scan results. It is for example used to create a markdown file which can be used to create a GitHub issue.","title":"Description"},{"location":"steps/pipelineCreateScanSummary/#usage","text":"We recommend to define values of step parameters via .pipeline/config.yml file . In this case, calling the step is essentially reduced to defining the step name. Calling the step can be done either in an orchestrator specific way (e.g. via a Jenkins library step) or on the command line. Jenkins Command Line library ( 'piper-lib-os' ) pipelineCreateScanSummary script: this piper pipelineCreateScanSummary","title":"Usage"},{"location":"steps/pipelineCreateScanSummary/#parameters","text":"","title":"Parameters"},{"location":"steps/pipelineCreateScanSummary/#overview-step","text":"Name Mandatory Additional information script (yes) reference to Jenkins main pipeline script failedOnly no outputFilePath no pipelineLink no verbose no activates debug output","title":"Overview - Step"},{"location":"steps/pipelineCreateScanSummary/#overview-execution-environment","text":"Orchestrator-specific only These parameters are relevant for orchestrator usage and not considered when using the command line option. Name Mandatory Additional information","title":"Overview - Execution Environment"},{"location":"steps/pipelineCreateScanSummary/#details","text":"","title":"Details"},{"location":"steps/pipelineCreateScanSummary/#failedonly","text":"Defines if only failed scans should be included into the summary. back to overview Scope Details Aliases - Type bool Mandatory no Default false Possible values - true - false Secret no Configuration scope \u2612 parameter \u2610 general \u2612 steps \u2612 stages Resource references none","title":"failedOnly"},{"location":"steps/pipelineCreateScanSummary/#outputfilepath","text":"Defines the filepath to the target file which will be created by the step. back to overview Scope Details Aliases - Type string Mandatory no Default scanSummary.md Secret no Configuration scope \u2612 parameter \u2610 general \u2612 steps \u2612 stages Resource references none","title":"outputFilePath"},{"location":"steps/pipelineCreateScanSummary/#pipelinelink","text":"Link to the pipeline (e.g. Jenkins job url) for reference in the scan summary. back to overview Scope Details Aliases - Type string Mandatory no Default $PIPER_pipelineLink (if set) Secret no Configuration scope \u2612 parameter \u2610 general \u2612 steps \u2612 stages Resource references none","title":"pipelineLink"},{"location":"steps/pipelineCreateScanSummary/#script","text":"The common script environment of the Jenkinsfile running. Typically the reference to the script calling the pipeline step is provided with the this parameter, as in script: this . This allows the function to access the commonPipelineEnvironment for retrieving, e.g. configuration parameters. back to overview Scope Details Aliases - Type Jenkins Script Mandatory yes Default Secret no Configuration scope \u2610 parameter \u2610 general \u2610 steps \u2610 stages Resource references none","title":"script"},{"location":"steps/pipelineCreateScanSummary/#verbose","text":"verbose output back to overview Scope Details Aliases - Type bool Mandatory no Default false Possible values - true - false Secret no Configuration scope \u2612 parameter \u2612 general \u2612 steps \u2612 stages Resource references none","title":"verbose"},{"location":"steps/pipelineExecute/","text":"pipelineExecute \u00b6 Description \u00b6 Loads and executes a pipeline from another git repository. The idea is to set up a pipeline job in Jenkins that loads a minimal pipeline, which in turn loads the shared library and then uses this step to load the actual pipeline. A centrally maintained pipeline script (Jenkinsfile) can be re-used by several projects using pipelineExecute as outlined in the example below. Prerequisites \u00b6 none Parameters \u00b6 name mandatory default possible values branch no master credentialsId no `` path no Jenkinsfile repoUrl yes script yes branch - The branch of the git repository from which the pipeline should be checked out. credentialsId - The Jenkins credentials containing user and password needed to access a private git repository. In case access to the repository containing the pipeline script is restricted the credentialsId of the credentials used for accessing the repository needs to be provided. The corresponding credentials needs to be configured in Jenkins accordingly. path - The path to the Jenkinsfile, inside the repository, to be loaded. repoUrl - The url to the git repository of the pipeline to be loaded. script - The common script environment of the Jenkinsfile running. Typically the reference to the script calling the pipeline step is provided with the this parameter, as in script: this . This allows the function to access the commonPipelineEnvironment for retrieving, e.g. configuration parameters. Step configuration \u00b6 We recommend to define values of step parameters via config.yml file . In following sections of the config.yml the configuration is possible: parameter general step/stage branch credentialsId path repoUrl script Dependencies \u00b6 The step depends on the following Jenkins plugins pipeline-utility-steps workflow-basic-steps workflow-cps workflow-cps-global-lib workflow-durable-task-step workflow-scm-step Transitive dependencies are omitted. The list might be incomplete. Consider using the ppiper/jenkins-master docker image. This images comes with preinstalled plugins. Side effects \u00b6 none Exceptions \u00b6 Exception If repoUrl is not provided. Example \u00b6 pipelineExecute repoUrl: \"https://github.com/MyOrg/MyPipelineRepo.git\" , branch: 'feature1' , path: 'path/to/Jenkinsfile' , credentialsId: 'MY_REPO_CREDENTIALS'","title":"pipelineExecute"},{"location":"steps/pipelineExecute/#pipelineexecute","text":"","title":"pipelineExecute"},{"location":"steps/pipelineExecute/#description","text":"Loads and executes a pipeline from another git repository. The idea is to set up a pipeline job in Jenkins that loads a minimal pipeline, which in turn loads the shared library and then uses this step to load the actual pipeline. A centrally maintained pipeline script (Jenkinsfile) can be re-used by several projects using pipelineExecute as outlined in the example below.","title":"Description"},{"location":"steps/pipelineExecute/#prerequisites","text":"none","title":"Prerequisites"},{"location":"steps/pipelineExecute/#parameters","text":"name mandatory default possible values branch no master credentialsId no `` path no Jenkinsfile repoUrl yes script yes branch - The branch of the git repository from which the pipeline should be checked out. credentialsId - The Jenkins credentials containing user and password needed to access a private git repository. In case access to the repository containing the pipeline script is restricted the credentialsId of the credentials used for accessing the repository needs to be provided. The corresponding credentials needs to be configured in Jenkins accordingly. path - The path to the Jenkinsfile, inside the repository, to be loaded. repoUrl - The url to the git repository of the pipeline to be loaded. script - The common script environment of the Jenkinsfile running. Typically the reference to the script calling the pipeline step is provided with the this parameter, as in script: this . This allows the function to access the commonPipelineEnvironment for retrieving, e.g. configuration parameters.","title":"Parameters"},{"location":"steps/pipelineExecute/#step-configuration","text":"We recommend to define values of step parameters via config.yml file . In following sections of the config.yml the configuration is possible: parameter general step/stage branch credentialsId path repoUrl script","title":"Step configuration"},{"location":"steps/pipelineExecute/#dependencies","text":"The step depends on the following Jenkins plugins pipeline-utility-steps workflow-basic-steps workflow-cps workflow-cps-global-lib workflow-durable-task-step workflow-scm-step Transitive dependencies are omitted. The list might be incomplete. Consider using the ppiper/jenkins-master docker image. This images comes with preinstalled plugins.","title":"Dependencies"},{"location":"steps/pipelineExecute/#side-effects","text":"none","title":"Side effects"},{"location":"steps/pipelineExecute/#exceptions","text":"Exception If repoUrl is not provided.","title":"Exceptions"},{"location":"steps/pipelineExecute/#example","text":"pipelineExecute repoUrl: \"https://github.com/MyOrg/MyPipelineRepo.git\" , branch: 'feature1' , path: 'path/to/Jenkinsfile' , credentialsId: 'MY_REPO_CREDENTIALS'","title":"Example"},{"location":"steps/pipelineRestartSteps/","text":"pipelineRestartSteps \u00b6 Description \u00b6 Support of restarting failed stages or steps in a pipeline is limited in Jenkins. This has been documented in the Jenkins Jira issue JENKINS-33846 . For declarative pipelines there is a solution available which partially addresses this topic: https://jenkins.io/doc/book/pipeline/running-pipelines/#restart-from-a-stage. Nonetheless, still features are missing, so it can't be used in all cases. The more complex Piper pipelines which share a state via commonPipelineEnvironment will for example not work with the standard restart-from-stage . The step pipelineRestartSteps aims to address this gap and allows individual parts of a pipeline (e.g. a failed deployment) to be restarted. This is done in a way that the pipeline waits for user input to restart the pipeline in case of a failure. In case this user input is not provided the pipeline stops after a timeout which can be configured. Prerequisites \u00b6 none Parameters \u00b6 name mandatory default possible values script yes sendMail no true stepMessage no Do you want to restart? timeoutInSeconds no 900 script - The common script environment of the Jenkinsfile running. Typically the reference to the script calling the pipeline step is provided with the this parameter, as in script: this . This allows the function to access the commonPipelineEnvironment for retrieving, e.g. configuration parameters. sendMail - If it is set to true the step mailSendNotification will be triggered in case of an error. stepMessage - If it is set, the step message can be customized to throw user friendly error messages in Jenkins UI. timeoutInSeconds - Defines the time period where the job waits for input. Default is 15 minutes. Once this time is passed the job enters state FAILED . Step configuration \u00b6 We recommend to define values of step parameters via config.yml file . In following sections of the config.yml the configuration is possible: parameter general step/stage script sendMail X stepMessage X timeoutInSeconds X Example \u00b6 Usage of pipeline step: pipelineRestartSteps ( script: this ) { node { //your steps ... } } Caution Use node inside the step. If a node exists outside the step context, the input step which is triggered in the process will block a Jenkins executor. In case you cannot use node inside this step, please choose the parameter timeoutInSeconds carefully! Side effects \u00b6 none Dependencies \u00b6 The step depends on the following Jenkins plugins email-ext pipeline-input-step pipeline-utility-steps ssh-agent workflow-basic-steps workflow-cps-global-lib workflow-durable-task-step Transitive dependencies are omitted. The list might be incomplete. Consider using the ppiper/jenkins-master docker image. This images comes with preinstalled plugins. Exceptions \u00b6 none","title":"pipelineRestartSteps"},{"location":"steps/pipelineRestartSteps/#pipelinerestartsteps","text":"","title":"pipelineRestartSteps"},{"location":"steps/pipelineRestartSteps/#description","text":"Support of restarting failed stages or steps in a pipeline is limited in Jenkins. This has been documented in the Jenkins Jira issue JENKINS-33846 . For declarative pipelines there is a solution available which partially addresses this topic: https://jenkins.io/doc/book/pipeline/running-pipelines/#restart-from-a-stage. Nonetheless, still features are missing, so it can't be used in all cases. The more complex Piper pipelines which share a state via commonPipelineEnvironment will for example not work with the standard restart-from-stage . The step pipelineRestartSteps aims to address this gap and allows individual parts of a pipeline (e.g. a failed deployment) to be restarted. This is done in a way that the pipeline waits for user input to restart the pipeline in case of a failure. In case this user input is not provided the pipeline stops after a timeout which can be configured.","title":"Description"},{"location":"steps/pipelineRestartSteps/#prerequisites","text":"none","title":"Prerequisites"},{"location":"steps/pipelineRestartSteps/#parameters","text":"name mandatory default possible values script yes sendMail no true stepMessage no Do you want to restart? timeoutInSeconds no 900 script - The common script environment of the Jenkinsfile running. Typically the reference to the script calling the pipeline step is provided with the this parameter, as in script: this . This allows the function to access the commonPipelineEnvironment for retrieving, e.g. configuration parameters. sendMail - If it is set to true the step mailSendNotification will be triggered in case of an error. stepMessage - If it is set, the step message can be customized to throw user friendly error messages in Jenkins UI. timeoutInSeconds - Defines the time period where the job waits for input. Default is 15 minutes. Once this time is passed the job enters state FAILED .","title":"Parameters"},{"location":"steps/pipelineRestartSteps/#step-configuration","text":"We recommend to define values of step parameters via config.yml file . In following sections of the config.yml the configuration is possible: parameter general step/stage script sendMail X stepMessage X timeoutInSeconds X","title":"Step configuration"},{"location":"steps/pipelineRestartSteps/#example","text":"Usage of pipeline step: pipelineRestartSteps ( script: this ) { node { //your steps ... } } Caution Use node inside the step. If a node exists outside the step context, the input step which is triggered in the process will block a Jenkins executor. In case you cannot use node inside this step, please choose the parameter timeoutInSeconds carefully!","title":"Example"},{"location":"steps/pipelineRestartSteps/#side-effects","text":"none","title":"Side effects"},{"location":"steps/pipelineRestartSteps/#dependencies","text":"The step depends on the following Jenkins plugins email-ext pipeline-input-step pipeline-utility-steps ssh-agent workflow-basic-steps workflow-cps-global-lib workflow-durable-task-step Transitive dependencies are omitted. The list might be incomplete. Consider using the ppiper/jenkins-master docker image. This images comes with preinstalled plugins.","title":"Dependencies"},{"location":"steps/pipelineRestartSteps/#exceptions","text":"none","title":"Exceptions"},{"location":"steps/pipelineStashFiles/","text":"pipelineStashFiles \u00b6 Description \u00b6 This step stashes files that are needed in other build steps (on other nodes). Prerequisites \u00b6 none Parameters \u00b6 name mandatory default possible values script yes stashExcludes no stashIncludes no script - The common script environment of the Jenkinsfile running. Typically the reference to the script calling the pipeline step is provided with the this parameter, as in script: this . This allows the function to access the commonPipelineEnvironment for retrieving, e.g. configuration parameters. stashExcludes - Can be used to overwrite the default behavior of existing stashes as well as to define additional stashes. This parameter handles the excludes and can be defined as a map of stash name and exclude patterns. Exclude pattern has to be a string with comma separated patterns as per Pipeline basic step stash stashIncludes - Can be used to overwrite the default behavior of existing stashes as well as to define additional stashes. This parameter handles the includes and can be defined as a map of stash name and include patterns. Include pattern has to be a string with comma separated patterns as per Pipeline basic step stash Details: The step is stashing files before and after the build. This is due to the fact, that some of the code that needs to be stashed, is generated during the build (TypeScript for NPM). stash name mandatory prerequisite pattern buildDescriptor no includes: **/pom.xml, **/.mvn/**, **/assembly.xml, **/.swagger-codegen-ignore, **/package.json, **/requirements.txt, **/setup.py, **/whitesource_config.py, **/mta*.y*ml, **/.npmrc, **/whitesource.*.json, **/whitesource-fs-agent.config, Dockerfile, **/VERSION, **/version.txt, **/Gopkg.*, **/dub.json, **/dub.sdl, **/build.sbt, **/sbtDescriptor.json, **/project/* excludes: **/node_modules/**/package.json checkmarx no Checkmarx is enabled includes: **/*.js, **/*.scala, **/*.go, **/*.d, **/*.di excludes: **/*.mockserver.js, node_modules/**/*.js classFiles no includes: **/target/classes/**/*.class, **/target/test-classes/**/*.class excludes: '' deployDescriptor no includes: **/manifest*.y*ml, **/*.mtaext.y*ml, **/*.mtaext, **/xs-app.json, helm/**, *.y*ml exclude: '' git no includes: **/gitmetadata/** exludes: '' opensourceConfiguration no includes: **/srcclr.yml, **/vulas-custom.properties, **/.nsprc, **/.retireignore, **/.retireignore.json, **/.snyk excludes: '' pipelineConfigAndTests no includes: .pipeline/*.* excludes: '' securityDescriptor no includes: **/xs-security.json exludes: '' sonar no includes: **/jacoco*.exec, **/sonar-project.properties exludes: '' tests no includes: **/pom.xml, **/*.json, **/*.xml, **/src/**, **/node_modules/**, **/specs/**, **/env/**, **/*.js excludes: '' Overwriting default stashing behavior It is possible to overwrite the default behavior of the stashes using the parameters stashIncludes and stashExcludes , e.g. stashIncludes: [buildDescriptor: '**/mybuild.yml] stashExcludes: [tests: '**/NOTRELEVANT.*] Step configuration \u00b6 We recommend to define values of step parameters via config.yml file . In following sections of the config.yml the configuration is possible: parameter general step/stage script stashExcludes stashIncludes Dependencies \u00b6 The step depends on the following Jenkins plugins <none> Transitive dependencies are omitted. The list might be incomplete. Consider using the ppiper/jenkins-master docker image. This images comes with preinstalled plugins. Explanation of pipeline step \u00b6 Usage of pipeline step: pipelineStashFiles script: this { mavenExecute script: this , ... }","title":"pipelineStashFiles"},{"location":"steps/pipelineStashFiles/#pipelinestashfiles","text":"","title":"pipelineStashFiles"},{"location":"steps/pipelineStashFiles/#description","text":"This step stashes files that are needed in other build steps (on other nodes).","title":"Description"},{"location":"steps/pipelineStashFiles/#prerequisites","text":"none","title":"Prerequisites"},{"location":"steps/pipelineStashFiles/#parameters","text":"name mandatory default possible values script yes stashExcludes no stashIncludes no script - The common script environment of the Jenkinsfile running. Typically the reference to the script calling the pipeline step is provided with the this parameter, as in script: this . This allows the function to access the commonPipelineEnvironment for retrieving, e.g. configuration parameters. stashExcludes - Can be used to overwrite the default behavior of existing stashes as well as to define additional stashes. This parameter handles the excludes and can be defined as a map of stash name and exclude patterns. Exclude pattern has to be a string with comma separated patterns as per Pipeline basic step stash stashIncludes - Can be used to overwrite the default behavior of existing stashes as well as to define additional stashes. This parameter handles the includes and can be defined as a map of stash name and include patterns. Include pattern has to be a string with comma separated patterns as per Pipeline basic step stash Details: The step is stashing files before and after the build. This is due to the fact, that some of the code that needs to be stashed, is generated during the build (TypeScript for NPM). stash name mandatory prerequisite pattern buildDescriptor no includes: **/pom.xml, **/.mvn/**, **/assembly.xml, **/.swagger-codegen-ignore, **/package.json, **/requirements.txt, **/setup.py, **/whitesource_config.py, **/mta*.y*ml, **/.npmrc, **/whitesource.*.json, **/whitesource-fs-agent.config, Dockerfile, **/VERSION, **/version.txt, **/Gopkg.*, **/dub.json, **/dub.sdl, **/build.sbt, **/sbtDescriptor.json, **/project/* excludes: **/node_modules/**/package.json checkmarx no Checkmarx is enabled includes: **/*.js, **/*.scala, **/*.go, **/*.d, **/*.di excludes: **/*.mockserver.js, node_modules/**/*.js classFiles no includes: **/target/classes/**/*.class, **/target/test-classes/**/*.class excludes: '' deployDescriptor no includes: **/manifest*.y*ml, **/*.mtaext.y*ml, **/*.mtaext, **/xs-app.json, helm/**, *.y*ml exclude: '' git no includes: **/gitmetadata/** exludes: '' opensourceConfiguration no includes: **/srcclr.yml, **/vulas-custom.properties, **/.nsprc, **/.retireignore, **/.retireignore.json, **/.snyk excludes: '' pipelineConfigAndTests no includes: .pipeline/*.* excludes: '' securityDescriptor no includes: **/xs-security.json exludes: '' sonar no includes: **/jacoco*.exec, **/sonar-project.properties exludes: '' tests no includes: **/pom.xml, **/*.json, **/*.xml, **/src/**, **/node_modules/**, **/specs/**, **/env/**, **/*.js excludes: '' Overwriting default stashing behavior It is possible to overwrite the default behavior of the stashes using the parameters stashIncludes and stashExcludes , e.g. stashIncludes: [buildDescriptor: '**/mybuild.yml] stashExcludes: [tests: '**/NOTRELEVANT.*]","title":"Parameters"},{"location":"steps/pipelineStashFiles/#step-configuration","text":"We recommend to define values of step parameters via config.yml file . In following sections of the config.yml the configuration is possible: parameter general step/stage script stashExcludes stashIncludes","title":"Step configuration"},{"location":"steps/pipelineStashFiles/#dependencies","text":"The step depends on the following Jenkins plugins <none> Transitive dependencies are omitted. The list might be incomplete. Consider using the ppiper/jenkins-master docker image. This images comes with preinstalled plugins.","title":"Dependencies"},{"location":"steps/pipelineStashFiles/#explanation-of-pipeline-step","text":"Usage of pipeline step: pipelineStashFiles script: this { mavenExecute script: this , ... }","title":"Explanation of pipeline step"},{"location":"steps/pipelineStashFilesAfterBuild/","text":"pipelineStashFilesAfterBuild \u00b6 Prerequisites \u00b6 none Parameters \u00b6 name mandatory default possible values noDefaultExludes no [] script yes stashExcludes no [buildResult:, checkmarx:**/*.mockserver.js, node_modules/**/*.js, checkmarxOne:**/*.mockserver.js, node_modules/**/*.js, classFiles:, sonar:] stashIncludes no [buildResult:**/target/*.war, **/target/*.jar, **/*.mtar, **/*.jar.original, **/dist/**, checkmarx:**/*.js, **/*.scala, **/*.py, **/*.go, **/*.d, **/*.di, **/*.xml, **/*.html, **/*.ts, checkmarxOne:**/*.js, **/*.scala, **/*.py, **/*.go, **/*.d, **/*.di, **/*.xml, **/*.html, **/*.ts, classFiles:**/target/classes/**/*.class, **/target/test-classes/**/*.class, sonar:**/jacoco*.exec, **/sonar-project.properties] noDefaultExludes - By default certain files are excluded from stashing (e.g. .git folder). Details can be found as per [Pipeline basic step stash](https://jenkins.io/doc/pipeline/steps/workflow-basic-steps/#stash-stash-some-files-to-be-used-later-in-the-build). This parameter allows to provide a list of stash names for which the standard exclude behavior should be switched off. This will allow you to also stash directories like .git`. script - The common script environment of the Jenkinsfile running. Typically the reference to the script calling the pipeline step is provided with the this parameter, as in script: this . This allows the function to access the commonPipelineEnvironment for retrieving, e.g. configuration parameters. stashExcludes - Can be used to overwrite the default behavior of existing stashes as well as to define additional stashes. This parameter handles the excludes and can be defined as a map of stash name and exclude patterns. Exclude pattern has to be a string with comma separated patterns as per Pipeline basic step stash stashIncludes - Can be used to overwrite the default behavior of existing stashes as well as to define additional stashes. This parameter handles the includes and can be defined as a map of stash name and include patterns. Include pattern has to be a string with comma separated patterns as per Pipeline basic step stash Step configuration \u00b6 We recommend to define values of step parameters via config.yml file . In following sections of the config.yml the configuration is possible: parameter general step/stage noDefaultExludes X script stashExcludes X stashIncludes X Dependencies \u00b6 The step depends on the following Jenkins plugins pipeline-utility-steps workflow-basic-steps workflow-cps-global-lib Transitive dependencies are omitted. The list might be incomplete. Consider using the ppiper/jenkins-master docker image. This images comes with preinstalled plugins.","title":"pipelineStashFilesAfterBuild"},{"location":"steps/pipelineStashFilesAfterBuild/#pipelinestashfilesafterbuild","text":"","title":"pipelineStashFilesAfterBuild"},{"location":"steps/pipelineStashFilesAfterBuild/#prerequisites","text":"none","title":"Prerequisites"},{"location":"steps/pipelineStashFilesAfterBuild/#parameters","text":"name mandatory default possible values noDefaultExludes no [] script yes stashExcludes no [buildResult:, checkmarx:**/*.mockserver.js, node_modules/**/*.js, checkmarxOne:**/*.mockserver.js, node_modules/**/*.js, classFiles:, sonar:] stashIncludes no [buildResult:**/target/*.war, **/target/*.jar, **/*.mtar, **/*.jar.original, **/dist/**, checkmarx:**/*.js, **/*.scala, **/*.py, **/*.go, **/*.d, **/*.di, **/*.xml, **/*.html, **/*.ts, checkmarxOne:**/*.js, **/*.scala, **/*.py, **/*.go, **/*.d, **/*.di, **/*.xml, **/*.html, **/*.ts, classFiles:**/target/classes/**/*.class, **/target/test-classes/**/*.class, sonar:**/jacoco*.exec, **/sonar-project.properties] noDefaultExludes - By default certain files are excluded from stashing (e.g. .git folder). Details can be found as per [Pipeline basic step stash](https://jenkins.io/doc/pipeline/steps/workflow-basic-steps/#stash-stash-some-files-to-be-used-later-in-the-build). This parameter allows to provide a list of stash names for which the standard exclude behavior should be switched off. This will allow you to also stash directories like .git`. script - The common script environment of the Jenkinsfile running. Typically the reference to the script calling the pipeline step is provided with the this parameter, as in script: this . This allows the function to access the commonPipelineEnvironment for retrieving, e.g. configuration parameters. stashExcludes - Can be used to overwrite the default behavior of existing stashes as well as to define additional stashes. This parameter handles the excludes and can be defined as a map of stash name and exclude patterns. Exclude pattern has to be a string with comma separated patterns as per Pipeline basic step stash stashIncludes - Can be used to overwrite the default behavior of existing stashes as well as to define additional stashes. This parameter handles the includes and can be defined as a map of stash name and include patterns. Include pattern has to be a string with comma separated patterns as per Pipeline basic step stash","title":"Parameters"},{"location":"steps/pipelineStashFilesAfterBuild/#step-configuration","text":"We recommend to define values of step parameters via config.yml file . In following sections of the config.yml the configuration is possible: parameter general step/stage noDefaultExludes X script stashExcludes X stashIncludes X","title":"Step configuration"},{"location":"steps/pipelineStashFilesAfterBuild/#dependencies","text":"The step depends on the following Jenkins plugins pipeline-utility-steps workflow-basic-steps workflow-cps-global-lib Transitive dependencies are omitted. The list might be incomplete. Consider using the ppiper/jenkins-master docker image. This images comes with preinstalled plugins.","title":"Dependencies"},{"location":"steps/pipelineStashFilesBeforeBuild/","text":"pipelineStashFilesBeforeBuild \u00b6 Description \u00b6 This step stashes files that are needed in other build steps (on other nodes). Prerequisites \u00b6 none Parameters \u00b6 name mandatory default possible values noDefaultExludes no [git] script yes stashExcludes no [buildDescriptor:**/node_modules/**/package.json, deployDescriptor:, git:, opensourceConfiguration:, pipelineConfigAndTests:, securityDescriptor:, tests:, checkmarx:**/*.mockserver.js, node_modules/**/*.js, checkmarxOne:**/*.mockserver.js, node_modules/**/*.js] stashIncludes no [buildDescriptor:**/pom.xml, **/.mvn/**, **/assembly.xml, **/.swagger-codegen-ignore, **/package.json, **/requirements.txt, **/setup.py, **/mta*.y*ml, **/.npmrc, **/Dockerfile, .hadolint.yaml, **/VERSION, **/version.txt, **/Gopkg.*, **/dub.json, **/dub.sdl, **/build.sbt, **/sbtDescriptor.json, **/project/*, **/ui5.yaml, **/ui5.yml, deployDescriptor:**/manifest*.y*ml, **/*.mtaext.y*ml, **/*.mtaext, **/xs-app.json, helm/**, **/*.y*ml, **/*.tpl, **/*.tgz, git:.git/**, opensourceConfiguration:**/srcclr.yml, **/vulas-custom.properties, **/.nsprc, **/.retireignore, **/.retireignore.json, **/.snyk, **/wss-unified-agent.config, **/vendor/**/*, pipelineConfigAndTests:.pipeline/**, securityDescriptor:**/xs-security.json, tests:**/pom.xml, **/*.json, **/*.xml, **/src/**, **/node_modules/**, **/specs/**, **/env/**, **/*.js, **/tests/**, **/*.html, **/*.css, **/*.properties, **/*.cds, checkmarx:**/*.js, **/*.scala, **/*.py, **/*.go, **/*.xml, **/*.html, **/*.d, **/*.di, **/*.ts, checkmarxOne:**/*.js, **/*.scala, **/*.py, **/*.go, **/*.xml, **/*.html, **/*.d, **/*.di, **/*.ts] noDefaultExludes - By default certain files are excluded from stashing (e.g. .git folder). Details can be found as per Pipeline basic step stash . This parameter allows to provide a list of stash names for which the standard exclude behavior should be switched off. This will allow you to also stash directories like .git . script - The common script environment of the Jenkinsfile running. Typically the reference to the script calling the pipeline step is provided with the this parameter, as in script: this . This allows the function to access the commonPipelineEnvironment for retrieving, e.g. configuration parameters. stashExcludes - Can be used to overwrite the default behavior of existing stashes as well as to define additional stashes. This parameter handles the excludes and can be defined as a map of stash name and exclude patterns. Exclude pattern has to be a string with comma separated patterns as per Pipeline basic step stash stashIncludes - Can be used to overwrite the default behavior of existing stashes as well as to define additional stashes. This parameter handles the includes and can be defined as a map of stash name and include patterns. Include pattern has to be a string with comma separated patterns as per Pipeline basic step stash Step configuration \u00b6 We recommend to define values of step parameters via config.yml file . In following sections of the config.yml the configuration is possible: parameter general step/stage noDefaultExludes X script stashExcludes X stashIncludes X Dependencies \u00b6 The step depends on the following Jenkins plugins pipeline-utility-steps workflow-basic-steps workflow-cps-global-lib Transitive dependencies are omitted. The list might be incomplete. Consider using the ppiper/jenkins-master docker image. This images comes with preinstalled plugins.","title":"pipelineStashFilesBeforeBuild"},{"location":"steps/pipelineStashFilesBeforeBuild/#pipelinestashfilesbeforebuild","text":"","title":"pipelineStashFilesBeforeBuild"},{"location":"steps/pipelineStashFilesBeforeBuild/#description","text":"This step stashes files that are needed in other build steps (on other nodes).","title":"Description"},{"location":"steps/pipelineStashFilesBeforeBuild/#prerequisites","text":"none","title":"Prerequisites"},{"location":"steps/pipelineStashFilesBeforeBuild/#parameters","text":"name mandatory default possible values noDefaultExludes no [git] script yes stashExcludes no [buildDescriptor:**/node_modules/**/package.json, deployDescriptor:, git:, opensourceConfiguration:, pipelineConfigAndTests:, securityDescriptor:, tests:, checkmarx:**/*.mockserver.js, node_modules/**/*.js, checkmarxOne:**/*.mockserver.js, node_modules/**/*.js] stashIncludes no [buildDescriptor:**/pom.xml, **/.mvn/**, **/assembly.xml, **/.swagger-codegen-ignore, **/package.json, **/requirements.txt, **/setup.py, **/mta*.y*ml, **/.npmrc, **/Dockerfile, .hadolint.yaml, **/VERSION, **/version.txt, **/Gopkg.*, **/dub.json, **/dub.sdl, **/build.sbt, **/sbtDescriptor.json, **/project/*, **/ui5.yaml, **/ui5.yml, deployDescriptor:**/manifest*.y*ml, **/*.mtaext.y*ml, **/*.mtaext, **/xs-app.json, helm/**, **/*.y*ml, **/*.tpl, **/*.tgz, git:.git/**, opensourceConfiguration:**/srcclr.yml, **/vulas-custom.properties, **/.nsprc, **/.retireignore, **/.retireignore.json, **/.snyk, **/wss-unified-agent.config, **/vendor/**/*, pipelineConfigAndTests:.pipeline/**, securityDescriptor:**/xs-security.json, tests:**/pom.xml, **/*.json, **/*.xml, **/src/**, **/node_modules/**, **/specs/**, **/env/**, **/*.js, **/tests/**, **/*.html, **/*.css, **/*.properties, **/*.cds, checkmarx:**/*.js, **/*.scala, **/*.py, **/*.go, **/*.xml, **/*.html, **/*.d, **/*.di, **/*.ts, checkmarxOne:**/*.js, **/*.scala, **/*.py, **/*.go, **/*.xml, **/*.html, **/*.d, **/*.di, **/*.ts] noDefaultExludes - By default certain files are excluded from stashing (e.g. .git folder). Details can be found as per Pipeline basic step stash . This parameter allows to provide a list of stash names for which the standard exclude behavior should be switched off. This will allow you to also stash directories like .git . script - The common script environment of the Jenkinsfile running. Typically the reference to the script calling the pipeline step is provided with the this parameter, as in script: this . This allows the function to access the commonPipelineEnvironment for retrieving, e.g. configuration parameters. stashExcludes - Can be used to overwrite the default behavior of existing stashes as well as to define additional stashes. This parameter handles the excludes and can be defined as a map of stash name and exclude patterns. Exclude pattern has to be a string with comma separated patterns as per Pipeline basic step stash stashIncludes - Can be used to overwrite the default behavior of existing stashes as well as to define additional stashes. This parameter handles the includes and can be defined as a map of stash name and include patterns. Include pattern has to be a string with comma separated patterns as per Pipeline basic step stash","title":"Parameters"},{"location":"steps/pipelineStashFilesBeforeBuild/#step-configuration","text":"We recommend to define values of step parameters via config.yml file . In following sections of the config.yml the configuration is possible: parameter general step/stage noDefaultExludes X script stashExcludes X stashIncludes X","title":"Step configuration"},{"location":"steps/pipelineStashFilesBeforeBuild/#dependencies","text":"The step depends on the following Jenkins plugins pipeline-utility-steps workflow-basic-steps workflow-cps-global-lib Transitive dependencies are omitted. The list might be incomplete. Consider using the ppiper/jenkins-master docker image. This images comes with preinstalled plugins.","title":"Dependencies"},{"location":"steps/piperLoadGlobalExtensions/","text":"piperLoadGlobalExtensions \u00b6 Description \u00b6 This step is part of the step setupCommonPipelineEnvironment and should not be used outside independently in a custom pipeline. This step allows users to define extensions (https://sap.github.io/jenkins-library/extensibility/#1-extend-individual-stages) globally instead of in each repository. Instead of defining the extensions in the .pipeline folder the extensions are defined in another repository. You can also place a file called extension_configuration.yml in this repository. Configuration defined in this file will be treated as default values with a lower precedence then custom defaults defined in the project configuration. You can also define additional Jenkins libraries these extensions depend on using a yaml file called sharedLibraries.yml: Example: - name: my-extension-dependency version: git-tag Parameters \u00b6 name mandatory default possible values customDefaults no customDefaultsFromFiles no globalExtensionsDirectory no .pipeline/tmp/global_extensions/ globalExtensionsRepository no globalExtensionsRepositoryCredentialsId no globalExtensionsVersion no script yes customDefaults - This step will reinitialize the defaults. Make sure to pass the same customDefaults as to the step setupCommonPipelineEnvironment customDefaultsFromFiles - This step will reinitialize the defaults. Make sure to pass the same customDefaultsFromFiles as to the step setupCommonPipelineEnvironment globalExtensionsDirectory - Directory where the extensions are cloned to globalExtensionsRepository - Git url of the repository containing the extensions globalExtensionsRepositoryCredentialsId - Credentials required to clone the repository globalExtensionsVersion - Version of the extensions which should be used, e.g. the tag name script - The common script environment of the Jenkinsfile running. Typically the reference to the script calling the pipeline step is provided with the this parameter, as in script: this . This allows the function to access the commonPipelineEnvironment for retrieving, e.g. configuration parameters. Step configuration \u00b6 We recommend to define values of step parameters via config.yml file . In following sections of the config.yml the configuration is possible: parameter general step/stage customDefaults customDefaultsFromFiles globalExtensionsDirectory X globalExtensionsRepository X globalExtensionsRepositoryCredentialsId X globalExtensionsVersion X script Dependencies \u00b6 The step depends on the following Jenkins plugins pipeline-utility-steps workflow-basic-steps workflow-cps-global-lib workflow-scm-step Transitive dependencies are omitted. The list might be incomplete. Consider using the ppiper/jenkins-master docker image. This images comes with preinstalled plugins.","title":"piperLoadGlobalExtensions"},{"location":"steps/piperLoadGlobalExtensions/#piperloadglobalextensions","text":"","title":"piperLoadGlobalExtensions"},{"location":"steps/piperLoadGlobalExtensions/#description","text":"This step is part of the step setupCommonPipelineEnvironment and should not be used outside independently in a custom pipeline. This step allows users to define extensions (https://sap.github.io/jenkins-library/extensibility/#1-extend-individual-stages) globally instead of in each repository. Instead of defining the extensions in the .pipeline folder the extensions are defined in another repository. You can also place a file called extension_configuration.yml in this repository. Configuration defined in this file will be treated as default values with a lower precedence then custom defaults defined in the project configuration. You can also define additional Jenkins libraries these extensions depend on using a yaml file called sharedLibraries.yml: Example: - name: my-extension-dependency version: git-tag","title":"Description"},{"location":"steps/piperLoadGlobalExtensions/#parameters","text":"name mandatory default possible values customDefaults no customDefaultsFromFiles no globalExtensionsDirectory no .pipeline/tmp/global_extensions/ globalExtensionsRepository no globalExtensionsRepositoryCredentialsId no globalExtensionsVersion no script yes customDefaults - This step will reinitialize the defaults. Make sure to pass the same customDefaults as to the step setupCommonPipelineEnvironment customDefaultsFromFiles - This step will reinitialize the defaults. Make sure to pass the same customDefaultsFromFiles as to the step setupCommonPipelineEnvironment globalExtensionsDirectory - Directory where the extensions are cloned to globalExtensionsRepository - Git url of the repository containing the extensions globalExtensionsRepositoryCredentialsId - Credentials required to clone the repository globalExtensionsVersion - Version of the extensions which should be used, e.g. the tag name script - The common script environment of the Jenkinsfile running. Typically the reference to the script calling the pipeline step is provided with the this parameter, as in script: this . This allows the function to access the commonPipelineEnvironment for retrieving, e.g. configuration parameters.","title":"Parameters"},{"location":"steps/piperLoadGlobalExtensions/#step-configuration","text":"We recommend to define values of step parameters via config.yml file . In following sections of the config.yml the configuration is possible: parameter general step/stage customDefaults customDefaultsFromFiles globalExtensionsDirectory X globalExtensionsRepository X globalExtensionsRepositoryCredentialsId X globalExtensionsVersion X script","title":"Step configuration"},{"location":"steps/piperLoadGlobalExtensions/#dependencies","text":"The step depends on the following Jenkins plugins pipeline-utility-steps workflow-basic-steps workflow-cps-global-lib workflow-scm-step Transitive dependencies are omitted. The list might be incomplete. Consider using the ppiper/jenkins-master docker image. This images comes with preinstalled plugins.","title":"Dependencies"},{"location":"steps/piperPublishWarnings/","text":"piperPublishWarnings \u00b6 Description \u00b6 This step scans the current build log for messages produces by the Piper library steps and publishes them on the Jenkins job run as Piper warnings via the warnings-ng plugin. The default parser detects log entries with the following pattern: [<SEVERITY>] <MESSAGE> (<LIBRARY>/<STEP>) Parameters \u00b6 name mandatory default possible values parserId no piper parserName no Piper parserPattern no \\[(INFO|WARNING|ERROR)\\] (.*) \\(([^) ]*)\\/([^) ]*)\\) parserScript no return builder.guessSeverity(matcher.group(1)).setMessage(matcher.group(2)).setModuleName(matcher.group(3)).setType(matcher.group(4)).buildOptional() recordIssuesSettings no [skipBlames:true, enabledForFailure:true] script yes parserId - The id of the Groovy script parser. If the id is not present in the current Jenkins configuration it is created. parserName - The display name for the warnings parsed by the parser. Only considered if a new parser is created. parserPattern - The pattern used to parse the log file. Only considered if a new parser is created. parserScript - The script used to parse the matches produced by the pattern into issues. Only considered if a new parser is created. see https://github.com/jenkinsci/analysis-model/blob/master/src/main/java/edu/hm/hafner/analysis/IssueBuilder.java recordIssuesSettings - Settings that are passed to the recordIssues step of the warnings-ng plugin. see https://github.com/jenkinsci/warnings-ng-plugin/blob/master/doc/Documentation.md#configuration script - The common script environment of the Jenkinsfile running. Typically the reference to the script calling the pipeline step is provided with the this parameter, as in script: this . This allows the function to access the commonPipelineEnvironment for retrieving, e.g. configuration parameters. Step configuration \u00b6 We recommend to define values of step parameters via config.yml file . In following sections of the config.yml the configuration is possible: parameter general step/stage parserId X parserName X parserPattern X parserScript X recordIssuesSettings X script Dependencies \u00b6 The step depends on the following Jenkins plugins pipeline-utility-steps warnings-ng workflow-basic-steps workflow-cps-global-lib Transitive dependencies are omitted. The list might be incomplete. Consider using the ppiper/jenkins-master docker image. This images comes with preinstalled plugins.","title":"piperPublishWarnings"},{"location":"steps/piperPublishWarnings/#piperpublishwarnings","text":"","title":"piperPublishWarnings"},{"location":"steps/piperPublishWarnings/#description","text":"This step scans the current build log for messages produces by the Piper library steps and publishes them on the Jenkins job run as Piper warnings via the warnings-ng plugin. The default parser detects log entries with the following pattern: [<SEVERITY>] <MESSAGE> (<LIBRARY>/<STEP>)","title":"Description"},{"location":"steps/piperPublishWarnings/#parameters","text":"name mandatory default possible values parserId no piper parserName no Piper parserPattern no \\[(INFO|WARNING|ERROR)\\] (.*) \\(([^) ]*)\\/([^) ]*)\\) parserScript no return builder.guessSeverity(matcher.group(1)).setMessage(matcher.group(2)).setModuleName(matcher.group(3)).setType(matcher.group(4)).buildOptional() recordIssuesSettings no [skipBlames:true, enabledForFailure:true] script yes parserId - The id of the Groovy script parser. If the id is not present in the current Jenkins configuration it is created. parserName - The display name for the warnings parsed by the parser. Only considered if a new parser is created. parserPattern - The pattern used to parse the log file. Only considered if a new parser is created. parserScript - The script used to parse the matches produced by the pattern into issues. Only considered if a new parser is created. see https://github.com/jenkinsci/analysis-model/blob/master/src/main/java/edu/hm/hafner/analysis/IssueBuilder.java recordIssuesSettings - Settings that are passed to the recordIssues step of the warnings-ng plugin. see https://github.com/jenkinsci/warnings-ng-plugin/blob/master/doc/Documentation.md#configuration script - The common script environment of the Jenkinsfile running. Typically the reference to the script calling the pipeline step is provided with the this parameter, as in script: this . This allows the function to access the commonPipelineEnvironment for retrieving, e.g. configuration parameters.","title":"Parameters"},{"location":"steps/piperPublishWarnings/#step-configuration","text":"We recommend to define values of step parameters via config.yml file . In following sections of the config.yml the configuration is possible: parameter general step/stage parserId X parserName X parserPattern X parserScript X recordIssuesSettings X script","title":"Step configuration"},{"location":"steps/piperPublishWarnings/#dependencies","text":"The step depends on the following Jenkins plugins pipeline-utility-steps warnings-ng workflow-basic-steps workflow-cps-global-lib Transitive dependencies are omitted. The list might be incomplete. Consider using the ppiper/jenkins-master docker image. This images comes with preinstalled plugins.","title":"Dependencies"},{"location":"steps/prepareDefaultValues/","text":"prepareDefaultValues \u00b6 Description \u00b6 Loads the pipeline library default values from the file resources/default_pipeline_environment.yml . Afterwards the values can be loaded by the method: ConfigurationLoader.defaultStepConfiguration Parameters \u00b6 name mandatory default possible values script yes script - The common script environment of the Jenkinsfile running. Typically the reference to the script calling the pipeline step is provided with the this parameter, as in script: this . This allows the function to access the commonPipelineEnvironment for retrieving, e.g. configuration parameters. Step configuration \u00b6 We recommend to define values of step parameters via config.yml file . In following sections of the config.yml the configuration is possible: parameter general step/stage script Exceptions \u00b6 None Dependencies \u00b6 The step depends on the following Jenkins plugins pipeline-utility-steps workflow-basic-steps workflow-cps-global-lib Transitive dependencies are omitted. The list might be incomplete. Consider using the ppiper/jenkins-master docker image. This images comes with preinstalled plugins. Example \u00b6 prepareDefaultValues ()","title":"prepareDefaultValues"},{"location":"steps/prepareDefaultValues/#preparedefaultvalues","text":"","title":"prepareDefaultValues"},{"location":"steps/prepareDefaultValues/#description","text":"Loads the pipeline library default values from the file resources/default_pipeline_environment.yml . Afterwards the values can be loaded by the method: ConfigurationLoader.defaultStepConfiguration","title":"Description"},{"location":"steps/prepareDefaultValues/#parameters","text":"name mandatory default possible values script yes script - The common script environment of the Jenkinsfile running. Typically the reference to the script calling the pipeline step is provided with the this parameter, as in script: this . This allows the function to access the commonPipelineEnvironment for retrieving, e.g. configuration parameters.","title":"Parameters"},{"location":"steps/prepareDefaultValues/#step-configuration","text":"We recommend to define values of step parameters via config.yml file . In following sections of the config.yml the configuration is possible: parameter general step/stage script","title":"Step configuration"},{"location":"steps/prepareDefaultValues/#exceptions","text":"None","title":"Exceptions"},{"location":"steps/prepareDefaultValues/#dependencies","text":"The step depends on the following Jenkins plugins pipeline-utility-steps workflow-basic-steps workflow-cps-global-lib Transitive dependencies are omitted. The list might be incomplete. Consider using the ppiper/jenkins-master docker image. This images comes with preinstalled plugins.","title":"Dependencies"},{"location":"steps/prepareDefaultValues/#example","text":"prepareDefaultValues ()","title":"Example"},{"location":"steps/protecodeExecuteScan/","text":"protecodeExecuteScan \u00b6 Black Duck Binary Analysis (BDBA), previously known as Protecode is an Open Source Vulnerability Scanner that is capable of scanning binaries. It can be used to scan docker images but is supports many other programming languages especially those of the C family. Description \u00b6 Black Duck Binary Analysis (previously known as Protecode) is an Open Source Vulnerability Scan tool which provides the composition of Open Source components in a product along with Security information (no license info is provided). BDBA (Protecode) uses a combination of static binary analysis techniques to X-ray the provided software package to identify third-party software components and their exact versions with a high level of confidence. Methods range from simple string matching to proprietary patent-pending techniques. Auditing findings (Triaging) Triaging is now supported by the BDBA (Protecode) backend and also Piper does consider this information during the analysis of the scan results though product versions are not supported by BDBA (Protecode). Therefore please make sure that the fileName you are providing does either contain a stable version or that it does not contain one at all. By ensuring that you are able to triage CVEs globally on the upload file's name without affecting any other artifacts scanned in the same BDBA (Protecode) group and as such triaged vulnerabilities will be considered during the next scan and will not fail the build anymore. Usage \u00b6 We recommend to define values of step parameters via .pipeline/config.yml file . In this case, calling the step is essentially reduced to defining the step name. Calling the step can be done either in an orchestrator specific way (e.g. via a Jenkins library step) or on the command line. Jenkins Command Line library ( 'piper-lib-os' ) protecodeExecuteScan script: this piper protecodeExecuteScan Outputs \u00b6 Output type Details influx measurement step_data protecode measurement protecode_data excluded_vulnerabilities historical_vulnerabilities major_vulnerabilities minor_vulnerabilities triaged_vulnerabilities vulnerabilities Prerequisites \u00b6 Create a Username / Password credential with the Protecode user in your Jenkins credential store Look up your Group ID using REST API via curl -u <username> \"https://<protecode host>/api/groups/\" . If the image is on a protected registry you can provide a Docker config.json file containing the credential information for the registry. You can either use docker login (see the Docker documentation for details) or you can create the file manually using the following script. #!/bin/bash auth = $( echo -n \" $USER : $PASSWORD \" | base64 -w0 ) cat <<EOF > config.json { \"auths\": { \"$REGISTRY\": { \"auth\": \"$auth\" } } } EOF REGISTRY is the URL of the protected registry (Example: https://index.docker.io/v1 ). Attention: If you reference the file in --dockerConfigJSON or upload the file to the Jenkins credential store, the file has to be named config.json . Parameters \u00b6 Overview - Step \u00b6 Name Mandatory Additional information group yes password (yes) pass via ENV, Vault or Jenkins credentials ( protecodeCredentialsId ) script (yes) reference to Jenkins main pipeline script serverUrl yes username (yes) pass via ENV, Vault or Jenkins credentials ( protecodeCredentialsId ) cleanupMode no containerRegistryPassword no pass via ENV or Jenkins credentials containerRegistryUser no pass via ENV or Jenkins credentials customDataJSONMap no customScanVersion no dockerConfigJSON no pass via ENV, Vault or Jenkins credentials ( dockerConfigJsonCredentialsId ) dockerRegistryUrl no excludeCVEs no failOnSevereVulnerabilities no fetchUrl no filePath no pullRequestName no replaceProductId no reportFileName no scanImage no timeoutMinutes no userAPIKey no pass via ENV, Vault or Jenkins credentials ( protecodeApiKeyCredentialsId ) verbose no activates debug output verifyOnly no version no versioningModel no Overview - Execution Environment \u00b6 Orchestrator-specific only These parameters are relevant for orchestrator usage and not considered when using the command line option. Name Mandatory Additional information Details \u00b6 cleanupMode \u00b6 Decides which parts are removed from the Protecode backend after the scan back to overview Scope Details Aliases - Type string Mandatory no Default binary Possible values - none - binary - complete Secret no Configuration scope \u2612 parameter \u2610 general \u2612 steps \u2612 stages Resource references none containerRegistryPassword \u00b6 For buildTool: docker : Password for container registry access - typically provided by the CI/CD environment. back to overview Scope Details Aliases - Type string Mandatory no Default $PIPER_containerRegistryPassword (if set) Secret yes Configuration scope \u2612 parameter \u2610 general \u2612 steps \u2612 stages Resource references commonPipelineEnvironment : reference to: container/repositoryPassword commonPipelineEnvironment : reference to: custom/repositoryPassword containerRegistryUser \u00b6 For buildTool: docker : Username for container registry access - typically provided by the CI/CD environment. back to overview Scope Details Aliases - Type string Mandatory no Default $PIPER_containerRegistryUser (if set) Secret yes Configuration scope \u2612 parameter \u2610 general \u2612 steps \u2612 stages Resource references commonPipelineEnvironment : reference to: container/repositoryUsername commonPipelineEnvironment : reference to: custom/repositoryUsername customDataJSONMap \u00b6 The JSON map of key-value pairs to be included in this scan's Custom Data (See protecode API). back to overview Scope Details Aliases - Type string Mandatory no Default $PIPER_customDataJSONMap (if set) Secret no Configuration scope \u2612 parameter \u2612 general \u2612 steps \u2612 stages Resource references none customScanVersion \u00b6 Defines a custom version for the BDBA scan which deviates from the typical versioning pattern using version and versioningModel . It allows to set non-numeric versions as well and supersedes the value of version which is calculated automatically. The parameter is also used by other scan steps (e.g. Fortify, Sonar, WhiteSource) and thus allows a common custom version across scan tools. back to overview Scope Details Aliases - Type string Mandatory no Default $PIPER_customScanVersion (if set) Secret no Configuration scope \u2612 parameter \u2612 general \u2612 steps \u2612 stages Resource references none dockerConfigJSON \u00b6 Path to the file .docker/config.json - this is typically provided by your CI/CD system. You can find more details about the Docker credentials in the Docker documentation . back to overview Scope Details Aliases - Type string Mandatory no Default $PIPER_dockerConfigJSON (if set) Secret yes Configuration scope \u2612 parameter \u2610 general \u2612 steps \u2612 stages Resource references commonPipelineEnvironment : reference to: custom/dockerConfigJSON Jenkins credential id: id: dockerConfigJsonCredentialsId Vault resource: name: dockerConfigFileVaultSecretName default value: docker-config Vault paths: $(vaultPath)/docker-config $(vaultBasePath)/$(vaultPipelineName)/docker-config $(vaultBasePath)/GROUP-SECRETS/docker-config dockerRegistryUrl \u00b6 The reference to the docker registry to scan with Protecode back to overview Scope Details Aliases - Type string Mandatory no Default $PIPER_dockerRegistryUrl (if set) Secret no Configuration scope \u2612 parameter \u2612 general \u2612 steps \u2612 stages Resource references commonPipelineEnvironment : reference to: container/registryUrl excludeCVEs \u00b6 DEPRECATED: Do use triaging within the Protecode UI instead back to overview Scope Details Aliases protecodeExcludeCVEs Type string Mandatory no Default '' Secret no Configuration scope \u2612 parameter \u2610 general \u2612 steps \u2612 stages Resource references none failOnSevereVulnerabilities \u00b6 Whether to fail the step on severe vulnerabilties or not back to overview Scope Details Aliases protecodeFailOnSevereVulnerabilities Type bool Mandatory no Default true Possible values - true - false Secret no Configuration scope \u2612 parameter \u2610 general \u2612 steps \u2612 stages Resource references none fetchUrl \u00b6 The URL to fetch the file or image to scan with Protecode. The URL must be accessible via public HTTP GET request. To fetch a docker image the URL needs a 'docker-registry-' prefix. back to overview Scope Details Aliases - Type string Mandatory no Default $PIPER_fetchUrl (if set) Secret no Configuration scope \u2612 parameter \u2610 general \u2612 steps \u2612 stages Resource references none filePath \u00b6 The path to the file from local workspace to scan with Protecode back to overview Scope Details Aliases - Type string Mandatory no Default $PIPER_filePath (if set) Secret no Configuration scope \u2612 parameter \u2610 general \u2612 steps \u2612 stages Resource references none group \u00b6 The Protecode group ID of your team back to overview Scope Details Aliases protecodeGroup Type string Mandatory yes Default $PIPER_group (if set) Secret no Configuration scope \u2612 parameter \u2610 general \u2612 steps \u2612 stages Resource references none password \u00b6 Password which is used for the user back to overview Scope Details Aliases - Type string Mandatory yes Default $PIPER_password (if set) Secret yes Configuration scope \u2612 parameter \u2610 general \u2612 steps \u2612 stages Resource references Jenkins credential id: id: protecodeCredentialsId reference to: password Vault resource: name: protecodeVaultSecretName default value: protecode Vault paths: $(vaultPath)/protecode $(vaultBasePath)/$(vaultPipelineName)/protecode $(vaultBasePath)/GROUP-SECRETS/protecode pullRequestName \u00b6 The name of the pull request back to overview Scope Details Aliases - Type string Mandatory no Default $PIPER_pullRequestName (if set) Secret no Configuration scope \u2612 parameter \u2610 general \u2612 steps \u2612 stages Resource references none replaceProductId \u00b6 Specify which application binary will be replaced and rescanned and product id remains unchanged. By using this parameter, Protecode avoids creating multiple same products. Note this will affect results and feeds. If product id is not specified, then Piper starts auto detection mechanism, more precisely it searches a product id with scanned product name in that specified group, if there are several scans have been done with the same product name then the latest scan id will be fetched from BDBA backend. After obtaining product id, Piper re-uploads / replaces new binary without affecting already existing product id. back to overview Scope Details Aliases - Type int Mandatory no Default 0 Secret no Configuration scope \u2612 parameter \u2610 general \u2612 steps \u2612 stages Resource references none reportFileName \u00b6 The file name of the report to be created back to overview Scope Details Aliases - Type string Mandatory no Default protecode_report.pdf Secret no Configuration scope \u2612 parameter \u2610 general \u2612 steps \u2612 stages Resource references none scanImage \u00b6 The reference to the docker image to scan with Protecode. Note: If possible please also check fetchUrl parameter, which might help you to optimize upload time. back to overview Scope Details Aliases dockerImage Type string Mandatory no Default $PIPER_scanImage (if set) Secret no Configuration scope \u2612 parameter \u2612 general \u2612 steps \u2612 stages Resource references commonPipelineEnvironment : reference to: container/imageNameTag script \u00b6 The common script environment of the Jenkinsfile running. Typically the reference to the script calling the pipeline step is provided with the this parameter, as in script: this . This allows the function to access the commonPipelineEnvironment for retrieving, e.g. configuration parameters. back to overview Scope Details Aliases - Type Jenkins Script Mandatory yes Default Secret no Configuration scope \u2610 parameter \u2610 general \u2610 steps \u2610 stages Resource references none serverUrl \u00b6 The URL to the Protecode backend back to overview Scope Details Aliases protecodeServerUrl Type string Mandatory yes Default $PIPER_serverUrl (if set) Secret no Configuration scope \u2612 parameter \u2612 general \u2612 steps \u2612 stages Resource references none timeoutMinutes \u00b6 The timeout to wait for the scan to finish back to overview Scope Details Aliases protecodeTimeoutMinutes Type string Mandatory no Default 60 Secret no Configuration scope \u2612 parameter \u2610 general \u2612 steps \u2612 stages Resource references none userAPIKey \u00b6 User API key which is used for API calls. Replacement for username and password / basic authentication. back to overview Scope Details Aliases - Type string Mandatory no Default $PIPER_userAPIKey (if set) Secret yes Configuration scope \u2612 parameter \u2610 general \u2612 steps \u2612 stages Resource references Jenkins credential id: id: protecodeApiKeyCredentialsId reference to: userAPIKey Vault resource: name: protecodeApiKeyVaultSecretName default value: protecode Vault paths: $(vaultPath)/protecode $(vaultBasePath)/$(vaultPipelineName)/protecode $(vaultBasePath)/GROUP-SECRETS/protecode username \u00b6 User which is used for the protecode scan back to overview Scope Details Aliases user ( deprecated ) Type string Mandatory yes Default $PIPER_username (if set) Secret yes Configuration scope \u2612 parameter \u2610 general \u2612 steps \u2612 stages Resource references Jenkins credential id: id: protecodeCredentialsId reference to: username Vault resource: name: protecodeVaultSecretName default value: protecode Vault paths: $(vaultPath)/protecode $(vaultBasePath)/$(vaultPipelineName)/protecode $(vaultBasePath)/GROUP-SECRETS/protecode verbose \u00b6 verbose output back to overview Scope Details Aliases - Type bool Mandatory no Default false Possible values - true - false Secret no Configuration scope \u2612 parameter \u2612 general \u2612 steps \u2612 stages Resource references none verifyOnly \u00b6 Whether the step shall only apply verification checks or whether it does a full scan and check cycle back to overview Scope Details Aliases reuseExisting ( deprecated ) Type bool Mandatory no Default false Possible values - true - false Secret no Configuration scope \u2612 parameter \u2610 general \u2612 steps \u2612 stages Resource references none version \u00b6 The version of the artifact to allow identification in protecode backend back to overview Scope Details Aliases artifactVersion ( deprecated ) Type string Mandatory no Default $PIPER_version (if set) Secret no Configuration scope \u2612 parameter \u2610 general \u2612 steps \u2612 stages Resource references commonPipelineEnvironment : reference to: artifactVersion versioningModel \u00b6 The versioning model used for result reporting (based on the artifact version). For example: the version 1.2.3 of the artifact will result in a version 1 to report into, when versioningModel: major is used and will result in a version 1.2 when versioningModel: major-minor is used. Recommendation for a Continuous Delivery process is to use versioningModel: major . back to overview Scope Details Aliases - Type string Mandatory no Default major Possible values - major - major-minor - semantic - full Secret no Configuration scope \u2612 parameter \u2612 general \u2612 steps \u2612 stages Resource references none protecodeCredentialsId \u00b6 Jenkins 'Username with password' credentials ID containing username and password to authenticate to the Protecode system. back to overview Scope Details Aliases - Type string Configuration scope \u2612 parameter \u2612 general \u2612 steps \u2612 stages protecodeApiKeyCredentialsId \u00b6 Jenkins 'Secret text' credentials ID containing API Key/token to authenticate to BDBA server. back to overview Scope Details Aliases - Type string Configuration scope \u2612 parameter \u2612 general \u2612 steps \u2612 stages dockerConfigJsonCredentialsId \u00b6 Jenkins 'Secret file' credentials ID containing Docker config.json (with registry credential(s)). You can create it like explained in Prerequisites . back to overview Scope Details Aliases dockerCredentialsId ( deprecated ) Type string Configuration scope \u2612 parameter \u2612 general \u2612 steps \u2612 stages Details \u00b6 The Protecode scan step is able to send a file addressed via parameter filePath to the backend for scanning it for known vulnerabilities. Alternatively an HTTP URL can be specified via fetchUrl . Protecode will then download the artifact from there and scan it. To support docker image scanning please provide scanImage with a docker like URL poiting to the image tag within the docker registry being used. To receive the result it polls until the job completes. Once the job has completed a PDF report is pulled from the backend and archived in the build Finally the scan result is being analysed for critical findings with a CVSS v3 score >= 7.0 and if such findings are detected the build is failed based on the configuration setting failOnSevereVulnerabilities . During the analysis all CVEs which are triaged are ignored and will not provoke the build to fail.","title":"protecodeExecuteScan"},{"location":"steps/protecodeExecuteScan/#protecodeexecutescan","text":"Black Duck Binary Analysis (BDBA), previously known as Protecode is an Open Source Vulnerability Scanner that is capable of scanning binaries. It can be used to scan docker images but is supports many other programming languages especially those of the C family.","title":"protecodeExecuteScan"},{"location":"steps/protecodeExecuteScan/#description","text":"Black Duck Binary Analysis (previously known as Protecode) is an Open Source Vulnerability Scan tool which provides the composition of Open Source components in a product along with Security information (no license info is provided). BDBA (Protecode) uses a combination of static binary analysis techniques to X-ray the provided software package to identify third-party software components and their exact versions with a high level of confidence. Methods range from simple string matching to proprietary patent-pending techniques. Auditing findings (Triaging) Triaging is now supported by the BDBA (Protecode) backend and also Piper does consider this information during the analysis of the scan results though product versions are not supported by BDBA (Protecode). Therefore please make sure that the fileName you are providing does either contain a stable version or that it does not contain one at all. By ensuring that you are able to triage CVEs globally on the upload file's name without affecting any other artifacts scanned in the same BDBA (Protecode) group and as such triaged vulnerabilities will be considered during the next scan and will not fail the build anymore.","title":"Description"},{"location":"steps/protecodeExecuteScan/#usage","text":"We recommend to define values of step parameters via .pipeline/config.yml file . In this case, calling the step is essentially reduced to defining the step name. Calling the step can be done either in an orchestrator specific way (e.g. via a Jenkins library step) or on the command line. Jenkins Command Line library ( 'piper-lib-os' ) protecodeExecuteScan script: this piper protecodeExecuteScan","title":"Usage"},{"location":"steps/protecodeExecuteScan/#outputs","text":"Output type Details influx measurement step_data protecode measurement protecode_data excluded_vulnerabilities historical_vulnerabilities major_vulnerabilities minor_vulnerabilities triaged_vulnerabilities vulnerabilities","title":"Outputs"},{"location":"steps/protecodeExecuteScan/#prerequisites","text":"Create a Username / Password credential with the Protecode user in your Jenkins credential store Look up your Group ID using REST API via curl -u <username> \"https://<protecode host>/api/groups/\" . If the image is on a protected registry you can provide a Docker config.json file containing the credential information for the registry. You can either use docker login (see the Docker documentation for details) or you can create the file manually using the following script. #!/bin/bash auth = $( echo -n \" $USER : $PASSWORD \" | base64 -w0 ) cat <<EOF > config.json { \"auths\": { \"$REGISTRY\": { \"auth\": \"$auth\" } } } EOF REGISTRY is the URL of the protected registry (Example: https://index.docker.io/v1 ). Attention: If you reference the file in --dockerConfigJSON or upload the file to the Jenkins credential store, the file has to be named config.json .","title":"Prerequisites"},{"location":"steps/protecodeExecuteScan/#parameters","text":"","title":"Parameters"},{"location":"steps/protecodeExecuteScan/#overview-step","text":"Name Mandatory Additional information group yes password (yes) pass via ENV, Vault or Jenkins credentials ( protecodeCredentialsId ) script (yes) reference to Jenkins main pipeline script serverUrl yes username (yes) pass via ENV, Vault or Jenkins credentials ( protecodeCredentialsId ) cleanupMode no containerRegistryPassword no pass via ENV or Jenkins credentials containerRegistryUser no pass via ENV or Jenkins credentials customDataJSONMap no customScanVersion no dockerConfigJSON no pass via ENV, Vault or Jenkins credentials ( dockerConfigJsonCredentialsId ) dockerRegistryUrl no excludeCVEs no failOnSevereVulnerabilities no fetchUrl no filePath no pullRequestName no replaceProductId no reportFileName no scanImage no timeoutMinutes no userAPIKey no pass via ENV, Vault or Jenkins credentials ( protecodeApiKeyCredentialsId ) verbose no activates debug output verifyOnly no version no versioningModel no","title":"Overview - Step"},{"location":"steps/protecodeExecuteScan/#overview-execution-environment","text":"Orchestrator-specific only These parameters are relevant for orchestrator usage and not considered when using the command line option. Name Mandatory Additional information","title":"Overview - Execution Environment"},{"location":"steps/protecodeExecuteScan/#details","text":"","title":"Details"},{"location":"steps/protecodeExecuteScan/#cleanupmode","text":"Decides which parts are removed from the Protecode backend after the scan back to overview Scope Details Aliases - Type string Mandatory no Default binary Possible values - none - binary - complete Secret no Configuration scope \u2612 parameter \u2610 general \u2612 steps \u2612 stages Resource references none","title":"cleanupMode"},{"location":"steps/protecodeExecuteScan/#containerregistrypassword","text":"For buildTool: docker : Password for container registry access - typically provided by the CI/CD environment. back to overview Scope Details Aliases - Type string Mandatory no Default $PIPER_containerRegistryPassword (if set) Secret yes Configuration scope \u2612 parameter \u2610 general \u2612 steps \u2612 stages Resource references commonPipelineEnvironment : reference to: container/repositoryPassword commonPipelineEnvironment : reference to: custom/repositoryPassword","title":"containerRegistryPassword"},{"location":"steps/protecodeExecuteScan/#containerregistryuser","text":"For buildTool: docker : Username for container registry access - typically provided by the CI/CD environment. back to overview Scope Details Aliases - Type string Mandatory no Default $PIPER_containerRegistryUser (if set) Secret yes Configuration scope \u2612 parameter \u2610 general \u2612 steps \u2612 stages Resource references commonPipelineEnvironment : reference to: container/repositoryUsername commonPipelineEnvironment : reference to: custom/repositoryUsername","title":"containerRegistryUser"},{"location":"steps/protecodeExecuteScan/#customdatajsonmap","text":"The JSON map of key-value pairs to be included in this scan's Custom Data (See protecode API). back to overview Scope Details Aliases - Type string Mandatory no Default $PIPER_customDataJSONMap (if set) Secret no Configuration scope \u2612 parameter \u2612 general \u2612 steps \u2612 stages Resource references none","title":"customDataJSONMap"},{"location":"steps/protecodeExecuteScan/#customscanversion","text":"Defines a custom version for the BDBA scan which deviates from the typical versioning pattern using version and versioningModel . It allows to set non-numeric versions as well and supersedes the value of version which is calculated automatically. The parameter is also used by other scan steps (e.g. Fortify, Sonar, WhiteSource) and thus allows a common custom version across scan tools. back to overview Scope Details Aliases - Type string Mandatory no Default $PIPER_customScanVersion (if set) Secret no Configuration scope \u2612 parameter \u2612 general \u2612 steps \u2612 stages Resource references none","title":"customScanVersion"},{"location":"steps/protecodeExecuteScan/#dockerconfigjson","text":"Path to the file .docker/config.json - this is typically provided by your CI/CD system. You can find more details about the Docker credentials in the Docker documentation . back to overview Scope Details Aliases - Type string Mandatory no Default $PIPER_dockerConfigJSON (if set) Secret yes Configuration scope \u2612 parameter \u2610 general \u2612 steps \u2612 stages Resource references commonPipelineEnvironment : reference to: custom/dockerConfigJSON Jenkins credential id: id: dockerConfigJsonCredentialsId Vault resource: name: dockerConfigFileVaultSecretName default value: docker-config Vault paths: $(vaultPath)/docker-config $(vaultBasePath)/$(vaultPipelineName)/docker-config $(vaultBasePath)/GROUP-SECRETS/docker-config","title":"dockerConfigJSON"},{"location":"steps/protecodeExecuteScan/#dockerregistryurl","text":"The reference to the docker registry to scan with Protecode back to overview Scope Details Aliases - Type string Mandatory no Default $PIPER_dockerRegistryUrl (if set) Secret no Configuration scope \u2612 parameter \u2612 general \u2612 steps \u2612 stages Resource references commonPipelineEnvironment : reference to: container/registryUrl","title":"dockerRegistryUrl"},{"location":"steps/protecodeExecuteScan/#excludecves","text":"DEPRECATED: Do use triaging within the Protecode UI instead back to overview Scope Details Aliases protecodeExcludeCVEs Type string Mandatory no Default '' Secret no Configuration scope \u2612 parameter \u2610 general \u2612 steps \u2612 stages Resource references none","title":"excludeCVEs"},{"location":"steps/protecodeExecuteScan/#failonseverevulnerabilities","text":"Whether to fail the step on severe vulnerabilties or not back to overview Scope Details Aliases protecodeFailOnSevereVulnerabilities Type bool Mandatory no Default true Possible values - true - false Secret no Configuration scope \u2612 parameter \u2610 general \u2612 steps \u2612 stages Resource references none","title":"failOnSevereVulnerabilities"},{"location":"steps/protecodeExecuteScan/#fetchurl","text":"The URL to fetch the file or image to scan with Protecode. The URL must be accessible via public HTTP GET request. To fetch a docker image the URL needs a 'docker-registry-' prefix. back to overview Scope Details Aliases - Type string Mandatory no Default $PIPER_fetchUrl (if set) Secret no Configuration scope \u2612 parameter \u2610 general \u2612 steps \u2612 stages Resource references none","title":"fetchUrl"},{"location":"steps/protecodeExecuteScan/#filepath","text":"The path to the file from local workspace to scan with Protecode back to overview Scope Details Aliases - Type string Mandatory no Default $PIPER_filePath (if set) Secret no Configuration scope \u2612 parameter \u2610 general \u2612 steps \u2612 stages Resource references none","title":"filePath"},{"location":"steps/protecodeExecuteScan/#group","text":"The Protecode group ID of your team back to overview Scope Details Aliases protecodeGroup Type string Mandatory yes Default $PIPER_group (if set) Secret no Configuration scope \u2612 parameter \u2610 general \u2612 steps \u2612 stages Resource references none","title":"group"},{"location":"steps/protecodeExecuteScan/#password","text":"Password which is used for the user back to overview Scope Details Aliases - Type string Mandatory yes Default $PIPER_password (if set) Secret yes Configuration scope \u2612 parameter \u2610 general \u2612 steps \u2612 stages Resource references Jenkins credential id: id: protecodeCredentialsId reference to: password Vault resource: name: protecodeVaultSecretName default value: protecode Vault paths: $(vaultPath)/protecode $(vaultBasePath)/$(vaultPipelineName)/protecode $(vaultBasePath)/GROUP-SECRETS/protecode","title":"password"},{"location":"steps/protecodeExecuteScan/#pullrequestname","text":"The name of the pull request back to overview Scope Details Aliases - Type string Mandatory no Default $PIPER_pullRequestName (if set) Secret no Configuration scope \u2612 parameter \u2610 general \u2612 steps \u2612 stages Resource references none","title":"pullRequestName"},{"location":"steps/protecodeExecuteScan/#replaceproductid","text":"Specify which application binary will be replaced and rescanned and product id remains unchanged. By using this parameter, Protecode avoids creating multiple same products. Note this will affect results and feeds. If product id is not specified, then Piper starts auto detection mechanism, more precisely it searches a product id with scanned product name in that specified group, if there are several scans have been done with the same product name then the latest scan id will be fetched from BDBA backend. After obtaining product id, Piper re-uploads / replaces new binary without affecting already existing product id. back to overview Scope Details Aliases - Type int Mandatory no Default 0 Secret no Configuration scope \u2612 parameter \u2610 general \u2612 steps \u2612 stages Resource references none","title":"replaceProductId"},{"location":"steps/protecodeExecuteScan/#reportfilename","text":"The file name of the report to be created back to overview Scope Details Aliases - Type string Mandatory no Default protecode_report.pdf Secret no Configuration scope \u2612 parameter \u2610 general \u2612 steps \u2612 stages Resource references none","title":"reportFileName"},{"location":"steps/protecodeExecuteScan/#scanimage","text":"The reference to the docker image to scan with Protecode. Note: If possible please also check fetchUrl parameter, which might help you to optimize upload time. back to overview Scope Details Aliases dockerImage Type string Mandatory no Default $PIPER_scanImage (if set) Secret no Configuration scope \u2612 parameter \u2612 general \u2612 steps \u2612 stages Resource references commonPipelineEnvironment : reference to: container/imageNameTag","title":"scanImage"},{"location":"steps/protecodeExecuteScan/#script","text":"The common script environment of the Jenkinsfile running. Typically the reference to the script calling the pipeline step is provided with the this parameter, as in script: this . This allows the function to access the commonPipelineEnvironment for retrieving, e.g. configuration parameters. back to overview Scope Details Aliases - Type Jenkins Script Mandatory yes Default Secret no Configuration scope \u2610 parameter \u2610 general \u2610 steps \u2610 stages Resource references none","title":"script"},{"location":"steps/protecodeExecuteScan/#serverurl","text":"The URL to the Protecode backend back to overview Scope Details Aliases protecodeServerUrl Type string Mandatory yes Default $PIPER_serverUrl (if set) Secret no Configuration scope \u2612 parameter \u2612 general \u2612 steps \u2612 stages Resource references none","title":"serverUrl"},{"location":"steps/protecodeExecuteScan/#timeoutminutes","text":"The timeout to wait for the scan to finish back to overview Scope Details Aliases protecodeTimeoutMinutes Type string Mandatory no Default 60 Secret no Configuration scope \u2612 parameter \u2610 general \u2612 steps \u2612 stages Resource references none","title":"timeoutMinutes"},{"location":"steps/protecodeExecuteScan/#userapikey","text":"User API key which is used for API calls. Replacement for username and password / basic authentication. back to overview Scope Details Aliases - Type string Mandatory no Default $PIPER_userAPIKey (if set) Secret yes Configuration scope \u2612 parameter \u2610 general \u2612 steps \u2612 stages Resource references Jenkins credential id: id: protecodeApiKeyCredentialsId reference to: userAPIKey Vault resource: name: protecodeApiKeyVaultSecretName default value: protecode Vault paths: $(vaultPath)/protecode $(vaultBasePath)/$(vaultPipelineName)/protecode $(vaultBasePath)/GROUP-SECRETS/protecode","title":"userAPIKey"},{"location":"steps/protecodeExecuteScan/#username","text":"User which is used for the protecode scan back to overview Scope Details Aliases user ( deprecated ) Type string Mandatory yes Default $PIPER_username (if set) Secret yes Configuration scope \u2612 parameter \u2610 general \u2612 steps \u2612 stages Resource references Jenkins credential id: id: protecodeCredentialsId reference to: username Vault resource: name: protecodeVaultSecretName default value: protecode Vault paths: $(vaultPath)/protecode $(vaultBasePath)/$(vaultPipelineName)/protecode $(vaultBasePath)/GROUP-SECRETS/protecode","title":"username"},{"location":"steps/protecodeExecuteScan/#verbose","text":"verbose output back to overview Scope Details Aliases - Type bool Mandatory no Default false Possible values - true - false Secret no Configuration scope \u2612 parameter \u2612 general \u2612 steps \u2612 stages Resource references none","title":"verbose"},{"location":"steps/protecodeExecuteScan/#verifyonly","text":"Whether the step shall only apply verification checks or whether it does a full scan and check cycle back to overview Scope Details Aliases reuseExisting ( deprecated ) Type bool Mandatory no Default false Possible values - true - false Secret no Configuration scope \u2612 parameter \u2610 general \u2612 steps \u2612 stages Resource references none","title":"verifyOnly"},{"location":"steps/protecodeExecuteScan/#version","text":"The version of the artifact to allow identification in protecode backend back to overview Scope Details Aliases artifactVersion ( deprecated ) Type string Mandatory no Default $PIPER_version (if set) Secret no Configuration scope \u2612 parameter \u2610 general \u2612 steps \u2612 stages Resource references commonPipelineEnvironment : reference to: artifactVersion","title":"version"},{"location":"steps/protecodeExecuteScan/#versioningmodel","text":"The versioning model used for result reporting (based on the artifact version). For example: the version 1.2.3 of the artifact will result in a version 1 to report into, when versioningModel: major is used and will result in a version 1.2 when versioningModel: major-minor is used. Recommendation for a Continuous Delivery process is to use versioningModel: major . back to overview Scope Details Aliases - Type string Mandatory no Default major Possible values - major - major-minor - semantic - full Secret no Configuration scope \u2612 parameter \u2612 general \u2612 steps \u2612 stages Resource references none","title":"versioningModel"},{"location":"steps/protecodeExecuteScan/#protecodecredentialsid","text":"Jenkins 'Username with password' credentials ID containing username and password to authenticate to the Protecode system. back to overview Scope Details Aliases - Type string Configuration scope \u2612 parameter \u2612 general \u2612 steps \u2612 stages","title":"protecodeCredentialsId"},{"location":"steps/protecodeExecuteScan/#protecodeapikeycredentialsid","text":"Jenkins 'Secret text' credentials ID containing API Key/token to authenticate to BDBA server. back to overview Scope Details Aliases - Type string Configuration scope \u2612 parameter \u2612 general \u2612 steps \u2612 stages","title":"protecodeApiKeyCredentialsId"},{"location":"steps/protecodeExecuteScan/#dockerconfigjsoncredentialsid","text":"Jenkins 'Secret file' credentials ID containing Docker config.json (with registry credential(s)). You can create it like explained in Prerequisites . back to overview Scope Details Aliases dockerCredentialsId ( deprecated ) Type string Configuration scope \u2612 parameter \u2612 general \u2612 steps \u2612 stages","title":"dockerConfigJsonCredentialsId"},{"location":"steps/protecodeExecuteScan/#details_1","text":"The Protecode scan step is able to send a file addressed via parameter filePath to the backend for scanning it for known vulnerabilities. Alternatively an HTTP URL can be specified via fetchUrl . Protecode will then download the artifact from there and scan it. To support docker image scanning please provide scanImage with a docker like URL poiting to the image tag within the docker registry being used. To receive the result it polls until the job completes. Once the job has completed a PDF report is pulled from the backend and archived in the build Finally the scan result is being analysed for critical findings with a CVSS v3 score >= 7.0 and if such findings are detected the build is failed based on the configuration setting failOnSevereVulnerabilities . During the analysis all CVEs which are triaged are ignored and will not provoke the build to fail.","title":"Details"},{"location":"steps/pythonBuild/","text":"pythonBuild \u00b6 Step builds a python project Description \u00b6 Step build python project using the setup.py manifest and builds a wheel and tarball artifact . please note that currently python build only supports setup.py build with depedencies from a private repository \u00b6 if your build has dependencies from a private repository you can include the standard requirements.txt into the source code with --extra-index-url as the first line --extra-index-url https://${PIPER_VAULTCREDENTIAL_USERNAME}:${PIPER_VAULTCREDENTIAL_PASSWORD}@<privateRepoUrl>/simple PIPER_VAULTCREDENTIAL_USERNAME and PIPER_VAULTCREDENTIAL_PASSWORD are the username and password for the private repository and are exposed are environment variables that must be present in the environment where the Piper step runs or alternatively can be created using : vault general purpose credentials Usage \u00b6 We recommend to define values of step parameters via .pipeline/config.yml file . In this case, calling the step is essentially reduced to defining the step name. Calling the step can be done either in an orchestrator specific way (e.g. via a Jenkins library step) or on the command line. Jenkins Command Line library ( 'piper-lib-os' ) pythonBuild script: this piper pythonBuild Outputs \u00b6 Output type Details commonPipelineEnvironment custom/buildSettingsInfo Parameters \u00b6 Overview - Step \u00b6 Name Mandatory Additional information script (yes) reference to Jenkins main pipeline script buildFlags no buildSettingsInfo no createBOM no publish no requirementsFilePath no setupFlags no targetRepositoryPassword no pass via ENV or Jenkins credentials targetRepositoryURL no targetRepositoryUser no pass via ENV or Jenkins credentials verbose no activates debug output virtualEnvironmentName no Overview - Execution Environment \u00b6 Orchestrator-specific only These parameters are relevant for orchestrator usage and not considered when using the command line option. Name Mandatory Additional information containerCommand no containerShell no dockerEnvVars no dockerImage no dockerName no dockerOptions no dockerPullImage no dockerVolumeBind no dockerWorkspace no Details \u00b6 buildFlags \u00b6 Defines list of build flags passed to python binary. back to overview Scope Details Aliases - Type []string Mandatory no Default $PIPER_buildFlags (if set) Secret no Configuration scope \u2612 parameter \u2610 general \u2612 steps \u2612 stages Resource references none buildSettingsInfo \u00b6 build settings info is typically filled by the step automatically to create information about the build settings that were used during the maven build . This information is typically used for compliance related processes. back to overview Scope Details Aliases - Type string Mandatory no Default $PIPER_buildSettingsInfo (if set) Secret no Configuration scope \u2612 parameter \u2610 general \u2612 steps \u2612 stages Resource references commonPipelineEnvironment : reference to: custom/buildSettingsInfo containerCommand \u00b6 Jenkins-specific: Used for proper environment setup. Kubernetes only: Allows to specify start command for container created with dockerImage parameter to overwrite Piper default (/usr/bin/tail -f /dev/null). back to overview Scope Details Aliases - Type string Mandatory no Default Secret no Configuration scope \u2612 parameter \u2612 general \u2612 steps \u2612 stages Resource references none containerShell \u00b6 Jenkins-specific: Used for proper environment setup. Allows to specify the shell to be executed for container with containerName. back to overview Scope Details Aliases - Type string Mandatory no Default Secret no Configuration scope \u2612 parameter \u2612 general \u2612 steps \u2612 stages Resource references none createBOM \u00b6 Creates the bill of materials (BOM) using CycloneDX plugin. back to overview Scope Details Aliases - Type bool Mandatory no Default false Possible values - true - false Secret no Configuration scope \u2612 parameter \u2612 general \u2612 steps \u2612 stages Resource references none dockerEnvVars \u00b6 Environment variables to set in the container, e.g. [http_proxy: \"proxy:8080\"]. back to overview Scope Details Aliases - Type map[string]string Mandatory no Default Secret no Configuration scope \u2612 parameter \u2612 general \u2612 steps \u2612 stages Resource references none dockerImage \u00b6 Name of the docker image that should be used. If empty, Docker is not used and the command is executed directly on the Jenkins system. back to overview Scope Details Aliases - Type string Mandatory no Default python:3.10 Secret no Configuration scope \u2612 parameter \u2612 general \u2612 steps \u2612 stages Resource references none dockerName \u00b6 Kubernetes only: Name of the container launching dockerImage. SideCar only: Name of the container in local network. back to overview Scope Details Aliases - Type string Mandatory no Default python Secret no Configuration scope \u2612 parameter \u2612 general \u2612 steps \u2612 stages Resource references none dockerOptions \u00b6 Docker options to be set when starting the container. back to overview Scope Details Aliases - Type []string Mandatory no Default Secret no Configuration scope \u2612 parameter \u2612 general \u2612 steps \u2612 stages Resource references none dockerPullImage \u00b6 Set this to 'false' to bypass a docker image pull. Useful during development process. Allows testing of images which are available in the local registry only. back to overview Scope Details Aliases - Type bool Mandatory no Default true Possible values - true - false Secret no Configuration scope \u2612 parameter \u2612 general \u2612 steps \u2612 stages Resource references none dockerVolumeBind \u00b6 Jenkins-specific: Used for proper environment setup. Volumes that should be mounted into the docker container. back to overview Scope Details Aliases - Type map[string]string Mandatory no Default Secret no Configuration scope \u2612 parameter \u2612 general \u2612 steps \u2612 stages Resource references none dockerWorkspace \u00b6 Jenkins-specific: Used for proper environment setup. Kubernetes only: Specifies a dedicated user home directory for the container which will be passed as value for environment variable HOME . back to overview Scope Details Aliases - Type string Mandatory no Default Secret no Configuration scope \u2612 parameter \u2612 general \u2612 steps \u2612 stages Resource references none publish \u00b6 Configures the build to publish artifacts to a repository. back to overview Scope Details Aliases - Type bool Mandatory no Default false Possible values - true - false Secret no Configuration scope \u2612 parameter \u2610 general \u2612 steps \u2612 stages Resource references none requirementsFilePath \u00b6 file path to the requirements.txt file needed for the sbom cycloneDx file creation. back to overview Scope Details Aliases - Type string Mandatory no Default requirements.txt Secret no Configuration scope \u2612 parameter \u2610 general \u2612 steps \u2612 stages Resource references none script \u00b6 The common script environment of the Jenkinsfile running. Typically the reference to the script calling the pipeline step is provided with the this parameter, as in script: this . This allows the function to access the commonPipelineEnvironment for retrieving, e.g. configuration parameters. back to overview Scope Details Aliases - Type Jenkins Script Mandatory yes Default Secret no Configuration scope \u2610 parameter \u2610 general \u2610 steps \u2610 stages Resource references none setupFlags \u00b6 Defines list of flags passed to setup.py. back to overview Scope Details Aliases - Type []string Mandatory no Default $PIPER_setupFlags (if set) Secret no Configuration scope \u2612 parameter \u2610 general \u2612 steps \u2612 stages Resource references none targetRepositoryPassword \u00b6 Password for the target repository where the compiled binaries shall be uploaded - typically provided by the CI/CD environment. back to overview Scope Details Aliases - Type string Mandatory no Default $PIPER_targetRepositoryPassword (if set) Secret yes Configuration scope \u2612 parameter \u2610 general \u2612 steps \u2612 stages Resource references commonPipelineEnvironment : reference to: custom/repositoryPassword targetRepositoryURL \u00b6 URL of the target repository where the compiled binaries shall be uploaded - typically provided by the CI/CD environment. back to overview Scope Details Aliases - Type string Mandatory no Default $PIPER_targetRepositoryURL (if set) Secret no Configuration scope \u2612 parameter \u2610 general \u2612 steps \u2612 stages Resource references commonPipelineEnvironment : reference to: custom/repositoryUrl targetRepositoryUser \u00b6 Username for the target repository where the compiled binaries shall be uploaded - typically provided by the CI/CD environment. back to overview Scope Details Aliases - Type string Mandatory no Default $PIPER_targetRepositoryUser (if set) Secret yes Configuration scope \u2612 parameter \u2610 general \u2612 steps \u2612 stages Resource references commonPipelineEnvironment : reference to: custom/repositoryUsername verbose \u00b6 verbose output back to overview Scope Details Aliases - Type bool Mandatory no Default false Possible values - true - false Secret no Configuration scope \u2612 parameter \u2612 general \u2612 steps \u2612 stages Resource references none virtualEnvironmentName \u00b6 name of the virtual environment that will be used for the build back to overview Scope Details Aliases virutalEnvironmentName ( deprecated ) Type string Mandatory no Default piperBuild-env Secret no Configuration scope \u2612 parameter \u2610 general \u2612 steps \u2612 stages Resource references none","title":"pythonBuild"},{"location":"steps/pythonBuild/#pythonbuild","text":"Step builds a python project","title":"pythonBuild"},{"location":"steps/pythonBuild/#description","text":"Step build python project using the setup.py manifest and builds a wheel and tarball artifact . please note that currently python build only supports setup.py","title":"Description"},{"location":"steps/pythonBuild/#build-with-depedencies-from-a-private-repository","text":"if your build has dependencies from a private repository you can include the standard requirements.txt into the source code with --extra-index-url as the first line --extra-index-url https://${PIPER_VAULTCREDENTIAL_USERNAME}:${PIPER_VAULTCREDENTIAL_PASSWORD}@<privateRepoUrl>/simple PIPER_VAULTCREDENTIAL_USERNAME and PIPER_VAULTCREDENTIAL_PASSWORD are the username and password for the private repository and are exposed are environment variables that must be present in the environment where the Piper step runs or alternatively can be created using : vault general purpose credentials","title":"build with depedencies from a private repository"},{"location":"steps/pythonBuild/#usage","text":"We recommend to define values of step parameters via .pipeline/config.yml file . In this case, calling the step is essentially reduced to defining the step name. Calling the step can be done either in an orchestrator specific way (e.g. via a Jenkins library step) or on the command line. Jenkins Command Line library ( 'piper-lib-os' ) pythonBuild script: this piper pythonBuild","title":"Usage"},{"location":"steps/pythonBuild/#outputs","text":"Output type Details commonPipelineEnvironment custom/buildSettingsInfo","title":"Outputs"},{"location":"steps/pythonBuild/#parameters","text":"","title":"Parameters"},{"location":"steps/pythonBuild/#overview-step","text":"Name Mandatory Additional information script (yes) reference to Jenkins main pipeline script buildFlags no buildSettingsInfo no createBOM no publish no requirementsFilePath no setupFlags no targetRepositoryPassword no pass via ENV or Jenkins credentials targetRepositoryURL no targetRepositoryUser no pass via ENV or Jenkins credentials verbose no activates debug output virtualEnvironmentName no","title":"Overview - Step"},{"location":"steps/pythonBuild/#overview-execution-environment","text":"Orchestrator-specific only These parameters are relevant for orchestrator usage and not considered when using the command line option. Name Mandatory Additional information containerCommand no containerShell no dockerEnvVars no dockerImage no dockerName no dockerOptions no dockerPullImage no dockerVolumeBind no dockerWorkspace no","title":"Overview - Execution Environment"},{"location":"steps/pythonBuild/#details","text":"","title":"Details"},{"location":"steps/pythonBuild/#buildflags","text":"Defines list of build flags passed to python binary. back to overview Scope Details Aliases - Type []string Mandatory no Default $PIPER_buildFlags (if set) Secret no Configuration scope \u2612 parameter \u2610 general \u2612 steps \u2612 stages Resource references none","title":"buildFlags"},{"location":"steps/pythonBuild/#buildsettingsinfo","text":"build settings info is typically filled by the step automatically to create information about the build settings that were used during the maven build . This information is typically used for compliance related processes. back to overview Scope Details Aliases - Type string Mandatory no Default $PIPER_buildSettingsInfo (if set) Secret no Configuration scope \u2612 parameter \u2610 general \u2612 steps \u2612 stages Resource references commonPipelineEnvironment : reference to: custom/buildSettingsInfo","title":"buildSettingsInfo"},{"location":"steps/pythonBuild/#containercommand","text":"Jenkins-specific: Used for proper environment setup. Kubernetes only: Allows to specify start command for container created with dockerImage parameter to overwrite Piper default (/usr/bin/tail -f /dev/null). back to overview Scope Details Aliases - Type string Mandatory no Default Secret no Configuration scope \u2612 parameter \u2612 general \u2612 steps \u2612 stages Resource references none","title":"containerCommand"},{"location":"steps/pythonBuild/#containershell","text":"Jenkins-specific: Used for proper environment setup. Allows to specify the shell to be executed for container with containerName. back to overview Scope Details Aliases - Type string Mandatory no Default Secret no Configuration scope \u2612 parameter \u2612 general \u2612 steps \u2612 stages Resource references none","title":"containerShell"},{"location":"steps/pythonBuild/#createbom","text":"Creates the bill of materials (BOM) using CycloneDX plugin. back to overview Scope Details Aliases - Type bool Mandatory no Default false Possible values - true - false Secret no Configuration scope \u2612 parameter \u2612 general \u2612 steps \u2612 stages Resource references none","title":"createBOM"},{"location":"steps/pythonBuild/#dockerenvvars","text":"Environment variables to set in the container, e.g. [http_proxy: \"proxy:8080\"]. back to overview Scope Details Aliases - Type map[string]string Mandatory no Default Secret no Configuration scope \u2612 parameter \u2612 general \u2612 steps \u2612 stages Resource references none","title":"dockerEnvVars"},{"location":"steps/pythonBuild/#dockerimage","text":"Name of the docker image that should be used. If empty, Docker is not used and the command is executed directly on the Jenkins system. back to overview Scope Details Aliases - Type string Mandatory no Default python:3.10 Secret no Configuration scope \u2612 parameter \u2612 general \u2612 steps \u2612 stages Resource references none","title":"dockerImage"},{"location":"steps/pythonBuild/#dockername","text":"Kubernetes only: Name of the container launching dockerImage. SideCar only: Name of the container in local network. back to overview Scope Details Aliases - Type string Mandatory no Default python Secret no Configuration scope \u2612 parameter \u2612 general \u2612 steps \u2612 stages Resource references none","title":"dockerName"},{"location":"steps/pythonBuild/#dockeroptions","text":"Docker options to be set when starting the container. back to overview Scope Details Aliases - Type []string Mandatory no Default Secret no Configuration scope \u2612 parameter \u2612 general \u2612 steps \u2612 stages Resource references none","title":"dockerOptions"},{"location":"steps/pythonBuild/#dockerpullimage","text":"Set this to 'false' to bypass a docker image pull. Useful during development process. Allows testing of images which are available in the local registry only. back to overview Scope Details Aliases - Type bool Mandatory no Default true Possible values - true - false Secret no Configuration scope \u2612 parameter \u2612 general \u2612 steps \u2612 stages Resource references none","title":"dockerPullImage"},{"location":"steps/pythonBuild/#dockervolumebind","text":"Jenkins-specific: Used for proper environment setup. Volumes that should be mounted into the docker container. back to overview Scope Details Aliases - Type map[string]string Mandatory no Default Secret no Configuration scope \u2612 parameter \u2612 general \u2612 steps \u2612 stages Resource references none","title":"dockerVolumeBind"},{"location":"steps/pythonBuild/#dockerworkspace","text":"Jenkins-specific: Used for proper environment setup. Kubernetes only: Specifies a dedicated user home directory for the container which will be passed as value for environment variable HOME . back to overview Scope Details Aliases - Type string Mandatory no Default Secret no Configuration scope \u2612 parameter \u2612 general \u2612 steps \u2612 stages Resource references none","title":"dockerWorkspace"},{"location":"steps/pythonBuild/#publish","text":"Configures the build to publish artifacts to a repository. back to overview Scope Details Aliases - Type bool Mandatory no Default false Possible values - true - false Secret no Configuration scope \u2612 parameter \u2610 general \u2612 steps \u2612 stages Resource references none","title":"publish"},{"location":"steps/pythonBuild/#requirementsfilepath","text":"file path to the requirements.txt file needed for the sbom cycloneDx file creation. back to overview Scope Details Aliases - Type string Mandatory no Default requirements.txt Secret no Configuration scope \u2612 parameter \u2610 general \u2612 steps \u2612 stages Resource references none","title":"requirementsFilePath"},{"location":"steps/pythonBuild/#script","text":"The common script environment of the Jenkinsfile running. Typically the reference to the script calling the pipeline step is provided with the this parameter, as in script: this . This allows the function to access the commonPipelineEnvironment for retrieving, e.g. configuration parameters. back to overview Scope Details Aliases - Type Jenkins Script Mandatory yes Default Secret no Configuration scope \u2610 parameter \u2610 general \u2610 steps \u2610 stages Resource references none","title":"script"},{"location":"steps/pythonBuild/#setupflags","text":"Defines list of flags passed to setup.py. back to overview Scope Details Aliases - Type []string Mandatory no Default $PIPER_setupFlags (if set) Secret no Configuration scope \u2612 parameter \u2610 general \u2612 steps \u2612 stages Resource references none","title":"setupFlags"},{"location":"steps/pythonBuild/#targetrepositorypassword","text":"Password for the target repository where the compiled binaries shall be uploaded - typically provided by the CI/CD environment. back to overview Scope Details Aliases - Type string Mandatory no Default $PIPER_targetRepositoryPassword (if set) Secret yes Configuration scope \u2612 parameter \u2610 general \u2612 steps \u2612 stages Resource references commonPipelineEnvironment : reference to: custom/repositoryPassword","title":"targetRepositoryPassword"},{"location":"steps/pythonBuild/#targetrepositoryurl","text":"URL of the target repository where the compiled binaries shall be uploaded - typically provided by the CI/CD environment. back to overview Scope Details Aliases - Type string Mandatory no Default $PIPER_targetRepositoryURL (if set) Secret no Configuration scope \u2612 parameter \u2610 general \u2612 steps \u2612 stages Resource references commonPipelineEnvironment : reference to: custom/repositoryUrl","title":"targetRepositoryURL"},{"location":"steps/pythonBuild/#targetrepositoryuser","text":"Username for the target repository where the compiled binaries shall be uploaded - typically provided by the CI/CD environment. back to overview Scope Details Aliases - Type string Mandatory no Default $PIPER_targetRepositoryUser (if set) Secret yes Configuration scope \u2612 parameter \u2610 general \u2612 steps \u2612 stages Resource references commonPipelineEnvironment : reference to: custom/repositoryUsername","title":"targetRepositoryUser"},{"location":"steps/pythonBuild/#verbose","text":"verbose output back to overview Scope Details Aliases - Type bool Mandatory no Default false Possible values - true - false Secret no Configuration scope \u2612 parameter \u2612 general \u2612 steps \u2612 stages Resource references none","title":"verbose"},{"location":"steps/pythonBuild/#virtualenvironmentname","text":"name of the virtual environment that will be used for the build back to overview Scope Details Aliases virutalEnvironmentName ( deprecated ) Type string Mandatory no Default piperBuild-env Secret no Configuration scope \u2612 parameter \u2610 general \u2612 steps \u2612 stages Resource references none","title":"virtualEnvironmentName"},{"location":"steps/seleniumExecuteTests/","text":"seleniumExecuteTests \u00b6 Description \u00b6 Enables UI test execution with Selenium in a sidecar container. This step is Jenkins-only. The step executes a closure (see example below) connecting to a sidecar container with a Selenium Server. When executing in a local Docker environment, please make sure to set Selenium host to selenium in your tests. Kubernetes environment, plese make sure to set Seleniums host to localhost in your tests. Proxy Environments If work in an environment containing a proxy, please make sure that localhost / selenium is added to your proxy exclusion list, e.g. via environment variable NO_PROXY & no_proxy . You can pass those via parameters dockerEnvVars and sidecarEnvVars directly to the containers if required. Prerequisites \u00b6 none Example \u00b6 seleniumExecuteTests ( script: this ) { git url: 'https://github.com/xxxxx/WebDriverIOTest.git' sh '''npm install node index.js''' } Example test using WebdriverIO \u00b6 Example based on http://webdriver.io/guide/getstarted/modes.html and http://webdriver.io/guide.html Configuration for Local Docker Environment \u00b6 var webdriverio = require ( 'webdriverio' ); var options = { host : 'selenium' , port : 4444 , desiredCapabilities : { browserName : 'chrome' } }; Configuration for Kubernetes Environment \u00b6 var webdriverio = require ( 'webdriverio' ); var options = { host : 'localhost' , port : 4444 , desiredCapabilities : { browserName : 'chrome' } }; Test Code (index.js) \u00b6 // ToDo: add configuration from above webdriverio . remote ( options ) . init () . url ( 'http://www.google.com' ) . getTitle (). then ( function ( title ) { console . log ( 'Title was: ' + title ); }) . end () . catch ( function ( err ) { console . log ( err ); }); Parameters \u00b6 name mandatory default possible values buildTool no npm maven , npm , bundler containerPortMappings no [selenium/standalone-chrome:[[containerPort:4444, hostPort:4444]]] dockerEnvVars no dockerImage no buildTool= maven : maven:3.5-jdk-8 buildTool= npm : node:lts-bookworm buildTool= bundler : ruby:2.5.3-stretch dockerName no buildTool= maven : maven buildTool= npm : npm buildTool= bundler : bundler dockerOptions no dockerWorkspace no buildTool= maven : <empty> buildTool= npm : /home/node buildTool= bundler : <empty> failOnError no true true , false gitBranch no gitSshKeyCredentialsId no `` Jenkins credentials id script yes seleniumHubCredentialsId no sidecarEnvVars no sidecarImage no selenium/standalone-chrome sidecarName no selenium sidecarVolumeBind no [/dev/shm:/dev/shm] stashContent no [tests] testRepository no buildTool - Defines the tool which is used for executing the tests containerPortMappings - Map which defines per docker image the port mappings, e.g. containerPortMappings: ['selenium/standalone-chrome': [[name: 'selPort', containerPort: 4444, hostPort: 4444]]] . dockerEnvVars - Environment variables to set in the container, e.g. [http_proxy: 'proxy:8080']. dockerImage - Name of the docker image that should be used. Configure with empty value to execute the command directly on the Jenkins system (not using a container). Omit to use the default image (cf. default_pipeline_environment.yml ) Overwrite to use custom Docker image. dockerName - Kubernetes only: Name of the container launching dockerImage . SideCar only: Name of the container in local network. dockerOptions - Docker only: Docker options to be set when starting the container (List or String). dockerWorkspace - Kubernetes only: Specifies a dedicated user home directory for the container which will be passed as value for environment variable HOME . failOnError - With failOnError the behavior in case tests fail can be defined. gitBranch - Only if testRepository is provided: Branch of testRepository, defaults to master. gitSshKeyCredentialsId - Only if testRepository is provided: Credentials for a protected testRepository script - The common script environment of the Jenkinsfile running. Typically the reference to the script calling the pipeline step is provided with the this parameter, as in script: this . This allows the function to access the commonPipelineEnvironment for retrieving, e.g. configuration parameters. seleniumHubCredentialsId - Defines the id of the user/password credentials to be used to connect to a Selenium Hub. The credentials are provided in the environment variables PIPER_SELENIUM_HUB_USER and PIPER_SELENIUM_HUB_PASSWORD . sidecarEnvVars - as dockerEnvVars for the sidecar container sidecarImage - as dockerImage for the sidecar container sidecarName - as dockerName for the sidecar container sidecarVolumeBind - as dockerVolumeBind for the sidecar container stashContent - Specific stashes that should be considered for the step execution. testRepository - Define an additional repository where the test implementation is located. For protected repositories the testRepository needs to contain the ssh git url. Step configuration \u00b6 We recommend to define values of step parameters via config.yml file . In following sections of the config.yml the configuration is possible: parameter general step/stage buildTool X X containerPortMappings X X dockerEnvVars X X dockerImage X X dockerName X X dockerOptions X X dockerWorkspace X X failOnError X X gitBranch X X gitSshKeyCredentialsId X X script seleniumHubCredentialsId X X sidecarEnvVars X X sidecarImage X X sidecarName X X sidecarVolumeBind X X stashContent X X testRepository X X Dependencies \u00b6 The step depends on the following Jenkins plugins credentials-binding docker git kubernetes pipeline-utility-steps workflow-basic-steps workflow-cps-global-lib workflow-durable-task-step The kubernetes plugin is only used if running in a kubernetes environment. Transitive dependencies are omitted. The list might be incomplete. Consider using the ppiper/jenkins-master docker image. This images comes with preinstalled plugins. Side effects \u00b6 none Exceptions \u00b6 none","title":"seleniumExecuteTests"},{"location":"steps/seleniumExecuteTests/#seleniumexecutetests","text":"","title":"seleniumExecuteTests"},{"location":"steps/seleniumExecuteTests/#description","text":"Enables UI test execution with Selenium in a sidecar container. This step is Jenkins-only. The step executes a closure (see example below) connecting to a sidecar container with a Selenium Server. When executing in a local Docker environment, please make sure to set Selenium host to selenium in your tests. Kubernetes environment, plese make sure to set Seleniums host to localhost in your tests. Proxy Environments If work in an environment containing a proxy, please make sure that localhost / selenium is added to your proxy exclusion list, e.g. via environment variable NO_PROXY & no_proxy . You can pass those via parameters dockerEnvVars and sidecarEnvVars directly to the containers if required.","title":"Description"},{"location":"steps/seleniumExecuteTests/#prerequisites","text":"none","title":"Prerequisites"},{"location":"steps/seleniumExecuteTests/#example","text":"seleniumExecuteTests ( script: this ) { git url: 'https://github.com/xxxxx/WebDriverIOTest.git' sh '''npm install node index.js''' }","title":"Example"},{"location":"steps/seleniumExecuteTests/#example-test-using-webdriverio","text":"Example based on http://webdriver.io/guide/getstarted/modes.html and http://webdriver.io/guide.html","title":"Example test using WebdriverIO"},{"location":"steps/seleniumExecuteTests/#configuration-for-local-docker-environment","text":"var webdriverio = require ( 'webdriverio' ); var options = { host : 'selenium' , port : 4444 , desiredCapabilities : { browserName : 'chrome' } };","title":"Configuration for Local Docker Environment"},{"location":"steps/seleniumExecuteTests/#configuration-for-kubernetes-environment","text":"var webdriverio = require ( 'webdriverio' ); var options = { host : 'localhost' , port : 4444 , desiredCapabilities : { browserName : 'chrome' } };","title":"Configuration for Kubernetes Environment"},{"location":"steps/seleniumExecuteTests/#test-code-indexjs","text":"// ToDo: add configuration from above webdriverio . remote ( options ) . init () . url ( 'http://www.google.com' ) . getTitle (). then ( function ( title ) { console . log ( 'Title was: ' + title ); }) . end () . catch ( function ( err ) { console . log ( err ); });","title":"Test Code (index.js)"},{"location":"steps/seleniumExecuteTests/#parameters","text":"name mandatory default possible values buildTool no npm maven , npm , bundler containerPortMappings no [selenium/standalone-chrome:[[containerPort:4444, hostPort:4444]]] dockerEnvVars no dockerImage no buildTool= maven : maven:3.5-jdk-8 buildTool= npm : node:lts-bookworm buildTool= bundler : ruby:2.5.3-stretch dockerName no buildTool= maven : maven buildTool= npm : npm buildTool= bundler : bundler dockerOptions no dockerWorkspace no buildTool= maven : <empty> buildTool= npm : /home/node buildTool= bundler : <empty> failOnError no true true , false gitBranch no gitSshKeyCredentialsId no `` Jenkins credentials id script yes seleniumHubCredentialsId no sidecarEnvVars no sidecarImage no selenium/standalone-chrome sidecarName no selenium sidecarVolumeBind no [/dev/shm:/dev/shm] stashContent no [tests] testRepository no buildTool - Defines the tool which is used for executing the tests containerPortMappings - Map which defines per docker image the port mappings, e.g. containerPortMappings: ['selenium/standalone-chrome': [[name: 'selPort', containerPort: 4444, hostPort: 4444]]] . dockerEnvVars - Environment variables to set in the container, e.g. [http_proxy: 'proxy:8080']. dockerImage - Name of the docker image that should be used. Configure with empty value to execute the command directly on the Jenkins system (not using a container). Omit to use the default image (cf. default_pipeline_environment.yml ) Overwrite to use custom Docker image. dockerName - Kubernetes only: Name of the container launching dockerImage . SideCar only: Name of the container in local network. dockerOptions - Docker only: Docker options to be set when starting the container (List or String). dockerWorkspace - Kubernetes only: Specifies a dedicated user home directory for the container which will be passed as value for environment variable HOME . failOnError - With failOnError the behavior in case tests fail can be defined. gitBranch - Only if testRepository is provided: Branch of testRepository, defaults to master. gitSshKeyCredentialsId - Only if testRepository is provided: Credentials for a protected testRepository script - The common script environment of the Jenkinsfile running. Typically the reference to the script calling the pipeline step is provided with the this parameter, as in script: this . This allows the function to access the commonPipelineEnvironment for retrieving, e.g. configuration parameters. seleniumHubCredentialsId - Defines the id of the user/password credentials to be used to connect to a Selenium Hub. The credentials are provided in the environment variables PIPER_SELENIUM_HUB_USER and PIPER_SELENIUM_HUB_PASSWORD . sidecarEnvVars - as dockerEnvVars for the sidecar container sidecarImage - as dockerImage for the sidecar container sidecarName - as dockerName for the sidecar container sidecarVolumeBind - as dockerVolumeBind for the sidecar container stashContent - Specific stashes that should be considered for the step execution. testRepository - Define an additional repository where the test implementation is located. For protected repositories the testRepository needs to contain the ssh git url.","title":"Parameters"},{"location":"steps/seleniumExecuteTests/#step-configuration","text":"We recommend to define values of step parameters via config.yml file . In following sections of the config.yml the configuration is possible: parameter general step/stage buildTool X X containerPortMappings X X dockerEnvVars X X dockerImage X X dockerName X X dockerOptions X X dockerWorkspace X X failOnError X X gitBranch X X gitSshKeyCredentialsId X X script seleniumHubCredentialsId X X sidecarEnvVars X X sidecarImage X X sidecarName X X sidecarVolumeBind X X stashContent X X testRepository X X","title":"Step configuration"},{"location":"steps/seleniumExecuteTests/#dependencies","text":"The step depends on the following Jenkins plugins credentials-binding docker git kubernetes pipeline-utility-steps workflow-basic-steps workflow-cps-global-lib workflow-durable-task-step The kubernetes plugin is only used if running in a kubernetes environment. Transitive dependencies are omitted. The list might be incomplete. Consider using the ppiper/jenkins-master docker image. This images comes with preinstalled plugins.","title":"Dependencies"},{"location":"steps/seleniumExecuteTests/#side-effects","text":"none","title":"Side effects"},{"location":"steps/seleniumExecuteTests/#exceptions","text":"none","title":"Exceptions"},{"location":"steps/setupCommonPipelineEnvironment/","text":"setupCommonPipelineEnvironment \u00b6 Description \u00b6 Initializes the commonPipelineEnvironment , which is used throughout the complete pipeline. Tip This step needs to run at the beginning of a pipeline right after the SCM checkout. Then subsequent pipeline steps consume the information from commonPipelineEnvironment ; it does not need to be passed to pipeline steps explicitly. Prerequisites \u00b6 A configuration file with properties. The property values are used as default values in many pipeline steps. Parameters \u00b6 name mandatory default possible values collectTelemetryData no false configFile no customDefaults no customDefaultsCredentialsId no customDefaultsFromFiles no inferBuildTool no scmInfo no script yes collectTelemetryData - configFile - Path to the pipeline configuration file defining project specific settings. customDefaults - A list of file names which will be extracted from library resources and which serve as source for default values for the pipeline configuration. These are merged with and override built-in defaults, with a parameter supplied by the last resource file taking precedence over the same parameter supplied in an earlier resource file or built-in default. customDefaultsCredentialsId - Credentials (username and password) used to download custom defaults if access is secured. customDefaultsFromFiles - A list of file paths or URLs which must point to YAML content. These work exactly like customDefaults , but from local or remote files instead of library resources. They are merged with and take precedence over customDefaults . inferBuildTool - Enable automatic inference of build tool (maven, npm, mta) based on existing project files. If this is set to true, it is not required to set the build tool by hand for those cases. scmInfo - The map returned from a Jenkins git checkout. Used to set the git information in the common pipeline environment script - The common script environment of the Jenkinsfile running. Typically the reference to the script calling the pipeline step is provided with the this parameter, as in script: this . This allows the function to access the commonPipelineEnvironment for retrieving, e.g. configuration parameters. Step configuration \u00b6 We recommend to define values of step parameters via config.yml file . In following sections of the config.yml the configuration is possible: parameter general step/stage collectTelemetryData X configFile customDefaults customDefaultsCredentialsId X customDefaultsFromFiles inferBuildTool X scmInfo script Dependencies \u00b6 The step depends on the following Jenkins plugins http_request pipeline-utility-steps workflow-basic-steps workflow-cps-global-lib workflow-scm-step Transitive dependencies are omitted. The list might be incomplete. Consider using the ppiper/jenkins-master docker image. This images comes with preinstalled plugins. Side effects \u00b6 none Exceptions \u00b6 none Example \u00b6 setupCommonPipelineEnvironment script: this","title":"setupCommonPipelineEnvironment"},{"location":"steps/setupCommonPipelineEnvironment/#setupcommonpipelineenvironment","text":"","title":"setupCommonPipelineEnvironment"},{"location":"steps/setupCommonPipelineEnvironment/#description","text":"Initializes the commonPipelineEnvironment , which is used throughout the complete pipeline. Tip This step needs to run at the beginning of a pipeline right after the SCM checkout. Then subsequent pipeline steps consume the information from commonPipelineEnvironment ; it does not need to be passed to pipeline steps explicitly.","title":"Description"},{"location":"steps/setupCommonPipelineEnvironment/#prerequisites","text":"A configuration file with properties. The property values are used as default values in many pipeline steps.","title":"Prerequisites"},{"location":"steps/setupCommonPipelineEnvironment/#parameters","text":"name mandatory default possible values collectTelemetryData no false configFile no customDefaults no customDefaultsCredentialsId no customDefaultsFromFiles no inferBuildTool no scmInfo no script yes collectTelemetryData - configFile - Path to the pipeline configuration file defining project specific settings. customDefaults - A list of file names which will be extracted from library resources and which serve as source for default values for the pipeline configuration. These are merged with and override built-in defaults, with a parameter supplied by the last resource file taking precedence over the same parameter supplied in an earlier resource file or built-in default. customDefaultsCredentialsId - Credentials (username and password) used to download custom defaults if access is secured. customDefaultsFromFiles - A list of file paths or URLs which must point to YAML content. These work exactly like customDefaults , but from local or remote files instead of library resources. They are merged with and take precedence over customDefaults . inferBuildTool - Enable automatic inference of build tool (maven, npm, mta) based on existing project files. If this is set to true, it is not required to set the build tool by hand for those cases. scmInfo - The map returned from a Jenkins git checkout. Used to set the git information in the common pipeline environment script - The common script environment of the Jenkinsfile running. Typically the reference to the script calling the pipeline step is provided with the this parameter, as in script: this . This allows the function to access the commonPipelineEnvironment for retrieving, e.g. configuration parameters.","title":"Parameters"},{"location":"steps/setupCommonPipelineEnvironment/#step-configuration","text":"We recommend to define values of step parameters via config.yml file . In following sections of the config.yml the configuration is possible: parameter general step/stage collectTelemetryData X configFile customDefaults customDefaultsCredentialsId X customDefaultsFromFiles inferBuildTool X scmInfo script","title":"Step configuration"},{"location":"steps/setupCommonPipelineEnvironment/#dependencies","text":"The step depends on the following Jenkins plugins http_request pipeline-utility-steps workflow-basic-steps workflow-cps-global-lib workflow-scm-step Transitive dependencies are omitted. The list might be incomplete. Consider using the ppiper/jenkins-master docker image. This images comes with preinstalled plugins.","title":"Dependencies"},{"location":"steps/setupCommonPipelineEnvironment/#side-effects","text":"none","title":"Side effects"},{"location":"steps/setupCommonPipelineEnvironment/#exceptions","text":"none","title":"Exceptions"},{"location":"steps/setupCommonPipelineEnvironment/#example","text":"setupCommonPipelineEnvironment script: this","title":"Example"},{"location":"steps/shellExecute/","text":"shellExecute \u00b6 Step executes defined script Description \u00b6 Step executes defined script provided in the 'sources' parameter Usage \u00b6 We recommend to define values of step parameters via .pipeline/config.yml file . In this case, calling the step is essentially reduced to defining the step name. Calling the step can be done either in an orchestrator specific way (e.g. via a Jenkins library step) or on the command line. Jenkins Command Line library ( 'piper-lib-os' ) shellExecute script: this piper shellExecute Parameters \u00b6 Overview - Step \u00b6 Name Mandatory Additional information script (yes) reference to Jenkins main pipeline script githubToken no pass via ENV, Vault or Jenkins credentials ( githubTokenCredentialsId ) scriptArguments no sources no verbose no activates debug output Overview - Execution Environment \u00b6 Orchestrator-specific only These parameters are relevant for orchestrator usage and not considered when using the command line option. Name Mandatory Additional information containerCommand no containerShell no dockerEnvVars no dockerImage no dockerName no dockerOptions no dockerPullImage no dockerVolumeBind no dockerWorkspace no Details \u00b6 containerCommand \u00b6 Jenkins-specific: Used for proper environment setup. Kubernetes only: Allows to specify start command for container created with dockerImage parameter to overwrite Piper default (/usr/bin/tail -f /dev/null). back to overview Scope Details Aliases - Type string Mandatory no Default Secret no Configuration scope \u2612 parameter \u2612 general \u2612 steps \u2612 stages Resource references none containerShell \u00b6 Jenkins-specific: Used for proper environment setup. Allows to specify the shell to be executed for container with containerName. back to overview Scope Details Aliases - Type string Mandatory no Default Secret no Configuration scope \u2612 parameter \u2612 general \u2612 steps \u2612 stages Resource references none dockerEnvVars \u00b6 Environment variables to set in the container, e.g. [http_proxy: \"proxy:8080\"]. back to overview Scope Details Aliases - Type map[string]string Mandatory no Default Secret no Configuration scope \u2612 parameter \u2612 general \u2612 steps \u2612 stages Resource references none dockerImage \u00b6 Name of the docker image that should be used. If empty, Docker is not used and the command is executed directly on the Jenkins system. back to overview Scope Details Aliases - Type string Mandatory no Default node:22-bookworm Secret no Configuration scope \u2612 parameter \u2612 general \u2612 steps \u2612 stages Resource references none dockerName \u00b6 Kubernetes only: Name of the container launching dockerImage. SideCar only: Name of the container in local network. back to overview Scope Details Aliases - Type string Mandatory no Default shell Secret no Configuration scope \u2612 parameter \u2612 general \u2612 steps \u2612 stages Resource references none dockerOptions \u00b6 Docker options to be set when starting the container. back to overview Scope Details Aliases - Type []string Mandatory no Default Secret no Configuration scope \u2612 parameter \u2612 general \u2612 steps \u2612 stages Resource references none dockerPullImage \u00b6 Set this to 'false' to bypass a docker image pull. Useful during development process. Allows testing of images which are available in the local registry only. back to overview Scope Details Aliases - Type bool Mandatory no Default true Possible values - true - false Secret no Configuration scope \u2612 parameter \u2612 general \u2612 steps \u2612 stages Resource references none dockerVolumeBind \u00b6 Jenkins-specific: Used for proper environment setup. Volumes that should be mounted into the docker container. back to overview Scope Details Aliases - Type map[string]string Mandatory no Default Secret no Configuration scope \u2612 parameter \u2612 general \u2612 steps \u2612 stages Resource references none dockerWorkspace \u00b6 Jenkins-specific: Used for proper environment setup. Kubernetes only: Specifies a dedicated user home directory for the container which will be passed as value for environment variable HOME . back to overview Scope Details Aliases - Type string Mandatory no Default /home/node Secret no Configuration scope \u2612 parameter \u2612 general \u2612 steps \u2612 stages Resource references none githubToken \u00b6 GitHub personal access token as per https://help.github.com/en/github/authenticating-to-github/creating-a-personal-access-token-for-the-command-line back to overview Scope Details Aliases access_token Type string Mandatory no Default $PIPER_githubToken (if set) Secret yes Configuration scope \u2612 parameter \u2612 general \u2612 steps \u2612 stages Resource references Jenkins credential id: id: githubTokenCredentialsId Vault resource: name: githubVaultSecretName default value: github Vault paths: $(vaultPath)/github $(vaultBasePath)/$(vaultPipelineName)/github $(vaultBasePath)/GROUP-SECRETS/github script \u00b6 The common script environment of the Jenkinsfile running. Typically the reference to the script calling the pipeline step is provided with the this parameter, as in script: this . This allows the function to access the commonPipelineEnvironment for retrieving, e.g. configuration parameters. back to overview Scope Details Aliases - Type Jenkins Script Mandatory yes Default Secret no Configuration scope \u2610 parameter \u2610 general \u2610 steps \u2610 stages Resource references none scriptArguments \u00b6 The scriptArguments list is a flat list and has a positional relationship to the sources parameter. For example, the scriptArguments string at position 0 will be considered as the argument(s) for script at position 0 in sources list. --sources \".pipeline/firstScript.sh\" --sources \".pipeline/secondScript.sh\" --scriptArguments \"$(first_script_arg)\" --scriptArguments \"$(second_script_arg)\" For multiple arguments for a particular script, please add them as a comma-separated string enclosed in additional quotes, e.g.: --sources \".pipeline/yourScript.sh\" --scriptArguments \"\\\"$(first_arg),$(second_arg)\\\"\" For multiple scripts with multiple arguments per each script your command would look like: --sources \".pipeline/firstScript.sh\" --sources \".pipeline/secondScript.sh\" --scriptArguments \"\\\"$(first_script_arg1),$(first_script_arg2)\\\"\" --scriptArguments \"\\\"$(second_script_arg1),$(second_script_arg2)\\\"\" back to overview Scope Details Aliases - Type []string Mandatory no Default $PIPER_scriptArguments (if set) Secret no Configuration scope \u2612 parameter \u2610 general \u2612 steps \u2612 stages Resource references none sources \u00b6 Scripts paths that must be present in the current workspace or https links to scripts. Only https urls from github are allowed and must be in the format :https://{githubBaseurl}/api/v3/repos/{owner}/{repository}/contents/{path to script} Authentication for the download is only supported via the 'githubToken' param. Make sure the script has the necessary execute permissions. back to overview Scope Details Aliases - Type []string Mandatory no Default $PIPER_sources (if set) Secret no Configuration scope \u2612 parameter \u2610 general \u2612 steps \u2612 stages Resource references none verbose \u00b6 verbose output back to overview Scope Details Aliases - Type bool Mandatory no Default false Possible values - true - false Secret no Configuration scope \u2612 parameter \u2612 general \u2612 steps \u2612 stages Resource references none githubTokenCredentialsId \u00b6 Jenkins credentials ID containing the github token. back to overview Scope Details Aliases - Type string Configuration scope \u2612 parameter \u2612 general \u2612 steps \u2612 stages","title":"shellExecute"},{"location":"steps/shellExecute/#shellexecute","text":"Step executes defined script","title":"shellExecute"},{"location":"steps/shellExecute/#description","text":"Step executes defined script provided in the 'sources' parameter","title":"Description"},{"location":"steps/shellExecute/#usage","text":"We recommend to define values of step parameters via .pipeline/config.yml file . In this case, calling the step is essentially reduced to defining the step name. Calling the step can be done either in an orchestrator specific way (e.g. via a Jenkins library step) or on the command line. Jenkins Command Line library ( 'piper-lib-os' ) shellExecute script: this piper shellExecute","title":"Usage"},{"location":"steps/shellExecute/#parameters","text":"","title":"Parameters"},{"location":"steps/shellExecute/#overview-step","text":"Name Mandatory Additional information script (yes) reference to Jenkins main pipeline script githubToken no pass via ENV, Vault or Jenkins credentials ( githubTokenCredentialsId ) scriptArguments no sources no verbose no activates debug output","title":"Overview - Step"},{"location":"steps/shellExecute/#overview-execution-environment","text":"Orchestrator-specific only These parameters are relevant for orchestrator usage and not considered when using the command line option. Name Mandatory Additional information containerCommand no containerShell no dockerEnvVars no dockerImage no dockerName no dockerOptions no dockerPullImage no dockerVolumeBind no dockerWorkspace no","title":"Overview - Execution Environment"},{"location":"steps/shellExecute/#details","text":"","title":"Details"},{"location":"steps/shellExecute/#containercommand","text":"Jenkins-specific: Used for proper environment setup. Kubernetes only: Allows to specify start command for container created with dockerImage parameter to overwrite Piper default (/usr/bin/tail -f /dev/null). back to overview Scope Details Aliases - Type string Mandatory no Default Secret no Configuration scope \u2612 parameter \u2612 general \u2612 steps \u2612 stages Resource references none","title":"containerCommand"},{"location":"steps/shellExecute/#containershell","text":"Jenkins-specific: Used for proper environment setup. Allows to specify the shell to be executed for container with containerName. back to overview Scope Details Aliases - Type string Mandatory no Default Secret no Configuration scope \u2612 parameter \u2612 general \u2612 steps \u2612 stages Resource references none","title":"containerShell"},{"location":"steps/shellExecute/#dockerenvvars","text":"Environment variables to set in the container, e.g. [http_proxy: \"proxy:8080\"]. back to overview Scope Details Aliases - Type map[string]string Mandatory no Default Secret no Configuration scope \u2612 parameter \u2612 general \u2612 steps \u2612 stages Resource references none","title":"dockerEnvVars"},{"location":"steps/shellExecute/#dockerimage","text":"Name of the docker image that should be used. If empty, Docker is not used and the command is executed directly on the Jenkins system. back to overview Scope Details Aliases - Type string Mandatory no Default node:22-bookworm Secret no Configuration scope \u2612 parameter \u2612 general \u2612 steps \u2612 stages Resource references none","title":"dockerImage"},{"location":"steps/shellExecute/#dockername","text":"Kubernetes only: Name of the container launching dockerImage. SideCar only: Name of the container in local network. back to overview Scope Details Aliases - Type string Mandatory no Default shell Secret no Configuration scope \u2612 parameter \u2612 general \u2612 steps \u2612 stages Resource references none","title":"dockerName"},{"location":"steps/shellExecute/#dockeroptions","text":"Docker options to be set when starting the container. back to overview Scope Details Aliases - Type []string Mandatory no Default Secret no Configuration scope \u2612 parameter \u2612 general \u2612 steps \u2612 stages Resource references none","title":"dockerOptions"},{"location":"steps/shellExecute/#dockerpullimage","text":"Set this to 'false' to bypass a docker image pull. Useful during development process. Allows testing of images which are available in the local registry only. back to overview Scope Details Aliases - Type bool Mandatory no Default true Possible values - true - false Secret no Configuration scope \u2612 parameter \u2612 general \u2612 steps \u2612 stages Resource references none","title":"dockerPullImage"},{"location":"steps/shellExecute/#dockervolumebind","text":"Jenkins-specific: Used for proper environment setup. Volumes that should be mounted into the docker container. back to overview Scope Details Aliases - Type map[string]string Mandatory no Default Secret no Configuration scope \u2612 parameter \u2612 general \u2612 steps \u2612 stages Resource references none","title":"dockerVolumeBind"},{"location":"steps/shellExecute/#dockerworkspace","text":"Jenkins-specific: Used for proper environment setup. Kubernetes only: Specifies a dedicated user home directory for the container which will be passed as value for environment variable HOME . back to overview Scope Details Aliases - Type string Mandatory no Default /home/node Secret no Configuration scope \u2612 parameter \u2612 general \u2612 steps \u2612 stages Resource references none","title":"dockerWorkspace"},{"location":"steps/shellExecute/#githubtoken","text":"GitHub personal access token as per https://help.github.com/en/github/authenticating-to-github/creating-a-personal-access-token-for-the-command-line back to overview Scope Details Aliases access_token Type string Mandatory no Default $PIPER_githubToken (if set) Secret yes Configuration scope \u2612 parameter \u2612 general \u2612 steps \u2612 stages Resource references Jenkins credential id: id: githubTokenCredentialsId Vault resource: name: githubVaultSecretName default value: github Vault paths: $(vaultPath)/github $(vaultBasePath)/$(vaultPipelineName)/github $(vaultBasePath)/GROUP-SECRETS/github","title":"githubToken"},{"location":"steps/shellExecute/#script","text":"The common script environment of the Jenkinsfile running. Typically the reference to the script calling the pipeline step is provided with the this parameter, as in script: this . This allows the function to access the commonPipelineEnvironment for retrieving, e.g. configuration parameters. back to overview Scope Details Aliases - Type Jenkins Script Mandatory yes Default Secret no Configuration scope \u2610 parameter \u2610 general \u2610 steps \u2610 stages Resource references none","title":"script"},{"location":"steps/shellExecute/#scriptarguments","text":"The scriptArguments list is a flat list and has a positional relationship to the sources parameter. For example, the scriptArguments string at position 0 will be considered as the argument(s) for script at position 0 in sources list. --sources \".pipeline/firstScript.sh\" --sources \".pipeline/secondScript.sh\" --scriptArguments \"$(first_script_arg)\" --scriptArguments \"$(second_script_arg)\" For multiple arguments for a particular script, please add them as a comma-separated string enclosed in additional quotes, e.g.: --sources \".pipeline/yourScript.sh\" --scriptArguments \"\\\"$(first_arg),$(second_arg)\\\"\" For multiple scripts with multiple arguments per each script your command would look like: --sources \".pipeline/firstScript.sh\" --sources \".pipeline/secondScript.sh\" --scriptArguments \"\\\"$(first_script_arg1),$(first_script_arg2)\\\"\" --scriptArguments \"\\\"$(second_script_arg1),$(second_script_arg2)\\\"\" back to overview Scope Details Aliases - Type []string Mandatory no Default $PIPER_scriptArguments (if set) Secret no Configuration scope \u2612 parameter \u2610 general \u2612 steps \u2612 stages Resource references none","title":"scriptArguments"},{"location":"steps/shellExecute/#sources","text":"Scripts paths that must be present in the current workspace or https links to scripts. Only https urls from github are allowed and must be in the format :https://{githubBaseurl}/api/v3/repos/{owner}/{repository}/contents/{path to script} Authentication for the download is only supported via the 'githubToken' param. Make sure the script has the necessary execute permissions. back to overview Scope Details Aliases - Type []string Mandatory no Default $PIPER_sources (if set) Secret no Configuration scope \u2612 parameter \u2610 general \u2612 steps \u2612 stages Resource references none","title":"sources"},{"location":"steps/shellExecute/#verbose","text":"verbose output back to overview Scope Details Aliases - Type bool Mandatory no Default false Possible values - true - false Secret no Configuration scope \u2612 parameter \u2612 general \u2612 steps \u2612 stages Resource references none","title":"verbose"},{"location":"steps/shellExecute/#githubtokencredentialsid","text":"Jenkins credentials ID containing the github token. back to overview Scope Details Aliases - Type string Configuration scope \u2612 parameter \u2612 general \u2612 steps \u2612 stages","title":"githubTokenCredentialsId"},{"location":"steps/slackSendNotification/","text":"slackSendNotification \u00b6 Description \u00b6 Sends notifications to the Slack channel about the build status. Notification contains: Build status Repo Owner Repo Name Branch Name Jenkins Build Number Jenkins Build URL Prerequisites \u00b6 Installed and configured Slack JenkinsCI integration secret text Jenkins credentials with the Slack token Installed and configured Jenkins Slack plugin Parameters \u00b6 name mandatory default possible values baseUrl no channel no color no ${['SUCCESS': '#8cc04f', 'FAILURE': '#d54c53', 'ABORTED': '#949393', 'UNSTABLE': '#f6b44b', 'PAUSED': '#24b0d5', 'UNKNOWN': '#d54cc4'].get(buildStatus, '#d54cc4')} one of good , warning , danger , or any hex color code (eg. #439FE0 ) credentialsId no Jenkins credentials id message no script yes baseUrl - Allows overriding the Slack Plugin Integration Base Url specified in the global configuration. channel - Allows overriding of the default massaging channel from the plugin configuration. color - Defines the message color color defines the message color. credentialsId - The credentials id for the Slack token. message - Send a custom message into the Slack channel. script - The common script environment of the Jenkinsfile running. Typically the reference to the script calling the pipeline step is provided with the this parameter, as in script: this . This allows the function to access the commonPipelineEnvironment for retrieving, e.g. configuration parameters. Step configuration \u00b6 We recommend to define values of step parameters via config.yml file . In following sections of the config.yml the configuration is possible: parameter general step/stage baseUrl X channel X color X credentialsId X message X script Dependencies \u00b6 The step depends on the following Jenkins plugins pipeline-utility-steps workflow-basic-steps workflow-cps-global-lib Transitive dependencies are omitted. The list might be incomplete. Consider using the ppiper/jenkins-master docker image. This images comes with preinstalled plugins. Example \u00b6 Usage of pipeline step: pipeline { agent any stages { stage ( 'Build' ) { steps { echo \"do something\" } } } post { always { slackSendNotification script: this } } }","title":"slackSendNotification"},{"location":"steps/slackSendNotification/#slacksendnotification","text":"","title":"slackSendNotification"},{"location":"steps/slackSendNotification/#description","text":"Sends notifications to the Slack channel about the build status. Notification contains: Build status Repo Owner Repo Name Branch Name Jenkins Build Number Jenkins Build URL","title":"Description"},{"location":"steps/slackSendNotification/#prerequisites","text":"Installed and configured Slack JenkinsCI integration secret text Jenkins credentials with the Slack token Installed and configured Jenkins Slack plugin","title":"Prerequisites"},{"location":"steps/slackSendNotification/#parameters","text":"name mandatory default possible values baseUrl no channel no color no ${['SUCCESS': '#8cc04f', 'FAILURE': '#d54c53', 'ABORTED': '#949393', 'UNSTABLE': '#f6b44b', 'PAUSED': '#24b0d5', 'UNKNOWN': '#d54cc4'].get(buildStatus, '#d54cc4')} one of good , warning , danger , or any hex color code (eg. #439FE0 ) credentialsId no Jenkins credentials id message no script yes baseUrl - Allows overriding the Slack Plugin Integration Base Url specified in the global configuration. channel - Allows overriding of the default massaging channel from the plugin configuration. color - Defines the message color color defines the message color. credentialsId - The credentials id for the Slack token. message - Send a custom message into the Slack channel. script - The common script environment of the Jenkinsfile running. Typically the reference to the script calling the pipeline step is provided with the this parameter, as in script: this . This allows the function to access the commonPipelineEnvironment for retrieving, e.g. configuration parameters.","title":"Parameters"},{"location":"steps/slackSendNotification/#step-configuration","text":"We recommend to define values of step parameters via config.yml file . In following sections of the config.yml the configuration is possible: parameter general step/stage baseUrl X channel X color X credentialsId X message X script","title":"Step configuration"},{"location":"steps/slackSendNotification/#dependencies","text":"The step depends on the following Jenkins plugins pipeline-utility-steps workflow-basic-steps workflow-cps-global-lib Transitive dependencies are omitted. The list might be incomplete. Consider using the ppiper/jenkins-master docker image. This images comes with preinstalled plugins.","title":"Dependencies"},{"location":"steps/slackSendNotification/#example","text":"Usage of pipeline step: pipeline { agent any stages { stage ( 'Build' ) { steps { echo \"do something\" } } } post { always { slackSendNotification script: this } } }","title":"Example"},{"location":"steps/snykExecute/","text":"snykExecute \u00b6 Description \u00b6 This step performs an open source vulnerability scan on a Node project or Node module inside an MTA project through snyk.io. Prerequisites \u00b6 Snyk account - have an account on snyk.io Snyk token - have a Snyk user token Parameters \u00b6 name mandatory default possible values buildDescriptorFile no ./package.json dockerEnvVars no dockerImage no node:lts-bookworm dockerOptions no dockerWorkspace no exclude no [] monitor no true scanType no npm npm , mta script yes snykCredentialsId yes Jenkins credentials id snykOrg no toHtml no false toJson no false buildDescriptorFile - The path to the build descriptor file, e.g. ./package.json . dockerEnvVars - Environment variables to set in the container, e.g. [http_proxy: 'proxy:8080']. dockerImage - Name of the docker image that should be used. Configure with empty value to execute the command directly on the Jenkins system (not using a container). Omit to use the default image (cf. default_pipeline_environment.yml ) Overwrite to use custom Docker image. dockerOptions - Docker only: Docker options to be set when starting the container (List or String). dockerWorkspace - Kubernetes only: Specifies a dedicated user home directory for the container which will be passed as value for environment variable HOME . exclude - Only scanType 'mta': Exclude modules from MTA projects. monitor - Monitor the application's dependencies for new vulnerabilities. scanType - The type of project that should be scanned. script - The common script environment of the Jenkinsfile running. Typically the reference to the script calling the pipeline step is provided with the this parameter, as in script: this . This allows the function to access the commonPipelineEnvironment for retrieving, e.g. configuration parameters. snykCredentialsId - Credentials for accessing the Snyk API. snykOrg - Only needed for monitor: true : The organisation ID to determine the organisation to report to. toHtml - Generate and archive a HTML report. toJson - Generate and archive a JSON report. Step configuration \u00b6 We recommend to define values of step parameters via config.yml file . In following sections of the config.yml the configuration is possible: parameter general step/stage buildDescriptorFile X dockerEnvVars X dockerImage X dockerOptions X dockerWorkspace X exclude X monitor X scanType X script snykCredentialsId X X snykOrg X toHtml X toJson X Dependencies \u00b6 The step depends on the following Jenkins plugins credentials-binding docker kubernetes pipeline-utility-steps workflow-basic-steps workflow-cps workflow-cps-global-lib workflow-durable-task-step The kubernetes plugin is only used if running in a kubernetes environment. Transitive dependencies are omitted. The list might be incomplete. Consider using the ppiper/jenkins-master docker image. This images comes with preinstalled plugins. Side effects \u00b6 Step uses dockerExecute inside. Exceptions \u00b6 none Example \u00b6 snykExecute script: this , snykCredentialsId: 'mySnykToken'","title":"snykExecute"},{"location":"steps/snykExecute/#snykexecute","text":"","title":"snykExecute"},{"location":"steps/snykExecute/#description","text":"This step performs an open source vulnerability scan on a Node project or Node module inside an MTA project through snyk.io.","title":"Description"},{"location":"steps/snykExecute/#prerequisites","text":"Snyk account - have an account on snyk.io Snyk token - have a Snyk user token","title":"Prerequisites"},{"location":"steps/snykExecute/#parameters","text":"name mandatory default possible values buildDescriptorFile no ./package.json dockerEnvVars no dockerImage no node:lts-bookworm dockerOptions no dockerWorkspace no exclude no [] monitor no true scanType no npm npm , mta script yes snykCredentialsId yes Jenkins credentials id snykOrg no toHtml no false toJson no false buildDescriptorFile - The path to the build descriptor file, e.g. ./package.json . dockerEnvVars - Environment variables to set in the container, e.g. [http_proxy: 'proxy:8080']. dockerImage - Name of the docker image that should be used. Configure with empty value to execute the command directly on the Jenkins system (not using a container). Omit to use the default image (cf. default_pipeline_environment.yml ) Overwrite to use custom Docker image. dockerOptions - Docker only: Docker options to be set when starting the container (List or String). dockerWorkspace - Kubernetes only: Specifies a dedicated user home directory for the container which will be passed as value for environment variable HOME . exclude - Only scanType 'mta': Exclude modules from MTA projects. monitor - Monitor the application's dependencies for new vulnerabilities. scanType - The type of project that should be scanned. script - The common script environment of the Jenkinsfile running. Typically the reference to the script calling the pipeline step is provided with the this parameter, as in script: this . This allows the function to access the commonPipelineEnvironment for retrieving, e.g. configuration parameters. snykCredentialsId - Credentials for accessing the Snyk API. snykOrg - Only needed for monitor: true : The organisation ID to determine the organisation to report to. toHtml - Generate and archive a HTML report. toJson - Generate and archive a JSON report.","title":"Parameters"},{"location":"steps/snykExecute/#step-configuration","text":"We recommend to define values of step parameters via config.yml file . In following sections of the config.yml the configuration is possible: parameter general step/stage buildDescriptorFile X dockerEnvVars X dockerImage X dockerOptions X dockerWorkspace X exclude X monitor X scanType X script snykCredentialsId X X snykOrg X toHtml X toJson X","title":"Step configuration"},{"location":"steps/snykExecute/#dependencies","text":"The step depends on the following Jenkins plugins credentials-binding docker kubernetes pipeline-utility-steps workflow-basic-steps workflow-cps workflow-cps-global-lib workflow-durable-task-step The kubernetes plugin is only used if running in a kubernetes environment. Transitive dependencies are omitted. The list might be incomplete. Consider using the ppiper/jenkins-master docker image. This images comes with preinstalled plugins.","title":"Dependencies"},{"location":"steps/snykExecute/#side-effects","text":"Step uses dockerExecute inside.","title":"Side effects"},{"location":"steps/snykExecute/#exceptions","text":"none","title":"Exceptions"},{"location":"steps/snykExecute/#example","text":"snykExecute script: this , snykCredentialsId: 'mySnykToken'","title":"Example"},{"location":"steps/sonarExecuteScan/","text":"sonarExecuteScan \u00b6 Executes the Sonar scanner Description \u00b6 The step executes the sonar-scanner cli command to scan the defined sources and publish the results to a SonarQube instance. Check source repository for more details. Usage \u00b6 We recommend to define values of step parameters via .pipeline/config.yml file . In this case, calling the step is essentially reduced to defining the step name. Calling the step can be done either in an orchestrator specific way (e.g. via a Jenkins library step) or on the command line. Jenkins Command Line library ( 'piper-lib-os' ) sonarExecuteScan script: this piper sonarExecuteScan Outputs \u00b6 Output type Details influx measurement step_data sonar measurement sonarqube_data blocker_issues critical_issues major_issues minor_issues info_issues Prerequisites \u00b6 The project needs a sonar-project.properties file that describes the project and defines certain settings, see here . A SonarQube instance needs to be defined in the Jenkins. Parameters \u00b6 Overview - Step \u00b6 Name Mandatory Additional information script (yes) reference to Jenkins main pipeline script branchName no changeBranch no changeId no changeTarget no coverageExclusions no customScanVersion no customTlsCertificateLinks no disableInlineComments no githubApiUrl no githubToken no pass via ENV, Vault or Jenkins credentials ( githubTokenCredentialsId ) inferBranchName no inferJavaBinaries no inferJavaLibraries no instance no legacyPRHandling no m2Path no options no organization no owner no projectKey no proxy no pullRequestProvider no repository no serverUrl no sonarScannerDownloadUrl no token no pass via ENV, Vault, System Trust or Jenkins credentials ( sonarTokenCredentialsId ) verbose no activates debug output version no versioningModel no waitForQualityGate no Overview - Execution Environment \u00b6 Orchestrator-specific only These parameters are relevant for orchestrator usage and not considered when using the command line option. Name Mandatory Additional information containerCommand no containerShell no dockerEnvVars no dockerImage no dockerName no dockerOptions no dockerPullImage no dockerVolumeBind no dockerWorkspace no Details \u00b6 branchName \u00b6 Non-Pull-Request only: Name of the SonarQube branch that should be used to report findings to. Automatically inferred from environment variables on supported orchestrators if inferBranchName is set to true. back to overview Scope Details Aliases - Type string Mandatory no Default $PIPER_branchName (if set) Secret no Configuration scope \u2612 parameter \u2610 general \u2612 steps \u2612 stages Resource references none changeBranch \u00b6 Pull-Request only: The name of the pull-request branch. Automatically inferred from environment variables on supported orchestrators. back to overview Scope Details Aliases - Type string Mandatory no Default $PIPER_changeBranch (if set) Secret no Configuration scope \u2612 parameter \u2610 general \u2610 steps \u2610 stages Resource references none changeId \u00b6 Pull-Request only: The id of the pull-request. Automatically inferred from environment variables on supported orchestrators. back to overview Scope Details Aliases - Type string Mandatory no Default $PIPER_changeId (if set) Secret no Configuration scope \u2612 parameter \u2610 general \u2610 steps \u2610 stages Resource references none changeTarget \u00b6 Pull-Request only: The name of the base branch. Automatically inferred from environment variables on supported orchestrators. back to overview Scope Details Aliases - Type string Mandatory no Default $PIPER_changeTarget (if set) Secret no Configuration scope \u2612 parameter \u2610 general \u2610 steps \u2610 stages Resource references none containerCommand \u00b6 Jenkins-specific: Used for proper environment setup. Kubernetes only: Allows to specify start command for container created with dockerImage parameter to overwrite Piper default (/usr/bin/tail -f /dev/null). back to overview Scope Details Aliases - Type string Mandatory no Default Secret no Configuration scope \u2612 parameter \u2612 general \u2612 steps \u2612 stages Resource references none containerShell \u00b6 Jenkins-specific: Used for proper environment setup. Allows to specify the shell to be executed for container with containerName. back to overview Scope Details Aliases - Type string Mandatory no Default Secret no Configuration scope \u2612 parameter \u2612 general \u2612 steps \u2612 stages Resource references none coverageExclusions \u00b6 A list of patterns that should be excluded from the coverage scan. back to overview Scope Details Aliases - Type []string Mandatory no Default $PIPER_coverageExclusions (if set) Secret no Configuration scope \u2612 parameter \u2610 general \u2612 steps \u2612 stages Resource references none customScanVersion \u00b6 Defines a custom version for the Sonar scan which deviates from the typical versioning pattern using version and versioningModel . It allows to set non-numeric versions as well and supersedes the value of version which is calculated automatically. The parameter is also used by other scan steps (e.g. Detect, Fortify, WhiteSource) and thus allows a common custom version across scan tools. back to overview Scope Details Aliases - Type string Mandatory no Default $PIPER_customScanVersion (if set) Secret no Configuration scope \u2612 parameter \u2612 general \u2612 steps \u2612 stages Resource references none customTlsCertificateLinks \u00b6 List of download links to custom TLS certificates. This is required to ensure trusted connections to instances with custom certificates. back to overview Scope Details Aliases - Type []string Mandatory no Default $PIPER_customTlsCertificateLinks (if set) Secret no Configuration scope \u2612 parameter \u2610 general \u2612 steps \u2612 stages Resource references none disableInlineComments \u00b6 Pull-Request only: Disables the pull-request decoration with inline comments. DEPRECATED: only supported in SonarQube < 7.2 back to overview Scope Details Aliases - Type bool Mandatory no Default false Possible values - true - false Secret no Configuration scope \u2612 parameter \u2610 general \u2612 steps \u2612 stages Resource references none dockerEnvVars \u00b6 Environment variables to set in the container, e.g. [http_proxy: \"proxy:8080\"]. back to overview Scope Details Aliases - Type map[string]string Mandatory no Default Secret no Configuration scope \u2612 parameter \u2612 general \u2612 steps \u2612 stages Resource references none dockerImage \u00b6 Name of the docker image that should be used. If empty, Docker is not used and the command is executed directly on the Jenkins system. back to overview Scope Details Aliases - Type string Mandatory no Default sonarsource/sonar-scanner-cli:11 Secret no Configuration scope \u2612 parameter \u2612 general \u2612 steps \u2612 stages Resource references none dockerName \u00b6 Kubernetes only: Name of the container launching dockerImage. SideCar only: Name of the container in local network. back to overview Scope Details Aliases - Type string Mandatory no Default sonar Secret no Configuration scope \u2612 parameter \u2612 general \u2612 steps \u2612 stages Resource references none dockerOptions \u00b6 Docker options to be set when starting the container. back to overview Scope Details Aliases - Type []string Mandatory no Default [{-u 0}] Secret no Configuration scope \u2612 parameter \u2612 general \u2612 steps \u2612 stages Resource references none dockerPullImage \u00b6 Set this to 'false' to bypass a docker image pull. Useful during development process. Allows testing of images which are available in the local registry only. back to overview Scope Details Aliases - Type bool Mandatory no Default true Possible values - true - false Secret no Configuration scope \u2612 parameter \u2612 general \u2612 steps \u2612 stages Resource references none dockerVolumeBind \u00b6 Jenkins-specific: Used for proper environment setup. Volumes that should be mounted into the docker container. back to overview Scope Details Aliases - Type map[string]string Mandatory no Default Secret no Configuration scope \u2612 parameter \u2612 general \u2612 steps \u2612 stages Resource references none dockerWorkspace \u00b6 Jenkins-specific: Used for proper environment setup. Kubernetes only: Specifies a dedicated user home directory for the container which will be passed as value for environment variable HOME . back to overview Scope Details Aliases - Type string Mandatory no Default Secret no Configuration scope \u2612 parameter \u2612 general \u2612 steps \u2612 stages Resource references none githubApiUrl \u00b6 Pull-Request only: The URL to the Github API. See GitHub plugin docs DEPRECATED: only supported in SonarQube < 7.2 back to overview Scope Details Aliases - Type string Mandatory no Default https://api.github.com Secret no Configuration scope \u2612 parameter \u2612 general \u2612 steps \u2612 stages Resource references none githubToken \u00b6 Pull-Request only: Token for Github to set status on the Pull-Request. back to overview Scope Details Aliases access_token Type string Mandatory no Default $PIPER_githubToken (if set) Secret yes Configuration scope \u2612 parameter \u2610 general \u2610 steps \u2610 stages Resource references Jenkins credential id: id: githubTokenCredentialsId Vault resource: name: githubVaultSecretName default value: github Vault paths: $(vaultPath)/github $(vaultBasePath)/$(vaultPipelineName)/github $(vaultBasePath)/GROUP-SECRETS/github inferBranchName \u00b6 Whether to infer the branchName parameter automatically based on the orchestrator-specific environment variable in runs of the pipeline. back to overview Scope Details Aliases - Type bool Mandatory no Default false Possible values - true - false Secret no Configuration scope \u2612 parameter \u2610 general \u2612 steps \u2612 stages Resource references none inferJavaBinaries \u00b6 Find the location of generated Java class files in all modules and pass the option sonar.java.binaries to the sonar tool. back to overview Scope Details Aliases - Type bool Mandatory no Default false Possible values - true - false Secret no Configuration scope \u2612 parameter \u2610 general \u2612 steps \u2612 stages Resource references none inferJavaLibraries \u00b6 If the parameter m2Path is configured for the step mavenExecute in the general section of the configuration, pass it as option sonar.java.libraries to the sonar tool. back to overview Scope Details Aliases - Type bool Mandatory no Default false Possible values - true - false Secret no Configuration scope \u2612 parameter \u2610 general \u2612 steps \u2612 stages Resource references none instance \u00b6 Jenkins only: The name of the SonarQube instance defined in the Jenkins settings. DEPRECATED: use serverUrl parameter instead back to overview Scope Details Aliases - Type string Mandatory no Default $PIPER_instance (if set) Secret no Configuration scope \u2612 parameter \u2610 general \u2612 steps \u2612 stages Resource references none legacyPRHandling \u00b6 Pull-Request only: Activates the pull-request handling using the GitHub Plugin . DEPRECATED: only supported in SonarQube < 7.2 back to overview Scope Details Aliases - Type bool Mandatory no Default false Possible values - true - false Secret no Configuration scope \u2612 parameter \u2610 general \u2612 steps \u2612 stages Resource references none m2Path \u00b6 Path to the location of the local repository that should be used. back to overview Scope Details Aliases maven/m2Path Type string Mandatory no Default $PIPER_m2Path (if set) Secret no Configuration scope \u2612 parameter \u2612 general \u2612 steps \u2612 stages Resource references none options \u00b6 A list of options which are passed to the sonar-scanner. back to overview Scope Details Aliases sonarProperties ( deprecated ) Type []string Mandatory no Default $PIPER_options (if set) Secret no Configuration scope \u2612 parameter \u2610 general \u2612 steps \u2612 stages Resource references none organization \u00b6 SonarCloud.io only: Organization that the project will be assigned to in SonarCloud.io. back to overview Scope Details Aliases - Type string Mandatory no Default $PIPER_organization (if set) Secret no Configuration scope \u2612 parameter \u2610 general \u2612 steps \u2612 stages Resource references none owner \u00b6 Pull-Request only: The owner of the scm repository. back to overview Scope Details Aliases githubOrg Type string Mandatory no Default $PIPER_owner (if set) Secret no Configuration scope \u2612 parameter \u2612 general \u2612 steps \u2612 stages Resource references commonPipelineEnvironment : reference to: github/owner projectKey \u00b6 The project key identifies the project in SonarQube. back to overview Scope Details Aliases - Type string Mandatory no Default $PIPER_projectKey (if set) Secret no Configuration scope \u2612 parameter \u2610 general \u2612 steps \u2612 stages Resource references none proxy \u00b6 Proxy URL to be used for communication with the SonarQube instance. back to overview Scope Details Aliases - Type string Mandatory no Default $PIPER_proxy (if set) Secret no Configuration scope \u2612 parameter \u2610 general \u2612 steps \u2612 stages Resource references none pullRequestProvider \u00b6 Pull-Request only: The scm provider. back to overview Scope Details Aliases - Type string Mandatory no Default GitHub Possible values - GitHub Secret no Configuration scope \u2612 parameter \u2610 general \u2612 steps \u2612 stages Resource references none repository \u00b6 Pull-Request only: The scm repository. back to overview Scope Details Aliases githubRepo Type string Mandatory no Default $PIPER_repository (if set) Secret no Configuration scope \u2612 parameter \u2612 general \u2612 steps \u2612 stages Resource references commonPipelineEnvironment : reference to: github/repository script \u00b6 The common script environment of the Jenkinsfile running. Typically the reference to the script calling the pipeline step is provided with the this parameter, as in script: this . This allows the function to access the commonPipelineEnvironment for retrieving, e.g. configuration parameters. back to overview Scope Details Aliases - Type Jenkins Script Mandatory yes Default Secret no Configuration scope \u2610 parameter \u2610 general \u2610 steps \u2610 stages Resource references none serverUrl \u00b6 The URL to the Sonar backend. Jenkins only: The serverUrl parameter requires the instance parameter to be explicitly set to an empty string, as it will have no effect otherwise. back to overview Scope Details Aliases - host - sonarServerUrl Type string Mandatory no Default $PIPER_serverUrl (if set) Secret no Configuration scope \u2612 parameter \u2610 general \u2612 steps \u2612 stages Resource references none sonarScannerDownloadUrl \u00b6 URL to the sonar-scanner-cli archive. back to overview Scope Details Aliases - Type string Mandatory no Default https://binaries.sonarsource.com/Distribution/sonar-scanner-cli/sonar-scanner-cli-7.2.0.5079-linux-x64.zip Secret no Configuration scope \u2612 parameter \u2610 general \u2612 steps \u2612 stages Resource references none token \u00b6 Token used to authenticate with the Sonar Server. back to overview Scope Details Aliases sonarToken Type string Mandatory no Default $PIPER_token (if set) Secret yes Configuration scope \u2612 parameter \u2610 general \u2610 steps \u2610 stages Resource references Vault resource: name: sonarVaultSecretName default value: sonar Vault paths: $(vaultPath)/sonar $(vaultBasePath)/$(vaultPipelineName)/sonar $(vaultBasePath)/GROUP-SECRETS/sonar Jenkins credential id: id: sonarTokenCredentialsId System Trust resource: name: sonarSystemtrustSecretName value: sonar verbose \u00b6 verbose output back to overview Scope Details Aliases - Type bool Mandatory no Default false Possible values - true - false Secret no Configuration scope \u2612 parameter \u2612 general \u2612 steps \u2612 stages Resource references none version \u00b6 The project version that is reported to SonarQube. back to overview Scope Details Aliases projectVersion ( deprecated ) Type string Mandatory no Default $PIPER_version (if set) Secret no Configuration scope \u2612 parameter \u2610 general \u2612 steps \u2612 stages Resource references commonPipelineEnvironment : reference to: artifactVersion versioningModel \u00b6 The versioning model used for the version when reporting the results for the project. back to overview Scope Details Aliases - Type string Mandatory no Default major Possible values - major - major-minor - semantic - full Secret no Configuration scope \u2612 parameter \u2612 general \u2612 steps \u2612 stages Resource references none waitForQualityGate \u00b6 Whether the scan should wait for and consider the result of the quality gate. This sets parameter sonar.qualitygate.wait . back to overview Scope Details Aliases - Type bool Mandatory no Default false Possible values - true - false Secret no Configuration scope \u2612 parameter \u2610 general \u2612 steps \u2612 stages Resource references none sonarTokenCredentialsId \u00b6 Jenkins 'Secret text' credentials ID containing the token used to authenticate with the Sonar Server. back to overview Scope Details Aliases - Type string Configuration scope \u2612 parameter \u2612 general \u2612 steps \u2612 stages githubTokenCredentialsId \u00b6 Jenkins 'Secret text' credentials ID containing the token used to authenticate with the Github Server. back to overview Scope Details Aliases - Type string Configuration scope \u2612 parameter \u2612 general \u2612 steps \u2612 stages Exceptions \u00b6 none Examples \u00b6","title":"sonarExecuteScan"},{"location":"steps/sonarExecuteScan/#sonarexecutescan","text":"Executes the Sonar scanner","title":"sonarExecuteScan"},{"location":"steps/sonarExecuteScan/#description","text":"The step executes the sonar-scanner cli command to scan the defined sources and publish the results to a SonarQube instance. Check source repository for more details.","title":"Description"},{"location":"steps/sonarExecuteScan/#usage","text":"We recommend to define values of step parameters via .pipeline/config.yml file . In this case, calling the step is essentially reduced to defining the step name. Calling the step can be done either in an orchestrator specific way (e.g. via a Jenkins library step) or on the command line. Jenkins Command Line library ( 'piper-lib-os' ) sonarExecuteScan script: this piper sonarExecuteScan","title":"Usage"},{"location":"steps/sonarExecuteScan/#outputs","text":"Output type Details influx measurement step_data sonar measurement sonarqube_data blocker_issues critical_issues major_issues minor_issues info_issues","title":"Outputs"},{"location":"steps/sonarExecuteScan/#prerequisites","text":"The project needs a sonar-project.properties file that describes the project and defines certain settings, see here . A SonarQube instance needs to be defined in the Jenkins.","title":"Prerequisites"},{"location":"steps/sonarExecuteScan/#parameters","text":"","title":"Parameters"},{"location":"steps/sonarExecuteScan/#overview-step","text":"Name Mandatory Additional information script (yes) reference to Jenkins main pipeline script branchName no changeBranch no changeId no changeTarget no coverageExclusions no customScanVersion no customTlsCertificateLinks no disableInlineComments no githubApiUrl no githubToken no pass via ENV, Vault or Jenkins credentials ( githubTokenCredentialsId ) inferBranchName no inferJavaBinaries no inferJavaLibraries no instance no legacyPRHandling no m2Path no options no organization no owner no projectKey no proxy no pullRequestProvider no repository no serverUrl no sonarScannerDownloadUrl no token no pass via ENV, Vault, System Trust or Jenkins credentials ( sonarTokenCredentialsId ) verbose no activates debug output version no versioningModel no waitForQualityGate no","title":"Overview - Step"},{"location":"steps/sonarExecuteScan/#overview-execution-environment","text":"Orchestrator-specific only These parameters are relevant for orchestrator usage and not considered when using the command line option. Name Mandatory Additional information containerCommand no containerShell no dockerEnvVars no dockerImage no dockerName no dockerOptions no dockerPullImage no dockerVolumeBind no dockerWorkspace no","title":"Overview - Execution Environment"},{"location":"steps/sonarExecuteScan/#details","text":"","title":"Details"},{"location":"steps/sonarExecuteScan/#branchname","text":"Non-Pull-Request only: Name of the SonarQube branch that should be used to report findings to. Automatically inferred from environment variables on supported orchestrators if inferBranchName is set to true. back to overview Scope Details Aliases - Type string Mandatory no Default $PIPER_branchName (if set) Secret no Configuration scope \u2612 parameter \u2610 general \u2612 steps \u2612 stages Resource references none","title":"branchName"},{"location":"steps/sonarExecuteScan/#changebranch","text":"Pull-Request only: The name of the pull-request branch. Automatically inferred from environment variables on supported orchestrators. back to overview Scope Details Aliases - Type string Mandatory no Default $PIPER_changeBranch (if set) Secret no Configuration scope \u2612 parameter \u2610 general \u2610 steps \u2610 stages Resource references none","title":"changeBranch"},{"location":"steps/sonarExecuteScan/#changeid","text":"Pull-Request only: The id of the pull-request. Automatically inferred from environment variables on supported orchestrators. back to overview Scope Details Aliases - Type string Mandatory no Default $PIPER_changeId (if set) Secret no Configuration scope \u2612 parameter \u2610 general \u2610 steps \u2610 stages Resource references none","title":"changeId"},{"location":"steps/sonarExecuteScan/#changetarget","text":"Pull-Request only: The name of the base branch. Automatically inferred from environment variables on supported orchestrators. back to overview Scope Details Aliases - Type string Mandatory no Default $PIPER_changeTarget (if set) Secret no Configuration scope \u2612 parameter \u2610 general \u2610 steps \u2610 stages Resource references none","title":"changeTarget"},{"location":"steps/sonarExecuteScan/#containercommand","text":"Jenkins-specific: Used for proper environment setup. Kubernetes only: Allows to specify start command for container created with dockerImage parameter to overwrite Piper default (/usr/bin/tail -f /dev/null). back to overview Scope Details Aliases - Type string Mandatory no Default Secret no Configuration scope \u2612 parameter \u2612 general \u2612 steps \u2612 stages Resource references none","title":"containerCommand"},{"location":"steps/sonarExecuteScan/#containershell","text":"Jenkins-specific: Used for proper environment setup. Allows to specify the shell to be executed for container with containerName. back to overview Scope Details Aliases - Type string Mandatory no Default Secret no Configuration scope \u2612 parameter \u2612 general \u2612 steps \u2612 stages Resource references none","title":"containerShell"},{"location":"steps/sonarExecuteScan/#coverageexclusions","text":"A list of patterns that should be excluded from the coverage scan. back to overview Scope Details Aliases - Type []string Mandatory no Default $PIPER_coverageExclusions (if set) Secret no Configuration scope \u2612 parameter \u2610 general \u2612 steps \u2612 stages Resource references none","title":"coverageExclusions"},{"location":"steps/sonarExecuteScan/#customscanversion","text":"Defines a custom version for the Sonar scan which deviates from the typical versioning pattern using version and versioningModel . It allows to set non-numeric versions as well and supersedes the value of version which is calculated automatically. The parameter is also used by other scan steps (e.g. Detect, Fortify, WhiteSource) and thus allows a common custom version across scan tools. back to overview Scope Details Aliases - Type string Mandatory no Default $PIPER_customScanVersion (if set) Secret no Configuration scope \u2612 parameter \u2612 general \u2612 steps \u2612 stages Resource references none","title":"customScanVersion"},{"location":"steps/sonarExecuteScan/#customtlscertificatelinks","text":"List of download links to custom TLS certificates. This is required to ensure trusted connections to instances with custom certificates. back to overview Scope Details Aliases - Type []string Mandatory no Default $PIPER_customTlsCertificateLinks (if set) Secret no Configuration scope \u2612 parameter \u2610 general \u2612 steps \u2612 stages Resource references none","title":"customTlsCertificateLinks"},{"location":"steps/sonarExecuteScan/#disableinlinecomments","text":"Pull-Request only: Disables the pull-request decoration with inline comments. DEPRECATED: only supported in SonarQube < 7.2 back to overview Scope Details Aliases - Type bool Mandatory no Default false Possible values - true - false Secret no Configuration scope \u2612 parameter \u2610 general \u2612 steps \u2612 stages Resource references none","title":"disableInlineComments"},{"location":"steps/sonarExecuteScan/#dockerenvvars","text":"Environment variables to set in the container, e.g. [http_proxy: \"proxy:8080\"]. back to overview Scope Details Aliases - Type map[string]string Mandatory no Default Secret no Configuration scope \u2612 parameter \u2612 general \u2612 steps \u2612 stages Resource references none","title":"dockerEnvVars"},{"location":"steps/sonarExecuteScan/#dockerimage","text":"Name of the docker image that should be used. If empty, Docker is not used and the command is executed directly on the Jenkins system. back to overview Scope Details Aliases - Type string Mandatory no Default sonarsource/sonar-scanner-cli:11 Secret no Configuration scope \u2612 parameter \u2612 general \u2612 steps \u2612 stages Resource references none","title":"dockerImage"},{"location":"steps/sonarExecuteScan/#dockername","text":"Kubernetes only: Name of the container launching dockerImage. SideCar only: Name of the container in local network. back to overview Scope Details Aliases - Type string Mandatory no Default sonar Secret no Configuration scope \u2612 parameter \u2612 general \u2612 steps \u2612 stages Resource references none","title":"dockerName"},{"location":"steps/sonarExecuteScan/#dockeroptions","text":"Docker options to be set when starting the container. back to overview Scope Details Aliases - Type []string Mandatory no Default [{-u 0}] Secret no Configuration scope \u2612 parameter \u2612 general \u2612 steps \u2612 stages Resource references none","title":"dockerOptions"},{"location":"steps/sonarExecuteScan/#dockerpullimage","text":"Set this to 'false' to bypass a docker image pull. Useful during development process. Allows testing of images which are available in the local registry only. back to overview Scope Details Aliases - Type bool Mandatory no Default true Possible values - true - false Secret no Configuration scope \u2612 parameter \u2612 general \u2612 steps \u2612 stages Resource references none","title":"dockerPullImage"},{"location":"steps/sonarExecuteScan/#dockervolumebind","text":"Jenkins-specific: Used for proper environment setup. Volumes that should be mounted into the docker container. back to overview Scope Details Aliases - Type map[string]string Mandatory no Default Secret no Configuration scope \u2612 parameter \u2612 general \u2612 steps \u2612 stages Resource references none","title":"dockerVolumeBind"},{"location":"steps/sonarExecuteScan/#dockerworkspace","text":"Jenkins-specific: Used for proper environment setup. Kubernetes only: Specifies a dedicated user home directory for the container which will be passed as value for environment variable HOME . back to overview Scope Details Aliases - Type string Mandatory no Default Secret no Configuration scope \u2612 parameter \u2612 general \u2612 steps \u2612 stages Resource references none","title":"dockerWorkspace"},{"location":"steps/sonarExecuteScan/#githubapiurl","text":"Pull-Request only: The URL to the Github API. See GitHub plugin docs DEPRECATED: only supported in SonarQube < 7.2 back to overview Scope Details Aliases - Type string Mandatory no Default https://api.github.com Secret no Configuration scope \u2612 parameter \u2612 general \u2612 steps \u2612 stages Resource references none","title":"githubApiUrl"},{"location":"steps/sonarExecuteScan/#githubtoken","text":"Pull-Request only: Token for Github to set status on the Pull-Request. back to overview Scope Details Aliases access_token Type string Mandatory no Default $PIPER_githubToken (if set) Secret yes Configuration scope \u2612 parameter \u2610 general \u2610 steps \u2610 stages Resource references Jenkins credential id: id: githubTokenCredentialsId Vault resource: name: githubVaultSecretName default value: github Vault paths: $(vaultPath)/github $(vaultBasePath)/$(vaultPipelineName)/github $(vaultBasePath)/GROUP-SECRETS/github","title":"githubToken"},{"location":"steps/sonarExecuteScan/#inferbranchname","text":"Whether to infer the branchName parameter automatically based on the orchestrator-specific environment variable in runs of the pipeline. back to overview Scope Details Aliases - Type bool Mandatory no Default false Possible values - true - false Secret no Configuration scope \u2612 parameter \u2610 general \u2612 steps \u2612 stages Resource references none","title":"inferBranchName"},{"location":"steps/sonarExecuteScan/#inferjavabinaries","text":"Find the location of generated Java class files in all modules and pass the option sonar.java.binaries to the sonar tool. back to overview Scope Details Aliases - Type bool Mandatory no Default false Possible values - true - false Secret no Configuration scope \u2612 parameter \u2610 general \u2612 steps \u2612 stages Resource references none","title":"inferJavaBinaries"},{"location":"steps/sonarExecuteScan/#inferjavalibraries","text":"If the parameter m2Path is configured for the step mavenExecute in the general section of the configuration, pass it as option sonar.java.libraries to the sonar tool. back to overview Scope Details Aliases - Type bool Mandatory no Default false Possible values - true - false Secret no Configuration scope \u2612 parameter \u2610 general \u2612 steps \u2612 stages Resource references none","title":"inferJavaLibraries"},{"location":"steps/sonarExecuteScan/#instance","text":"Jenkins only: The name of the SonarQube instance defined in the Jenkins settings. DEPRECATED: use serverUrl parameter instead back to overview Scope Details Aliases - Type string Mandatory no Default $PIPER_instance (if set) Secret no Configuration scope \u2612 parameter \u2610 general \u2612 steps \u2612 stages Resource references none","title":"instance"},{"location":"steps/sonarExecuteScan/#legacyprhandling","text":"Pull-Request only: Activates the pull-request handling using the GitHub Plugin . DEPRECATED: only supported in SonarQube < 7.2 back to overview Scope Details Aliases - Type bool Mandatory no Default false Possible values - true - false Secret no Configuration scope \u2612 parameter \u2610 general \u2612 steps \u2612 stages Resource references none","title":"legacyPRHandling"},{"location":"steps/sonarExecuteScan/#m2path","text":"Path to the location of the local repository that should be used. back to overview Scope Details Aliases maven/m2Path Type string Mandatory no Default $PIPER_m2Path (if set) Secret no Configuration scope \u2612 parameter \u2612 general \u2612 steps \u2612 stages Resource references none","title":"m2Path"},{"location":"steps/sonarExecuteScan/#options","text":"A list of options which are passed to the sonar-scanner. back to overview Scope Details Aliases sonarProperties ( deprecated ) Type []string Mandatory no Default $PIPER_options (if set) Secret no Configuration scope \u2612 parameter \u2610 general \u2612 steps \u2612 stages Resource references none","title":"options"},{"location":"steps/sonarExecuteScan/#organization","text":"SonarCloud.io only: Organization that the project will be assigned to in SonarCloud.io. back to overview Scope Details Aliases - Type string Mandatory no Default $PIPER_organization (if set) Secret no Configuration scope \u2612 parameter \u2610 general \u2612 steps \u2612 stages Resource references none","title":"organization"},{"location":"steps/sonarExecuteScan/#owner","text":"Pull-Request only: The owner of the scm repository. back to overview Scope Details Aliases githubOrg Type string Mandatory no Default $PIPER_owner (if set) Secret no Configuration scope \u2612 parameter \u2612 general \u2612 steps \u2612 stages Resource references commonPipelineEnvironment : reference to: github/owner","title":"owner"},{"location":"steps/sonarExecuteScan/#projectkey","text":"The project key identifies the project in SonarQube. back to overview Scope Details Aliases - Type string Mandatory no Default $PIPER_projectKey (if set) Secret no Configuration scope \u2612 parameter \u2610 general \u2612 steps \u2612 stages Resource references none","title":"projectKey"},{"location":"steps/sonarExecuteScan/#proxy","text":"Proxy URL to be used for communication with the SonarQube instance. back to overview Scope Details Aliases - Type string Mandatory no Default $PIPER_proxy (if set) Secret no Configuration scope \u2612 parameter \u2610 general \u2612 steps \u2612 stages Resource references none","title":"proxy"},{"location":"steps/sonarExecuteScan/#pullrequestprovider","text":"Pull-Request only: The scm provider. back to overview Scope Details Aliases - Type string Mandatory no Default GitHub Possible values - GitHub Secret no Configuration scope \u2612 parameter \u2610 general \u2612 steps \u2612 stages Resource references none","title":"pullRequestProvider"},{"location":"steps/sonarExecuteScan/#repository","text":"Pull-Request only: The scm repository. back to overview Scope Details Aliases githubRepo Type string Mandatory no Default $PIPER_repository (if set) Secret no Configuration scope \u2612 parameter \u2612 general \u2612 steps \u2612 stages Resource references commonPipelineEnvironment : reference to: github/repository","title":"repository"},{"location":"steps/sonarExecuteScan/#script","text":"The common script environment of the Jenkinsfile running. Typically the reference to the script calling the pipeline step is provided with the this parameter, as in script: this . This allows the function to access the commonPipelineEnvironment for retrieving, e.g. configuration parameters. back to overview Scope Details Aliases - Type Jenkins Script Mandatory yes Default Secret no Configuration scope \u2610 parameter \u2610 general \u2610 steps \u2610 stages Resource references none","title":"script"},{"location":"steps/sonarExecuteScan/#serverurl","text":"The URL to the Sonar backend. Jenkins only: The serverUrl parameter requires the instance parameter to be explicitly set to an empty string, as it will have no effect otherwise. back to overview Scope Details Aliases - host - sonarServerUrl Type string Mandatory no Default $PIPER_serverUrl (if set) Secret no Configuration scope \u2612 parameter \u2610 general \u2612 steps \u2612 stages Resource references none","title":"serverUrl"},{"location":"steps/sonarExecuteScan/#sonarscannerdownloadurl","text":"URL to the sonar-scanner-cli archive. back to overview Scope Details Aliases - Type string Mandatory no Default https://binaries.sonarsource.com/Distribution/sonar-scanner-cli/sonar-scanner-cli-7.2.0.5079-linux-x64.zip Secret no Configuration scope \u2612 parameter \u2610 general \u2612 steps \u2612 stages Resource references none","title":"sonarScannerDownloadUrl"},{"location":"steps/sonarExecuteScan/#token","text":"Token used to authenticate with the Sonar Server. back to overview Scope Details Aliases sonarToken Type string Mandatory no Default $PIPER_token (if set) Secret yes Configuration scope \u2612 parameter \u2610 general \u2610 steps \u2610 stages Resource references Vault resource: name: sonarVaultSecretName default value: sonar Vault paths: $(vaultPath)/sonar $(vaultBasePath)/$(vaultPipelineName)/sonar $(vaultBasePath)/GROUP-SECRETS/sonar Jenkins credential id: id: sonarTokenCredentialsId System Trust resource: name: sonarSystemtrustSecretName value: sonar","title":"token"},{"location":"steps/sonarExecuteScan/#verbose","text":"verbose output back to overview Scope Details Aliases - Type bool Mandatory no Default false Possible values - true - false Secret no Configuration scope \u2612 parameter \u2612 general \u2612 steps \u2612 stages Resource references none","title":"verbose"},{"location":"steps/sonarExecuteScan/#version","text":"The project version that is reported to SonarQube. back to overview Scope Details Aliases projectVersion ( deprecated ) Type string Mandatory no Default $PIPER_version (if set) Secret no Configuration scope \u2612 parameter \u2610 general \u2612 steps \u2612 stages Resource references commonPipelineEnvironment : reference to: artifactVersion","title":"version"},{"location":"steps/sonarExecuteScan/#versioningmodel","text":"The versioning model used for the version when reporting the results for the project. back to overview Scope Details Aliases - Type string Mandatory no Default major Possible values - major - major-minor - semantic - full Secret no Configuration scope \u2612 parameter \u2612 general \u2612 steps \u2612 stages Resource references none","title":"versioningModel"},{"location":"steps/sonarExecuteScan/#waitforqualitygate","text":"Whether the scan should wait for and consider the result of the quality gate. This sets parameter sonar.qualitygate.wait . back to overview Scope Details Aliases - Type bool Mandatory no Default false Possible values - true - false Secret no Configuration scope \u2612 parameter \u2610 general \u2612 steps \u2612 stages Resource references none","title":"waitForQualityGate"},{"location":"steps/sonarExecuteScan/#sonartokencredentialsid","text":"Jenkins 'Secret text' credentials ID containing the token used to authenticate with the Sonar Server. back to overview Scope Details Aliases - Type string Configuration scope \u2612 parameter \u2612 general \u2612 steps \u2612 stages","title":"sonarTokenCredentialsId"},{"location":"steps/sonarExecuteScan/#githubtokencredentialsid","text":"Jenkins 'Secret text' credentials ID containing the token used to authenticate with the Github Server. back to overview Scope Details Aliases - Type string Configuration scope \u2612 parameter \u2612 general \u2612 steps \u2612 stages","title":"githubTokenCredentialsId"},{"location":"steps/sonarExecuteScan/#exceptions","text":"none","title":"Exceptions"},{"location":"steps/sonarExecuteScan/#examples","text":"","title":"Examples"},{"location":"steps/spinnakerTriggerPipeline/","text":"spinnakerTriggerPipeline \u00b6 Description \u00b6 Triggers a Spinnaker pipeline from a Jenkins pipeline. Spinnaker is for example used for Continuous Deployment scenarios to various Clouds. Parameters \u00b6 name mandatory default possible values script yes spinnaker/application yes spinnaker/certFileCredentialsId no spinnaker/gateUrl yes spinnaker/keyFileCredentialsId no spinnaker/pipelineNameOrId yes spinnaker/pipelineParameters no timeout no 60 verbose no true , false script - The common script environment of the Jenkinsfile running. Typically the reference to the script calling the pipeline step is provided with the this parameter, as in script: this . This allows the function to access the commonPipelineEnvironment for retrieving, e.g. configuration parameters. spinnaker/application - spinnaker/certFileCredentialsId - Defines the id of the file credentials in your Jenkins credentials store which contain the client certificate file for Spinnaker authentication. spinnaker/gateUrl - Defines the url of the Spinnaker Gateway Service as API endpoint for communication with Spinnaker. spinnaker/keyFileCredentialsId - Defines the id of the file credentials in your Jenkins credentials store which contain the private key file for Spinnaker authentication. spinnaker/pipelineNameOrId - Defines the name/id of the Spinnaker pipeline. spinnaker/pipelineParameters - Parameter map containing Spinnaker pipeline parameters. timeout - Defines the timeout in minutes for checking the Spinnaker pipeline result. By setting to 0 the check can be de-activated. verbose - Whether verbose output should be produced. Step configuration \u00b6 We recommend to define values of step parameters via config.yml file . In following sections of the config.yml the configuration is possible: parameter general step/stage script spinnaker/application X X spinnaker/certFileCredentialsId X X spinnaker/gateUrl X X spinnaker/keyFileCredentialsId X X spinnaker/pipelineNameOrId X X spinnaker/pipelineParameters X X timeout X verbose X X Dependencies \u00b6 The step depends on the following Jenkins plugins credentials-binding pipeline-utility-steps workflow-basic-steps workflow-cps-global-lib workflow-durable-task-step Transitive dependencies are omitted. The list might be incomplete. Consider using the ppiper/jenkins-master docker image. This images comes with preinstalled plugins.","title":"spinnakerTriggerPipeline"},{"location":"steps/spinnakerTriggerPipeline/#spinnakertriggerpipeline","text":"","title":"spinnakerTriggerPipeline"},{"location":"steps/spinnakerTriggerPipeline/#description","text":"Triggers a Spinnaker pipeline from a Jenkins pipeline. Spinnaker is for example used for Continuous Deployment scenarios to various Clouds.","title":"Description"},{"location":"steps/spinnakerTriggerPipeline/#parameters","text":"name mandatory default possible values script yes spinnaker/application yes spinnaker/certFileCredentialsId no spinnaker/gateUrl yes spinnaker/keyFileCredentialsId no spinnaker/pipelineNameOrId yes spinnaker/pipelineParameters no timeout no 60 verbose no true , false script - The common script environment of the Jenkinsfile running. Typically the reference to the script calling the pipeline step is provided with the this parameter, as in script: this . This allows the function to access the commonPipelineEnvironment for retrieving, e.g. configuration parameters. spinnaker/application - spinnaker/certFileCredentialsId - Defines the id of the file credentials in your Jenkins credentials store which contain the client certificate file for Spinnaker authentication. spinnaker/gateUrl - Defines the url of the Spinnaker Gateway Service as API endpoint for communication with Spinnaker. spinnaker/keyFileCredentialsId - Defines the id of the file credentials in your Jenkins credentials store which contain the private key file for Spinnaker authentication. spinnaker/pipelineNameOrId - Defines the name/id of the Spinnaker pipeline. spinnaker/pipelineParameters - Parameter map containing Spinnaker pipeline parameters. timeout - Defines the timeout in minutes for checking the Spinnaker pipeline result. By setting to 0 the check can be de-activated. verbose - Whether verbose output should be produced.","title":"Parameters"},{"location":"steps/spinnakerTriggerPipeline/#step-configuration","text":"We recommend to define values of step parameters via config.yml file . In following sections of the config.yml the configuration is possible: parameter general step/stage script spinnaker/application X X spinnaker/certFileCredentialsId X X spinnaker/gateUrl X X spinnaker/keyFileCredentialsId X X spinnaker/pipelineNameOrId X X spinnaker/pipelineParameters X X timeout X verbose X X","title":"Step configuration"},{"location":"steps/spinnakerTriggerPipeline/#dependencies","text":"The step depends on the following Jenkins plugins credentials-binding pipeline-utility-steps workflow-basic-steps workflow-cps-global-lib workflow-durable-task-step Transitive dependencies are omitted. The list might be incomplete. Consider using the ppiper/jenkins-master docker image. This images comes with preinstalled plugins.","title":"Dependencies"},{"location":"steps/terraformExecute/","text":"terraformExecute \u00b6 Executes Terraform Description \u00b6 This step executes the terraform binary with the given command, and is able to fetch additional variables from vault. Usage \u00b6 We recommend to define values of step parameters via .pipeline/config.yml file . In this case, calling the step is essentially reduced to defining the step name. Calling the step can be done either in an orchestrator specific way (e.g. via a Jenkins library step) or on the command line. Jenkins Command Line library ( 'piper-lib-os' ) terraformExecute script: this piper terraformExecute Outputs \u00b6 Output type Details commonPipelineEnvironment custom/terraformOutputs Parameters \u00b6 Overview - Step \u00b6 Name Mandatory Additional information script (yes) reference to Jenkins main pipeline script additionalArgs no cliConfigFile no pass via ENV, Vault or Jenkins credentials ( cliConfigFileCredentialsId ) command no globalOptions no init no terraformSecrets no verbose no activates debug output workspace no Overview - Execution Environment \u00b6 Orchestrator-specific only These parameters are relevant for orchestrator usage and not considered when using the command line option. Name Mandatory Additional information containerCommand no containerShell no dockerEnvVars no dockerImage no dockerName no dockerOptions no dockerPullImage no dockerVolumeBind no dockerWorkspace no Details \u00b6 additionalArgs \u00b6 back to overview Scope Details Aliases - Type []string Mandatory no Default $PIPER_additionalArgs (if set) Secret no Configuration scope \u2612 parameter \u2610 general \u2612 steps \u2612 stages Resource references none cliConfigFile \u00b6 Path to the terraform CLI configuration file (https://www.terraform.io/docs/cli/config/config-file.html#credentials). back to overview Scope Details Aliases - Type string Mandatory no Default $PIPER_cliConfigFile (if set) Secret yes Configuration scope \u2612 parameter \u2610 general \u2612 steps \u2612 stages Resource references Jenkins credential id: id: cliConfigFileCredentialsId Vault resource: name: cliConfigFileVaultSecretName default value: terraform Vault paths: $(vaultPath)/terraform $(vaultBasePath)/$(vaultPipelineName)/terraform $(vaultBasePath)/GROUP-SECRETS/terraform command \u00b6 back to overview Scope Details Aliases - Type string Mandatory no Default plan Secret no Configuration scope \u2612 parameter \u2610 general \u2612 steps \u2612 stages Resource references none containerCommand \u00b6 Jenkins-specific: Used for proper environment setup. Kubernetes only: Allows to specify start command for container created with dockerImage parameter to overwrite Piper default (/usr/bin/tail -f /dev/null). back to overview Scope Details Aliases - Type string Mandatory no Default Secret no Configuration scope \u2612 parameter \u2612 general \u2612 steps \u2612 stages Resource references none containerShell \u00b6 Jenkins-specific: Used for proper environment setup. Allows to specify the shell to be executed for container with containerName. back to overview Scope Details Aliases - Type string Mandatory no Default Secret no Configuration scope \u2612 parameter \u2612 general \u2612 steps \u2612 stages Resource references none dockerEnvVars \u00b6 Environment variables to set in the container, e.g. [http_proxy: \"proxy:8080\"]. back to overview Scope Details Aliases - Type map[string]string Mandatory no Default map[TF_IN_AUTOMATION:piper] Secret no Configuration scope \u2612 parameter \u2612 general \u2612 steps \u2612 stages Resource references none dockerImage \u00b6 Name of the docker image that should be used. If empty, Docker is not used and the command is executed directly on the Jenkins system. back to overview Scope Details Aliases - Type string Mandatory no Default hashicorp/terraform:1.0.10 Secret no Configuration scope \u2612 parameter \u2612 general \u2612 steps \u2612 stages Resource references none dockerName \u00b6 Kubernetes only: Name of the container launching dockerImage. SideCar only: Name of the container in local network. back to overview Scope Details Aliases - Type string Mandatory no Default terraform Secret no Configuration scope \u2612 parameter \u2612 general \u2612 steps \u2612 stages Resource references none dockerOptions \u00b6 Docker options to be set when starting the container. back to overview Scope Details Aliases - Type []string Mandatory no Default [{--entrypoint }] Secret no Configuration scope \u2612 parameter \u2612 general \u2612 steps \u2612 stages Resource references none dockerPullImage \u00b6 Set this to 'false' to bypass a docker image pull. Useful during development process. Allows testing of images which are available in the local registry only. back to overview Scope Details Aliases - Type bool Mandatory no Default true Possible values - true - false Secret no Configuration scope \u2612 parameter \u2612 general \u2612 steps \u2612 stages Resource references none dockerVolumeBind \u00b6 Jenkins-specific: Used for proper environment setup. Volumes that should be mounted into the docker container. back to overview Scope Details Aliases - Type map[string]string Mandatory no Default Secret no Configuration scope \u2612 parameter \u2612 general \u2612 steps \u2612 stages Resource references none dockerWorkspace \u00b6 Jenkins-specific: Used for proper environment setup. Kubernetes only: Specifies a dedicated user home directory for the container which will be passed as value for environment variable HOME . back to overview Scope Details Aliases - Type string Mandatory no Default Secret no Configuration scope \u2612 parameter \u2612 general \u2612 steps \u2612 stages Resource references none globalOptions \u00b6 back to overview Scope Details Aliases - Type []string Mandatory no Default $PIPER_globalOptions (if set) Secret no Configuration scope \u2612 parameter \u2610 general \u2612 steps \u2612 stages Resource references none init \u00b6 back to overview Scope Details Aliases - Type bool Mandatory no Default false Possible values - true - false Secret no Configuration scope \u2612 parameter \u2610 general \u2612 steps \u2612 stages Resource references none script \u00b6 The common script environment of the Jenkinsfile running. Typically the reference to the script calling the pipeline step is provided with the this parameter, as in script: this . This allows the function to access the commonPipelineEnvironment for retrieving, e.g. configuration parameters. back to overview Scope Details Aliases - Type Jenkins Script Mandatory yes Default Secret no Configuration scope \u2610 parameter \u2610 general \u2610 steps \u2610 stages Resource references none terraformSecrets \u00b6 back to overview Scope Details Aliases - Type string Mandatory no Default $PIPER_terraformSecrets (if set) Secret no Configuration scope \u2612 parameter \u2610 general \u2612 steps \u2612 stages Resource references Vault resource: name: terraformFileVaultSecretName default value: terraform Vault paths: $(vaultPath)/terraform $(vaultBasePath)/$(vaultPipelineName)/terraform $(vaultBasePath)/GROUP-SECRETS/terraform verbose \u00b6 verbose output back to overview Scope Details Aliases - Type bool Mandatory no Default false Possible values - true - false Secret no Configuration scope \u2612 parameter \u2612 general \u2612 steps \u2612 stages Resource references none workspace \u00b6 back to overview Scope Details Aliases - Type string Mandatory no Default $PIPER_workspace (if set) Secret no Configuration scope \u2612 parameter \u2610 general \u2612 steps \u2612 stages Resource references none cliConfigFileCredentialsId \u00b6 Jenkins 'Secret file' credentials ID containing terraform CLI configuration. You can find more details about it in the Terraform documentation . back to overview Scope Details Aliases - Type string Configuration scope \u2612 parameter \u2612 general \u2612 steps \u2612 stages","title":"terraformExecute"},{"location":"steps/terraformExecute/#terraformexecute","text":"Executes Terraform","title":"terraformExecute"},{"location":"steps/terraformExecute/#description","text":"This step executes the terraform binary with the given command, and is able to fetch additional variables from vault.","title":"Description"},{"location":"steps/terraformExecute/#usage","text":"We recommend to define values of step parameters via .pipeline/config.yml file . In this case, calling the step is essentially reduced to defining the step name. Calling the step can be done either in an orchestrator specific way (e.g. via a Jenkins library step) or on the command line. Jenkins Command Line library ( 'piper-lib-os' ) terraformExecute script: this piper terraformExecute","title":"Usage"},{"location":"steps/terraformExecute/#outputs","text":"Output type Details commonPipelineEnvironment custom/terraformOutputs","title":"Outputs"},{"location":"steps/terraformExecute/#parameters","text":"","title":"Parameters"},{"location":"steps/terraformExecute/#overview-step","text":"Name Mandatory Additional information script (yes) reference to Jenkins main pipeline script additionalArgs no cliConfigFile no pass via ENV, Vault or Jenkins credentials ( cliConfigFileCredentialsId ) command no globalOptions no init no terraformSecrets no verbose no activates debug output workspace no","title":"Overview - Step"},{"location":"steps/terraformExecute/#overview-execution-environment","text":"Orchestrator-specific only These parameters are relevant for orchestrator usage and not considered when using the command line option. Name Mandatory Additional information containerCommand no containerShell no dockerEnvVars no dockerImage no dockerName no dockerOptions no dockerPullImage no dockerVolumeBind no dockerWorkspace no","title":"Overview - Execution Environment"},{"location":"steps/terraformExecute/#details","text":"","title":"Details"},{"location":"steps/terraformExecute/#additionalargs","text":"back to overview Scope Details Aliases - Type []string Mandatory no Default $PIPER_additionalArgs (if set) Secret no Configuration scope \u2612 parameter \u2610 general \u2612 steps \u2612 stages Resource references none","title":"additionalArgs"},{"location":"steps/terraformExecute/#cliconfigfile","text":"Path to the terraform CLI configuration file (https://www.terraform.io/docs/cli/config/config-file.html#credentials). back to overview Scope Details Aliases - Type string Mandatory no Default $PIPER_cliConfigFile (if set) Secret yes Configuration scope \u2612 parameter \u2610 general \u2612 steps \u2612 stages Resource references Jenkins credential id: id: cliConfigFileCredentialsId Vault resource: name: cliConfigFileVaultSecretName default value: terraform Vault paths: $(vaultPath)/terraform $(vaultBasePath)/$(vaultPipelineName)/terraform $(vaultBasePath)/GROUP-SECRETS/terraform","title":"cliConfigFile"},{"location":"steps/terraformExecute/#command","text":"back to overview Scope Details Aliases - Type string Mandatory no Default plan Secret no Configuration scope \u2612 parameter \u2610 general \u2612 steps \u2612 stages Resource references none","title":"command"},{"location":"steps/terraformExecute/#containercommand","text":"Jenkins-specific: Used for proper environment setup. Kubernetes only: Allows to specify start command for container created with dockerImage parameter to overwrite Piper default (/usr/bin/tail -f /dev/null). back to overview Scope Details Aliases - Type string Mandatory no Default Secret no Configuration scope \u2612 parameter \u2612 general \u2612 steps \u2612 stages Resource references none","title":"containerCommand"},{"location":"steps/terraformExecute/#containershell","text":"Jenkins-specific: Used for proper environment setup. Allows to specify the shell to be executed for container with containerName. back to overview Scope Details Aliases - Type string Mandatory no Default Secret no Configuration scope \u2612 parameter \u2612 general \u2612 steps \u2612 stages Resource references none","title":"containerShell"},{"location":"steps/terraformExecute/#dockerenvvars","text":"Environment variables to set in the container, e.g. [http_proxy: \"proxy:8080\"]. back to overview Scope Details Aliases - Type map[string]string Mandatory no Default map[TF_IN_AUTOMATION:piper] Secret no Configuration scope \u2612 parameter \u2612 general \u2612 steps \u2612 stages Resource references none","title":"dockerEnvVars"},{"location":"steps/terraformExecute/#dockerimage","text":"Name of the docker image that should be used. If empty, Docker is not used and the command is executed directly on the Jenkins system. back to overview Scope Details Aliases - Type string Mandatory no Default hashicorp/terraform:1.0.10 Secret no Configuration scope \u2612 parameter \u2612 general \u2612 steps \u2612 stages Resource references none","title":"dockerImage"},{"location":"steps/terraformExecute/#dockername","text":"Kubernetes only: Name of the container launching dockerImage. SideCar only: Name of the container in local network. back to overview Scope Details Aliases - Type string Mandatory no Default terraform Secret no Configuration scope \u2612 parameter \u2612 general \u2612 steps \u2612 stages Resource references none","title":"dockerName"},{"location":"steps/terraformExecute/#dockeroptions","text":"Docker options to be set when starting the container. back to overview Scope Details Aliases - Type []string Mandatory no Default [{--entrypoint }] Secret no Configuration scope \u2612 parameter \u2612 general \u2612 steps \u2612 stages Resource references none","title":"dockerOptions"},{"location":"steps/terraformExecute/#dockerpullimage","text":"Set this to 'false' to bypass a docker image pull. Useful during development process. Allows testing of images which are available in the local registry only. back to overview Scope Details Aliases - Type bool Mandatory no Default true Possible values - true - false Secret no Configuration scope \u2612 parameter \u2612 general \u2612 steps \u2612 stages Resource references none","title":"dockerPullImage"},{"location":"steps/terraformExecute/#dockervolumebind","text":"Jenkins-specific: Used for proper environment setup. Volumes that should be mounted into the docker container. back to overview Scope Details Aliases - Type map[string]string Mandatory no Default Secret no Configuration scope \u2612 parameter \u2612 general \u2612 steps \u2612 stages Resource references none","title":"dockerVolumeBind"},{"location":"steps/terraformExecute/#dockerworkspace","text":"Jenkins-specific: Used for proper environment setup. Kubernetes only: Specifies a dedicated user home directory for the container which will be passed as value for environment variable HOME . back to overview Scope Details Aliases - Type string Mandatory no Default Secret no Configuration scope \u2612 parameter \u2612 general \u2612 steps \u2612 stages Resource references none","title":"dockerWorkspace"},{"location":"steps/terraformExecute/#globaloptions","text":"back to overview Scope Details Aliases - Type []string Mandatory no Default $PIPER_globalOptions (if set) Secret no Configuration scope \u2612 parameter \u2610 general \u2612 steps \u2612 stages Resource references none","title":"globalOptions"},{"location":"steps/terraformExecute/#init","text":"back to overview Scope Details Aliases - Type bool Mandatory no Default false Possible values - true - false Secret no Configuration scope \u2612 parameter \u2610 general \u2612 steps \u2612 stages Resource references none","title":"init"},{"location":"steps/terraformExecute/#script","text":"The common script environment of the Jenkinsfile running. Typically the reference to the script calling the pipeline step is provided with the this parameter, as in script: this . This allows the function to access the commonPipelineEnvironment for retrieving, e.g. configuration parameters. back to overview Scope Details Aliases - Type Jenkins Script Mandatory yes Default Secret no Configuration scope \u2610 parameter \u2610 general \u2610 steps \u2610 stages Resource references none","title":"script"},{"location":"steps/terraformExecute/#terraformsecrets","text":"back to overview Scope Details Aliases - Type string Mandatory no Default $PIPER_terraformSecrets (if set) Secret no Configuration scope \u2612 parameter \u2610 general \u2612 steps \u2612 stages Resource references Vault resource: name: terraformFileVaultSecretName default value: terraform Vault paths: $(vaultPath)/terraform $(vaultBasePath)/$(vaultPipelineName)/terraform $(vaultBasePath)/GROUP-SECRETS/terraform","title":"terraformSecrets"},{"location":"steps/terraformExecute/#verbose","text":"verbose output back to overview Scope Details Aliases - Type bool Mandatory no Default false Possible values - true - false Secret no Configuration scope \u2612 parameter \u2612 general \u2612 steps \u2612 stages Resource references none","title":"verbose"},{"location":"steps/terraformExecute/#workspace","text":"back to overview Scope Details Aliases - Type string Mandatory no Default $PIPER_workspace (if set) Secret no Configuration scope \u2612 parameter \u2610 general \u2612 steps \u2612 stages Resource references none","title":"workspace"},{"location":"steps/terraformExecute/#cliconfigfilecredentialsid","text":"Jenkins 'Secret file' credentials ID containing terraform CLI configuration. You can find more details about it in the Terraform documentation . back to overview Scope Details Aliases - Type string Configuration scope \u2612 parameter \u2612 general \u2612 steps \u2612 stages","title":"cliConfigFileCredentialsId"},{"location":"steps/testsPublishResults/","text":"testsPublishResults \u00b6 Description \u00b6 This step can publish test results from various sources. Prerequisites \u00b6 test result files - To use this step, there must be test result files available. installed plugins: junit jacoco cobertura performance Pipeline configuration \u00b6 none Explanation of pipeline step \u00b6 Usage of pipeline step: testsPublishResults ( junit: [ updateResults: true , archive: true ], jacoco: [ archive: true ] ) Parameters \u00b6 name mandatory default possible values cobertura no [pattern:**/target/coverage/**/cobertura-coverage.xml, onlyStableBuilds:true, allowEmptyResults:true, archive:false, active:false] true , false , Map cucumber no [pattern:**/e2e/*.json, allowEmptyResults:true, archive:false, active:false] true , false , Map failOnError no false true , false htmlPublisher no [allowMissing:true, alwaysLinkToLastBuild:false, keepAll:true, reportDir:, pattern:**/reports/coverage-reports/**/index.html, reportName:Results, active:false] true , false , Map jacoco no [pattern:**/target/*.exec, allowEmptyResults:true, archive:false, active:false] true , false , Map jmeter no [pattern:**/*.jtl, filterRegex:, errorFailedThreshold:20, errorUnstableThreshold:10, errorUnstableResponseTimeThreshold:, relativeFailedThresholdPositive:0, relativeFailedThresholdNegative:0, relativeUnstableThresholdPositive:0, relativeUnstableThresholdNegative:0, modeOfThreshold:false, modeThroughput:false, nthBuildNumber:0, configType:PRT, failBuildIfNoResultFile:false, compareBuildPrevious:true, allowEmptyResults:true, archive:false, active:false] true , false , Map junit no [pattern:**/TEST-*.xml, updateResults:false, allowEmptyResults:true, archive:false, active:false] true , false , Map script yes cobertura - Publishes code coverage with the Cobertura plugin . cucumber - Publishes test results with the Cucumber plugin . failOnError - If it is set to true the step will fail the build if JUnit detected any failing tests. htmlPublisher - Publishes test results with the HTML Publisher plugin . jacoco - Publishes code coverage with the JaCoCo plugin . jmeter - Publishes performance test results with the Performance plugin . junit - Publishes test results files in JUnit format with the JUnit Plugin . script - The common script environment of the Jenkinsfile running. Typically the reference to the script calling the pipeline step is provided with the this parameter, as in script: this . This allows the function to access the commonPipelineEnvironment for retrieving, e.g. configuration parameters. junit \u00b6 parameter mandatory default possible values pattern no '**/TEST-*.xml' archive no false true, false updateResults no false true, false allowEmptyResults no true true, false jacoco \u00b6 parameter mandatory default possible values pattern no '**/target/*.exec' include no '' '**/*.class' exclude no '' '**/Test*' archive no false true, false allowEmptyResults no true true, false cobertura \u00b6 parameter mandatory default possible values pattern no '**/target/coverage/cobertura-coverage.xml' archive no false true, false allowEmptyResults no true true, false onlyStableBuilds no true true, false jmeter \u00b6 parameter mandatory default possible values pattern no '**/*.jtl' errorFailedThreshold no 20 errorUnstableThreshold no 10 errorUnstableResponseTimeThreshold no `` relativeFailedThresholdPositive no 0 relativeFailedThresholdNegative no 0 relativeUnstableThresholdPositive no 0 relativeUnstableThresholdNegative no 0 modeOfThreshold no false true, false modeThroughput no false true, false nthBuildNumber no 0 configType no PRT failBuildIfNoResultFile no false true, false compareBuildPrevious no true true, false archive no false true, false allowEmptyResults no true true, false filterRegex no ' ' Step configuration \u00b6 We recommend to define values of step parameters via config.yml file . In following sections of the config.yml the configuration is possible: parameter general step/stage cobertura X X cucumber X X failOnError X htmlPublisher X X jacoco X X jmeter X X junit X X script Dependencies \u00b6 The step depends on the following Jenkins plugins cobertura cucumber-testresult-plugin htmlpublisher jacoco junit performance pipeline-utility-steps workflow-basic-steps workflow-cps-global-lib workflow-durable-task-step Transitive dependencies are omitted. The list might be incomplete. Consider using the ppiper/jenkins-master docker image. This images comes with preinstalled plugins. Side effects \u00b6 none Exceptions \u00b6 none Example \u00b6 // publish test results with coverage testsPublishResults ( junit: [ updateResults: true , archive: true ], jacoco: [ archive: true ] ) // publish test results with coverage testsPublishResults ( junit: [ pattern: '**/target/TEST*.xml' , archive: true ], cobertura: [ pattern: '**/target/coverage/cobertura-coverage.xml' ] )","title":"testsPublishResults"},{"location":"steps/testsPublishResults/#testspublishresults","text":"","title":"testsPublishResults"},{"location":"steps/testsPublishResults/#description","text":"This step can publish test results from various sources.","title":"Description"},{"location":"steps/testsPublishResults/#prerequisites","text":"test result files - To use this step, there must be test result files available. installed plugins: junit jacoco cobertura performance","title":"Prerequisites"},{"location":"steps/testsPublishResults/#pipeline-configuration","text":"none","title":"Pipeline configuration"},{"location":"steps/testsPublishResults/#explanation-of-pipeline-step","text":"Usage of pipeline step: testsPublishResults ( junit: [ updateResults: true , archive: true ], jacoco: [ archive: true ] )","title":"Explanation of pipeline step"},{"location":"steps/testsPublishResults/#parameters","text":"name mandatory default possible values cobertura no [pattern:**/target/coverage/**/cobertura-coverage.xml, onlyStableBuilds:true, allowEmptyResults:true, archive:false, active:false] true , false , Map cucumber no [pattern:**/e2e/*.json, allowEmptyResults:true, archive:false, active:false] true , false , Map failOnError no false true , false htmlPublisher no [allowMissing:true, alwaysLinkToLastBuild:false, keepAll:true, reportDir:, pattern:**/reports/coverage-reports/**/index.html, reportName:Results, active:false] true , false , Map jacoco no [pattern:**/target/*.exec, allowEmptyResults:true, archive:false, active:false] true , false , Map jmeter no [pattern:**/*.jtl, filterRegex:, errorFailedThreshold:20, errorUnstableThreshold:10, errorUnstableResponseTimeThreshold:, relativeFailedThresholdPositive:0, relativeFailedThresholdNegative:0, relativeUnstableThresholdPositive:0, relativeUnstableThresholdNegative:0, modeOfThreshold:false, modeThroughput:false, nthBuildNumber:0, configType:PRT, failBuildIfNoResultFile:false, compareBuildPrevious:true, allowEmptyResults:true, archive:false, active:false] true , false , Map junit no [pattern:**/TEST-*.xml, updateResults:false, allowEmptyResults:true, archive:false, active:false] true , false , Map script yes cobertura - Publishes code coverage with the Cobertura plugin . cucumber - Publishes test results with the Cucumber plugin . failOnError - If it is set to true the step will fail the build if JUnit detected any failing tests. htmlPublisher - Publishes test results with the HTML Publisher plugin . jacoco - Publishes code coverage with the JaCoCo plugin . jmeter - Publishes performance test results with the Performance plugin . junit - Publishes test results files in JUnit format with the JUnit Plugin . script - The common script environment of the Jenkinsfile running. Typically the reference to the script calling the pipeline step is provided with the this parameter, as in script: this . This allows the function to access the commonPipelineEnvironment for retrieving, e.g. configuration parameters.","title":"Parameters"},{"location":"steps/testsPublishResults/#junit","text":"parameter mandatory default possible values pattern no '**/TEST-*.xml' archive no false true, false updateResults no false true, false allowEmptyResults no true true, false","title":"junit"},{"location":"steps/testsPublishResults/#jacoco","text":"parameter mandatory default possible values pattern no '**/target/*.exec' include no '' '**/*.class' exclude no '' '**/Test*' archive no false true, false allowEmptyResults no true true, false","title":"jacoco"},{"location":"steps/testsPublishResults/#cobertura","text":"parameter mandatory default possible values pattern no '**/target/coverage/cobertura-coverage.xml' archive no false true, false allowEmptyResults no true true, false onlyStableBuilds no true true, false","title":"cobertura"},{"location":"steps/testsPublishResults/#jmeter","text":"parameter mandatory default possible values pattern no '**/*.jtl' errorFailedThreshold no 20 errorUnstableThreshold no 10 errorUnstableResponseTimeThreshold no `` relativeFailedThresholdPositive no 0 relativeFailedThresholdNegative no 0 relativeUnstableThresholdPositive no 0 relativeUnstableThresholdNegative no 0 modeOfThreshold no false true, false modeThroughput no false true, false nthBuildNumber no 0 configType no PRT failBuildIfNoResultFile no false true, false compareBuildPrevious no true true, false archive no false true, false allowEmptyResults no true true, false filterRegex no ' '","title":"jmeter"},{"location":"steps/testsPublishResults/#step-configuration","text":"We recommend to define values of step parameters via config.yml file . In following sections of the config.yml the configuration is possible: parameter general step/stage cobertura X X cucumber X X failOnError X htmlPublisher X X jacoco X X jmeter X X junit X X script","title":"Step configuration"},{"location":"steps/testsPublishResults/#dependencies","text":"The step depends on the following Jenkins plugins cobertura cucumber-testresult-plugin htmlpublisher jacoco junit performance pipeline-utility-steps workflow-basic-steps workflow-cps-global-lib workflow-durable-task-step Transitive dependencies are omitted. The list might be incomplete. Consider using the ppiper/jenkins-master docker image. This images comes with preinstalled plugins.","title":"Dependencies"},{"location":"steps/testsPublishResults/#side-effects","text":"none","title":"Side effects"},{"location":"steps/testsPublishResults/#exceptions","text":"none","title":"Exceptions"},{"location":"steps/testsPublishResults/#example","text":"// publish test results with coverage testsPublishResults ( junit: [ updateResults: true , archive: true ], jacoco: [ archive: true ] ) // publish test results with coverage testsPublishResults ( junit: [ pattern: '**/target/TEST*.xml' , archive: true ], cobertura: [ pattern: '**/target/coverage/cobertura-coverage.xml' ] )","title":"Example"},{"location":"steps/tmsExport/","text":"tmsExport \u00b6 This step allows you to export an MTA file (multi-target application archive) and multiple MTA extension descriptors into a TMS (SAP Cloud Transport Management service) landscape for further TMS-controlled distribution through a TMS-configured landscape. Description \u00b6 This step allows you to export an MTA file (multi-target application archive) and multiple MTA extension descriptors into a TMS (SAP Cloud Transport Management service) landscape for further TMS-controlled distribution through a TMS-configured landscape. The MTA file is attached to a new transport request which is added to the import queues of the follow-on transport nodes of the specified export node. TMS lets you manage transports between SAP Business Technology Platform accounts in Neo and Cloud Foundry, such as from DEV to TEST and PROD accounts. For more information, see official documentation of SAP Cloud Transport Management service Prerequisites You have subscribed to and set up TMS, as described in Initial Setup , which includes the configuration of your transport landscape. A corresponding service key has been created, as described in Set Up the Environment to Transport Content Archives directly in an Application . This service key (JSON) must be stored as a secret text within the Jenkins secure store or provided as value of serviceKey parameter. Usage \u00b6 We recommend to define values of step parameters via .pipeline/config.yml file . In this case, calling the step is essentially reduced to defining the step name. Calling the step can be done either in an orchestrator specific way (e.g. via a Jenkins library step) or on the command line. Jenkins Command Line library ( 'piper-lib-os' ) tmsExport script: this piper tmsExport Outputs \u00b6 Output type Details influx measurement step_data tms Parameters \u00b6 Overview - Step \u00b6 Name Mandatory Additional information nodeName yes script (yes) reference to Jenkins main pipeline script serviceKey (yes) pass via ENV or Jenkins credentials ( credentialsId ) customDescription no mtaPath no mtaVersion no namedUser no nodeExtDescriptorMapping no proxy no tmsServiceKey no pass via ENV or Jenkins credentials verbose no activates debug output Overview - Execution Environment \u00b6 Orchestrator-specific only These parameters are relevant for orchestrator usage and not considered when using the command line option. Name Mandatory Additional information stashContent no Details \u00b6 customDescription \u00b6 Can be used as the description of a transport request. Will overwrite the default, which is corresponding Git commit ID. back to overview Scope Details Aliases - Type string Mandatory no Default $PIPER_customDescription (if set) Secret no Configuration scope \u2612 parameter \u2610 general \u2612 steps \u2612 stages Resource references commonPipelineEnvironment : reference to: git/commitId mtaPath \u00b6 Defines the relative path to .mtar file for the export to the SAP Cloud Transport Management service. If not specified, it will use the .mtar file created in mtaBuild. back to overview Scope Details Aliases - Type string Mandatory no Default $PIPER_mtaPath (if set) Secret no Configuration scope \u2612 parameter \u2610 general \u2612 steps \u2612 stages Resource references commonPipelineEnvironment : reference to: mtarFilePath mtaVersion \u00b6 Defines the version of the MTA for which the MTA extension descriptor will be used. You can use an asterisk (*) to accept any MTA version, or use a specific version compliant with SemVer 2.0, e.g. 1.0.0 (see semver.org). If the parameter is not configured, an asterisk is used. back to overview Scope Details Aliases - Type string Mandatory no Default * Secret no Configuration scope \u2612 parameter \u2610 general \u2612 steps \u2612 stages Resource references none namedUser \u00b6 Defines the named user to execute transport request with. The default value is 'Piper-Pipeline'. If pipeline is running on Jenkins, the name of the user, who started the job, is tried to be used at first. back to overview Scope Details Aliases - Type string Mandatory no Default Piper-Pipeline Secret no Configuration scope \u2612 parameter \u2610 general \u2612 steps \u2612 stages Resource references none nodeExtDescriptorMapping \u00b6 Available only for transports in Cloud Foundry environment. Defines a mapping between a transport node name and an MTA extension descriptor file path that you want to use for the transport node, e.g. nodeExtDescriptorMapping: {\"nodeName\": \"example.mtaext\", \"nodeName2\": \"example2.mtaext\"}. back to overview Scope Details Aliases - Type map[string]interface{} Mandatory no Default $PIPER_nodeExtDescriptorMapping (if set) Secret no Configuration scope \u2612 parameter \u2610 general \u2612 steps \u2612 stages Resource references none nodeName \u00b6 Defines the name of the export node - starting node in TMS landscape. The transport request is added to the queues of the follow-on nodes of export node. back to overview Scope Details Aliases - Type string Mandatory yes Default $PIPER_nodeName (if set) Secret no Configuration scope \u2612 parameter \u2610 general \u2612 steps \u2612 stages Resource references none proxy \u00b6 Proxy URL which should be used for communication with the SAP Cloud Transport Management service backend. back to overview Scope Details Aliases - Type string Mandatory no Default $PIPER_proxy (if set) Secret no Configuration scope \u2612 parameter \u2610 general \u2612 steps \u2612 stages Resource references none script \u00b6 The common script environment of the Jenkinsfile running. Typically the reference to the script calling the pipeline step is provided with the this parameter, as in script: this . This allows the function to access the commonPipelineEnvironment for retrieving, e.g. configuration parameters. back to overview Scope Details Aliases - Type Jenkins Script Mandatory yes Default Secret no Configuration scope \u2610 parameter \u2610 general \u2610 steps \u2610 stages Resource references none serviceKey \u00b6 Service key JSON string to access TMS (SAP Cloud Transport Management service) instance APIs. This can be a service key for TMS, or a service key for CALM (SAP Cloud Application Lifecycle Management) service. If not specified and if pipeline is running on Jenkins, service key, stored under ID provided with credentialsId parameter, is used. back to overview Scope Details Aliases - Type string Mandatory yes Default $PIPER_serviceKey (if set) Secret yes Configuration scope \u2612 parameter \u2610 general \u2612 steps \u2612 stages Resource references Jenkins credential id: id: credentialsId reference to: serviceKey stashContent \u00b6 Jenkins-specific: Used for proper environment setup. Specific stashes that should be considered for the step execution. back to overview Scope Details Aliases - Type []string Mandatory no Default - buildResult Secret no Configuration scope \u2612 parameter \u2612 general \u2612 steps \u2612 stages Resource references none tmsServiceKey \u00b6 DEPRECATION WARNING: This parameter has been deprecated, please use the serviceKey parameter instead, which supports both service key for TMS (SAP Cloud Transport Management service), as well as service key for CALM (SAP Cloud Application Lifecycle Management) service. Service key JSON string to access the SAP Cloud Transport Management service instance APIs. back to overview Scope Details Aliases - Type string Mandatory no Default $PIPER_tmsServiceKey (if set) Secret yes Configuration scope \u2612 parameter \u2610 general \u2612 steps \u2612 stages Resource references none verbose \u00b6 verbose output back to overview Scope Details Aliases - Type bool Mandatory no Default false Possible values - true - false Secret no Configuration scope \u2612 parameter \u2612 general \u2612 steps \u2612 stages Resource references none credentialsId \u00b6 Jenkins 'Secret text' credentials ID containing service key for TMS (SAP Cloud Transport Management service) or CALM (SAP Cloud Application Lifecycle Management) service. back to overview Scope Details Aliases - Type string Configuration scope \u2612 parameter \u2612 general \u2612 steps \u2612 stages","title":"tmsExport"},{"location":"steps/tmsExport/#tmsexport","text":"This step allows you to export an MTA file (multi-target application archive) and multiple MTA extension descriptors into a TMS (SAP Cloud Transport Management service) landscape for further TMS-controlled distribution through a TMS-configured landscape.","title":"tmsExport"},{"location":"steps/tmsExport/#description","text":"This step allows you to export an MTA file (multi-target application archive) and multiple MTA extension descriptors into a TMS (SAP Cloud Transport Management service) landscape for further TMS-controlled distribution through a TMS-configured landscape. The MTA file is attached to a new transport request which is added to the import queues of the follow-on transport nodes of the specified export node. TMS lets you manage transports between SAP Business Technology Platform accounts in Neo and Cloud Foundry, such as from DEV to TEST and PROD accounts. For more information, see official documentation of SAP Cloud Transport Management service Prerequisites You have subscribed to and set up TMS, as described in Initial Setup , which includes the configuration of your transport landscape. A corresponding service key has been created, as described in Set Up the Environment to Transport Content Archives directly in an Application . This service key (JSON) must be stored as a secret text within the Jenkins secure store or provided as value of serviceKey parameter.","title":"Description"},{"location":"steps/tmsExport/#usage","text":"We recommend to define values of step parameters via .pipeline/config.yml file . In this case, calling the step is essentially reduced to defining the step name. Calling the step can be done either in an orchestrator specific way (e.g. via a Jenkins library step) or on the command line. Jenkins Command Line library ( 'piper-lib-os' ) tmsExport script: this piper tmsExport","title":"Usage"},{"location":"steps/tmsExport/#outputs","text":"Output type Details influx measurement step_data tms","title":"Outputs"},{"location":"steps/tmsExport/#parameters","text":"","title":"Parameters"},{"location":"steps/tmsExport/#overview-step","text":"Name Mandatory Additional information nodeName yes script (yes) reference to Jenkins main pipeline script serviceKey (yes) pass via ENV or Jenkins credentials ( credentialsId ) customDescription no mtaPath no mtaVersion no namedUser no nodeExtDescriptorMapping no proxy no tmsServiceKey no pass via ENV or Jenkins credentials verbose no activates debug output","title":"Overview - Step"},{"location":"steps/tmsExport/#overview-execution-environment","text":"Orchestrator-specific only These parameters are relevant for orchestrator usage and not considered when using the command line option. Name Mandatory Additional information stashContent no","title":"Overview - Execution Environment"},{"location":"steps/tmsExport/#details","text":"","title":"Details"},{"location":"steps/tmsExport/#customdescription","text":"Can be used as the description of a transport request. Will overwrite the default, which is corresponding Git commit ID. back to overview Scope Details Aliases - Type string Mandatory no Default $PIPER_customDescription (if set) Secret no Configuration scope \u2612 parameter \u2610 general \u2612 steps \u2612 stages Resource references commonPipelineEnvironment : reference to: git/commitId","title":"customDescription"},{"location":"steps/tmsExport/#mtapath","text":"Defines the relative path to .mtar file for the export to the SAP Cloud Transport Management service. If not specified, it will use the .mtar file created in mtaBuild. back to overview Scope Details Aliases - Type string Mandatory no Default $PIPER_mtaPath (if set) Secret no Configuration scope \u2612 parameter \u2610 general \u2612 steps \u2612 stages Resource references commonPipelineEnvironment : reference to: mtarFilePath","title":"mtaPath"},{"location":"steps/tmsExport/#mtaversion","text":"Defines the version of the MTA for which the MTA extension descriptor will be used. You can use an asterisk (*) to accept any MTA version, or use a specific version compliant with SemVer 2.0, e.g. 1.0.0 (see semver.org). If the parameter is not configured, an asterisk is used. back to overview Scope Details Aliases - Type string Mandatory no Default * Secret no Configuration scope \u2612 parameter \u2610 general \u2612 steps \u2612 stages Resource references none","title":"mtaVersion"},{"location":"steps/tmsExport/#nameduser","text":"Defines the named user to execute transport request with. The default value is 'Piper-Pipeline'. If pipeline is running on Jenkins, the name of the user, who started the job, is tried to be used at first. back to overview Scope Details Aliases - Type string Mandatory no Default Piper-Pipeline Secret no Configuration scope \u2612 parameter \u2610 general \u2612 steps \u2612 stages Resource references none","title":"namedUser"},{"location":"steps/tmsExport/#nodeextdescriptormapping","text":"Available only for transports in Cloud Foundry environment. Defines a mapping between a transport node name and an MTA extension descriptor file path that you want to use for the transport node, e.g. nodeExtDescriptorMapping: {\"nodeName\": \"example.mtaext\", \"nodeName2\": \"example2.mtaext\"}. back to overview Scope Details Aliases - Type map[string]interface{} Mandatory no Default $PIPER_nodeExtDescriptorMapping (if set) Secret no Configuration scope \u2612 parameter \u2610 general \u2612 steps \u2612 stages Resource references none","title":"nodeExtDescriptorMapping"},{"location":"steps/tmsExport/#nodename","text":"Defines the name of the export node - starting node in TMS landscape. The transport request is added to the queues of the follow-on nodes of export node. back to overview Scope Details Aliases - Type string Mandatory yes Default $PIPER_nodeName (if set) Secret no Configuration scope \u2612 parameter \u2610 general \u2612 steps \u2612 stages Resource references none","title":"nodeName"},{"location":"steps/tmsExport/#proxy","text":"Proxy URL which should be used for communication with the SAP Cloud Transport Management service backend. back to overview Scope Details Aliases - Type string Mandatory no Default $PIPER_proxy (if set) Secret no Configuration scope \u2612 parameter \u2610 general \u2612 steps \u2612 stages Resource references none","title":"proxy"},{"location":"steps/tmsExport/#script","text":"The common script environment of the Jenkinsfile running. Typically the reference to the script calling the pipeline step is provided with the this parameter, as in script: this . This allows the function to access the commonPipelineEnvironment for retrieving, e.g. configuration parameters. back to overview Scope Details Aliases - Type Jenkins Script Mandatory yes Default Secret no Configuration scope \u2610 parameter \u2610 general \u2610 steps \u2610 stages Resource references none","title":"script"},{"location":"steps/tmsExport/#servicekey","text":"Service key JSON string to access TMS (SAP Cloud Transport Management service) instance APIs. This can be a service key for TMS, or a service key for CALM (SAP Cloud Application Lifecycle Management) service. If not specified and if pipeline is running on Jenkins, service key, stored under ID provided with credentialsId parameter, is used. back to overview Scope Details Aliases - Type string Mandatory yes Default $PIPER_serviceKey (if set) Secret yes Configuration scope \u2612 parameter \u2610 general \u2612 steps \u2612 stages Resource references Jenkins credential id: id: credentialsId reference to: serviceKey","title":"serviceKey"},{"location":"steps/tmsExport/#stashcontent","text":"Jenkins-specific: Used for proper environment setup. Specific stashes that should be considered for the step execution. back to overview Scope Details Aliases - Type []string Mandatory no Default - buildResult Secret no Configuration scope \u2612 parameter \u2612 general \u2612 steps \u2612 stages Resource references none","title":"stashContent"},{"location":"steps/tmsExport/#tmsservicekey","text":"DEPRECATION WARNING: This parameter has been deprecated, please use the serviceKey parameter instead, which supports both service key for TMS (SAP Cloud Transport Management service), as well as service key for CALM (SAP Cloud Application Lifecycle Management) service. Service key JSON string to access the SAP Cloud Transport Management service instance APIs. back to overview Scope Details Aliases - Type string Mandatory no Default $PIPER_tmsServiceKey (if set) Secret yes Configuration scope \u2612 parameter \u2610 general \u2612 steps \u2612 stages Resource references none","title":"tmsServiceKey"},{"location":"steps/tmsExport/#verbose","text":"verbose output back to overview Scope Details Aliases - Type bool Mandatory no Default false Possible values - true - false Secret no Configuration scope \u2612 parameter \u2612 general \u2612 steps \u2612 stages Resource references none","title":"verbose"},{"location":"steps/tmsExport/#credentialsid","text":"Jenkins 'Secret text' credentials ID containing service key for TMS (SAP Cloud Transport Management service) or CALM (SAP Cloud Application Lifecycle Management) service. back to overview Scope Details Aliases - Type string Configuration scope \u2612 parameter \u2612 general \u2612 steps \u2612 stages","title":"credentialsId"},{"location":"steps/tmsUpload/","text":"tmsUpload \u00b6 Description \u00b6 This step allows you to upload an MTA file (multi-target application archive) and multiple MTA extension descriptors into a TMS (SAP BTP Transport Management Service) landscape for further TMS-controlled distribution through a TMS-configured landscape. TMS lets you manage transports between SAP BTP accounts in Neo and Cloud Foundry, such as from DEV to TEST and PROD accounts. For more information, see official documentation of Transport Management Service Prerequisites You have subscribed to and set up TMS, as described in Setup and Configuration of SAP BTP Transport Management , which includes the configuration of a node to be used for uploading an MTA file. A corresponding service key has been created, as described in Set Up the Environment to Transport Content Archives directly in an Application . This service key (JSON) must be stored as a secret text within the Jenkins secure store. Parameters \u00b6 name mandatory default possible values credentialsId yes customDescription no mtaPath yes mtaVersion no * nodeExtDescriptorMapping no nodeName yes proxy no script yes stashContent no [buildResult] useGoStep no true, false verbose no true , false credentialsId - Credentials to be used for the file and node uploads to the Transport Management Service. customDescription - Can be used as the description of a transport request. Will overwrite the default. (Default: Corresponding Git Commit-ID) mtaPath - Defines the relative path to *.mtar for the upload to the Transport Management Service. If not specified, it will use the mtar file created in mtaBuild. mtaVersion - Defines the version of the MTA for which the MTA extension descriptor will be used. You can use an asterisk (*) to accept any MTA version, or use a specific version compliant with SemVer 2.0, e.g. 1.0.0 (see semver.org). If the parameter is not configured, an asterisk is used. nodeExtDescriptorMapping - Available only for transports in Cloud Foundry environment. Defines a mapping between a transport node name and an MTA extension descriptor file path that you want to use for the transport node, e.g. nodeExtDescriptorMapping: [nodeName: 'example.mtaext', nodeName2: 'example2.mtaext', \u2026]`. nodeName - Defines the name of the node to which the *.mtar file should be uploaded. proxy - Proxy which should be used for the communication with the Transport Management Service Backend. script - The common script environment of the Jenkinsfile running. Typically the reference to the script calling the pipeline step is provided with the this parameter, as in script: this . This allows the function to access the commonPipelineEnvironment for retrieving, e.g. configuration parameters. stashContent - If specific stashes should be considered, their names need to be passed via the parameter stashContent . useGoStep - The new Golang implementation of the step is used now by default. Utilizing this toggle with value true is therefore redundant and can be omitted. If used with value false, the toggle deactivates the new Golang implementation and instructs the step to use the old Groovy one. Note that possibility to switch to the old Groovy implementation will be completely removed and this toggle will be deprecated after February 29th, 2024. verbose - Print more detailed information into the log. Step configuration \u00b6 We recommend to define values of step parameters via config.yml file . In following sections of the config.yml the configuration is possible: parameter general step/stage credentialsId X customDescription X mtaPath X mtaVersion X nodeExtDescriptorMapping X nodeName X proxy X script stashContent X useGoStep X verbose X X Dependencies \u00b6 The step depends on the following Jenkins plugins credentials-binding pipeline-utility-steps ssh-agent workflow-basic-steps workflow-cps-global-lib workflow-durable-task-step Transitive dependencies are omitted. The list might be incomplete. Consider using the ppiper/jenkins-master docker image. This images comes with preinstalled plugins.","title":"tmsUpload"},{"location":"steps/tmsUpload/#tmsupload","text":"","title":"tmsUpload"},{"location":"steps/tmsUpload/#description","text":"This step allows you to upload an MTA file (multi-target application archive) and multiple MTA extension descriptors into a TMS (SAP BTP Transport Management Service) landscape for further TMS-controlled distribution through a TMS-configured landscape. TMS lets you manage transports between SAP BTP accounts in Neo and Cloud Foundry, such as from DEV to TEST and PROD accounts. For more information, see official documentation of Transport Management Service Prerequisites You have subscribed to and set up TMS, as described in Setup and Configuration of SAP BTP Transport Management , which includes the configuration of a node to be used for uploading an MTA file. A corresponding service key has been created, as described in Set Up the Environment to Transport Content Archives directly in an Application . This service key (JSON) must be stored as a secret text within the Jenkins secure store.","title":"Description"},{"location":"steps/tmsUpload/#parameters","text":"name mandatory default possible values credentialsId yes customDescription no mtaPath yes mtaVersion no * nodeExtDescriptorMapping no nodeName yes proxy no script yes stashContent no [buildResult] useGoStep no true, false verbose no true , false credentialsId - Credentials to be used for the file and node uploads to the Transport Management Service. customDescription - Can be used as the description of a transport request. Will overwrite the default. (Default: Corresponding Git Commit-ID) mtaPath - Defines the relative path to *.mtar for the upload to the Transport Management Service. If not specified, it will use the mtar file created in mtaBuild. mtaVersion - Defines the version of the MTA for which the MTA extension descriptor will be used. You can use an asterisk (*) to accept any MTA version, or use a specific version compliant with SemVer 2.0, e.g. 1.0.0 (see semver.org). If the parameter is not configured, an asterisk is used. nodeExtDescriptorMapping - Available only for transports in Cloud Foundry environment. Defines a mapping between a transport node name and an MTA extension descriptor file path that you want to use for the transport node, e.g. nodeExtDescriptorMapping: [nodeName: 'example.mtaext', nodeName2: 'example2.mtaext', \u2026]`. nodeName - Defines the name of the node to which the *.mtar file should be uploaded. proxy - Proxy which should be used for the communication with the Transport Management Service Backend. script - The common script environment of the Jenkinsfile running. Typically the reference to the script calling the pipeline step is provided with the this parameter, as in script: this . This allows the function to access the commonPipelineEnvironment for retrieving, e.g. configuration parameters. stashContent - If specific stashes should be considered, their names need to be passed via the parameter stashContent . useGoStep - The new Golang implementation of the step is used now by default. Utilizing this toggle with value true is therefore redundant and can be omitted. If used with value false, the toggle deactivates the new Golang implementation and instructs the step to use the old Groovy one. Note that possibility to switch to the old Groovy implementation will be completely removed and this toggle will be deprecated after February 29th, 2024. verbose - Print more detailed information into the log.","title":"Parameters"},{"location":"steps/tmsUpload/#step-configuration","text":"We recommend to define values of step parameters via config.yml file . In following sections of the config.yml the configuration is possible: parameter general step/stage credentialsId X customDescription X mtaPath X mtaVersion X nodeExtDescriptorMapping X nodeName X proxy X script stashContent X useGoStep X verbose X X","title":"Step configuration"},{"location":"steps/tmsUpload/#dependencies","text":"The step depends on the following Jenkins plugins credentials-binding pipeline-utility-steps ssh-agent workflow-basic-steps workflow-cps-global-lib workflow-durable-task-step Transitive dependencies are omitted. The list might be incomplete. Consider using the ppiper/jenkins-master docker image. This images comes with preinstalled plugins.","title":"Dependencies"},{"location":"steps/transportRequestCreate/","text":"transportRequestCreate \u00b6 Description \u00b6 Creates a Transport Request for a Change Document on the Solution Manager (type SOLMAN ) or a Transport Request inside an ABAP system (type CTS ) The id of the transport request is available via commonPipelineEnvironment.getTransportRequestId() Note: This step is deprecated. Prerequisites \u00b6 Solution Manager version ST720 SP08 or newer. Parameters \u00b6 name mandatory default possible values changeDocumentId yes changeManagement/changeDocumentLabel no ChangeDocument\\s?: regex pattern changeManagement/clientOpts no `` changeManagement/credentialsId no CM changeManagement/endpoint yes changeManagement/git/format no %b see git log --help changeManagement/git/from no origin/master changeManagement/git/to no HEAD changeManagement/rfc/developmentClient yes changeManagement/rfc/developmentInstance yes changeManagement/type no NONE SOLMAN , CTS , RFC description yes developmentSystemId yes script yes targetSystem yes transportType yes verbose no false changeDocumentId - The id of the change document to that the transport request is bound to. Typically this value is provided via commit message in the commit history. Only for SOLMAN . changeManagement/changeDocumentLabel - A pattern used for identifying lines holding the change document id. changeManagement/clientOpts - Additional options for cm command line client, e.g. JAVA_OPTS. changeManagement/credentialsId - The id of the credentials to connect to the Solution Manager. The credentials needs to be maintained on Jenkins. changeManagement/endpoint - The service endpoint, e.g. Solution Manager, ABAP System. changeManagement/git/format - Specifies what part of the commit is scanned. By default the body of the commit message is scanned. changeManagement/git/from - The starting point for retrieving the change document id. changeManagement/git/to - The end point for retrieving the change document id. changeManagement/rfc/developmentClient - AS ABAP client number. Only for RFC . changeManagement/rfc/developmentInstance - AS ABAP instance number. Only for RFC . changeManagement/type - Defines where the transport request is created, e.g. SAP Solution Manager, ABAP System. description - The description of the transport request. Only for CTS . developmentSystemId - The logical system id for which the transport request is created. The format is <SID>~<TYPE>(/<CLIENT>)? . For ABAP Systems the developmentSystemId looks like DEV~ABAP/100 . For non-ABAP systems the developmentSystemId looks like e.g. L21~EXT_SRV or J01~JAVA . In case the system type is not known (in the examples provided here: EXT_SRV or JAVA ) the information can be retrieved from the Solution Manager instance. Only for SOLMAN . script - The common script environment of the Jenkinsfile running. Typically the reference to the script calling the pipeline step is provided with the this parameter, as in script: this . This allows the function to access the commonPipelineEnvironment for retrieving, e.g. configuration parameters. targetSystem - The system receiving the transport request. Only for CTS . transportType - Typically W (workbench) or C customizing. Only for CTS . verbose - Provides additional details. Only for RFC . Step configuration \u00b6 We recommend to define values of step parameters via config.yml file . In following sections of the config.yml the configuration is possible: parameter general step/stage changeDocumentId changeManagement/changeDocumentLabel X changeManagement/clientOpts X changeManagement/credentialsId X changeManagement/endpoint X changeManagement/git/format X changeManagement/git/from X changeManagement/git/to X changeManagement/rfc/developmentClient X changeManagement/rfc/developmentInstance X changeManagement/type X description X developmentSystemId X script targetSystem X transportType X verbose X Dependencies \u00b6 The step depends on the following Jenkins plugins badge credentials-binding docker kubernetes pipeline-utility-steps workflow-basic-steps workflow-cps-global-lib workflow-durable-task-step The kubernetes plugin is only used if running in a kubernetes environment. Transitive dependencies are omitted. The list might be incomplete. Consider using the ppiper/jenkins-master docker image. This images comes with preinstalled plugins. The step is configured using a customer configuration file provided as resource in an custom shared library. @Library ( 'piper-lib-os@master' ) _ // the shared lib containing the additional configuration // needs to be configured in Jenkins @Library ( 'foo@master' ) __ // inside the shared lib denoted by 'foo' the additional configuration file // needs to be located under 'resources' ('resoures/myConfig.yml') prepareDefaultValues script: this , customDefaults: 'myConfig.yml' Example content of 'resources/myConfig.yml' in branch 'master' of the repository denoted by 'foo' : general : changeManagement : changeDocumentLabel : 'ChangeDocument\\s?:' cmClientOpts : '-Djavax.net.ssl.trustStore=<path to truststore>' credentialsId : 'CM' type : 'SOLMAN' endpoint : 'https://example.org/cm' git : from : 'HEAD~1' to : 'HEAD' format : '%b' The properties configured in section 'general/changeManagement' are shared between all change management related steps. The properties can also be configured on a per-step basis: [ ... ] steps : transportRequestCreate : changeManagement : type : 'SOLMAN' endpoint : 'https://example.org/cm' [ ... ] The parameters can also be provided when the step is invoked. For examples see below. Return value \u00b6 none Exceptions \u00b6 AbortException : If the creation of the transport request fails. IllegalStateException : If the change id is not provided. Example \u00b6 // SOLMAN def transportRequestId = transportRequestCreate script: this , changeDocumentId: '001,' changeManagement: [ type: 'SOLMAN' endpoint: 'https://example.org/cm' ] // CTS def transportRequestId = transportRequestCreate script: this , transportType: 'W' , targetSystem: 'XYZ' , description: 'the description' , changeManagement: [ type: 'CTS' endpoint: 'https://example.org/cm' ]","title":"transportRequestCreate"},{"location":"steps/transportRequestCreate/#transportrequestcreate","text":"","title":"transportRequestCreate"},{"location":"steps/transportRequestCreate/#description","text":"Creates a Transport Request for a Change Document on the Solution Manager (type SOLMAN ) or a Transport Request inside an ABAP system (type CTS ) The id of the transport request is available via commonPipelineEnvironment.getTransportRequestId() Note: This step is deprecated.","title":"Description"},{"location":"steps/transportRequestCreate/#prerequisites","text":"Solution Manager version ST720 SP08 or newer.","title":"Prerequisites"},{"location":"steps/transportRequestCreate/#parameters","text":"name mandatory default possible values changeDocumentId yes changeManagement/changeDocumentLabel no ChangeDocument\\s?: regex pattern changeManagement/clientOpts no `` changeManagement/credentialsId no CM changeManagement/endpoint yes changeManagement/git/format no %b see git log --help changeManagement/git/from no origin/master changeManagement/git/to no HEAD changeManagement/rfc/developmentClient yes changeManagement/rfc/developmentInstance yes changeManagement/type no NONE SOLMAN , CTS , RFC description yes developmentSystemId yes script yes targetSystem yes transportType yes verbose no false changeDocumentId - The id of the change document to that the transport request is bound to. Typically this value is provided via commit message in the commit history. Only for SOLMAN . changeManagement/changeDocumentLabel - A pattern used for identifying lines holding the change document id. changeManagement/clientOpts - Additional options for cm command line client, e.g. JAVA_OPTS. changeManagement/credentialsId - The id of the credentials to connect to the Solution Manager. The credentials needs to be maintained on Jenkins. changeManagement/endpoint - The service endpoint, e.g. Solution Manager, ABAP System. changeManagement/git/format - Specifies what part of the commit is scanned. By default the body of the commit message is scanned. changeManagement/git/from - The starting point for retrieving the change document id. changeManagement/git/to - The end point for retrieving the change document id. changeManagement/rfc/developmentClient - AS ABAP client number. Only for RFC . changeManagement/rfc/developmentInstance - AS ABAP instance number. Only for RFC . changeManagement/type - Defines where the transport request is created, e.g. SAP Solution Manager, ABAP System. description - The description of the transport request. Only for CTS . developmentSystemId - The logical system id for which the transport request is created. The format is <SID>~<TYPE>(/<CLIENT>)? . For ABAP Systems the developmentSystemId looks like DEV~ABAP/100 . For non-ABAP systems the developmentSystemId looks like e.g. L21~EXT_SRV or J01~JAVA . In case the system type is not known (in the examples provided here: EXT_SRV or JAVA ) the information can be retrieved from the Solution Manager instance. Only for SOLMAN . script - The common script environment of the Jenkinsfile running. Typically the reference to the script calling the pipeline step is provided with the this parameter, as in script: this . This allows the function to access the commonPipelineEnvironment for retrieving, e.g. configuration parameters. targetSystem - The system receiving the transport request. Only for CTS . transportType - Typically W (workbench) or C customizing. Only for CTS . verbose - Provides additional details. Only for RFC .","title":"Parameters"},{"location":"steps/transportRequestCreate/#step-configuration","text":"We recommend to define values of step parameters via config.yml file . In following sections of the config.yml the configuration is possible: parameter general step/stage changeDocumentId changeManagement/changeDocumentLabel X changeManagement/clientOpts X changeManagement/credentialsId X changeManagement/endpoint X changeManagement/git/format X changeManagement/git/from X changeManagement/git/to X changeManagement/rfc/developmentClient X changeManagement/rfc/developmentInstance X changeManagement/type X description X developmentSystemId X script targetSystem X transportType X verbose X","title":"Step configuration"},{"location":"steps/transportRequestCreate/#dependencies","text":"The step depends on the following Jenkins plugins badge credentials-binding docker kubernetes pipeline-utility-steps workflow-basic-steps workflow-cps-global-lib workflow-durable-task-step The kubernetes plugin is only used if running in a kubernetes environment. Transitive dependencies are omitted. The list might be incomplete. Consider using the ppiper/jenkins-master docker image. This images comes with preinstalled plugins. The step is configured using a customer configuration file provided as resource in an custom shared library. @Library ( 'piper-lib-os@master' ) _ // the shared lib containing the additional configuration // needs to be configured in Jenkins @Library ( 'foo@master' ) __ // inside the shared lib denoted by 'foo' the additional configuration file // needs to be located under 'resources' ('resoures/myConfig.yml') prepareDefaultValues script: this , customDefaults: 'myConfig.yml' Example content of 'resources/myConfig.yml' in branch 'master' of the repository denoted by 'foo' : general : changeManagement : changeDocumentLabel : 'ChangeDocument\\s?:' cmClientOpts : '-Djavax.net.ssl.trustStore=<path to truststore>' credentialsId : 'CM' type : 'SOLMAN' endpoint : 'https://example.org/cm' git : from : 'HEAD~1' to : 'HEAD' format : '%b' The properties configured in section 'general/changeManagement' are shared between all change management related steps. The properties can also be configured on a per-step basis: [ ... ] steps : transportRequestCreate : changeManagement : type : 'SOLMAN' endpoint : 'https://example.org/cm' [ ... ] The parameters can also be provided when the step is invoked. For examples see below.","title":"Dependencies"},{"location":"steps/transportRequestCreate/#return-value","text":"none","title":"Return value"},{"location":"steps/transportRequestCreate/#exceptions","text":"AbortException : If the creation of the transport request fails. IllegalStateException : If the change id is not provided.","title":"Exceptions"},{"location":"steps/transportRequestCreate/#example","text":"// SOLMAN def transportRequestId = transportRequestCreate script: this , changeDocumentId: '001,' changeManagement: [ type: 'SOLMAN' endpoint: 'https://example.org/cm' ] // CTS def transportRequestId = transportRequestCreate script: this , transportType: 'W' , targetSystem: 'XYZ' , description: 'the description' , changeManagement: [ type: 'CTS' endpoint: 'https://example.org/cm' ]","title":"Example"},{"location":"steps/transportRequestDocIDFromGit/","text":"transportRequestDocIDFromGit \u00b6 Retrieves change document ID from Git repository Description \u00b6 This step scans the commit messages of the Git repository for a pattern to retrieve the change document ID. It is primarily made for the transportRequestUploadSOLMAN step to provide the change document ID by Git means. Usage \u00b6 We recommend to define values of step parameters via .pipeline/config.yml file . In this case, calling the step is essentially reduced to defining the step name. Calling the step can be done either in an orchestrator specific way (e.g. via a Jenkins library step) or on the command line. Jenkins Command Line library ( 'piper-lib-os' ) transportRequestDocIDFromGit script: this piper transportRequestDocIDFromGit Outputs \u00b6 Output type Details commonPipelineEnvironment custom/changeDocumentId Executed on Jenkins Master This step is executed on the Jenkins master only. On the master node the project's Git repository is fully available. If kubernetes is used, the Git repository would have to be stashed. Depending on the size of the repository, this would be quite expensive or not possible at all. Administering the Change Document ID by Git Commit Messages \u00b6 A change document documents activities in the change process. To upload an artifact into a transport request, the Solution Manager expects the ID of an assigned change document. For more information, see transportRequestUploadSOLMAN . transportRequestDocIDFromGit allows you to retrieve the change document ID from the commit message of the Git repository of your project. This way, you can address the change document without having to change the setup of your pipeline. Please make sure that the ID is unique in the defined search range. Specifying the Git Commit Message \u00b6 transportRequestDocIDFromGit searches for lines that follow a defined pattern in the Git commit messages ( git log ) of your project. Only if necessary, specify the pattern with the label changeDocumentLabel (default= ChangeDocument ). Behind the label, enter a colon, blank spaces, and the identifier. Upload - define the change document ID ChangeDocument: 1000001234 Specifying the Git Commit Range \u00b6 The Git commit messages to be considered are determined by the parameters gitFrom (default= origin/master ) and gitTo (default= HEAD ). The naming follows the Git revision range notation git log <gitFrom>..<gitTo> . All commit messages accessible from gitTo but not from gitFrom are taken into account. Choose the commit range accordingly, as the detection of multiple IDs causes the scan to fail. Keep the default values HEAD and origin/master in case you want to retrieve the ID within the scope of a pull request. The default values should be sufficient provided that you commit the change document ID into the pull request you do not merge the origin/master before the scan o 3d97415 (origin/master) merged last change | | o d99fbf7 (HEAD) feature fixes | | | o 5c380ea ChangeDocument: 1000001234 | | | o 0e82d9b new feature |/ o 4378bb4 last change If you want to retrieve the ID from the main branch, be aware that former change document IDs may already be in the history. Adjust gitFrom so that it points to a commit before your ID definition. steps : transportRequestDocIDFromGit : gitFrom : '4378bb4' o 3d97415 (origin/master) merge new feature | o d99fbf7 feature fixes | o 5c380ea adjust config.yaml | ChangeDocument: 1000001234 | o 0e82d9b new feature | o 4378bb4 merged last change Define gitTo , if it cannot be ruled out that further document IDs have been merged in parallel. steps : transportRequestDocIDFromGit : gitFrom : '4378bb4' gitTo : 'd99fbf7' o 3d97415 (origin/master) merge new feature |\\ . o d99fbf7 feature fixes . | . o 5c380ea adjust config.yaml . | ChangeDocument: 1000001234 . | . o 0e82d9b new feature |/ o 4378bb4 merged last change Parameters \u00b6 Overview - Step \u00b6 Name Mandatory Additional information script (yes) reference to Jenkins main pipeline script changeDocumentLabel no gitFrom no gitTo no verbose no activates debug output Overview - Execution Environment \u00b6 Orchestrator-specific only These parameters are relevant for orchestrator usage and not considered when using the command line option. Name Mandatory Additional information Details \u00b6 changeDocumentLabel \u00b6 Pattern used for identifying lines holding the change document ID. The GIT commit log messages are scanned for this label back to overview Scope Details Aliases changeManagement/changeDocumentLabel Type string Mandatory no Default ChangeDocument\\s?: Secret no Configuration scope \u2612 parameter \u2612 general \u2612 steps \u2612 stages Resource references none gitFrom \u00b6 GIT starting point for retrieving the change document and transport request ID back to overview Scope Details Aliases changeManagement/git/from Type string Mandatory no Default origin/master Secret no Configuration scope \u2612 parameter \u2612 general \u2612 steps \u2612 stages Resource references none gitTo \u00b6 GIT ending point for retrieving the change document and transport request ID back to overview Scope Details Aliases changeManagement/git/to Type string Mandatory no Default HEAD Secret no Configuration scope \u2612 parameter \u2612 general \u2612 steps \u2612 stages Resource references none script \u00b6 The common script environment of the Jenkinsfile running. Typically the reference to the script calling the pipeline step is provided with the this parameter, as in script: this . This allows the function to access the commonPipelineEnvironment for retrieving, e.g. configuration parameters. back to overview Scope Details Aliases - Type Jenkins Script Mandatory yes Default Secret no Configuration scope \u2610 parameter \u2610 general \u2610 steps \u2610 stages Resource references none verbose \u00b6 verbose output back to overview Scope Details Aliases - Type bool Mandatory no Default false Possible values - true - false Secret no Configuration scope \u2612 parameter \u2612 general \u2612 steps \u2612 stages Resource references none Example \u00b6 transportRequestDocIDFromGit ( script: this )","title":"transportRequestDocIDFromGit"},{"location":"steps/transportRequestDocIDFromGit/#transportrequestdocidfromgit","text":"Retrieves change document ID from Git repository","title":"transportRequestDocIDFromGit"},{"location":"steps/transportRequestDocIDFromGit/#description","text":"This step scans the commit messages of the Git repository for a pattern to retrieve the change document ID. It is primarily made for the transportRequestUploadSOLMAN step to provide the change document ID by Git means.","title":"Description"},{"location":"steps/transportRequestDocIDFromGit/#usage","text":"We recommend to define values of step parameters via .pipeline/config.yml file . In this case, calling the step is essentially reduced to defining the step name. Calling the step can be done either in an orchestrator specific way (e.g. via a Jenkins library step) or on the command line. Jenkins Command Line library ( 'piper-lib-os' ) transportRequestDocIDFromGit script: this piper transportRequestDocIDFromGit","title":"Usage"},{"location":"steps/transportRequestDocIDFromGit/#outputs","text":"Output type Details commonPipelineEnvironment custom/changeDocumentId Executed on Jenkins Master This step is executed on the Jenkins master only. On the master node the project's Git repository is fully available. If kubernetes is used, the Git repository would have to be stashed. Depending on the size of the repository, this would be quite expensive or not possible at all.","title":"Outputs"},{"location":"steps/transportRequestDocIDFromGit/#administering-the-change-document-id-by-git-commit-messages","text":"A change document documents activities in the change process. To upload an artifact into a transport request, the Solution Manager expects the ID of an assigned change document. For more information, see transportRequestUploadSOLMAN . transportRequestDocIDFromGit allows you to retrieve the change document ID from the commit message of the Git repository of your project. This way, you can address the change document without having to change the setup of your pipeline. Please make sure that the ID is unique in the defined search range.","title":"Administering the Change Document ID by Git Commit Messages"},{"location":"steps/transportRequestDocIDFromGit/#specifying-the-git-commit-message","text":"transportRequestDocIDFromGit searches for lines that follow a defined pattern in the Git commit messages ( git log ) of your project. Only if necessary, specify the pattern with the label changeDocumentLabel (default= ChangeDocument ). Behind the label, enter a colon, blank spaces, and the identifier. Upload - define the change document ID ChangeDocument: 1000001234","title":"Specifying the Git Commit Message"},{"location":"steps/transportRequestDocIDFromGit/#specifying-the-git-commit-range","text":"The Git commit messages to be considered are determined by the parameters gitFrom (default= origin/master ) and gitTo (default= HEAD ). The naming follows the Git revision range notation git log <gitFrom>..<gitTo> . All commit messages accessible from gitTo but not from gitFrom are taken into account. Choose the commit range accordingly, as the detection of multiple IDs causes the scan to fail. Keep the default values HEAD and origin/master in case you want to retrieve the ID within the scope of a pull request. The default values should be sufficient provided that you commit the change document ID into the pull request you do not merge the origin/master before the scan o 3d97415 (origin/master) merged last change | | o d99fbf7 (HEAD) feature fixes | | | o 5c380ea ChangeDocument: 1000001234 | | | o 0e82d9b new feature |/ o 4378bb4 last change If you want to retrieve the ID from the main branch, be aware that former change document IDs may already be in the history. Adjust gitFrom so that it points to a commit before your ID definition. steps : transportRequestDocIDFromGit : gitFrom : '4378bb4' o 3d97415 (origin/master) merge new feature | o d99fbf7 feature fixes | o 5c380ea adjust config.yaml | ChangeDocument: 1000001234 | o 0e82d9b new feature | o 4378bb4 merged last change Define gitTo , if it cannot be ruled out that further document IDs have been merged in parallel. steps : transportRequestDocIDFromGit : gitFrom : '4378bb4' gitTo : 'd99fbf7' o 3d97415 (origin/master) merge new feature |\\ . o d99fbf7 feature fixes . | . o 5c380ea adjust config.yaml . | ChangeDocument: 1000001234 . | . o 0e82d9b new feature |/ o 4378bb4 merged last change","title":"Specifying the Git Commit Range"},{"location":"steps/transportRequestDocIDFromGit/#parameters","text":"","title":"Parameters"},{"location":"steps/transportRequestDocIDFromGit/#overview-step","text":"Name Mandatory Additional information script (yes) reference to Jenkins main pipeline script changeDocumentLabel no gitFrom no gitTo no verbose no activates debug output","title":"Overview - Step"},{"location":"steps/transportRequestDocIDFromGit/#overview-execution-environment","text":"Orchestrator-specific only These parameters are relevant for orchestrator usage and not considered when using the command line option. Name Mandatory Additional information","title":"Overview - Execution Environment"},{"location":"steps/transportRequestDocIDFromGit/#details","text":"","title":"Details"},{"location":"steps/transportRequestDocIDFromGit/#changedocumentlabel","text":"Pattern used for identifying lines holding the change document ID. The GIT commit log messages are scanned for this label back to overview Scope Details Aliases changeManagement/changeDocumentLabel Type string Mandatory no Default ChangeDocument\\s?: Secret no Configuration scope \u2612 parameter \u2612 general \u2612 steps \u2612 stages Resource references none","title":"changeDocumentLabel"},{"location":"steps/transportRequestDocIDFromGit/#gitfrom","text":"GIT starting point for retrieving the change document and transport request ID back to overview Scope Details Aliases changeManagement/git/from Type string Mandatory no Default origin/master Secret no Configuration scope \u2612 parameter \u2612 general \u2612 steps \u2612 stages Resource references none","title":"gitFrom"},{"location":"steps/transportRequestDocIDFromGit/#gitto","text":"GIT ending point for retrieving the change document and transport request ID back to overview Scope Details Aliases changeManagement/git/to Type string Mandatory no Default HEAD Secret no Configuration scope \u2612 parameter \u2612 general \u2612 steps \u2612 stages Resource references none","title":"gitTo"},{"location":"steps/transportRequestDocIDFromGit/#script","text":"The common script environment of the Jenkinsfile running. Typically the reference to the script calling the pipeline step is provided with the this parameter, as in script: this . This allows the function to access the commonPipelineEnvironment for retrieving, e.g. configuration parameters. back to overview Scope Details Aliases - Type Jenkins Script Mandatory yes Default Secret no Configuration scope \u2610 parameter \u2610 general \u2610 steps \u2610 stages Resource references none","title":"script"},{"location":"steps/transportRequestDocIDFromGit/#verbose","text":"verbose output back to overview Scope Details Aliases - Type bool Mandatory no Default false Possible values - true - false Secret no Configuration scope \u2612 parameter \u2612 general \u2612 steps \u2612 stages Resource references none","title":"verbose"},{"location":"steps/transportRequestDocIDFromGit/#example","text":"transportRequestDocIDFromGit ( script: this )","title":"Example"},{"location":"steps/transportRequestRelease/","text":"transportRequestRelease \u00b6 Description \u00b6 Releases a Transport Request. Note: This step is deprecated. Prerequisites \u00b6 No prerequisites Parameters \u00b6 name mandatory default possible values changeDocumentId yes changeManagement/clientOpts no `` changeManagement/credentialsId no CM changeManagement/endpoint yes changeManagement/git/format no %b see git log --help changeManagement/git/from no origin/master changeManagement/git/to no HEAD changeManagement/rfc/developmentClient yes changeManagement/rfc/developmentInstance yes script yes transportRequestId yes verbose no false changeDocumentId - The id of the change document to that the transport request is bound to. Typically this value is provided via commit message in the commit history. Only for SOLMAN . changeManagement/clientOpts - Additional options for cm command line client, e.g. JAVA_OPTS. changeManagement/credentialsId - The id of the credentials to connect to the Solution Manager. The credentials needs to be maintained on Jenkins. changeManagement/endpoint - The service endpoint, e.g. Solution Manager, ABAP System. changeManagement/git/format - Specifies what part of the commit is scanned. By default the body of the commit message is scanned. changeManagement/git/from - The starting point for retrieving the change document id. changeManagement/git/to - The end point for retrieving the change document id. changeManagement/rfc/developmentClient - AS ABAP client number. Only for RFC . changeManagement/rfc/developmentInstance - AS ABAP instance number. Only for RFC . script - The common script environment of the Jenkinsfile running. Typically the reference to the script calling the pipeline step is provided with the this parameter, as in script: this . This allows the function to access the commonPipelineEnvironment for retrieving, e.g. configuration parameters. transportRequestId - The id of the transport request to release. verbose - Provides additional details. Only for RFC . Step configuration \u00b6 We recommend to define values of step parameters via config.yml file . In following sections of the config.yml the configuration is possible: parameter general step/stage changeDocumentId changeManagement/clientOpts X changeManagement/credentialsId X changeManagement/endpoint X changeManagement/git/format X changeManagement/git/from X changeManagement/git/to X changeManagement/rfc/developmentClient X changeManagement/rfc/developmentInstance X script transportRequestId verbose Dependencies \u00b6 The step depends on the following Jenkins plugins badge credentials-binding docker kubernetes pipeline-utility-steps workflow-basic-steps workflow-cps-global-lib workflow-durable-task-step The kubernetes plugin is only used if running in a kubernetes environment. Transitive dependencies are omitted. The list might be incomplete. Consider using the ppiper/jenkins-master docker image. This images comes with preinstalled plugins. The step is configured using a customer configuration file provided as resource in an custom shared library. @Library ( 'piper-lib-os@master' ) _ // the shared lib containing the additional configuration // needs to be configured in Jenkins @Library ( 'foo@master' ) __ // inside the shared lib denoted by 'foo' the additional configuration file // needs to be located under 'resources' ('resoures/myConfig.yml') prepareDefaultValues script: this , customDefaults: 'myConfig.yml' Example content of 'resources/myConfig.yml' in branch 'master' of the repository denoted by 'foo' : general : changeManagement : changeDocumentLabel : 'ChangeDocument\\s?:' cmClientOpts : '-Djavax.net.ssl.trustStore=<path to truststore>' credentialsId : 'CM' type : 'SOLMAN' endpoint : 'https://example.org/cm' git : from : 'HEAD~1' to : 'HEAD' format : '%b' The properties configured in section 'general/changeManagement' are shared between all change management related steps. The properties can also be configured on a per-step basis: [ ... ] steps : transportRequestRelease : changeManagement : type : 'SOLMAN' endpoint : 'https://example.org/cm' [ ... ] The parameters can also be provided when the step is invoked. For examples see below. Exceptions \u00b6 IllegalArgumentException : If the change id is not provided ( SOLMAN only) If the transport request id is not provided. AbortException : If the release of the transport request fails. Example \u00b6 // SOLMAN transportRequestRelease script: this , changeDocumentId: '001' , transportRequestId: '001' , changeManagement: [ type: 'SOLMAN' endpoint: 'https://example.org/cm' ] // CTS transportRequestRelease script: this , transportRequestId: '001' , changeManagement: [ type: 'CTS' endpoint: 'https://example.org/cm' ]","title":"transportRequestRelease"},{"location":"steps/transportRequestRelease/#transportrequestrelease","text":"","title":"transportRequestRelease"},{"location":"steps/transportRequestRelease/#description","text":"Releases a Transport Request. Note: This step is deprecated.","title":"Description"},{"location":"steps/transportRequestRelease/#prerequisites","text":"No prerequisites","title":"Prerequisites"},{"location":"steps/transportRequestRelease/#parameters","text":"name mandatory default possible values changeDocumentId yes changeManagement/clientOpts no `` changeManagement/credentialsId no CM changeManagement/endpoint yes changeManagement/git/format no %b see git log --help changeManagement/git/from no origin/master changeManagement/git/to no HEAD changeManagement/rfc/developmentClient yes changeManagement/rfc/developmentInstance yes script yes transportRequestId yes verbose no false changeDocumentId - The id of the change document to that the transport request is bound to. Typically this value is provided via commit message in the commit history. Only for SOLMAN . changeManagement/clientOpts - Additional options for cm command line client, e.g. JAVA_OPTS. changeManagement/credentialsId - The id of the credentials to connect to the Solution Manager. The credentials needs to be maintained on Jenkins. changeManagement/endpoint - The service endpoint, e.g. Solution Manager, ABAP System. changeManagement/git/format - Specifies what part of the commit is scanned. By default the body of the commit message is scanned. changeManagement/git/from - The starting point for retrieving the change document id. changeManagement/git/to - The end point for retrieving the change document id. changeManagement/rfc/developmentClient - AS ABAP client number. Only for RFC . changeManagement/rfc/developmentInstance - AS ABAP instance number. Only for RFC . script - The common script environment of the Jenkinsfile running. Typically the reference to the script calling the pipeline step is provided with the this parameter, as in script: this . This allows the function to access the commonPipelineEnvironment for retrieving, e.g. configuration parameters. transportRequestId - The id of the transport request to release. verbose - Provides additional details. Only for RFC .","title":"Parameters"},{"location":"steps/transportRequestRelease/#step-configuration","text":"We recommend to define values of step parameters via config.yml file . In following sections of the config.yml the configuration is possible: parameter general step/stage changeDocumentId changeManagement/clientOpts X changeManagement/credentialsId X changeManagement/endpoint X changeManagement/git/format X changeManagement/git/from X changeManagement/git/to X changeManagement/rfc/developmentClient X changeManagement/rfc/developmentInstance X script transportRequestId verbose","title":"Step configuration"},{"location":"steps/transportRequestRelease/#dependencies","text":"The step depends on the following Jenkins plugins badge credentials-binding docker kubernetes pipeline-utility-steps workflow-basic-steps workflow-cps-global-lib workflow-durable-task-step The kubernetes plugin is only used if running in a kubernetes environment. Transitive dependencies are omitted. The list might be incomplete. Consider using the ppiper/jenkins-master docker image. This images comes with preinstalled plugins. The step is configured using a customer configuration file provided as resource in an custom shared library. @Library ( 'piper-lib-os@master' ) _ // the shared lib containing the additional configuration // needs to be configured in Jenkins @Library ( 'foo@master' ) __ // inside the shared lib denoted by 'foo' the additional configuration file // needs to be located under 'resources' ('resoures/myConfig.yml') prepareDefaultValues script: this , customDefaults: 'myConfig.yml' Example content of 'resources/myConfig.yml' in branch 'master' of the repository denoted by 'foo' : general : changeManagement : changeDocumentLabel : 'ChangeDocument\\s?:' cmClientOpts : '-Djavax.net.ssl.trustStore=<path to truststore>' credentialsId : 'CM' type : 'SOLMAN' endpoint : 'https://example.org/cm' git : from : 'HEAD~1' to : 'HEAD' format : '%b' The properties configured in section 'general/changeManagement' are shared between all change management related steps. The properties can also be configured on a per-step basis: [ ... ] steps : transportRequestRelease : changeManagement : type : 'SOLMAN' endpoint : 'https://example.org/cm' [ ... ] The parameters can also be provided when the step is invoked. For examples see below.","title":"Dependencies"},{"location":"steps/transportRequestRelease/#exceptions","text":"IllegalArgumentException : If the change id is not provided ( SOLMAN only) If the transport request id is not provided. AbortException : If the release of the transport request fails.","title":"Exceptions"},{"location":"steps/transportRequestRelease/#example","text":"// SOLMAN transportRequestRelease script: this , changeDocumentId: '001' , transportRequestId: '001' , changeManagement: [ type: 'SOLMAN' endpoint: 'https://example.org/cm' ] // CTS transportRequestRelease script: this , transportRequestId: '001' , changeManagement: [ type: 'CTS' endpoint: 'https://example.org/cm' ]","title":"Example"},{"location":"steps/transportRequestReqIDFromGit/","text":"transportRequestReqIDFromGit \u00b6 Retrieves the transport request ID from Git repository Description \u00b6 This step scans the commit messages of the Git repository for a pattern to retrieve the transport request ID. It is primarily made for the transport request upload steps to provide the transport request ID by Git means. Usage \u00b6 We recommend to define values of step parameters via .pipeline/config.yml file . In this case, calling the step is essentially reduced to defining the step name. Calling the step can be done either in an orchestrator specific way (e.g. via a Jenkins library step) or on the command line. Jenkins Command Line library ( 'piper-lib-os' ) transportRequestReqIDFromGit script: this piper transportRequestReqIDFromGit Outputs \u00b6 Output type Details commonPipelineEnvironment custom/transportRequestId Executed on Jenkins Master This step is executed on the Jenkins master only. On the master node the project's Git repository is fully available. If kubernetes is used, the Git repository would have to be stashed. Depending on the size of the repository, this would be quite expensive or not possible at all. Administering the Transport Request ID by Git Commit Messages \u00b6 The transport request ID identifies a container in the ABAP development system that can be used to document and transport changes within the landscape. If you upload your pipeline artifacts into such a container, please provide the transport request ID in an upload step. See transportRequestUploadSOLMAN . With transportRequestReqIDFromGit you can retrieve the transport request ID from the commit message of the Git repository of your project. This way, you can address the transport request without having to change the setup of your pipeline. Please make sure that the ID is unique in the defined search range. General Purpose Pipeline Init Stage \u00b6 The step can also be configured via General Purpose Pipeline in Init stage using the config.yml as follows: stages : Init : transportRequestReqIDFromGit : true This will initialize the step within the Init stage of the pipeline and retrieve the transportRequestId from the git commit history. Specifying the Git Commit Message \u00b6 transportRequestReqIDFromGit searches for lines that follow a defined pattern in the Git commit messages ( git log ) of your project. Only if necessary, specify the pattern with the label transportRequestLabel (default= TransportRequest ). Behind the label, enter a colon, blank spaces, and the identifier. Upload - define the transport request ID TransportRequest: ABCD10005E Specifying the Git Commit Range \u00b6 The Git commit messages to be considered are determined by the parameters gitFrom (default= origin/master ) and gitTo (default= HEAD ). The naming follows the Git revision range notation git log <gitFrom>..<gitTo> . All commit messages accessible from gitTo but not from gitFrom are taken into account. Choose the commit range accordingly, as the detection of multiple IDs causes the scan to fail. Keep the default values HEAD and origin/master in case you want to retrieve the ID within the scope of a pull request. The default values should be sufficient provided that you commit the transport request ID into the pull request you do not merge the origin/master before the scan you do not change the transport request ID while developing This way, only the commits ( HEAD ) that have not yet entered the main branch origin/master are scanned. o 3d97415 (origin/master) merged last change | | o d99fbf7 (HEAD) feature fixes | | | o 5c380ea TransportRequest: ABCD10001E | | | o 0e82d9b new feature |/ o 4378bb4 last change If you want to retrieve the ID from the main branch, be aware that former transport request IDs may already be in the history. Adjust gitFrom so that it points to a commit before your ID definition. steps : transportRequestReqIDFromGit : gitFrom : '4378bb4' o 3d97415 (origin/master) merge new feature | o d99fbf7 feature fixes | o 5c380ea adjust config.yaml | TransportRequest: ABCD10001E | o 0e82d9b new feature | o 4378bb4 merged last change Define gitTo , if it cannot be ruled out that further transport request IDs have been merged in parallel. steps : transportRequestReqIDFromGit : gitFrom : '4378bb4' gitTo : 'd99fbf7' o 3d97415 (origin/master) merge new feature |\\ . o d99fbf7 feature fixes . | . o 5c380ea adjust config.yaml . | TransportRequest: ABCD10001E . | . o 0e82d9b new feature |/ o 4378bb4 merged last change Parameters \u00b6 Overview - Step \u00b6 Name Mandatory Additional information script (yes) reference to Jenkins main pipeline script gitFrom no gitTo no transportRequestLabel no verbose no activates debug output Overview - Execution Environment \u00b6 Orchestrator-specific only These parameters are relevant for orchestrator usage and not considered when using the command line option. Name Mandatory Additional information Details \u00b6 gitFrom \u00b6 GIT starting point for retrieving the transport request ID back to overview Scope Details Aliases changeManagement/git/from Type string Mandatory no Default origin/master Secret no Configuration scope \u2612 parameter \u2612 general \u2612 steps \u2612 stages Resource references none gitTo \u00b6 GIT ending point for retrieving the transport request ID back to overview Scope Details Aliases changeManagement/git/to Type string Mandatory no Default HEAD Secret no Configuration scope \u2612 parameter \u2612 general \u2612 steps \u2612 stages Resource references none script \u00b6 The common script environment of the Jenkinsfile running. Typically the reference to the script calling the pipeline step is provided with the this parameter, as in script: this . This allows the function to access the commonPipelineEnvironment for retrieving, e.g. configuration parameters. back to overview Scope Details Aliases - Type Jenkins Script Mandatory yes Default Secret no Configuration scope \u2610 parameter \u2610 general \u2610 steps \u2610 stages Resource references none transportRequestLabel \u00b6 Pattern used for identifying lines holding the transport request ID. The GIT commit log messages are scanned for this label back to overview Scope Details Aliases changeManagement/transportRequestLabel Type string Mandatory no Default TransportRequest\\s?: Secret no Configuration scope \u2612 parameter \u2612 general \u2612 steps \u2612 stages Resource references none verbose \u00b6 verbose output back to overview Scope Details Aliases - Type bool Mandatory no Default false Possible values - true - false Secret no Configuration scope \u2612 parameter \u2612 general \u2612 steps \u2612 stages Resource references none Example \u00b6 transportRequestReqIDFromGit ( script: this )","title":"transportRequestReqIDFromGit"},{"location":"steps/transportRequestReqIDFromGit/#transportrequestreqidfromgit","text":"Retrieves the transport request ID from Git repository","title":"transportRequestReqIDFromGit"},{"location":"steps/transportRequestReqIDFromGit/#description","text":"This step scans the commit messages of the Git repository for a pattern to retrieve the transport request ID. It is primarily made for the transport request upload steps to provide the transport request ID by Git means.","title":"Description"},{"location":"steps/transportRequestReqIDFromGit/#usage","text":"We recommend to define values of step parameters via .pipeline/config.yml file . In this case, calling the step is essentially reduced to defining the step name. Calling the step can be done either in an orchestrator specific way (e.g. via a Jenkins library step) or on the command line. Jenkins Command Line library ( 'piper-lib-os' ) transportRequestReqIDFromGit script: this piper transportRequestReqIDFromGit","title":"Usage"},{"location":"steps/transportRequestReqIDFromGit/#outputs","text":"Output type Details commonPipelineEnvironment custom/transportRequestId Executed on Jenkins Master This step is executed on the Jenkins master only. On the master node the project's Git repository is fully available. If kubernetes is used, the Git repository would have to be stashed. Depending on the size of the repository, this would be quite expensive or not possible at all.","title":"Outputs"},{"location":"steps/transportRequestReqIDFromGit/#administering-the-transport-request-id-by-git-commit-messages","text":"The transport request ID identifies a container in the ABAP development system that can be used to document and transport changes within the landscape. If you upload your pipeline artifacts into such a container, please provide the transport request ID in an upload step. See transportRequestUploadSOLMAN . With transportRequestReqIDFromGit you can retrieve the transport request ID from the commit message of the Git repository of your project. This way, you can address the transport request without having to change the setup of your pipeline. Please make sure that the ID is unique in the defined search range.","title":"Administering the Transport Request ID by Git Commit Messages"},{"location":"steps/transportRequestReqIDFromGit/#general-purpose-pipeline-init-stage","text":"The step can also be configured via General Purpose Pipeline in Init stage using the config.yml as follows: stages : Init : transportRequestReqIDFromGit : true This will initialize the step within the Init stage of the pipeline and retrieve the transportRequestId from the git commit history.","title":"General Purpose Pipeline Init Stage"},{"location":"steps/transportRequestReqIDFromGit/#specifying-the-git-commit-message","text":"transportRequestReqIDFromGit searches for lines that follow a defined pattern in the Git commit messages ( git log ) of your project. Only if necessary, specify the pattern with the label transportRequestLabel (default= TransportRequest ). Behind the label, enter a colon, blank spaces, and the identifier. Upload - define the transport request ID TransportRequest: ABCD10005E","title":"Specifying the Git Commit Message"},{"location":"steps/transportRequestReqIDFromGit/#specifying-the-git-commit-range","text":"The Git commit messages to be considered are determined by the parameters gitFrom (default= origin/master ) and gitTo (default= HEAD ). The naming follows the Git revision range notation git log <gitFrom>..<gitTo> . All commit messages accessible from gitTo but not from gitFrom are taken into account. Choose the commit range accordingly, as the detection of multiple IDs causes the scan to fail. Keep the default values HEAD and origin/master in case you want to retrieve the ID within the scope of a pull request. The default values should be sufficient provided that you commit the transport request ID into the pull request you do not merge the origin/master before the scan you do not change the transport request ID while developing This way, only the commits ( HEAD ) that have not yet entered the main branch origin/master are scanned. o 3d97415 (origin/master) merged last change | | o d99fbf7 (HEAD) feature fixes | | | o 5c380ea TransportRequest: ABCD10001E | | | o 0e82d9b new feature |/ o 4378bb4 last change If you want to retrieve the ID from the main branch, be aware that former transport request IDs may already be in the history. Adjust gitFrom so that it points to a commit before your ID definition. steps : transportRequestReqIDFromGit : gitFrom : '4378bb4' o 3d97415 (origin/master) merge new feature | o d99fbf7 feature fixes | o 5c380ea adjust config.yaml | TransportRequest: ABCD10001E | o 0e82d9b new feature | o 4378bb4 merged last change Define gitTo , if it cannot be ruled out that further transport request IDs have been merged in parallel. steps : transportRequestReqIDFromGit : gitFrom : '4378bb4' gitTo : 'd99fbf7' o 3d97415 (origin/master) merge new feature |\\ . o d99fbf7 feature fixes . | . o 5c380ea adjust config.yaml . | TransportRequest: ABCD10001E . | . o 0e82d9b new feature |/ o 4378bb4 merged last change","title":"Specifying the Git Commit Range"},{"location":"steps/transportRequestReqIDFromGit/#parameters","text":"","title":"Parameters"},{"location":"steps/transportRequestReqIDFromGit/#overview-step","text":"Name Mandatory Additional information script (yes) reference to Jenkins main pipeline script gitFrom no gitTo no transportRequestLabel no verbose no activates debug output","title":"Overview - Step"},{"location":"steps/transportRequestReqIDFromGit/#overview-execution-environment","text":"Orchestrator-specific only These parameters are relevant for orchestrator usage and not considered when using the command line option. Name Mandatory Additional information","title":"Overview - Execution Environment"},{"location":"steps/transportRequestReqIDFromGit/#details","text":"","title":"Details"},{"location":"steps/transportRequestReqIDFromGit/#gitfrom","text":"GIT starting point for retrieving the transport request ID back to overview Scope Details Aliases changeManagement/git/from Type string Mandatory no Default origin/master Secret no Configuration scope \u2612 parameter \u2612 general \u2612 steps \u2612 stages Resource references none","title":"gitFrom"},{"location":"steps/transportRequestReqIDFromGit/#gitto","text":"GIT ending point for retrieving the transport request ID back to overview Scope Details Aliases changeManagement/git/to Type string Mandatory no Default HEAD Secret no Configuration scope \u2612 parameter \u2612 general \u2612 steps \u2612 stages Resource references none","title":"gitTo"},{"location":"steps/transportRequestReqIDFromGit/#script","text":"The common script environment of the Jenkinsfile running. Typically the reference to the script calling the pipeline step is provided with the this parameter, as in script: this . This allows the function to access the commonPipelineEnvironment for retrieving, e.g. configuration parameters. back to overview Scope Details Aliases - Type Jenkins Script Mandatory yes Default Secret no Configuration scope \u2610 parameter \u2610 general \u2610 steps \u2610 stages Resource references none","title":"script"},{"location":"steps/transportRequestReqIDFromGit/#transportrequestlabel","text":"Pattern used for identifying lines holding the transport request ID. The GIT commit log messages are scanned for this label back to overview Scope Details Aliases changeManagement/transportRequestLabel Type string Mandatory no Default TransportRequest\\s?: Secret no Configuration scope \u2612 parameter \u2612 general \u2612 steps \u2612 stages Resource references none","title":"transportRequestLabel"},{"location":"steps/transportRequestReqIDFromGit/#verbose","text":"verbose output back to overview Scope Details Aliases - Type bool Mandatory no Default false Possible values - true - false Secret no Configuration scope \u2612 parameter \u2612 general \u2612 steps \u2612 stages Resource references none","title":"verbose"},{"location":"steps/transportRequestReqIDFromGit/#example","text":"transportRequestReqIDFromGit ( script: this )","title":"Example"},{"location":"steps/transportRequestUploadCTS/","text":"transportRequestUploadCTS \u00b6 This step uploads an UI5 application to the SAPUI5 ABAP repository. Description \u00b6 This step uploads an UI5 application from your project folder to the SAPUI5 ABAP repository of the SAPUI5 ABAP back-end infrastructure using the SAPUI5 Repository OData service. It processes the results of the ui5 build command of the SAPUI5 toolset. Usage \u00b6 We recommend to define values of step parameters via .pipeline/config.yml file . In this case, calling the step is essentially reduced to defining the step name. Calling the step can be done either in an orchestrator specific way (e.g. via a Jenkins library step) or on the command line. Jenkins Command Line library ( 'piper-lib-os' ) transportRequestUploadCTS script: this piper transportRequestUploadCTS Outputs \u00b6 Output type Details commonPipelineEnvironment custom/transportRequestId Prerequisites \u00b6 You have installed the SAP component SAP_UI 7.53 or higher on your ABAP system. You have enabled the OData Service to load data to the SAPUI5 ABAP repository . You have the S_DEVELOP authorization to perform operations in your SAPUI5 ABAP repository. You have created a transport request on the ABAP system, which is the target container of the SAPUI5 application for your upload. Setting Up an Upload Client \u00b6 The step transportRequestUploadCTS uses the Node.js -based SAP Fiori tools to upload your SAPUI5 application to the UI5 repository service of your ABAP back-end infrastructure. It performs the deployment command Fiori deploy on a Docker image. By default, a plain node.js Docker image is pulled and equipped with the SAPUI5 toolset during runtime of the pipeline. Alternatively, you can provide your own, fully equipped Docker image. This speeds up the upload process, but requires you to maintain and provision the image on a Docker registry. Creating a Fully Equipped Docker Image \u00b6 To create an own Docker image with the SAP Fiori tools , proceed as follows: Create a node.js based Docker image with the SAP Fiori tools installed: FROM node USER root RUN npm install -global @ui5/cli @sap/ux-ui5-tooling @ui5/logger @ui5/fs USER node /bin/bash docker build -t my/fiori-node . Push your image to your private Docker Hub registry : /bin/bash docker push my/fiori-node Add the following content to your config.yml file: steps : transportRequestUploadCTS : dockerImage : 'my/fiori-node' deployToolDependencies : [] Building an SAPUI5 Application \u00b6 Build your SAPUI5 application with the build command of the SAPUI5 toolset and use the step npmExecuteScripts to run the build command. Proceed as follows to do so: Configure the steps in the package.json file of your project as follows: { ... \"scripts\" : { \"start\" : \"ui5 serve\" , \"test\" : \"npm run lint\" , \"build\" : \"ui5 build --clean-dest\" , ... }, \"dependencies\" : {}, \"devDependencies\" : { \"@ui5/cli\" : \"^2.11.2\" , ... } } Configure the execution step in the pipeline as follows: stage ( 'Build' ) { npmExecuteScripts ( script: this , runScripts: [ 'build' ]) } Note: Do not use the mtaBuild step. The MTA Build Tool mta is dedicated to the SAP Business Technology Platform. It does neither create the expected dist folder nor the compliant content. Uploading an SAPUI5 Application \u00b6 The Fiori toolset uses the ODATA service to upload your UI5 application to the SAPUI5 ABAP repository. It controls access by Basic Authentication (user/password based authentication). Note: Do not upload your application to SAP Business Technology Platform. The SAP BTP does not support Basic Authentication . Note: Use an HTTPS endpoint to ensure the encryption of your credentials. Specifying the Transport Request \u00b6 The target of the upload is a transport request, identified by an identifier (ID). The step transportRequestUploadCTS allows you to set the ID by parameter. Alternatively, you can pass the ID through the parameter commonPipelineEnvironment . For example, by performing a step that generates the ID or obtains it differently. For more information, see transportRequestReqIDFromGit . Adding a Parameter \u00b6 A parameterized pipeline allows you to specify the ID with the launch of each build instead of entering it statically into the pipeline. transportRequestUploadCTS ( script: this , transportRequestId: $ { TRANSPORT_REQUEST_ID }, ... ) The Jenkins pipeline input step allows you to specify the ID at runtime of the pipeline. def ids = input ( message: \"Upload?\" , parameters: [ string ( name: 'TRANSPORT_REQUEST_ID' , description: 'Transport Request ID' ) ] ) transportRequestUploadCTS ( script: this , transportRequestId: ids [ 'TRANSPORT_REQUEST_ID' ], ... ) Common Pipeline Environment \u00b6 Use the step transportRequestReqIDFromGit to obtain the transportRequestId value from your Git commit messages. This step extracts the ID from the commit messages of your project repository and enters it into the commonPipelineEnvironment . In turn, the upload step transportRequestUploadCTS picks it up from there. transportRequestReqIDFromGit ( script: this ) transportRequestUploadCTS ( script: this , ... ) General Purpose Pipeline Release Stage \u00b6 The step can also be configured via General Purpose Pipeline in Release stage using the config.yml as follows: stages: Release: transportRequestUploadCTS: true This will initialize the step within the Release stage of the pipeline and will upload the desired application (SAPUI5/OPENUI5) to the SAPUI5 ABAP repository. Parameters \u00b6 Overview - Step \u00b6 Name Mandatory Additional information abapPackage yes applicationName yes password (yes) pass via ENV or Jenkins credentials script (yes) reference to Jenkins main pipeline script transportRequestId yes username (yes) pass via ENV or Jenkins credentials client no deployConfigFile no deployToolDependencies no description no endpoint no npmInstallOpts no osDeployUser no verbose no activates debug output Overview - Execution Environment \u00b6 Orchestrator-specific only These parameters are relevant for orchestrator usage and not considered when using the command line option. Name Mandatory Additional information containerCommand no containerShell no dockerEnvVars no dockerImage no dockerName no dockerOptions no dockerPullImage no dockerVolumeBind no dockerWorkspace no Details \u00b6 abapPackage \u00b6 ABAP package name of the UI5 application back to overview Scope Details Aliases - Type string Mandatory yes Default $PIPER_abapPackage (if set) Secret no Configuration scope \u2612 parameter \u2612 general \u2612 steps \u2612 stages Resource references none applicationName \u00b6 Name of the UI5 application back to overview Scope Details Aliases - Type string Mandatory yes Default $PIPER_applicationName (if set) Secret no Configuration scope \u2612 parameter \u2612 general \u2612 steps \u2612 stages Resource references none client \u00b6 The ABAP client back to overview Scope Details Aliases - changeManagement/client - changeManagement/cts/client Type string Mandatory no Default $PIPER_client (if set) Secret no Configuration scope \u2612 parameter \u2612 general \u2612 steps \u2612 stages Resource references none containerCommand \u00b6 Jenkins-specific: Used for proper environment setup. Kubernetes only: Allows to specify start command for container created with dockerImage parameter to overwrite Piper default (/usr/bin/tail -f /dev/null). back to overview Scope Details Aliases - Type string Mandatory no Default Secret no Configuration scope \u2612 parameter \u2612 general \u2612 steps \u2612 stages Resource references none containerShell \u00b6 Jenkins-specific: Used for proper environment setup. Allows to specify the shell to be executed for container with containerName. back to overview Scope Details Aliases - Type string Mandatory no Default Secret no Configuration scope \u2612 parameter \u2612 general \u2612 steps \u2612 stages Resource references none deployConfigFile \u00b6 Configuration file for the fiori deployment back to overview Scope Details Aliases - changeManagement/deployConfigFile - changeManagement/cts/deployConfigFile Type string Mandatory no Default ui5-deploy.yaml Secret no Configuration scope \u2612 parameter \u2612 general \u2612 steps \u2612 stages Resource references none deployToolDependencies \u00b6 List of additional dependencies to fiori related packages. By default a standard node docker image is used on which the dependencies are installed. Provide an empty list, in case your docker image already contains the required dependencies back to overview Scope Details Aliases - changeManagement/deployToolDependencies - changeManagement/cts/deployToolDependencies Type []string Mandatory no Default - @ui5/cli - @sap/ux-ui5-tooling - @ui5/logger - @ui5/fs Secret no Configuration scope \u2612 parameter \u2612 general \u2612 steps \u2612 stages Resource references none description \u00b6 The description of the application. The description is only taken into account for a new upload. In case of an update the description will not be updated. back to overview Scope Details Aliases applicationDescription Type string Mandatory no Default Deployed with Piper based on SAP Fiori tools Secret no Configuration scope \u2612 parameter \u2612 general \u2612 steps \u2612 stages Resource references none dockerEnvVars \u00b6 Environment variables to set in the container, e.g. [http_proxy: \"proxy:8080\"]. back to overview Scope Details Aliases - Type map[string]string Mandatory no Default Secret no Configuration scope \u2612 parameter \u2612 general \u2612 steps \u2612 stages Resource references none dockerImage \u00b6 Name of the docker image that should be used. If empty, Docker is not used and the command is executed directly on the Jenkins system. back to overview Scope Details Aliases - Type string Mandatory no Default node Secret no Configuration scope \u2612 parameter \u2612 general \u2612 steps \u2612 stages Resource references none dockerName \u00b6 Kubernetes only: Name of the container launching dockerImage. SideCar only: Name of the container in local network. back to overview Scope Details Aliases - Type string Mandatory no Default fiori-client Secret no Configuration scope \u2612 parameter \u2612 general \u2612 steps \u2612 stages Resource references none dockerOptions \u00b6 Docker options to be set when starting the container. back to overview Scope Details Aliases - Type []string Mandatory no Default Secret no Configuration scope \u2612 parameter \u2612 general \u2612 steps \u2612 stages Resource references none dockerPullImage \u00b6 Set this to 'false' to bypass a docker image pull. Useful during development process. Allows testing of images which are available in the local registry only. back to overview Scope Details Aliases - Type bool Mandatory no Default true Possible values - true - false Secret no Configuration scope \u2612 parameter \u2612 general \u2612 steps \u2612 stages Resource references none dockerVolumeBind \u00b6 Jenkins-specific: Used for proper environment setup. Volumes that should be mounted into the docker container. back to overview Scope Details Aliases - Type map[string]string Mandatory no Default Secret no Configuration scope \u2612 parameter \u2612 general \u2612 steps \u2612 stages Resource references none dockerWorkspace \u00b6 Jenkins-specific: Used for proper environment setup. Kubernetes only: Specifies a dedicated user home directory for the container which will be passed as value for environment variable HOME . back to overview Scope Details Aliases - Type string Mandatory no Default Secret no Configuration scope \u2612 parameter \u2612 general \u2612 steps \u2612 stages Resource references none endpoint \u00b6 The ODATA service endpoint: https:// : back to overview Scope Details Aliases - changeManagement/endpoint - changeManagement/cts/endpoint Type string Mandatory no Default $PIPER_endpoint (if set) Secret no Configuration scope \u2612 parameter \u2612 general \u2612 steps \u2612 stages Resource references none npmInstallOpts \u00b6 List of additional installation options for the npm install call. -g , --global is always assumed. Can be used for e.g. providing custom registries ( --registry https://your.registry.com ) or for providing the verbose flag ( --verbose ) for troubleshooting back to overview Scope Details Aliases - changeManagement/npmInstallOpts - changeManagement/cts/npmInstallOpts Type []string Mandatory no Default $PIPER_npmInstallOpts (if set) Secret no Configuration scope \u2612 parameter \u2612 general \u2612 steps \u2612 stages Resource references none osDeployUser \u00b6 Docker image user performing the deployment back to overview Scope Details Aliases - changeManagement/osDeployUser - changeManagement/cts/osDeployUser Type string Mandatory no Default node Secret no Configuration scope \u2612 parameter \u2612 general \u2612 steps \u2612 stages Resource references none password \u00b6 Service user password for uploading to the SAPUI5 ABAP repository back to overview Scope Details Aliases - Type string Mandatory yes Default $PIPER_password (if set) Secret yes Configuration scope \u2612 parameter \u2610 general \u2610 steps \u2610 stages Resource references none script \u00b6 The common script environment of the Jenkinsfile running. Typically the reference to the script calling the pipeline step is provided with the this parameter, as in script: this . This allows the function to access the commonPipelineEnvironment for retrieving, e.g. configuration parameters. back to overview Scope Details Aliases - Type Jenkins Script Mandatory yes Default Secret no Configuration scope \u2610 parameter \u2610 general \u2610 steps \u2610 stages Resource references none transportRequestId \u00b6 ID of the transport request to which the UI5 application is uploaded back to overview Scope Details Aliases - Type string Mandatory yes Default $PIPER_transportRequestId (if set) Secret no Configuration scope \u2612 parameter \u2612 general \u2612 steps \u2612 stages Resource references commonPipelineEnvironment : reference to: custom/transportRequestId username \u00b6 Service user for uploading to the SAPUI5 ABAP repository back to overview Scope Details Aliases - Type string Mandatory yes Default $PIPER_username (if set) Secret yes Configuration scope \u2612 parameter \u2612 general \u2612 steps \u2612 stages Resource references none verbose \u00b6 verbose output back to overview Scope Details Aliases - Type bool Mandatory no Default false Possible values - true - false Secret no Configuration scope \u2612 parameter \u2612 general \u2612 steps \u2612 stages Resource references none uploadCredentialsId \u00b6 Jenkins 'Username with password' credentials ID containing user and password to authenticate against the ABAP system. back to overview Scope Details Aliases changeManagement/credentialsId Type string Configuration scope \u2612 parameter \u2612 general \u2612 steps \u2612 stages Example \u00b6 # config.yaml steps : transportRequestUploadCTS : changeManagement : credentialsId : 'CTS_CREDENTIALS_ID' endpoint : 'https://example.org' client : '001' abapPackage : 'PACK' applicationName : 'APP' // pipeline script stage ( 'Init' ) { transportRequestReqIDFromGit ( script: this ) } stage ( 'Build' ) { npmExecuteScripts ( script: this , runScripts: [ 'build' ]) } stage ( 'Upload' ) { transportRequestUploadCTS ( script: this ) }","title":"transportRequestUploadCTS"},{"location":"steps/transportRequestUploadCTS/#transportrequestuploadcts","text":"This step uploads an UI5 application to the SAPUI5 ABAP repository.","title":"transportRequestUploadCTS"},{"location":"steps/transportRequestUploadCTS/#description","text":"This step uploads an UI5 application from your project folder to the SAPUI5 ABAP repository of the SAPUI5 ABAP back-end infrastructure using the SAPUI5 Repository OData service. It processes the results of the ui5 build command of the SAPUI5 toolset.","title":"Description"},{"location":"steps/transportRequestUploadCTS/#usage","text":"We recommend to define values of step parameters via .pipeline/config.yml file . In this case, calling the step is essentially reduced to defining the step name. Calling the step can be done either in an orchestrator specific way (e.g. via a Jenkins library step) or on the command line. Jenkins Command Line library ( 'piper-lib-os' ) transportRequestUploadCTS script: this piper transportRequestUploadCTS","title":"Usage"},{"location":"steps/transportRequestUploadCTS/#outputs","text":"Output type Details commonPipelineEnvironment custom/transportRequestId","title":"Outputs"},{"location":"steps/transportRequestUploadCTS/#prerequisites","text":"You have installed the SAP component SAP_UI 7.53 or higher on your ABAP system. You have enabled the OData Service to load data to the SAPUI5 ABAP repository . You have the S_DEVELOP authorization to perform operations in your SAPUI5 ABAP repository. You have created a transport request on the ABAP system, which is the target container of the SAPUI5 application for your upload.","title":"Prerequisites"},{"location":"steps/transportRequestUploadCTS/#setting-up-an-upload-client","text":"The step transportRequestUploadCTS uses the Node.js -based SAP Fiori tools to upload your SAPUI5 application to the UI5 repository service of your ABAP back-end infrastructure. It performs the deployment command Fiori deploy on a Docker image. By default, a plain node.js Docker image is pulled and equipped with the SAPUI5 toolset during runtime of the pipeline. Alternatively, you can provide your own, fully equipped Docker image. This speeds up the upload process, but requires you to maintain and provision the image on a Docker registry.","title":"Setting Up an Upload Client"},{"location":"steps/transportRequestUploadCTS/#creating-a-fully-equipped-docker-image","text":"To create an own Docker image with the SAP Fiori tools , proceed as follows: Create a node.js based Docker image with the SAP Fiori tools installed: FROM node USER root RUN npm install -global @ui5/cli @sap/ux-ui5-tooling @ui5/logger @ui5/fs USER node /bin/bash docker build -t my/fiori-node . Push your image to your private Docker Hub registry : /bin/bash docker push my/fiori-node Add the following content to your config.yml file: steps : transportRequestUploadCTS : dockerImage : 'my/fiori-node' deployToolDependencies : []","title":"Creating a Fully Equipped Docker Image"},{"location":"steps/transportRequestUploadCTS/#building-an-sapui5-application","text":"Build your SAPUI5 application with the build command of the SAPUI5 toolset and use the step npmExecuteScripts to run the build command. Proceed as follows to do so: Configure the steps in the package.json file of your project as follows: { ... \"scripts\" : { \"start\" : \"ui5 serve\" , \"test\" : \"npm run lint\" , \"build\" : \"ui5 build --clean-dest\" , ... }, \"dependencies\" : {}, \"devDependencies\" : { \"@ui5/cli\" : \"^2.11.2\" , ... } } Configure the execution step in the pipeline as follows: stage ( 'Build' ) { npmExecuteScripts ( script: this , runScripts: [ 'build' ]) } Note: Do not use the mtaBuild step. The MTA Build Tool mta is dedicated to the SAP Business Technology Platform. It does neither create the expected dist folder nor the compliant content.","title":"Building an SAPUI5 Application"},{"location":"steps/transportRequestUploadCTS/#uploading-an-sapui5-application","text":"The Fiori toolset uses the ODATA service to upload your UI5 application to the SAPUI5 ABAP repository. It controls access by Basic Authentication (user/password based authentication). Note: Do not upload your application to SAP Business Technology Platform. The SAP BTP does not support Basic Authentication . Note: Use an HTTPS endpoint to ensure the encryption of your credentials.","title":"Uploading an SAPUI5 Application"},{"location":"steps/transportRequestUploadCTS/#specifying-the-transport-request","text":"The target of the upload is a transport request, identified by an identifier (ID). The step transportRequestUploadCTS allows you to set the ID by parameter. Alternatively, you can pass the ID through the parameter commonPipelineEnvironment . For example, by performing a step that generates the ID or obtains it differently. For more information, see transportRequestReqIDFromGit .","title":"Specifying the Transport Request"},{"location":"steps/transportRequestUploadCTS/#adding-a-parameter","text":"A parameterized pipeline allows you to specify the ID with the launch of each build instead of entering it statically into the pipeline. transportRequestUploadCTS ( script: this , transportRequestId: $ { TRANSPORT_REQUEST_ID }, ... ) The Jenkins pipeline input step allows you to specify the ID at runtime of the pipeline. def ids = input ( message: \"Upload?\" , parameters: [ string ( name: 'TRANSPORT_REQUEST_ID' , description: 'Transport Request ID' ) ] ) transportRequestUploadCTS ( script: this , transportRequestId: ids [ 'TRANSPORT_REQUEST_ID' ], ... )","title":"Adding a Parameter"},{"location":"steps/transportRequestUploadCTS/#common-pipeline-environment","text":"Use the step transportRequestReqIDFromGit to obtain the transportRequestId value from your Git commit messages. This step extracts the ID from the commit messages of your project repository and enters it into the commonPipelineEnvironment . In turn, the upload step transportRequestUploadCTS picks it up from there. transportRequestReqIDFromGit ( script: this ) transportRequestUploadCTS ( script: this , ... )","title":"Common Pipeline Environment"},{"location":"steps/transportRequestUploadCTS/#general-purpose-pipeline-release-stage","text":"The step can also be configured via General Purpose Pipeline in Release stage using the config.yml as follows: stages: Release: transportRequestUploadCTS: true This will initialize the step within the Release stage of the pipeline and will upload the desired application (SAPUI5/OPENUI5) to the SAPUI5 ABAP repository.","title":"General Purpose Pipeline Release Stage"},{"location":"steps/transportRequestUploadCTS/#parameters","text":"","title":"Parameters"},{"location":"steps/transportRequestUploadCTS/#overview-step","text":"Name Mandatory Additional information abapPackage yes applicationName yes password (yes) pass via ENV or Jenkins credentials script (yes) reference to Jenkins main pipeline script transportRequestId yes username (yes) pass via ENV or Jenkins credentials client no deployConfigFile no deployToolDependencies no description no endpoint no npmInstallOpts no osDeployUser no verbose no activates debug output","title":"Overview - Step"},{"location":"steps/transportRequestUploadCTS/#overview-execution-environment","text":"Orchestrator-specific only These parameters are relevant for orchestrator usage and not considered when using the command line option. Name Mandatory Additional information containerCommand no containerShell no dockerEnvVars no dockerImage no dockerName no dockerOptions no dockerPullImage no dockerVolumeBind no dockerWorkspace no","title":"Overview - Execution Environment"},{"location":"steps/transportRequestUploadCTS/#details","text":"","title":"Details"},{"location":"steps/transportRequestUploadCTS/#abappackage","text":"ABAP package name of the UI5 application back to overview Scope Details Aliases - Type string Mandatory yes Default $PIPER_abapPackage (if set) Secret no Configuration scope \u2612 parameter \u2612 general \u2612 steps \u2612 stages Resource references none","title":"abapPackage"},{"location":"steps/transportRequestUploadCTS/#applicationname","text":"Name of the UI5 application back to overview Scope Details Aliases - Type string Mandatory yes Default $PIPER_applicationName (if set) Secret no Configuration scope \u2612 parameter \u2612 general \u2612 steps \u2612 stages Resource references none","title":"applicationName"},{"location":"steps/transportRequestUploadCTS/#client","text":"The ABAP client back to overview Scope Details Aliases - changeManagement/client - changeManagement/cts/client Type string Mandatory no Default $PIPER_client (if set) Secret no Configuration scope \u2612 parameter \u2612 general \u2612 steps \u2612 stages Resource references none","title":"client"},{"location":"steps/transportRequestUploadCTS/#containercommand","text":"Jenkins-specific: Used for proper environment setup. Kubernetes only: Allows to specify start command for container created with dockerImage parameter to overwrite Piper default (/usr/bin/tail -f /dev/null). back to overview Scope Details Aliases - Type string Mandatory no Default Secret no Configuration scope \u2612 parameter \u2612 general \u2612 steps \u2612 stages Resource references none","title":"containerCommand"},{"location":"steps/transportRequestUploadCTS/#containershell","text":"Jenkins-specific: Used for proper environment setup. Allows to specify the shell to be executed for container with containerName. back to overview Scope Details Aliases - Type string Mandatory no Default Secret no Configuration scope \u2612 parameter \u2612 general \u2612 steps \u2612 stages Resource references none","title":"containerShell"},{"location":"steps/transportRequestUploadCTS/#deployconfigfile","text":"Configuration file for the fiori deployment back to overview Scope Details Aliases - changeManagement/deployConfigFile - changeManagement/cts/deployConfigFile Type string Mandatory no Default ui5-deploy.yaml Secret no Configuration scope \u2612 parameter \u2612 general \u2612 steps \u2612 stages Resource references none","title":"deployConfigFile"},{"location":"steps/transportRequestUploadCTS/#deploytooldependencies","text":"List of additional dependencies to fiori related packages. By default a standard node docker image is used on which the dependencies are installed. Provide an empty list, in case your docker image already contains the required dependencies back to overview Scope Details Aliases - changeManagement/deployToolDependencies - changeManagement/cts/deployToolDependencies Type []string Mandatory no Default - @ui5/cli - @sap/ux-ui5-tooling - @ui5/logger - @ui5/fs Secret no Configuration scope \u2612 parameter \u2612 general \u2612 steps \u2612 stages Resource references none","title":"deployToolDependencies"},{"location":"steps/transportRequestUploadCTS/#description_1","text":"The description of the application. The description is only taken into account for a new upload. In case of an update the description will not be updated. back to overview Scope Details Aliases applicationDescription Type string Mandatory no Default Deployed with Piper based on SAP Fiori tools Secret no Configuration scope \u2612 parameter \u2612 general \u2612 steps \u2612 stages Resource references none","title":"description"},{"location":"steps/transportRequestUploadCTS/#dockerenvvars","text":"Environment variables to set in the container, e.g. [http_proxy: \"proxy:8080\"]. back to overview Scope Details Aliases - Type map[string]string Mandatory no Default Secret no Configuration scope \u2612 parameter \u2612 general \u2612 steps \u2612 stages Resource references none","title":"dockerEnvVars"},{"location":"steps/transportRequestUploadCTS/#dockerimage","text":"Name of the docker image that should be used. If empty, Docker is not used and the command is executed directly on the Jenkins system. back to overview Scope Details Aliases - Type string Mandatory no Default node Secret no Configuration scope \u2612 parameter \u2612 general \u2612 steps \u2612 stages Resource references none","title":"dockerImage"},{"location":"steps/transportRequestUploadCTS/#dockername","text":"Kubernetes only: Name of the container launching dockerImage. SideCar only: Name of the container in local network. back to overview Scope Details Aliases - Type string Mandatory no Default fiori-client Secret no Configuration scope \u2612 parameter \u2612 general \u2612 steps \u2612 stages Resource references none","title":"dockerName"},{"location":"steps/transportRequestUploadCTS/#dockeroptions","text":"Docker options to be set when starting the container. back to overview Scope Details Aliases - Type []string Mandatory no Default Secret no Configuration scope \u2612 parameter \u2612 general \u2612 steps \u2612 stages Resource references none","title":"dockerOptions"},{"location":"steps/transportRequestUploadCTS/#dockerpullimage","text":"Set this to 'false' to bypass a docker image pull. Useful during development process. Allows testing of images which are available in the local registry only. back to overview Scope Details Aliases - Type bool Mandatory no Default true Possible values - true - false Secret no Configuration scope \u2612 parameter \u2612 general \u2612 steps \u2612 stages Resource references none","title":"dockerPullImage"},{"location":"steps/transportRequestUploadCTS/#dockervolumebind","text":"Jenkins-specific: Used for proper environment setup. Volumes that should be mounted into the docker container. back to overview Scope Details Aliases - Type map[string]string Mandatory no Default Secret no Configuration scope \u2612 parameter \u2612 general \u2612 steps \u2612 stages Resource references none","title":"dockerVolumeBind"},{"location":"steps/transportRequestUploadCTS/#dockerworkspace","text":"Jenkins-specific: Used for proper environment setup. Kubernetes only: Specifies a dedicated user home directory for the container which will be passed as value for environment variable HOME . back to overview Scope Details Aliases - Type string Mandatory no Default Secret no Configuration scope \u2612 parameter \u2612 general \u2612 steps \u2612 stages Resource references none","title":"dockerWorkspace"},{"location":"steps/transportRequestUploadCTS/#endpoint","text":"The ODATA service endpoint: https:// : back to overview Scope Details Aliases - changeManagement/endpoint - changeManagement/cts/endpoint Type string Mandatory no Default $PIPER_endpoint (if set) Secret no Configuration scope \u2612 parameter \u2612 general \u2612 steps \u2612 stages Resource references none","title":"endpoint"},{"location":"steps/transportRequestUploadCTS/#npminstallopts","text":"List of additional installation options for the npm install call. -g , --global is always assumed. Can be used for e.g. providing custom registries ( --registry https://your.registry.com ) or for providing the verbose flag ( --verbose ) for troubleshooting back to overview Scope Details Aliases - changeManagement/npmInstallOpts - changeManagement/cts/npmInstallOpts Type []string Mandatory no Default $PIPER_npmInstallOpts (if set) Secret no Configuration scope \u2612 parameter \u2612 general \u2612 steps \u2612 stages Resource references none","title":"npmInstallOpts"},{"location":"steps/transportRequestUploadCTS/#osdeployuser","text":"Docker image user performing the deployment back to overview Scope Details Aliases - changeManagement/osDeployUser - changeManagement/cts/osDeployUser Type string Mandatory no Default node Secret no Configuration scope \u2612 parameter \u2612 general \u2612 steps \u2612 stages Resource references none","title":"osDeployUser"},{"location":"steps/transportRequestUploadCTS/#password","text":"Service user password for uploading to the SAPUI5 ABAP repository back to overview Scope Details Aliases - Type string Mandatory yes Default $PIPER_password (if set) Secret yes Configuration scope \u2612 parameter \u2610 general \u2610 steps \u2610 stages Resource references none","title":"password"},{"location":"steps/transportRequestUploadCTS/#script","text":"The common script environment of the Jenkinsfile running. Typically the reference to the script calling the pipeline step is provided with the this parameter, as in script: this . This allows the function to access the commonPipelineEnvironment for retrieving, e.g. configuration parameters. back to overview Scope Details Aliases - Type Jenkins Script Mandatory yes Default Secret no Configuration scope \u2610 parameter \u2610 general \u2610 steps \u2610 stages Resource references none","title":"script"},{"location":"steps/transportRequestUploadCTS/#transportrequestid","text":"ID of the transport request to which the UI5 application is uploaded back to overview Scope Details Aliases - Type string Mandatory yes Default $PIPER_transportRequestId (if set) Secret no Configuration scope \u2612 parameter \u2612 general \u2612 steps \u2612 stages Resource references commonPipelineEnvironment : reference to: custom/transportRequestId","title":"transportRequestId"},{"location":"steps/transportRequestUploadCTS/#username","text":"Service user for uploading to the SAPUI5 ABAP repository back to overview Scope Details Aliases - Type string Mandatory yes Default $PIPER_username (if set) Secret yes Configuration scope \u2612 parameter \u2612 general \u2612 steps \u2612 stages Resource references none","title":"username"},{"location":"steps/transportRequestUploadCTS/#verbose","text":"verbose output back to overview Scope Details Aliases - Type bool Mandatory no Default false Possible values - true - false Secret no Configuration scope \u2612 parameter \u2612 general \u2612 steps \u2612 stages Resource references none","title":"verbose"},{"location":"steps/transportRequestUploadCTS/#uploadcredentialsid","text":"Jenkins 'Username with password' credentials ID containing user and password to authenticate against the ABAP system. back to overview Scope Details Aliases changeManagement/credentialsId Type string Configuration scope \u2612 parameter \u2612 general \u2612 steps \u2612 stages","title":"uploadCredentialsId"},{"location":"steps/transportRequestUploadCTS/#example","text":"# config.yaml steps : transportRequestUploadCTS : changeManagement : credentialsId : 'CTS_CREDENTIALS_ID' endpoint : 'https://example.org' client : '001' abapPackage : 'PACK' applicationName : 'APP' // pipeline script stage ( 'Init' ) { transportRequestReqIDFromGit ( script: this ) } stage ( 'Build' ) { npmExecuteScripts ( script: this , runScripts: [ 'build' ]) } stage ( 'Upload' ) { transportRequestUploadCTS ( script: this ) }","title":"Example"},{"location":"steps/transportRequestUploadFile/","text":"transportRequestUploadFile \u00b6 Description \u00b6 Uploads a file to a Transport Request. Note: This step is deprecated. Use the transport type specific steps instead. Type Step SOLMAN transportRequestUploadSOLMAN RFC transportRequestUploadRFC CTS transportRequestUploadCTS You can keep most of the step specific configuration parameters in your configuration file config.yml untouched. The new steps support the old naming convention. However, it is recommended to adjust your parameters to the new steps. Following parameters are not supported anymore. Adjust as indicated. Unsupported Parameter Change Notice changeManagement/ <type> /docker/envVars Use dockerEnvVars instead. changeManagement/ <type> /docker/image Use dockerImage instead. changeManagement/ <type> /docker/options Use dockerOptions instead. changeManagement/ <type> /docker/pullImage Use dockerPullImage instead. changeManagement/git/format This parameter has been dropped. Make sure that your change document IDs and transport request IDs are part of the Git commit message body. general : changeManagement : type : 'RFC' # old rfc : docker : image : 'my/rfc-client' #new steps : transportRequestUploadRFC : dockerImage : 'my/rfc-client' Note: The new steps do not comprise the retrieval of the change document ID and the transport request ID from the Git repository. Use the steps transportRequestDocIDFromGit and transportRequestReqIDFromGit instead. Parameters \u00b6 name mandatory default possible values abapPackage yes acceptUnixStyleLineEndings no true applicationDescription yes applicationId yes applicationName yes applicationUrl yes changeDocumentId yes changeManagement/changeDocumentLabel no ChangeDocument\\s?: regex pattern changeManagement/client yes changeManagement/clientOpts no `` changeManagement/credentialsId no CM changeManagement/cts/deployConfigFile no ui5-deploy.yaml changeManagement/cts/deployToolDependencies no [@ui5/cli, @sap/ux-ui5-tooling, @ui5/logger, @ui5/fs] changeManagement/cts/nodeDocker/image no node changeManagement/cts/npmInstallOpts no changeManagement/cts/osDeployUser no node changeManagement/endpoint yes changeManagement/git/format no %b see git log --help changeManagement/git/from no origin/master changeManagement/git/to no HEAD changeManagement/rfc/developmentClient yes changeManagement/rfc/developmentInstance yes changeManagement/rfc/docker/envVars no [:] changeManagement/rfc/docker/image no rfc changeManagement/rfc/docker/options no [] changeManagement/rfc/docker/pullImage no true changeManagement/transportRequestLabel no TransportRequest\\s?: changeManagement/type no NONE SOLMAN , CTS , RFC codePage no UTF-8 failOnWarning no true filePath yes script yes transportRequestId yes verbose no false abapPackage - The ABAP package name of your application. acceptUnixStyleLineEndings - If unix style line endings should be accepted. Only for RFC . applicationDescription - The application description, RFC and CTS only. For CTS : the desription is only taken into account for a new upload. In case of an update the description will not be updated. applicationId - The id of the application. Only for SOLMAN . applicationName - The name of the application. RFC and CTS only. applicationUrl - The URL where to find the UI5 package to upload to the transport request. Only for RFC . changeDocumentId - The id of the change document to that the transport request is bound to. Typically this value is provided via commit message in the commit history. Only for SOLMAN . changeManagement/changeDocumentLabel - A pattern used for identifying lines holding the change document id. changeManagement/client - The ABAP client. Only for CTS changeManagement/clientOpts - Additional options for cm command line client, e.g. JAVA_OPTS. changeManagement/credentialsId - The id of the credentials to connect to the Solution Manager. The credentials needs to be maintained on Jenkins. changeManagement/cts/deployConfigFile - The file handed over to fiori deploy with flag -c --config . changeManagement/cts/deployToolDependencies - By default we use a standard node docker iamge and prepare some fiori related packages performing the deployment. The additional dependencies can be provided here. In case you use an already prepared docker image which contains the required dependencies, the empty list can be provided here. Caused hereby installing additional dependencies will be skipped. changeManagement/cts/nodeDocker/image - Some CTS related transport related steps are cm_client based, others are node based. For the node based steps the docker image is specified here. changeManagement/cts/npmInstallOpts - A list containing additional options for the npm install call. -g , --global is always assumed. Can be used for e.g. providing custom registries ( --registry https://your.registry.com ) or for providing the verbose flag ( --verbose ) for troubleshooting. changeManagement/cts/osDeployUser - By default we use a standard node docker image and prepare some fiori related packages before performing the deployment. For that we need to launch the image with root privileges. After that, before actually performing the deployment we swith to a non root user. This user can be specified here. changeManagement/endpoint - The service endpoint, e.g. Solution Manager, ABAP System. changeManagement/git/format - Specifies what part of the commit is scanned. By default the body of the commit message is scanned. changeManagement/git/from - The starting point for retrieving the change document id. changeManagement/git/to - The end point for retrieving the change document id. changeManagement/rfc/developmentClient - AS ABAP client number. Only for RFC . changeManagement/rfc/developmentInstance - AS ABAP instance number. Only for RFC . changeManagement/rfc/docker/envVars - changeManagement/rfc/docker/image - changeManagement/rfc/docker/options - changeManagement/rfc/docker/pullImage - changeManagement/transportRequestLabel - A pattern used for identifying lines holding the transport request id. changeManagement/type - Defines where the transport request is created, e.g. SAP Solution Manager, ABAP System. codePage - The code page of your ABAP system. E.g. UTF-8. failOnWarning - filePath - The path of the file to upload, Only for SOLMAN . script - The common script environment of the Jenkinsfile running. Typically the reference to the script calling the pipeline step is provided with the this parameter, as in script: this . This allows the function to access the commonPipelineEnvironment for retrieving, e.g. configuration parameters. transportRequestId - The id of the transport request to upload the file. This parameter is only taken into account when provided via signature to the step. verbose - Provides additional details. Only for RFC . Step configuration \u00b6 We recommend to define values of step parameters via config.yml file . In following sections of the config.yml the configuration is possible: parameter general step/stage abapPackage X acceptUnixStyleLineEndings X applicationDescription X applicationId X applicationName X applicationUrl X changeDocumentId changeManagement/changeDocumentLabel X X changeManagement/client X X changeManagement/clientOpts X X changeManagement/credentialsId X X changeManagement/cts/deployConfigFile X X changeManagement/cts/deployToolDependencies X X changeManagement/cts/nodeDocker/image X X changeManagement/cts/npmInstallOpts X X changeManagement/cts/osDeployUser X X changeManagement/endpoint X X changeManagement/git/format X X changeManagement/git/from X X changeManagement/git/to X X changeManagement/rfc/developmentClient X X changeManagement/rfc/developmentInstance X X changeManagement/rfc/docker/envVars X X changeManagement/rfc/docker/image X X changeManagement/rfc/docker/options X X changeManagement/rfc/docker/pullImage X X changeManagement/transportRequestLabel X X changeManagement/type X X codePage X failOnWarning filePath X script transportRequestId verbose X Dependencies \u00b6 The step depends on the following Jenkins plugins credentials-binding docker kubernetes pipeline-utility-steps ssh-agent workflow-basic-steps workflow-cps-global-lib workflow-durable-task-step The kubernetes plugin is only used if running in a kubernetes environment. Transitive dependencies are omitted. The list might be incomplete. Consider using the ppiper/jenkins-master docker image. This images comes with preinstalled plugins. The step is configured using a customer configuration file provided as resource in an custom shared library. @Library ( 'piper-lib-os@master' ) _ // the shared lib containing the additional configuration // needs to be configured in Jenkins @Library ( 'foo@master' ) __ // inside the shared lib denoted by 'foo' the additional configuration file // needs to be located under 'resources' ('resoures/myConfig.yml') prepareDefaultValues script: this , customDefaults: 'myConfig.yml' Example content of 'resources/myConfig.yml' in branch 'master' of the repository denoted by 'foo' : general : changeManagement : changeDocumentLabel : 'ChangeDocument\\s?:' cmClientOpts : '-Djavax.net.ssl.trustStore=<path to truststore>' credentialsId : 'CM' type : 'SOLMAN' endpoint : 'https://example.org/cm' git : from : 'HEAD~1' to : 'HEAD' format : '%b' The properties configured in section 'general/changeManagement' are shared between all change management related steps. The properties can also be configured on a per-step basis: [ ... ] steps : transportRequestUploadFile : applicationId : 'FOO' changeManagement : type : 'SOLMAN' endpoint : 'https://example.org/cm' [ ... ] The parameters can also be provided when the step is invoked. For examples see below. CTS Uploads \u00b6 In order to be able to upload the application, it is required to build the application, e.g. via npmExecuteScripts . The content of the app needs to be provided in a folder named dist in the root level of the project. Note: Do not use the mtaBuild step. The MTA Build Tool mta is dedicated to the SAP Business Technology Platform. It does neither create the expected dist folder nor the compliant content. Although the name of the step transportRequestUploadFile might suggest something else, in this case a folder needs to be provided. The application, which is provided in the dist folder is zipped and uploaded by the fiori toolset used for performing the upload. For CTS related uploads we use a node based toolset. When running in a docker environment a standard node image can be used. In this case the required deploy tool dependencies will be installed prior to the deploy. It is also possible to provide a docker image which already contains the required deploy tool dependencies ( config.changeManagement.cts.nodeDocker.image ). In this case an empty list needs to be provided as config.changeManagement.cts.deployToolDependencies . Using an already pre-configured docker image speeds-up the deployment step, but comes with the disadvantage of having to maintain and provision the corresponding docker image. When running in an environment without docker, it is recommanded to install the deploy tools manually on the system and to provide an empty list for the deploy tool dependencies ( config.changeManagement.cts.deployToolDependencies ). Examples \u00b6 Upload based on preconfigured image \u00b6 transportRequestUploadFile script: this , changeManagement: [ credentialsId: 'CRED_ID' , // credentials needs to be defined inside Jenkins type: 'CTS' , endpoint: 'https://example.org:8000' , client: '001' , cts: [ nodeDocker: [ image: 'docker-image-name' , pullImage: true , // needs to be set to false in case the image is // only available in the local docker cache (not recommended) ], npmInstallOpts: [], deployToolDependencies: [], // empty since we use an already preconfigured image ], ], applicationName: 'APP' , abapPackage: 'ABABPACKAGE' , transportRequestId: 'XXXK123456' , // can be omitted when resolved via commit history applicationDescription: 'An optional description' // only used in case a new application is deployed // description is not updated for re-deployments } Upload based on a standard node image \u00b6 transportRequestUploadFile script: this , changeManagement: [ credentialsId: 'CRED_ID' , // credentials needs to be defined inside Jenkins type: 'CTS' , endpoint: 'https://example.org:8000' , client: '001' , cts: [ npmInstallOpts: [ '--verbose' , // might be benefical for troubleshooting '--registry' , 'https://your.npmregistry.org/' , // an own registry can be specified here ], ], ], applicationName: 'APP' , abapPackage: 'ABABPACKAGE' , transportRequestId: 'XXXK123456' , // can be omitted when resolved via commit history applicationDescription: 'An optional description' // only used in case a new application is deployed // description is not updated for re-deployments } Exceptions \u00b6 IllegalArgumentException : If the change id is not provided ( SOLMAN only). If the transport request id is not provided. If the application id is not provided ( SOLMAN only). If the file path is not provided. AbortException : If the upload fails. Example \u00b6 // SOLMAN transportRequestUploadFile ( script: this , changeDocumentId: '001' , // typically provided via git commit history transportRequestId: '001' , // typically provided via git commit history applicationId: '001' , filePath: '/path' , changeManagement: [ type: 'SOLMAN' endpoint: 'https://example.org/cm' ] ) // CTS transportRequestUploadFile ( script: this , transportRequestId: '001' , // typically provided via git commit history changeManagement: [ type: 'CTS' endpoint: 'https://example.org/cm' , client: '099' , ], applicationName: 'myApp' , abapPackage: 'MYPACKAGE' , )","title":"transportRequestUploadFile"},{"location":"steps/transportRequestUploadFile/#transportrequestuploadfile","text":"","title":"transportRequestUploadFile"},{"location":"steps/transportRequestUploadFile/#description","text":"Uploads a file to a Transport Request. Note: This step is deprecated. Use the transport type specific steps instead. Type Step SOLMAN transportRequestUploadSOLMAN RFC transportRequestUploadRFC CTS transportRequestUploadCTS You can keep most of the step specific configuration parameters in your configuration file config.yml untouched. The new steps support the old naming convention. However, it is recommended to adjust your parameters to the new steps. Following parameters are not supported anymore. Adjust as indicated. Unsupported Parameter Change Notice changeManagement/ <type> /docker/envVars Use dockerEnvVars instead. changeManagement/ <type> /docker/image Use dockerImage instead. changeManagement/ <type> /docker/options Use dockerOptions instead. changeManagement/ <type> /docker/pullImage Use dockerPullImage instead. changeManagement/git/format This parameter has been dropped. Make sure that your change document IDs and transport request IDs are part of the Git commit message body. general : changeManagement : type : 'RFC' # old rfc : docker : image : 'my/rfc-client' #new steps : transportRequestUploadRFC : dockerImage : 'my/rfc-client' Note: The new steps do not comprise the retrieval of the change document ID and the transport request ID from the Git repository. Use the steps transportRequestDocIDFromGit and transportRequestReqIDFromGit instead.","title":"Description"},{"location":"steps/transportRequestUploadFile/#parameters","text":"name mandatory default possible values abapPackage yes acceptUnixStyleLineEndings no true applicationDescription yes applicationId yes applicationName yes applicationUrl yes changeDocumentId yes changeManagement/changeDocumentLabel no ChangeDocument\\s?: regex pattern changeManagement/client yes changeManagement/clientOpts no `` changeManagement/credentialsId no CM changeManagement/cts/deployConfigFile no ui5-deploy.yaml changeManagement/cts/deployToolDependencies no [@ui5/cli, @sap/ux-ui5-tooling, @ui5/logger, @ui5/fs] changeManagement/cts/nodeDocker/image no node changeManagement/cts/npmInstallOpts no changeManagement/cts/osDeployUser no node changeManagement/endpoint yes changeManagement/git/format no %b see git log --help changeManagement/git/from no origin/master changeManagement/git/to no HEAD changeManagement/rfc/developmentClient yes changeManagement/rfc/developmentInstance yes changeManagement/rfc/docker/envVars no [:] changeManagement/rfc/docker/image no rfc changeManagement/rfc/docker/options no [] changeManagement/rfc/docker/pullImage no true changeManagement/transportRequestLabel no TransportRequest\\s?: changeManagement/type no NONE SOLMAN , CTS , RFC codePage no UTF-8 failOnWarning no true filePath yes script yes transportRequestId yes verbose no false abapPackage - The ABAP package name of your application. acceptUnixStyleLineEndings - If unix style line endings should be accepted. Only for RFC . applicationDescription - The application description, RFC and CTS only. For CTS : the desription is only taken into account for a new upload. In case of an update the description will not be updated. applicationId - The id of the application. Only for SOLMAN . applicationName - The name of the application. RFC and CTS only. applicationUrl - The URL where to find the UI5 package to upload to the transport request. Only for RFC . changeDocumentId - The id of the change document to that the transport request is bound to. Typically this value is provided via commit message in the commit history. Only for SOLMAN . changeManagement/changeDocumentLabel - A pattern used for identifying lines holding the change document id. changeManagement/client - The ABAP client. Only for CTS changeManagement/clientOpts - Additional options for cm command line client, e.g. JAVA_OPTS. changeManagement/credentialsId - The id of the credentials to connect to the Solution Manager. The credentials needs to be maintained on Jenkins. changeManagement/cts/deployConfigFile - The file handed over to fiori deploy with flag -c --config . changeManagement/cts/deployToolDependencies - By default we use a standard node docker iamge and prepare some fiori related packages performing the deployment. The additional dependencies can be provided here. In case you use an already prepared docker image which contains the required dependencies, the empty list can be provided here. Caused hereby installing additional dependencies will be skipped. changeManagement/cts/nodeDocker/image - Some CTS related transport related steps are cm_client based, others are node based. For the node based steps the docker image is specified here. changeManagement/cts/npmInstallOpts - A list containing additional options for the npm install call. -g , --global is always assumed. Can be used for e.g. providing custom registries ( --registry https://your.registry.com ) or for providing the verbose flag ( --verbose ) for troubleshooting. changeManagement/cts/osDeployUser - By default we use a standard node docker image and prepare some fiori related packages before performing the deployment. For that we need to launch the image with root privileges. After that, before actually performing the deployment we swith to a non root user. This user can be specified here. changeManagement/endpoint - The service endpoint, e.g. Solution Manager, ABAP System. changeManagement/git/format - Specifies what part of the commit is scanned. By default the body of the commit message is scanned. changeManagement/git/from - The starting point for retrieving the change document id. changeManagement/git/to - The end point for retrieving the change document id. changeManagement/rfc/developmentClient - AS ABAP client number. Only for RFC . changeManagement/rfc/developmentInstance - AS ABAP instance number. Only for RFC . changeManagement/rfc/docker/envVars - changeManagement/rfc/docker/image - changeManagement/rfc/docker/options - changeManagement/rfc/docker/pullImage - changeManagement/transportRequestLabel - A pattern used for identifying lines holding the transport request id. changeManagement/type - Defines where the transport request is created, e.g. SAP Solution Manager, ABAP System. codePage - The code page of your ABAP system. E.g. UTF-8. failOnWarning - filePath - The path of the file to upload, Only for SOLMAN . script - The common script environment of the Jenkinsfile running. Typically the reference to the script calling the pipeline step is provided with the this parameter, as in script: this . This allows the function to access the commonPipelineEnvironment for retrieving, e.g. configuration parameters. transportRequestId - The id of the transport request to upload the file. This parameter is only taken into account when provided via signature to the step. verbose - Provides additional details. Only for RFC .","title":"Parameters"},{"location":"steps/transportRequestUploadFile/#step-configuration","text":"We recommend to define values of step parameters via config.yml file . In following sections of the config.yml the configuration is possible: parameter general step/stage abapPackage X acceptUnixStyleLineEndings X applicationDescription X applicationId X applicationName X applicationUrl X changeDocumentId changeManagement/changeDocumentLabel X X changeManagement/client X X changeManagement/clientOpts X X changeManagement/credentialsId X X changeManagement/cts/deployConfigFile X X changeManagement/cts/deployToolDependencies X X changeManagement/cts/nodeDocker/image X X changeManagement/cts/npmInstallOpts X X changeManagement/cts/osDeployUser X X changeManagement/endpoint X X changeManagement/git/format X X changeManagement/git/from X X changeManagement/git/to X X changeManagement/rfc/developmentClient X X changeManagement/rfc/developmentInstance X X changeManagement/rfc/docker/envVars X X changeManagement/rfc/docker/image X X changeManagement/rfc/docker/options X X changeManagement/rfc/docker/pullImage X X changeManagement/transportRequestLabel X X changeManagement/type X X codePage X failOnWarning filePath X script transportRequestId verbose X","title":"Step configuration"},{"location":"steps/transportRequestUploadFile/#dependencies","text":"The step depends on the following Jenkins plugins credentials-binding docker kubernetes pipeline-utility-steps ssh-agent workflow-basic-steps workflow-cps-global-lib workflow-durable-task-step The kubernetes plugin is only used if running in a kubernetes environment. Transitive dependencies are omitted. The list might be incomplete. Consider using the ppiper/jenkins-master docker image. This images comes with preinstalled plugins. The step is configured using a customer configuration file provided as resource in an custom shared library. @Library ( 'piper-lib-os@master' ) _ // the shared lib containing the additional configuration // needs to be configured in Jenkins @Library ( 'foo@master' ) __ // inside the shared lib denoted by 'foo' the additional configuration file // needs to be located under 'resources' ('resoures/myConfig.yml') prepareDefaultValues script: this , customDefaults: 'myConfig.yml' Example content of 'resources/myConfig.yml' in branch 'master' of the repository denoted by 'foo' : general : changeManagement : changeDocumentLabel : 'ChangeDocument\\s?:' cmClientOpts : '-Djavax.net.ssl.trustStore=<path to truststore>' credentialsId : 'CM' type : 'SOLMAN' endpoint : 'https://example.org/cm' git : from : 'HEAD~1' to : 'HEAD' format : '%b' The properties configured in section 'general/changeManagement' are shared between all change management related steps. The properties can also be configured on a per-step basis: [ ... ] steps : transportRequestUploadFile : applicationId : 'FOO' changeManagement : type : 'SOLMAN' endpoint : 'https://example.org/cm' [ ... ] The parameters can also be provided when the step is invoked. For examples see below.","title":"Dependencies"},{"location":"steps/transportRequestUploadFile/#cts-uploads","text":"In order to be able to upload the application, it is required to build the application, e.g. via npmExecuteScripts . The content of the app needs to be provided in a folder named dist in the root level of the project. Note: Do not use the mtaBuild step. The MTA Build Tool mta is dedicated to the SAP Business Technology Platform. It does neither create the expected dist folder nor the compliant content. Although the name of the step transportRequestUploadFile might suggest something else, in this case a folder needs to be provided. The application, which is provided in the dist folder is zipped and uploaded by the fiori toolset used for performing the upload. For CTS related uploads we use a node based toolset. When running in a docker environment a standard node image can be used. In this case the required deploy tool dependencies will be installed prior to the deploy. It is also possible to provide a docker image which already contains the required deploy tool dependencies ( config.changeManagement.cts.nodeDocker.image ). In this case an empty list needs to be provided as config.changeManagement.cts.deployToolDependencies . Using an already pre-configured docker image speeds-up the deployment step, but comes with the disadvantage of having to maintain and provision the corresponding docker image. When running in an environment without docker, it is recommanded to install the deploy tools manually on the system and to provide an empty list for the deploy tool dependencies ( config.changeManagement.cts.deployToolDependencies ).","title":"CTS Uploads"},{"location":"steps/transportRequestUploadFile/#examples","text":"","title":"Examples"},{"location":"steps/transportRequestUploadFile/#upload-based-on-preconfigured-image","text":"transportRequestUploadFile script: this , changeManagement: [ credentialsId: 'CRED_ID' , // credentials needs to be defined inside Jenkins type: 'CTS' , endpoint: 'https://example.org:8000' , client: '001' , cts: [ nodeDocker: [ image: 'docker-image-name' , pullImage: true , // needs to be set to false in case the image is // only available in the local docker cache (not recommended) ], npmInstallOpts: [], deployToolDependencies: [], // empty since we use an already preconfigured image ], ], applicationName: 'APP' , abapPackage: 'ABABPACKAGE' , transportRequestId: 'XXXK123456' , // can be omitted when resolved via commit history applicationDescription: 'An optional description' // only used in case a new application is deployed // description is not updated for re-deployments }","title":"Upload based on preconfigured image"},{"location":"steps/transportRequestUploadFile/#upload-based-on-a-standard-node-image","text":"transportRequestUploadFile script: this , changeManagement: [ credentialsId: 'CRED_ID' , // credentials needs to be defined inside Jenkins type: 'CTS' , endpoint: 'https://example.org:8000' , client: '001' , cts: [ npmInstallOpts: [ '--verbose' , // might be benefical for troubleshooting '--registry' , 'https://your.npmregistry.org/' , // an own registry can be specified here ], ], ], applicationName: 'APP' , abapPackage: 'ABABPACKAGE' , transportRequestId: 'XXXK123456' , // can be omitted when resolved via commit history applicationDescription: 'An optional description' // only used in case a new application is deployed // description is not updated for re-deployments }","title":"Upload based on a standard node image"},{"location":"steps/transportRequestUploadFile/#exceptions","text":"IllegalArgumentException : If the change id is not provided ( SOLMAN only). If the transport request id is not provided. If the application id is not provided ( SOLMAN only). If the file path is not provided. AbortException : If the upload fails.","title":"Exceptions"},{"location":"steps/transportRequestUploadFile/#example","text":"// SOLMAN transportRequestUploadFile ( script: this , changeDocumentId: '001' , // typically provided via git commit history transportRequestId: '001' , // typically provided via git commit history applicationId: '001' , filePath: '/path' , changeManagement: [ type: 'SOLMAN' endpoint: 'https://example.org/cm' ] ) // CTS transportRequestUploadFile ( script: this , transportRequestId: '001' , // typically provided via git commit history changeManagement: [ type: 'CTS' endpoint: 'https://example.org/cm' , client: '099' , ], applicationName: 'myApp' , abapPackage: 'MYPACKAGE' , )","title":"Example"},{"location":"steps/transportRequestUploadRFC/","text":"transportRequestUploadRFC \u00b6 This step uploads a UI5 application as ZIP file to the ABAP system via RFC connections. Description \u00b6 This step uploads a UI5 application as ZIP file to the ABAP system via RFC connections. Usage \u00b6 We recommend to define values of step parameters via .pipeline/config.yml file . In this case, calling the step is essentially reduced to defining the step name. Calling the step can be done either in an orchestrator specific way (e.g. via a Jenkins library step) or on the command line. Jenkins Command Line library ( 'piper-lib-os' ) transportRequestUploadRFC script: this piper transportRequestUploadRFC Outputs \u00b6 Output type Details commonPipelineEnvironment custom/transportRequestId Prerequisites \u00b6 You have enabled RFC on the ABAP system. You have a user account on the ABAP system where you have assigned the required roles for uploading via RFC. You have created a transport request on the ABAP system, which is the target container of the upload. RFC Client \u00b6 The RFC Client connects to your ABAP system using the SAP NetWeaver RFC SDK . For more information, see classical SAP connectivity technology RFC . To install an RFC library based Connector Client, proceed as follows: Create a Docker image as described in the Git repository devops-docker-images/node-rfc . Push your image to your private Docker Hub registry . Add the following to your config.yml file: steps : transportRequestUploadRFC : dockerImage : 'my/rfc-client' Specifying the Transport Request \u00b6 The target of the upload is a transport request, identified by an identifier (ID). The step transportRequestUploadRFC allows you to set the ID by parameter. Alternatively, you can pass the ID through the commonPipelineEnvironment . For example, by performing a step that generates the ID or obtains it differently. See transportRequestReqIDFromGit . Adding a Parameter \u00b6 A parameterized pipeline allows you to specify the ID with the launch of the build instead of entering it statically into the pipeline. transportRequestUploadRFC ( script: this , transportRequestId: $ { TRANSPORT_REQUEST_ID }, ... ) The Jenkins pipeline input step allows you to specify the ID at runtime of the pipeline. def ids = input ( message: \"Upload?\" , parameters: [ string ( name: 'TRANSPORT_REQUEST_ID' , description: 'Transport Request ID' ) ] ) transportRequestUploadRFC ( script: this , transportRequestId: ids [ 'TRANSPORT_REQUEST_ID' ], ... ) Common Pipeline Environment \u00b6 Use the step transportRequestReqIDFromGit to obtain the transportRequestId value from your Git commit messages. This step extracts the ID from the commit messages of your project repository and enters it into the commonPipelineEnvironment , in turn, the upload step transportRequestUploadRFC picks it up from there. transportRequestReqIDFromGit ( script: this ) transportRequestUploadRFC ( script: this , ... ) Parameters \u00b6 Overview - Step \u00b6 Name Mandatory Additional information abapPackage yes applicationName yes applicationUrl yes endpoint yes password (yes) pass via ENV or Jenkins credentials ( uploadCredentialsId ) script (yes) reference to Jenkins main pipeline script transportRequestId yes username (yes) pass via ENV or Jenkins credentials ( uploadCredentialsId ) acceptUnixStyleLineEndings no applicationDescription no client no codePage no failUploadOnWarning no instance no verbose no activates debug output Overview - Execution Environment \u00b6 Orchestrator-specific only These parameters are relevant for orchestrator usage and not considered when using the command line option. Name Mandatory Additional information containerCommand no containerShell no dockerEnvVars no dockerImage no dockerName no dockerOptions no dockerPullImage no dockerVolumeBind no dockerWorkspace no Details \u00b6 abapPackage \u00b6 ABAP package name of the UI5 application back to overview Scope Details Aliases - Type string Mandatory yes Default $PIPER_abapPackage (if set) Secret no Configuration scope \u2612 parameter \u2612 general \u2612 steps \u2612 stages Resource references none acceptUnixStyleLineEndings \u00b6 If unix style line endings should be accepted back to overview Scope Details Aliases - Type bool Mandatory no Default true Possible values - true - false Secret no Configuration scope \u2612 parameter \u2612 general \u2612 steps \u2612 stages Resource references none applicationDescription \u00b6 Description of the UI5 application back to overview Scope Details Aliases - Type string Mandatory no Default $PIPER_applicationDescription (if set) Secret no Configuration scope \u2612 parameter \u2612 general \u2612 steps \u2612 stages Resource references none applicationName \u00b6 Name of the UI5 application back to overview Scope Details Aliases - Type string Mandatory yes Default $PIPER_applicationName (if set) Secret no Configuration scope \u2612 parameter \u2612 general \u2612 steps \u2612 stages Resource references none applicationUrl \u00b6 URL of the UI5 application package to upload to the ABAP system via RFC back to overview Scope Details Aliases - Type string Mandatory yes Default $PIPER_applicationUrl (if set) Secret no Configuration scope \u2612 parameter \u2612 general \u2612 steps \u2612 stages Resource references none client \u00b6 AS ABAP client number back to overview Scope Details Aliases - changeManagement/client - changeManagement/rfc/developmentClient Type string Mandatory no Default $PIPER_client (if set) Secret no Configuration scope \u2612 parameter \u2612 general \u2612 steps \u2612 stages Resource references none codePage \u00b6 Code page back to overview Scope Details Aliases - Type string Mandatory no Default UTF-8 Secret no Configuration scope \u2612 parameter \u2612 general \u2612 steps \u2612 stages Resource references none containerCommand \u00b6 Jenkins-specific: Used for proper environment setup. Kubernetes only: Allows to specify start command for container created with dockerImage parameter to overwrite Piper default (/usr/bin/tail -f /dev/null). back to overview Scope Details Aliases - Type string Mandatory no Default Secret no Configuration scope \u2612 parameter \u2612 general \u2612 steps \u2612 stages Resource references none containerShell \u00b6 Jenkins-specific: Used for proper environment setup. Allows to specify the shell to be executed for container with containerName. back to overview Scope Details Aliases - Type string Mandatory no Default Secret no Configuration scope \u2612 parameter \u2612 general \u2612 steps \u2612 stages Resource references none dockerEnvVars \u00b6 Environment variables to set in the container, e.g. [http_proxy: \"proxy:8080\"]. back to overview Scope Details Aliases - Type map[string]string Mandatory no Default Secret no Configuration scope \u2612 parameter \u2612 general \u2612 steps \u2612 stages Resource references none dockerImage \u00b6 Name of the docker image that should be used. If empty, Docker is not used and the command is executed directly on the Jenkins system. back to overview Scope Details Aliases - Type string Mandatory no Default rfc-client Secret no Configuration scope \u2612 parameter \u2612 general \u2612 steps \u2612 stages Resource references none dockerName \u00b6 Kubernetes only: Name of the container launching dockerImage. SideCar only: Name of the container in local network. back to overview Scope Details Aliases - Type string Mandatory no Default rfcclient Secret no Configuration scope \u2612 parameter \u2612 general \u2612 steps \u2612 stages Resource references none dockerOptions \u00b6 Docker options to be set when starting the container. back to overview Scope Details Aliases - Type []string Mandatory no Default Secret no Configuration scope \u2612 parameter \u2612 general \u2612 steps \u2612 stages Resource references none dockerPullImage \u00b6 Set this to 'false' to bypass a docker image pull. Useful during development process. Allows testing of images which are available in the local registry only. back to overview Scope Details Aliases - Type bool Mandatory no Default true Possible values - true - false Secret no Configuration scope \u2612 parameter \u2612 general \u2612 steps \u2612 stages Resource references none dockerVolumeBind \u00b6 Jenkins-specific: Used for proper environment setup. Volumes that should be mounted into the docker container. back to overview Scope Details Aliases - Type map[string]string Mandatory no Default Secret no Configuration scope \u2612 parameter \u2612 general \u2612 steps \u2612 stages Resource references none dockerWorkspace \u00b6 Jenkins-specific: Used for proper environment setup. Kubernetes only: Specifies a dedicated user home directory for the container which will be passed as value for environment variable HOME . back to overview Scope Details Aliases - Type string Mandatory no Default Secret no Configuration scope \u2612 parameter \u2612 general \u2612 steps \u2612 stages Resource references none endpoint \u00b6 Service endpoint, Application server URL back to overview Scope Details Aliases changeManagement/endpoint Type string Mandatory yes Default $PIPER_endpoint (if set) Secret no Configuration scope \u2612 parameter \u2612 general \u2612 steps \u2612 stages Resource references none failUploadOnWarning \u00b6 If the upload should fail in case the log contains warnings back to overview Scope Details Aliases failOnWarning Type bool Mandatory no Default true Possible values - true - false Secret no Configuration scope \u2612 parameter \u2612 general \u2612 steps \u2612 stages Resource references none instance \u00b6 AS ABAP instance number back to overview Scope Details Aliases - changeManagement/instance - changeManagement/rfc/developmentInstance Type string Mandatory no Default $PIPER_instance (if set) Secret no Configuration scope \u2612 parameter \u2612 general \u2612 steps \u2612 stages Resource references none password \u00b6 Service user password for uploading to the ABAP system via RFC back to overview Scope Details Aliases - Type string Mandatory yes Default $PIPER_password (if set) Secret yes Configuration scope \u2612 parameter \u2610 general \u2610 steps \u2610 stages Resource references Jenkins credential id: id: uploadCredentialsId reference to: password script \u00b6 The common script environment of the Jenkinsfile running. Typically the reference to the script calling the pipeline step is provided with the this parameter, as in script: this . This allows the function to access the commonPipelineEnvironment for retrieving, e.g. configuration parameters. back to overview Scope Details Aliases - Type Jenkins Script Mandatory yes Default Secret no Configuration scope \u2610 parameter \u2610 general \u2610 steps \u2610 stages Resource references none transportRequestId \u00b6 ID of the transport request to which the UI5 application is uploaded back to overview Scope Details Aliases - Type string Mandatory yes Default $PIPER_transportRequestId (if set) Secret no Configuration scope \u2612 parameter \u2610 general \u2610 steps \u2610 stages Resource references commonPipelineEnvironment : reference to: custom/transportRequestId username \u00b6 Service user for uploading to the ABAP system via RFC back to overview Scope Details Aliases - Type string Mandatory yes Default $PIPER_username (if set) Secret yes Configuration scope \u2612 parameter \u2612 general \u2612 steps \u2612 stages Resource references Jenkins credential id: id: uploadCredentialsId reference to: username verbose \u00b6 verbose output back to overview Scope Details Aliases - Type bool Mandatory no Default false Possible values - true - false Secret no Configuration scope \u2612 parameter \u2612 general \u2612 steps \u2612 stages Resource references none uploadCredentialsId \u00b6 Jenkins 'Username with password' credentials ID containing user and password to authenticate against the ABAP system back to overview Scope Details Aliases changeManagement/credentialsId Type string Configuration scope \u2612 parameter \u2612 general \u2612 steps \u2612 stages Example \u00b6 # config.yaml steps : transportRequestUploadRFC : changeManagement : credentialsId : 'RFC_CREDENTIALS_ID' endpoint : 'https://example.org/cm/rfc/endpoint' instance : '00' client : '001' abapPackage : 'PACK' applicationDescription : 'Lorem ipsum' applicationName : 'APP' dockerImage : 'my/rfc-client' // pipeline script transportRequestReqIDFromGit ( script: this ) transportRequestUploadRFC ( script: this , applicationUrl: 'https://example.org/appl/url/archive.zip' )","title":"transportRequestUploadRFC"},{"location":"steps/transportRequestUploadRFC/#transportrequestuploadrfc","text":"This step uploads a UI5 application as ZIP file to the ABAP system via RFC connections.","title":"transportRequestUploadRFC"},{"location":"steps/transportRequestUploadRFC/#description","text":"This step uploads a UI5 application as ZIP file to the ABAP system via RFC connections.","title":"Description"},{"location":"steps/transportRequestUploadRFC/#usage","text":"We recommend to define values of step parameters via .pipeline/config.yml file . In this case, calling the step is essentially reduced to defining the step name. Calling the step can be done either in an orchestrator specific way (e.g. via a Jenkins library step) or on the command line. Jenkins Command Line library ( 'piper-lib-os' ) transportRequestUploadRFC script: this piper transportRequestUploadRFC","title":"Usage"},{"location":"steps/transportRequestUploadRFC/#outputs","text":"Output type Details commonPipelineEnvironment custom/transportRequestId","title":"Outputs"},{"location":"steps/transportRequestUploadRFC/#prerequisites","text":"You have enabled RFC on the ABAP system. You have a user account on the ABAP system where you have assigned the required roles for uploading via RFC. You have created a transport request on the ABAP system, which is the target container of the upload.","title":"Prerequisites"},{"location":"steps/transportRequestUploadRFC/#rfc-client","text":"The RFC Client connects to your ABAP system using the SAP NetWeaver RFC SDK . For more information, see classical SAP connectivity technology RFC . To install an RFC library based Connector Client, proceed as follows: Create a Docker image as described in the Git repository devops-docker-images/node-rfc . Push your image to your private Docker Hub registry . Add the following to your config.yml file: steps : transportRequestUploadRFC : dockerImage : 'my/rfc-client'","title":"RFC Client"},{"location":"steps/transportRequestUploadRFC/#specifying-the-transport-request","text":"The target of the upload is a transport request, identified by an identifier (ID). The step transportRequestUploadRFC allows you to set the ID by parameter. Alternatively, you can pass the ID through the commonPipelineEnvironment . For example, by performing a step that generates the ID or obtains it differently. See transportRequestReqIDFromGit .","title":"Specifying the Transport Request"},{"location":"steps/transportRequestUploadRFC/#adding-a-parameter","text":"A parameterized pipeline allows you to specify the ID with the launch of the build instead of entering it statically into the pipeline. transportRequestUploadRFC ( script: this , transportRequestId: $ { TRANSPORT_REQUEST_ID }, ... ) The Jenkins pipeline input step allows you to specify the ID at runtime of the pipeline. def ids = input ( message: \"Upload?\" , parameters: [ string ( name: 'TRANSPORT_REQUEST_ID' , description: 'Transport Request ID' ) ] ) transportRequestUploadRFC ( script: this , transportRequestId: ids [ 'TRANSPORT_REQUEST_ID' ], ... )","title":"Adding a Parameter"},{"location":"steps/transportRequestUploadRFC/#common-pipeline-environment","text":"Use the step transportRequestReqIDFromGit to obtain the transportRequestId value from your Git commit messages. This step extracts the ID from the commit messages of your project repository and enters it into the commonPipelineEnvironment , in turn, the upload step transportRequestUploadRFC picks it up from there. transportRequestReqIDFromGit ( script: this ) transportRequestUploadRFC ( script: this , ... )","title":"Common Pipeline Environment"},{"location":"steps/transportRequestUploadRFC/#parameters","text":"","title":"Parameters"},{"location":"steps/transportRequestUploadRFC/#overview-step","text":"Name Mandatory Additional information abapPackage yes applicationName yes applicationUrl yes endpoint yes password (yes) pass via ENV or Jenkins credentials ( uploadCredentialsId ) script (yes) reference to Jenkins main pipeline script transportRequestId yes username (yes) pass via ENV or Jenkins credentials ( uploadCredentialsId ) acceptUnixStyleLineEndings no applicationDescription no client no codePage no failUploadOnWarning no instance no verbose no activates debug output","title":"Overview - Step"},{"location":"steps/transportRequestUploadRFC/#overview-execution-environment","text":"Orchestrator-specific only These parameters are relevant for orchestrator usage and not considered when using the command line option. Name Mandatory Additional information containerCommand no containerShell no dockerEnvVars no dockerImage no dockerName no dockerOptions no dockerPullImage no dockerVolumeBind no dockerWorkspace no","title":"Overview - Execution Environment"},{"location":"steps/transportRequestUploadRFC/#details","text":"","title":"Details"},{"location":"steps/transportRequestUploadRFC/#abappackage","text":"ABAP package name of the UI5 application back to overview Scope Details Aliases - Type string Mandatory yes Default $PIPER_abapPackage (if set) Secret no Configuration scope \u2612 parameter \u2612 general \u2612 steps \u2612 stages Resource references none","title":"abapPackage"},{"location":"steps/transportRequestUploadRFC/#acceptunixstylelineendings","text":"If unix style line endings should be accepted back to overview Scope Details Aliases - Type bool Mandatory no Default true Possible values - true - false Secret no Configuration scope \u2612 parameter \u2612 general \u2612 steps \u2612 stages Resource references none","title":"acceptUnixStyleLineEndings"},{"location":"steps/transportRequestUploadRFC/#applicationdescription","text":"Description of the UI5 application back to overview Scope Details Aliases - Type string Mandatory no Default $PIPER_applicationDescription (if set) Secret no Configuration scope \u2612 parameter \u2612 general \u2612 steps \u2612 stages Resource references none","title":"applicationDescription"},{"location":"steps/transportRequestUploadRFC/#applicationname","text":"Name of the UI5 application back to overview Scope Details Aliases - Type string Mandatory yes Default $PIPER_applicationName (if set) Secret no Configuration scope \u2612 parameter \u2612 general \u2612 steps \u2612 stages Resource references none","title":"applicationName"},{"location":"steps/transportRequestUploadRFC/#applicationurl","text":"URL of the UI5 application package to upload to the ABAP system via RFC back to overview Scope Details Aliases - Type string Mandatory yes Default $PIPER_applicationUrl (if set) Secret no Configuration scope \u2612 parameter \u2612 general \u2612 steps \u2612 stages Resource references none","title":"applicationUrl"},{"location":"steps/transportRequestUploadRFC/#client","text":"AS ABAP client number back to overview Scope Details Aliases - changeManagement/client - changeManagement/rfc/developmentClient Type string Mandatory no Default $PIPER_client (if set) Secret no Configuration scope \u2612 parameter \u2612 general \u2612 steps \u2612 stages Resource references none","title":"client"},{"location":"steps/transportRequestUploadRFC/#codepage","text":"Code page back to overview Scope Details Aliases - Type string Mandatory no Default UTF-8 Secret no Configuration scope \u2612 parameter \u2612 general \u2612 steps \u2612 stages Resource references none","title":"codePage"},{"location":"steps/transportRequestUploadRFC/#containercommand","text":"Jenkins-specific: Used for proper environment setup. Kubernetes only: Allows to specify start command for container created with dockerImage parameter to overwrite Piper default (/usr/bin/tail -f /dev/null). back to overview Scope Details Aliases - Type string Mandatory no Default Secret no Configuration scope \u2612 parameter \u2612 general \u2612 steps \u2612 stages Resource references none","title":"containerCommand"},{"location":"steps/transportRequestUploadRFC/#containershell","text":"Jenkins-specific: Used for proper environment setup. Allows to specify the shell to be executed for container with containerName. back to overview Scope Details Aliases - Type string Mandatory no Default Secret no Configuration scope \u2612 parameter \u2612 general \u2612 steps \u2612 stages Resource references none","title":"containerShell"},{"location":"steps/transportRequestUploadRFC/#dockerenvvars","text":"Environment variables to set in the container, e.g. [http_proxy: \"proxy:8080\"]. back to overview Scope Details Aliases - Type map[string]string Mandatory no Default Secret no Configuration scope \u2612 parameter \u2612 general \u2612 steps \u2612 stages Resource references none","title":"dockerEnvVars"},{"location":"steps/transportRequestUploadRFC/#dockerimage","text":"Name of the docker image that should be used. If empty, Docker is not used and the command is executed directly on the Jenkins system. back to overview Scope Details Aliases - Type string Mandatory no Default rfc-client Secret no Configuration scope \u2612 parameter \u2612 general \u2612 steps \u2612 stages Resource references none","title":"dockerImage"},{"location":"steps/transportRequestUploadRFC/#dockername","text":"Kubernetes only: Name of the container launching dockerImage. SideCar only: Name of the container in local network. back to overview Scope Details Aliases - Type string Mandatory no Default rfcclient Secret no Configuration scope \u2612 parameter \u2612 general \u2612 steps \u2612 stages Resource references none","title":"dockerName"},{"location":"steps/transportRequestUploadRFC/#dockeroptions","text":"Docker options to be set when starting the container. back to overview Scope Details Aliases - Type []string Mandatory no Default Secret no Configuration scope \u2612 parameter \u2612 general \u2612 steps \u2612 stages Resource references none","title":"dockerOptions"},{"location":"steps/transportRequestUploadRFC/#dockerpullimage","text":"Set this to 'false' to bypass a docker image pull. Useful during development process. Allows testing of images which are available in the local registry only. back to overview Scope Details Aliases - Type bool Mandatory no Default true Possible values - true - false Secret no Configuration scope \u2612 parameter \u2612 general \u2612 steps \u2612 stages Resource references none","title":"dockerPullImage"},{"location":"steps/transportRequestUploadRFC/#dockervolumebind","text":"Jenkins-specific: Used for proper environment setup. Volumes that should be mounted into the docker container. back to overview Scope Details Aliases - Type map[string]string Mandatory no Default Secret no Configuration scope \u2612 parameter \u2612 general \u2612 steps \u2612 stages Resource references none","title":"dockerVolumeBind"},{"location":"steps/transportRequestUploadRFC/#dockerworkspace","text":"Jenkins-specific: Used for proper environment setup. Kubernetes only: Specifies a dedicated user home directory for the container which will be passed as value for environment variable HOME . back to overview Scope Details Aliases - Type string Mandatory no Default Secret no Configuration scope \u2612 parameter \u2612 general \u2612 steps \u2612 stages Resource references none","title":"dockerWorkspace"},{"location":"steps/transportRequestUploadRFC/#endpoint","text":"Service endpoint, Application server URL back to overview Scope Details Aliases changeManagement/endpoint Type string Mandatory yes Default $PIPER_endpoint (if set) Secret no Configuration scope \u2612 parameter \u2612 general \u2612 steps \u2612 stages Resource references none","title":"endpoint"},{"location":"steps/transportRequestUploadRFC/#failuploadonwarning","text":"If the upload should fail in case the log contains warnings back to overview Scope Details Aliases failOnWarning Type bool Mandatory no Default true Possible values - true - false Secret no Configuration scope \u2612 parameter \u2612 general \u2612 steps \u2612 stages Resource references none","title":"failUploadOnWarning"},{"location":"steps/transportRequestUploadRFC/#instance","text":"AS ABAP instance number back to overview Scope Details Aliases - changeManagement/instance - changeManagement/rfc/developmentInstance Type string Mandatory no Default $PIPER_instance (if set) Secret no Configuration scope \u2612 parameter \u2612 general \u2612 steps \u2612 stages Resource references none","title":"instance"},{"location":"steps/transportRequestUploadRFC/#password","text":"Service user password for uploading to the ABAP system via RFC back to overview Scope Details Aliases - Type string Mandatory yes Default $PIPER_password (if set) Secret yes Configuration scope \u2612 parameter \u2610 general \u2610 steps \u2610 stages Resource references Jenkins credential id: id: uploadCredentialsId reference to: password","title":"password"},{"location":"steps/transportRequestUploadRFC/#script","text":"The common script environment of the Jenkinsfile running. Typically the reference to the script calling the pipeline step is provided with the this parameter, as in script: this . This allows the function to access the commonPipelineEnvironment for retrieving, e.g. configuration parameters. back to overview Scope Details Aliases - Type Jenkins Script Mandatory yes Default Secret no Configuration scope \u2610 parameter \u2610 general \u2610 steps \u2610 stages Resource references none","title":"script"},{"location":"steps/transportRequestUploadRFC/#transportrequestid","text":"ID of the transport request to which the UI5 application is uploaded back to overview Scope Details Aliases - Type string Mandatory yes Default $PIPER_transportRequestId (if set) Secret no Configuration scope \u2612 parameter \u2610 general \u2610 steps \u2610 stages Resource references commonPipelineEnvironment : reference to: custom/transportRequestId","title":"transportRequestId"},{"location":"steps/transportRequestUploadRFC/#username","text":"Service user for uploading to the ABAP system via RFC back to overview Scope Details Aliases - Type string Mandatory yes Default $PIPER_username (if set) Secret yes Configuration scope \u2612 parameter \u2612 general \u2612 steps \u2612 stages Resource references Jenkins credential id: id: uploadCredentialsId reference to: username","title":"username"},{"location":"steps/transportRequestUploadRFC/#verbose","text":"verbose output back to overview Scope Details Aliases - Type bool Mandatory no Default false Possible values - true - false Secret no Configuration scope \u2612 parameter \u2612 general \u2612 steps \u2612 stages Resource references none","title":"verbose"},{"location":"steps/transportRequestUploadRFC/#uploadcredentialsid","text":"Jenkins 'Username with password' credentials ID containing user and password to authenticate against the ABAP system back to overview Scope Details Aliases changeManagement/credentialsId Type string Configuration scope \u2612 parameter \u2612 general \u2612 steps \u2612 stages","title":"uploadCredentialsId"},{"location":"steps/transportRequestUploadRFC/#example","text":"# config.yaml steps : transportRequestUploadRFC : changeManagement : credentialsId : 'RFC_CREDENTIALS_ID' endpoint : 'https://example.org/cm/rfc/endpoint' instance : '00' client : '001' abapPackage : 'PACK' applicationDescription : 'Lorem ipsum' applicationName : 'APP' dockerImage : 'my/rfc-client' // pipeline script transportRequestReqIDFromGit ( script: this ) transportRequestUploadRFC ( script: this , applicationUrl: 'https://example.org/appl/url/archive.zip' )","title":"Example"},{"location":"steps/transportRequestUploadSOLMAN/","text":"transportRequestUploadSOLMAN \u00b6 Uploads a specified file into a given transport via Solution Manager Description \u00b6 Uploads the specified file into the given transport request via Solution Manager. The mandatory change document ID points to the associate change document item. The application ID specifies how the file needs to be handled on server side. Usage \u00b6 We recommend to define values of step parameters via .pipeline/config.yml file . In this case, calling the step is essentially reduced to defining the step name. Calling the step can be done either in an orchestrator specific way (e.g. via a Jenkins library step) or on the command line. Jenkins Command Line library ( 'piper-lib-os' ) transportRequestUploadSOLMAN script: this piper transportRequestUploadSOLMAN Outputs \u00b6 Output type Details commonPipelineEnvironment custom/changeDocumentId custom/transportRequestId Prerequisites \u00b6 You have an SAP Solution Manager user account and the roles required for uploading. See SAP Solution Manager Administration . You have a change document to which your transport request is coupled. You have a transport request, which is the target container of the upload. You have installed the Change Management Client with the needed certificates. See Change Management Client . Change Management Client \u00b6 The Change Management Client (CM Client) handles the access to SAP Solution Manager. The CM Client is a software running under Linux, which can initiate basic change management tasks in the Solution Manager. The client is used by default as a Docker image , but can also be installed as a command line tool . Certificates It is expected that the Solution Manager endpoint is secured by SSL and sends a certificate accordingly. The CM Client verifies the certificate. If the publisher of this certificate is unknown, the connection will be rejected. The CM Client uses the underlying JDK procedures for the verification. Accordingly, the issuer must be specified in the truststore of the JDK. Create a clone of the image and add the necessary certificate to its truststore in case you use the Docker image . Extend the truststore of the environment with the necessary certificate in the case you use the immediate command line tool . Specifying the Change Document and Transport Request \u00b6 The target of the upload is a transport request and the associated change document. Both objects are identified by identifiers (ID). transportRequestUploadSOLMAN allows you to set IDs by parameter. Alternatively, you can pass the IDs through the Common Pipeline Environment. For example, by performing a step that generates the IDs or obtains them differently. See transportRequestDocIDFromGit and transportRequestReqIDFromGit By Step Parameter \u00b6 A parameterized pipeline allows to specify the IDs with the launch of the build instead of entering them statically into the pipeline. transportRequestUploadSOLMAN ( script: this , changeDocumentId: $ { CHANGE_DOCUMENT_ID }, transportRequestId: $ { TRANSPORT_REQUEST_ID }, ... ) The Jenkins pipeline input step allows to specify the IDs at runtime of the pipeline. def ids = input ( message: \"Upload?\" , parameters: [ string ( name: 'CHANGE_DOCUMENT_ID' , description: 'Change Document ID' ), string ( name: 'TRANSPORT_REQUEST_ID' , description: 'Transport Request ID' ) ] ) transportRequestUploadSOLMAN ( script: this , changeDocumentId: ids [ 'CHANGE_DOCUMENT_ID' ], transportRequestId: ids [ 'TRANSPORT_REQUEST_ID' ], ... ) Common Pipeline Environment \u00b6 With OS Piper you can use the steps transportRequestDocIDFromGit and transportRequestReqIDFromGit to obtain the changeDocumentId and transportRequestId values from your Git commit messages. The steps enter the IDs into the commonPipelineEnvironment , in turn, the upload step transportRequestUploadSOLMAN picks them up from there. transportRequestDocIDFromGit ( script: this ) transportRequestReqIDFromGit ( script: this ) transportRequestUploadSOLMAN ( script: this , ... ) Parameters \u00b6 Overview - Step \u00b6 Name Mandatory Additional information applicationId yes changeDocumentId yes cmClientOpts yes endpoint yes filePath yes password (yes) pass via ENV or Jenkins credentials ( uploadCredentialsId ) script (yes) reference to Jenkins main pipeline script transportRequestId yes username (yes) pass via ENV or Jenkins credentials ( uploadCredentialsId ) verbose no activates debug output Overview - Execution Environment \u00b6 Orchestrator-specific only These parameters are relevant for orchestrator usage and not considered when using the command line option. Name Mandatory Additional information containerCommand no containerShell no dockerEnvVars no dockerImage no dockerName no dockerOptions no dockerPullImage no dockerVolumeBind no dockerWorkspace no Details \u00b6 applicationId \u00b6 Id of the application. Specifies how the file needs to be handled on server side back to overview Scope Details Aliases - Type string Mandatory yes Default $PIPER_applicationId (if set) Secret no Configuration scope \u2612 parameter \u2612 general \u2612 steps \u2612 stages Resource references none changeDocumentId \u00b6 ID of the change document to which the file is uploaded back to overview Scope Details Aliases - Type string Mandatory yes Default $PIPER_changeDocumentId (if set) Secret no Configuration scope \u2612 parameter \u2610 general \u2610 steps \u2610 stages Resource references commonPipelineEnvironment : reference to: custom/changeDocumentId cmClientOpts \u00b6 Additional options handed over to the cm client back to overview Scope Details Aliases - clientOpts - changeManagement/clientOpts Type []string Mandatory yes Default $PIPER_cmClientOpts (if set) Secret no Configuration scope \u2612 parameter \u2612 general \u2612 steps \u2612 stages Resource references none containerCommand \u00b6 Jenkins-specific: Used for proper environment setup. Kubernetes only: Allows to specify start command for container created with dockerImage parameter to overwrite Piper default (/usr/bin/tail -f /dev/null). back to overview Scope Details Aliases - Type string Mandatory no Default Secret no Configuration scope \u2612 parameter \u2612 general \u2612 steps \u2612 stages Resource references none containerShell \u00b6 Jenkins-specific: Used for proper environment setup. Allows to specify the shell to be executed for container with containerName. back to overview Scope Details Aliases - Type string Mandatory no Default Secret no Configuration scope \u2612 parameter \u2612 general \u2612 steps \u2612 stages Resource references none dockerEnvVars \u00b6 Environment variables to set in the container, e.g. [http_proxy: \"proxy:8080\"]. back to overview Scope Details Aliases - Type map[string]string Mandatory no Default Secret no Configuration scope \u2612 parameter \u2612 general \u2612 steps \u2612 stages Resource references none dockerImage \u00b6 Name of the docker image that should be used. If empty, Docker is not used and the command is executed directly on the Jenkins system. back to overview Scope Details Aliases - Type string Mandatory no Default ppiper/cm-client:3.0.0.0 Secret no Configuration scope \u2612 parameter \u2612 general \u2612 steps \u2612 stages Resource references none dockerName \u00b6 Kubernetes only: Name of the container launching dockerImage. SideCar only: Name of the container in local network. back to overview Scope Details Aliases - Type string Mandatory no Default cmclient Secret no Configuration scope \u2612 parameter \u2612 general \u2612 steps \u2612 stages Resource references none dockerOptions \u00b6 Docker options to be set when starting the container. back to overview Scope Details Aliases - Type []string Mandatory no Default Secret no Configuration scope \u2612 parameter \u2612 general \u2612 steps \u2612 stages Resource references none dockerPullImage \u00b6 Set this to 'false' to bypass a docker image pull. Useful during development process. Allows testing of images which are available in the local registry only. back to overview Scope Details Aliases - Type bool Mandatory no Default true Possible values - true - false Secret no Configuration scope \u2612 parameter \u2612 general \u2612 steps \u2612 stages Resource references none dockerVolumeBind \u00b6 Jenkins-specific: Used for proper environment setup. Volumes that should be mounted into the docker container. back to overview Scope Details Aliases - Type map[string]string Mandatory no Default Secret no Configuration scope \u2612 parameter \u2612 general \u2612 steps \u2612 stages Resource references none dockerWorkspace \u00b6 Jenkins-specific: Used for proper environment setup. Kubernetes only: Specifies a dedicated user home directory for the container which will be passed as value for environment variable HOME . back to overview Scope Details Aliases - Type string Mandatory no Default Secret no Configuration scope \u2612 parameter \u2612 general \u2612 steps \u2612 stages Resource references none endpoint \u00b6 Service endpoint back to overview Scope Details Aliases changeManagement/endpoint Type string Mandatory yes Default $PIPER_endpoint (if set) Secret no Configuration scope \u2612 parameter \u2612 general \u2612 steps \u2612 stages Resource references none filePath \u00b6 Name/Path of the file which should be uploaded back to overview Scope Details Aliases - Type string Mandatory yes Default $PIPER_filePath (if set) Secret no Configuration scope \u2612 parameter \u2612 general \u2612 steps \u2612 stages Resource references commonPipelineEnvironment : reference to: mtarFilePath password \u00b6 Service user password for uploading to the Solution Manager back to overview Scope Details Aliases - Type string Mandatory yes Default $PIPER_password (if set) Secret yes Configuration scope \u2612 parameter \u2610 general \u2610 steps \u2610 stages Resource references Jenkins credential id: id: uploadCredentialsId reference to: password script \u00b6 The common script environment of the Jenkinsfile running. Typically the reference to the script calling the pipeline step is provided with the this parameter, as in script: this . This allows the function to access the commonPipelineEnvironment for retrieving, e.g. configuration parameters. back to overview Scope Details Aliases - Type Jenkins Script Mandatory yes Default Secret no Configuration scope \u2610 parameter \u2610 general \u2610 steps \u2610 stages Resource references none transportRequestId \u00b6 ID of the transport request to which the file is uploaded back to overview Scope Details Aliases - Type string Mandatory yes Default $PIPER_transportRequestId (if set) Secret no Configuration scope \u2612 parameter \u2610 general \u2610 steps \u2610 stages Resource references commonPipelineEnvironment : reference to: custom/transportRequestId username \u00b6 Service user for uploading to the Solution Manager back to overview Scope Details Aliases - Type string Mandatory yes Default $PIPER_username (if set) Secret yes Configuration scope \u2612 parameter \u2612 general \u2612 steps \u2612 stages Resource references Jenkins credential id: id: uploadCredentialsId reference to: username verbose \u00b6 verbose output back to overview Scope Details Aliases - Type bool Mandatory no Default false Possible values - true - false Secret no Configuration scope \u2612 parameter \u2612 general \u2612 steps \u2612 stages Resource references none uploadCredentialsId \u00b6 Jenkins 'Username with password' credentials ID containing user and password to authenticate against the ABAP backend back to overview Scope Details Aliases changeManagement/credentialsId Type string Configuration scope \u2612 parameter \u2612 general \u2612 steps \u2612 stages Example \u00b6 transportRequestUploadSOLMAN ( script: this , endpoint: 'https://example.org/cm/solman/endpoint' applicationId: 'ABC' , uploadCredentialsId: \"SOLMAN_CRED_ID\" changeDocumentId: '1000001234' , transportRequestId: 'ABCD10005E' , filePath: '/path/file.ext' , cmClientOpts: '-Dkey=value' )","title":"transportRequestUploadSOLMAN"},{"location":"steps/transportRequestUploadSOLMAN/#transportrequestuploadsolman","text":"Uploads a specified file into a given transport via Solution Manager","title":"transportRequestUploadSOLMAN"},{"location":"steps/transportRequestUploadSOLMAN/#description","text":"Uploads the specified file into the given transport request via Solution Manager. The mandatory change document ID points to the associate change document item. The application ID specifies how the file needs to be handled on server side.","title":"Description"},{"location":"steps/transportRequestUploadSOLMAN/#usage","text":"We recommend to define values of step parameters via .pipeline/config.yml file . In this case, calling the step is essentially reduced to defining the step name. Calling the step can be done either in an orchestrator specific way (e.g. via a Jenkins library step) or on the command line. Jenkins Command Line library ( 'piper-lib-os' ) transportRequestUploadSOLMAN script: this piper transportRequestUploadSOLMAN","title":"Usage"},{"location":"steps/transportRequestUploadSOLMAN/#outputs","text":"Output type Details commonPipelineEnvironment custom/changeDocumentId custom/transportRequestId","title":"Outputs"},{"location":"steps/transportRequestUploadSOLMAN/#prerequisites","text":"You have an SAP Solution Manager user account and the roles required for uploading. See SAP Solution Manager Administration . You have a change document to which your transport request is coupled. You have a transport request, which is the target container of the upload. You have installed the Change Management Client with the needed certificates. See Change Management Client .","title":"Prerequisites"},{"location":"steps/transportRequestUploadSOLMAN/#change-management-client","text":"The Change Management Client (CM Client) handles the access to SAP Solution Manager. The CM Client is a software running under Linux, which can initiate basic change management tasks in the Solution Manager. The client is used by default as a Docker image , but can also be installed as a command line tool . Certificates It is expected that the Solution Manager endpoint is secured by SSL and sends a certificate accordingly. The CM Client verifies the certificate. If the publisher of this certificate is unknown, the connection will be rejected. The CM Client uses the underlying JDK procedures for the verification. Accordingly, the issuer must be specified in the truststore of the JDK. Create a clone of the image and add the necessary certificate to its truststore in case you use the Docker image . Extend the truststore of the environment with the necessary certificate in the case you use the immediate command line tool .","title":"Change Management Client"},{"location":"steps/transportRequestUploadSOLMAN/#specifying-the-change-document-and-transport-request","text":"The target of the upload is a transport request and the associated change document. Both objects are identified by identifiers (ID). transportRequestUploadSOLMAN allows you to set IDs by parameter. Alternatively, you can pass the IDs through the Common Pipeline Environment. For example, by performing a step that generates the IDs or obtains them differently. See transportRequestDocIDFromGit and transportRequestReqIDFromGit","title":"Specifying the Change Document and Transport Request"},{"location":"steps/transportRequestUploadSOLMAN/#by-step-parameter","text":"A parameterized pipeline allows to specify the IDs with the launch of the build instead of entering them statically into the pipeline. transportRequestUploadSOLMAN ( script: this , changeDocumentId: $ { CHANGE_DOCUMENT_ID }, transportRequestId: $ { TRANSPORT_REQUEST_ID }, ... ) The Jenkins pipeline input step allows to specify the IDs at runtime of the pipeline. def ids = input ( message: \"Upload?\" , parameters: [ string ( name: 'CHANGE_DOCUMENT_ID' , description: 'Change Document ID' ), string ( name: 'TRANSPORT_REQUEST_ID' , description: 'Transport Request ID' ) ] ) transportRequestUploadSOLMAN ( script: this , changeDocumentId: ids [ 'CHANGE_DOCUMENT_ID' ], transportRequestId: ids [ 'TRANSPORT_REQUEST_ID' ], ... )","title":"By Step Parameter"},{"location":"steps/transportRequestUploadSOLMAN/#common-pipeline-environment","text":"With OS Piper you can use the steps transportRequestDocIDFromGit and transportRequestReqIDFromGit to obtain the changeDocumentId and transportRequestId values from your Git commit messages. The steps enter the IDs into the commonPipelineEnvironment , in turn, the upload step transportRequestUploadSOLMAN picks them up from there. transportRequestDocIDFromGit ( script: this ) transportRequestReqIDFromGit ( script: this ) transportRequestUploadSOLMAN ( script: this , ... )","title":"Common Pipeline Environment"},{"location":"steps/transportRequestUploadSOLMAN/#parameters","text":"","title":"Parameters"},{"location":"steps/transportRequestUploadSOLMAN/#overview-step","text":"Name Mandatory Additional information applicationId yes changeDocumentId yes cmClientOpts yes endpoint yes filePath yes password (yes) pass via ENV or Jenkins credentials ( uploadCredentialsId ) script (yes) reference to Jenkins main pipeline script transportRequestId yes username (yes) pass via ENV or Jenkins credentials ( uploadCredentialsId ) verbose no activates debug output","title":"Overview - Step"},{"location":"steps/transportRequestUploadSOLMAN/#overview-execution-environment","text":"Orchestrator-specific only These parameters are relevant for orchestrator usage and not considered when using the command line option. Name Mandatory Additional information containerCommand no containerShell no dockerEnvVars no dockerImage no dockerName no dockerOptions no dockerPullImage no dockerVolumeBind no dockerWorkspace no","title":"Overview - Execution Environment"},{"location":"steps/transportRequestUploadSOLMAN/#details","text":"","title":"Details"},{"location":"steps/transportRequestUploadSOLMAN/#applicationid","text":"Id of the application. Specifies how the file needs to be handled on server side back to overview Scope Details Aliases - Type string Mandatory yes Default $PIPER_applicationId (if set) Secret no Configuration scope \u2612 parameter \u2612 general \u2612 steps \u2612 stages Resource references none","title":"applicationId"},{"location":"steps/transportRequestUploadSOLMAN/#changedocumentid","text":"ID of the change document to which the file is uploaded back to overview Scope Details Aliases - Type string Mandatory yes Default $PIPER_changeDocumentId (if set) Secret no Configuration scope \u2612 parameter \u2610 general \u2610 steps \u2610 stages Resource references commonPipelineEnvironment : reference to: custom/changeDocumentId","title":"changeDocumentId"},{"location":"steps/transportRequestUploadSOLMAN/#cmclientopts","text":"Additional options handed over to the cm client back to overview Scope Details Aliases - clientOpts - changeManagement/clientOpts Type []string Mandatory yes Default $PIPER_cmClientOpts (if set) Secret no Configuration scope \u2612 parameter \u2612 general \u2612 steps \u2612 stages Resource references none","title":"cmClientOpts"},{"location":"steps/transportRequestUploadSOLMAN/#containercommand","text":"Jenkins-specific: Used for proper environment setup. Kubernetes only: Allows to specify start command for container created with dockerImage parameter to overwrite Piper default (/usr/bin/tail -f /dev/null). back to overview Scope Details Aliases - Type string Mandatory no Default Secret no Configuration scope \u2612 parameter \u2612 general \u2612 steps \u2612 stages Resource references none","title":"containerCommand"},{"location":"steps/transportRequestUploadSOLMAN/#containershell","text":"Jenkins-specific: Used for proper environment setup. Allows to specify the shell to be executed for container with containerName. back to overview Scope Details Aliases - Type string Mandatory no Default Secret no Configuration scope \u2612 parameter \u2612 general \u2612 steps \u2612 stages Resource references none","title":"containerShell"},{"location":"steps/transportRequestUploadSOLMAN/#dockerenvvars","text":"Environment variables to set in the container, e.g. [http_proxy: \"proxy:8080\"]. back to overview Scope Details Aliases - Type map[string]string Mandatory no Default Secret no Configuration scope \u2612 parameter \u2612 general \u2612 steps \u2612 stages Resource references none","title":"dockerEnvVars"},{"location":"steps/transportRequestUploadSOLMAN/#dockerimage","text":"Name of the docker image that should be used. If empty, Docker is not used and the command is executed directly on the Jenkins system. back to overview Scope Details Aliases - Type string Mandatory no Default ppiper/cm-client:3.0.0.0 Secret no Configuration scope \u2612 parameter \u2612 general \u2612 steps \u2612 stages Resource references none","title":"dockerImage"},{"location":"steps/transportRequestUploadSOLMAN/#dockername","text":"Kubernetes only: Name of the container launching dockerImage. SideCar only: Name of the container in local network. back to overview Scope Details Aliases - Type string Mandatory no Default cmclient Secret no Configuration scope \u2612 parameter \u2612 general \u2612 steps \u2612 stages Resource references none","title":"dockerName"},{"location":"steps/transportRequestUploadSOLMAN/#dockeroptions","text":"Docker options to be set when starting the container. back to overview Scope Details Aliases - Type []string Mandatory no Default Secret no Configuration scope \u2612 parameter \u2612 general \u2612 steps \u2612 stages Resource references none","title":"dockerOptions"},{"location":"steps/transportRequestUploadSOLMAN/#dockerpullimage","text":"Set this to 'false' to bypass a docker image pull. Useful during development process. Allows testing of images which are available in the local registry only. back to overview Scope Details Aliases - Type bool Mandatory no Default true Possible values - true - false Secret no Configuration scope \u2612 parameter \u2612 general \u2612 steps \u2612 stages Resource references none","title":"dockerPullImage"},{"location":"steps/transportRequestUploadSOLMAN/#dockervolumebind","text":"Jenkins-specific: Used for proper environment setup. Volumes that should be mounted into the docker container. back to overview Scope Details Aliases - Type map[string]string Mandatory no Default Secret no Configuration scope \u2612 parameter \u2612 general \u2612 steps \u2612 stages Resource references none","title":"dockerVolumeBind"},{"location":"steps/transportRequestUploadSOLMAN/#dockerworkspace","text":"Jenkins-specific: Used for proper environment setup. Kubernetes only: Specifies a dedicated user home directory for the container which will be passed as value for environment variable HOME . back to overview Scope Details Aliases - Type string Mandatory no Default Secret no Configuration scope \u2612 parameter \u2612 general \u2612 steps \u2612 stages Resource references none","title":"dockerWorkspace"},{"location":"steps/transportRequestUploadSOLMAN/#endpoint","text":"Service endpoint back to overview Scope Details Aliases changeManagement/endpoint Type string Mandatory yes Default $PIPER_endpoint (if set) Secret no Configuration scope \u2612 parameter \u2612 general \u2612 steps \u2612 stages Resource references none","title":"endpoint"},{"location":"steps/transportRequestUploadSOLMAN/#filepath","text":"Name/Path of the file which should be uploaded back to overview Scope Details Aliases - Type string Mandatory yes Default $PIPER_filePath (if set) Secret no Configuration scope \u2612 parameter \u2612 general \u2612 steps \u2612 stages Resource references commonPipelineEnvironment : reference to: mtarFilePath","title":"filePath"},{"location":"steps/transportRequestUploadSOLMAN/#password","text":"Service user password for uploading to the Solution Manager back to overview Scope Details Aliases - Type string Mandatory yes Default $PIPER_password (if set) Secret yes Configuration scope \u2612 parameter \u2610 general \u2610 steps \u2610 stages Resource references Jenkins credential id: id: uploadCredentialsId reference to: password","title":"password"},{"location":"steps/transportRequestUploadSOLMAN/#script","text":"The common script environment of the Jenkinsfile running. Typically the reference to the script calling the pipeline step is provided with the this parameter, as in script: this . This allows the function to access the commonPipelineEnvironment for retrieving, e.g. configuration parameters. back to overview Scope Details Aliases - Type Jenkins Script Mandatory yes Default Secret no Configuration scope \u2610 parameter \u2610 general \u2610 steps \u2610 stages Resource references none","title":"script"},{"location":"steps/transportRequestUploadSOLMAN/#transportrequestid","text":"ID of the transport request to which the file is uploaded back to overview Scope Details Aliases - Type string Mandatory yes Default $PIPER_transportRequestId (if set) Secret no Configuration scope \u2612 parameter \u2610 general \u2610 steps \u2610 stages Resource references commonPipelineEnvironment : reference to: custom/transportRequestId","title":"transportRequestId"},{"location":"steps/transportRequestUploadSOLMAN/#username","text":"Service user for uploading to the Solution Manager back to overview Scope Details Aliases - Type string Mandatory yes Default $PIPER_username (if set) Secret yes Configuration scope \u2612 parameter \u2612 general \u2612 steps \u2612 stages Resource references Jenkins credential id: id: uploadCredentialsId reference to: username","title":"username"},{"location":"steps/transportRequestUploadSOLMAN/#verbose","text":"verbose output back to overview Scope Details Aliases - Type bool Mandatory no Default false Possible values - true - false Secret no Configuration scope \u2612 parameter \u2612 general \u2612 steps \u2612 stages Resource references none","title":"verbose"},{"location":"steps/transportRequestUploadSOLMAN/#uploadcredentialsid","text":"Jenkins 'Username with password' credentials ID containing user and password to authenticate against the ABAP backend back to overview Scope Details Aliases changeManagement/credentialsId Type string Configuration scope \u2612 parameter \u2612 general \u2612 steps \u2612 stages","title":"uploadCredentialsId"},{"location":"steps/transportRequestUploadSOLMAN/#example","text":"transportRequestUploadSOLMAN ( script: this , endpoint: 'https://example.org/cm/solman/endpoint' applicationId: 'ABC' , uploadCredentialsId: \"SOLMAN_CRED_ID\" changeDocumentId: '1000001234' , transportRequestId: 'ABCD10005E' , filePath: '/path/file.ext' , cmClientOpts: '-Dkey=value' )","title":"Example"},{"location":"steps/uiVeri5ExecuteTests/","text":"uiVeri5ExecuteTests \u00b6 Executes UI5 e2e tests using uiVeri5 Deprecation notice Details of changes after the step migrated to a golang based step can be found below . Description \u00b6 In this step the ( UIVeri5 tests ) are executed. Usage \u00b6 We recommend to define values of step parameters via .pipeline/config.yml file . In this case, calling the step is essentially reduced to defining the step name. Calling the step can be done either in an orchestrator specific way (e.g. via a Jenkins library step) or on the command line. Jenkins Command Line library ( 'piper-lib-os' ) uiVeri5ExecuteTests script: this piper uiVeri5ExecuteTests Outputs \u00b6 Output type Details Prerequisites \u00b6 Parameters \u00b6 Overview - Step \u00b6 Name Mandatory Additional information script (yes) reference to Jenkins main pipeline script installCommand no runCommand no runOptions no testOptions no testServerUrl no verbose no activates debug output Overview - Execution Environment \u00b6 Orchestrator-specific only These parameters are relevant for orchestrator usage and not considered when using the command line option. Name Mandatory Additional information containerCommand no containerName no containerShell no dockerEnvVars no dockerImage no dockerName no dockerOptions no dockerPullImage no dockerVolumeBind no dockerWorkspace no sidecarEnvVars no sidecarImage no sidecarName no sidecarOptions no sidecarPullImage no sidecarReadyCommand no sidecarVolumeBind no sidecarWorkspace no stashContent no Details \u00b6 containerCommand \u00b6 Jenkins-specific: Used for proper environment setup. Kubernetes only: Allows to specify start command for container created with dockerImage parameter to overwrite Piper default (/usr/bin/tail -f /dev/null). back to overview Scope Details Aliases - Type string Mandatory no Default Secret no Configuration scope \u2612 parameter \u2612 general \u2612 steps \u2612 stages Resource references none containerName \u00b6 Jenkins-specific: Used for proper environment setup. Optional configuration in combination with containerMap to define the container where the commands should be executed in. back to overview Scope Details Aliases - Type string Mandatory no Default uiVeri5 Secret no Configuration scope \u2612 parameter \u2612 general \u2612 steps \u2612 stages Resource references none containerShell \u00b6 Jenkins-specific: Used for proper environment setup. Allows to specify the shell to be executed for container with containerName. back to overview Scope Details Aliases - Type string Mandatory no Default Secret no Configuration scope \u2612 parameter \u2612 general \u2612 steps \u2612 stages Resource references none dockerEnvVars \u00b6 Environment variables to set in the container, e.g. [http_proxy: \"proxy:8080\"]. back to overview Scope Details Aliases - Type map[string]string Mandatory no Default map[NO_PROXY:localhost,selenium,$NO_PROXY no_proxy:localhost,selenium,$no_proxy] Secret no Configuration scope \u2612 parameter \u2612 general \u2612 steps \u2612 stages Resource references none dockerImage \u00b6 Name of the docker image that should be used. If empty, Docker is not used and the command is executed directly on the Jenkins system. back to overview Scope Details Aliases - Type string Mandatory no Default node:22-bookworm Secret no Configuration scope \u2612 parameter \u2612 general \u2612 steps \u2612 stages Resource references none dockerName \u00b6 Kubernetes only: Name of the container launching dockerImage. SideCar only: Name of the container in local network. back to overview Scope Details Aliases - Type string Mandatory no Default uiVeri5 Secret no Configuration scope \u2612 parameter \u2612 general \u2612 steps \u2612 stages Resource references none dockerOptions \u00b6 Docker options to be set when starting the container. back to overview Scope Details Aliases - Type []string Mandatory no Default Secret no Configuration scope \u2612 parameter \u2612 general \u2612 steps \u2612 stages Resource references none dockerPullImage \u00b6 Set this to 'false' to bypass a docker image pull. Useful during development process. Allows testing of images which are available in the local registry only. back to overview Scope Details Aliases - Type bool Mandatory no Default true Possible values - true - false Secret no Configuration scope \u2612 parameter \u2612 general \u2612 steps \u2612 stages Resource references none dockerVolumeBind \u00b6 Jenkins-specific: Used for proper environment setup. Volumes that should be mounted into the docker container. back to overview Scope Details Aliases - Type map[string]string Mandatory no Default Secret no Configuration scope \u2612 parameter \u2612 general \u2612 steps \u2612 stages Resource references none dockerWorkspace \u00b6 Jenkins-specific: Used for proper environment setup. Kubernetes only: Specifies a dedicated user home directory for the container which will be passed as value for environment variable HOME . back to overview Scope Details Aliases - Type string Mandatory no Default /home/node Secret no Configuration scope \u2612 parameter \u2612 general \u2612 steps \u2612 stages Resource references none installCommand \u00b6 The command that is executed to install the uiveri5 test tool. back to overview Scope Details Aliases - Type string Mandatory no Default npm install @ui5/uiveri5 --global --quiet Secret no Configuration scope \u2612 parameter \u2612 general \u2612 steps \u2612 stages Resource references none runCommand \u00b6 The command that is executed to start the tests. back to overview Scope Details Aliases - Type string Mandatory no Default /home/node/.npm-global/bin/uiveri5 Secret no Configuration scope \u2612 parameter \u2612 general \u2612 steps \u2612 stages Resource references none runOptions \u00b6 Options to append to the runCommand, last parameter has to be path to conf.js (default if missing: ./conf.js). back to overview Scope Details Aliases - Type []string Mandatory no Default - --seleniumAddress=http://localhost:4444/wd/hub Secret no Configuration scope \u2612 parameter \u2610 general \u2612 steps \u2612 stages Resource references none script \u00b6 The common script environment of the Jenkinsfile running. Typically the reference to the script calling the pipeline step is provided with the this parameter, as in script: this . This allows the function to access the commonPipelineEnvironment for retrieving, e.g. configuration parameters. back to overview Scope Details Aliases - Type Jenkins Script Mandatory yes Default Secret no Configuration scope \u2610 parameter \u2610 general \u2610 steps \u2610 stages Resource references none sidecarEnvVars \u00b6 A map of environment variables to set in the sidecar container, similar to dockerEnvVars . back to overview Scope Details Aliases - Type map[string]string Mandatory no Default Secret no Configuration scope \u2612 parameter \u2612 general \u2612 steps \u2612 stages Resource references none sidecarImage \u00b6 The name of the docker image of the sidecar container. If empty, no sidecar container is started. Similar to dockerImage . back to overview Scope Details Aliases - Type string Mandatory no Default Secret no Configuration scope \u2612 parameter \u2612 general \u2612 steps \u2612 stages Resource references none sidecarName \u00b6 Name of the sidecar container. Similar to dockerName . back to overview Scope Details Aliases - Type string Mandatory no Default Secret no Configuration scope \u2612 parameter \u2612 general \u2612 steps \u2612 stages Resource references none sidecarOptions \u00b6 Options to be set when starting the sidecar container. Similar to dockerOptions . back to overview Scope Details Aliases - Type []string Mandatory no Default Secret no Configuration scope \u2612 parameter \u2612 general \u2612 steps \u2612 stages Resource references none sidecarPullImage \u00b6 Set this to 'false' to bypass a docker image pull. Useful during development process. Allows testing of images which are available in the local registry only. back to overview Scope Details Aliases - Type bool Mandatory no Default false Possible values - true - false Secret no Configuration scope \u2612 parameter \u2612 general \u2612 steps \u2612 stages Resource references none sidecarReadyCommand \u00b6 Jenkins-specific: Used for proper environment setup. Command executed inside the container which returns exit code 0 when the container is ready to be used. back to overview Scope Details Aliases - Type string Mandatory no Default Secret no Configuration scope \u2612 parameter \u2612 general \u2612 steps \u2612 stages Resource references none sidecarVolumeBind \u00b6 Volumes that should be mounted into the sidecar container. Similar to dockerVolumeBind . back to overview Scope Details Aliases - Type map[string]string Mandatory no Default Secret no Configuration scope \u2612 parameter \u2612 general \u2612 steps \u2612 stages Resource references none sidecarWorkspace \u00b6 Jenkins-specific: Used for proper environment setup. back to overview Scope Details Aliases - Type string Mandatory no Default Secret no Configuration scope \u2612 parameter \u2612 general \u2612 steps \u2612 stages Resource references none stashContent \u00b6 Jenkins-specific: Used for proper environment setup. Specific stashes that should be considered for the step execution. back to overview Scope Details Aliases - Type []string Mandatory no Default - buildDescriptor - tests Secret no Configuration scope \u2612 parameter \u2612 general \u2612 steps \u2612 stages Resource references none testOptions \u00b6 Deprecated and will result in an error if set. Please use runOptions instead. Split the testOptions string at the whitespaces when migrating it into a list of runOptions. back to overview Scope Details Aliases - Type string Mandatory no Default $PIPER_testOptions (if set) Secret no Configuration scope \u2612 parameter \u2610 general \u2612 steps \u2612 stages Resource references none testServerUrl \u00b6 URL pointing to the deployment. back to overview Scope Details Aliases - Type string Mandatory no Default $PIPER_testServerUrl (if set) Secret no Configuration scope \u2612 parameter \u2610 general \u2612 steps \u2612 stages Resource references none verbose \u00b6 verbose output back to overview Scope Details Aliases - Type bool Mandatory no Default false Possible values - true - false Secret no Configuration scope \u2612 parameter \u2612 general \u2612 steps \u2612 stages Resource references none Exceptions \u00b6 The parameter testOptions is deprecated and is replaced by array type parameter runOptions . Groovy templating for this parameter is deprecated and no longer supported. Using the runOptions parameter the 'seleniumAddress' for UIVeri5 can be set. The former groovy implementation included a default for seleniumAddress in the runCommand. Since this is not possible with the golang-based implementation, the seleniumAddress has to be added to the runOptions. For jenkins on kubernetes the host is 'localhost', in other environments, e.g. native jenkins installations, the host can be set to 'selenium'. runOptions : [ \"--seleniumAddress=http://localhost:4444/wd/hub\" , ..... ] The parameter failOnError is no longer supported on the step due to strategic reasons of pipeline resilience. To achieve the former behaviour with failOnError: false configured, the step can be wrapped using try/catch in your custom pipeline script. The installCommand does not support queueing shell commands using && and | operator any longer. If you see an error like fatal: Not a git repository (or any parent up to mount point /home/jenkins) it is likely that your test description cannot be found. Please make sure to point parameter runOptions to your conf.js file like runOptions: [...., './path/to/my/tests/conf.js'] Examples \u00b6 Passing credentials from Jenkins \u00b6 When running acceptance tests in a real environment, authentication will be enabled in most cases. UIVeri5 includes features to automatically perform the login with credentials in the conf.js . However, having credentials to the acceptance system stored in plain text is not an optimal solution. Therefore, UIVeri5 allows templating to set parameters at runtime, as shown in the following example conf.js : // Read environment variables const defaultParams = { url : process . env . TARGET_SERVER_URL , user : process . env . TEST_USER , pass : process . env . TEST_PASS }; // Resolve path to specs relative to the working directory const path = require ( 'path' ); const specs = path . relative ( process . cwd (), path . join ( __dirname , '*.spec.js' )); // export UIVeri5 config exports . config = { profile : 'integration' , baseUrl : '\\${params.url}' , specs : specs , params : defaultParams , // can be overridden via cli `--params.<key>=<value>` auth : { // set up authorization for CF XSUAA 'sapcloud-form' : { user : '\\${params.user}' , pass : '\\${params.pass}' , userFieldSelector : 'input[id=\"j_username\"]' , passFieldSelector : 'input[id=\"j_password\"]' , logonButtonSelector : 'button[type=\"submit\"]' , redirectUrl : /cp.portal\\/site/ } } }; While default values for baseUrl , user and pass are read from the environment, they can also be overridden when calling the CLI. In a custom Pipeline, this is very simple: Just wrap the call to uiVeri5ExecuteTests in withCredentials : withCredentials ([ usernamePassword ( credentialsId: 'MY_ACCEPTANCE_CREDENTIALS' , passwordVariable: 'password' , usernameVariable: 'username' )]) { uiVeri5ExecuteTests script: this , runOptions: [ \"--baseURL=NEW_BASE_URL\" , \"--params.user=${username}\" , \"--params.pass=${password}\" , \"--seleniumAddress=http://localhost:4444/wd/hub\" , \"./uiveri5/conf.js\" ] } Please note: It is not recommended to override any secrets with the runOptions, because they may be seen in the Jenkins pipeline run console output. During the withCredentials call, the credentials are written to the environment and can be accessed by the test code. The following example shows the recommended way to handle the username and password for a uiVeri5ExecuteTests call that needs authentication. The passwordVariable and usernameVariable need to match the environment variables in the test code. withCredentials ([ usernamePassword ( credentialsId: 'MY_ACCEPTANCE_CREDENTIALS' , passwordVariable: 'TEST_PASS' , usernameVariable: 'TEST_USER' )]) { uiVeri5ExecuteTests script: this , runOptions: [ \"--seleniumAddress=http://localhost:4444/wd/hub\" , \"./uiveri5/conf.js\" ] } There is also the option to use vault for test credentials . In a Pipeline Template, a Stage Exit can be used to fetch the credentials and store them in the environment. As the environment is passed down to uiVeri5ExecuteTests, the variables will be present there. This is an example for the stage exit .pipeline/extensions/Acceptance.groovy where the credentialsId is read from the config.yml : void call ( Map params ) { // read username and password from the credential store withCredentials ([ usernamePassword ( credentialsId: params . config . acceptanceCredentialsId , passwordVariable: 'password' , usernameVariable: 'username' )]) { // store the result in the environment variables for executeUIVeri5Test withEnv ([ \"TEST_USER=\\${username}\" , \"TEST_PASS=\\${password}\" ]) { //execute original stage as defined in the template params . originalStage () } } } return this","title":"uiVeri5ExecuteTests"},{"location":"steps/uiVeri5ExecuteTests/#uiveri5executetests","text":"Executes UI5 e2e tests using uiVeri5 Deprecation notice Details of changes after the step migrated to a golang based step can be found below .","title":"uiVeri5ExecuteTests"},{"location":"steps/uiVeri5ExecuteTests/#description","text":"In this step the ( UIVeri5 tests ) are executed.","title":"Description"},{"location":"steps/uiVeri5ExecuteTests/#usage","text":"We recommend to define values of step parameters via .pipeline/config.yml file . In this case, calling the step is essentially reduced to defining the step name. Calling the step can be done either in an orchestrator specific way (e.g. via a Jenkins library step) or on the command line. Jenkins Command Line library ( 'piper-lib-os' ) uiVeri5ExecuteTests script: this piper uiVeri5ExecuteTests","title":"Usage"},{"location":"steps/uiVeri5ExecuteTests/#outputs","text":"Output type Details","title":"Outputs"},{"location":"steps/uiVeri5ExecuteTests/#prerequisites","text":"","title":"Prerequisites"},{"location":"steps/uiVeri5ExecuteTests/#parameters","text":"","title":"Parameters"},{"location":"steps/uiVeri5ExecuteTests/#overview-step","text":"Name Mandatory Additional information script (yes) reference to Jenkins main pipeline script installCommand no runCommand no runOptions no testOptions no testServerUrl no verbose no activates debug output","title":"Overview - Step"},{"location":"steps/uiVeri5ExecuteTests/#overview-execution-environment","text":"Orchestrator-specific only These parameters are relevant for orchestrator usage and not considered when using the command line option. Name Mandatory Additional information containerCommand no containerName no containerShell no dockerEnvVars no dockerImage no dockerName no dockerOptions no dockerPullImage no dockerVolumeBind no dockerWorkspace no sidecarEnvVars no sidecarImage no sidecarName no sidecarOptions no sidecarPullImage no sidecarReadyCommand no sidecarVolumeBind no sidecarWorkspace no stashContent no","title":"Overview - Execution Environment"},{"location":"steps/uiVeri5ExecuteTests/#details","text":"","title":"Details"},{"location":"steps/uiVeri5ExecuteTests/#containercommand","text":"Jenkins-specific: Used for proper environment setup. Kubernetes only: Allows to specify start command for container created with dockerImage parameter to overwrite Piper default (/usr/bin/tail -f /dev/null). back to overview Scope Details Aliases - Type string Mandatory no Default Secret no Configuration scope \u2612 parameter \u2612 general \u2612 steps \u2612 stages Resource references none","title":"containerCommand"},{"location":"steps/uiVeri5ExecuteTests/#containername","text":"Jenkins-specific: Used for proper environment setup. Optional configuration in combination with containerMap to define the container where the commands should be executed in. back to overview Scope Details Aliases - Type string Mandatory no Default uiVeri5 Secret no Configuration scope \u2612 parameter \u2612 general \u2612 steps \u2612 stages Resource references none","title":"containerName"},{"location":"steps/uiVeri5ExecuteTests/#containershell","text":"Jenkins-specific: Used for proper environment setup. Allows to specify the shell to be executed for container with containerName. back to overview Scope Details Aliases - Type string Mandatory no Default Secret no Configuration scope \u2612 parameter \u2612 general \u2612 steps \u2612 stages Resource references none","title":"containerShell"},{"location":"steps/uiVeri5ExecuteTests/#dockerenvvars","text":"Environment variables to set in the container, e.g. [http_proxy: \"proxy:8080\"]. back to overview Scope Details Aliases - Type map[string]string Mandatory no Default map[NO_PROXY:localhost,selenium,$NO_PROXY no_proxy:localhost,selenium,$no_proxy] Secret no Configuration scope \u2612 parameter \u2612 general \u2612 steps \u2612 stages Resource references none","title":"dockerEnvVars"},{"location":"steps/uiVeri5ExecuteTests/#dockerimage","text":"Name of the docker image that should be used. If empty, Docker is not used and the command is executed directly on the Jenkins system. back to overview Scope Details Aliases - Type string Mandatory no Default node:22-bookworm Secret no Configuration scope \u2612 parameter \u2612 general \u2612 steps \u2612 stages Resource references none","title":"dockerImage"},{"location":"steps/uiVeri5ExecuteTests/#dockername","text":"Kubernetes only: Name of the container launching dockerImage. SideCar only: Name of the container in local network. back to overview Scope Details Aliases - Type string Mandatory no Default uiVeri5 Secret no Configuration scope \u2612 parameter \u2612 general \u2612 steps \u2612 stages Resource references none","title":"dockerName"},{"location":"steps/uiVeri5ExecuteTests/#dockeroptions","text":"Docker options to be set when starting the container. back to overview Scope Details Aliases - Type []string Mandatory no Default Secret no Configuration scope \u2612 parameter \u2612 general \u2612 steps \u2612 stages Resource references none","title":"dockerOptions"},{"location":"steps/uiVeri5ExecuteTests/#dockerpullimage","text":"Set this to 'false' to bypass a docker image pull. Useful during development process. Allows testing of images which are available in the local registry only. back to overview Scope Details Aliases - Type bool Mandatory no Default true Possible values - true - false Secret no Configuration scope \u2612 parameter \u2612 general \u2612 steps \u2612 stages Resource references none","title":"dockerPullImage"},{"location":"steps/uiVeri5ExecuteTests/#dockervolumebind","text":"Jenkins-specific: Used for proper environment setup. Volumes that should be mounted into the docker container. back to overview Scope Details Aliases - Type map[string]string Mandatory no Default Secret no Configuration scope \u2612 parameter \u2612 general \u2612 steps \u2612 stages Resource references none","title":"dockerVolumeBind"},{"location":"steps/uiVeri5ExecuteTests/#dockerworkspace","text":"Jenkins-specific: Used for proper environment setup. Kubernetes only: Specifies a dedicated user home directory for the container which will be passed as value for environment variable HOME . back to overview Scope Details Aliases - Type string Mandatory no Default /home/node Secret no Configuration scope \u2612 parameter \u2612 general \u2612 steps \u2612 stages Resource references none","title":"dockerWorkspace"},{"location":"steps/uiVeri5ExecuteTests/#installcommand","text":"The command that is executed to install the uiveri5 test tool. back to overview Scope Details Aliases - Type string Mandatory no Default npm install @ui5/uiveri5 --global --quiet Secret no Configuration scope \u2612 parameter \u2612 general \u2612 steps \u2612 stages Resource references none","title":"installCommand"},{"location":"steps/uiVeri5ExecuteTests/#runcommand","text":"The command that is executed to start the tests. back to overview Scope Details Aliases - Type string Mandatory no Default /home/node/.npm-global/bin/uiveri5 Secret no Configuration scope \u2612 parameter \u2612 general \u2612 steps \u2612 stages Resource references none","title":"runCommand"},{"location":"steps/uiVeri5ExecuteTests/#runoptions","text":"Options to append to the runCommand, last parameter has to be path to conf.js (default if missing: ./conf.js). back to overview Scope Details Aliases - Type []string Mandatory no Default - --seleniumAddress=http://localhost:4444/wd/hub Secret no Configuration scope \u2612 parameter \u2610 general \u2612 steps \u2612 stages Resource references none","title":"runOptions"},{"location":"steps/uiVeri5ExecuteTests/#script","text":"The common script environment of the Jenkinsfile running. Typically the reference to the script calling the pipeline step is provided with the this parameter, as in script: this . This allows the function to access the commonPipelineEnvironment for retrieving, e.g. configuration parameters. back to overview Scope Details Aliases - Type Jenkins Script Mandatory yes Default Secret no Configuration scope \u2610 parameter \u2610 general \u2610 steps \u2610 stages Resource references none","title":"script"},{"location":"steps/uiVeri5ExecuteTests/#sidecarenvvars","text":"A map of environment variables to set in the sidecar container, similar to dockerEnvVars . back to overview Scope Details Aliases - Type map[string]string Mandatory no Default Secret no Configuration scope \u2612 parameter \u2612 general \u2612 steps \u2612 stages Resource references none","title":"sidecarEnvVars"},{"location":"steps/uiVeri5ExecuteTests/#sidecarimage","text":"The name of the docker image of the sidecar container. If empty, no sidecar container is started. Similar to dockerImage . back to overview Scope Details Aliases - Type string Mandatory no Default Secret no Configuration scope \u2612 parameter \u2612 general \u2612 steps \u2612 stages Resource references none","title":"sidecarImage"},{"location":"steps/uiVeri5ExecuteTests/#sidecarname","text":"Name of the sidecar container. Similar to dockerName . back to overview Scope Details Aliases - Type string Mandatory no Default Secret no Configuration scope \u2612 parameter \u2612 general \u2612 steps \u2612 stages Resource references none","title":"sidecarName"},{"location":"steps/uiVeri5ExecuteTests/#sidecaroptions","text":"Options to be set when starting the sidecar container. Similar to dockerOptions . back to overview Scope Details Aliases - Type []string Mandatory no Default Secret no Configuration scope \u2612 parameter \u2612 general \u2612 steps \u2612 stages Resource references none","title":"sidecarOptions"},{"location":"steps/uiVeri5ExecuteTests/#sidecarpullimage","text":"Set this to 'false' to bypass a docker image pull. Useful during development process. Allows testing of images which are available in the local registry only. back to overview Scope Details Aliases - Type bool Mandatory no Default false Possible values - true - false Secret no Configuration scope \u2612 parameter \u2612 general \u2612 steps \u2612 stages Resource references none","title":"sidecarPullImage"},{"location":"steps/uiVeri5ExecuteTests/#sidecarreadycommand","text":"Jenkins-specific: Used for proper environment setup. Command executed inside the container which returns exit code 0 when the container is ready to be used. back to overview Scope Details Aliases - Type string Mandatory no Default Secret no Configuration scope \u2612 parameter \u2612 general \u2612 steps \u2612 stages Resource references none","title":"sidecarReadyCommand"},{"location":"steps/uiVeri5ExecuteTests/#sidecarvolumebind","text":"Volumes that should be mounted into the sidecar container. Similar to dockerVolumeBind . back to overview Scope Details Aliases - Type map[string]string Mandatory no Default Secret no Configuration scope \u2612 parameter \u2612 general \u2612 steps \u2612 stages Resource references none","title":"sidecarVolumeBind"},{"location":"steps/uiVeri5ExecuteTests/#sidecarworkspace","text":"Jenkins-specific: Used for proper environment setup. back to overview Scope Details Aliases - Type string Mandatory no Default Secret no Configuration scope \u2612 parameter \u2612 general \u2612 steps \u2612 stages Resource references none","title":"sidecarWorkspace"},{"location":"steps/uiVeri5ExecuteTests/#stashcontent","text":"Jenkins-specific: Used for proper environment setup. Specific stashes that should be considered for the step execution. back to overview Scope Details Aliases - Type []string Mandatory no Default - buildDescriptor - tests Secret no Configuration scope \u2612 parameter \u2612 general \u2612 steps \u2612 stages Resource references none","title":"stashContent"},{"location":"steps/uiVeri5ExecuteTests/#testoptions","text":"Deprecated and will result in an error if set. Please use runOptions instead. Split the testOptions string at the whitespaces when migrating it into a list of runOptions. back to overview Scope Details Aliases - Type string Mandatory no Default $PIPER_testOptions (if set) Secret no Configuration scope \u2612 parameter \u2610 general \u2612 steps \u2612 stages Resource references none","title":"testOptions"},{"location":"steps/uiVeri5ExecuteTests/#testserverurl","text":"URL pointing to the deployment. back to overview Scope Details Aliases - Type string Mandatory no Default $PIPER_testServerUrl (if set) Secret no Configuration scope \u2612 parameter \u2610 general \u2612 steps \u2612 stages Resource references none","title":"testServerUrl"},{"location":"steps/uiVeri5ExecuteTests/#verbose","text":"verbose output back to overview Scope Details Aliases - Type bool Mandatory no Default false Possible values - true - false Secret no Configuration scope \u2612 parameter \u2612 general \u2612 steps \u2612 stages Resource references none","title":"verbose"},{"location":"steps/uiVeri5ExecuteTests/#exceptions","text":"The parameter testOptions is deprecated and is replaced by array type parameter runOptions . Groovy templating for this parameter is deprecated and no longer supported. Using the runOptions parameter the 'seleniumAddress' for UIVeri5 can be set. The former groovy implementation included a default for seleniumAddress in the runCommand. Since this is not possible with the golang-based implementation, the seleniumAddress has to be added to the runOptions. For jenkins on kubernetes the host is 'localhost', in other environments, e.g. native jenkins installations, the host can be set to 'selenium'. runOptions : [ \"--seleniumAddress=http://localhost:4444/wd/hub\" , ..... ] The parameter failOnError is no longer supported on the step due to strategic reasons of pipeline resilience. To achieve the former behaviour with failOnError: false configured, the step can be wrapped using try/catch in your custom pipeline script. The installCommand does not support queueing shell commands using && and | operator any longer. If you see an error like fatal: Not a git repository (or any parent up to mount point /home/jenkins) it is likely that your test description cannot be found. Please make sure to point parameter runOptions to your conf.js file like runOptions: [...., './path/to/my/tests/conf.js']","title":"Exceptions"},{"location":"steps/uiVeri5ExecuteTests/#examples","text":"","title":"Examples"},{"location":"steps/uiVeri5ExecuteTests/#passing-credentials-from-jenkins","text":"When running acceptance tests in a real environment, authentication will be enabled in most cases. UIVeri5 includes features to automatically perform the login with credentials in the conf.js . However, having credentials to the acceptance system stored in plain text is not an optimal solution. Therefore, UIVeri5 allows templating to set parameters at runtime, as shown in the following example conf.js : // Read environment variables const defaultParams = { url : process . env . TARGET_SERVER_URL , user : process . env . TEST_USER , pass : process . env . TEST_PASS }; // Resolve path to specs relative to the working directory const path = require ( 'path' ); const specs = path . relative ( process . cwd (), path . join ( __dirname , '*.spec.js' )); // export UIVeri5 config exports . config = { profile : 'integration' , baseUrl : '\\${params.url}' , specs : specs , params : defaultParams , // can be overridden via cli `--params.<key>=<value>` auth : { // set up authorization for CF XSUAA 'sapcloud-form' : { user : '\\${params.user}' , pass : '\\${params.pass}' , userFieldSelector : 'input[id=\"j_username\"]' , passFieldSelector : 'input[id=\"j_password\"]' , logonButtonSelector : 'button[type=\"submit\"]' , redirectUrl : /cp.portal\\/site/ } } }; While default values for baseUrl , user and pass are read from the environment, they can also be overridden when calling the CLI. In a custom Pipeline, this is very simple: Just wrap the call to uiVeri5ExecuteTests in withCredentials : withCredentials ([ usernamePassword ( credentialsId: 'MY_ACCEPTANCE_CREDENTIALS' , passwordVariable: 'password' , usernameVariable: 'username' )]) { uiVeri5ExecuteTests script: this , runOptions: [ \"--baseURL=NEW_BASE_URL\" , \"--params.user=${username}\" , \"--params.pass=${password}\" , \"--seleniumAddress=http://localhost:4444/wd/hub\" , \"./uiveri5/conf.js\" ] } Please note: It is not recommended to override any secrets with the runOptions, because they may be seen in the Jenkins pipeline run console output. During the withCredentials call, the credentials are written to the environment and can be accessed by the test code. The following example shows the recommended way to handle the username and password for a uiVeri5ExecuteTests call that needs authentication. The passwordVariable and usernameVariable need to match the environment variables in the test code. withCredentials ([ usernamePassword ( credentialsId: 'MY_ACCEPTANCE_CREDENTIALS' , passwordVariable: 'TEST_PASS' , usernameVariable: 'TEST_USER' )]) { uiVeri5ExecuteTests script: this , runOptions: [ \"--seleniumAddress=http://localhost:4444/wd/hub\" , \"./uiveri5/conf.js\" ] } There is also the option to use vault for test credentials . In a Pipeline Template, a Stage Exit can be used to fetch the credentials and store them in the environment. As the environment is passed down to uiVeri5ExecuteTests, the variables will be present there. This is an example for the stage exit .pipeline/extensions/Acceptance.groovy where the credentialsId is read from the config.yml : void call ( Map params ) { // read username and password from the credential store withCredentials ([ usernamePassword ( credentialsId: params . config . acceptanceCredentialsId , passwordVariable: 'password' , usernameVariable: 'username' )]) { // store the result in the environment variables for executeUIVeri5Test withEnv ([ \"TEST_USER=\\${username}\" , \"TEST_PASS=\\${password}\" ]) { //execute original stage as defined in the template params . originalStage () } } } return this","title":"Passing credentials from Jenkins"},{"location":"steps/vaultRotateSecretId/","text":"vaultRotateSecretId \u00b6 Rotate Vault AppRole Secret ID Description \u00b6 This step takes the given Vault secret ID and checks whether it needs to be renewed and if so it will update the secret ID in the configured secret store. Usage \u00b6 We recommend to define values of step parameters via .pipeline/config.yml file . In this case, calling the step is essentially reduced to defining the step name. Calling the step can be done either in an orchestrator specific way (e.g. via a Jenkins library step) or on the command line. Jenkins Command Line library ( 'piper-lib-os' ) vaultRotateSecretId script: this piper vaultRotateSecretId Prerequisites \u00b6 Parameters \u00b6 Overview - Step \u00b6 Name Mandatory Additional information githubToken (yes) pass via ENV, Vault or Jenkins credentials mandatory in case of: - secretStore = github script (yes) reference to Jenkins main pipeline script vaultAppRoleSecretTokenCredentialsId yes vaultServerUrl yes adoOrganization no adoPersonalAccessToken no pass via ENV, Vault or Jenkins credentials adoPipelineId no adoProject no daysBeforeExpiry no githubApiUrl no jenkinsCredentialDomain no jenkinsToken no pass via ENV, Vault or Jenkins credentials jenkinsUrl no pass via ENV, Vault or Jenkins credentials jenkinsUsername no pass via ENV, Vault or Jenkins credentials owner no repository no secretStore no vaultNamespace no verbose no activates debug output Overview - Execution Environment \u00b6 Orchestrator-specific only These parameters are relevant for orchestrator usage and not considered when using the command line option. Name Mandatory Additional information Details \u00b6 adoOrganization \u00b6 The Azure DevOps organization name back to overview Scope Details Aliases - Type string Mandatory no Default $PIPER_adoOrganization (if set) Secret no Configuration scope \u2612 parameter \u2612 general \u2612 steps \u2612 stages Resource references none adoPersonalAccessToken \u00b6 The Azure DevOps personal access token back to overview Scope Details Aliases token Type string Mandatory no Default $PIPER_adoPersonalAccessToken (if set) Secret yes Configuration scope \u2612 parameter \u2610 general \u2612 steps \u2612 stages Resource references Vault resource: name: azureDevOpsVaultSecretName default value: azure-dev-ops Vault paths: $(vaultPath)/azure-dev-ops $(vaultBasePath)/$(vaultPipelineName)/azure-dev-ops $(vaultBasePath)/GROUP-SECRETS/azure-dev-ops adoPipelineId \u00b6 The Azure DevOps pipeline ID. Also called as definition ID back to overview Scope Details Aliases - Type int Mandatory no Default 0 Secret no Configuration scope \u2612 parameter \u2610 general \u2612 steps \u2612 stages Resource references none adoProject \u00b6 The Azure DevOps project ID. Project name also can be used back to overview Scope Details Aliases - Type string Mandatory no Default $PIPER_adoProject (if set) Secret no Configuration scope \u2612 parameter \u2610 general \u2612 steps \u2612 stages Resource references none daysBeforeExpiry \u00b6 The amount of days before expiry until the secret ID gets rotated back to overview Scope Details Aliases - Type int Mandatory no Default 15 Secret no Configuration scope \u2612 parameter \u2610 general \u2612 steps \u2612 stages Resource references none githubApiUrl \u00b6 Set the GitHub API URL that corresponds to the pipeline repository back to overview Scope Details Aliases - Type string Mandatory no Default https://api.github.com Secret no Configuration scope \u2612 parameter \u2612 general \u2612 steps \u2612 stages Resource references none githubToken \u00b6 GitHub personal access token as per https://help.github.com/en/github/authenticating-to-github/creating-a-personal-access-token-for-the-command-line with the scope 'repo' back to overview Scope Details Aliases - access_token - token Type string Mandatory mandatory in case of: - secretStore = github Default $PIPER_githubToken (if set) Secret yes Configuration scope \u2612 parameter \u2612 general \u2612 steps \u2612 stages Resource references Vault resource: name: githubVaultSecretName default value: github Vault paths: $(vaultPath)/github $(vaultBasePath)/$(vaultPipelineName)/github $(vaultBasePath)/GROUP-SECRETS/github jenkinsCredentialDomain \u00b6 The jenkins credential domain which should be used back to overview Scope Details Aliases - Type string Mandatory no Default _ Secret no Configuration scope \u2612 parameter \u2610 general \u2612 steps \u2612 stages Resource references none jenkinsToken \u00b6 The jenkins token back to overview Scope Details Aliases token Type string Mandatory no Default $PIPER_jenkinsToken (if set) Secret yes Configuration scope \u2612 parameter \u2610 general \u2612 steps \u2612 stages Resource references Vault resource: name: jenkinsVaultSecretName default value: jenkins Vault paths: $(vaultPath)/jenkins $(vaultBasePath)/$(vaultPipelineName)/jenkins $(vaultBasePath)/GROUP-SECRETS/jenkins jenkinsUrl \u00b6 The jenkins url back to overview Scope Details Aliases url Type string Mandatory no Default $PIPER_jenkinsUrl (if set) Secret yes Configuration scope \u2612 parameter \u2610 general \u2612 steps \u2612 stages Resource references Vault resource: name: jenkinsVaultSecretName default value: jenkins Vault paths: $(vaultPath)/jenkins $(vaultBasePath)/$(vaultPipelineName)/jenkins $(vaultBasePath)/GROUP-SECRETS/jenkins jenkinsUsername \u00b6 The jenkins username back to overview Scope Details Aliases userId Type string Mandatory no Default $PIPER_jenkinsUsername (if set) Secret yes Configuration scope \u2612 parameter \u2610 general \u2612 steps \u2612 stages Resource references Vault resource: name: jenkinsVaultSecretName default value: jenkins Vault paths: $(vaultPath)/jenkins $(vaultBasePath)/$(vaultPipelineName)/jenkins $(vaultBasePath)/GROUP-SECRETS/jenkins owner \u00b6 Owner of the pipeline GitHub repository back to overview Scope Details Aliases - Type string Mandatory no Default $PIPER_owner (if set) Secret no Configuration scope \u2612 parameter \u2612 general \u2612 steps \u2612 stages Resource references commonPipelineEnvironment : reference to: github/owner repository \u00b6 Name of the pipeline GitHub repository back to overview Scope Details Aliases - Type string Mandatory no Default $PIPER_repository (if set) Secret no Configuration scope \u2612 parameter \u2612 general \u2612 steps \u2612 stages Resource references commonPipelineEnvironment : reference to: github/repository script \u00b6 The common script environment of the Jenkinsfile running. Typically the reference to the script calling the pipeline step is provided with the this parameter, as in script: this . This allows the function to access the commonPipelineEnvironment for retrieving, e.g. configuration parameters. back to overview Scope Details Aliases - Type Jenkins Script Mandatory yes Default Secret no Configuration scope \u2610 parameter \u2610 general \u2610 steps \u2610 stages Resource references none secretStore \u00b6 The store to which the secret should be written back to back to overview Scope Details Aliases - Type string Mandatory no Default jenkins Possible values - jenkins - ado - github Secret no Configuration scope \u2612 parameter \u2610 general \u2612 steps \u2612 stages Resource references none vaultAppRoleSecretTokenCredentialsId \u00b6 The Jenkins credential ID, Azure DevOps variable name, or GitHub Actions secret name for the Vault AppRole Secret ID credential back to overview Scope Details Aliases - Type string Mandatory yes Default $PIPER_vaultAppRoleSecretTokenCredentialsId (if set) Secret no Configuration scope \u2612 parameter \u2612 general \u2612 steps \u2612 stages Resource references none vaultNamespace \u00b6 The Vault namespace that should be used (optional) back to overview Scope Details Aliases - Type string Mandatory no Default $PIPER_vaultNamespace (if set) Secret no Configuration scope \u2612 parameter \u2612 general \u2612 steps \u2612 stages Resource references none vaultServerUrl \u00b6 The URL for the Vault server to use back to overview Scope Details Aliases - Type string Mandatory yes Default $PIPER_vaultServerUrl (if set) Secret no Configuration scope \u2612 parameter \u2612 general \u2612 steps \u2612 stages Resource references none verbose \u00b6 verbose output back to overview Scope Details Aliases - Type bool Mandatory no Default false Possible values - true - false Secret no Configuration scope \u2612 parameter \u2612 general \u2612 steps \u2612 stages Resource references none Exceptions \u00b6 none Examples \u00b6","title":"vaultRotateSecretId"},{"location":"steps/vaultRotateSecretId/#vaultrotatesecretid","text":"Rotate Vault AppRole Secret ID","title":"vaultRotateSecretId"},{"location":"steps/vaultRotateSecretId/#description","text":"This step takes the given Vault secret ID and checks whether it needs to be renewed and if so it will update the secret ID in the configured secret store.","title":"Description"},{"location":"steps/vaultRotateSecretId/#usage","text":"We recommend to define values of step parameters via .pipeline/config.yml file . In this case, calling the step is essentially reduced to defining the step name. Calling the step can be done either in an orchestrator specific way (e.g. via a Jenkins library step) or on the command line. Jenkins Command Line library ( 'piper-lib-os' ) vaultRotateSecretId script: this piper vaultRotateSecretId","title":"Usage"},{"location":"steps/vaultRotateSecretId/#prerequisites","text":"","title":"Prerequisites"},{"location":"steps/vaultRotateSecretId/#parameters","text":"","title":"Parameters"},{"location":"steps/vaultRotateSecretId/#overview-step","text":"Name Mandatory Additional information githubToken (yes) pass via ENV, Vault or Jenkins credentials mandatory in case of: - secretStore = github script (yes) reference to Jenkins main pipeline script vaultAppRoleSecretTokenCredentialsId yes vaultServerUrl yes adoOrganization no adoPersonalAccessToken no pass via ENV, Vault or Jenkins credentials adoPipelineId no adoProject no daysBeforeExpiry no githubApiUrl no jenkinsCredentialDomain no jenkinsToken no pass via ENV, Vault or Jenkins credentials jenkinsUrl no pass via ENV, Vault or Jenkins credentials jenkinsUsername no pass via ENV, Vault or Jenkins credentials owner no repository no secretStore no vaultNamespace no verbose no activates debug output","title":"Overview - Step"},{"location":"steps/vaultRotateSecretId/#overview-execution-environment","text":"Orchestrator-specific only These parameters are relevant for orchestrator usage and not considered when using the command line option. Name Mandatory Additional information","title":"Overview - Execution Environment"},{"location":"steps/vaultRotateSecretId/#details","text":"","title":"Details"},{"location":"steps/vaultRotateSecretId/#adoorganization","text":"The Azure DevOps organization name back to overview Scope Details Aliases - Type string Mandatory no Default $PIPER_adoOrganization (if set) Secret no Configuration scope \u2612 parameter \u2612 general \u2612 steps \u2612 stages Resource references none","title":"adoOrganization"},{"location":"steps/vaultRotateSecretId/#adopersonalaccesstoken","text":"The Azure DevOps personal access token back to overview Scope Details Aliases token Type string Mandatory no Default $PIPER_adoPersonalAccessToken (if set) Secret yes Configuration scope \u2612 parameter \u2610 general \u2612 steps \u2612 stages Resource references Vault resource: name: azureDevOpsVaultSecretName default value: azure-dev-ops Vault paths: $(vaultPath)/azure-dev-ops $(vaultBasePath)/$(vaultPipelineName)/azure-dev-ops $(vaultBasePath)/GROUP-SECRETS/azure-dev-ops","title":"adoPersonalAccessToken"},{"location":"steps/vaultRotateSecretId/#adopipelineid","text":"The Azure DevOps pipeline ID. Also called as definition ID back to overview Scope Details Aliases - Type int Mandatory no Default 0 Secret no Configuration scope \u2612 parameter \u2610 general \u2612 steps \u2612 stages Resource references none","title":"adoPipelineId"},{"location":"steps/vaultRotateSecretId/#adoproject","text":"The Azure DevOps project ID. Project name also can be used back to overview Scope Details Aliases - Type string Mandatory no Default $PIPER_adoProject (if set) Secret no Configuration scope \u2612 parameter \u2610 general \u2612 steps \u2612 stages Resource references none","title":"adoProject"},{"location":"steps/vaultRotateSecretId/#daysbeforeexpiry","text":"The amount of days before expiry until the secret ID gets rotated back to overview Scope Details Aliases - Type int Mandatory no Default 15 Secret no Configuration scope \u2612 parameter \u2610 general \u2612 steps \u2612 stages Resource references none","title":"daysBeforeExpiry"},{"location":"steps/vaultRotateSecretId/#githubapiurl","text":"Set the GitHub API URL that corresponds to the pipeline repository back to overview Scope Details Aliases - Type string Mandatory no Default https://api.github.com Secret no Configuration scope \u2612 parameter \u2612 general \u2612 steps \u2612 stages Resource references none","title":"githubApiUrl"},{"location":"steps/vaultRotateSecretId/#githubtoken","text":"GitHub personal access token as per https://help.github.com/en/github/authenticating-to-github/creating-a-personal-access-token-for-the-command-line with the scope 'repo' back to overview Scope Details Aliases - access_token - token Type string Mandatory mandatory in case of: - secretStore = github Default $PIPER_githubToken (if set) Secret yes Configuration scope \u2612 parameter \u2612 general \u2612 steps \u2612 stages Resource references Vault resource: name: githubVaultSecretName default value: github Vault paths: $(vaultPath)/github $(vaultBasePath)/$(vaultPipelineName)/github $(vaultBasePath)/GROUP-SECRETS/github","title":"githubToken"},{"location":"steps/vaultRotateSecretId/#jenkinscredentialdomain","text":"The jenkins credential domain which should be used back to overview Scope Details Aliases - Type string Mandatory no Default _ Secret no Configuration scope \u2612 parameter \u2610 general \u2612 steps \u2612 stages Resource references none","title":"jenkinsCredentialDomain"},{"location":"steps/vaultRotateSecretId/#jenkinstoken","text":"The jenkins token back to overview Scope Details Aliases token Type string Mandatory no Default $PIPER_jenkinsToken (if set) Secret yes Configuration scope \u2612 parameter \u2610 general \u2612 steps \u2612 stages Resource references Vault resource: name: jenkinsVaultSecretName default value: jenkins Vault paths: $(vaultPath)/jenkins $(vaultBasePath)/$(vaultPipelineName)/jenkins $(vaultBasePath)/GROUP-SECRETS/jenkins","title":"jenkinsToken"},{"location":"steps/vaultRotateSecretId/#jenkinsurl","text":"The jenkins url back to overview Scope Details Aliases url Type string Mandatory no Default $PIPER_jenkinsUrl (if set) Secret yes Configuration scope \u2612 parameter \u2610 general \u2612 steps \u2612 stages Resource references Vault resource: name: jenkinsVaultSecretName default value: jenkins Vault paths: $(vaultPath)/jenkins $(vaultBasePath)/$(vaultPipelineName)/jenkins $(vaultBasePath)/GROUP-SECRETS/jenkins","title":"jenkinsUrl"},{"location":"steps/vaultRotateSecretId/#jenkinsusername","text":"The jenkins username back to overview Scope Details Aliases userId Type string Mandatory no Default $PIPER_jenkinsUsername (if set) Secret yes Configuration scope \u2612 parameter \u2610 general \u2612 steps \u2612 stages Resource references Vault resource: name: jenkinsVaultSecretName default value: jenkins Vault paths: $(vaultPath)/jenkins $(vaultBasePath)/$(vaultPipelineName)/jenkins $(vaultBasePath)/GROUP-SECRETS/jenkins","title":"jenkinsUsername"},{"location":"steps/vaultRotateSecretId/#owner","text":"Owner of the pipeline GitHub repository back to overview Scope Details Aliases - Type string Mandatory no Default $PIPER_owner (if set) Secret no Configuration scope \u2612 parameter \u2612 general \u2612 steps \u2612 stages Resource references commonPipelineEnvironment : reference to: github/owner","title":"owner"},{"location":"steps/vaultRotateSecretId/#repository","text":"Name of the pipeline GitHub repository back to overview Scope Details Aliases - Type string Mandatory no Default $PIPER_repository (if set) Secret no Configuration scope \u2612 parameter \u2612 general \u2612 steps \u2612 stages Resource references commonPipelineEnvironment : reference to: github/repository","title":"repository"},{"location":"steps/vaultRotateSecretId/#script","text":"The common script environment of the Jenkinsfile running. Typically the reference to the script calling the pipeline step is provided with the this parameter, as in script: this . This allows the function to access the commonPipelineEnvironment for retrieving, e.g. configuration parameters. back to overview Scope Details Aliases - Type Jenkins Script Mandatory yes Default Secret no Configuration scope \u2610 parameter \u2610 general \u2610 steps \u2610 stages Resource references none","title":"script"},{"location":"steps/vaultRotateSecretId/#secretstore","text":"The store to which the secret should be written back to back to overview Scope Details Aliases - Type string Mandatory no Default jenkins Possible values - jenkins - ado - github Secret no Configuration scope \u2612 parameter \u2610 general \u2612 steps \u2612 stages Resource references none","title":"secretStore"},{"location":"steps/vaultRotateSecretId/#vaultapprolesecrettokencredentialsid","text":"The Jenkins credential ID, Azure DevOps variable name, or GitHub Actions secret name for the Vault AppRole Secret ID credential back to overview Scope Details Aliases - Type string Mandatory yes Default $PIPER_vaultAppRoleSecretTokenCredentialsId (if set) Secret no Configuration scope \u2612 parameter \u2612 general \u2612 steps \u2612 stages Resource references none","title":"vaultAppRoleSecretTokenCredentialsId"},{"location":"steps/vaultRotateSecretId/#vaultnamespace","text":"The Vault namespace that should be used (optional) back to overview Scope Details Aliases - Type string Mandatory no Default $PIPER_vaultNamespace (if set) Secret no Configuration scope \u2612 parameter \u2612 general \u2612 steps \u2612 stages Resource references none","title":"vaultNamespace"},{"location":"steps/vaultRotateSecretId/#vaultserverurl","text":"The URL for the Vault server to use back to overview Scope Details Aliases - Type string Mandatory yes Default $PIPER_vaultServerUrl (if set) Secret no Configuration scope \u2612 parameter \u2612 general \u2612 steps \u2612 stages Resource references none","title":"vaultServerUrl"},{"location":"steps/vaultRotateSecretId/#verbose","text":"verbose output back to overview Scope Details Aliases - Type bool Mandatory no Default false Possible values - true - false Secret no Configuration scope \u2612 parameter \u2612 general \u2612 steps \u2612 stages Resource references none","title":"verbose"},{"location":"steps/vaultRotateSecretId/#exceptions","text":"none","title":"Exceptions"},{"location":"steps/vaultRotateSecretId/#examples","text":"","title":"Examples"},{"location":"steps/whitesourceExecuteScan/","text":"whitesourceExecuteScan \u00b6 Execute a Mend (formerly known as WhiteSource) scan Description \u00b6 With this step Mend (formerly known as Whitesource) security and license compliance scans can be executed and assessed. Mend is a Software as a Service offering based on a so called unified agent that locally determines the dependency tree of a node.js, Java, Python, Ruby, or Scala based solution and sends it to the WhiteSource server for a policy based license compliance check and additional Free and Open Source Software Publicly Known Vulnerabilities detection. The step uses the so-called Mend Unified Agent. For details please refer to the Mend Unified Agent Documentation . Docker Images The underlying Docker images are public and specific to the solution's programming language(s) and therefore may have to be exchanged to fit to and support the relevant scenario. The default Python environment used is i.e. Python 3 based. Usage \u00b6 We recommend to define values of step parameters via .pipeline/config.yml file . In this case, calling the step is essentially reduced to defining the step name. Calling the step can be done either in an orchestrator specific way (e.g. via a Jenkins library step) or on the command line. Jenkins Command Line library ( 'piper-lib-os' ) whitesourceExecuteScan script: this piper whitesourceExecuteScan Outputs \u00b6 Output type Details commonPipelineEnvironment custom/whitesourceProjectNames influx measurement step_data whitesource measurement whitesource_data vulnerabilities major_vulnerabilities minor_vulnerabilities policy_violations Prerequisites \u00b6 Your company has registered an account with WhiteSource and you have enabled the use of so called User Keys to manage access to your organization in WhiteSource via dedicated privileges. Scanning your products without adequate user level access protection imposed on the WhiteSource backend would simply allow access based on the organization token. Parameters \u00b6 Overview - Step \u00b6 Name Mandatory Additional information buildTool yes orgToken (yes) pass via ENV, Vault or Jenkins credentials ( orgAdminUserTokenCredentialsId ) script (yes) reference to Jenkins main pipeline script userToken (yes) pass via ENV, Vault or Jenkins credentials ( userTokenCredentialsId ) SkipProjectsWithEmptyTokens no activateMultipleImagesScan no agentDownloadUrl no agentFileName no agentParameters no agentUrl no aggregateVersionWideReport no assessmentFile no assignees no buildDescriptorExcludeList no buildDescriptorFile no configFilePath no containerRegistryPassword no pass via ENV or Jenkins credentials containerRegistryUser no pass via ENV or Jenkins credentials createProductFromPipeline no createResultIssue no customScanVersion no customTlsCertificateLinks no cvssSeverityLimit no defaultNpmRegistry no disableNpmSubmodulesAggregation no dockerConfigJSON no pass via ENV, Vault or Jenkins credentials ( dockerConfigJsonCredentialsId ) emailAddressesOfInitialProductAdmins no excludes no failOnSevereVulnerabilities no githubApiUrl no githubToken no pass via ENV, Vault or Jenkins credentials ( githubTokenCredentialsId ) globalSettingsFile no includes no installArtifacts no installCommand no jreDownloadUrl no licensingVulnerabilities no m2Path no npmIncludeDevDependencies no owner no privateModules no privateModulesGitToken no pass via ENV, Vault or Jenkins credentials ( golangPrivateModulesGitTokenCredentialsId ) productName no productToken no projectName no projectSettingsFile no projectToken no reporting no repository no scanImage no scanImageRegistryUrl no scanImages no scanPath no securityVulnerabilities no serviceUrl no skipParentProjectResolution no timeout no useGlobalConfiguration no verbose no activates debug output version no versioningModel no vulnerabilityReportFormat no vulnerabilityReportTitle no Overview - Execution Environment \u00b6 Orchestrator-specific only These parameters are relevant for orchestrator usage and not considered when using the command line option. Name Mandatory Additional information containerCommand no containerShell no dockerEnvVars no dockerImage no dockerName no dockerOptions no dockerPullImage no dockerVolumeBind no dockerWorkspace no stashContent no Details \u00b6 SkipProjectsWithEmptyTokens \u00b6 Skips projects with empty tokens after scanning. This is for testing purposes only and should not be used until we roll out the new parameter back to overview Scope Details Aliases - Type bool Mandatory no Default false Possible values - true - false Secret no Configuration scope \u2612 parameter \u2612 general \u2612 steps \u2612 stages Resource references none activateMultipleImagesScan \u00b6 Use this parameter to activate the scan of multiple images. Additionally you'll need to provide skipParentProjectResolution and scanImages parameters back to overview Scope Details Aliases - Type bool Mandatory no Default false Possible values - true - false Secret no Configuration scope \u2612 parameter \u2610 general \u2612 steps \u2612 stages Resource references none agentDownloadUrl \u00b6 URL used to download the latest version of the WhiteSource Unified Agent. back to overview Scope Details Aliases - Type string Mandatory no Default https://downloads.mend.io/wss-unified-agent.jar Secret no Configuration scope \u2612 parameter \u2610 general \u2612 steps \u2612 stages Resource references none agentFileName \u00b6 Locally used name for the Unified Agent jar file after download. back to overview Scope Details Aliases - Type string Mandatory no Default wss-unified-agent.jar Secret no Configuration scope \u2612 parameter \u2610 general \u2612 steps \u2612 stages Resource references none agentParameters \u00b6 [NOT IMPLEMENTED] List of additional parameters passed to the Unified Agent command line. back to overview Scope Details Aliases - Type []string Mandatory no Default $PIPER_agentParameters (if set) Secret no Configuration scope \u2612 parameter \u2610 general \u2612 steps \u2612 stages Resource references none agentUrl \u00b6 URL to the WhiteSource agent endpoint. back to overview Scope Details Aliases whitesourceAgentUrl Type string Mandatory no Default https://saas.whitesourcesoftware.com/agent Secret no Configuration scope \u2612 parameter \u2612 general \u2612 steps \u2612 stages Resource references none aggregateVersionWideReport \u00b6 This does not run a scan, instead just generated a report for all projects with projectVersion = config.ProductVersion back to overview Scope Details Aliases - Type bool Mandatory no Default false Possible values - true - false Secret no Configuration scope \u2612 parameter \u2610 general \u2612 steps \u2612 stages Resource references none assessmentFile \u00b6 Explicit path to the assessment YAML file. back to overview Scope Details Aliases - Type string Mandatory no Default hs-assessments.yaml Secret no Configuration scope \u2612 parameter \u2610 general \u2612 steps \u2612 stages Resource references none assignees \u00b6 Defines the assignees for the Github Issue created/updated with the results of the scan as a list of login names. back to overview Scope Details Aliases - Type []string Mandatory no Default Secret no Configuration scope \u2612 parameter \u2610 general \u2612 steps \u2612 stages Resource references none buildDescriptorExcludeList \u00b6 List of build descriptors and therefore modules to exclude from the scan and assessment activities. back to overview Scope Details Aliases - Type []string Mandatory no Default - unit-tests/pom.xml - integration-tests/pom.xml Secret no Configuration scope \u2612 parameter \u2610 general \u2612 steps \u2612 stages Resource references none buildDescriptorFile \u00b6 Explicit path to the build descriptor file. back to overview Scope Details Aliases - Type string Mandatory no Default $PIPER_buildDescriptorFile (if set) Secret no Configuration scope \u2612 parameter \u2610 general \u2612 steps \u2612 stages Resource references none buildTool \u00b6 Defines the tool which is used for building the artifact. back to overview Scope Details Aliases - Type string Mandatory yes Default $PIPER_buildTool (if set) Secret no Configuration scope \u2612 parameter \u2612 general \u2612 steps \u2612 stages Resource references commonPipelineEnvironment : reference to: buildTool configFilePath \u00b6 Explicit path to the WhiteSource Unified Agent configuration file. back to overview Scope Details Aliases - Type string Mandatory no Default ./wss-unified-agent.config Secret no Configuration scope \u2612 parameter \u2610 general \u2612 steps \u2612 stages Resource references none containerCommand \u00b6 Jenkins-specific: Used for proper environment setup. Kubernetes only: Allows to specify start command for container created with dockerImage parameter to overwrite Piper default (/usr/bin/tail -f /dev/null). back to overview Scope Details Aliases - Type string Mandatory no Default Secret no Configuration scope \u2612 parameter \u2612 general \u2612 steps \u2612 stages Resource references none containerRegistryPassword \u00b6 For buildTool: docker : Password for container registry access - typically provided by the CI/CD environment. back to overview Scope Details Aliases - Type string Mandatory no Default $PIPER_containerRegistryPassword (if set) Secret yes Configuration scope \u2612 parameter \u2610 general \u2612 steps \u2612 stages Resource references commonPipelineEnvironment : reference to: container/repositoryPassword commonPipelineEnvironment : reference to: custom/repositoryPassword containerRegistryUser \u00b6 For buildTool: docker : Username for container registry access - typically provided by the CI/CD environment. back to overview Scope Details Aliases - Type string Mandatory no Default $PIPER_containerRegistryUser (if set) Secret yes Configuration scope \u2612 parameter \u2610 general \u2612 steps \u2612 stages Resource references commonPipelineEnvironment : reference to: container/repositoryUsername commonPipelineEnvironment : reference to: custom/repositoryUsername containerShell \u00b6 Jenkins-specific: Used for proper environment setup. Allows to specify the shell to be executed for container with containerName. back to overview Scope Details Aliases - Type string Mandatory no Default Secret no Configuration scope \u2612 parameter \u2612 general \u2612 steps \u2612 stages Resource references none createProductFromPipeline \u00b6 Whether to create the related WhiteSource product on the fly based on the supplied pipeline configuration. back to overview Scope Details Aliases - Type bool Mandatory no Default true Possible values - true - false Secret no Configuration scope \u2612 parameter \u2610 general \u2612 steps \u2612 stages Resource references none createResultIssue \u00b6 Whether the step creates a GitHub issue containing the scan results in the originating repo. Since optimized pipelines are headless the creation is implicitly activated for scheduled runs. back to overview Scope Details Aliases - Type bool Mandatory no Default false Possible values - true - false Secret no Configuration scope \u2612 parameter \u2612 general \u2612 steps \u2612 stages Resource references commonPipelineEnvironment : reference to: custom/isOptimizedAndScheduled customScanVersion \u00b6 Defines a custom version for the WhiteSource scan which deviates from the typical versioning pattern using version and versioningModel . It allows to set non-numeric versions as well and supersedes the value of version which is calculated automatically. The parameter is also used by other scan steps (e.g. Detect, Fortify, Sonar) and thus allows a common custom version across scan tools. back to overview Scope Details Aliases - Type string Mandatory no Default $PIPER_customScanVersion (if set) Secret no Configuration scope \u2612 parameter \u2612 general \u2612 steps \u2612 stages Resource references none customTlsCertificateLinks \u00b6 List of download links to custom TLS certificates. This is required to ensure trusted connections to instances with repositories (like nexus) when publish flag is set to true. back to overview Scope Details Aliases - Type []string Mandatory no Default $PIPER_customTlsCertificateLinks (if set) Secret no Configuration scope \u2612 parameter \u2612 general \u2612 steps \u2612 stages Resource references none cvssSeverityLimit \u00b6 Limit of tolerable CVSS v3 score upon assessment and in consequence fails the build. A negative value (like the default of -1) means that the build won't fail. back to overview Scope Details Aliases - Type string Mandatory no Default -1 Secret no Configuration scope \u2612 parameter \u2610 general \u2612 steps \u2612 stages Resource references none defaultNpmRegistry \u00b6 URL of the npm registry to use. Defaults to https://registry.npmjs.org/ back to overview Scope Details Aliases npm/defaultNpmRegistry Type string Mandatory no Default $PIPER_defaultNpmRegistry (if set) Secret no Configuration scope \u2612 parameter \u2612 general \u2612 steps \u2612 stages Resource references none disableNpmSubmodulesAggregation \u00b6 The default Mend behavior is to aggregate all submodules of NPM project into one project in Mend. This parameter disables this behavior, thus for each submodule a separate project is created. back to overview Scope Details Aliases - Type bool Mandatory no Default false Possible values - true - false Secret no Configuration scope \u2612 parameter \u2612 general \u2612 steps \u2612 stages Resource references none dockerConfigJSON \u00b6 Path to the file .docker/config.json - this is typically provided by your CI/CD system. You can find more details about the Docker credentials in the Docker documentation . back to overview Scope Details Aliases - Type string Mandatory no Default $PIPER_dockerConfigJSON (if set) Secret yes Configuration scope \u2612 parameter \u2610 general \u2612 steps \u2612 stages Resource references commonPipelineEnvironment : reference to: custom/dockerConfigJSON Jenkins credential id: id: dockerConfigJsonCredentialsId Vault resource: name: dockerConfigFileVaultSecretName default value: docker-config Vault paths: $(vaultPath)/docker-config $(vaultBasePath)/$(vaultPipelineName)/docker-config $(vaultBasePath)/GROUP-SECRETS/docker-config dockerEnvVars \u00b6 Environment variables to set in the container, e.g. [http_proxy: \"proxy:8080\"]. back to overview Scope Details Aliases - Type map[string]string Mandatory no Default Secret no Configuration scope \u2612 parameter \u2612 general \u2612 steps \u2612 stages Resource references none dockerImage \u00b6 Name of the docker image that should be used. If empty, Docker is not used and the command is executed directly on the Jenkins system. back to overview Scope Details Aliases - Type string Mandatory no Default buildTool= dub : buildpack-deps:stretch-curl buildTool= docker : buildpack-deps:stretch-curl buildTool= mta : devxci/mbtci-java11-node14 buildTool= golang : golang:1 buildTool= gradle : gradle buildTool= sbt : hseeberger/scala-sbt:8u181_2.12.8_1.2.8 buildTool= maven : maven:3.5-jdk-8 buildTool= npm : node:22-bookworm buildTool= pip : python:3.6-stretch buildTool= yarn : node:22-bookworm Secret no Configuration scope \u2612 parameter \u2612 general \u2612 steps \u2612 stages Resource references none dockerName \u00b6 Kubernetes only: Name of the container launching dockerImage. SideCar only: Name of the container in local network. back to overview Scope Details Aliases - Type string Mandatory no Default Secret no Configuration scope \u2612 parameter \u2612 general \u2612 steps \u2612 stages Resource references none dockerOptions \u00b6 Docker options to be set when starting the container. back to overview Scope Details Aliases - Type []string Mandatory no Default buildTool= golang : [{-u 0}] Secret no Configuration scope \u2612 parameter \u2612 general \u2612 steps \u2612 stages Resource references none dockerPullImage \u00b6 Set this to 'false' to bypass a docker image pull. Useful during development process. Allows testing of images which are available in the local registry only. back to overview Scope Details Aliases - Type bool Mandatory no Default buildTool= dub : true buildTool= docker : true buildTool= mta : true buildTool= golang : true buildTool= gradle : true buildTool= sbt : true buildTool= maven : true buildTool= npm : true buildTool= pip : true buildTool= yarn : true Possible values - true - false Secret no Configuration scope \u2612 parameter \u2612 general \u2612 steps \u2612 stages Resource references none dockerVolumeBind \u00b6 Jenkins-specific: Used for proper environment setup. Volumes that should be mounted into the docker container. back to overview Scope Details Aliases - Type map[string]string Mandatory no Default Secret no Configuration scope \u2612 parameter \u2612 general \u2612 steps \u2612 stages Resource references none dockerWorkspace \u00b6 Jenkins-specific: Used for proper environment setup. Kubernetes only: Specifies a dedicated user home directory for the container which will be passed as value for environment variable HOME . back to overview Scope Details Aliases - Type string Mandatory no Default buildTool= dub : /tmp buildTool= docker : /tmp buildTool= mta : /home/mta buildTool= golang : /go buildTool= gradle : /home/gradle buildTool= sbt : /tmp buildTool= maven : /tmp buildTool= npm : /home/node buildTool= pip : /tmp buildTool= yarn : /home/node Secret no Configuration scope \u2612 parameter \u2612 general \u2612 steps \u2612 stages Resource references none emailAddressesOfInitialProductAdmins \u00b6 The list of email addresses to assign as product admins for newly created WhiteSource products. back to overview Scope Details Aliases - Type []string Mandatory no Default $PIPER_emailAddressesOfInitialProductAdmins (if set) Secret no Configuration scope \u2612 parameter \u2610 general \u2612 steps \u2612 stages Resource references none excludes \u00b6 List of file path patterns to exclude in the scan. back to overview Scope Details Aliases - Type []string Mandatory no Default $PIPER_excludes (if set) Secret no Configuration scope \u2612 parameter \u2610 general \u2612 steps \u2612 stages Resource references none failOnSevereVulnerabilities \u00b6 Whether to fail the step on severe vulnerabilties or not back to overview Scope Details Aliases - Type bool Mandatory no Default true Possible values - true - false Secret no Configuration scope \u2612 parameter \u2610 general \u2610 steps \u2610 stages Resource references none githubApiUrl \u00b6 Set the GitHub API URL. back to overview Scope Details Aliases - Type string Mandatory no Default https://api.github.com Secret no Configuration scope \u2612 parameter \u2612 general \u2612 steps \u2612 stages Resource references none githubToken \u00b6 GitHub personal access token as per https://help.github.com/en/github/authenticating-to-github/creating-a-personal-access-token-for-the-command-line back to overview Scope Details Aliases access_token Type string Mandatory no Default $PIPER_githubToken (if set) Secret yes Configuration scope \u2612 parameter \u2612 general \u2612 steps \u2612 stages Resource references Jenkins credential id: id: githubTokenCredentialsId Vault resource: name: githubVaultSecretName default value: github Vault paths: $(vaultPath)/github $(vaultBasePath)/$(vaultPipelineName)/github $(vaultBasePath)/GROUP-SECRETS/github globalSettingsFile \u00b6 Path to the mvn settings file that should be used as global settings file. back to overview Scope Details Aliases maven/globalSettingsFile Type string Mandatory no Default $PIPER_globalSettingsFile (if set) Secret no Configuration scope \u2612 parameter \u2612 general \u2612 steps \u2612 stages Resource references none includes \u00b6 List of file path patterns to include in the scan. back to overview Scope Details Aliases - Type []string Mandatory no Default $PIPER_includes (if set) Secret no Configuration scope \u2612 parameter \u2610 general \u2612 steps \u2612 stages Resource references none installArtifacts \u00b6 If enabled, all artifacts will be installed to the local Maven repository to ensure availability before running WhiteSource. Currently, this parameter is not honored in whitesourceExecuteScan step, as it is internally managed by UA with the 'runPreStep'. In the future, this parameter will be honored based on the individual build tool. back to overview Scope Details Aliases - Type bool Mandatory no Default false Possible values - true - false Secret no Configuration scope \u2612 parameter \u2612 general \u2612 steps \u2612 stages Resource references none installCommand \u00b6 Install command that can be used to populate the default docker image for some scenarios. back to overview Scope Details Aliases - Type string Mandatory no Default $PIPER_installCommand (if set) Secret no Configuration scope \u2612 parameter \u2610 general \u2612 steps \u2612 stages Resource references none jreDownloadUrl \u00b6 URL used for downloading the Java Runtime Environment (JRE) required to run the WhiteSource Unified Agent. back to overview Scope Details Aliases whitesource/jreDownloadUrl ( deprecated ) Type string Mandatory no Default https://github.com/SAP/SapMachine/releases/download/sapmachine-17.0.13/sapmachine-jre-17.0.13_linux-x64_bin.tar.gz Secret no Configuration scope \u2612 parameter \u2612 general \u2612 steps \u2612 stages Resource references none licensingVulnerabilities \u00b6 [NOT IMPLEMENTED] Whether license compliance is considered and reported as part of the assessment. back to overview Scope Details Aliases - Type bool Mandatory no Default true Possible values - true - false Secret no Configuration scope \u2612 parameter \u2610 general \u2612 steps \u2612 stages Resource references none m2Path \u00b6 Path to the location of the local repository that should be used. back to overview Scope Details Aliases maven/m2Path Type string Mandatory no Default $PIPER_m2Path (if set) Secret no Configuration scope \u2612 parameter \u2612 general \u2612 steps \u2612 stages Resource references none npmIncludeDevDependencies \u00b6 Enable this if you wish to include NPM DEV dependencies in the scan report back to overview Scope Details Aliases npm/includeDevDependencies Type bool Mandatory no Default false Possible values - true - false Secret no Configuration scope \u2612 parameter \u2612 general \u2612 steps \u2612 stages Resource references none orgToken \u00b6 WhiteSource token identifying your organization. back to overview Scope Details Aliases - whitesourceOrgToken - whitesource/orgToken ( deprecated ) Type string Mandatory yes Default $PIPER_orgToken (if set) Secret yes Configuration scope \u2612 parameter \u2612 general \u2612 steps \u2612 stages Resource references Jenkins credential id: id: orgAdminUserTokenCredentialsId Vault resource: name: whitesourceVaultSecret default value: whitesource Vault paths: $(vaultPath)/whitesource $(vaultBasePath)/$(vaultPipelineName)/whitesource $(vaultBasePath)/GROUP-SECRETS/whitesource owner \u00b6 Set the GitHub organization. back to overview Scope Details Aliases githubOrg Type string Mandatory no Default $PIPER_owner (if set) Secret no Configuration scope \u2612 parameter \u2612 general \u2612 steps \u2612 stages Resource references commonPipelineEnvironment : reference to: github/owner privateModules \u00b6 Tells go which modules shall be considered to be private (by setting GOPRIVATE ). back to overview Scope Details Aliases - Type string Mandatory no Default $PIPER_privateModules (if set) Secret no Configuration scope \u2612 parameter \u2612 general \u2612 steps \u2612 stages Resource references none privateModulesGitToken \u00b6 GitHub personal access token as per https://help.github.com/en/github/authenticating-to-github/creating-a-personal-access-token-for-the-command-line. back to overview Scope Details Aliases - Type string Mandatory no Default $PIPER_privateModulesGitToken (if set) Secret yes Configuration scope \u2612 parameter \u2612 general \u2612 steps \u2612 stages Resource references Jenkins credential id: id: golangPrivateModulesGitTokenCredentialsId reference to: password Vault resource: name: golangPrivateModulesGitTokenVaultSecret default value: golang Vault paths: $(vaultPath)/golang $(vaultBasePath)/$(vaultPipelineName)/golang $(vaultBasePath)/GROUP-SECRETS/golang productName \u00b6 Name of the WhiteSource product used for results aggregation. This parameter is mandatory if the parameter createProductFromPipeline is set to true and the WhiteSource product does not yet exist. It is also mandatory if the parameter productToken is not provided. back to overview Scope Details Aliases - whitesourceProductName - whitesource/productName ( deprecated ) Type string Mandatory no Default $PIPER_productName (if set) Secret no Configuration scope \u2612 parameter \u2612 general \u2612 steps \u2612 stages Resource references none productToken \u00b6 Token of the WhiteSource product to be created and used for results aggregation, usually determined automatically. Can optionally be provided as an alternative to productName . back to overview Scope Details Aliases - whitesourceProductToken - whitesource/productToken ( deprecated ) Type string Mandatory no Default $PIPER_productToken (if set) Secret no Configuration scope \u2612 parameter \u2612 general \u2612 steps \u2612 stages Resource references none projectName \u00b6 The project name used for reporting results in WhiteSource. When provided, all source modules will be scanned into one aggregated WhiteSource project. For scan types maven , mta , npm , the default is to generate one WhiteSource project per module, whereas the project name is derived from the module's build descriptor. For NPM modules, project aggregation is not supported, the last scanned NPM module will override all previously aggregated scan results! back to overview Scope Details Aliases whitesourceProjectName Type string Mandatory no Default $PIPER_projectName (if set) Secret no Configuration scope \u2612 parameter \u2610 general \u2612 steps \u2612 stages Resource references none projectSettingsFile \u00b6 Path to the mvn settings file that should be used as project settings file. back to overview Scope Details Aliases maven/projectSettingsFile Type string Mandatory no Default $PIPER_projectSettingsFile (if set) Secret no Configuration scope \u2612 parameter \u2612 general \u2612 steps \u2612 stages Resource references none projectToken \u00b6 Project token to execute scan on. Ignored for scan types maven , mta and npm . Used for project aggregation when scanning with the Unified Agent and can be provided as an alternative to projectName . back to overview Scope Details Aliases - Type string Mandatory no Default $PIPER_projectToken (if set) Secret no Configuration scope \u2612 parameter \u2612 general \u2612 steps \u2612 stages Resource references none reporting \u00b6 Whether assessment is being done at all, defaults to true back to overview Scope Details Aliases - Type bool Mandatory no Default true Possible values - true - false Secret no Configuration scope \u2612 parameter \u2610 general \u2612 steps \u2612 stages Resource references none repository \u00b6 Set the GitHub repository. back to overview Scope Details Aliases githubRepo Type string Mandatory no Default $PIPER_repository (if set) Secret no Configuration scope \u2612 parameter \u2612 general \u2612 steps \u2612 stages Resource references commonPipelineEnvironment : reference to: github/repository scanImage \u00b6 For buildTool: docker : Defines the docker image which should be scanned. back to overview Scope Details Aliases - Type string Mandatory no Default $PIPER_scanImage (if set) Secret no Configuration scope \u2612 parameter \u2610 general \u2612 steps \u2612 stages Resource references commonPipelineEnvironment : reference to: container/imageNameTag scanImageRegistryUrl \u00b6 For buildTool: docker : Defines the registry where the scanImage is located. back to overview Scope Details Aliases - Type string Mandatory no Default $PIPER_scanImageRegistryUrl (if set) Secret no Configuration scope \u2612 parameter \u2610 general \u2612 steps \u2612 stages Resource references commonPipelineEnvironment : reference to: container/registryUrl scanImages \u00b6 For buildTool: docker : Allowing to scan multiple docker images. In case parent project will not contain any dependecies, use skipParentProjectResolution parameter back to overview Scope Details Aliases - Type []string Mandatory no Default $PIPER_scanImages (if set) Secret no Configuration scope \u2612 parameter \u2610 general \u2612 steps \u2612 stages Resource references commonPipelineEnvironment : reference to: container/imageNameTags scanPath \u00b6 Directory where to start WhiteSource scan. back to overview Scope Details Aliases - Type string Mandatory no Default . Secret no Configuration scope \u2612 parameter \u2610 general \u2612 steps \u2612 stages Resource references none script \u00b6 The common script environment of the Jenkinsfile running. Typically the reference to the script calling the pipeline step is provided with the this parameter, as in script: this . This allows the function to access the commonPipelineEnvironment for retrieving, e.g. configuration parameters. back to overview Scope Details Aliases - Type Jenkins Script Mandatory yes Default Secret no Configuration scope \u2610 parameter \u2610 general \u2610 steps \u2610 stages Resource references none securityVulnerabilities \u00b6 Whether security compliance is considered and reported as part of the assessment. back to overview Scope Details Aliases - Type bool Mandatory no Default true Possible values - true - false Secret no Configuration scope \u2612 parameter \u2610 general \u2612 steps \u2612 stages Resource references none serviceUrl \u00b6 URL to the WhiteSource API endpoint. back to overview Scope Details Aliases - whitesourceServiceUrl - whitesource/serviceUrl ( deprecated ) Type string Mandatory no Default https://saas.whitesourcesoftware.com/api Secret no Configuration scope \u2612 parameter \u2612 general \u2612 steps \u2612 stages Resource references none skipParentProjectResolution \u00b6 Parameter for multi-module, multi-images projects to skip the parent project resolution for reporing purpose. Could be used if parent project is set as just a placeholder for scan and doesn't contain any dependencies. back to overview Scope Details Aliases - Type bool Mandatory no Default false Possible values - true - false Secret no Configuration scope \u2612 parameter \u2610 general \u2612 steps \u2612 stages Resource references none stashContent \u00b6 Jenkins-specific: Used for proper environment setup. Specific stashes that should be considered for the step execution. back to overview Scope Details Aliases - Type []string Mandatory no Default - buildDescriptor - opensourceConfiguration - checkmarx - checkmarxOne Secret no Configuration scope \u2612 parameter \u2612 general \u2612 steps \u2612 stages Resource references none timeout \u00b6 Timeout in seconds until an HTTP call is forcefully terminated. back to overview Scope Details Aliases - Type int Mandatory no Default 900 Secret no Configuration scope \u2612 parameter \u2610 general \u2612 steps \u2612 stages Resource references none useGlobalConfiguration \u00b6 The parameter is applicable for multi-module mend projects. If set to true, the configuration file will be used for all modules. Otherwise each module will require its own configuration file in the module folder. back to overview Scope Details Aliases - Type bool Mandatory no Default false Possible values - true - false Secret no Configuration scope \u2612 parameter \u2612 general \u2612 steps \u2612 stages Resource references none userToken \u00b6 User token to access WhiteSource. In Jenkins use case this is automatically filled through the credentials. back to overview Scope Details Aliases - Type string Mandatory yes Default $PIPER_userToken (if set) Secret yes Configuration scope \u2612 parameter \u2612 general \u2612 steps \u2612 stages Resource references Jenkins credential id: id: userTokenCredentialsId Vault resource: name: whitesourceVaultSecret default value: whitesource Vault paths: $(vaultPath)/whitesource $(vaultBasePath)/$(vaultPipelineName)/whitesource $(vaultBasePath)/GROUP-SECRETS/whitesource verbose \u00b6 verbose output back to overview Scope Details Aliases - Type bool Mandatory no Default false Possible values - true - false Secret no Configuration scope \u2612 parameter \u2612 general \u2612 steps \u2612 stages Resource references none version \u00b6 Version of the WhiteSource product to be created and used for results aggregation. This is usually determined automatically based on the information in the buildTool specific build descriptor file. back to overview Scope Details Aliases - productVersion - whitesourceProductVersion - whitesource/productVersion ( deprecated ) Type string Mandatory no Default $PIPER_version (if set) Secret no Configuration scope \u2612 parameter \u2612 general \u2612 steps \u2612 stages Resource references commonPipelineEnvironment : reference to: artifactVersion versioningModel \u00b6 The default project versioning model used in case projectVersion parameter is empty for creating the version based on the build descriptor version to report results in Whitesource, can be one of 'major' , 'major-minor' , 'semantic' , 'full' back to overview Scope Details Aliases defaultVersioningModel Type string Mandatory no Default major Secret no Configuration scope \u2612 parameter \u2612 general \u2612 steps \u2612 stages Resource references none vulnerabilityReportFormat \u00b6 Format of the file the vulnerability report is written to. back to overview Scope Details Aliases - Type string Mandatory no Default xlsx Possible values - xlsx - json - xml Secret no Configuration scope \u2612 parameter \u2610 general \u2612 steps \u2612 stages Resource references none vulnerabilityReportTitle \u00b6 Title of vulnerability report written during the assessment phase. back to overview Scope Details Aliases - Type string Mandatory no Default WhiteSource Security Vulnerability Report Secret no Configuration scope \u2612 parameter \u2610 general \u2612 steps \u2612 stages Resource references none userTokenCredentialsId \u00b6 Jenkins 'Secret text' credentials ID containing Whitesource user token. back to overview Scope Details Aliases - whitesourceUserTokenCredentialsId - whitesource/userTokenCredentialsId ( deprecated ) Type string Configuration scope \u2612 parameter \u2612 general \u2612 steps \u2612 stages orgAdminUserTokenCredentialsId \u00b6 Jenkins 'Secret text' credentials ID containing Whitesource org admin token. back to overview Scope Details Aliases - whitesourceOrgAdminUserTokenCredentialsId - whitesource/orgAdminUserTokenCredentialsId ( deprecated ) Type string Configuration scope \u2612 parameter \u2612 general \u2612 steps \u2612 stages dockerConfigJsonCredentialsId \u00b6 Jenkins 'Secret file' credentials ID containing Docker config.json (with registry credential(s)). You can find more details about the Docker credentials in the Docker documentation . back to overview Scope Details Aliases dockerCredentialsId ( deprecated ) Type string Configuration scope \u2612 parameter \u2612 general \u2612 steps \u2612 stages githubTokenCredentialsId \u00b6 Jenkins 'Secret text' credentials ID containing token to authenticate to GitHub. back to overview Scope Details Aliases - Type string Configuration scope \u2612 parameter \u2612 general \u2612 steps \u2612 stages golangPrivateModulesGitTokenCredentialsId \u00b6 Jenkins 'Username with password' credentials ID containing username/password for http access to your git repos where your go private modules are stored. back to overview Scope Details Aliases - Type string Configuration scope \u2612 parameter \u2612 general \u2612 steps \u2612 stages Exceptions \u00b6 None Examples \u00b6 whitesourceExecuteScan script: this , buildTool: 'pip' , productName: 'My Whitesource Product' , userTokenCredentialsId: 'companyAdminToken' , orgAdminUserTokenCredentialsId: 'orgAdminToken' , orgToken: 'myWhitesourceOrganizationToken'","title":"whitesourceExecuteScan"},{"location":"steps/whitesourceExecuteScan/#whitesourceexecutescan","text":"Execute a Mend (formerly known as WhiteSource) scan","title":"whitesourceExecuteScan"},{"location":"steps/whitesourceExecuteScan/#description","text":"With this step Mend (formerly known as Whitesource) security and license compliance scans can be executed and assessed. Mend is a Software as a Service offering based on a so called unified agent that locally determines the dependency tree of a node.js, Java, Python, Ruby, or Scala based solution and sends it to the WhiteSource server for a policy based license compliance check and additional Free and Open Source Software Publicly Known Vulnerabilities detection. The step uses the so-called Mend Unified Agent. For details please refer to the Mend Unified Agent Documentation . Docker Images The underlying Docker images are public and specific to the solution's programming language(s) and therefore may have to be exchanged to fit to and support the relevant scenario. The default Python environment used is i.e. Python 3 based.","title":"Description"},{"location":"steps/whitesourceExecuteScan/#usage","text":"We recommend to define values of step parameters via .pipeline/config.yml file . In this case, calling the step is essentially reduced to defining the step name. Calling the step can be done either in an orchestrator specific way (e.g. via a Jenkins library step) or on the command line. Jenkins Command Line library ( 'piper-lib-os' ) whitesourceExecuteScan script: this piper whitesourceExecuteScan","title":"Usage"},{"location":"steps/whitesourceExecuteScan/#outputs","text":"Output type Details commonPipelineEnvironment custom/whitesourceProjectNames influx measurement step_data whitesource measurement whitesource_data vulnerabilities major_vulnerabilities minor_vulnerabilities policy_violations","title":"Outputs"},{"location":"steps/whitesourceExecuteScan/#prerequisites","text":"Your company has registered an account with WhiteSource and you have enabled the use of so called User Keys to manage access to your organization in WhiteSource via dedicated privileges. Scanning your products without adequate user level access protection imposed on the WhiteSource backend would simply allow access based on the organization token.","title":"Prerequisites"},{"location":"steps/whitesourceExecuteScan/#parameters","text":"","title":"Parameters"},{"location":"steps/whitesourceExecuteScan/#overview-step","text":"Name Mandatory Additional information buildTool yes orgToken (yes) pass via ENV, Vault or Jenkins credentials ( orgAdminUserTokenCredentialsId ) script (yes) reference to Jenkins main pipeline script userToken (yes) pass via ENV, Vault or Jenkins credentials ( userTokenCredentialsId ) SkipProjectsWithEmptyTokens no activateMultipleImagesScan no agentDownloadUrl no agentFileName no agentParameters no agentUrl no aggregateVersionWideReport no assessmentFile no assignees no buildDescriptorExcludeList no buildDescriptorFile no configFilePath no containerRegistryPassword no pass via ENV or Jenkins credentials containerRegistryUser no pass via ENV or Jenkins credentials createProductFromPipeline no createResultIssue no customScanVersion no customTlsCertificateLinks no cvssSeverityLimit no defaultNpmRegistry no disableNpmSubmodulesAggregation no dockerConfigJSON no pass via ENV, Vault or Jenkins credentials ( dockerConfigJsonCredentialsId ) emailAddressesOfInitialProductAdmins no excludes no failOnSevereVulnerabilities no githubApiUrl no githubToken no pass via ENV, Vault or Jenkins credentials ( githubTokenCredentialsId ) globalSettingsFile no includes no installArtifacts no installCommand no jreDownloadUrl no licensingVulnerabilities no m2Path no npmIncludeDevDependencies no owner no privateModules no privateModulesGitToken no pass via ENV, Vault or Jenkins credentials ( golangPrivateModulesGitTokenCredentialsId ) productName no productToken no projectName no projectSettingsFile no projectToken no reporting no repository no scanImage no scanImageRegistryUrl no scanImages no scanPath no securityVulnerabilities no serviceUrl no skipParentProjectResolution no timeout no useGlobalConfiguration no verbose no activates debug output version no versioningModel no vulnerabilityReportFormat no vulnerabilityReportTitle no","title":"Overview - Step"},{"location":"steps/whitesourceExecuteScan/#overview-execution-environment","text":"Orchestrator-specific only These parameters are relevant for orchestrator usage and not considered when using the command line option. Name Mandatory Additional information containerCommand no containerShell no dockerEnvVars no dockerImage no dockerName no dockerOptions no dockerPullImage no dockerVolumeBind no dockerWorkspace no stashContent no","title":"Overview - Execution Environment"},{"location":"steps/whitesourceExecuteScan/#details","text":"","title":"Details"},{"location":"steps/whitesourceExecuteScan/#skipprojectswithemptytokens","text":"Skips projects with empty tokens after scanning. This is for testing purposes only and should not be used until we roll out the new parameter back to overview Scope Details Aliases - Type bool Mandatory no Default false Possible values - true - false Secret no Configuration scope \u2612 parameter \u2612 general \u2612 steps \u2612 stages Resource references none","title":"SkipProjectsWithEmptyTokens"},{"location":"steps/whitesourceExecuteScan/#activatemultipleimagesscan","text":"Use this parameter to activate the scan of multiple images. Additionally you'll need to provide skipParentProjectResolution and scanImages parameters back to overview Scope Details Aliases - Type bool Mandatory no Default false Possible values - true - false Secret no Configuration scope \u2612 parameter \u2610 general \u2612 steps \u2612 stages Resource references none","title":"activateMultipleImagesScan"},{"location":"steps/whitesourceExecuteScan/#agentdownloadurl","text":"URL used to download the latest version of the WhiteSource Unified Agent. back to overview Scope Details Aliases - Type string Mandatory no Default https://downloads.mend.io/wss-unified-agent.jar Secret no Configuration scope \u2612 parameter \u2610 general \u2612 steps \u2612 stages Resource references none","title":"agentDownloadUrl"},{"location":"steps/whitesourceExecuteScan/#agentfilename","text":"Locally used name for the Unified Agent jar file after download. back to overview Scope Details Aliases - Type string Mandatory no Default wss-unified-agent.jar Secret no Configuration scope \u2612 parameter \u2610 general \u2612 steps \u2612 stages Resource references none","title":"agentFileName"},{"location":"steps/whitesourceExecuteScan/#agentparameters","text":"[NOT IMPLEMENTED] List of additional parameters passed to the Unified Agent command line. back to overview Scope Details Aliases - Type []string Mandatory no Default $PIPER_agentParameters (if set) Secret no Configuration scope \u2612 parameter \u2610 general \u2612 steps \u2612 stages Resource references none","title":"agentParameters"},{"location":"steps/whitesourceExecuteScan/#agenturl","text":"URL to the WhiteSource agent endpoint. back to overview Scope Details Aliases whitesourceAgentUrl Type string Mandatory no Default https://saas.whitesourcesoftware.com/agent Secret no Configuration scope \u2612 parameter \u2612 general \u2612 steps \u2612 stages Resource references none","title":"agentUrl"},{"location":"steps/whitesourceExecuteScan/#aggregateversionwidereport","text":"This does not run a scan, instead just generated a report for all projects with projectVersion = config.ProductVersion back to overview Scope Details Aliases - Type bool Mandatory no Default false Possible values - true - false Secret no Configuration scope \u2612 parameter \u2610 general \u2612 steps \u2612 stages Resource references none","title":"aggregateVersionWideReport"},{"location":"steps/whitesourceExecuteScan/#assessmentfile","text":"Explicit path to the assessment YAML file. back to overview Scope Details Aliases - Type string Mandatory no Default hs-assessments.yaml Secret no Configuration scope \u2612 parameter \u2610 general \u2612 steps \u2612 stages Resource references none","title":"assessmentFile"},{"location":"steps/whitesourceExecuteScan/#assignees","text":"Defines the assignees for the Github Issue created/updated with the results of the scan as a list of login names. back to overview Scope Details Aliases - Type []string Mandatory no Default Secret no Configuration scope \u2612 parameter \u2610 general \u2612 steps \u2612 stages Resource references none","title":"assignees"},{"location":"steps/whitesourceExecuteScan/#builddescriptorexcludelist","text":"List of build descriptors and therefore modules to exclude from the scan and assessment activities. back to overview Scope Details Aliases - Type []string Mandatory no Default - unit-tests/pom.xml - integration-tests/pom.xml Secret no Configuration scope \u2612 parameter \u2610 general \u2612 steps \u2612 stages Resource references none","title":"buildDescriptorExcludeList"},{"location":"steps/whitesourceExecuteScan/#builddescriptorfile","text":"Explicit path to the build descriptor file. back to overview Scope Details Aliases - Type string Mandatory no Default $PIPER_buildDescriptorFile (if set) Secret no Configuration scope \u2612 parameter \u2610 general \u2612 steps \u2612 stages Resource references none","title":"buildDescriptorFile"},{"location":"steps/whitesourceExecuteScan/#buildtool","text":"Defines the tool which is used for building the artifact. back to overview Scope Details Aliases - Type string Mandatory yes Default $PIPER_buildTool (if set) Secret no Configuration scope \u2612 parameter \u2612 general \u2612 steps \u2612 stages Resource references commonPipelineEnvironment : reference to: buildTool","title":"buildTool"},{"location":"steps/whitesourceExecuteScan/#configfilepath","text":"Explicit path to the WhiteSource Unified Agent configuration file. back to overview Scope Details Aliases - Type string Mandatory no Default ./wss-unified-agent.config Secret no Configuration scope \u2612 parameter \u2610 general \u2612 steps \u2612 stages Resource references none","title":"configFilePath"},{"location":"steps/whitesourceExecuteScan/#containercommand","text":"Jenkins-specific: Used for proper environment setup. Kubernetes only: Allows to specify start command for container created with dockerImage parameter to overwrite Piper default (/usr/bin/tail -f /dev/null). back to overview Scope Details Aliases - Type string Mandatory no Default Secret no Configuration scope \u2612 parameter \u2612 general \u2612 steps \u2612 stages Resource references none","title":"containerCommand"},{"location":"steps/whitesourceExecuteScan/#containerregistrypassword","text":"For buildTool: docker : Password for container registry access - typically provided by the CI/CD environment. back to overview Scope Details Aliases - Type string Mandatory no Default $PIPER_containerRegistryPassword (if set) Secret yes Configuration scope \u2612 parameter \u2610 general \u2612 steps \u2612 stages Resource references commonPipelineEnvironment : reference to: container/repositoryPassword commonPipelineEnvironment : reference to: custom/repositoryPassword","title":"containerRegistryPassword"},{"location":"steps/whitesourceExecuteScan/#containerregistryuser","text":"For buildTool: docker : Username for container registry access - typically provided by the CI/CD environment. back to overview Scope Details Aliases - Type string Mandatory no Default $PIPER_containerRegistryUser (if set) Secret yes Configuration scope \u2612 parameter \u2610 general \u2612 steps \u2612 stages Resource references commonPipelineEnvironment : reference to: container/repositoryUsername commonPipelineEnvironment : reference to: custom/repositoryUsername","title":"containerRegistryUser"},{"location":"steps/whitesourceExecuteScan/#containershell","text":"Jenkins-specific: Used for proper environment setup. Allows to specify the shell to be executed for container with containerName. back to overview Scope Details Aliases - Type string Mandatory no Default Secret no Configuration scope \u2612 parameter \u2612 general \u2612 steps \u2612 stages Resource references none","title":"containerShell"},{"location":"steps/whitesourceExecuteScan/#createproductfrompipeline","text":"Whether to create the related WhiteSource product on the fly based on the supplied pipeline configuration. back to overview Scope Details Aliases - Type bool Mandatory no Default true Possible values - true - false Secret no Configuration scope \u2612 parameter \u2610 general \u2612 steps \u2612 stages Resource references none","title":"createProductFromPipeline"},{"location":"steps/whitesourceExecuteScan/#createresultissue","text":"Whether the step creates a GitHub issue containing the scan results in the originating repo. Since optimized pipelines are headless the creation is implicitly activated for scheduled runs. back to overview Scope Details Aliases - Type bool Mandatory no Default false Possible values - true - false Secret no Configuration scope \u2612 parameter \u2612 general \u2612 steps \u2612 stages Resource references commonPipelineEnvironment : reference to: custom/isOptimizedAndScheduled","title":"createResultIssue"},{"location":"steps/whitesourceExecuteScan/#customscanversion","text":"Defines a custom version for the WhiteSource scan which deviates from the typical versioning pattern using version and versioningModel . It allows to set non-numeric versions as well and supersedes the value of version which is calculated automatically. The parameter is also used by other scan steps (e.g. Detect, Fortify, Sonar) and thus allows a common custom version across scan tools. back to overview Scope Details Aliases - Type string Mandatory no Default $PIPER_customScanVersion (if set) Secret no Configuration scope \u2612 parameter \u2612 general \u2612 steps \u2612 stages Resource references none","title":"customScanVersion"},{"location":"steps/whitesourceExecuteScan/#customtlscertificatelinks","text":"List of download links to custom TLS certificates. This is required to ensure trusted connections to instances with repositories (like nexus) when publish flag is set to true. back to overview Scope Details Aliases - Type []string Mandatory no Default $PIPER_customTlsCertificateLinks (if set) Secret no Configuration scope \u2612 parameter \u2612 general \u2612 steps \u2612 stages Resource references none","title":"customTlsCertificateLinks"},{"location":"steps/whitesourceExecuteScan/#cvssseveritylimit","text":"Limit of tolerable CVSS v3 score upon assessment and in consequence fails the build. A negative value (like the default of -1) means that the build won't fail. back to overview Scope Details Aliases - Type string Mandatory no Default -1 Secret no Configuration scope \u2612 parameter \u2610 general \u2612 steps \u2612 stages Resource references none","title":"cvssSeverityLimit"},{"location":"steps/whitesourceExecuteScan/#defaultnpmregistry","text":"URL of the npm registry to use. Defaults to https://registry.npmjs.org/ back to overview Scope Details Aliases npm/defaultNpmRegistry Type string Mandatory no Default $PIPER_defaultNpmRegistry (if set) Secret no Configuration scope \u2612 parameter \u2612 general \u2612 steps \u2612 stages Resource references none","title":"defaultNpmRegistry"},{"location":"steps/whitesourceExecuteScan/#disablenpmsubmodulesaggregation","text":"The default Mend behavior is to aggregate all submodules of NPM project into one project in Mend. This parameter disables this behavior, thus for each submodule a separate project is created. back to overview Scope Details Aliases - Type bool Mandatory no Default false Possible values - true - false Secret no Configuration scope \u2612 parameter \u2612 general \u2612 steps \u2612 stages Resource references none","title":"disableNpmSubmodulesAggregation"},{"location":"steps/whitesourceExecuteScan/#dockerconfigjson","text":"Path to the file .docker/config.json - this is typically provided by your CI/CD system. You can find more details about the Docker credentials in the Docker documentation . back to overview Scope Details Aliases - Type string Mandatory no Default $PIPER_dockerConfigJSON (if set) Secret yes Configuration scope \u2612 parameter \u2610 general \u2612 steps \u2612 stages Resource references commonPipelineEnvironment : reference to: custom/dockerConfigJSON Jenkins credential id: id: dockerConfigJsonCredentialsId Vault resource: name: dockerConfigFileVaultSecretName default value: docker-config Vault paths: $(vaultPath)/docker-config $(vaultBasePath)/$(vaultPipelineName)/docker-config $(vaultBasePath)/GROUP-SECRETS/docker-config","title":"dockerConfigJSON"},{"location":"steps/whitesourceExecuteScan/#dockerenvvars","text":"Environment variables to set in the container, e.g. [http_proxy: \"proxy:8080\"]. back to overview Scope Details Aliases - Type map[string]string Mandatory no Default Secret no Configuration scope \u2612 parameter \u2612 general \u2612 steps \u2612 stages Resource references none","title":"dockerEnvVars"},{"location":"steps/whitesourceExecuteScan/#dockerimage","text":"Name of the docker image that should be used. If empty, Docker is not used and the command is executed directly on the Jenkins system. back to overview Scope Details Aliases - Type string Mandatory no Default buildTool= dub : buildpack-deps:stretch-curl buildTool= docker : buildpack-deps:stretch-curl buildTool= mta : devxci/mbtci-java11-node14 buildTool= golang : golang:1 buildTool= gradle : gradle buildTool= sbt : hseeberger/scala-sbt:8u181_2.12.8_1.2.8 buildTool= maven : maven:3.5-jdk-8 buildTool= npm : node:22-bookworm buildTool= pip : python:3.6-stretch buildTool= yarn : node:22-bookworm Secret no Configuration scope \u2612 parameter \u2612 general \u2612 steps \u2612 stages Resource references none","title":"dockerImage"},{"location":"steps/whitesourceExecuteScan/#dockername","text":"Kubernetes only: Name of the container launching dockerImage. SideCar only: Name of the container in local network. back to overview Scope Details Aliases - Type string Mandatory no Default Secret no Configuration scope \u2612 parameter \u2612 general \u2612 steps \u2612 stages Resource references none","title":"dockerName"},{"location":"steps/whitesourceExecuteScan/#dockeroptions","text":"Docker options to be set when starting the container. back to overview Scope Details Aliases - Type []string Mandatory no Default buildTool= golang : [{-u 0}] Secret no Configuration scope \u2612 parameter \u2612 general \u2612 steps \u2612 stages Resource references none","title":"dockerOptions"},{"location":"steps/whitesourceExecuteScan/#dockerpullimage","text":"Set this to 'false' to bypass a docker image pull. Useful during development process. Allows testing of images which are available in the local registry only. back to overview Scope Details Aliases - Type bool Mandatory no Default buildTool= dub : true buildTool= docker : true buildTool= mta : true buildTool= golang : true buildTool= gradle : true buildTool= sbt : true buildTool= maven : true buildTool= npm : true buildTool= pip : true buildTool= yarn : true Possible values - true - false Secret no Configuration scope \u2612 parameter \u2612 general \u2612 steps \u2612 stages Resource references none","title":"dockerPullImage"},{"location":"steps/whitesourceExecuteScan/#dockervolumebind","text":"Jenkins-specific: Used for proper environment setup. Volumes that should be mounted into the docker container. back to overview Scope Details Aliases - Type map[string]string Mandatory no Default Secret no Configuration scope \u2612 parameter \u2612 general \u2612 steps \u2612 stages Resource references none","title":"dockerVolumeBind"},{"location":"steps/whitesourceExecuteScan/#dockerworkspace","text":"Jenkins-specific: Used for proper environment setup. Kubernetes only: Specifies a dedicated user home directory for the container which will be passed as value for environment variable HOME . back to overview Scope Details Aliases - Type string Mandatory no Default buildTool= dub : /tmp buildTool= docker : /tmp buildTool= mta : /home/mta buildTool= golang : /go buildTool= gradle : /home/gradle buildTool= sbt : /tmp buildTool= maven : /tmp buildTool= npm : /home/node buildTool= pip : /tmp buildTool= yarn : /home/node Secret no Configuration scope \u2612 parameter \u2612 general \u2612 steps \u2612 stages Resource references none","title":"dockerWorkspace"},{"location":"steps/whitesourceExecuteScan/#emailaddressesofinitialproductadmins","text":"The list of email addresses to assign as product admins for newly created WhiteSource products. back to overview Scope Details Aliases - Type []string Mandatory no Default $PIPER_emailAddressesOfInitialProductAdmins (if set) Secret no Configuration scope \u2612 parameter \u2610 general \u2612 steps \u2612 stages Resource references none","title":"emailAddressesOfInitialProductAdmins"},{"location":"steps/whitesourceExecuteScan/#excludes","text":"List of file path patterns to exclude in the scan. back to overview Scope Details Aliases - Type []string Mandatory no Default $PIPER_excludes (if set) Secret no Configuration scope \u2612 parameter \u2610 general \u2612 steps \u2612 stages Resource references none","title":"excludes"},{"location":"steps/whitesourceExecuteScan/#failonseverevulnerabilities","text":"Whether to fail the step on severe vulnerabilties or not back to overview Scope Details Aliases - Type bool Mandatory no Default true Possible values - true - false Secret no Configuration scope \u2612 parameter \u2610 general \u2610 steps \u2610 stages Resource references none","title":"failOnSevereVulnerabilities"},{"location":"steps/whitesourceExecuteScan/#githubapiurl","text":"Set the GitHub API URL. back to overview Scope Details Aliases - Type string Mandatory no Default https://api.github.com Secret no Configuration scope \u2612 parameter \u2612 general \u2612 steps \u2612 stages Resource references none","title":"githubApiUrl"},{"location":"steps/whitesourceExecuteScan/#githubtoken","text":"GitHub personal access token as per https://help.github.com/en/github/authenticating-to-github/creating-a-personal-access-token-for-the-command-line back to overview Scope Details Aliases access_token Type string Mandatory no Default $PIPER_githubToken (if set) Secret yes Configuration scope \u2612 parameter \u2612 general \u2612 steps \u2612 stages Resource references Jenkins credential id: id: githubTokenCredentialsId Vault resource: name: githubVaultSecretName default value: github Vault paths: $(vaultPath)/github $(vaultBasePath)/$(vaultPipelineName)/github $(vaultBasePath)/GROUP-SECRETS/github","title":"githubToken"},{"location":"steps/whitesourceExecuteScan/#globalsettingsfile","text":"Path to the mvn settings file that should be used as global settings file. back to overview Scope Details Aliases maven/globalSettingsFile Type string Mandatory no Default $PIPER_globalSettingsFile (if set) Secret no Configuration scope \u2612 parameter \u2612 general \u2612 steps \u2612 stages Resource references none","title":"globalSettingsFile"},{"location":"steps/whitesourceExecuteScan/#includes","text":"List of file path patterns to include in the scan. back to overview Scope Details Aliases - Type []string Mandatory no Default $PIPER_includes (if set) Secret no Configuration scope \u2612 parameter \u2610 general \u2612 steps \u2612 stages Resource references none","title":"includes"},{"location":"steps/whitesourceExecuteScan/#installartifacts","text":"If enabled, all artifacts will be installed to the local Maven repository to ensure availability before running WhiteSource. Currently, this parameter is not honored in whitesourceExecuteScan step, as it is internally managed by UA with the 'runPreStep'. In the future, this parameter will be honored based on the individual build tool. back to overview Scope Details Aliases - Type bool Mandatory no Default false Possible values - true - false Secret no Configuration scope \u2612 parameter \u2612 general \u2612 steps \u2612 stages Resource references none","title":"installArtifacts"},{"location":"steps/whitesourceExecuteScan/#installcommand","text":"Install command that can be used to populate the default docker image for some scenarios. back to overview Scope Details Aliases - Type string Mandatory no Default $PIPER_installCommand (if set) Secret no Configuration scope \u2612 parameter \u2610 general \u2612 steps \u2612 stages Resource references none","title":"installCommand"},{"location":"steps/whitesourceExecuteScan/#jredownloadurl","text":"URL used for downloading the Java Runtime Environment (JRE) required to run the WhiteSource Unified Agent. back to overview Scope Details Aliases whitesource/jreDownloadUrl ( deprecated ) Type string Mandatory no Default https://github.com/SAP/SapMachine/releases/download/sapmachine-17.0.13/sapmachine-jre-17.0.13_linux-x64_bin.tar.gz Secret no Configuration scope \u2612 parameter \u2612 general \u2612 steps \u2612 stages Resource references none","title":"jreDownloadUrl"},{"location":"steps/whitesourceExecuteScan/#licensingvulnerabilities","text":"[NOT IMPLEMENTED] Whether license compliance is considered and reported as part of the assessment. back to overview Scope Details Aliases - Type bool Mandatory no Default true Possible values - true - false Secret no Configuration scope \u2612 parameter \u2610 general \u2612 steps \u2612 stages Resource references none","title":"licensingVulnerabilities"},{"location":"steps/whitesourceExecuteScan/#m2path","text":"Path to the location of the local repository that should be used. back to overview Scope Details Aliases maven/m2Path Type string Mandatory no Default $PIPER_m2Path (if set) Secret no Configuration scope \u2612 parameter \u2612 general \u2612 steps \u2612 stages Resource references none","title":"m2Path"},{"location":"steps/whitesourceExecuteScan/#npmincludedevdependencies","text":"Enable this if you wish to include NPM DEV dependencies in the scan report back to overview Scope Details Aliases npm/includeDevDependencies Type bool Mandatory no Default false Possible values - true - false Secret no Configuration scope \u2612 parameter \u2612 general \u2612 steps \u2612 stages Resource references none","title":"npmIncludeDevDependencies"},{"location":"steps/whitesourceExecuteScan/#orgtoken","text":"WhiteSource token identifying your organization. back to overview Scope Details Aliases - whitesourceOrgToken - whitesource/orgToken ( deprecated ) Type string Mandatory yes Default $PIPER_orgToken (if set) Secret yes Configuration scope \u2612 parameter \u2612 general \u2612 steps \u2612 stages Resource references Jenkins credential id: id: orgAdminUserTokenCredentialsId Vault resource: name: whitesourceVaultSecret default value: whitesource Vault paths: $(vaultPath)/whitesource $(vaultBasePath)/$(vaultPipelineName)/whitesource $(vaultBasePath)/GROUP-SECRETS/whitesource","title":"orgToken"},{"location":"steps/whitesourceExecuteScan/#owner","text":"Set the GitHub organization. back to overview Scope Details Aliases githubOrg Type string Mandatory no Default $PIPER_owner (if set) Secret no Configuration scope \u2612 parameter \u2612 general \u2612 steps \u2612 stages Resource references commonPipelineEnvironment : reference to: github/owner","title":"owner"},{"location":"steps/whitesourceExecuteScan/#privatemodules","text":"Tells go which modules shall be considered to be private (by setting GOPRIVATE ). back to overview Scope Details Aliases - Type string Mandatory no Default $PIPER_privateModules (if set) Secret no Configuration scope \u2612 parameter \u2612 general \u2612 steps \u2612 stages Resource references none","title":"privateModules"},{"location":"steps/whitesourceExecuteScan/#privatemodulesgittoken","text":"GitHub personal access token as per https://help.github.com/en/github/authenticating-to-github/creating-a-personal-access-token-for-the-command-line. back to overview Scope Details Aliases - Type string Mandatory no Default $PIPER_privateModulesGitToken (if set) Secret yes Configuration scope \u2612 parameter \u2612 general \u2612 steps \u2612 stages Resource references Jenkins credential id: id: golangPrivateModulesGitTokenCredentialsId reference to: password Vault resource: name: golangPrivateModulesGitTokenVaultSecret default value: golang Vault paths: $(vaultPath)/golang $(vaultBasePath)/$(vaultPipelineName)/golang $(vaultBasePath)/GROUP-SECRETS/golang","title":"privateModulesGitToken"},{"location":"steps/whitesourceExecuteScan/#productname","text":"Name of the WhiteSource product used for results aggregation. This parameter is mandatory if the parameter createProductFromPipeline is set to true and the WhiteSource product does not yet exist. It is also mandatory if the parameter productToken is not provided. back to overview Scope Details Aliases - whitesourceProductName - whitesource/productName ( deprecated ) Type string Mandatory no Default $PIPER_productName (if set) Secret no Configuration scope \u2612 parameter \u2612 general \u2612 steps \u2612 stages Resource references none","title":"productName"},{"location":"steps/whitesourceExecuteScan/#producttoken","text":"Token of the WhiteSource product to be created and used for results aggregation, usually determined automatically. Can optionally be provided as an alternative to productName . back to overview Scope Details Aliases - whitesourceProductToken - whitesource/productToken ( deprecated ) Type string Mandatory no Default $PIPER_productToken (if set) Secret no Configuration scope \u2612 parameter \u2612 general \u2612 steps \u2612 stages Resource references none","title":"productToken"},{"location":"steps/whitesourceExecuteScan/#projectname","text":"The project name used for reporting results in WhiteSource. When provided, all source modules will be scanned into one aggregated WhiteSource project. For scan types maven , mta , npm , the default is to generate one WhiteSource project per module, whereas the project name is derived from the module's build descriptor. For NPM modules, project aggregation is not supported, the last scanned NPM module will override all previously aggregated scan results! back to overview Scope Details Aliases whitesourceProjectName Type string Mandatory no Default $PIPER_projectName (if set) Secret no Configuration scope \u2612 parameter \u2610 general \u2612 steps \u2612 stages Resource references none","title":"projectName"},{"location":"steps/whitesourceExecuteScan/#projectsettingsfile","text":"Path to the mvn settings file that should be used as project settings file. back to overview Scope Details Aliases maven/projectSettingsFile Type string Mandatory no Default $PIPER_projectSettingsFile (if set) Secret no Configuration scope \u2612 parameter \u2612 general \u2612 steps \u2612 stages Resource references none","title":"projectSettingsFile"},{"location":"steps/whitesourceExecuteScan/#projecttoken","text":"Project token to execute scan on. Ignored for scan types maven , mta and npm . Used for project aggregation when scanning with the Unified Agent and can be provided as an alternative to projectName . back to overview Scope Details Aliases - Type string Mandatory no Default $PIPER_projectToken (if set) Secret no Configuration scope \u2612 parameter \u2612 general \u2612 steps \u2612 stages Resource references none","title":"projectToken"},{"location":"steps/whitesourceExecuteScan/#reporting","text":"Whether assessment is being done at all, defaults to true back to overview Scope Details Aliases - Type bool Mandatory no Default true Possible values - true - false Secret no Configuration scope \u2612 parameter \u2610 general \u2612 steps \u2612 stages Resource references none","title":"reporting"},{"location":"steps/whitesourceExecuteScan/#repository","text":"Set the GitHub repository. back to overview Scope Details Aliases githubRepo Type string Mandatory no Default $PIPER_repository (if set) Secret no Configuration scope \u2612 parameter \u2612 general \u2612 steps \u2612 stages Resource references commonPipelineEnvironment : reference to: github/repository","title":"repository"},{"location":"steps/whitesourceExecuteScan/#scanimage","text":"For buildTool: docker : Defines the docker image which should be scanned. back to overview Scope Details Aliases - Type string Mandatory no Default $PIPER_scanImage (if set) Secret no Configuration scope \u2612 parameter \u2610 general \u2612 steps \u2612 stages Resource references commonPipelineEnvironment : reference to: container/imageNameTag","title":"scanImage"},{"location":"steps/whitesourceExecuteScan/#scanimageregistryurl","text":"For buildTool: docker : Defines the registry where the scanImage is located. back to overview Scope Details Aliases - Type string Mandatory no Default $PIPER_scanImageRegistryUrl (if set) Secret no Configuration scope \u2612 parameter \u2610 general \u2612 steps \u2612 stages Resource references commonPipelineEnvironment : reference to: container/registryUrl","title":"scanImageRegistryUrl"},{"location":"steps/whitesourceExecuteScan/#scanimages","text":"For buildTool: docker : Allowing to scan multiple docker images. In case parent project will not contain any dependecies, use skipParentProjectResolution parameter back to overview Scope Details Aliases - Type []string Mandatory no Default $PIPER_scanImages (if set) Secret no Configuration scope \u2612 parameter \u2610 general \u2612 steps \u2612 stages Resource references commonPipelineEnvironment : reference to: container/imageNameTags","title":"scanImages"},{"location":"steps/whitesourceExecuteScan/#scanpath","text":"Directory where to start WhiteSource scan. back to overview Scope Details Aliases - Type string Mandatory no Default . Secret no Configuration scope \u2612 parameter \u2610 general \u2612 steps \u2612 stages Resource references none","title":"scanPath"},{"location":"steps/whitesourceExecuteScan/#script","text":"The common script environment of the Jenkinsfile running. Typically the reference to the script calling the pipeline step is provided with the this parameter, as in script: this . This allows the function to access the commonPipelineEnvironment for retrieving, e.g. configuration parameters. back to overview Scope Details Aliases - Type Jenkins Script Mandatory yes Default Secret no Configuration scope \u2610 parameter \u2610 general \u2610 steps \u2610 stages Resource references none","title":"script"},{"location":"steps/whitesourceExecuteScan/#securityvulnerabilities","text":"Whether security compliance is considered and reported as part of the assessment. back to overview Scope Details Aliases - Type bool Mandatory no Default true Possible values - true - false Secret no Configuration scope \u2612 parameter \u2610 general \u2612 steps \u2612 stages Resource references none","title":"securityVulnerabilities"},{"location":"steps/whitesourceExecuteScan/#serviceurl","text":"URL to the WhiteSource API endpoint. back to overview Scope Details Aliases - whitesourceServiceUrl - whitesource/serviceUrl ( deprecated ) Type string Mandatory no Default https://saas.whitesourcesoftware.com/api Secret no Configuration scope \u2612 parameter \u2612 general \u2612 steps \u2612 stages Resource references none","title":"serviceUrl"},{"location":"steps/whitesourceExecuteScan/#skipparentprojectresolution","text":"Parameter for multi-module, multi-images projects to skip the parent project resolution for reporing purpose. Could be used if parent project is set as just a placeholder for scan and doesn't contain any dependencies. back to overview Scope Details Aliases - Type bool Mandatory no Default false Possible values - true - false Secret no Configuration scope \u2612 parameter \u2610 general \u2612 steps \u2612 stages Resource references none","title":"skipParentProjectResolution"},{"location":"steps/whitesourceExecuteScan/#stashcontent","text":"Jenkins-specific: Used for proper environment setup. Specific stashes that should be considered for the step execution. back to overview Scope Details Aliases - Type []string Mandatory no Default - buildDescriptor - opensourceConfiguration - checkmarx - checkmarxOne Secret no Configuration scope \u2612 parameter \u2612 general \u2612 steps \u2612 stages Resource references none","title":"stashContent"},{"location":"steps/whitesourceExecuteScan/#timeout","text":"Timeout in seconds until an HTTP call is forcefully terminated. back to overview Scope Details Aliases - Type int Mandatory no Default 900 Secret no Configuration scope \u2612 parameter \u2610 general \u2612 steps \u2612 stages Resource references none","title":"timeout"},{"location":"steps/whitesourceExecuteScan/#useglobalconfiguration","text":"The parameter is applicable for multi-module mend projects. If set to true, the configuration file will be used for all modules. Otherwise each module will require its own configuration file in the module folder. back to overview Scope Details Aliases - Type bool Mandatory no Default false Possible values - true - false Secret no Configuration scope \u2612 parameter \u2612 general \u2612 steps \u2612 stages Resource references none","title":"useGlobalConfiguration"},{"location":"steps/whitesourceExecuteScan/#usertoken","text":"User token to access WhiteSource. In Jenkins use case this is automatically filled through the credentials. back to overview Scope Details Aliases - Type string Mandatory yes Default $PIPER_userToken (if set) Secret yes Configuration scope \u2612 parameter \u2612 general \u2612 steps \u2612 stages Resource references Jenkins credential id: id: userTokenCredentialsId Vault resource: name: whitesourceVaultSecret default value: whitesource Vault paths: $(vaultPath)/whitesource $(vaultBasePath)/$(vaultPipelineName)/whitesource $(vaultBasePath)/GROUP-SECRETS/whitesource","title":"userToken"},{"location":"steps/whitesourceExecuteScan/#verbose","text":"verbose output back to overview Scope Details Aliases - Type bool Mandatory no Default false Possible values - true - false Secret no Configuration scope \u2612 parameter \u2612 general \u2612 steps \u2612 stages Resource references none","title":"verbose"},{"location":"steps/whitesourceExecuteScan/#version","text":"Version of the WhiteSource product to be created and used for results aggregation. This is usually determined automatically based on the information in the buildTool specific build descriptor file. back to overview Scope Details Aliases - productVersion - whitesourceProductVersion - whitesource/productVersion ( deprecated ) Type string Mandatory no Default $PIPER_version (if set) Secret no Configuration scope \u2612 parameter \u2612 general \u2612 steps \u2612 stages Resource references commonPipelineEnvironment : reference to: artifactVersion","title":"version"},{"location":"steps/whitesourceExecuteScan/#versioningmodel","text":"The default project versioning model used in case projectVersion parameter is empty for creating the version based on the build descriptor version to report results in Whitesource, can be one of 'major' , 'major-minor' , 'semantic' , 'full' back to overview Scope Details Aliases defaultVersioningModel Type string Mandatory no Default major Secret no Configuration scope \u2612 parameter \u2612 general \u2612 steps \u2612 stages Resource references none","title":"versioningModel"},{"location":"steps/whitesourceExecuteScan/#vulnerabilityreportformat","text":"Format of the file the vulnerability report is written to. back to overview Scope Details Aliases - Type string Mandatory no Default xlsx Possible values - xlsx - json - xml Secret no Configuration scope \u2612 parameter \u2610 general \u2612 steps \u2612 stages Resource references none","title":"vulnerabilityReportFormat"},{"location":"steps/whitesourceExecuteScan/#vulnerabilityreporttitle","text":"Title of vulnerability report written during the assessment phase. back to overview Scope Details Aliases - Type string Mandatory no Default WhiteSource Security Vulnerability Report Secret no Configuration scope \u2612 parameter \u2610 general \u2612 steps \u2612 stages Resource references none","title":"vulnerabilityReportTitle"},{"location":"steps/whitesourceExecuteScan/#usertokencredentialsid","text":"Jenkins 'Secret text' credentials ID containing Whitesource user token. back to overview Scope Details Aliases - whitesourceUserTokenCredentialsId - whitesource/userTokenCredentialsId ( deprecated ) Type string Configuration scope \u2612 parameter \u2612 general \u2612 steps \u2612 stages","title":"userTokenCredentialsId"},{"location":"steps/whitesourceExecuteScan/#orgadminusertokencredentialsid","text":"Jenkins 'Secret text' credentials ID containing Whitesource org admin token. back to overview Scope Details Aliases - whitesourceOrgAdminUserTokenCredentialsId - whitesource/orgAdminUserTokenCredentialsId ( deprecated ) Type string Configuration scope \u2612 parameter \u2612 general \u2612 steps \u2612 stages","title":"orgAdminUserTokenCredentialsId"},{"location":"steps/whitesourceExecuteScan/#dockerconfigjsoncredentialsid","text":"Jenkins 'Secret file' credentials ID containing Docker config.json (with registry credential(s)). You can find more details about the Docker credentials in the Docker documentation . back to overview Scope Details Aliases dockerCredentialsId ( deprecated ) Type string Configuration scope \u2612 parameter \u2612 general \u2612 steps \u2612 stages","title":"dockerConfigJsonCredentialsId"},{"location":"steps/whitesourceExecuteScan/#githubtokencredentialsid","text":"Jenkins 'Secret text' credentials ID containing token to authenticate to GitHub. back to overview Scope Details Aliases - Type string Configuration scope \u2612 parameter \u2612 general \u2612 steps \u2612 stages","title":"githubTokenCredentialsId"},{"location":"steps/whitesourceExecuteScan/#golangprivatemodulesgittokencredentialsid","text":"Jenkins 'Username with password' credentials ID containing username/password for http access to your git repos where your go private modules are stored. back to overview Scope Details Aliases - Type string Configuration scope \u2612 parameter \u2612 general \u2612 steps \u2612 stages","title":"golangPrivateModulesGitTokenCredentialsId"},{"location":"steps/whitesourceExecuteScan/#exceptions","text":"None","title":"Exceptions"},{"location":"steps/whitesourceExecuteScan/#examples","text":"whitesourceExecuteScan script: this , buildTool: 'pip' , productName: 'My Whitesource Product' , userTokenCredentialsId: 'companyAdminToken' , orgAdminUserTokenCredentialsId: 'orgAdminToken' , orgToken: 'myWhitesourceOrganizationToken'","title":"Examples"},{"location":"steps/writeTemporaryCredentials/","text":"writeTemporaryCredentials \u00b6 Description \u00b6 Writes credentials to a temporary file and deletes it after the body has been executed. Parameters \u00b6 name mandatory default possible values credentials no credentialsDirectories no [./, integration-tests/src/test/resources] script yes credentials - The list of credentials that are written to a temporary file for the execution of the body. Each element of credentials must be a map containing a property alias and a property credentialId. You have to ensure that corresponding credential entries exist in your Jenkins configuration. credentialsDirectories - The list of paths to directories where credentials files need to be placed. script - The common script environment of the Jenkinsfile running. Typically the reference to the script calling the pipeline step is provided with the this parameter, as in script: this . This allows the function to access the commonPipelineEnvironment for retrieving, e.g. configuration parameters. Step configuration \u00b6 We recommend to define values of step parameters via config.yml file . In following sections of the config.yml the configuration is possible: parameter general step/stage credentials X credentialsDirectories X script","title":"writeTemporaryCredentials"},{"location":"steps/writeTemporaryCredentials/#writetemporarycredentials","text":"","title":"writeTemporaryCredentials"},{"location":"steps/writeTemporaryCredentials/#description","text":"Writes credentials to a temporary file and deletes it after the body has been executed.","title":"Description"},{"location":"steps/writeTemporaryCredentials/#parameters","text":"name mandatory default possible values credentials no credentialsDirectories no [./, integration-tests/src/test/resources] script yes credentials - The list of credentials that are written to a temporary file for the execution of the body. Each element of credentials must be a map containing a property alias and a property credentialId. You have to ensure that corresponding credential entries exist in your Jenkins configuration. credentialsDirectories - The list of paths to directories where credentials files need to be placed. script - The common script environment of the Jenkinsfile running. Typically the reference to the script calling the pipeline step is provided with the this parameter, as in script: this . This allows the function to access the commonPipelineEnvironment for retrieving, e.g. configuration parameters.","title":"Parameters"},{"location":"steps/writeTemporaryCredentials/#step-configuration","text":"We recommend to define values of step parameters via config.yml file . In following sections of the config.yml the configuration is possible: parameter general step/stage credentials X credentialsDirectories X script","title":"Step configuration"},{"location":"steps/xsDeploy/","text":"xsDeploy \u00b6 Performs xs deployment Description \u00b6 Performs xs deployment Usage \u00b6 We recommend to define values of step parameters via .pipeline/config.yml file . In this case, calling the step is essentially reduced to defining the step name. Calling the step can be done either in an orchestrator specific way (e.g. via a Jenkins library step) or on the command line. Jenkins Command Line library ( 'piper-lib-os' ) xsDeploy script: this piper xsDeploy Outputs \u00b6 Output type Details commonPipelineEnvironment operationId Parameters \u00b6 Overview - Step \u00b6 Name Mandatory Additional information apiUrl yes loginOpts yes mtaPath yes org yes password (yes) pass via ENV or Jenkins credentials ( credentialsId ) script (yes) reference to Jenkins main pipeline script space yes username (yes) pass via ENV or Jenkins credentials ( credentialsId ) action no deployOpts no mode no operationId no operationIdLogPattern no verbose no activates debug output xsSessionFile no Overview - Execution Environment \u00b6 Orchestrator-specific only These parameters are relevant for orchestrator usage and not considered when using the command line option. Name Mandatory Additional information containerCommand no containerShell no dockerEnvVars no dockerImage no dockerName no dockerOptions no dockerPullImage no dockerVolumeBind no dockerWorkspace no Details \u00b6 action \u00b6 Used for finalizing the blue-green deployment. back to overview Scope Details Aliases - Type string Mandatory no Default NONE Possible values - NONE - Resume - Abort - Retry Secret no Configuration scope \u2612 parameter \u2610 general \u2612 steps \u2612 stages Resource references none apiUrl \u00b6 The api url (e.g. https://example.org:12345 back to overview Scope Details Aliases - Type string Mandatory yes Default $PIPER_apiUrl (if set) Secret no Configuration scope \u2612 parameter \u2610 general \u2612 steps \u2612 stages Resource references none containerCommand \u00b6 Jenkins-specific: Used for proper environment setup. Kubernetes only: Allows to specify start command for container created with dockerImage parameter to overwrite Piper default (/usr/bin/tail -f /dev/null). back to overview Scope Details Aliases - Type string Mandatory no Default Secret no Configuration scope \u2612 parameter \u2612 general \u2612 steps \u2612 stages Resource references none containerShell \u00b6 Jenkins-specific: Used for proper environment setup. Allows to specify the shell to be executed for container with containerName. back to overview Scope Details Aliases - Type string Mandatory no Default Secret no Configuration scope \u2612 parameter \u2612 general \u2612 steps \u2612 stages Resource references none deployOpts \u00b6 Additional options appended to the deploy command. Only needed for sophisticated cases. When provided it is the duty of the provider to ensure proper quoting / escaping. back to overview Scope Details Aliases - Type string Mandatory no Default $PIPER_deployOpts (if set) Secret no Configuration scope \u2612 parameter \u2610 general \u2612 steps \u2612 stages Resource references none dockerEnvVars \u00b6 Environment variables to set in the container, e.g. [http_proxy: \"proxy:8080\"]. back to overview Scope Details Aliases - Type map[string]string Mandatory no Default Secret no Configuration scope \u2612 parameter \u2612 general \u2612 steps \u2612 stages Resource references none dockerImage \u00b6 Name of the docker image that should be used. If empty, Docker is not used and the command is executed directly on the Jenkins system. back to overview Scope Details Aliases - Type string Mandatory no Default ppiper/xs-cli Secret no Configuration scope \u2612 parameter \u2612 general \u2612 steps \u2612 stages Resource references none dockerName \u00b6 Kubernetes only: Name of the container launching dockerImage. SideCar only: Name of the container in local network. back to overview Scope Details Aliases - Type string Mandatory no Default xs Secret no Configuration scope \u2612 parameter \u2612 general \u2612 steps \u2612 stages Resource references none dockerOptions \u00b6 Docker options to be set when starting the container. back to overview Scope Details Aliases - Type []string Mandatory no Default Secret no Configuration scope \u2612 parameter \u2612 general \u2612 steps \u2612 stages Resource references none dockerPullImage \u00b6 Set this to 'false' to bypass a docker image pull. Useful during development process. Allows testing of images which are available in the local registry only. back to overview Scope Details Aliases - Type bool Mandatory no Default true Possible values - true - false Secret no Configuration scope \u2612 parameter \u2612 general \u2612 steps \u2612 stages Resource references none dockerVolumeBind \u00b6 Jenkins-specific: Used for proper environment setup. Volumes that should be mounted into the docker container. back to overview Scope Details Aliases - Type map[string]string Mandatory no Default Secret no Configuration scope \u2612 parameter \u2612 general \u2612 steps \u2612 stages Resource references none dockerWorkspace \u00b6 Jenkins-specific: Used for proper environment setup. Kubernetes only: Specifies a dedicated user home directory for the container which will be passed as value for environment variable HOME . back to overview Scope Details Aliases - Type string Mandatory no Default Secret no Configuration scope \u2612 parameter \u2612 general \u2612 steps \u2612 stages Resource references none loginOpts \u00b6 Additional options appended to the login command. Only needed for sophisticated cases. When provided it is the duty of the provider to ensure proper quoting / escaping. back to overview Scope Details Aliases - Type string Mandatory yes Default $PIPER_loginOpts (if set) Secret no Configuration scope \u2612 parameter \u2610 general \u2612 steps \u2612 stages Resource references none mode \u00b6 Controls if there is a standard deployment or a blue green deployment. Values: 'DEPLOY', 'BG_DEPLOY' back to overview Scope Details Aliases - Type string Mandatory no Default DEPLOY Possible values - NONE - DEPLOY - BG_DEPLOY Secret no Configuration scope \u2612 parameter \u2610 general \u2612 steps \u2612 stages Resource references none mtaPath \u00b6 Path to deployable back to overview Scope Details Aliases - Type string Mandatory yes Default $PIPER_mtaPath (if set) Secret no Configuration scope \u2612 parameter \u2610 general \u2612 steps \u2612 stages Resource references commonPipelineEnvironment : reference to: mtaPath operationId \u00b6 The operation ID. Used in case of bg-deploy in order to resume or abort a previously started deployment. back to overview Scope Details Aliases - Type string Mandatory no Default $PIPER_operationId (if set) Secret no Configuration scope \u2612 parameter \u2610 general \u2612 steps \u2612 stages Resource references commonPipelineEnvironment : reference to: operationId operationIdLogPattern \u00b6 Regex pattern for retrieving the ID of the operation from the xs log. back to overview Scope Details Aliases deployIdLogPattern Type string Mandatory no Default ^.*\"xs bg-deploy -i (.*) -a .*\".*$ Secret no Configuration scope \u2612 parameter \u2610 general \u2612 steps \u2612 stages Resource references none org \u00b6 The org back to overview Scope Details Aliases - Type string Mandatory yes Default $PIPER_org (if set) Secret no Configuration scope \u2612 parameter \u2610 general \u2612 steps \u2612 stages Resource references none password \u00b6 Password back to overview Scope Details Aliases - Type string Mandatory yes Default $PIPER_password (if set) Secret yes Configuration scope \u2612 parameter \u2610 general \u2612 steps \u2612 stages Resource references Jenkins credential id: id: credentialsId reference to: password script \u00b6 The common script environment of the Jenkinsfile running. Typically the reference to the script calling the pipeline step is provided with the this parameter, as in script: this . This allows the function to access the commonPipelineEnvironment for retrieving, e.g. configuration parameters. back to overview Scope Details Aliases - Type Jenkins Script Mandatory yes Default Secret no Configuration scope \u2610 parameter \u2610 general \u2610 steps \u2610 stages Resource references none space \u00b6 The space back to overview Scope Details Aliases - Type string Mandatory yes Default $PIPER_space (if set) Secret no Configuration scope \u2612 parameter \u2610 general \u2612 steps \u2612 stages Resource references none username \u00b6 Username back to overview Scope Details Aliases user ( deprecated ) Type string Mandatory yes Default $PIPER_username (if set) Secret yes Configuration scope \u2612 parameter \u2610 general \u2612 steps \u2612 stages Resource references Jenkins credential id: id: credentialsId reference to: username verbose \u00b6 verbose output back to overview Scope Details Aliases - Type bool Mandatory no Default false Possible values - true - false Secret no Configuration scope \u2612 parameter \u2612 general \u2612 steps \u2612 stages Resource references none xsSessionFile \u00b6 The file keeping the xs session. back to overview Scope Details Aliases - Type string Mandatory no Default .xsconfig Secret no Configuration scope \u2612 parameter \u2610 general \u2612 steps \u2612 stages Resource references none credentialsId \u00b6 Jenkins 'Username with password' credentials ID containing username/password for accessing xs endpoint. back to overview Scope Details Aliases - Type string Configuration scope \u2612 parameter \u2612 general \u2612 steps \u2612 stages Side effects \u00b6 none Example \u00b6 xsDeploy script: this , mtaPath: 'path/to/archiveFile.mtar' , credentialsId: 'my-credentials-id' , apiUrl: 'https://example.org/xs' , space: 'mySpace' , org: 'myOrg' Example configuration: steps : <...> xsDeploy : mtaPath : path/to/archiveFile.mtar credentialsId : my-credentials-id apiUrl : https://example.org/xs space : mySpace org : myOrg","title":"xsDeploy"},{"location":"steps/xsDeploy/#xsdeploy","text":"Performs xs deployment","title":"xsDeploy"},{"location":"steps/xsDeploy/#description","text":"Performs xs deployment","title":"Description"},{"location":"steps/xsDeploy/#usage","text":"We recommend to define values of step parameters via .pipeline/config.yml file . In this case, calling the step is essentially reduced to defining the step name. Calling the step can be done either in an orchestrator specific way (e.g. via a Jenkins library step) or on the command line. Jenkins Command Line library ( 'piper-lib-os' ) xsDeploy script: this piper xsDeploy","title":"Usage"},{"location":"steps/xsDeploy/#outputs","text":"Output type Details commonPipelineEnvironment operationId","title":"Outputs"},{"location":"steps/xsDeploy/#parameters","text":"","title":"Parameters"},{"location":"steps/xsDeploy/#overview-step","text":"Name Mandatory Additional information apiUrl yes loginOpts yes mtaPath yes org yes password (yes) pass via ENV or Jenkins credentials ( credentialsId ) script (yes) reference to Jenkins main pipeline script space yes username (yes) pass via ENV or Jenkins credentials ( credentialsId ) action no deployOpts no mode no operationId no operationIdLogPattern no verbose no activates debug output xsSessionFile no","title":"Overview - Step"},{"location":"steps/xsDeploy/#overview-execution-environment","text":"Orchestrator-specific only These parameters are relevant for orchestrator usage and not considered when using the command line option. Name Mandatory Additional information containerCommand no containerShell no dockerEnvVars no dockerImage no dockerName no dockerOptions no dockerPullImage no dockerVolumeBind no dockerWorkspace no","title":"Overview - Execution Environment"},{"location":"steps/xsDeploy/#details","text":"","title":"Details"},{"location":"steps/xsDeploy/#action","text":"Used for finalizing the blue-green deployment. back to overview Scope Details Aliases - Type string Mandatory no Default NONE Possible values - NONE - Resume - Abort - Retry Secret no Configuration scope \u2612 parameter \u2610 general \u2612 steps \u2612 stages Resource references none","title":"action"},{"location":"steps/xsDeploy/#apiurl","text":"The api url (e.g. https://example.org:12345 back to overview Scope Details Aliases - Type string Mandatory yes Default $PIPER_apiUrl (if set) Secret no Configuration scope \u2612 parameter \u2610 general \u2612 steps \u2612 stages Resource references none","title":"apiUrl"},{"location":"steps/xsDeploy/#containercommand","text":"Jenkins-specific: Used for proper environment setup. Kubernetes only: Allows to specify start command for container created with dockerImage parameter to overwrite Piper default (/usr/bin/tail -f /dev/null). back to overview Scope Details Aliases - Type string Mandatory no Default Secret no Configuration scope \u2612 parameter \u2612 general \u2612 steps \u2612 stages Resource references none","title":"containerCommand"},{"location":"steps/xsDeploy/#containershell","text":"Jenkins-specific: Used for proper environment setup. Allows to specify the shell to be executed for container with containerName. back to overview Scope Details Aliases - Type string Mandatory no Default Secret no Configuration scope \u2612 parameter \u2612 general \u2612 steps \u2612 stages Resource references none","title":"containerShell"},{"location":"steps/xsDeploy/#deployopts","text":"Additional options appended to the deploy command. Only needed for sophisticated cases. When provided it is the duty of the provider to ensure proper quoting / escaping. back to overview Scope Details Aliases - Type string Mandatory no Default $PIPER_deployOpts (if set) Secret no Configuration scope \u2612 parameter \u2610 general \u2612 steps \u2612 stages Resource references none","title":"deployOpts"},{"location":"steps/xsDeploy/#dockerenvvars","text":"Environment variables to set in the container, e.g. [http_proxy: \"proxy:8080\"]. back to overview Scope Details Aliases - Type map[string]string Mandatory no Default Secret no Configuration scope \u2612 parameter \u2612 general \u2612 steps \u2612 stages Resource references none","title":"dockerEnvVars"},{"location":"steps/xsDeploy/#dockerimage","text":"Name of the docker image that should be used. If empty, Docker is not used and the command is executed directly on the Jenkins system. back to overview Scope Details Aliases - Type string Mandatory no Default ppiper/xs-cli Secret no Configuration scope \u2612 parameter \u2612 general \u2612 steps \u2612 stages Resource references none","title":"dockerImage"},{"location":"steps/xsDeploy/#dockername","text":"Kubernetes only: Name of the container launching dockerImage. SideCar only: Name of the container in local network. back to overview Scope Details Aliases - Type string Mandatory no Default xs Secret no Configuration scope \u2612 parameter \u2612 general \u2612 steps \u2612 stages Resource references none","title":"dockerName"},{"location":"steps/xsDeploy/#dockeroptions","text":"Docker options to be set when starting the container. back to overview Scope Details Aliases - Type []string Mandatory no Default Secret no Configuration scope \u2612 parameter \u2612 general \u2612 steps \u2612 stages Resource references none","title":"dockerOptions"},{"location":"steps/xsDeploy/#dockerpullimage","text":"Set this to 'false' to bypass a docker image pull. Useful during development process. Allows testing of images which are available in the local registry only. back to overview Scope Details Aliases - Type bool Mandatory no Default true Possible values - true - false Secret no Configuration scope \u2612 parameter \u2612 general \u2612 steps \u2612 stages Resource references none","title":"dockerPullImage"},{"location":"steps/xsDeploy/#dockervolumebind","text":"Jenkins-specific: Used for proper environment setup. Volumes that should be mounted into the docker container. back to overview Scope Details Aliases - Type map[string]string Mandatory no Default Secret no Configuration scope \u2612 parameter \u2612 general \u2612 steps \u2612 stages Resource references none","title":"dockerVolumeBind"},{"location":"steps/xsDeploy/#dockerworkspace","text":"Jenkins-specific: Used for proper environment setup. Kubernetes only: Specifies a dedicated user home directory for the container which will be passed as value for environment variable HOME . back to overview Scope Details Aliases - Type string Mandatory no Default Secret no Configuration scope \u2612 parameter \u2612 general \u2612 steps \u2612 stages Resource references none","title":"dockerWorkspace"},{"location":"steps/xsDeploy/#loginopts","text":"Additional options appended to the login command. Only needed for sophisticated cases. When provided it is the duty of the provider to ensure proper quoting / escaping. back to overview Scope Details Aliases - Type string Mandatory yes Default $PIPER_loginOpts (if set) Secret no Configuration scope \u2612 parameter \u2610 general \u2612 steps \u2612 stages Resource references none","title":"loginOpts"},{"location":"steps/xsDeploy/#mode","text":"Controls if there is a standard deployment or a blue green deployment. Values: 'DEPLOY', 'BG_DEPLOY' back to overview Scope Details Aliases - Type string Mandatory no Default DEPLOY Possible values - NONE - DEPLOY - BG_DEPLOY Secret no Configuration scope \u2612 parameter \u2610 general \u2612 steps \u2612 stages Resource references none","title":"mode"},{"location":"steps/xsDeploy/#mtapath","text":"Path to deployable back to overview Scope Details Aliases - Type string Mandatory yes Default $PIPER_mtaPath (if set) Secret no Configuration scope \u2612 parameter \u2610 general \u2612 steps \u2612 stages Resource references commonPipelineEnvironment : reference to: mtaPath","title":"mtaPath"},{"location":"steps/xsDeploy/#operationid","text":"The operation ID. Used in case of bg-deploy in order to resume or abort a previously started deployment. back to overview Scope Details Aliases - Type string Mandatory no Default $PIPER_operationId (if set) Secret no Configuration scope \u2612 parameter \u2610 general \u2612 steps \u2612 stages Resource references commonPipelineEnvironment : reference to: operationId","title":"operationId"},{"location":"steps/xsDeploy/#operationidlogpattern","text":"Regex pattern for retrieving the ID of the operation from the xs log. back to overview Scope Details Aliases deployIdLogPattern Type string Mandatory no Default ^.*\"xs bg-deploy -i (.*) -a .*\".*$ Secret no Configuration scope \u2612 parameter \u2610 general \u2612 steps \u2612 stages Resource references none","title":"operationIdLogPattern"},{"location":"steps/xsDeploy/#org","text":"The org back to overview Scope Details Aliases - Type string Mandatory yes Default $PIPER_org (if set) Secret no Configuration scope \u2612 parameter \u2610 general \u2612 steps \u2612 stages Resource references none","title":"org"},{"location":"steps/xsDeploy/#password","text":"Password back to overview Scope Details Aliases - Type string Mandatory yes Default $PIPER_password (if set) Secret yes Configuration scope \u2612 parameter \u2610 general \u2612 steps \u2612 stages Resource references Jenkins credential id: id: credentialsId reference to: password","title":"password"},{"location":"steps/xsDeploy/#script","text":"The common script environment of the Jenkinsfile running. Typically the reference to the script calling the pipeline step is provided with the this parameter, as in script: this . This allows the function to access the commonPipelineEnvironment for retrieving, e.g. configuration parameters. back to overview Scope Details Aliases - Type Jenkins Script Mandatory yes Default Secret no Configuration scope \u2610 parameter \u2610 general \u2610 steps \u2610 stages Resource references none","title":"script"},{"location":"steps/xsDeploy/#space","text":"The space back to overview Scope Details Aliases - Type string Mandatory yes Default $PIPER_space (if set) Secret no Configuration scope \u2612 parameter \u2610 general \u2612 steps \u2612 stages Resource references none","title":"space"},{"location":"steps/xsDeploy/#username","text":"Username back to overview Scope Details Aliases user ( deprecated ) Type string Mandatory yes Default $PIPER_username (if set) Secret yes Configuration scope \u2612 parameter \u2610 general \u2612 steps \u2612 stages Resource references Jenkins credential id: id: credentialsId reference to: username","title":"username"},{"location":"steps/xsDeploy/#verbose","text":"verbose output back to overview Scope Details Aliases - Type bool Mandatory no Default false Possible values - true - false Secret no Configuration scope \u2612 parameter \u2612 general \u2612 steps \u2612 stages Resource references none","title":"verbose"},{"location":"steps/xsDeploy/#xssessionfile","text":"The file keeping the xs session. back to overview Scope Details Aliases - Type string Mandatory no Default .xsconfig Secret no Configuration scope \u2612 parameter \u2610 general \u2612 steps \u2612 stages Resource references none","title":"xsSessionFile"},{"location":"steps/xsDeploy/#credentialsid","text":"Jenkins 'Username with password' credentials ID containing username/password for accessing xs endpoint. back to overview Scope Details Aliases - Type string Configuration scope \u2612 parameter \u2612 general \u2612 steps \u2612 stages","title":"credentialsId"},{"location":"steps/xsDeploy/#side-effects","text":"none","title":"Side effects"},{"location":"steps/xsDeploy/#example","text":"xsDeploy script: this , mtaPath: 'path/to/archiveFile.mtar' , credentialsId: 'my-credentials-id' , apiUrl: 'https://example.org/xs' , space: 'mySpace' , org: 'myOrg' Example configuration: steps : <...> xsDeploy : mtaPath : path/to/archiveFile.mtar credentialsId : my-credentials-id apiUrl : https://example.org/xs space : mySpace org : myOrg","title":"Example"}]}