// Code generated by mockery v2.43.0. DO NOT EDIT.

package mocks

import (
	fs "io/fs"

	mock "github.com/stretchr/testify/mock"
)

// HadolintPiperFileUtils is an autogenerated mock type for the HadolintPiperFileUtils type
type HadolintPiperFileUtils struct {
	mock.Mock
}

type HadolintPiperFileUtils_Expecter struct {
	mock *mock.Mock
}

func (_m *HadolintPiperFileUtils) EXPECT() *HadolintPiperFileUtils_Expecter {
	return &HadolintPiperFileUtils_Expecter{mock: &_m.Mock}
}

// FileExists provides a mock function with given fields: filename
func (_m *HadolintPiperFileUtils) FileExists(filename string) (bool, error) {
	ret := _m.Called(filename)

	if len(ret) == 0 {
		panic("no return value specified for FileExists")
	}

	var r0 bool
	var r1 error
	if rf, ok := ret.Get(0).(func(string) (bool, error)); ok {
		return rf(filename)
	}
	if rf, ok := ret.Get(0).(func(string) bool); ok {
		r0 = rf(filename)
	} else {
		r0 = ret.Get(0).(bool)
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(filename)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// HadolintPiperFileUtils_FileExists_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'FileExists'
type HadolintPiperFileUtils_FileExists_Call struct {
	*mock.Call
}

// FileExists is a helper method to define mock.On call
//   - filename string
func (_e *HadolintPiperFileUtils_Expecter) FileExists(filename interface{}) *HadolintPiperFileUtils_FileExists_Call {
	return &HadolintPiperFileUtils_FileExists_Call{Call: _e.mock.On("FileExists", filename)}
}

func (_c *HadolintPiperFileUtils_FileExists_Call) Run(run func(filename string)) *HadolintPiperFileUtils_FileExists_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string))
	})
	return _c
}

func (_c *HadolintPiperFileUtils_FileExists_Call) Return(_a0 bool, _a1 error) *HadolintPiperFileUtils_FileExists_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *HadolintPiperFileUtils_FileExists_Call) RunAndReturn(run func(string) (bool, error)) *HadolintPiperFileUtils_FileExists_Call {
	_c.Call.Return(run)
	return _c
}

// FileWrite provides a mock function with given fields: filename, data, perm
func (_m *HadolintPiperFileUtils) FileWrite(filename string, data []byte, perm fs.FileMode) error {
	ret := _m.Called(filename, data, perm)

	if len(ret) == 0 {
		panic("no return value specified for FileWrite")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(string, []byte, fs.FileMode) error); ok {
		r0 = rf(filename, data, perm)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// HadolintPiperFileUtils_FileWrite_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'FileWrite'
type HadolintPiperFileUtils_FileWrite_Call struct {
	*mock.Call
}

// FileWrite is a helper method to define mock.On call
//   - filename string
//   - data []byte
//   - perm fs.FileMode
func (_e *HadolintPiperFileUtils_Expecter) FileWrite(filename interface{}, data interface{}, perm interface{}) *HadolintPiperFileUtils_FileWrite_Call {
	return &HadolintPiperFileUtils_FileWrite_Call{Call: _e.mock.On("FileWrite", filename, data, perm)}
}

func (_c *HadolintPiperFileUtils_FileWrite_Call) Run(run func(filename string, data []byte, perm fs.FileMode)) *HadolintPiperFileUtils_FileWrite_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string), args[1].([]byte), args[2].(fs.FileMode))
	})
	return _c
}

func (_c *HadolintPiperFileUtils_FileWrite_Call) Return(_a0 error) *HadolintPiperFileUtils_FileWrite_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *HadolintPiperFileUtils_FileWrite_Call) RunAndReturn(run func(string, []byte, fs.FileMode) error) *HadolintPiperFileUtils_FileWrite_Call {
	_c.Call.Return(run)
	return _c
}

// WriteFile provides a mock function with given fields: filename, data, perm
func (_m *HadolintPiperFileUtils) WriteFile(filename string, data []byte, perm fs.FileMode) error {
	ret := _m.Called(filename, data, perm)

	if len(ret) == 0 {
		panic("no return value specified for WriteFile")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(string, []byte, fs.FileMode) error); ok {
		r0 = rf(filename, data, perm)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// HadolintPiperFileUtils_WriteFile_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'WriteFile'
type HadolintPiperFileUtils_WriteFile_Call struct {
	*mock.Call
}

// WriteFile is a helper method to define mock.On call
//   - filename string
//   - data []byte
//   - perm fs.FileMode
func (_e *HadolintPiperFileUtils_Expecter) WriteFile(filename interface{}, data interface{}, perm interface{}) *HadolintPiperFileUtils_WriteFile_Call {
	return &HadolintPiperFileUtils_WriteFile_Call{Call: _e.mock.On("WriteFile", filename, data, perm)}
}

func (_c *HadolintPiperFileUtils_WriteFile_Call) Run(run func(filename string, data []byte, perm fs.FileMode)) *HadolintPiperFileUtils_WriteFile_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string), args[1].([]byte), args[2].(fs.FileMode))
	})
	return _c
}

func (_c *HadolintPiperFileUtils_WriteFile_Call) Return(_a0 error) *HadolintPiperFileUtils_WriteFile_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *HadolintPiperFileUtils_WriteFile_Call) RunAndReturn(run func(string, []byte, fs.FileMode) error) *HadolintPiperFileUtils_WriteFile_Call {
	_c.Call.Return(run)
	return _c
}

// NewHadolintPiperFileUtils creates a new instance of HadolintPiperFileUtils. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewHadolintPiperFileUtils(t interface {
	mock.TestingT
	Cleanup(func())
}) *HadolintPiperFileUtils {
	mock := &HadolintPiperFileUtils{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
