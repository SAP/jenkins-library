// Code generated by piper's step-generator. DO NOT EDIT.

package cmd

import (
	"fmt"
	"os"
	"time"

	"github.com/SAP/jenkins-library/pkg/config"
	"github.com/SAP/jenkins-library/pkg/log"
	"github.com/SAP/jenkins-library/pkg/telemetry"
	"github.com/spf13/cobra"
)

type checkSpotBugsOptions struct {
	ExcludeFilterFile string `json:"excludeFilterFile,omitempty"`
	IncludeFilterFile string `json:"includeFilterFile,omitempty"`
}

// CheckSpotBugsCommand Execute spotbugs maven plugin
func CheckSpotBugsCommand() *cobra.Command {
	metadata := checkSpotBugsMetadata()
	var stepConfig checkSpotBugsOptions
	var startTime time.Time

	var createCheckSpotBugsCmd = &cobra.Command{
		Use:   "checkSpotBugs",
		Short: "Execute spotbugs maven plugin",
		Long: `SpotBugs is a program to find bugs in Java programs. It looks for instances of “bug patterns” — code instances that are likely to be errors.
For more information please visit https://spotbugs.readthedocs.io/en/latest/maven.html`,
		PreRunE: func(cmd *cobra.Command, args []string) error {
			startTime = time.Now()
			log.SetStepName("checkSpotBugs")
			log.SetVerbose(GeneralConfig.Verbose)
			return PrepareConfig(cmd, &metadata, "checkSpotBugs", &stepConfig, config.OpenPiperFile)
		},
		Run: func(cmd *cobra.Command, args []string) {
			telemetryData := telemetry.CustomData{}
			telemetryData.ErrorCode = "1"
			handler := func() {
				telemetryData.Duration = fmt.Sprintf("%v", time.Since(startTime).Milliseconds())
				telemetry.Send(&telemetryData)
			}
			log.DeferExitHandler(handler)
			defer handler()
			telemetry.Initialize(GeneralConfig.NoTelemetry, "checkSpotBugs")
			checkSpotBugs(stepConfig, &telemetryData)
			telemetryData.ErrorCode = "0"
		},
	}

	addCheckSpotBugsFlags(createCheckSpotBugsCmd, &stepConfig)
	return createCheckSpotBugsCmd
}

func addCheckSpotBugsFlags(cmd *cobra.Command, stepConfig *checkSpotBugsOptions) {
	cmd.Flags().StringVar(&stepConfig.ExcludeFilterFile, "excludeFilterFile", os.Getenv("PIPER_excludeFilterFile"), "Path to a filter file with bug definitions which should be excluded.")
	cmd.Flags().StringVar(&stepConfig.IncludeFilterFile, "includeFilterFile", os.Getenv("PIPER_includeFilterFile"), "Path to a filter file with bug definitions which should be included.")

}

// retrieve step metadata
func checkSpotBugsMetadata() config.StepData {
	var theMetaData = config.StepData{
		Spec: config.StepSpec{
			Inputs: config.StepInputs{
				Parameters: []config.StepParameters{
					{
						Name:        "excludeFilterFile",
						ResourceRef: []config.ResourceReference{},
						Scope:       []string{"PARAMETERS", "STAGES", "STEPS"},
						Type:        "string",
						Mandatory:   false,
						Aliases:     []config.Alias{},
					},
					{
						Name:        "includeFilterFile",
						ResourceRef: []config.ResourceReference{},
						Scope:       []string{"PARAMETERS", "STAGES", "STEPS"},
						Type:        "string",
						Mandatory:   false,
						Aliases:     []config.Alias{},
					},
				},
			},
		},
	}
	return theMetaData
}
