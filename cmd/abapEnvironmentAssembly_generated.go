// Code generated by piper's step-generator. DO NOT EDIT.

package cmd

import (
	"fmt"
	"os"
	"path/filepath"
	"time"

	"github.com/SAP/jenkins-library/pkg/config"
	"github.com/SAP/jenkins-library/pkg/log"
	"github.com/SAP/jenkins-library/pkg/piperenv"
	"github.com/SAP/jenkins-library/pkg/telemetry"
	"github.com/spf13/cobra"
)

type abapEnvironmentAssemblyOptions struct {
	CfAPIEndpoint          string `json:"cfApiEndpoint,omitempty"`
	CfOrg                  string `json:"cfOrg,omitempty"`
	CfSpace                string `json:"cfSpace,omitempty"`
	CfServiceInstance      string `json:"cfServiceInstance,omitempty"`
	Host                   string `json:"host,omitempty"`
	Username               string `json:"username,omitempty"`
	Password               string `json:"password,omitempty"`
	PackageType            string `json:"packageType,omitempty"`
	PackageName            string `json:"packageName,omitempty"`
	Swc                    string `json:"swc,omitempty"`
	SwcRelease             string `json:"swcRelease,omitempty"`
	SpsLevel               string `json:"spsLevel,omitempty"`
	Namespace              string `json:"namespace,omitempty"`
	PreviousDeliveryCommit string `json:"previousDeliveryCommit,omitempty"`
	MaxRuntimeInMinutes    int    `json:"maxRuntimeInMinutes,omitempty"`
}

type abapEnvironmentAssemblyCommonPipelineEnvironment struct {
	sar_xml string
}

func (p *abapEnvironmentAssemblyCommonPipelineEnvironment) persist(path, resourceName string) {
	content := []struct {
		category string
		name     string
		value    string
	}{
		{category: "", name: "sar_xml", value: p.sar_xml},
	}

	errCount := 0
	for _, param := range content {
		err := piperenv.SetResourceParameter(path, resourceName, filepath.Join(param.category, param.name), param.value)
		if err != nil {
			log.Entry().WithError(err).Error("Error persisting piper environment.")
			errCount++
		}
	}
	if errCount > 0 {
		log.Entry().Fatal("failed to persist Piper environment")
	}
}

// AbapEnvironmentAssemblyCommand Assembly of installation, support package or patch in SAP Cloud Platform ABAP Environment system
func AbapEnvironmentAssemblyCommand() *cobra.Command {
	const STEP_NAME = "abapEnvironmentAssembly"

	metadata := abapEnvironmentAssemblyMetadata()
	var stepConfig abapEnvironmentAssemblyOptions
	var startTime time.Time
	var commonPipelineEnvironment abapEnvironmentAssemblyCommonPipelineEnvironment

	var createAbapEnvironmentAssemblyCmd = &cobra.Command{
		Use:   STEP_NAME,
		Short: "Assembly of installation, support package or patch in SAP Cloud Platform ABAP Environment system",
		Long:  `Assembly of installation, support package or patch in SAP Cloud Platform ABAP Environment system`,
		PreRunE: func(cmd *cobra.Command, _ []string) error {
			startTime = time.Now()
			log.SetStepName(STEP_NAME)
			log.SetVerbose(GeneralConfig.Verbose)

			path, _ := os.Getwd()
			fatalHook := &log.FatalHook{CorrelationID: GeneralConfig.CorrelationID, Path: path}
			log.RegisterHook(fatalHook)

			err := PrepareConfig(cmd, &metadata, STEP_NAME, &stepConfig, config.OpenPiperFile)
			if err != nil {
				log.SetErrorCategory(log.ErrorConfiguration)
				return err
			}
			log.RegisterSecret(stepConfig.Username)
			log.RegisterSecret(stepConfig.Password)

			if len(GeneralConfig.HookConfig.SentryConfig.Dsn) > 0 {
				sentryHook := log.NewSentryHook(GeneralConfig.HookConfig.SentryConfig.Dsn, GeneralConfig.CorrelationID)
				log.RegisterHook(&sentryHook)
			}

			return nil
		},
		Run: func(_ *cobra.Command, _ []string) {
			telemetryData := telemetry.CustomData{}
			telemetryData.ErrorCode = "1"
			handler := func() {
				commonPipelineEnvironment.persist(GeneralConfig.EnvRootPath, "commonPipelineEnvironment")
				telemetryData.Duration = fmt.Sprintf("%v", time.Since(startTime).Milliseconds())
				telemetry.Send(&telemetryData)
			}
			log.DeferExitHandler(handler)
			defer handler()
			telemetry.Initialize(GeneralConfig.NoTelemetry, STEP_NAME)
			abapEnvironmentAssembly(stepConfig, &telemetryData, &commonPipelineEnvironment)
			telemetryData.ErrorCode = "0"
			log.Entry().Info("SUCCESS")
		},
	}

	addAbapEnvironmentAssemblyFlags(createAbapEnvironmentAssemblyCmd, &stepConfig)
	return createAbapEnvironmentAssemblyCmd
}

func addAbapEnvironmentAssemblyFlags(cmd *cobra.Command, stepConfig *abapEnvironmentAssemblyOptions) {
	cmd.Flags().StringVar(&stepConfig.CfAPIEndpoint, "cfApiEndpoint", os.Getenv("PIPER_cfApiEndpoint"), "Cloud Foundry API endpoint")
	cmd.Flags().StringVar(&stepConfig.CfOrg, "cfOrg", os.Getenv("PIPER_cfOrg"), "CF org")
	cmd.Flags().StringVar(&stepConfig.CfSpace, "cfSpace", os.Getenv("PIPER_cfSpace"), "CF Space")
	cmd.Flags().StringVar(&stepConfig.CfServiceInstance, "cfServiceInstance", os.Getenv("PIPER_cfServiceInstance"), "Parameter of ServiceInstance Name to delete CloudFoundry Service")
	cmd.Flags().StringVar(&stepConfig.Host, "host", os.Getenv("PIPER_host"), "Specifies the host address of the SAP Cloud Platform ABAP Environment system")
	cmd.Flags().StringVar(&stepConfig.Username, "username", os.Getenv("PIPER_username"), "User or E-Mail for CF")
	cmd.Flags().StringVar(&stepConfig.Password, "password", os.Getenv("PIPER_password"), "User Password for CF User")
	cmd.Flags().StringVar(&stepConfig.PackageType, "packageType", os.Getenv("PIPER_packageType"), "Type of the delivery package(AOI, CSP, CPK) as provided by AAKaaS")
	cmd.Flags().StringVar(&stepConfig.PackageName, "packageName", os.Getenv("PIPER_packageName"), "Name of delivery package as provided by AAKaaS")
	cmd.Flags().StringVar(&stepConfig.Swc, "swc", os.Getenv("PIPER_swc"), "Name of software component as provided by AAKaaS")
	cmd.Flags().StringVar(&stepConfig.SwcRelease, "swcRelease", os.Getenv("PIPER_swcRelease"), "Software component release as provided by AAKaaS")
	cmd.Flags().StringVar(&stepConfig.SpsLevel, "spsLevel", os.Getenv("PIPER_spsLevel"), "Support package level as provided by AAKaaS")
	cmd.Flags().StringVar(&stepConfig.Namespace, "namespace", os.Getenv("PIPER_namespace"), "Development namespace for software component")
	cmd.Flags().StringVar(&stepConfig.PreviousDeliveryCommit, "previousDeliveryCommit", os.Getenv("PIPER_previousDeliveryCommit"), "Commit ID for the previous delivery event")
	cmd.Flags().IntVar(&stepConfig.MaxRuntimeInMinutes, "maxRuntimeInMinutes", 360, "maximal runtime of the step")

	cmd.MarkFlagRequired("username")
	cmd.MarkFlagRequired("password")
	cmd.MarkFlagRequired("packageType")
	cmd.MarkFlagRequired("packageName")
	cmd.MarkFlagRequired("swc")
	cmd.MarkFlagRequired("swcRelease")
	cmd.MarkFlagRequired("spsLevel")
	cmd.MarkFlagRequired("namespace")
	cmd.MarkFlagRequired("maxRuntimeInMinutes")
}

// retrieve step metadata
func abapEnvironmentAssemblyMetadata() config.StepData {
	var theMetaData = config.StepData{
		Metadata: config.StepMetadata{
			Name:    "abapEnvironmentAssembly",
			Aliases: []config.Alias{},
		},
		Spec: config.StepSpec{
			Inputs: config.StepInputs{
				Parameters: []config.StepParameters{
					{
						Name:        "cfApiEndpoint",
						ResourceRef: []config.ResourceReference{},
						Scope:       []string{"PARAMETERS", "STAGES", "STEPS", "GENERAL"},
						Type:        "string",
						Mandatory:   false,
						Aliases:     []config.Alias{{Name: "cloudFoundry/apiEndpoint"}},
					},
					{
						Name:        "cfOrg",
						ResourceRef: []config.ResourceReference{},
						Scope:       []string{"PARAMETERS", "STAGES", "STEPS", "GENERAL"},
						Type:        "string",
						Mandatory:   false,
						Aliases:     []config.Alias{{Name: "cloudFoundry/org"}},
					},
					{
						Name:        "cfSpace",
						ResourceRef: []config.ResourceReference{},
						Scope:       []string{"PARAMETERS", "STAGES", "STEPS", "GENERAL"},
						Type:        "string",
						Mandatory:   false,
						Aliases:     []config.Alias{{Name: "cloudFoundry/space"}},
					},
					{
						Name:        "cfServiceInstance",
						ResourceRef: []config.ResourceReference{},
						Scope:       []string{"PARAMETERS", "STAGES", "STEPS", "GENERAL"},
						Type:        "string",
						Mandatory:   false,
						Aliases:     []config.Alias{{Name: "cloudFoundry/serviceInstance"}},
					},
					{
						Name:        "host",
						ResourceRef: []config.ResourceReference{},
						Scope:       []string{"PARAMETERS", "STAGES", "STEPS"},
						Type:        "string",
						Mandatory:   false,
						Aliases:     []config.Alias{},
					},
					{
						Name:        "username",
						ResourceRef: []config.ResourceReference{},
						Scope:       []string{"PARAMETERS", "STAGES", "STEPS"},
						Type:        "string",
						Mandatory:   true,
						Aliases:     []config.Alias{},
					},
					{
						Name:        "password",
						ResourceRef: []config.ResourceReference{},
						Scope:       []string{"PARAMETERS", "STAGES", "STEPS"},
						Type:        "string",
						Mandatory:   true,
						Aliases:     []config.Alias{},
					},
					{
						Name:        "packageType",
						ResourceRef: []config.ResourceReference{{Name: "commonPipelineEnvironment", Param: "packageType"}},
						Scope:       []string{"PARAMETERS", "STAGES", "STEPS"},
						Type:        "string",
						Mandatory:   true,
						Aliases:     []config.Alias{},
					},
					{
						Name:        "packageName",
						ResourceRef: []config.ResourceReference{{Name: "commonPipelineEnvironment", Param: "packageName"}},
						Scope:       []string{"PARAMETERS", "STAGES", "STEPS"},
						Type:        "string",
						Mandatory:   true,
						Aliases:     []config.Alias{},
					},
					{
						Name:        "swc",
						ResourceRef: []config.ResourceReference{{Name: "commonPipelineEnvironment", Param: "swc"}},
						Scope:       []string{"PARAMETERS", "STAGES", "STEPS"},
						Type:        "string",
						Mandatory:   true,
						Aliases:     []config.Alias{},
					},
					{
						Name:        "swcRelease",
						ResourceRef: []config.ResourceReference{{Name: "commonPipelineEnvironment", Param: "SWCRelease"}},
						Scope:       []string{"PARAMETERS", "STAGES", "STEPS"},
						Type:        "string",
						Mandatory:   true,
						Aliases:     []config.Alias{},
					},
					{
						Name:        "spsLevel",
						ResourceRef: []config.ResourceReference{{Name: "commonPipelineEnvironment", Param: "spsLevel"}},
						Scope:       []string{"PARAMETERS", "STAGES", "STEPS"},
						Type:        "string",
						Mandatory:   true,
						Aliases:     []config.Alias{},
					},
					{
						Name:        "namespace",
						ResourceRef: []config.ResourceReference{{Name: "commonPipelineEnvironment", Param: "namespace"}},
						Scope:       []string{"PARAMETERS", "STAGES", "STEPS"},
						Type:        "string",
						Mandatory:   true,
						Aliases:     []config.Alias{},
					},
					{
						Name:        "previousDeliveryCommit",
						ResourceRef: []config.ResourceReference{{Name: "commonPipelineEnvironment", Param: "previousDeliveryCommit"}},
						Scope:       []string{"PARAMETERS", "STAGES", "STEPS"},
						Type:        "string",
						Mandatory:   false,
						Aliases:     []config.Alias{},
					},
					{
						Name:        "maxRuntimeInMinutes",
						ResourceRef: []config.ResourceReference{},
						Scope:       []string{"PARAMETERS", "STAGES", "STEPS"},
						Type:        "int",
						Mandatory:   true,
						Aliases:     []config.Alias{},
					},
				},
			},
		},
	}
	return theMetaData
}
