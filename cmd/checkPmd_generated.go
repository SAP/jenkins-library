// Code generated by piper's step-generator. DO NOT EDIT.

package cmd

import (
	"fmt"
	"time"

	"github.com/SAP/jenkins-library/pkg/config"
	"github.com/SAP/jenkins-library/pkg/log"
	"github.com/SAP/jenkins-library/pkg/telemetry"
	"github.com/spf13/cobra"
)

type checkPmdOptions struct {
	Excludes             []string `json:"excludes,omitempty"`
	RuleSets             []string `json:"ruleSets,omitempty"`
	MavenModulesExcludes []string `json:"mavenModulesExcludes,omitempty"`
}

// CheckPmdCommand Execute PMD maven plugin
func CheckPmdCommand() *cobra.Command {
	metadata := checkPmdMetadata()
	var stepConfig checkPmdOptions
	var startTime time.Time

	var createCheckPmdCmd = &cobra.Command{
		Use:   "checkPmd",
		Short: "Execute PMD maven plugin",
		Long: `PMD is a source code analyzer. It finds common programming flaws like unused variables, empty catch blocks, unnecessary object creation, and so forth. It supports Java, JavaScript, Salesforce.com Apex and Visualforce, PLSQL, Apache Velocity, XML, XSL.
For more information please visit https://pmd.github.io/`,
		PreRunE: func(cmd *cobra.Command, args []string) error {
			startTime = time.Now()
			log.SetStepName("checkPmd")
			log.SetVerbose(GeneralConfig.Verbose)
			return PrepareConfig(cmd, &metadata, "checkPmd", &stepConfig, config.OpenPiperFile)
		},
		Run: func(cmd *cobra.Command, args []string) {
			telemetryData := telemetry.CustomData{}
			telemetryData.ErrorCode = "1"
			handler := func() {
				telemetryData.Duration = fmt.Sprintf("%v", time.Since(startTime).Milliseconds())
				telemetry.Send(&telemetryData)
			}
			log.DeferExitHandler(handler)
			defer handler()
			telemetry.Initialize(GeneralConfig.NoTelemetry, "checkPmd")
			checkPmd(stepConfig, &telemetryData)
			telemetryData.ErrorCode = "0"
		},
	}

	addCheckPmdFlags(createCheckPmdCmd, &stepConfig)
	return createCheckPmdCmd
}

func addCheckPmdFlags(cmd *cobra.Command, stepConfig *checkPmdOptions) {
	cmd.Flags().StringSliceVar(&stepConfig.Excludes, "excludes", []string{}, "A comma-separated list of exclusions (.java source files) expressed as an Ant-style pattern relative to the sources root folder, i.e. application/src/main/java for maven projects.")
	cmd.Flags().StringSliceVar(&stepConfig.RuleSets, "ruleSets", []string{}, "The PMD rulesets to use. See the Stock Java Rulesets for a list of available rules. Defaults to a custom ruleset provided by this maven plugin.")
	cmd.Flags().StringSliceVar(&stepConfig.MavenModulesExcludes, "mavenModulesExcludes", []string{}, "Maven modules which should be excluded by the PMD check. By default the modules 'unit-tests' and 'integration-tests' will be excluded.")

}

// retrieve step metadata
func checkPmdMetadata() config.StepData {
	var theMetaData = config.StepData{
		Spec: config.StepSpec{
			Inputs: config.StepInputs{
				Parameters: []config.StepParameters{
					{
						Name:        "excludes",
						ResourceRef: []config.ResourceReference{},
						Scope:       []string{"PARAMETERS", "STAGES", "STEPS"},
						Type:        "[]string",
						Mandatory:   false,
						Aliases:     []config.Alias{},
					},
					{
						Name:        "ruleSets",
						ResourceRef: []config.ResourceReference{},
						Scope:       []string{"PARAMETERS", "STAGES", "STEPS"},
						Type:        "[]string",
						Mandatory:   false,
						Aliases:     []config.Alias{},
					},
					{
						Name:        "mavenModulesExcludes",
						ResourceRef: []config.ResourceReference{},
						Scope:       []string{"PARAMETERS", "STAGES", "STEPS"},
						Type:        "[]string",
						Mandatory:   false,
						Aliases:     []config.Alias{},
					},
				},
			},
		},
	}
	return theMetaData
}
