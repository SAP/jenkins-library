name: Integration Tests (Pull Request)

env:
  GHA_UBUNTU_VERSION: ubuntu-latest

  GHA_CHECKOUT_VERSION: actions/checkout@v3
  GHA_SETUP_GO_VERSION: actions/setup-go@v3
  GHA_UPLOAD_ARTIFACT_VERSION: actions/upload-artifact@v3
  GHA_DOWNLOAD_ARTIFACT_VERSION: actions/download-artifact@v3

  COMMIT_ID: ""
  BRANCH_NAME: ""
  REPOSITORY: ""

  GHA_GO_VERSION: 1.18.x
  CGO_ENABLED: 0
  TIMEOUT: 10m

  PIPER_INTEGRATION_GITHUB_TOKEN: ${{secrets.PIPER_INTEGRATION_GITHUB_TOKEN}}
  PIPER_INTEGRATION_SONAR_TOKEN: ${{secrets.PIPER_INTEGRATION_SONAR_TOKEN}}

on:
  issue_comment:
    types: [created]

jobs:

  StartStatusUpdate:
    name: Start status update
    runs-on: ${{ env.GHA_UBUNTU_VERSION }}
    if: github.event.comment.body == '/it' && (github.event.comment.author_association == 'COLLABORATOR' || github.event.comment.author_association == 'OWNER' || github.event.comment.author_association == 'MEMBER')
    steps:
      - name: Get PR's URL
        id: pullrequest
        run: echo "::set-output name=pullrequest::$(curl ${{ github.event.comment.issue_url }} | jq '.pull_request.url' | sed 's/\"//g')"
      - name: Get branch name
        run: echo "$(curl ${{ steps.pullrequest.outputs.pullrequest }} | jq '.head.ref' | sed 's/\"//g')" >> $BRANCH_NAME
      - name: Get repository
        run: echo "$(curl ${{ steps.pullrequest.outputs.pullrequest }} | jq '.head.repo.full_name' | sed 's/\"//g')" >> $REPOSITORY
      - name: Get commit ID
        run: echo "$(git log --format=%H -n 1)" >> $COMMIT_ID
      - name: Update status
        run: |
          curl --location --request POST 'https://api.github.com/repos/SAP/jenkins-library/statuses/${{ env.COMMIT_ID }}' -H 'Content-Type: application/json' --data '{"state": "pending", "context": "Go / integration-tests", "target_url": "https://github.com/SAP/jenkins-library/actions/runs/${{ github.run_id }}"}' -H 'Authorization: token ${{secrets.INTEGRATION_TEST_VOTING_TOKEN}}'

  ConsumerTests:
    name: Consumer tests
    needs:
      - StartStatusUpdate
    runs-on: ${{ env.GHA_UBUNTU_VERSION }}
    steps:
      - name: Checkout
        uses: ${{ env.GHA_CHECKOUT_VERSION }}
        with:
          repository: ${{ env.REPOSITORY }}
          ref: ${{ env.BRANCH_NAME }}
      - uses: actions/setup-java@v1
        with:
          java-version: '11'
      - name: Install Groovy
        run: sudo apt-get update && sudo apt-get install groovy -y
      - name: Setup Git
        run: git config --global user.email "piper-testing-bot@example.com" && git config --global user.name "piper-testing-bot"
      - name: Run tests
        env:
          REPOSITORY_UNDER_TEST: ${{ steps.repository.outputs.repository }}
          BRANCH_NAME: ${{ steps.branchname.outputs.branchname }}
          BUILD_WEB_URL: https://github.com/SAP/jenkins-library/actions/runs/${{ github.run_id }}
          INTEGRATION_TEST_VOTING_TOKEN: ${{ secrets.INTEGRATION_TEST_VOTING_TOKEN }}
          CX_INFRA_IT_CF_USERNAME: ${{ secrets.CX_INFRA_IT_CF_USERNAME }}
          CX_INFRA_IT_CF_PASSWORD: ${{ secrets.CX_INFRA_IT_CF_PASSWORD }}
          NEO_DEPLOY_USERNAME: ${{ secrets.NEO_DEPLOY_USERNAME }}
          NEO_DEPLOY_PASSWORD: ${{ secrets.NEO_DEPLOY_PASSWORD }}
          CX_INFRA_IT_TMS_UPLOAD: ${{ secrets.CX_INFRA_IT_TMS_UPLOAD }}
        run: cd consumer-test && groovy consumerTestController.groovy

  BuildPiper:
    name: Build Piper
    needs:
      - StartStatusUpdate
    runs-on: ${{ env.GHA_UBUNTU_VERSION }}
    steps:
      - name: Checkout
        uses: ${{ env.GHA_CHECKOUT_VERSION }}
        with:
          repository: ${{ env.REPOSITORY }}
          ref: ${{ env.BRANCH_NAME }}
      - uses: ${{ env.GHA_SETUP_GO_VERSION }}
        with:
          go-version: ${{ env.GHA_GO_VERSION }}
      - name: Build
        # with `-tags release` we ensure that shared test utilities won't end up in the binary
        run: go build -o piper -tags release
      - name: Upload Piper binary
        if: success()
        uses: ${{ env.GHA_UPLOAD_ARTIFACT_VERSION }}
        with:
          path: piper

  TestCNBIntegration:
    name: Test CNB integration
    needs:
      - BuildPiper
    runs-on: ${{ env.GHA_UBUNTU_VERSION }}
    steps:
      - name: Checkout
        uses: ${{ env.GHA_CHECKOUT_VERSION }}
        with:
          repository: ${{ env.REPOSITORY }}
          ref: ${{ env.BRANCH_NAME }}
      - uses: ${{ env.GHA_SETUP_GO_VERSION }}
        with:
          go-version: ${{ env.GO_VERSION }}
      - name: Download Piper binary
        uses: ${{ env.GHA_DOWNLOAD_ARTIFACT_VERSION }}
        with:
          name: piper
      - name: Run test
        run: go test -v -tags integration -timeout ${ env.TIMEOUT }} -run ${{ github.job }} ./integration/...

  TestGaugeIntegration:
    name: Test Gauge integration
    needs:
      - BuildPiper
    runs-on: ${{ env.GHA_UBUNTU_VERSION }}
    steps:
      - name: Checkout
        uses: ${{ env.GHA_CHECKOUT_VERSION }}
        with:
          repository: ${{ env.REPOSITORY }}
          ref: ${{ env.BRANCH_NAME }}
      - uses: ${{ env.GHA_SETUP_GO_VERSION }}
        with:
          go-version: ${{ env.GO_VERSION }}
      - name: Download Piper binary
        uses: ${{ env.GHA_DOWNLOAD_ARTIFACT_VERSION }}
        with:
          name: piper
      - name: Run test
        run: go test -v -tags integration -timeout ${ env.TIMEOUT }} -run ${{ github.job }} ./integration/...

  TestGCSIntegration:
    name: Test GCS integration
    needs:
      - BuildPiper
    runs-on: ${{ env.GHA_UBUNTU_VERSION }}
    steps:
      - name: Checkout
        uses: ${{ env.GHA_CHECKOUT_VERSION }}
        with:
          repository: ${{ env.REPOSITORY }}
          ref: ${{ env.BRANCH_NAME }}
      - uses: ${{ env.GHA_SETUP_GO_VERSION }}
        with:
          go-version: ${{ env.GO_VERSION }}
      - name: Download Piper binary
        uses: ${{ env.GHA_DOWNLOAD_ARTIFACT_VERSION }}
        with:
          name: piper
      - name: Run test
        run: go test -v -tags integration -timeout ${ env.TIMEOUT }} -run ${{ github.job }} ./integration/...

  TestGitHubIntegration:
    name: Test GitHub integration
    needs:
      - BuildPiper
    runs-on: ${{ env.GHA_UBUNTU_VERSION }}
    steps:
      - name: Checkout
        uses: ${{ env.GHA_CHECKOUT_VERSION }}
        with:
          repository: ${{ env.REPOSITORY }}
          ref: ${{ env.BRANCH_NAME }}
      - uses: ${{ env.GHA_SETUP_GO_VERSION }}
        with:
          go-version: ${{ env.GO_VERSION }}
      - name: Download Piper binary
        uses: ${{ env.GHA_DOWNLOAD_ARTIFACT_VERSION }}
        with:
          name: piper
      - name: Run test
        run: go test -v -tags integration -timeout ${ env.TIMEOUT }} -run ${{ github.job }} ./integration/...

  TestGitOpsIntegration:
    name: Test GitOps integration
    needs:
      - BuildPiper
    runs-on: ${{ env.GHA_UBUNTU_VERSION }}
    steps:
      - name: Checkout
        uses: ${{ env.GHA_CHECKOUT_VERSION }}
        with:
          repository: ${{ env.REPOSITORY }}
          ref: ${{ env.BRANCH_NAME }}
      - uses: ${{ env.GHA_SETUP_GO_VERSION }}
        with:
          go-version: ${{ env.GO_VERSION }}
      - name: Download Piper binary
        uses: ${{ env.GHA_DOWNLOAD_ARTIFACT_VERSION }}
        with:
          name: piper
      - name: Run test
        run: go test -v -tags integration -timeout ${ env.TIMEOUT }} -run ${{ github.job }} ./integration/...

  TestGolangIntegration:
    name: Test Golang integration
    needs:
      - BuildPiper
    runs-on: ${{ env.GHA_UBUNTU_VERSION }}
    steps:
      - name: Checkout
        uses: ${{ env.GHA_CHECKOUT_VERSION }}
        with:
          repository: ${{ env.REPOSITORY }}
          ref: ${{ env.BRANCH_NAME }}
      - uses: ${{ env.GHA_SETUP_GO_VERSION }}
        with:
          go-version: ${{ env.GO_VERSION }}
      - name: Download Piper binary
        uses: ${{ env.GHA_DOWNLOAD_ARTIFACT_VERSION }}
        with:
          name: piper
      - name: Run test
        run: go test -v -tags integration -timeout ${ env.TIMEOUT }} -run ${{ github.job }} ./integration/...

  TestGradleIntegration:
    name: Test Gradle integration
    needs:
      - BuildPiper
    runs-on: ${{ env.GHA_UBUNTU_VERSION }}
    steps:
      - name: Checkout
        uses: ${{ env.GHA_CHECKOUT_VERSION }}
        with:
          repository: ${{ env.REPOSITORY }}
          ref: ${{ env.BRANCH_NAME }}
      - uses: ${{ env.GHA_SETUP_GO_VERSION }}
        with:
          go-version: ${{ env.GO_VERSION }}
      - name: Download Piper binary
        uses: ${{ env.GHA_DOWNLOAD_ARTIFACT_VERSION }}
        with:
          name: piper
      - name: Run test
        run: go test -v -tags integration -timeout ${ env.TIMEOUT }} -run ${{ github.job }} ./integration/...

  TestInfluxIntegration:
    name: Test Influx integration
    needs:
      - BuildPiper
    runs-on: ${{ env.GHA_UBUNTU_VERSION }}
    steps:
      - name: Checkout
        uses: ${{ env.GHA_CHECKOUT_VERSION }}
        with:
          repository: ${{ env.REPOSITORY }}
          ref: ${{ env.BRANCH_NAME }}
      - uses: ${{ env.GHA_SETUP_GO_VERSION }}
        with:
          go-version: ${{ env.GO_VERSION }}
      - name: Download Piper binary
        uses: ${{ env.GHA_DOWNLOAD_ARTIFACT_VERSION }}
        with:
          name: piper
      - name: Run test
        run: go test -v -tags integration -timeout ${ env.TIMEOUT }} -run ${{ github.job }} ./integration/...

  TestJenkinsIntegration:
    name: Test Jenkins integration
    needs:
      - BuildPiper
    runs-on: ${{ env.GHA_UBUNTU_VERSION }}
    steps:
      - name: Checkout
        uses: ${{ env.GHA_CHECKOUT_VERSION }}
        with:
          repository: ${{ env.REPOSITORY }}
          ref: ${{ env.BRANCH_NAME }}
      - uses: ${{ env.GHA_SETUP_GO_VERSION }}
        with:
          go-version: ${{ env.GO_VERSION }}
      - name: Download Piper binary
        uses: ${{ env.GHA_DOWNLOAD_ARTIFACT_VERSION }}
        with:
          name: piper
      - name: Run test
        run: go test -v -tags integration -timeout ${ env.TIMEOUT }} -run ${{ github.job }} ./integration/...

  TestKarmaIntegration:
    name: Test Karma integration
    needs:
      - BuildPiper
    runs-on: ${{ env.GHA_UBUNTU_VERSION }}
    steps:
      - name: Checkout
        uses: ${{ env.GHA_CHECKOUT_VERSION }}
        with:
          repository: ${{ env.REPOSITORY }}
          ref: ${{ env.BRANCH_NAME }}
      - uses: ${{ env.GHA_SETUP_GO_VERSION }}
        with:
          go-version: ${{ env.GO_VERSION }}
      - name: Download Piper binary
        uses: ${{ env.GHA_DOWNLOAD_ARTIFACT_VERSION }}
        with:
          name: piper
      - name: Run test
        run: go test -v -tags integration -timeout ${ env.TIMEOUT }} -run ${{ github.job }} ./integration/...

  TestMavenIntegration:
    name: Test Maven integration
    needs:
      - BuildPiper
    runs-on: ${{ env.GHA_UBUNTU_VERSION }}
    steps:
      - name: Checkout
        uses: ${{ env.GHA_CHECKOUT_VERSION }}
        with:
          repository: ${{ env.REPOSITORY }}
          ref: ${{ env.BRANCH_NAME }}
      - uses: ${{ env.GHA_SETUP_GO_VERSION }}
        with:
          go-version: ${{ env.GO_VERSION }}
      - name: Download Piper binary
        uses: ${{ env.GHA_DOWNLOAD_ARTIFACT_VERSION }}
        with:
          name: piper
      - name: Run test
        run: go test -v -tags integration -timeout ${ env.TIMEOUT }} -run ${{ github.job }} ./integration/...

  TestMTAIntegration:
    name: Test MTA integration
    needs:
      - BuildPiper
    runs-on: ${{ env.GHA_UBUNTU_VERSION }}
    steps:
      - name: Checkout
        uses: ${{ env.GHA_CHECKOUT_VERSION }}
        with:
          repository: ${{ env.REPOSITORY }}
          ref: ${{ env.BRANCH_NAME }}
      - uses: ${{ env.GHA_SETUP_GO_VERSION }}
        with:
          go-version: ${{ env.GO_VERSION }}
      - name: Download Piper binary
        uses: ${{ env.GHA_DOWNLOAD_ARTIFACT_VERSION }}
        with:
          name: piper
      - name: Run test
        run: go test -v -tags integration -timeout ${ env.TIMEOUT }} -run ${{ github.job }} ./integration/...

  TestNexusIntegration:
    name: Test Nexus integration
    needs:
      - BuildPiper
    runs-on: ${{ env.GHA_UBUNTU_VERSION }}
    steps:
      - name: Checkout
        uses: ${{ env.GHA_CHECKOUT_VERSION }}
        with:
          repository: ${{ env.REPOSITORY }}
          ref: ${{ env.BRANCH_NAME }}
      - uses: ${{ env.GHA_SETUP_GO_VERSION }}
        with:
          go-version: ${{ env.GO_VERSION }}
      - name: Download Piper binary
        uses: ${{ env.GHA_DOWNLOAD_ARTIFACT_VERSION }}
        with:
          name: piper
      - name: Run test
        run: go test -v -tags integration -timeout ${ env.TIMEOUT }} -run ${{ github.job }} ./integration/...

  TestNPMIntegration:
    name: Test NPM integration
    needs:
      - BuildPiper
    runs-on: ${{ env.GHA_UBUNTU_VERSION }}
    steps:
      - name: Checkout
        uses: ${{ env.GHA_CHECKOUT_VERSION }}
        with:
          repository: ${{ env.REPOSITORY }}
          ref: ${{ env.BRANCH_NAME }}
      - uses: ${{ env.GHA_SETUP_GO_VERSION }}
        with:
          go-version: ${{ env.GO_VERSION }}
      - name: Download Piper binary
        uses: ${{ env.GHA_DOWNLOAD_ARTIFACT_VERSION }}
        with:
          name: piper
      - name: Run test
        run: go test -v -tags integration -timeout ${ env.TIMEOUT }} -run ${{ github.job }} ./integration/...

  TestPiperIntegration:
    name: Test Piper integration
    needs:
      - BuildPiper
    runs-on: ${{ env.GHA_UBUNTU_VERSION }}
    steps:
      - name: Checkout
        uses: ${{ env.GHA_CHECKOUT_VERSION }}
        with:
          repository: ${{ env.REPOSITORY }}
          ref: ${{ env.BRANCH_NAME }}
      - uses: ${{ env.GHA_SETUP_GO_VERSION }}
        with:
          go-version: ${{ env.GO_VERSION }}
      - name: Download Piper binary
        uses: ${{ env.GHA_DOWNLOAD_ARTIFACT_VERSION }}
        with:
          name: piper
      - name: Run test
        run: go test -v -tags integration -timeout ${ env.TIMEOUT }} -run ${{ github.job }} ./integration/...

  TestPythonIntegration:
    name: Test Python integration
    needs:
      - BuildPiper
    runs-on: ${{ env.GHA_UBUNTU_VERSION }}
    steps:
      - name: Checkout
        uses: ${{ env.GHA_CHECKOUT_VERSION }}
        with:
          repository: ${{ env.REPOSITORY }}
          ref: ${{ env.BRANCH_NAME }}
      - uses: ${{ env.GHA_SETUP_GO_VERSION }}
        with:
          go-version: ${{ env.GO_VERSION }}
      - name: Download Piper binary
        uses: ${{ env.GHA_DOWNLOAD_ARTIFACT_VERSION }}
        with:
          name: piper
      - name: Run test
        run: go test -v -tags integration -timeout ${ env.TIMEOUT }} -run ${{ github.job }} ./integration/...

  TestSonarIntegration:
    name: Test Sonar integration
    needs:
      - BuildPiper
    runs-on: ${{ env.GHA_UBUNTU_VERSION }}
    steps:
      - name: Checkout
        uses: ${{ env.GHA_CHECKOUT_VERSION }}
        with:
          repository: ${{ env.REPOSITORY }}
          ref: ${{ env.BRANCH_NAME }}
      - uses: ${{ env.GHA_SETUP_GO_VERSION }}
        with:
          go-version: ${{ env.GO_VERSION }}
      - name: Download Piper binary
        uses: ${{ env.GHA_DOWNLOAD_ARTIFACT_VERSION }}
        with:
          name: piper
      - name: Run test
        run: go test -v -tags integration -timeout ${ env.TIMEOUT }} -run ${{ github.job }} ./integration/...

  TestVaultIntegration:
    name: Test Vault integration
    needs:
      - BuildPiper
    runs-on: ${{ env.GHA_UBUNTU_VERSION }}
    steps:
      - name: Checkout
        uses: ${{ env.GHA_CHECKOUT_VERSION }}
        with:
          repository: ${{ env.REPOSITORY }}
          ref: ${{ env.BRANCH_NAME }}
      - uses: ${{ env.GHA_SETUP_GO_VERSION }}
        with:
          go-version: ${{ env.GO_VERSION }}
      - name: Download Piper binary
        uses: ${{ env.GHA_DOWNLOAD_ARTIFACT_VERSION }}
        with:
          name: piper
      - name: Run test
        run: go test -v -tags integration -timeout ${ env.TIMEOUT }} -run ${{ github.job }} ./integration/...

  EndStatusUpdate:
    name: End status update
    if: always()
    needs:
      - TestCNBIntegration
      - TestGaugeIntegration
      - TestGCSIntegration
      - TestGitHubIntegration
      - TestGitOpsIntegration
      - TestGolangIntegration
      - TestGradleIntegration
      - TestInfluxIntegration
      - TestJenkinsIntegration
      - TestKarmaIntegration
      - TestMavenIntegration
      - TestMTAIntegration
      - TestNexusIntegration
      - TestNPMIntegration
      - TestPiperIntegration
      - TestPythonIntegration
      - TestSonarIntegration
      - TestVaultIntegration
    runs-on: ${{ env.GHA_UBUNTU_VERSION }}
    steps:
      - name: Update status
        if: ${{ !contains(jobs.Test**Integration.result, "cancelled") || !contains(jobs.Test**Integration.result, "failure") || !contains(jobs.Test**Integration.result, "skipped") }}
        run: |
          curl --location --request POST 'https://api.github.com/repos/SAP/jenkins-library/statuses/${{ env.COMMIT_ID }}' -H 'Content-Type: application/json' --data '{"state": "success", "context": "Go / integration-tests", "target_url": "https://github.com/SAP/jenkins-library/actions/runs/${{ github.run_id }}"}' -H 'Authorization: token ${{secrets.INTEGRATION_TEST_VOTING_TOKEN}}'
      - name: Update status
        if: cancelled() || failure() || skipped()
        run: |
          curl --location --request POST 'https://api.github.com/repos/SAP/jenkins-library/statuses/${{ env.COMMIT_ID }}' -H 'Content-Type: application/json' --data '{"state": "failure", "context": "Go / integration-tests", "target_url": "https://github.com/SAP/jenkins-library/actions/runs/${{ github.run_id }}"}' -H 'Authorization: token ${{secrets.INTEGRATION_TEST_VOTING_TOKEN}}'
