name: Integration tests

on:
  push:
    branches:
      - master
      - it/**

env:
  GHA_GO_VERSION: 1.18.x
  TIMEOUT: 10m

  PIPER_INTEGRATION_GITHUB_TOKEN: ${{secrets.PIPER_INTEGRATION_GITHUB_TOKEN}}
  PIPER_INTEGRATION_SONAR_TOKEN: ${{secrets.PIPER_INTEGRATION_SONAR_TOKEN}}

jobs:
  start:
    name: Start
    runs-on: ubuntu-latest
    steps:
      - name: Get commit id
        id: commit_it
        run: |
          echo "::set-output name=commit_it::$(git log --format=%H -n 1)"
      - name: Update status
        run: |
          curl \
            --location \
            --request POST 'https://api.github.com/repos/SAP/jenkins-library/statuses/${{ steps.commit_id.outputs.commit_id }}' \
            -H 'Content-Type: application/json' \
            --data '{"state": "pending",
                    "context": "Go / integration-tests",
                    "target_url": "https://github.com/SAP/jenkins-library/actions/runs/${{ github.run_id }}"}' \
            -H 'Authorization: token ${{secrets.INTEGRATION_TEST_VOTING_TOKEN}}'
    outputs:
      commit_id: ${{ steps.commit_id.outputs.commit_id }}

  build_piper:
    name: Build Piper
    needs:
      - start
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - uses: actions/setup-go@v3
        with:
          go-version: ${{ env.GHA_GO_VERSION }}
      - name: Build
        # with `-tags release` we ensure that shared test utilities won't end up in the binary
        run: CGO_ENABLED=0 GOOS=linux GOARCH=amd64 go build -o piper -tags release
      - name: Upload Piper binary
        if: success()
        uses: actions/upload-artifact@v3
        with:
          name: piper
          path: piper

  build_integration_tests:
    name: Build integration tests
    needs:
      - start
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - uses: actions/setup-go@v3
        with:
          go-version: ${{ env.GHA_GO_VERSION }}
      - name: Build
        run: CGO_ENABLED=0 GOOS=linux GOARCH=amd64 go test -c -o integration_tests -tags integration ./integration/...
      - name: Upload integration tests binary
        if: success()
        uses: actions/upload-artifact@v3
        with:
          name: integration_tests
          path: integration_tests

  docker_image_buffering:
    name: Docker image buffering
    needs:
      - start
    runs-on: ubuntu-latest
    steps:
      - name: Download images
        run: |
          for image in (
            devxci/mbtci-java11-node14
            golang:1
            adoptopenjdk/openjdk11:jdk-11.0.11_9-alpine
            selenium/standalone-chrome:3.141.59-20210713
            paketobuildpacks/builder:0.3.26-base
            node:12-slim
            nginx:latest
            gradle:6-jdk11-alpine
            maven:3-openjdk-8-slim
            python:3.9
            vault:1.4.3
            sonatype/nexus:2.14.18-01
            getgauge/gocd-jdk-mvn-node
            sonatype/nexus3:3.25.1
            paketobuildpacks/builder:buildpackless-full
            influxdb:2.0
            fsouza/fake-gcs-server:1.30.2
            registry:2
            nekottyo/kustomize-kubeval:kustomizev4
            node:lts-stretch
          )
          do
            docker save ${image} | gzip > ${image}.tar.gz
          done
      - uses: actions/upload-artifact@v3
        if: success()
        with:
          name: |
            **.tar.gz

  run_integration_tests:
    name: Run integration tests
    needs:
      - start
      - build_piper
      - build_integration_tests
      - docker_image_buffering
    strategy:
      fail-fast: true
      matrix:
        os:
          - ubuntu-latest
        version:
          #         tough CNB tests are decomposed to reduce pipeline execution time
          - '"(TestCNBIntegrationBindings|TestCNBIntegrationWrongBuilderProject|TestCNBIntegrationNonZipPath|TestCNBIntegrationZipPath|TestCNBIntegrationPreserveFilesIgnored)"'
          - '"TestCNBIntegrationPreserveFiles\b"'
          - '"TestCNBIntegrationNPMProject"'
          - '"TestCNBIntegrationMultiImage"'
          - '"TestCNBIntegrationNPMCustomBuildpacksBuildpacklessProject"'
          - '"TestCNBIntegrationNPMCustomBuildpacksFullProject"'
          - '"TestCNBIntegrationProjectDescriptor"'

          - '"TestGolangIntegration"'
          - '"TestGradleIntegration"'

          #          Jenkins tests are still not implemented(skipped) yet
          #          - '"TestJenkinsIntegration"'

          - '"TestMavenIntegration"'
          - '"TestMTAIntegration"'
          - '"TestNexusIntegration"'

          #         these are light-weighed tests, so we can use only one pod to reduce resource consumption
          - '"Test(Gauge|GCS|GitHub|GitOps|Influx|NPM|Piper|Python|Sonar|Vault|Karma)Integration"'

    runs-on: ${{ matrix.os }}
    steps:
      - uses: actions/checkout@v3
      - uses: actions/setup-go@v3
        with:
          go-version: ${{ env.GHA_GO_VERSION }}
      - uses: actions/download-artifact@v3
        with:
          name: |
            piper
            integration_tests
            **.tar.gz
      - name: Run test
        run: |
          for image in `ls -1 | grep .tar.gz`
          do
            docker load -i image
          done
          chmod +x piper integration_tests
          mv integration_tests ./integration/
          cd ./integration
          ./integration_tests -test.v -test.timeout ${TIMEOUT} -test.run ${{ matrix.version }}

  Finish:
    name: Finish
    if: always() && ( needs.start.result == 'success' )
    needs:
      - start
      - build_piper
      - build_integration_tests
      - docker_image_buffering
      - run_integration_tests
    runs-on: ubuntu-latest
    steps:
      - name: Update status
        run: |
          if [[ "${{ needs.run_integration_tests.result }}" == "success" ]]
          then
            curl \
              --location \
              --request POST 'https://api.github.com/repos/SAP/jenkins-library/statuses/${{ needs.start.outputs.commit_id }}' \
              -H 'Content-Type: application/json' \
              --data '{"state": "success",
                      "context": "Go / integration-tests",
                      "target_url": "https://github.com/SAP/jenkins-library/actions/runs/${{ github.run_id }}"}' \
              -H 'Authorization: token ${{secrets.INTEGRATION_TEST_VOTING_TOKEN}}' && \
            exit 0
          else
            curl \
              --location \
              --request POST 'https://api.github.com/repos/SAP/jenkins-library/statuses/${{ needs.start.outputs.commit_id }}' \
              -H 'Content-Type: application/json' \
              --data '{"state": "failure",
                      "context": "Go / integration-tests",
                      "target_url": "https://github.com/SAP/jenkins-library/actions/runs/${{ github.run_id }}"}' \
              -H 'Authorization: token ${{secrets.INTEGRATION_TEST_VOTING_TOKEN}}' && \
            exit 1
          fi
