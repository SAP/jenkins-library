// Code generated by mockery v2.43.0. DO NOT EDIT.

package mocks

import (
	context "context"

	mock "github.com/stretchr/testify/mock"

	time "time"
)

// Task is an autogenerated mock type for the Task type
type Task struct {
	mock.Mock
}

type Task_Expecter struct {
	mock *mock.Mock
}

func (_m *Task) EXPECT() *Task_Expecter {
	return &Task_Expecter{mock: &_m.Mock}
}

// BuildNumber provides a mock function with given fields:
func (_m *Task) BuildNumber() (int64, error) {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for BuildNumber")
	}

	var r0 int64
	var r1 error
	if rf, ok := ret.Get(0).(func() (int64, error)); ok {
		return rf()
	}
	if rf, ok := ret.Get(0).(func() int64); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(int64)
	}

	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Task_BuildNumber_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'BuildNumber'
type Task_BuildNumber_Call struct {
	*mock.Call
}

// BuildNumber is a helper method to define mock.On call
func (_e *Task_Expecter) BuildNumber() *Task_BuildNumber_Call {
	return &Task_BuildNumber_Call{Call: _e.mock.On("BuildNumber")}
}

func (_c *Task_BuildNumber_Call) Run(run func()) *Task_BuildNumber_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *Task_BuildNumber_Call) Return(_a0 int64, _a1 error) *Task_BuildNumber_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *Task_BuildNumber_Call) RunAndReturn(run func() (int64, error)) *Task_BuildNumber_Call {
	_c.Call.Return(run)
	return _c
}

// HasStarted provides a mock function with given fields:
func (_m *Task) HasStarted() bool {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for HasStarted")
	}

	var r0 bool
	if rf, ok := ret.Get(0).(func() bool); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(bool)
	}

	return r0
}

// Task_HasStarted_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'HasStarted'
type Task_HasStarted_Call struct {
	*mock.Call
}

// HasStarted is a helper method to define mock.On call
func (_e *Task_Expecter) HasStarted() *Task_HasStarted_Call {
	return &Task_HasStarted_Call{Call: _e.mock.On("HasStarted")}
}

func (_c *Task_HasStarted_Call) Run(run func()) *Task_HasStarted_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *Task_HasStarted_Call) Return(_a0 bool) *Task_HasStarted_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *Task_HasStarted_Call) RunAndReturn(run func() bool) *Task_HasStarted_Call {
	_c.Call.Return(run)
	return _c
}

// Poll provides a mock function with given fields: _a0
func (_m *Task) Poll(_a0 context.Context) (int, error) {
	ret := _m.Called(_a0)

	if len(ret) == 0 {
		panic("no return value specified for Poll")
	}

	var r0 int
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context) (int, error)); ok {
		return rf(_a0)
	}
	if rf, ok := ret.Get(0).(func(context.Context) int); ok {
		r0 = rf(_a0)
	} else {
		r0 = ret.Get(0).(int)
	}

	if rf, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Task_Poll_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Poll'
type Task_Poll_Call struct {
	*mock.Call
}

// Poll is a helper method to define mock.On call
//   - _a0 context.Context
func (_e *Task_Expecter) Poll(_a0 interface{}) *Task_Poll_Call {
	return &Task_Poll_Call{Call: _e.mock.On("Poll", _a0)}
}

func (_c *Task_Poll_Call) Run(run func(_a0 context.Context)) *Task_Poll_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context))
	})
	return _c
}

func (_c *Task_Poll_Call) Return(_a0 int, _a1 error) *Task_Poll_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *Task_Poll_Call) RunAndReturn(run func(context.Context) (int, error)) *Task_Poll_Call {
	_c.Call.Return(run)
	return _c
}

// WaitToStart provides a mock function with given fields: ctx, pollInterval
func (_m *Task) WaitToStart(ctx context.Context, pollInterval time.Duration) (int64, error) {
	ret := _m.Called(ctx, pollInterval)

	if len(ret) == 0 {
		panic("no return value specified for WaitToStart")
	}

	var r0 int64
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, time.Duration) (int64, error)); ok {
		return rf(ctx, pollInterval)
	}
	if rf, ok := ret.Get(0).(func(context.Context, time.Duration) int64); ok {
		r0 = rf(ctx, pollInterval)
	} else {
		r0 = ret.Get(0).(int64)
	}

	if rf, ok := ret.Get(1).(func(context.Context, time.Duration) error); ok {
		r1 = rf(ctx, pollInterval)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Task_WaitToStart_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'WaitToStart'
type Task_WaitToStart_Call struct {
	*mock.Call
}

// WaitToStart is a helper method to define mock.On call
//   - ctx context.Context
//   - pollInterval time.Duration
func (_e *Task_Expecter) WaitToStart(ctx interface{}, pollInterval interface{}) *Task_WaitToStart_Call {
	return &Task_WaitToStart_Call{Call: _e.mock.On("WaitToStart", ctx, pollInterval)}
}

func (_c *Task_WaitToStart_Call) Run(run func(ctx context.Context, pollInterval time.Duration)) *Task_WaitToStart_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(time.Duration))
	})
	return _c
}

func (_c *Task_WaitToStart_Call) Return(_a0 int64, _a1 error) *Task_WaitToStart_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *Task_WaitToStart_Call) RunAndReturn(run func(context.Context, time.Duration) (int64, error)) *Task_WaitToStart_Call {
	_c.Call.Return(run)
	return _c
}

// NewTask creates a new instance of Task. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewTask(t interface {
	mock.TestingT
	Cleanup(func())
}) *Task {
	mock := &Task{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
