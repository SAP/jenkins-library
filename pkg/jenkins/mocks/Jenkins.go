// Code generated by mockery v2.7.5. DO NOT EDIT.

package mocks

import (
	context "context"

	gojenkins "github.com/bndr/gojenkins"

	mock "github.com/stretchr/testify/mock"
)

// Jenkins is an autogenerated mock type for the Jenkins type
type Jenkins struct {
	mock.Mock
}

// BuildJob provides a mock function with given fields: ctx, name, params
func (_m *Jenkins) BuildJob(ctx context.Context, name string, params map[string]string) (int64, error) {
	ret := _m.Called(ctx, name, params)

	var r0 int64
	if rf, ok := ret.Get(0).(func(context.Context, string, map[string]string) int64); ok {
		r0 = rf(ctx, name, params)
	} else {
		r0 = ret.Get(0).(int64)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string, map[string]string) error); ok {
		r1 = rf(ctx, name, params)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetBuildFromQueueID provides a mock function with given fields: ctx, queueid
func (_m *Jenkins) GetBuildFromQueueID(ctx context.Context, queueid int64) (*gojenkins.Build, error) {
	ret := _m.Called(ctx, queueid)

	var r0 *gojenkins.Build
	if rf, ok := ret.Get(0).(func(context.Context, int64) *gojenkins.Build); ok {
		r0 = rf(ctx, queueid)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*gojenkins.Build)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, int64) error); ok {
		r1 = rf(ctx, queueid)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}
