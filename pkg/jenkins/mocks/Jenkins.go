// Code generated by mockery v1.0.0. DO NOT EDIT.

package mocks

import (
	gojenkins "github.com/bndr/gojenkins"

	mock "github.com/stretchr/testify/mock"
)

// Jenkins is an autogenerated mock type for the Jenkins type
type Jenkins struct {
	mock.Mock
}

// BuildJob provides a mock function with given fields: name, options
func (_m *Jenkins) BuildJob(name string, options ...interface{}) (int64, error) {
	var _ca []interface{}
	_ca = append(_ca, name)
	_ca = append(_ca, options...)
	ret := _m.Called(_ca...)

	var r0 int64
	if rf, ok := ret.Get(0).(func(string, ...interface{}) int64); ok {
		r0 = rf(name, options...)
	} else {
		r0 = ret.Get(0).(int64)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string, ...interface{}) error); ok {
		r1 = rf(name, options...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetBuild provides a mock function with given fields: jobName, number
func (_m *Jenkins) GetBuild(jobName string, number int64) (*gojenkins.Build, error) {
	ret := _m.Called(jobName, number)

	var r0 *gojenkins.Build
	if rf, ok := ret.Get(0).(func(string, int64) *gojenkins.Build); ok {
		r0 = rf(jobName, number)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*gojenkins.Build)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string, int64) error); ok {
		r1 = rf(jobName, number)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetQueueItem provides a mock function with given fields: id
func (_m *Jenkins) GetQueueItem(id int64) (*gojenkins.Task, error) {
	ret := _m.Called(id)

	var r0 *gojenkins.Task
	if rf, ok := ret.Get(0).(func(int64) *gojenkins.Task); ok {
		r0 = rf(id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*gojenkins.Task)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(int64) error); ok {
		r1 = rf(id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}
