// Code generated by mockery v2.43.0. DO NOT EDIT.

package mocks

import (
	context "context"

	mock "github.com/stretchr/testify/mock"
)

// Artifact is an autogenerated mock type for the Artifact type
type Artifact struct {
	mock.Mock
}

type Artifact_Expecter struct {
	mock *mock.Mock
}

func (_m *Artifact) EXPECT() *Artifact_Expecter {
	return &Artifact_Expecter{mock: &_m.Mock}
}

// FileName provides a mock function with given fields:
func (_m *Artifact) FileName() string {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for FileName")
	}

	var r0 string
	if rf, ok := ret.Get(0).(func() string); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(string)
	}

	return r0
}

// Artifact_FileName_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'FileName'
type Artifact_FileName_Call struct {
	*mock.Call
}

// FileName is a helper method to define mock.On call
func (_e *Artifact_Expecter) FileName() *Artifact_FileName_Call {
	return &Artifact_FileName_Call{Call: _e.mock.On("FileName")}
}

func (_c *Artifact_FileName_Call) Run(run func()) *Artifact_FileName_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *Artifact_FileName_Call) Return(_a0 string) *Artifact_FileName_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *Artifact_FileName_Call) RunAndReturn(run func() string) *Artifact_FileName_Call {
	_c.Call.Return(run)
	return _c
}

// GetData provides a mock function with given fields: ctx
func (_m *Artifact) GetData(ctx context.Context) ([]byte, error) {
	ret := _m.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for GetData")
	}

	var r0 []byte
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context) ([]byte, error)); ok {
		return rf(ctx)
	}
	if rf, ok := ret.Get(0).(func(context.Context) []byte); ok {
		r0 = rf(ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]byte)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = rf(ctx)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Artifact_GetData_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetData'
type Artifact_GetData_Call struct {
	*mock.Call
}

// GetData is a helper method to define mock.On call
//   - ctx context.Context
func (_e *Artifact_Expecter) GetData(ctx interface{}) *Artifact_GetData_Call {
	return &Artifact_GetData_Call{Call: _e.mock.On("GetData", ctx)}
}

func (_c *Artifact_GetData_Call) Run(run func(ctx context.Context)) *Artifact_GetData_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context))
	})
	return _c
}

func (_c *Artifact_GetData_Call) Return(_a0 []byte, _a1 error) *Artifact_GetData_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *Artifact_GetData_Call) RunAndReturn(run func(context.Context) ([]byte, error)) *Artifact_GetData_Call {
	_c.Call.Return(run)
	return _c
}

// Save provides a mock function with given fields: ctx, path
func (_m *Artifact) Save(ctx context.Context, path string) (bool, error) {
	ret := _m.Called(ctx, path)

	if len(ret) == 0 {
		panic("no return value specified for Save")
	}

	var r0 bool
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) (bool, error)); ok {
		return rf(ctx, path)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) bool); ok {
		r0 = rf(ctx, path)
	} else {
		r0 = ret.Get(0).(bool)
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, path)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Artifact_Save_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Save'
type Artifact_Save_Call struct {
	*mock.Call
}

// Save is a helper method to define mock.On call
//   - ctx context.Context
//   - path string
func (_e *Artifact_Expecter) Save(ctx interface{}, path interface{}) *Artifact_Save_Call {
	return &Artifact_Save_Call{Call: _e.mock.On("Save", ctx, path)}
}

func (_c *Artifact_Save_Call) Run(run func(ctx context.Context, path string)) *Artifact_Save_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *Artifact_Save_Call) Return(_a0 bool, _a1 error) *Artifact_Save_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *Artifact_Save_Call) RunAndReturn(run func(context.Context, string) (bool, error)) *Artifact_Save_Call {
	_c.Call.Return(run)
	return _c
}

// SaveToDir provides a mock function with given fields: ctx, dir
func (_m *Artifact) SaveToDir(ctx context.Context, dir string) (bool, error) {
	ret := _m.Called(ctx, dir)

	if len(ret) == 0 {
		panic("no return value specified for SaveToDir")
	}

	var r0 bool
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) (bool, error)); ok {
		return rf(ctx, dir)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) bool); ok {
		r0 = rf(ctx, dir)
	} else {
		r0 = ret.Get(0).(bool)
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, dir)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Artifact_SaveToDir_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SaveToDir'
type Artifact_SaveToDir_Call struct {
	*mock.Call
}

// SaveToDir is a helper method to define mock.On call
//   - ctx context.Context
//   - dir string
func (_e *Artifact_Expecter) SaveToDir(ctx interface{}, dir interface{}) *Artifact_SaveToDir_Call {
	return &Artifact_SaveToDir_Call{Call: _e.mock.On("SaveToDir", ctx, dir)}
}

func (_c *Artifact_SaveToDir_Call) Run(run func(ctx context.Context, dir string)) *Artifact_SaveToDir_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *Artifact_SaveToDir_Call) Return(_a0 bool, _a1 error) *Artifact_SaveToDir_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *Artifact_SaveToDir_Call) RunAndReturn(run func(context.Context, string) (bool, error)) *Artifact_SaveToDir_Call {
	_c.Call.Return(run)
	return _c
}

// NewArtifact creates a new instance of Artifact. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewArtifact(t interface {
	mock.TestingT
	Cleanup(func())
}) *Artifact {
	mock := &Artifact{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
