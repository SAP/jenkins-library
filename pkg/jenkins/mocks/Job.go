// Code generated by mockery v2.43.0. DO NOT EDIT.

package mocks

import (
	context "context"

	gojenkins "github.com/bndr/gojenkins"

	mock "github.com/stretchr/testify/mock"
)

// Job is an autogenerated mock type for the Job type
type Job struct {
	mock.Mock
}

type Job_Expecter struct {
	mock *mock.Mock
}

func (_m *Job) EXPECT() *Job_Expecter {
	return &Job_Expecter{mock: &_m.Mock}
}

// GetJob provides a mock function with given fields:
func (_m *Job) GetJob() *gojenkins.Job {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetJob")
	}

	var r0 *gojenkins.Job
	if rf, ok := ret.Get(0).(func() *gojenkins.Job); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*gojenkins.Job)
		}
	}

	return r0
}

// Job_GetJob_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetJob'
type Job_GetJob_Call struct {
	*mock.Call
}

// GetJob is a helper method to define mock.On call
func (_e *Job_Expecter) GetJob() *Job_GetJob_Call {
	return &Job_GetJob_Call{Call: _e.mock.On("GetJob")}
}

func (_c *Job_GetJob_Call) Run(run func()) *Job_GetJob_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *Job_GetJob_Call) Return(_a0 *gojenkins.Job) *Job_GetJob_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *Job_GetJob_Call) RunAndReturn(run func() *gojenkins.Job) *Job_GetJob_Call {
	_c.Call.Return(run)
	return _c
}

// InvokeSimple provides a mock function with given fields: ctx, params
func (_m *Job) InvokeSimple(ctx context.Context, params map[string]string) (int64, error) {
	ret := _m.Called(ctx, params)

	if len(ret) == 0 {
		panic("no return value specified for InvokeSimple")
	}

	var r0 int64
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, map[string]string) (int64, error)); ok {
		return rf(ctx, params)
	}
	if rf, ok := ret.Get(0).(func(context.Context, map[string]string) int64); ok {
		r0 = rf(ctx, params)
	} else {
		r0 = ret.Get(0).(int64)
	}

	if rf, ok := ret.Get(1).(func(context.Context, map[string]string) error); ok {
		r1 = rf(ctx, params)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Job_InvokeSimple_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'InvokeSimple'
type Job_InvokeSimple_Call struct {
	*mock.Call
}

// InvokeSimple is a helper method to define mock.On call
//   - ctx context.Context
//   - params map[string]string
func (_e *Job_Expecter) InvokeSimple(ctx interface{}, params interface{}) *Job_InvokeSimple_Call {
	return &Job_InvokeSimple_Call{Call: _e.mock.On("InvokeSimple", ctx, params)}
}

func (_c *Job_InvokeSimple_Call) Run(run func(ctx context.Context, params map[string]string)) *Job_InvokeSimple_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(map[string]string))
	})
	return _c
}

func (_c *Job_InvokeSimple_Call) Return(_a0 int64, _a1 error) *Job_InvokeSimple_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *Job_InvokeSimple_Call) RunAndReturn(run func(context.Context, map[string]string) (int64, error)) *Job_InvokeSimple_Call {
	_c.Call.Return(run)
	return _c
}

// Poll provides a mock function with given fields: _a0
func (_m *Job) Poll(_a0 context.Context) (int, error) {
	ret := _m.Called(_a0)

	if len(ret) == 0 {
		panic("no return value specified for Poll")
	}

	var r0 int
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context) (int, error)); ok {
		return rf(_a0)
	}
	if rf, ok := ret.Get(0).(func(context.Context) int); ok {
		r0 = rf(_a0)
	} else {
		r0 = ret.Get(0).(int)
	}

	if rf, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Job_Poll_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Poll'
type Job_Poll_Call struct {
	*mock.Call
}

// Poll is a helper method to define mock.On call
//   - _a0 context.Context
func (_e *Job_Expecter) Poll(_a0 interface{}) *Job_Poll_Call {
	return &Job_Poll_Call{Call: _e.mock.On("Poll", _a0)}
}

func (_c *Job_Poll_Call) Run(run func(_a0 context.Context)) *Job_Poll_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context))
	})
	return _c
}

func (_c *Job_Poll_Call) Return(_a0 int, _a1 error) *Job_Poll_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *Job_Poll_Call) RunAndReturn(run func(context.Context) (int, error)) *Job_Poll_Call {
	_c.Call.Return(run)
	return _c
}

// NewJob creates a new instance of Job. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewJob(t interface {
	mock.TestingT
	Cleanup(func())
}) *Job {
	mock := &Job{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
