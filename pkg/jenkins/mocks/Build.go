// Code generated by mockery v2.43.0. DO NOT EDIT.

package mocks

import (
	context "context"

	gojenkins "github.com/bndr/gojenkins"

	mock "github.com/stretchr/testify/mock"
)

// Build is an autogenerated mock type for the Build type
type Build struct {
	mock.Mock
}

type Build_Expecter struct {
	mock *mock.Mock
}

func (_m *Build) EXPECT() *Build_Expecter {
	return &Build_Expecter{mock: &_m.Mock}
}

// GetArtifacts provides a mock function with given fields:
func (_m *Build) GetArtifacts() []gojenkins.Artifact {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetArtifacts")
	}

	var r0 []gojenkins.Artifact
	if rf, ok := ret.Get(0).(func() []gojenkins.Artifact); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]gojenkins.Artifact)
		}
	}

	return r0
}

// Build_GetArtifacts_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetArtifacts'
type Build_GetArtifacts_Call struct {
	*mock.Call
}

// GetArtifacts is a helper method to define mock.On call
func (_e *Build_Expecter) GetArtifacts() *Build_GetArtifacts_Call {
	return &Build_GetArtifacts_Call{Call: _e.mock.On("GetArtifacts")}
}

func (_c *Build_GetArtifacts_Call) Run(run func()) *Build_GetArtifacts_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *Build_GetArtifacts_Call) Return(_a0 []gojenkins.Artifact) *Build_GetArtifacts_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *Build_GetArtifacts_Call) RunAndReturn(run func() []gojenkins.Artifact) *Build_GetArtifacts_Call {
	_c.Call.Return(run)
	return _c
}

// IsRunning provides a mock function with given fields: ctx
func (_m *Build) IsRunning(ctx context.Context) bool {
	ret := _m.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for IsRunning")
	}

	var r0 bool
	if rf, ok := ret.Get(0).(func(context.Context) bool); ok {
		r0 = rf(ctx)
	} else {
		r0 = ret.Get(0).(bool)
	}

	return r0
}

// Build_IsRunning_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'IsRunning'
type Build_IsRunning_Call struct {
	*mock.Call
}

// IsRunning is a helper method to define mock.On call
//   - ctx context.Context
func (_e *Build_Expecter) IsRunning(ctx interface{}) *Build_IsRunning_Call {
	return &Build_IsRunning_Call{Call: _e.mock.On("IsRunning", ctx)}
}

func (_c *Build_IsRunning_Call) Run(run func(ctx context.Context)) *Build_IsRunning_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context))
	})
	return _c
}

func (_c *Build_IsRunning_Call) Return(_a0 bool) *Build_IsRunning_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *Build_IsRunning_Call) RunAndReturn(run func(context.Context) bool) *Build_IsRunning_Call {
	_c.Call.Return(run)
	return _c
}

// Poll provides a mock function with given fields: ctx, options
func (_m *Build) Poll(ctx context.Context, options ...interface{}) (int, error) {
	var _ca []interface{}
	_ca = append(_ca, ctx)
	_ca = append(_ca, options...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for Poll")
	}

	var r0 int
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, ...interface{}) (int, error)); ok {
		return rf(ctx, options...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, ...interface{}) int); ok {
		r0 = rf(ctx, options...)
	} else {
		r0 = ret.Get(0).(int)
	}

	if rf, ok := ret.Get(1).(func(context.Context, ...interface{}) error); ok {
		r1 = rf(ctx, options...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Build_Poll_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Poll'
type Build_Poll_Call struct {
	*mock.Call
}

// Poll is a helper method to define mock.On call
//   - ctx context.Context
//   - options ...interface{}
func (_e *Build_Expecter) Poll(ctx interface{}, options ...interface{}) *Build_Poll_Call {
	return &Build_Poll_Call{Call: _e.mock.On("Poll",
		append([]interface{}{ctx}, options...)...)}
}

func (_c *Build_Poll_Call) Run(run func(ctx context.Context, options ...interface{})) *Build_Poll_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]interface{}, len(args)-1)
		for i, a := range args[1:] {
			if a != nil {
				variadicArgs[i] = a.(interface{})
			}
		}
		run(args[0].(context.Context), variadicArgs...)
	})
	return _c
}

func (_c *Build_Poll_Call) Return(_a0 int, _a1 error) *Build_Poll_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *Build_Poll_Call) RunAndReturn(run func(context.Context, ...interface{}) (int, error)) *Build_Poll_Call {
	_c.Call.Return(run)
	return _c
}

// NewBuild creates a new instance of Build. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewBuild(t interface {
	mock.TestingT
	Cleanup(func())
}) *Build {
	mock := &Build{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
