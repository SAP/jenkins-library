// Code generated by mockery v2.14.0. DO NOT EDIT.

package mocks

import mock "github.com/stretchr/testify/mock"

// HelmExecutor is an autogenerated mock type for the HelmExecutor type
type HelmExecutor struct {
	mock.Mock
}

// RunHelmDependency provides a mock function with given fields:
func (_m *HelmExecutor) RunHelmDependency() error {
	ret := _m.Called()

	var r0 error
	if rf, ok := ret.Get(0).(func() error); ok {
		r0 = rf()
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// RunHelmInstall provides a mock function with given fields:
func (_m *HelmExecutor) RunHelmInstall() error {
	ret := _m.Called()

	var r0 error
	if rf, ok := ret.Get(0).(func() error); ok {
		r0 = rf()
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// RunHelmLint provides a mock function with given fields:
func (_m *HelmExecutor) RunHelmLint() error {
	ret := _m.Called()

	var r0 error
	if rf, ok := ret.Get(0).(func() error); ok {
		r0 = rf()
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// RunHelmPublish provides a mock function with given fields:
func (_m *HelmExecutor) RunHelmPublish() (string, error) {
	ret := _m.Called()

	var r0 string
	if rf, ok := ret.Get(0).(func() string); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(string)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// RunHelmTest provides a mock function with given fields:
func (_m *HelmExecutor) RunHelmTest() error {
	ret := _m.Called()

	var r0 error
	if rf, ok := ret.Get(0).(func() error); ok {
		r0 = rf()
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// RunHelmUninstall provides a mock function with given fields:
func (_m *HelmExecutor) RunHelmUninstall() error {
	ret := _m.Called()

	var r0 error
	if rf, ok := ret.Get(0).(func() error); ok {
		r0 = rf()
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// RunHelmUpgrade provides a mock function with given fields:
func (_m *HelmExecutor) RunHelmUpgrade() error {
	ret := _m.Called()

	var r0 error
	if rf, ok := ret.Get(0).(func() error); ok {
		r0 = rf()
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

type mockConstructorTestingTNewHelmExecutor interface {
	mock.TestingT
	Cleanup(func())
}

// NewHelmExecutor creates a new instance of HelmExecutor. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewHelmExecutor(t mockConstructorTestingTNewHelmExecutor) *HelmExecutor {
	mock := &HelmExecutor{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
