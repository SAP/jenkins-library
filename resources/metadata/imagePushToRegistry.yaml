metadata:
  name: imagePushToRegistry
  description: Allows you to copy a Docker image from a source container registry  to a destination container registry.
  longDescription: |-
    In case you want to pull an existing image from a remote container registry, a source image and source registry needs to be specified.<br />
    This makes it possible to move an image from one registry to another.

    The imagePushToRegistry is not similar in functionality to containerPushToRegistry (which is currently a groovy based step and only be used in jenkins).
    Currently the imagePushToRegistry only supports copying a local image or image from source remote registry to destination registry.

spec:
  inputs:
    resources:
      - name: source
        type: stash
    params:
      - name: targetImages
        type: "[]string"
        description: |
          Defines the names (incl. tag) of the images that will be pushed to the target registry. If empty, sourceImages will be used.
          Please ensure that targetImages and sourceImages correspond to each other: the first image in sourceImages will be mapped to the first image in the targetImages parameter.
        scope:
          - PARAMETERS
          - STAGES
          - STEPS
      - name: sourceImages
        type: "[]string"
        description: |
          Defines the names (incl. tag) of the images that will be pulled from source registry. This is helpful for moving images from one location to another.
          Please ensure that targetImages and sourceImages correspond to each other: the first image in sourceImages will be mapped to the first image in the targetImages parameter.
        mandatory: true
        scope:
          - PARAMETERS
          - STAGES
          - STEPS
        resourceRef:
          - name: commonPipelineEnvironment
            param: container/imageNameTags
      - name: sourceRegistryUrl
        description: Defines a registry url from where the image should optionally be pulled from, incl. the protocol like `https://my.registry.com`*"
        type: string
        mandatory: true
        scope:
          - PARAMETERS
          - STAGES
          - STEPS
        resourceRef:
          - name: commonPipelineEnvironment
            param: container/registryUrl
      - name: sourceRegistryUser
        type: string
        secret: true
        description: Username of the source registry where the image should be pushed pulled from.
        scope:
          - PARAMETERS
          - STAGES
          - STEPS
        resourceRef:
          - name: commonPipelineEnvironment
            param: container/repositoryUsername
          - type: vaultSecret
            name: registryCredentialsVaultSecretName
            default: docker-registry
      - name: sourceRegistryPassword
        type: string
        secret: true
        description: Password of the source registry where the image should be pushed pulled from.
        scope:
          - PARAMETERS
          - STAGES
          - STEPS
        resourceRef:
          - name: commonPipelineEnvironment
            param: container/repositoryPassword
          - type: vaultSecret
            name: registryCredentialsVaultSecretName
            default: docker-registry
      - name: targetRegistryUrl
        description: Defines a registry url from where the image should optionally be pushed to, incl. the protocol like `https://my.registry.com`*"
        type: string
        mandatory: true
        scope:
          - PARAMETERS
          - STAGES
          - STEPS
      - name: targetRegistryUser
        type: string
        secret: true
        mandatory: true
        description: Username of the target registry where the image should be pushed to.
        scope:
          - PARAMETERS
          - STAGES
          - STEPS
        resourceRef:
          - type: vaultSecret
            name: registryCredentialsVaultSecretName
            default: docker-registry
      - name: targetRegistryPassword
        type: string
        secret: true
        description: Password of the target registry where the image should be pushed to.
        mandatory: true
        scope:
          - PARAMETERS
          - STAGES
          - STEPS
        resourceRef:
          - type: vaultSecret
            name: registryCredentialsVaultSecretName
            default: docker-registry
      - name: tagLatest
        description: "Defines if the image should be tagged as `latest`"
        type: bool
        scope:
          - PARAMETERS
          - STAGES
          - STEPS
      - name: tagArtifactVersion
        description: "The parameter is not supported yet. Defines if the image should be tagged with the artifact version"
        type: bool
        scope:
          - PARAMETERS
          - STAGES
          - STEPS
      - name: dockerConfigJSON
        type: string
        secret: true
        description: Path to the file `.docker/config.json` - this is typically provided by your CI/CD system. You can find more details about the Docker credentials in the [Docker documentation](https://docs.docker.com/engine/reference/commandline/login/).
        scope:
          - PARAMETERS
          - STAGES
          - STEPS
        resourceRef:
          - type: vaultSecretFile
            name: dockerConfigFileVaultSecretName
            default: docker-config
      - name: localDockerImagePath
        description: "If the `localDockerImagePath` is a directory, it will be read as an OCI image layout. Otherwise, `localDockerImagePath` is assumed to be a docker-style tarball."
        type: string
        scope:
          - PARAMETERS
          - STAGES
          - STEPS
      - name: targetArchitecture
        type: string
        description: Specifies the targetArchitecture in the form os/arch[/variant][:osversion] (e.g. linux/amd64). All OS and architectures of the specified image will be copied if it is a multi-platform image. To only push a single platform to the target registry use this parameter
        scope:
          - STEPS
          - PARAMETERS
  containers:
    - image: gcr.io/go-containerregistry/crane:debug
      command:
        - /busybox/tail -f /dev/null
      shell: /busybox/sh
      options:
        - name: -u
          value: "0"
        - name: --entrypoint
          value: ""
      env:
        - name: container
          value: docker
