#Project Setup
general:
  productiveBranch: 'master'

#Steps Specific Configuration
steps:
  artifactSetVersion:
    timestampTemplate: '%Y%m%d%H%M%S'
    tagPrefix: 'build_'
    commitVersion: true
    maven:
      filePath: 'pom.xml'
      versioningTemplate: '${version}-${timestamp}${commitId?"_"+commitId:""}'
    docker:
      filePath: 'Dockerfile'
      versioningTemplate: '${version}-${timestamp}${commitId?"_"+commitId:""}'
  checksPublishResults:
    aggregation:
      active: true
      thresholds:
        fail:
          high: '0'
    tasks:
      pattern: '**/*.java'
      low: ''
      normal: 'TODO,REVISE,XXX'
      high: 'FIXME'
      archive: true
      active: false
      thresholds:
        fail:
          high: '0'
    pmd:
      pattern: '**/target/pmd.xml'
      archive: true
      active: false
      thresholds:
        fail:
          high: '0'
    cpd:
      pattern: '**/target/cpd.xml'
      archive: true
      active: false
      thresholds:
        fail:
          high: '0'
    findbugs:
      pattern: '**/target/findbugsXml.xml, **/target/findbugs.xml'
      archive: true
      active: false
      thresholds:
        fail:
          high: '0'
    checkstyle:
      pattern: '**/target/checkstyle-result.xml'
      archive: true
      active: false
      thresholds:
        fail:
          high: '0'
    eslint:
      pattern: '**/eslint.xml'
      archive: true
      active: false
      thresholds:
        fail:
          high: '0'
    pylint:
      pattern: '**/pylint.log'
      archive: true
      active: false
      thresholds:
        fail:
          high: '0'
    archive: false
  influxWriteData:
    influxServer: 'jenkins'
  mavenExecute:
    dockerImage: 'maven:3.5-jdk-7'
    logSuccessfulMavenTransfers: false
  mtaBuild:
    buildTarget: 'NEO'
    mtaJarLocation: 'mta.jar'
  neoDeploy:
    deployMode: 'mta'
    warAction: 'deploy'
    vmSize: 'lite'
    neoCredentialsId: 'CI_CREDENTIALS_ID'
  pipelineStashFilesAfterBuild:
    runOpaTests: false
    stashIncludes:
      checkmarx: '**/*.js, **/*.scala, **/*.py, **/*.go, **/*.xml, **/*.html'
      classFiles: '**/target/classes/**/*.class, **/target/test-classes/**/*.class'
      sonar: '**/jacoco*.exec, **/sonar-project.properties'
    stashExcludes:
      checkmarx: '**/*.mockserver.js, node_modules/**/*.js'
      classFiles: ''
      sonar: ''
  pipelineStashFilesBeforeBuild:
    runCheckmarx: false
    stashIncludes:
      buildDescriptor: '**/pom.xml, **/.mvn/**, **/assembly.xml, **/.swagger-codegen-ignore, **/package.json, **/requirements.txt, **/setup.py, **/whitesource_config.py, **/mta*.y*ml, **/.npmrc, **/whitesource.*.json, **/whitesource-fs-agent.config, .xmake.cfg, Dockerfile, **/VERSION, **/version.txt, **/build.sbt, **/sbtDescriptor.json, **/project/*'
      deployDescriptor: '**/manifest*.y*ml, **/*.mtaext.y*ml, **/*.mtaext, **/xs-app.json, helm/**, *.y*ml'
      git: '**/gitmetadata/**'
      opa5: '**/*.*'
      opensourceConfiguration: '**/srcclr.yml, **/vulas-custom.properties, **/.nsprc, **/.retireignore, **/.retireignore.json, **/.snyk'
      pipelineConfigAndTests: '.pipeline/*.*'
      securityDescriptor: '**/xs-security.json'
      tests: '**/pom.xml, **/*.json, **/*.xml, **/src/**, **/node_modules/**, **/specs/**, **/env/**, **/*.js'
    stashExcludes:
      buildDescriptor: '**/node_modules/**/package.json'
      deployDescriptor: ''
      git: ''
      opa5: ''
      opensourceConfiguration: ''
      pipelineConfigAndTests: ''
      securityDescriptor: ''
      tests: ''
  snykExecute:
    buildDescriptorFile: './package.json'
    excludeMtaModules: []
    monitor: true
    scanType: 'npm'
    snykResultFile: 'snyk.json'
    stashContent:
      - 'buildDescriptor'
      - 'opensourceConfiguration'
    toJson: false
  testsPublishResults:
    junit:
      pattern: '**/target/surefire-reports/*.xml'
      updateResults: false
      allowEmptyResults: true
      archive: false
      active: false
    jacoco:
      pattern: '**/target/*.exec'
      allowEmptyResults: true
      archive: false
      active: false
    cobertura:
      pattern: '**/target/coverage/cobertura-coverage.xml'
      onlyStableBuilds: true
      allowEmptyResults: true
      archive: false
      active: false
    jmeter:
      pattern: '**/*.jtl'
      errorFailedThreshold: 20
      errorUnstableThreshold: 10
      errorUnstableResponseTimeThreshold: ''
      relativeFailedThresholdPositive: 0
      relativeFailedThresholdNegative: 0
      relativeUnstableThresholdPositive: 0
      relativeUnstableThresholdNegative: 0
      modeOfThreshold: false
      modeThroughput: false
      nthBuildNumber: 0
      configType: 'PRT'
      failBuildIfNoResultFile: false
      compareBuildPrevious: true
      allowEmptyResults: true
      archive: false
      active: false
